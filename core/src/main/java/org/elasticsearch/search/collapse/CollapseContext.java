begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.collapse
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|collapse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|CollapsingTopDocsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|KeywordFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|InnerHitBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Context used for field collapsing  */
end_comment

begin_class
DECL|class|CollapseContext
specifier|public
class|class
name|CollapseContext
block|{
DECL|field|fieldType
specifier|private
specifier|final
name|MappedFieldType
name|fieldType
decl_stmt|;
DECL|field|innerHit
specifier|private
specifier|final
name|InnerHitBuilder
name|innerHit
decl_stmt|;
DECL|method|CollapseContext
specifier|public
name|CollapseContext
parameter_list|(
name|MappedFieldType
name|fieldType
parameter_list|,
name|InnerHitBuilder
name|innerHit
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|=
name|fieldType
expr_stmt|;
name|this
operator|.
name|innerHit
operator|=
name|innerHit
expr_stmt|;
block|}
comment|/** The field type used for collapsing **/
DECL|method|getFieldType
specifier|public
name|MappedFieldType
name|getFieldType
parameter_list|()
block|{
return|return
name|fieldType
return|;
block|}
comment|/** The inner hit options to expand the collapsed results **/
DECL|method|getInnerHit
specifier|public
name|InnerHitBuilder
name|getInnerHit
parameter_list|()
block|{
return|return
name|innerHit
return|;
block|}
DECL|method|createTopDocs
specifier|public
name|CollapsingTopDocsCollector
argument_list|<
name|?
argument_list|>
name|createTopDocs
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|int
name|topN
parameter_list|,
name|boolean
name|trackMaxScore
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fieldType
operator|instanceof
name|KeywordFieldMapper
operator|.
name|KeywordFieldType
condition|)
block|{
return|return
name|CollapsingTopDocsCollector
operator|.
name|createKeyword
argument_list|(
name|fieldType
operator|.
name|name
argument_list|()
argument_list|,
name|sort
argument_list|,
name|topN
argument_list|,
name|trackMaxScore
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|instanceof
name|NumberFieldMapper
operator|.
name|NumberFieldType
condition|)
block|{
return|return
name|CollapsingTopDocsCollector
operator|.
name|createNumeric
argument_list|(
name|fieldType
operator|.
name|name
argument_list|()
argument_list|,
name|sort
argument_list|,
name|topN
argument_list|,
name|trackMaxScore
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown type for collapse field "
operator|+
name|fieldType
operator|.
name|name
argument_list|()
operator|+
literal|", only keywords and numbers are accepted"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

