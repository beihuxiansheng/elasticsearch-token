begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.collapse
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|collapse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ToXContentToBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|AbstractObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ContextParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|KeywordFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|InnerHitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchContextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_comment
comment|/**  * A builder that enables field collapsing on search request.  */
end_comment

begin_class
DECL|class|CollapseBuilder
specifier|public
class|class
name|CollapseBuilder
implements|implements
name|Writeable
implements|,
name|ToXContentObject
block|{
DECL|field|FIELD_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FIELD_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
DECL|field|INNER_HITS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|INNER_HITS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"inner_hits"
argument_list|)
decl_stmt|;
DECL|field|MAX_CONCURRENT_GROUP_REQUESTS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MAX_CONCURRENT_GROUP_REQUESTS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_concurrent_group_searches"
argument_list|)
decl_stmt|;
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|ObjectParser
argument_list|<
name|CollapseBuilder
argument_list|,
name|QueryParseContext
argument_list|>
name|PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"collapse"
argument_list|,
name|CollapseBuilder
operator|::
operator|new
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareString
argument_list|(
name|CollapseBuilder
operator|::
name|setField
argument_list|,
name|FIELD_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|CollapseBuilder
operator|::
name|setMaxConcurrentGroupRequests
argument_list|,
name|MAX_CONCURRENT_GROUP_REQUESTS_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|parser
parameter_list|,
name|builder
parameter_list|,
name|context
parameter_list|)
lambda|->
block|{
name|XContentParser
operator|.
name|Token
name|currentToken
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentToken
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|builder
operator|.
name|setInnerHits
argument_list|(
name|InnerHitBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentToken
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|List
argument_list|<
name|InnerHitBuilder
argument_list|>
name|innerHitBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|currentToken
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
init|;
name|currentToken
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|;
name|currentToken
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
control|)
block|{
if|if
condition|(
name|currentToken
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|innerHitBuilders
operator|.
name|add
argument_list|(
name|InnerHitBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Invalid token in inner_hits array"
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|setInnerHits
argument_list|(
name|innerHitBuilders
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|INNER_HITS_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT_ARRAY
argument_list|)
expr_stmt|;
block|}
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|innerHits
specifier|private
name|List
argument_list|<
name|InnerHitBuilder
argument_list|>
name|innerHits
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|maxConcurrentGroupRequests
specifier|private
name|int
name|maxConcurrentGroupRequests
init|=
literal|0
decl_stmt|;
DECL|method|CollapseBuilder
specifier|private
name|CollapseBuilder
parameter_list|()
block|{}
comment|/**      * Public constructor      * @param field The name of the field to collapse on      */
DECL|method|CollapseBuilder
specifier|public
name|CollapseBuilder
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|field
argument_list|,
literal|"field must be non-null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|CollapseBuilder
specifier|public
name|CollapseBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|field
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxConcurrentGroupRequests
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1_UNRELEASED
argument_list|)
condition|)
block|{
name|this
operator|.
name|innerHits
operator|=
name|in
operator|.
name|readList
argument_list|(
name|InnerHitBuilder
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InnerHitBuilder
name|innerHitBuilder
init|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|InnerHitBuilder
operator|::
operator|new
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerHitBuilder
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|innerHits
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|innerHitBuilder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|innerHits
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|maxConcurrentGroupRequests
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1_UNRELEASED
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeList
argument_list|(
name|innerHits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|hasInnerHit
init|=
name|innerHits
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasInnerHit
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasInnerHit
condition|)
block|{
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_5_0_UNRELEASED
argument_list|)
condition|)
block|{
name|innerHits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|writeToCollapseBWC
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|innerHits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|CollapseBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|CollapseBuilder
name|builder
init|=
name|PARSER
operator|.
name|parse
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|CollapseBuilder
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
comment|// for object parser only
DECL|method|setField
specifier|private
name|CollapseBuilder
name|setField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field name is null or empty"
argument_list|)
throw|;
block|}
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setInnerHits
specifier|public
name|CollapseBuilder
name|setInnerHits
parameter_list|(
name|InnerHitBuilder
name|innerHit
parameter_list|)
block|{
name|this
operator|.
name|innerHits
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|innerHit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setInnerHits
specifier|public
name|CollapseBuilder
name|setInnerHits
parameter_list|(
name|List
argument_list|<
name|InnerHitBuilder
argument_list|>
name|innerHits
parameter_list|)
block|{
name|this
operator|.
name|innerHits
operator|=
name|innerHits
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMaxConcurrentGroupRequests
specifier|public
name|CollapseBuilder
name|setMaxConcurrentGroupRequests
parameter_list|(
name|int
name|num
parameter_list|)
block|{
if|if
condition|(
name|num
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxConcurrentGroupRequests` must be positive"
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxConcurrentGroupRequests
operator|=
name|num
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The name of the field to collapse against      */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|this
operator|.
name|field
return|;
block|}
comment|/**      * The inner hit options to expand the collapsed results      */
DECL|method|getInnerHits
specifier|public
name|List
argument_list|<
name|InnerHitBuilder
argument_list|>
name|getInnerHits
parameter_list|()
block|{
return|return
name|this
operator|.
name|innerHits
return|;
block|}
comment|/**      * Returns the amount of group requests that are allowed to be ran concurrently in the inner_hits phase.      */
DECL|method|getMaxConcurrentGroupRequests
specifier|public
name|int
name|getMaxConcurrentGroupRequests
parameter_list|()
block|{
return|return
name|maxConcurrentGroupRequests
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|innerToXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|private
name|void
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|FIELD_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxConcurrentGroupRequests
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MAX_CONCURRENT_GROUP_REQUESTS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxConcurrentGroupRequests
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|innerHits
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|innerHits
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|INNER_HITS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|innerHits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|INNER_HITS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InnerHitBuilder
name|innerHit
range|:
name|innerHits
control|)
block|{
name|innerHit
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|CollapseBuilder
name|that
init|=
operator|(
name|CollapseBuilder
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|maxConcurrentGroupRequests
operator|!=
name|that
operator|.
name|maxConcurrentGroupRequests
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|field
operator|.
name|equals
argument_list|(
name|that
operator|.
name|field
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|innerHits
argument_list|,
name|that
operator|.
name|innerHits
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|Objects
operator|.
name|hash
argument_list|(
name|field
argument_list|,
name|innerHits
argument_list|)
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|maxConcurrentGroupRequests
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|build
specifier|public
name|CollapseContext
name|build
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|scrollContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SearchContextException
argument_list|(
name|context
argument_list|,
literal|"cannot use `collapse` in a scroll context"
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|.
name|searchAfter
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SearchContextException
argument_list|(
name|context
argument_list|,
literal|"cannot use `collapse` in conjunction with `search_after`"
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|.
name|rescore
argument_list|()
operator|!=
literal|null
operator|&&
name|context
operator|.
name|rescore
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SearchContextException
argument_list|(
name|context
argument_list|,
literal|"cannot use `collapse` in conjunction with `rescore`"
argument_list|)
throw|;
block|}
name|MappedFieldType
name|fieldType
init|=
name|context
operator|.
name|getQueryShardContext
argument_list|()
operator|.
name|fieldMapper
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SearchContextException
argument_list|(
name|context
argument_list|,
literal|"no mapping found for `"
operator|+
name|field
operator|+
literal|"` in order to collapse on"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldType
operator|instanceof
name|KeywordFieldMapper
operator|.
name|KeywordFieldType
operator|==
literal|false
operator|&&
name|fieldType
operator|instanceof
name|NumberFieldMapper
operator|.
name|NumberFieldType
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SearchContextException
argument_list|(
name|context
argument_list|,
literal|"unknown type for collapse field `"
operator|+
name|field
operator|+
literal|"`, only keywords and numbers are accepted"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldType
operator|.
name|hasDocValues
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SearchContextException
argument_list|(
name|context
argument_list|,
literal|"cannot collapse on field `"
operator|+
name|field
operator|+
literal|"` without `doc_values`"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldType
operator|.
name|indexOptions
argument_list|()
operator|==
name|IndexOptions
operator|.
name|NONE
operator|&&
operator|(
name|innerHits
operator|!=
literal|null
operator|&&
operator|!
name|innerHits
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|SearchContextException
argument_list|(
name|context
argument_list|,
literal|"cannot expand `inner_hits` for collapse field `"
operator|+
name|field
operator|+
literal|"`, "
operator|+
literal|"only indexed field can retrieve `inner_hits`"
argument_list|)
throw|;
block|}
return|return
operator|new
name|CollapseContext
argument_list|(
name|fieldType
argument_list|,
name|innerHits
argument_list|)
return|;
block|}
block|}
end_class

end_unit

