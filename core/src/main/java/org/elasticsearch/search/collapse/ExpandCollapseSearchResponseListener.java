begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.collapse
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|collapse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|BoolQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|InnerHitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_comment
comment|/**  * A search response listener that intercepts the search response and expands collapsed hits  * using the {@link CollapseBuilder#innerHit} options.  */
end_comment

begin_class
DECL|class|ExpandCollapseSearchResponseListener
specifier|public
class|class
name|ExpandCollapseSearchResponseListener
implements|implements
name|BiConsumer
argument_list|<
name|SearchRequest
argument_list|,
name|SearchResponse
argument_list|>
block|{
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|method|ExpandCollapseSearchResponseListener
specifier|public
name|ExpandCollapseSearchResponseListener
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|public
name|void
name|accept
parameter_list|(
name|SearchRequest
name|searchRequest
parameter_list|,
name|SearchResponse
name|searchResponse
parameter_list|)
block|{
if|if
condition|(
name|searchRequest
operator|.
name|source
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return ;
block|}
name|CollapseBuilder
name|collapseBuilder
init|=
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|collapse
argument_list|()
decl_stmt|;
if|if
condition|(
name|collapseBuilder
operator|==
literal|null
operator|||
name|collapseBuilder
operator|.
name|getInnerHit
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return ;
block|}
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
name|InternalSearchHit
name|internalHit
init|=
operator|(
name|InternalSearchHit
operator|)
name|hit
decl_stmt|;
name|BoolQueryBuilder
name|groupQuery
init|=
operator|new
name|BoolQueryBuilder
argument_list|()
decl_stmt|;
name|Object
name|collapseValue
init|=
name|internalHit
operator|.
name|field
argument_list|(
name|collapseBuilder
operator|.
name|getField
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|collapseValue
operator|!=
literal|null
condition|)
block|{
name|groupQuery
operator|.
name|filter
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
name|collapseBuilder
operator|.
name|getField
argument_list|()
argument_list|,
name|collapseValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupQuery
operator|.
name|mustNot
argument_list|(
name|QueryBuilders
operator|.
name|existsQuery
argument_list|(
name|collapseBuilder
operator|.
name|getField
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QueryBuilder
name|origQuery
init|=
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|query
argument_list|()
decl_stmt|;
if|if
condition|(
name|origQuery
operator|!=
literal|null
condition|)
block|{
name|groupQuery
operator|.
name|must
argument_list|(
name|origQuery
argument_list|)
expr_stmt|;
block|}
name|SearchSourceBuilder
name|sourceBuilder
init|=
name|createGroupSearchBuilder
argument_list|(
name|collapseBuilder
operator|.
name|getInnerHit
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|groupQuery
argument_list|)
decl_stmt|;
name|SearchRequest
name|groupRequest
init|=
operator|new
name|SearchRequest
argument_list|(
name|searchRequest
operator|.
name|indices
argument_list|()
argument_list|)
operator|.
name|types
argument_list|(
name|searchRequest
operator|.
name|types
argument_list|()
argument_list|)
operator|.
name|source
argument_list|(
name|sourceBuilder
argument_list|)
decl_stmt|;
name|SearchResponse
name|groupResponse
init|=
name|client
operator|.
name|search
argument_list|(
name|groupRequest
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|SearchHits
name|innerHits
init|=
name|groupResponse
operator|.
name|getHits
argument_list|()
decl_stmt|;
if|if
condition|(
name|internalHit
operator|.
name|getInnerHits
argument_list|()
operator|==
literal|null
condition|)
block|{
name|internalHit
operator|.
name|setInnerHits
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|internalHit
operator|.
name|getInnerHits
argument_list|()
operator|.
name|put
argument_list|(
name|collapseBuilder
operator|.
name|getInnerHit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|innerHits
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createGroupSearchBuilder
specifier|private
name|SearchSourceBuilder
name|createGroupSearchBuilder
parameter_list|(
name|InnerHitBuilder
name|options
parameter_list|)
block|{
name|SearchSourceBuilder
name|groupSource
init|=
operator|new
name|SearchSourceBuilder
argument_list|()
decl_stmt|;
name|groupSource
operator|.
name|from
argument_list|(
name|options
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|groupSource
operator|.
name|size
argument_list|(
name|options
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|getSorts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|getSorts
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupSource
operator|::
name|sort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|.
name|includes
argument_list|()
operator|==
literal|null
operator|&&
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|.
name|excludes
argument_list|()
operator|==
literal|null
condition|)
block|{
name|groupSource
operator|.
name|fetchSource
argument_list|(
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|.
name|fetchSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupSource
operator|.
name|fetchSource
argument_list|(
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|.
name|includes
argument_list|()
argument_list|,
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|.
name|excludes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|getDocValueFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|getDocValueFields
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupSource
operator|::
name|docValueField
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getStoredFieldsContext
argument_list|()
operator|!=
literal|null
operator|&&
name|options
operator|.
name|getStoredFieldsContext
argument_list|()
operator|.
name|fieldNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|getStoredFieldsContext
argument_list|()
operator|.
name|fieldNames
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupSource
operator|::
name|storedField
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getScriptFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SearchSourceBuilder
operator|.
name|ScriptField
name|field
range|:
name|options
operator|.
name|getScriptFields
argument_list|()
control|)
block|{
name|groupSource
operator|.
name|scriptField
argument_list|(
name|field
operator|.
name|fieldName
argument_list|()
argument_list|,
name|field
operator|.
name|script
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|getHighlightBuilder
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|groupSource
operator|.
name|highlighter
argument_list|(
name|options
operator|.
name|getHighlightBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|groupSource
operator|.
name|explain
argument_list|(
name|options
operator|.
name|isExplain
argument_list|()
argument_list|)
expr_stmt|;
name|groupSource
operator|.
name|trackScores
argument_list|(
name|options
operator|.
name|isTrackScores
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|groupSource
return|;
block|}
block|}
end_class

end_unit

