begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.builder
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectFloatHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ToXContentToBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AbstractAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|innerhits
operator|.
name|InnerHitsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|source
operator|.
name|FetchSourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A search source builder allowing to easily build search source. Simple  * construction using  * {@link org.elasticsearch.search.builder.NewSearchSourceBuilder#searchSource()}.  *  * @see org.elasticsearch.action.search.SearchRequest#source(NewSearchSourceBuilder)  */
end_comment

begin_class
DECL|class|NewSearchSourceBuilder
specifier|public
class|class
name|NewSearchSourceBuilder
extends|extends
name|ToXContentToBytes
implements|implements
name|Writeable
argument_list|<
name|NewSearchSourceBuilder
argument_list|>
block|{
comment|/**      * A static factory method to construct a new search source.      */
DECL|method|searchSource
specifier|public
specifier|static
name|NewSearchSourceBuilder
name|searchSource
parameter_list|()
block|{
return|return
operator|new
name|NewSearchSourceBuilder
argument_list|()
return|;
block|}
comment|/**      * A static factory method to construct new search highlights.      */
DECL|method|highlight
specifier|public
specifier|static
name|HighlightBuilder
name|highlight
parameter_list|()
block|{
return|return
operator|new
name|HighlightBuilder
argument_list|()
return|;
block|}
DECL|field|queryBuilder
specifier|private
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|queryBuilder
decl_stmt|;
DECL|field|postQueryBuilder
specifier|private
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|postQueryBuilder
decl_stmt|;
DECL|field|filterBinary
specifier|private
name|BytesReference
name|filterBinary
decl_stmt|;
DECL|field|from
specifier|private
name|int
name|from
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|explain
specifier|private
name|Boolean
name|explain
decl_stmt|;
DECL|field|version
specifier|private
name|Boolean
name|version
decl_stmt|;
DECL|field|sorts
specifier|private
name|List
argument_list|<
name|BytesReference
argument_list|>
name|sorts
decl_stmt|;
DECL|field|trackScores
specifier|private
name|boolean
name|trackScores
init|=
literal|false
decl_stmt|;
DECL|field|minScore
specifier|private
name|Float
name|minScore
decl_stmt|;
DECL|field|timeoutInMillis
specifier|private
name|long
name|timeoutInMillis
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|terminateAfter
specifier|private
name|int
name|terminateAfter
init|=
name|SearchContext
operator|.
name|DEFAULT_TERMINATE_AFTER
decl_stmt|;
DECL|field|fieldNames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
DECL|field|fieldDataFields
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fieldDataFields
decl_stmt|;
DECL|field|scriptFields
specifier|private
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
decl_stmt|;
DECL|field|fetchSourceContext
specifier|private
name|FetchSourceContext
name|fetchSourceContext
decl_stmt|;
DECL|field|aggregations
specifier|private
name|List
argument_list|<
name|BytesReference
argument_list|>
name|aggregations
decl_stmt|;
DECL|field|aggregationsBinary
specifier|private
name|BytesReference
name|aggregationsBinary
decl_stmt|;
DECL|field|highlightBuilder
specifier|private
name|BytesReference
name|highlightBuilder
decl_stmt|;
DECL|field|suggestBuilder
specifier|private
name|BytesReference
name|suggestBuilder
decl_stmt|;
DECL|field|innerHitsBuilder
specifier|private
name|BytesReference
name|innerHitsBuilder
decl_stmt|;
DECL|field|rescoreBuilders
specifier|private
name|List
argument_list|<
name|BytesReference
argument_list|>
name|rescoreBuilders
decl_stmt|;
DECL|field|defaultRescoreWindowSize
specifier|private
name|Integer
name|defaultRescoreWindowSize
decl_stmt|;
DECL|field|indexBoost
specifier|private
name|ObjectFloatHashMap
argument_list|<
name|String
argument_list|>
name|indexBoost
init|=
literal|null
decl_stmt|;
DECL|field|stats
specifier|private
name|String
index|[]
name|stats
decl_stmt|;
comment|/**      * Constructs a new search source builder.      */
DECL|method|NewSearchSourceBuilder
specifier|public
name|NewSearchSourceBuilder
parameter_list|()
block|{     }
comment|/**      * Constructs a new search source builder with a search query.      *      * @see org.elasticsearch.index.query.QueryBuilders      */
DECL|method|query
specifier|public
name|NewSearchSourceBuilder
name|query
parameter_list|(
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
block|{
name|this
operator|.
name|queryBuilder
operator|=
name|query
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// NOCOMMIT Do we need these methods?
comment|// /**
comment|// * Constructs a new search source builder with a raw search query.
comment|// */
comment|// public NewSearchSourceBuilder query(byte[] queryBinary) {
comment|// return query(queryBinary, 0, queryBinary.length);
comment|// }
comment|//
comment|// /**
comment|// * Constructs a new search source builder with a raw search query.
comment|// */
comment|// public NewSearchSourceBuilder query(byte[] queryBinary, int
comment|// queryBinaryOffset, int queryBinaryLength) {
comment|// return query(new BytesArray(queryBinary, queryBinaryOffset,
comment|// queryBinaryLength));
comment|// }
comment|// /**
comment|// * Constructs a new search source builder with a raw search query.
comment|// */
comment|// public NewSearchSourceBuilder query(BytesReference queryBinary) {
comment|// if (this.queryBuilder == null) {
comment|// this.queryBuilder = new QuerySourceBuilder();
comment|// }
comment|// this.queryBuilder.setQuery(queryBinary);
comment|// return this;
comment|// }
comment|//
comment|// /**
comment|// * Constructs a new search source builder with a raw search query.
comment|// */
comment|// public NewSearchSourceBuilder query(String queryString) {
comment|// return query(queryString.getBytes(Charsets.UTF_8));
comment|// }
comment|//
comment|// /**
comment|// * Constructs a new search source builder with a query from a builder.
comment|// */
comment|// public NewSearchSourceBuilder query(XContentBuilder query) {
comment|// return query(query.bytes());
comment|// }
comment|//
comment|// /**
comment|// * Constructs a new search source builder with a query from a map.
comment|// */
comment|// @SuppressWarnings("unchecked")
comment|// public NewSearchSourceBuilder query(Map query) {
comment|// try {
comment|// XContentBuilder builder =
comment|// XContentFactory.contentBuilder(Requests.CONTENT_TYPE);
comment|// builder.map(query);
comment|// return query(builder);
comment|// } catch (IOException e) {
comment|// throw new ElasticsearchGenerationException("Failed to generate [" + query
comment|// + "]", e);
comment|// }
comment|// }
comment|/**      * Sets a filter that will be executed after the query has been executed and      * only has affect on the search hits (not aggregations). This filter is      * always executed as last filtering mechanism.      */
DECL|method|postFilter
specifier|public
name|NewSearchSourceBuilder
name|postFilter
parameter_list|(
name|QueryBuilder
name|postFilter
parameter_list|)
block|{
name|this
operator|.
name|postQueryBuilder
operator|=
name|postFilter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// NOCOMMIT do we need these methods?
comment|// /**
comment|// * Sets a filter on the query executed that only applies to the search
comment|// query
comment|// * (and not aggs for example).
comment|// */
comment|// public NewSearchSourceBuilder postFilter(String postFilterString) {
comment|// return postFilter(postFilterString.getBytes(Charsets.UTF_8));
comment|// }
comment|//
comment|// /**
comment|// * Sets a filter on the query executed that only applies to the search
comment|// query
comment|// * (and not aggs for example).
comment|// */
comment|// public NewSearchSourceBuilder postFilter(byte[] postFilter) {
comment|// return postFilter(postFilter, 0, postFilter.length);
comment|// }
comment|//
comment|// /**
comment|// * Sets a filter on the query executed that only applies to the search
comment|// query
comment|// * (and not aggs for example).
comment|// */
comment|// public NewSearchSourceBuilder postFilter(byte[] postFilterBinary, int
comment|// postFilterBinaryOffset, int postFilterBinaryLength) {
comment|// return postFilter(new BytesArray(postFilterBinary,
comment|// postFilterBinaryOffset, postFilterBinaryLength));
comment|// }
comment|//
comment|// /**
comment|// * Sets a filter on the query executed that only applies to the search
comment|// query
comment|// * (and not aggs for example).
comment|// */
comment|// public NewSearchSourceBuilder postFilter(BytesReference postFilterBinary)
comment|// {
comment|// this.filterBinary = postFilterBinary;
comment|// return this;
comment|// }
comment|//
comment|// /**
comment|// * Constructs a new search source builder with a query from a builder.
comment|// */
comment|// public NewSearchSourceBuilder postFilter(XContentBuilder postFilter) {
comment|// return postFilter(postFilter.bytes());
comment|// }
comment|//
comment|// /**
comment|// * Constructs a new search source builder with a query from a map.
comment|// */
comment|// @SuppressWarnings("unchecked")
comment|// public NewSearchSourceBuilder postFilter(Map postFilter) {
comment|// try {
comment|// XContentBuilder builder =
comment|// XContentFactory.contentBuilder(Requests.CONTENT_TYPE);
comment|// builder.map(postFilter);
comment|// return postFilter(builder);
comment|// } catch (IOException e) {
comment|// throw new ElasticsearchGenerationException("Failed to generate [" +
comment|// postFilter + "]", e);
comment|// }
comment|// }
comment|/**      * From index to start the search from. Defaults to<tt>0</tt>.      */
DECL|method|from
specifier|public
name|NewSearchSourceBuilder
name|from
parameter_list|(
name|int
name|from
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The number of search hits to return. Defaults to<tt>10</tt>.      */
DECL|method|size
specifier|public
name|NewSearchSourceBuilder
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the minimum score below which docs will be filtered out.      */
DECL|method|minScore
specifier|public
name|NewSearchSourceBuilder
name|minScore
parameter_list|(
name|float
name|minScore
parameter_list|)
block|{
name|this
operator|.
name|minScore
operator|=
name|minScore
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should each {@link org.elasticsearch.search.SearchHit} be returned with      * an explanation of the hit (ranking).      */
DECL|method|explain
specifier|public
name|NewSearchSourceBuilder
name|explain
parameter_list|(
name|Boolean
name|explain
parameter_list|)
block|{
name|this
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should each {@link org.elasticsearch.search.SearchHit} be returned with a      * version associated with it.      */
DECL|method|version
specifier|public
name|NewSearchSourceBuilder
name|version
parameter_list|(
name|Boolean
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * An optional timeout to control how long search is allowed to take.      */
DECL|method|timeout
specifier|public
name|NewSearchSourceBuilder
name|timeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeoutInMillis
operator|=
name|timeout
operator|.
name|millis
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * An optional timeout to control how long search is allowed to take.      */
DECL|method|timeout
specifier|public
name|NewSearchSourceBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeoutInMillis
operator|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|timeout
argument_list|,
literal|null
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".timeout"
argument_list|)
operator|.
name|millis
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * An optional terminate_after to terminate the search after collecting      *<code>terminateAfter</code> documents      */
DECL|method|terminateAfter
specifier|public
name|NewSearchSourceBuilder
name|terminateAfter
parameter_list|(
name|int
name|terminateAfter
parameter_list|)
block|{
if|if
condition|(
name|terminateAfter
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"terminateAfter must be> 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|terminateAfter
operator|=
name|terminateAfter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a sort against the given field name and the sort ordering.      *      * @param name      *            The name of the field      * @param order      *            The sort ordering      * @throws IOException      */
DECL|method|sort
specifier|public
name|NewSearchSourceBuilder
name|sort
parameter_list|(
name|String
name|name
parameter_list|,
name|SortOrder
name|order
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
name|name
argument_list|)
operator|.
name|order
argument_list|(
name|order
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Add a sort against the given field name.      *      * @param name      *            The name of the field to sort by      * @throws IOException      */
DECL|method|sort
specifier|public
name|NewSearchSourceBuilder
name|sort
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a sort builder.      */
DECL|method|sort
specifier|public
name|NewSearchSourceBuilder
name|sort
parameter_list|(
name|SortBuilder
name|sort
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sorts
operator|==
literal|null
condition|)
block|{
name|sorts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|sort
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|sorts
operator|.
name|add
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Applies when sorting, and controls if scores will be tracked as well.      * Defaults to<tt>false</tt>.      */
DECL|method|trackScores
specifier|public
name|NewSearchSourceBuilder
name|trackScores
parameter_list|(
name|boolean
name|trackScores
parameter_list|)
block|{
name|this
operator|.
name|trackScores
operator|=
name|trackScores
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add an get to perform as part of the search.      */
DECL|method|aggregation
specifier|public
name|NewSearchSourceBuilder
name|aggregation
parameter_list|(
name|AbstractAggregationBuilder
name|aggregation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|aggregations
operator|==
literal|null
condition|)
block|{
name|aggregations
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|aggregation
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|aggregations
operator|.
name|add
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// NOCOMMIT do we need these methods?
comment|// /**
comment|// * Sets a raw (xcontent / json) addAggregation.
comment|// */
comment|// public NewSearchSourceBuilder aggregations(byte[] aggregationsBinary) {
comment|// return aggregations(aggregationsBinary, 0, aggregationsBinary.length);
comment|// }
comment|//
comment|// /**
comment|// * Sets a raw (xcontent / json) addAggregation.
comment|// */
comment|// public NewSearchSourceBuilder aggregations(byte[] aggregationsBinary, int
comment|// aggregationsBinaryOffset, int aggregationsBinaryLength) {
comment|// return aggregations(new BytesArray(aggregationsBinary,
comment|// aggregationsBinaryOffset, aggregationsBinaryLength));
comment|// }
comment|//
comment|// /**
comment|// * Sets a raw (xcontent / json) addAggregation.
comment|// */
comment|// public NewSearchSourceBuilder aggregations(BytesReference
comment|// aggregationsBinary) {
comment|// this.aggregationsBinary = aggregationsBinary;
comment|// return this;
comment|// }
comment|//
comment|// /**
comment|// * Sets a raw (xcontent / json) addAggregation.
comment|// */
comment|// public NewSearchSourceBuilder aggregations(XContentBuilder aggs) {
comment|// return aggregations(aggs.bytes());
comment|// }
comment|//
comment|// /**
comment|// * Sets a raw (xcontent / json) addAggregation.
comment|// */
comment|// @SuppressWarnings("unchecked")
comment|// public NewSearchSourceBuilder aggregations(Map aggregations) {
comment|// try {
comment|// XContentBuilder builder =
comment|// XContentFactory.contentBuilder(Requests.CONTENT_TYPE);
comment|// builder.map(aggregations);
comment|// return aggregations(builder);
comment|// } catch (IOException e) {
comment|// throw new ElasticsearchGenerationException("Failed to generate [" +
comment|// aggregations + "]", e);
comment|// }
comment|// }
comment|/**      * Set the rescore window size for rescores that don't specify their window.      */
DECL|method|defaultRescoreWindowSize
specifier|public
name|NewSearchSourceBuilder
name|defaultRescoreWindowSize
parameter_list|(
name|int
name|defaultRescoreWindowSize
parameter_list|)
block|{
name|this
operator|.
name|defaultRescoreWindowSize
operator|=
name|defaultRescoreWindowSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// NOCOMMIT do we need this?
comment|// public HighlightBuilder highlighter() {
comment|// if (highlightBuilder == null) {
comment|// highlightBuilder = new HighlightBuilder();
comment|// }
comment|// return highlightBuilder;
comment|// }
comment|/**      * Adds highlight to perform as part of the search.      */
DECL|method|highlight
specifier|public
name|NewSearchSourceBuilder
name|highlight
parameter_list|(
name|HighlightBuilder
name|highlightBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|highlightBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|this
operator|.
name|highlightBuilder
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// NOCOMMIT do we need this?
comment|// public InnerHitsBuilder innerHitsBuilder() {
comment|// if (innerHitsBuilder == null) {
comment|// innerHitsBuilder = new InnerHitsBuilder();
comment|// }
comment|// return innerHitsBuilder;
comment|// }
DECL|method|innerHits
specifier|public
name|NewSearchSourceBuilder
name|innerHits
parameter_list|(
name|InnerHitsBuilder
name|innerHitsBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|innerHitsBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|this
operator|.
name|innerHitsBuilder
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// NOCOMMIT do we need this?
comment|// public SuggestBuilder suggest() {
comment|// if (suggestBuilder == null) {
comment|// suggestBuilder = new SuggestBuilder("suggest");
comment|// }
comment|// return suggestBuilder;
comment|// }
DECL|method|suggest
specifier|public
name|NewSearchSourceBuilder
name|suggest
parameter_list|(
name|SuggestBuilder
name|suggestBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|suggestBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|this
operator|.
name|suggestBuilder
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addRescorer
specifier|public
name|NewSearchSourceBuilder
name|addRescorer
parameter_list|(
name|RescoreBuilder
name|rescoreBuilder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rescoreBuilders
operator|==
literal|null
condition|)
block|{
name|rescoreBuilders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|rescoreBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|rescoreBuilders
operator|.
name|add
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|clearRescorers
specifier|public
name|NewSearchSourceBuilder
name|clearRescorers
parameter_list|()
block|{
name|rescoreBuilders
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicates whether the response should contain the stored _source for      * every hit      */
DECL|method|fetchSource
specifier|public
name|NewSearchSourceBuilder
name|fetchSource
parameter_list|(
name|boolean
name|fetch
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|fetchSourceContext
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fetchSourceContext
operator|=
operator|new
name|FetchSourceContext
argument_list|(
name|fetch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|fetchSourceContext
operator|.
name|fetchSource
argument_list|(
name|fetch
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Indicate that _source should be returned with every hit, with an      * "include" and/or "exclude" set which can include simple wildcard      * elements.      *      * @param include      *            An optional include (optionally wildcarded) pattern to filter      *            the returned _source      * @param exclude      *            An optional exclude (optionally wildcarded) pattern to filter      *            the returned _source      */
DECL|method|fetchSource
specifier|public
name|NewSearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|String
name|include
parameter_list|,
annotation|@
name|Nullable
name|String
name|exclude
parameter_list|)
block|{
return|return
name|fetchSource
argument_list|(
name|include
operator|==
literal|null
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
operator|new
name|String
index|[]
block|{
name|include
block|}
argument_list|,
name|exclude
operator|==
literal|null
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
operator|new
name|String
index|[]
block|{
name|exclude
block|}
argument_list|)
return|;
block|}
comment|/**      * Indicate that _source should be returned with every hit, with an      * "include" and/or "exclude" set which can include simple wildcard      * elements.      *      * @param includes      *            An optional list of include (optionally wildcarded) pattern to      *            filter the returned _source      * @param excludes      *            An optional list of exclude (optionally wildcarded) pattern to      *            filter the returned _source      */
DECL|method|fetchSource
specifier|public
name|NewSearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|String
index|[]
name|includes
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|excludes
parameter_list|)
block|{
name|fetchSourceContext
operator|=
operator|new
name|FetchSourceContext
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicate how the _source should be fetched.      */
DECL|method|fetchSource
specifier|public
name|NewSearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|FetchSourceContext
name|fetchSourceContext
parameter_list|)
block|{
name|this
operator|.
name|fetchSourceContext
operator|=
name|fetchSourceContext
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets no fields to be loaded, resulting in only id and type to be returned      * per field.      */
DECL|method|noFields
specifier|public
name|NewSearchSourceBuilder
name|noFields
parameter_list|()
block|{
name|this
operator|.
name|fieldNames
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the fields to load and return as part of the search request. If none      * are specified, the source of the document will be returned.      */
DECL|method|fields
specifier|public
name|NewSearchSourceBuilder
name|fields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fieldNames
operator|=
name|fields
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds the fields to load and return as part of the search request. If none      * are specified, the source of the document will be returned.      */
DECL|method|fields
specifier|public
name|NewSearchSourceBuilder
name|fields
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
if|if
condition|(
name|fieldNames
operator|==
literal|null
condition|)
block|{
name|fieldNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|addAll
argument_list|(
name|fieldNames
argument_list|,
name|fields
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to load and return (note, it must be stored) as part of the      * search request. If none are specified, the source of the document will be      * return.      */
DECL|method|field
specifier|public
name|NewSearchSourceBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|fieldNames
operator|==
literal|null
condition|)
block|{
name|fieldNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|fieldNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to load from the field data cache and return as part of the      * search request.      */
DECL|method|fieldDataField
specifier|public
name|NewSearchSourceBuilder
name|fieldDataField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|fieldDataFields
operator|==
literal|null
condition|)
block|{
name|fieldDataFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|fieldDataFields
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a script field under the given name with the provided script.      *      * @param name      *            The name of the field      * @param script      *            The script      */
DECL|method|scriptField
specifier|public
name|NewSearchSourceBuilder
name|scriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|Script
name|script
parameter_list|)
block|{
if|if
condition|(
name|scriptFields
operator|==
literal|null
condition|)
block|{
name|scriptFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|scriptFields
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|name
argument_list|,
name|script
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the boost a specific index will receive when the query is executeed      * against it.      *      * @param index      *            The index to apply the boost against      * @param indexBoost      *            The boost to apply to the index      */
DECL|method|indexBoost
specifier|public
name|NewSearchSourceBuilder
name|indexBoost
parameter_list|(
name|String
name|index
parameter_list|,
name|float
name|indexBoost
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|indexBoost
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|indexBoost
operator|=
operator|new
name|ObjectFloatHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|indexBoost
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|indexBoost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The stats groups this request will be aggregated under.      */
DECL|method|stats
specifier|public
name|NewSearchSourceBuilder
name|stats
parameter_list|(
name|String
modifier|...
name|statsGroups
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|statsGroups
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|public
name|void
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|from
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"from"
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeoutInMillis
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"timeout"
argument_list|,
name|timeoutInMillis
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terminateAfter
operator|!=
name|SearchContext
operator|.
name|DEFAULT_TERMINATE_AFTER
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"terminate_after"
argument_list|,
name|terminateAfter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryBuilder
operator|!=
literal|null
condition|)
block|{
name|queryBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postQueryBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"post_filter"
argument_list|)
expr_stmt|;
name|postQueryBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterBinary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|filterBinary
argument_list|)
operator|==
name|builder
operator|.
name|contentType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
literal|"filter"
argument_list|,
name|filterBinary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"filter_binary"
argument_list|,
name|filterBinary
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|minScore
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"min_score"
argument_list|,
name|minScore
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|explain
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"explain"
argument_list|,
name|explain
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchSourceContext
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|fetchSourceContext
operator|.
name|fetchSource
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"_source"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"_source"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|array
argument_list|(
literal|"includes"
argument_list|,
name|fetchSourceContext
operator|.
name|includes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|array
argument_list|(
literal|"excludes"
argument_list|,
name|fetchSourceContext
operator|.
name|excludes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fieldNames
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"fields"
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"fields"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fieldDataFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"fielddata_fields"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldDataFields
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scriptFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"script_fields"
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptField
name|scriptField
range|:
name|scriptFields
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|scriptField
operator|.
name|fieldName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"script"
argument_list|,
name|scriptField
operator|.
name|script
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sorts
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"sort"
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|sort
range|:
name|sorts
control|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|sort
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trackScores
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"track_scores"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexBoost
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"indices_boost"
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|indexBoost
operator|.
name|containsKey
argument_list|(
literal|null
argument_list|)
assert|;
specifier|final
name|Object
index|[]
name|keys
init|=
name|indexBoost
operator|.
name|keys
decl_stmt|;
specifier|final
name|float
index|[]
name|values
init|=
name|indexBoost
operator|.
name|values
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
operator|(
name|String
operator|)
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|aggregations
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"aggregations"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
for|for
control|(
name|BytesReference
name|aggregation
range|:
name|aggregations
control|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|aggregation
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|aggregationsBinary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|aggregationsBinary
argument_list|)
operator|==
name|builder
operator|.
name|contentType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
literal|"aggregations"
argument_list|,
name|aggregationsBinary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"aggregations_binary"
argument_list|,
name|aggregationsBinary
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|highlightBuilder
operator|!=
literal|null
condition|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|highlightBuilder
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|innerHitsBuilder
operator|!=
literal|null
condition|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|innerHitsBuilder
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestBuilder
operator|!=
literal|null
condition|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|suggestBuilder
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rescoreBuilders
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"sort"
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|sort
range|:
name|sorts
control|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|sort
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
comment|// // Strip empty rescoreBuilders from the request
comment|// Iterator<RescoreBuilder> itr = rescoreBuilders.iterator();
comment|// while (itr.hasNext()) {
comment|// if (itr.next().isEmpty()) {
comment|// itr.remove();
comment|// }
comment|// }
comment|//
comment|// // Now build the request taking care to skip empty lists and only
comment|// send the object form
comment|// // if there is just one builder.
comment|// if (rescoreBuilders.size() == 1) {
comment|// builder.startObject("rescore");
comment|// rescoreBuilders.get(0).toXContent(builder, params);
comment|// if (rescoreBuilders.get(0).windowSize() == null&&
comment|// defaultRescoreWindowSize != null) {
comment|// builder.field("window_size", defaultRescoreWindowSize);
comment|// }
comment|// builder.endObject();
comment|// } else if (!rescoreBuilders.isEmpty()) {
comment|// builder.startArray("rescore");
comment|// for (RescoreBuilder rescoreBuilder : rescoreBuilders) {
comment|// builder.startObject();
comment|// rescoreBuilder.toXContent(builder, params);
comment|// if (rescoreBuilder.windowSize() == null&&
comment|// defaultRescoreWindowSize != null) {
comment|// builder.field("window_size", defaultRescoreWindowSize);
comment|// }
comment|// builder.endObject();
comment|// }
comment|// builder.endArray();
comment|// }
block|}
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"stats"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|stat
range|:
name|stats
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ScriptField
specifier|private
specifier|static
class|class
name|ScriptField
implements|implements
name|Writeable
argument_list|<
name|ScriptField
argument_list|>
implements|,
name|ToXContent
block|{
DECL|field|PROTOTYPE
specifier|public
specifier|static
specifier|final
name|ScriptField
name|PROTOTYPE
init|=
operator|new
name|ScriptField
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|Script
name|script
decl_stmt|;
DECL|method|ScriptField
specifier|private
name|ScriptField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Script
name|script
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
DECL|method|fieldName
specifier|public
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
DECL|method|script
specifier|public
name|Script
name|script
parameter_list|()
block|{
return|return
name|script
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|ScriptField
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScriptField
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|Script
operator|.
name|readScript
argument_list|(
name|in
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|script
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"script"
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|NewSearchSourceBuilder
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|NewSearchSourceBuilder
name|builder
init|=
operator|new
name|NewSearchSourceBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BytesReference
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|aggregations
operator|.
name|add
argument_list|(
name|in
operator|.
name|readBytesReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
block|}
name|builder
operator|.
name|defaultRescoreWindowSize
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|builder
operator|.
name|explain
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|builder
operator|.
name|fetchSourceContext
operator|=
name|FetchSourceContext
operator|.
name|optionalReadFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|boolean
name|hasFieldDataFields
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasFieldDataFields
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldDataFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|fieldDataFields
operator|.
name|add
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|fieldDataFields
operator|=
name|fieldDataFields
expr_stmt|;
block|}
name|boolean
name|hasFieldNames
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasFieldNames
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|filterBinary
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|from
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|highlightBuilder
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
block|}
name|boolean
name|hasIndexBoost
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasIndexBoost
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|ObjectFloatHashMap
argument_list|<
name|String
argument_list|>
name|indexBoost
init|=
operator|new
name|ObjectFloatHashMap
argument_list|<
name|String
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|indexBoost
operator|.
name|put
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|indexBoost
operator|=
name|indexBoost
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|innerHitsBuilder
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|minScore
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|postQueryBuilder
operator|=
name|in
operator|.
name|readQuery
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|queryBuilder
operator|=
name|in
operator|.
name|readQuery
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BytesReference
argument_list|>
name|rescoreBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|rescoreBuilders
operator|.
name|add
argument_list|(
name|in
operator|.
name|readBytesReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|rescoreBuilders
operator|=
name|rescoreBuilders
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|scriptFields
operator|.
name|add
argument_list|(
name|ScriptField
operator|.
name|PROTOTYPE
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|scriptFields
operator|=
name|scriptFields
expr_stmt|;
block|}
name|builder
operator|.
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BytesReference
argument_list|>
name|sorts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|sorts
operator|.
name|add
argument_list|(
name|in
operator|.
name|readBytesReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|sorts
operator|=
name|sorts
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|stats
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|suggestBuilder
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|terminateAfter
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|builder
operator|.
name|timeoutInMillis
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|builder
operator|.
name|trackScores
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|builder
operator|.
name|version
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasAggregations
init|=
name|aggregations
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasAggregations
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAggregations
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|aggregations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|aggregation
range|:
name|aggregations
control|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|aggregation
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|defaultRescoreWindowSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|FetchSourceContext
operator|.
name|optionalWriteToStream
argument_list|(
name|fetchSourceContext
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|boolean
name|hasFieldDataFields
init|=
name|fieldDataFields
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasFieldDataFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFieldDataFields
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|fieldDataFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fieldDataFields
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasFieldNames
init|=
name|fieldNames
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasFieldNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFieldNames
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fieldNames
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasFilterBinary
init|=
name|filterBinary
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasFilterBinary
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFilterBinary
condition|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|filterBinary
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|boolean
name|hasHighlightBuilder
init|=
name|highlightBuilder
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasHighlightBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasHighlightBuilder
condition|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|highlightBuilder
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasIndexBoost
init|=
name|indexBoost
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasIndexBoost
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasIndexBoost
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|indexBoost
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|key
range|:
name|indexBoost
operator|.
name|keys
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|key
operator|.
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|indexBoost
operator|.
name|get
argument_list|(
name|key
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasInnerHitsBuilder
init|=
name|innerHitsBuilder
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasInnerHitsBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasInnerHitsBuilder
condition|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|innerHitsBuilder
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasMinScore
init|=
name|minScore
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasMinScore
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasMinScore
condition|)
block|{
name|out
operator|.
name|writeFloat
argument_list|(
name|minScore
argument_list|)
expr_stmt|;
block|}
name|boolean
name|haspostQuery
init|=
name|postQueryBuilder
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|haspostQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|haspostQuery
condition|)
block|{
name|postQueryBuilder
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasQuery
init|=
name|queryBuilder
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasQuery
condition|)
block|{
name|queryBuilder
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasRescoreBuilders
init|=
name|rescoreBuilders
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasRescoreBuilders
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasRescoreBuilders
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|rescoreBuilders
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|rescoreBuilder
range|:
name|rescoreBuilders
control|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|rescoreBuilder
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasScriptFields
init|=
name|scriptFields
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasScriptFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasScriptFields
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|scriptFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptField
name|scriptField
range|:
name|scriptFields
control|)
block|{
name|scriptField
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|boolean
name|hasSorts
init|=
name|sorts
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasSorts
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSorts
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|sorts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|sort
range|:
name|sorts
control|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasStats
init|=
name|stats
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasStats
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasStats
condition|)
block|{
name|out
operator|.
name|writeStringArray
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasSuggestBuilder
init|=
name|suggestBuilder
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasSuggestBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSuggestBuilder
condition|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|suggestBuilder
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|terminateAfter
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|timeoutInMillis
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|trackScores
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

