begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.builder
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectFloatHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ToXContentToBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AbstractAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|innerhits
operator|.
name|InnerHitsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|source
operator|.
name|FetchSourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A search source builder allowing to easily build search source. Simple  * construction using  * {@link org.elasticsearch.search.builder.SearchSourceBuilder#searchSource()}.  *  * @see org.elasticsearch.action.search.SearchRequest#source(SearchSourceBuilder)  */
end_comment

begin_class
DECL|class|SearchSourceBuilder
specifier|public
specifier|final
class|class
name|SearchSourceBuilder
extends|extends
name|ToXContentToBytes
implements|implements
name|Writeable
argument_list|<
name|SearchSourceBuilder
argument_list|>
block|{
DECL|field|FROM_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FROM_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
DECL|field|SIZE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SIZE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
DECL|field|TIMEOUT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TIMEOUT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"timeout"
argument_list|)
decl_stmt|;
DECL|field|TERMINATE_AFTER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TERMINATE_AFTER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"terminate_after"
argument_list|)
decl_stmt|;
DECL|field|QUERY_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|QUERY_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
DECL|field|POST_FILTER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|POST_FILTER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"post_filter"
argument_list|)
decl_stmt|;
DECL|field|MIN_SCORE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MIN_SCORE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_score"
argument_list|)
decl_stmt|;
DECL|field|VERSION_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|VERSION_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
DECL|field|EXPLAIN_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|EXPLAIN_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"explain"
argument_list|)
decl_stmt|;
DECL|field|_SOURCE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|_SOURCE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"_source"
argument_list|)
decl_stmt|;
DECL|field|FIELDS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
DECL|field|FIELDDATA_FIELDS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FIELDDATA_FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fielddata_fields"
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_FIELDS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SCRIPT_FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"script_fields"
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SCRIPT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"script"
argument_list|)
decl_stmt|;
DECL|field|IGNORE_FAILURE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|IGNORE_FAILURE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"ignore_failure"
argument_list|)
decl_stmt|;
DECL|field|SORT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SORT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"sort"
argument_list|)
decl_stmt|;
DECL|field|TRACK_SCORES_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TRACK_SCORES_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"track_scores"
argument_list|)
decl_stmt|;
DECL|field|INDICES_BOOST_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|INDICES_BOOST_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"indices_boost"
argument_list|)
decl_stmt|;
DECL|field|AGGREGATIONS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|AGGREGATIONS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"aggregations"
argument_list|,
literal|"aggs"
argument_list|)
decl_stmt|;
DECL|field|HIGHLIGHT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|HIGHLIGHT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"highlight"
argument_list|)
decl_stmt|;
DECL|field|INNER_HITS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|INNER_HITS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"inner_hits"
argument_list|)
decl_stmt|;
DECL|field|SUGGEST_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SUGGEST_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"suggest"
argument_list|)
decl_stmt|;
DECL|field|RESCORE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|RESCORE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"rescore"
argument_list|)
decl_stmt|;
DECL|field|STATS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|STATS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"stats"
argument_list|)
decl_stmt|;
DECL|field|EXT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|EXT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"ext"
argument_list|)
decl_stmt|;
DECL|field|PROFILE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PROFILE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"profile"
argument_list|)
decl_stmt|;
DECL|field|PROTOTYPE
specifier|private
specifier|static
specifier|final
name|SearchSourceBuilder
name|PROTOTYPE
init|=
operator|new
name|SearchSourceBuilder
argument_list|()
decl_stmt|;
DECL|method|readSearchSourceFrom
specifier|public
specifier|static
name|SearchSourceBuilder
name|readSearchSourceFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PROTOTYPE
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
DECL|method|parseSearchSource
specifier|public
specifier|static
name|SearchSourceBuilder
name|parseSearchSource
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PROTOTYPE
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
name|context
argument_list|)
return|;
block|}
comment|/**      * A static factory method to construct a new search source.      */
DECL|method|searchSource
specifier|public
specifier|static
name|SearchSourceBuilder
name|searchSource
parameter_list|()
block|{
return|return
operator|new
name|SearchSourceBuilder
argument_list|()
return|;
block|}
comment|/**      * A static factory method to construct new search highlights.      */
DECL|method|highlight
specifier|public
specifier|static
name|HighlightBuilder
name|highlight
parameter_list|()
block|{
return|return
operator|new
name|HighlightBuilder
argument_list|()
return|;
block|}
DECL|field|queryBuilder
specifier|private
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|queryBuilder
decl_stmt|;
DECL|field|postQueryBuilder
specifier|private
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|postQueryBuilder
decl_stmt|;
DECL|field|from
specifier|private
name|int
name|from
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|explain
specifier|private
name|Boolean
name|explain
decl_stmt|;
DECL|field|version
specifier|private
name|Boolean
name|version
decl_stmt|;
DECL|field|sorts
specifier|private
name|List
argument_list|<
name|BytesReference
argument_list|>
name|sorts
decl_stmt|;
DECL|field|trackScores
specifier|private
name|boolean
name|trackScores
init|=
literal|false
decl_stmt|;
DECL|field|minScore
specifier|private
name|Float
name|minScore
decl_stmt|;
DECL|field|timeoutInMillis
specifier|private
name|long
name|timeoutInMillis
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|terminateAfter
specifier|private
name|int
name|terminateAfter
init|=
name|SearchContext
operator|.
name|DEFAULT_TERMINATE_AFTER
decl_stmt|;
DECL|field|fieldNames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
DECL|field|fieldDataFields
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fieldDataFields
decl_stmt|;
DECL|field|scriptFields
specifier|private
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
decl_stmt|;
DECL|field|fetchSourceContext
specifier|private
name|FetchSourceContext
name|fetchSourceContext
decl_stmt|;
DECL|field|aggregations
specifier|private
name|List
argument_list|<
name|BytesReference
argument_list|>
name|aggregations
decl_stmt|;
DECL|field|highlightBuilder
specifier|private
name|HighlightBuilder
name|highlightBuilder
decl_stmt|;
DECL|field|suggestBuilder
specifier|private
name|BytesReference
name|suggestBuilder
decl_stmt|;
DECL|field|innerHitsBuilder
specifier|private
name|BytesReference
name|innerHitsBuilder
decl_stmt|;
DECL|field|rescoreBuilders
specifier|private
name|List
argument_list|<
name|BytesReference
argument_list|>
name|rescoreBuilders
decl_stmt|;
DECL|field|indexBoost
specifier|private
name|ObjectFloatHashMap
argument_list|<
name|String
argument_list|>
name|indexBoost
init|=
literal|null
decl_stmt|;
DECL|field|stats
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|stats
decl_stmt|;
DECL|field|ext
specifier|private
name|BytesReference
name|ext
init|=
literal|null
decl_stmt|;
DECL|field|profile
specifier|private
name|boolean
name|profile
init|=
literal|false
decl_stmt|;
comment|/**      * Constructs a new search source builder.      */
DECL|method|SearchSourceBuilder
specifier|public
name|SearchSourceBuilder
parameter_list|()
block|{     }
comment|/**      * Sets the search query for this request.      *      * @see org.elasticsearch.index.query.QueryBuilders      */
DECL|method|query
specifier|public
name|SearchSourceBuilder
name|query
parameter_list|(
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
block|{
name|this
operator|.
name|queryBuilder
operator|=
name|query
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the query for this request      */
DECL|method|query
specifier|public
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|query
parameter_list|()
block|{
return|return
name|queryBuilder
return|;
block|}
comment|/**      * Sets a filter that will be executed after the query has been executed and      * only has affect on the search hits (not aggregations). This filter is      * always executed as last filtering mechanism.      */
DECL|method|postFilter
specifier|public
name|SearchSourceBuilder
name|postFilter
parameter_list|(
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|postFilter
parameter_list|)
block|{
name|this
operator|.
name|postQueryBuilder
operator|=
name|postFilter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the post filter for this request      */
DECL|method|postFilter
specifier|public
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|postFilter
parameter_list|()
block|{
return|return
name|postQueryBuilder
return|;
block|}
comment|/**      * From index to start the search from. Defaults to<tt>0</tt>.      */
DECL|method|from
specifier|public
name|SearchSourceBuilder
name|from
parameter_list|(
name|int
name|from
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the from index to start the search from.      **/
DECL|method|from
specifier|public
name|int
name|from
parameter_list|()
block|{
return|return
name|from
return|;
block|}
comment|/**      * The number of search hits to return. Defaults to<tt>10</tt>.      */
DECL|method|size
specifier|public
name|SearchSourceBuilder
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the number of search hits to return.      */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**      * Sets the minimum score below which docs will be filtered out.      */
DECL|method|minScore
specifier|public
name|SearchSourceBuilder
name|minScore
parameter_list|(
name|float
name|minScore
parameter_list|)
block|{
name|this
operator|.
name|minScore
operator|=
name|minScore
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the minimum score below which docs will be filtered out.      */
DECL|method|minScore
specifier|public
name|Float
name|minScore
parameter_list|()
block|{
return|return
name|minScore
return|;
block|}
comment|/**      * Should each {@link org.elasticsearch.search.SearchHit} be returned with      * an explanation of the hit (ranking).      */
DECL|method|explain
specifier|public
name|SearchSourceBuilder
name|explain
parameter_list|(
name|Boolean
name|explain
parameter_list|)
block|{
name|this
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicates whether each search hit will be returned with an explanation of      * the hit (ranking)      */
DECL|method|explain
specifier|public
name|Boolean
name|explain
parameter_list|()
block|{
return|return
name|explain
return|;
block|}
comment|/**      * Should each {@link org.elasticsearch.search.SearchHit} be returned with a      * version associated with it.      */
DECL|method|version
specifier|public
name|SearchSourceBuilder
name|version
parameter_list|(
name|Boolean
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicates whether the document's version will be included in the search      * hits.      */
DECL|method|version
specifier|public
name|Boolean
name|version
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * An optional timeout to control how long search is allowed to take.      */
DECL|method|timeout
specifier|public
name|SearchSourceBuilder
name|timeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeoutInMillis
operator|=
name|timeout
operator|.
name|millis
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the timeout to control how long search is allowed to take.      */
DECL|method|timeoutInMillis
specifier|public
name|long
name|timeoutInMillis
parameter_list|()
block|{
return|return
name|timeoutInMillis
return|;
block|}
comment|/**      * An optional terminate_after to terminate the search after collecting      *<code>terminateAfter</code> documents      */
DECL|method|terminateAfter
specifier|public
name|SearchSourceBuilder
name|terminateAfter
parameter_list|(
name|int
name|terminateAfter
parameter_list|)
block|{
if|if
condition|(
name|terminateAfter
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"terminateAfter must be> 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|terminateAfter
operator|=
name|terminateAfter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the number of documents to terminate after collecting.      */
DECL|method|terminateAfter
specifier|public
name|int
name|terminateAfter
parameter_list|()
block|{
return|return
name|terminateAfter
return|;
block|}
comment|/**      * Adds a sort against the given field name and the sort ordering.      *      * @param name      *            The name of the field      * @param order      *            The sort ordering      */
DECL|method|sort
specifier|public
name|SearchSourceBuilder
name|sort
parameter_list|(
name|String
name|name
parameter_list|,
name|SortOrder
name|order
parameter_list|)
block|{
return|return
name|sort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
name|name
argument_list|)
operator|.
name|order
argument_list|(
name|order
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Add a sort against the given field name.      *      * @param name      *            The name of the field to sort by      */
DECL|method|sort
specifier|public
name|SearchSourceBuilder
name|sort
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|sort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a sort builder.      */
DECL|method|sort
specifier|public
name|SearchSourceBuilder
name|sort
parameter_list|(
name|SortBuilder
name|sort
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|sorts
operator|==
literal|null
condition|)
block|{
name|sorts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|sort
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|sorts
operator|.
name|add
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Gets the bytes representing the sort builders for this request.      */
DECL|method|sorts
specifier|public
name|List
argument_list|<
name|BytesReference
argument_list|>
name|sorts
parameter_list|()
block|{
return|return
name|sorts
return|;
block|}
comment|/**      * Applies when sorting, and controls if scores will be tracked as well.      * Defaults to<tt>false</tt>.      */
DECL|method|trackScores
specifier|public
name|SearchSourceBuilder
name|trackScores
parameter_list|(
name|boolean
name|trackScores
parameter_list|)
block|{
name|this
operator|.
name|trackScores
operator|=
name|trackScores
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicates whether scores will be tracked for this request.      */
DECL|method|trackScores
specifier|public
name|boolean
name|trackScores
parameter_list|()
block|{
return|return
name|trackScores
return|;
block|}
comment|/**      * Add an aggregation to perform as part of the search.      */
DECL|method|aggregation
specifier|public
name|SearchSourceBuilder
name|aggregation
parameter_list|(
name|AbstractAggregationBuilder
name|aggregation
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|aggregations
operator|==
literal|null
condition|)
block|{
name|aggregations
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|aggregation
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|aggregations
operator|.
name|add
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Gets the bytes representing the aggregation builders for this request.      */
DECL|method|aggregations
specifier|public
name|List
argument_list|<
name|BytesReference
argument_list|>
name|aggregations
parameter_list|()
block|{
return|return
name|aggregations
return|;
block|}
comment|/**      * Adds highlight to perform as part of the search.      */
DECL|method|highlighter
specifier|public
name|SearchSourceBuilder
name|highlighter
parameter_list|(
name|HighlightBuilder
name|highlightBuilder
parameter_list|)
block|{
name|this
operator|.
name|highlightBuilder
operator|=
name|highlightBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the hightlighter builder for this request.      */
DECL|method|highlighter
specifier|public
name|HighlightBuilder
name|highlighter
parameter_list|()
block|{
return|return
name|highlightBuilder
return|;
block|}
DECL|method|innerHits
specifier|public
name|SearchSourceBuilder
name|innerHits
parameter_list|(
name|InnerHitsBuilder
name|innerHitsBuilder
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|innerHitsBuilder
operator|.
name|innerXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|this
operator|.
name|innerHitsBuilder
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Gets the bytes representing the inner hits builder for this request.      */
DECL|method|innerHits
specifier|public
name|BytesReference
name|innerHits
parameter_list|()
block|{
return|return
name|innerHitsBuilder
return|;
block|}
DECL|method|suggest
specifier|public
name|SearchSourceBuilder
name|suggest
parameter_list|(
name|SuggestBuilder
name|suggestBuilder
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|suggestBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|this
operator|.
name|suggestBuilder
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Gets the bytes representing the suggester builder for this request.      */
DECL|method|suggest
specifier|public
name|BytesReference
name|suggest
parameter_list|()
block|{
return|return
name|suggestBuilder
return|;
block|}
DECL|method|addRescorer
specifier|public
name|SearchSourceBuilder
name|addRescorer
parameter_list|(
name|RescoreBuilder
name|rescoreBuilder
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|rescoreBuilders
operator|==
literal|null
condition|)
block|{
name|rescoreBuilders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|rescoreBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|rescoreBuilders
operator|.
name|add
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|clearRescorers
specifier|public
name|SearchSourceBuilder
name|clearRescorers
parameter_list|()
block|{
name|rescoreBuilders
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should the query be profiled. Defaults to<tt>false</tt>      */
DECL|method|profile
specifier|public
name|SearchSourceBuilder
name|profile
parameter_list|(
name|boolean
name|profile
parameter_list|)
block|{
name|this
operator|.
name|profile
operator|=
name|profile
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Return whether to profile query execution, or {@code null} if      * unspecified.      */
DECL|method|profile
specifier|public
name|boolean
name|profile
parameter_list|()
block|{
return|return
name|profile
return|;
block|}
comment|/**      * Gets the bytes representing the rescore builders for this request.      */
DECL|method|rescores
specifier|public
name|List
argument_list|<
name|BytesReference
argument_list|>
name|rescores
parameter_list|()
block|{
return|return
name|rescoreBuilders
return|;
block|}
comment|/**      * Indicates whether the response should contain the stored _source for      * every hit      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
name|boolean
name|fetch
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|fetchSourceContext
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fetchSourceContext
operator|=
operator|new
name|FetchSourceContext
argument_list|(
name|fetch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|fetchSourceContext
operator|.
name|fetchSource
argument_list|(
name|fetch
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Indicate that _source should be returned with every hit, with an      * "include" and/or "exclude" set which can include simple wildcard      * elements.      *      * @param include      *            An optional include (optionally wildcarded) pattern to filter      *            the returned _source      * @param exclude      *            An optional exclude (optionally wildcarded) pattern to filter      *            the returned _source      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|String
name|include
parameter_list|,
annotation|@
name|Nullable
name|String
name|exclude
parameter_list|)
block|{
return|return
name|fetchSource
argument_list|(
name|include
operator|==
literal|null
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
operator|new
name|String
index|[]
block|{
name|include
block|}
argument_list|,
name|exclude
operator|==
literal|null
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
operator|new
name|String
index|[]
block|{
name|exclude
block|}
argument_list|)
return|;
block|}
comment|/**      * Indicate that _source should be returned with every hit, with an      * "include" and/or "exclude" set which can include simple wildcard      * elements.      *      * @param includes      *            An optional list of include (optionally wildcarded) pattern to      *            filter the returned _source      * @param excludes      *            An optional list of exclude (optionally wildcarded) pattern to      *            filter the returned _source      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|String
index|[]
name|includes
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|excludes
parameter_list|)
block|{
name|fetchSourceContext
operator|=
operator|new
name|FetchSourceContext
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicate how the _source should be fetched.      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|FetchSourceContext
name|fetchSourceContext
parameter_list|)
block|{
name|this
operator|.
name|fetchSourceContext
operator|=
name|fetchSourceContext
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the {@link FetchSourceContext} which defines how the _source should      * be fetched.      */
DECL|method|fetchSource
specifier|public
name|FetchSourceContext
name|fetchSource
parameter_list|()
block|{
return|return
name|fetchSourceContext
return|;
block|}
comment|/**      * Adds a field to load and return (note, it must be stored) as part of the      * search request. If none are specified, the source of the document will be      * return.      */
DECL|method|field
specifier|public
name|SearchSourceBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|fieldNames
operator|==
literal|null
condition|)
block|{
name|fieldNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|fieldNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the fields to load and return as part of the search request. If none      * are specified, the source of the document will be returned.      */
DECL|method|fields
specifier|public
name|SearchSourceBuilder
name|fields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fieldNames
operator|=
name|fields
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets no fields to be loaded, resulting in only id and type to be returned      * per field.      */
DECL|method|noFields
specifier|public
name|SearchSourceBuilder
name|noFields
parameter_list|()
block|{
name|this
operator|.
name|fieldNames
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the fields to load and return as part of the search request.      */
DECL|method|fields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|()
block|{
return|return
name|fieldNames
return|;
block|}
comment|/**      * Adds a field to load from the field data cache and return as part of the      * search request.      */
DECL|method|fieldDataField
specifier|public
name|SearchSourceBuilder
name|fieldDataField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|fieldDataFields
operator|==
literal|null
condition|)
block|{
name|fieldDataFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|fieldDataFields
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the field-data fields.      */
DECL|method|fieldDataFields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fieldDataFields
parameter_list|()
block|{
return|return
name|fieldDataFields
return|;
block|}
comment|/**      * Adds a script field under the given name with the provided script.      *      * @param name      *            The name of the field      * @param script      *            The script      */
DECL|method|scriptField
specifier|public
name|SearchSourceBuilder
name|scriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|Script
name|script
parameter_list|)
block|{
name|scriptField
argument_list|(
name|name
argument_list|,
name|script
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a script field under the given name with the provided script.      *      * @param name      *            The name of the field      * @param script      *            The script      */
DECL|method|scriptField
specifier|public
name|SearchSourceBuilder
name|scriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|Script
name|script
parameter_list|,
name|boolean
name|ignoreFailure
parameter_list|)
block|{
if|if
condition|(
name|scriptFields
operator|==
literal|null
condition|)
block|{
name|scriptFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|scriptFields
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|name
argument_list|,
name|script
argument_list|,
name|ignoreFailure
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the script fields.      */
DECL|method|scriptFields
specifier|public
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
parameter_list|()
block|{
return|return
name|scriptFields
return|;
block|}
comment|/**      * Sets the boost a specific index will receive when the query is executeed      * against it.      *      * @param index      *            The index to apply the boost against      * @param indexBoost      *            The boost to apply to the index      */
DECL|method|indexBoost
specifier|public
name|SearchSourceBuilder
name|indexBoost
parameter_list|(
name|String
name|index
parameter_list|,
name|float
name|indexBoost
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|indexBoost
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|indexBoost
operator|=
operator|new
name|ObjectFloatHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|indexBoost
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|indexBoost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the boost a specific indices will receive when the query is      * executeed against them.      */
DECL|method|indexBoost
specifier|public
name|ObjectFloatHashMap
argument_list|<
name|String
argument_list|>
name|indexBoost
parameter_list|()
block|{
return|return
name|indexBoost
return|;
block|}
comment|/**      * The stats groups this request will be aggregated under.      */
DECL|method|stats
specifier|public
name|SearchSourceBuilder
name|stats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|statsGroups
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|statsGroups
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The stats groups this request will be aggregated under.      */
DECL|method|stats
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|stats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
DECL|method|ext
specifier|public
name|SearchSourceBuilder
name|ext
parameter_list|(
name|XContentBuilder
name|ext
parameter_list|)
block|{
name|this
operator|.
name|ext
operator|=
name|ext
operator|.
name|bytes
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|ext
specifier|public
name|BytesReference
name|ext
parameter_list|()
block|{
return|return
name|ext
return|;
block|}
DECL|method|fromXContent
specifier|public
name|SearchSourceBuilder
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|SearchSourceBuilder
name|builder
init|=
operator|new
name|SearchSourceBuilder
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|&&
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FROM_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|from
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SIZE_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|size
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TIMEOUT_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|timeoutInMillis
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TERMINATE_AFTER_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|terminateAfter
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|MIN_SCORE_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|minScore
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|VERSION_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|version
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|EXPLAIN_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|explain
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TRACK_SCORES_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|trackScores
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|_SOURCE_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|fetchSourceContext
operator|=
name|FetchSourceContext
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FIELDS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SORT_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|sort
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|PROFILE_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|profile
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|QUERY_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|queryBuilder
operator|=
name|context
operator|.
name|parseInnerQueryBuilder
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|POST_FILTER_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|postQueryBuilder
operator|=
name|context
operator|.
name|parseInnerQueryBuilder
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|_SOURCE_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|fetchSourceContext
operator|=
name|FetchSourceContext
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SCRIPT_FIELDS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|String
name|scriptFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|Script
name|script
init|=
literal|null
decl_stmt|;
name|boolean
name|ignoreFailure
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SCRIPT_FIELD
argument_list|)
condition|)
block|{
name|script
operator|=
name|Script
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|context
operator|.
name|parseFieldMatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|IGNORE_FAILURE_FIELD
argument_list|)
condition|)
block|{
name|ignoreFailure
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SCRIPT_FIELD
argument_list|)
condition|)
block|{
name|script
operator|=
name|Script
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|context
operator|.
name|parseFieldMatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|scriptFields
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|scriptFieldName
argument_list|,
name|script
argument_list|,
name|ignoreFailure
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|+
literal|"] in ["
operator|+
name|currentFieldName
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|scriptFields
operator|=
name|scriptFields
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|INDICES_BOOST_FIELD
argument_list|)
condition|)
block|{
name|ObjectFloatHashMap
argument_list|<
name|String
argument_list|>
name|indexBoost
init|=
operator|new
name|ObjectFloatHashMap
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
name|indexBoost
operator|.
name|put
argument_list|(
name|currentFieldName
argument_list|,
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|indexBoost
operator|=
name|indexBoost
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|AGGREGATIONS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|BytesReference
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|xContentBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|xContentBuilder
operator|.
name|field
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
name|xContentBuilder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|xContentBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|aggregations
operator|.
name|add
argument_list|(
name|xContentBuilder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|HIGHLIGHT_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|highlightBuilder
operator|=
name|HighlightBuilder
operator|.
name|PROTOTYPE
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|INNER_HITS_FIELD
argument_list|)
condition|)
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|builder
operator|.
name|innerHitsBuilder
operator|=
name|xContentBuilder
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SUGGEST_FIELD
argument_list|)
condition|)
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|builder
operator|.
name|suggestBuilder
operator|=
name|xContentBuilder
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SORT_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|BytesReference
argument_list|>
name|sorts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|XContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|sorts
operator|.
name|add
argument_list|(
name|xContentBuilder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|sorts
operator|=
name|sorts
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|EXT_FIELD
argument_list|)
condition|)
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|builder
operator|.
name|ext
operator|=
name|xContentBuilder
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FIELDS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
operator|+
literal|"] in ["
operator|+
name|currentFieldName
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FIELDDATA_FIELDS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fieldDataFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|fieldDataFields
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
operator|+
literal|"] in ["
operator|+
name|currentFieldName
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|fieldDataFields
operator|=
name|fieldDataFields
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SORT_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|BytesReference
argument_list|>
name|sorts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|sorts
operator|.
name|add
argument_list|(
name|xContentBuilder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|sorts
operator|=
name|sorts
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|RESCORE_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|BytesReference
argument_list|>
name|rescoreBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|rescoreBuilders
operator|.
name|add
argument_list|(
name|xContentBuilder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|rescoreBuilders
operator|=
name|rescoreBuilders
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|STATS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|stats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|stats
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
operator|+
literal|"] in ["
operator|+
name|currentFieldName
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|_SOURCE_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|fetchSourceContext
operator|=
name|FetchSourceContext
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|public
name|void
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|from
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FROM_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SIZE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeoutInMillis
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|TIMEOUT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|timeoutInMillis
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terminateAfter
operator|!=
name|SearchContext
operator|.
name|DEFAULT_TERMINATE_AFTER
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|TERMINATE_AFTER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|terminateAfter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|QUERY_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postQueryBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|POST_FILTER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|postQueryBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minScore
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MIN_SCORE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minScore
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|VERSION_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|explain
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|EXPLAIN_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|explain
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|profile
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"profile"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchSourceContext
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|_SOURCE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fetchSourceContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldNames
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fieldDataFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|FIELDDATA_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldDataField
range|:
name|fieldDataFields
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldDataField
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scriptFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|SCRIPT_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptField
name|scriptField
range|:
name|scriptFields
control|)
block|{
name|scriptField
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sorts
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|SORT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|sort
range|:
name|sorts
control|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|sort
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trackScores
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|TRACK_SCORES_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexBoost
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|INDICES_BOOST_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|indexBoost
operator|.
name|containsKey
argument_list|(
literal|null
argument_list|)
assert|;
specifier|final
name|Object
index|[]
name|keys
init|=
name|indexBoost
operator|.
name|keys
decl_stmt|;
specifier|final
name|float
index|[]
name|values
init|=
name|indexBoost
operator|.
name|values
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
operator|(
name|String
operator|)
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|aggregations
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|AGGREGATIONS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
for|for
control|(
name|BytesReference
name|aggregation
range|:
name|aggregations
control|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|aggregation
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|highlightBuilder
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|highlightBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|innerHitsBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|INNER_HITS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|innerHitsBuilder
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SUGGEST_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|suggestBuilder
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rescoreBuilders
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|RESCORE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|rescoreBuilder
range|:
name|rescoreBuilders
control|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|rescoreBuilder
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|STATS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|EXT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|ext
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ScriptField
specifier|public
specifier|static
class|class
name|ScriptField
implements|implements
name|Writeable
argument_list|<
name|ScriptField
argument_list|>
implements|,
name|ToXContent
block|{
DECL|field|PROTOTYPE
specifier|public
specifier|static
specifier|final
name|ScriptField
name|PROTOTYPE
init|=
operator|new
name|ScriptField
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|ignoreFailure
specifier|private
specifier|final
name|boolean
name|ignoreFailure
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|Script
name|script
decl_stmt|;
DECL|method|ScriptField
specifier|private
name|ScriptField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Script
name|script
parameter_list|)
block|{
name|this
argument_list|(
name|fieldName
argument_list|,
name|script
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|ScriptField
specifier|public
name|ScriptField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Script
name|script
parameter_list|,
name|boolean
name|ignoreFailure
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|this
operator|.
name|ignoreFailure
operator|=
name|ignoreFailure
expr_stmt|;
block|}
DECL|method|fieldName
specifier|public
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
DECL|method|script
specifier|public
name|Script
name|script
parameter_list|()
block|{
return|return
name|script
return|;
block|}
DECL|method|ignoreFailure
specifier|public
name|boolean
name|ignoreFailure
parameter_list|()
block|{
return|return
name|ignoreFailure
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|ScriptField
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScriptField
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|Script
operator|.
name|readScript
argument_list|(
name|in
argument_list|)
argument_list|,
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|script
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|ignoreFailure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SCRIPT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|IGNORE_FAILURE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|ignoreFailure
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|fieldName
argument_list|,
name|script
argument_list|,
name|ignoreFailure
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ScriptField
name|other
init|=
operator|(
name|ScriptField
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|,
name|other
operator|.
name|fieldName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|script
argument_list|,
name|other
operator|.
name|script
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|ignoreFailure
argument_list|,
name|other
operator|.
name|ignoreFailure
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|SearchSourceBuilder
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|SearchSourceBuilder
name|builder
init|=
operator|new
name|SearchSourceBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BytesReference
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|aggregations
operator|.
name|add
argument_list|(
name|in
operator|.
name|readBytesReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
block|}
name|builder
operator|.
name|explain
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
name|builder
operator|.
name|fetchSourceContext
operator|=
name|FetchSourceContext
operator|.
name|optionalReadFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|boolean
name|hasFieldDataFields
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasFieldDataFields
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldDataFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|fieldDataFields
operator|.
name|add
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|fieldDataFields
operator|=
name|fieldDataFields
expr_stmt|;
block|}
name|boolean
name|hasFieldNames
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasFieldNames
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
name|builder
operator|.
name|from
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|highlightBuilder
operator|=
name|HighlightBuilder
operator|.
name|PROTOTYPE
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasIndexBoost
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasIndexBoost
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|ObjectFloatHashMap
argument_list|<
name|String
argument_list|>
name|indexBoost
init|=
operator|new
name|ObjectFloatHashMap
argument_list|<
name|String
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|indexBoost
operator|.
name|put
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|indexBoost
operator|=
name|indexBoost
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|innerHitsBuilder
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|minScore
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|postQueryBuilder
operator|=
name|in
operator|.
name|readQuery
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|queryBuilder
operator|=
name|in
operator|.
name|readQuery
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BytesReference
argument_list|>
name|rescoreBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|rescoreBuilders
operator|.
name|add
argument_list|(
name|in
operator|.
name|readBytesReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|rescoreBuilders
operator|=
name|rescoreBuilders
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|scriptFields
operator|.
name|add
argument_list|(
name|ScriptField
operator|.
name|PROTOTYPE
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|scriptFields
operator|=
name|scriptFields
expr_stmt|;
block|}
name|builder
operator|.
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BytesReference
argument_list|>
name|sorts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|sorts
operator|.
name|add
argument_list|(
name|in
operator|.
name|readBytesReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|sorts
operator|=
name|sorts
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|stats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|stats
operator|.
name|add
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|suggestBuilder
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|terminateAfter
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|builder
operator|.
name|timeoutInMillis
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|builder
operator|.
name|trackScores
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|builder
operator|.
name|version
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|ext
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_2_0
argument_list|)
condition|)
block|{
name|builder
operator|.
name|profile
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|profile
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasAggregations
init|=
name|aggregations
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasAggregations
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAggregations
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|aggregations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|aggregation
range|:
name|aggregations
control|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|aggregation
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|FetchSourceContext
operator|.
name|optionalWriteToStream
argument_list|(
name|fetchSourceContext
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|boolean
name|hasFieldDataFields
init|=
name|fieldDataFields
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasFieldDataFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFieldDataFields
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|fieldDataFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fieldDataFields
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasFieldNames
init|=
name|fieldNames
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasFieldNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFieldNames
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fieldNames
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|boolean
name|hasHighlightBuilder
init|=
name|highlightBuilder
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasHighlightBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasHighlightBuilder
condition|)
block|{
name|highlightBuilder
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasIndexBoost
init|=
name|indexBoost
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasIndexBoost
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasIndexBoost
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|indexBoost
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|key
range|:
name|indexBoost
operator|.
name|keys
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|key
operator|.
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|indexBoost
operator|.
name|get
argument_list|(
name|key
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasInnerHitsBuilder
init|=
name|innerHitsBuilder
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasInnerHitsBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasInnerHitsBuilder
condition|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|innerHitsBuilder
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasMinScore
init|=
name|minScore
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasMinScore
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasMinScore
condition|)
block|{
name|out
operator|.
name|writeFloat
argument_list|(
name|minScore
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasPostQuery
init|=
name|postQueryBuilder
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasPostQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasPostQuery
condition|)
block|{
name|out
operator|.
name|writeQuery
argument_list|(
name|postQueryBuilder
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasQuery
init|=
name|queryBuilder
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasQuery
condition|)
block|{
name|out
operator|.
name|writeQuery
argument_list|(
name|queryBuilder
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasRescoreBuilders
init|=
name|rescoreBuilders
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasRescoreBuilders
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasRescoreBuilders
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|rescoreBuilders
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|rescoreBuilder
range|:
name|rescoreBuilders
control|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|rescoreBuilder
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasScriptFields
init|=
name|scriptFields
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasScriptFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasScriptFields
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|scriptFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptField
name|scriptField
range|:
name|scriptFields
control|)
block|{
name|scriptField
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|boolean
name|hasSorts
init|=
name|sorts
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasSorts
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSorts
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|sorts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|sort
range|:
name|sorts
control|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasStats
init|=
name|stats
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasStats
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasStats
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|stats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|stat
range|:
name|stats
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasSuggestBuilder
init|=
name|suggestBuilder
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasSuggestBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSuggestBuilder
condition|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|suggestBuilder
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|terminateAfter
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|timeoutInMillis
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|trackScores
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|boolean
name|hasExt
init|=
name|ext
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasExt
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasExt
condition|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|ext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_2_0
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|profile
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|aggregations
argument_list|,
name|explain
argument_list|,
name|fetchSourceContext
argument_list|,
name|fieldDataFields
argument_list|,
name|fieldNames
argument_list|,
name|from
argument_list|,
name|highlightBuilder
argument_list|,
name|indexBoost
argument_list|,
name|innerHitsBuilder
argument_list|,
name|minScore
argument_list|,
name|postQueryBuilder
argument_list|,
name|queryBuilder
argument_list|,
name|rescoreBuilders
argument_list|,
name|scriptFields
argument_list|,
name|size
argument_list|,
name|sorts
argument_list|,
name|stats
argument_list|,
name|suggestBuilder
argument_list|,
name|terminateAfter
argument_list|,
name|timeoutInMillis
argument_list|,
name|trackScores
argument_list|,
name|version
argument_list|,
name|profile
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SearchSourceBuilder
name|other
init|=
operator|(
name|SearchSourceBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|aggregations
argument_list|,
name|other
operator|.
name|aggregations
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|explain
argument_list|,
name|other
operator|.
name|explain
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fetchSourceContext
argument_list|,
name|other
operator|.
name|fetchSourceContext
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fieldDataFields
argument_list|,
name|other
operator|.
name|fieldDataFields
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fieldNames
argument_list|,
name|other
operator|.
name|fieldNames
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|from
argument_list|,
name|other
operator|.
name|from
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|highlightBuilder
argument_list|,
name|other
operator|.
name|highlightBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|indexBoost
argument_list|,
name|other
operator|.
name|indexBoost
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|innerHitsBuilder
argument_list|,
name|other
operator|.
name|innerHitsBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minScore
argument_list|,
name|other
operator|.
name|minScore
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|postQueryBuilder
argument_list|,
name|other
operator|.
name|postQueryBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|queryBuilder
argument_list|,
name|other
operator|.
name|queryBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|rescoreBuilders
argument_list|,
name|other
operator|.
name|rescoreBuilders
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|scriptFields
argument_list|,
name|other
operator|.
name|scriptFields
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|size
argument_list|,
name|other
operator|.
name|size
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|sorts
argument_list|,
name|other
operator|.
name|sorts
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|stats
argument_list|,
name|other
operator|.
name|stats
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|suggestBuilder
argument_list|,
name|other
operator|.
name|suggestBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|terminateAfter
argument_list|,
name|other
operator|.
name|terminateAfter
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|timeoutInMillis
argument_list|,
name|other
operator|.
name|timeoutInMillis
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|trackScores
argument_list|,
name|other
operator|.
name|trackScores
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|version
argument_list|,
name|other
operator|.
name|version
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|profile
argument_list|,
name|other
operator|.
name|profile
argument_list|)
return|;
block|}
block|}
end_class

end_unit

