begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.builder
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ToXContentToBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchExtBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|PipelineAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|collapse
operator|.
name|CollapseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|StoredFieldsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|FetchSourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|searchafter
operator|.
name|SearchAfterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|slice
operator|.
name|SliceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|ScoreSortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A search source builder allowing to easily build search source. Simple  * construction using  * {@link org.elasticsearch.search.builder.SearchSourceBuilder#searchSource()}.  *  * @see org.elasticsearch.action.search.SearchRequest#source(SearchSourceBuilder)  */
end_comment

begin_class
DECL|class|SearchSourceBuilder
specifier|public
specifier|final
class|class
name|SearchSourceBuilder
extends|extends
name|ToXContentToBytes
implements|implements
name|Writeable
block|{
DECL|field|DEPRECATION_LOGGER
specifier|private
specifier|static
specifier|final
name|DeprecationLogger
name|DEPRECATION_LOGGER
init|=
operator|new
name|DeprecationLogger
argument_list|(
name|Loggers
operator|.
name|getLogger
argument_list|(
name|SearchSourceBuilder
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|FROM_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FROM_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
DECL|field|SIZE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SIZE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
DECL|field|TIMEOUT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TIMEOUT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"timeout"
argument_list|)
decl_stmt|;
DECL|field|TERMINATE_AFTER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TERMINATE_AFTER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"terminate_after"
argument_list|)
decl_stmt|;
DECL|field|QUERY_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|QUERY_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
DECL|field|POST_FILTER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|POST_FILTER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"post_filter"
argument_list|)
decl_stmt|;
DECL|field|MIN_SCORE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MIN_SCORE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_score"
argument_list|)
decl_stmt|;
DECL|field|VERSION_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|VERSION_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
DECL|field|EXPLAIN_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|EXPLAIN_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"explain"
argument_list|)
decl_stmt|;
DECL|field|_SOURCE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|_SOURCE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"_source"
argument_list|)
decl_stmt|;
DECL|field|FIELDS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
DECL|field|STORED_FIELDS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|STORED_FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"stored_fields"
argument_list|)
decl_stmt|;
DECL|field|DOCVALUE_FIELDS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|DOCVALUE_FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"docvalue_fields"
argument_list|,
literal|"fielddata_fields"
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_FIELDS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SCRIPT_FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"script_fields"
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SCRIPT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"script"
argument_list|)
decl_stmt|;
DECL|field|IGNORE_FAILURE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|IGNORE_FAILURE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"ignore_failure"
argument_list|)
decl_stmt|;
DECL|field|SORT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SORT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"sort"
argument_list|)
decl_stmt|;
DECL|field|TRACK_SCORES_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TRACK_SCORES_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"track_scores"
argument_list|)
decl_stmt|;
DECL|field|INDICES_BOOST_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|INDICES_BOOST_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"indices_boost"
argument_list|)
decl_stmt|;
DECL|field|AGGREGATIONS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|AGGREGATIONS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"aggregations"
argument_list|)
decl_stmt|;
DECL|field|AGGS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|AGGS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"aggs"
argument_list|)
decl_stmt|;
DECL|field|HIGHLIGHT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|HIGHLIGHT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"highlight"
argument_list|)
decl_stmt|;
DECL|field|SUGGEST_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SUGGEST_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"suggest"
argument_list|)
decl_stmt|;
DECL|field|RESCORE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|RESCORE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"rescore"
argument_list|)
decl_stmt|;
DECL|field|STATS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|STATS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"stats"
argument_list|)
decl_stmt|;
DECL|field|EXT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|EXT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"ext"
argument_list|)
decl_stmt|;
DECL|field|PROFILE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PROFILE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"profile"
argument_list|)
decl_stmt|;
DECL|field|SEARCH_AFTER
specifier|public
specifier|static
specifier|final
name|ParseField
name|SEARCH_AFTER
init|=
operator|new
name|ParseField
argument_list|(
literal|"search_after"
argument_list|)
decl_stmt|;
DECL|field|COLLAPSE
specifier|public
specifier|static
specifier|final
name|ParseField
name|COLLAPSE
init|=
operator|new
name|ParseField
argument_list|(
literal|"collapse"
argument_list|)
decl_stmt|;
DECL|field|SLICE
specifier|public
specifier|static
specifier|final
name|ParseField
name|SLICE
init|=
operator|new
name|ParseField
argument_list|(
literal|"slice"
argument_list|)
decl_stmt|;
DECL|field|ALL_FIELDS_FIELDS
specifier|public
specifier|static
specifier|final
name|ParseField
name|ALL_FIELDS_FIELDS
init|=
operator|new
name|ParseField
argument_list|(
literal|"all_fields"
argument_list|)
decl_stmt|;
DECL|method|fromXContent
specifier|public
specifier|static
name|SearchSourceBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|SearchSourceBuilder
name|builder
init|=
operator|new
name|SearchSourceBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|parseXContent
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * A static factory method to construct a new search source.      */
DECL|method|searchSource
specifier|public
specifier|static
name|SearchSourceBuilder
name|searchSource
parameter_list|()
block|{
return|return
operator|new
name|SearchSourceBuilder
argument_list|()
return|;
block|}
comment|/**      * A static factory method to construct new search highlights.      */
DECL|method|highlight
specifier|public
specifier|static
name|HighlightBuilder
name|highlight
parameter_list|()
block|{
return|return
operator|new
name|HighlightBuilder
argument_list|()
return|;
block|}
DECL|field|queryBuilder
specifier|private
name|QueryBuilder
name|queryBuilder
decl_stmt|;
DECL|field|postQueryBuilder
specifier|private
name|QueryBuilder
name|postQueryBuilder
decl_stmt|;
DECL|field|from
specifier|private
name|int
name|from
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|explain
specifier|private
name|Boolean
name|explain
decl_stmt|;
DECL|field|version
specifier|private
name|Boolean
name|version
decl_stmt|;
DECL|field|sorts
specifier|private
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|sorts
decl_stmt|;
DECL|field|trackScores
specifier|private
name|boolean
name|trackScores
init|=
literal|false
decl_stmt|;
DECL|field|searchAfterBuilder
specifier|private
name|SearchAfterBuilder
name|searchAfterBuilder
decl_stmt|;
DECL|field|sliceBuilder
specifier|private
name|SliceBuilder
name|sliceBuilder
decl_stmt|;
DECL|field|minScore
specifier|private
name|Float
name|minScore
decl_stmt|;
DECL|field|timeout
specifier|private
name|TimeValue
name|timeout
init|=
literal|null
decl_stmt|;
DECL|field|terminateAfter
specifier|private
name|int
name|terminateAfter
init|=
name|SearchContext
operator|.
name|DEFAULT_TERMINATE_AFTER
decl_stmt|;
DECL|field|storedFieldsContext
specifier|private
name|StoredFieldsContext
name|storedFieldsContext
decl_stmt|;
DECL|field|docValueFields
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|docValueFields
decl_stmt|;
DECL|field|scriptFields
specifier|private
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
decl_stmt|;
DECL|field|fetchSourceContext
specifier|private
name|FetchSourceContext
name|fetchSourceContext
decl_stmt|;
DECL|field|aggregations
specifier|private
name|AggregatorFactories
operator|.
name|Builder
name|aggregations
decl_stmt|;
DECL|field|highlightBuilder
specifier|private
name|HighlightBuilder
name|highlightBuilder
decl_stmt|;
DECL|field|suggestBuilder
specifier|private
name|SuggestBuilder
name|suggestBuilder
decl_stmt|;
DECL|field|rescoreBuilders
specifier|private
name|List
argument_list|<
name|RescoreBuilder
argument_list|>
name|rescoreBuilders
decl_stmt|;
DECL|field|indexBoosts
specifier|private
name|List
argument_list|<
name|IndexBoost
argument_list|>
name|indexBoosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|stats
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|stats
decl_stmt|;
DECL|field|extBuilders
specifier|private
name|List
argument_list|<
name|SearchExtBuilder
argument_list|>
name|extBuilders
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|profile
specifier|private
name|boolean
name|profile
init|=
literal|false
decl_stmt|;
DECL|field|collapse
specifier|private
name|CollapseBuilder
name|collapse
init|=
literal|null
decl_stmt|;
comment|/**      * Constructs a new search source builder.      */
DECL|method|SearchSourceBuilder
specifier|public
name|SearchSourceBuilder
parameter_list|()
block|{     }
comment|/**      * Read from a stream.      */
DECL|method|SearchSourceBuilder
specifier|public
name|SearchSourceBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|aggregations
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|AggregatorFactories
operator|.
name|Builder
operator|::
operator|new
argument_list|)
expr_stmt|;
name|explain
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
name|fetchSourceContext
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|FetchSourceContext
operator|::
operator|new
argument_list|)
expr_stmt|;
name|docValueFields
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
name|storedFieldsContext
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|StoredFieldsContext
operator|::
operator|new
argument_list|)
expr_stmt|;
name|from
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|highlightBuilder
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|HighlightBuilder
operator|::
operator|new
argument_list|)
expr_stmt|;
name|indexBoosts
operator|=
name|in
operator|.
name|readList
argument_list|(
name|IndexBoost
operator|::
operator|new
argument_list|)
expr_stmt|;
name|minScore
operator|=
name|in
operator|.
name|readOptionalFloat
argument_list|()
expr_stmt|;
name|postQueryBuilder
operator|=
name|in
operator|.
name|readOptionalNamedWriteable
argument_list|(
name|QueryBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
name|queryBuilder
operator|=
name|in
operator|.
name|readOptionalNamedWriteable
argument_list|(
name|QueryBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|rescoreBuilders
operator|=
name|in
operator|.
name|readNamedWriteableList
argument_list|(
name|RescoreBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|scriptFields
operator|=
name|in
operator|.
name|readList
argument_list|(
name|ScriptField
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|sorts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|sorts
operator|.
name|add
argument_list|(
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|SortBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|stats
operator|=
name|in
operator|.
name|readList
argument_list|(
name|StreamInput
operator|::
name|readString
argument_list|)
expr_stmt|;
block|}
name|suggestBuilder
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|SuggestBuilder
operator|::
operator|new
argument_list|)
expr_stmt|;
name|terminateAfter
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|timeout
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|TimeValue
operator|::
operator|new
argument_list|)
expr_stmt|;
name|trackScores
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
name|extBuilders
operator|=
name|in
operator|.
name|readNamedWriteableList
argument_list|(
name|SearchExtBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
name|profile
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|searchAfterBuilder
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|SearchAfterBuilder
operator|::
operator|new
argument_list|)
expr_stmt|;
name|sliceBuilder
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|SliceBuilder
operator|::
operator|new
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_3_0
argument_list|)
condition|)
block|{
name|collapse
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|CollapseBuilder
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|aggregations
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|fetchSourceContext
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|docValueFields
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|storedFieldsContext
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|highlightBuilder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeList
argument_list|(
name|indexBoosts
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalFloat
argument_list|(
name|minScore
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalNamedWriteable
argument_list|(
name|postQueryBuilder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalNamedWriteable
argument_list|(
name|queryBuilder
argument_list|)
expr_stmt|;
name|boolean
name|hasRescoreBuilders
init|=
name|rescoreBuilders
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasRescoreBuilders
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasRescoreBuilders
condition|)
block|{
name|out
operator|.
name|writeNamedWriteableList
argument_list|(
name|rescoreBuilders
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasScriptFields
init|=
name|scriptFields
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasScriptFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasScriptFields
condition|)
block|{
name|out
operator|.
name|writeList
argument_list|(
name|scriptFields
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|boolean
name|hasSorts
init|=
name|sorts
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasSorts
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSorts
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|sorts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sort
range|:
name|sorts
control|)
block|{
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasStats
init|=
name|stats
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasStats
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasStats
condition|)
block|{
name|out
operator|.
name|writeStringList
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|suggestBuilder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|terminateAfter
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|trackScores
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeNamedWriteableList
argument_list|(
name|extBuilders
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|profile
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|searchAfterBuilder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|sliceBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_3_0
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|collapse
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the search query for this request.      *      * @see org.elasticsearch.index.query.QueryBuilders      */
DECL|method|query
specifier|public
name|SearchSourceBuilder
name|query
parameter_list|(
name|QueryBuilder
name|query
parameter_list|)
block|{
name|this
operator|.
name|queryBuilder
operator|=
name|query
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the query for this request      */
DECL|method|query
specifier|public
name|QueryBuilder
name|query
parameter_list|()
block|{
return|return
name|queryBuilder
return|;
block|}
comment|/**      * Sets a filter that will be executed after the query has been executed and      * only has affect on the search hits (not aggregations). This filter is      * always executed as last filtering mechanism.      */
DECL|method|postFilter
specifier|public
name|SearchSourceBuilder
name|postFilter
parameter_list|(
name|QueryBuilder
name|postFilter
parameter_list|)
block|{
name|this
operator|.
name|postQueryBuilder
operator|=
name|postFilter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the post filter for this request      */
DECL|method|postFilter
specifier|public
name|QueryBuilder
name|postFilter
parameter_list|()
block|{
return|return
name|postQueryBuilder
return|;
block|}
comment|/**      * From index to start the search from. Defaults to<tt>0</tt>.      */
DECL|method|from
specifier|public
name|SearchSourceBuilder
name|from
parameter_list|(
name|int
name|from
parameter_list|)
block|{
if|if
condition|(
name|from
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[from] parameter cannot be negative"
argument_list|)
throw|;
block|}
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the from index to start the search from.      **/
DECL|method|from
specifier|public
name|int
name|from
parameter_list|()
block|{
return|return
name|from
return|;
block|}
comment|/**      * The number of search hits to return. Defaults to<tt>10</tt>.      */
DECL|method|size
specifier|public
name|SearchSourceBuilder
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the number of search hits to return.      */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**      * Sets the minimum score below which docs will be filtered out.      */
DECL|method|minScore
specifier|public
name|SearchSourceBuilder
name|minScore
parameter_list|(
name|float
name|minScore
parameter_list|)
block|{
name|this
operator|.
name|minScore
operator|=
name|minScore
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the minimum score below which docs will be filtered out.      */
DECL|method|minScore
specifier|public
name|Float
name|minScore
parameter_list|()
block|{
return|return
name|minScore
return|;
block|}
comment|/**      * Should each {@link org.elasticsearch.search.SearchHit} be returned with      * an explanation of the hit (ranking).      */
DECL|method|explain
specifier|public
name|SearchSourceBuilder
name|explain
parameter_list|(
name|Boolean
name|explain
parameter_list|)
block|{
name|this
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicates whether each search hit will be returned with an explanation of      * the hit (ranking)      */
DECL|method|explain
specifier|public
name|Boolean
name|explain
parameter_list|()
block|{
return|return
name|explain
return|;
block|}
comment|/**      * Should each {@link org.elasticsearch.search.SearchHit} be returned with a      * version associated with it.      */
DECL|method|version
specifier|public
name|SearchSourceBuilder
name|version
parameter_list|(
name|Boolean
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicates whether the document's version will be included in the search      * hits.      */
DECL|method|version
specifier|public
name|Boolean
name|version
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * An optional timeout to control how long search is allowed to take.      */
DECL|method|timeout
specifier|public
name|SearchSourceBuilder
name|timeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the timeout to control how long search is allowed to take.      */
DECL|method|timeout
specifier|public
name|TimeValue
name|timeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
comment|/**      * An optional terminate_after to terminate the search after collecting      *<code>terminateAfter</code> documents      */
DECL|method|terminateAfter
specifier|public
name|SearchSourceBuilder
name|terminateAfter
parameter_list|(
name|int
name|terminateAfter
parameter_list|)
block|{
if|if
condition|(
name|terminateAfter
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"terminateAfter must be> 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|terminateAfter
operator|=
name|terminateAfter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the number of documents to terminate after collecting.      */
DECL|method|terminateAfter
specifier|public
name|int
name|terminateAfter
parameter_list|()
block|{
return|return
name|terminateAfter
return|;
block|}
comment|/**      * Adds a sort against the given field name and the sort ordering.      *      * @param name      *            The name of the field      * @param order      *            The sort ordering      */
DECL|method|sort
specifier|public
name|SearchSourceBuilder
name|sort
parameter_list|(
name|String
name|name
parameter_list|,
name|SortOrder
name|order
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|ScoreSortBuilder
operator|.
name|NAME
argument_list|)
condition|)
block|{
return|return
name|sort
argument_list|(
name|SortBuilders
operator|.
name|scoreSort
argument_list|()
operator|.
name|order
argument_list|(
name|order
argument_list|)
argument_list|)
return|;
block|}
return|return
name|sort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
name|name
argument_list|)
operator|.
name|order
argument_list|(
name|order
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Add a sort against the given field name.      *      * @param name      *            The name of the field to sort by      */
DECL|method|sort
specifier|public
name|SearchSourceBuilder
name|sort
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|ScoreSortBuilder
operator|.
name|NAME
argument_list|)
condition|)
block|{
return|return
name|sort
argument_list|(
name|SortBuilders
operator|.
name|scoreSort
argument_list|()
argument_list|)
return|;
block|}
return|return
name|sort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a sort builder.      */
DECL|method|sort
specifier|public
name|SearchSourceBuilder
name|sort
parameter_list|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sort
parameter_list|)
block|{
if|if
condition|(
name|sorts
operator|==
literal|null
condition|)
block|{
name|sorts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|sorts
operator|.
name|add
argument_list|(
name|sort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the bytes representing the sort builders for this request.      */
DECL|method|sorts
specifier|public
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|sorts
parameter_list|()
block|{
return|return
name|sorts
return|;
block|}
comment|/**      * Applies when sorting, and controls if scores will be tracked as well.      * Defaults to<tt>false</tt>.      */
DECL|method|trackScores
specifier|public
name|SearchSourceBuilder
name|trackScores
parameter_list|(
name|boolean
name|trackScores
parameter_list|)
block|{
name|this
operator|.
name|trackScores
operator|=
name|trackScores
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicates whether scores will be tracked for this request.      */
DECL|method|trackScores
specifier|public
name|boolean
name|trackScores
parameter_list|()
block|{
return|return
name|trackScores
return|;
block|}
comment|/**      * The sort values that indicates which docs this request should "search after".      * The sort values of the search_after must be equal to the number of sort fields in the query and they should be      * of the same type (or parsable as such).      * Defaults to<tt>null</tt>.      */
DECL|method|searchAfter
specifier|public
name|Object
index|[]
name|searchAfter
parameter_list|()
block|{
if|if
condition|(
name|searchAfterBuilder
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|searchAfterBuilder
operator|.
name|getSortValues
argument_list|()
return|;
block|}
comment|/**      * Set the sort values that indicates which docs this request should "search after".      */
DECL|method|searchAfter
specifier|public
name|SearchSourceBuilder
name|searchAfter
parameter_list|(
name|Object
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|searchAfterBuilder
operator|=
operator|new
name|SearchAfterBuilder
argument_list|()
operator|.
name|setSortValues
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a filter that will restrict the search hits, the top hits and the aggregations to a slice of the results      * of the main query.      */
DECL|method|slice
specifier|public
name|SearchSourceBuilder
name|slice
parameter_list|(
name|SliceBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|sliceBuilder
operator|=
name|builder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the slice used to filter the search hits, the top hits and the aggregations.      */
DECL|method|slice
specifier|public
name|SliceBuilder
name|slice
parameter_list|()
block|{
return|return
name|sliceBuilder
return|;
block|}
DECL|method|collapse
specifier|public
name|CollapseBuilder
name|collapse
parameter_list|()
block|{
return|return
name|collapse
return|;
block|}
DECL|method|collapse
specifier|public
name|SearchSourceBuilder
name|collapse
parameter_list|(
name|CollapseBuilder
name|collapse
parameter_list|)
block|{
name|this
operator|.
name|collapse
operator|=
name|collapse
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add an aggregation to perform as part of the search.      */
DECL|method|aggregation
specifier|public
name|SearchSourceBuilder
name|aggregation
parameter_list|(
name|AggregationBuilder
name|aggregation
parameter_list|)
block|{
if|if
condition|(
name|aggregations
operator|==
literal|null
condition|)
block|{
name|aggregations
operator|=
name|AggregatorFactories
operator|.
name|builder
argument_list|()
expr_stmt|;
block|}
name|aggregations
operator|.
name|addAggregator
argument_list|(
name|aggregation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add an aggregation to perform as part of the search.      */
DECL|method|aggregation
specifier|public
name|SearchSourceBuilder
name|aggregation
parameter_list|(
name|PipelineAggregationBuilder
name|aggregation
parameter_list|)
block|{
if|if
condition|(
name|aggregations
operator|==
literal|null
condition|)
block|{
name|aggregations
operator|=
name|AggregatorFactories
operator|.
name|builder
argument_list|()
expr_stmt|;
block|}
name|aggregations
operator|.
name|addPipelineAggregator
argument_list|(
name|aggregation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the bytes representing the aggregation builders for this request.      */
DECL|method|aggregations
specifier|public
name|AggregatorFactories
operator|.
name|Builder
name|aggregations
parameter_list|()
block|{
return|return
name|aggregations
return|;
block|}
comment|/**      * Adds highlight to perform as part of the search.      */
DECL|method|highlighter
specifier|public
name|SearchSourceBuilder
name|highlighter
parameter_list|(
name|HighlightBuilder
name|highlightBuilder
parameter_list|)
block|{
name|this
operator|.
name|highlightBuilder
operator|=
name|highlightBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the highlighter builder for this request.      */
DECL|method|highlighter
specifier|public
name|HighlightBuilder
name|highlighter
parameter_list|()
block|{
return|return
name|highlightBuilder
return|;
block|}
DECL|method|suggest
specifier|public
name|SearchSourceBuilder
name|suggest
parameter_list|(
name|SuggestBuilder
name|suggestBuilder
parameter_list|)
block|{
name|this
operator|.
name|suggestBuilder
operator|=
name|suggestBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the suggester builder for this request.      */
DECL|method|suggest
specifier|public
name|SuggestBuilder
name|suggest
parameter_list|()
block|{
return|return
name|suggestBuilder
return|;
block|}
DECL|method|addRescorer
specifier|public
name|SearchSourceBuilder
name|addRescorer
parameter_list|(
name|RescoreBuilder
argument_list|<
name|?
argument_list|>
name|rescoreBuilder
parameter_list|)
block|{
if|if
condition|(
name|rescoreBuilders
operator|==
literal|null
condition|)
block|{
name|rescoreBuilders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|rescoreBuilders
operator|.
name|add
argument_list|(
name|rescoreBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|clearRescorers
specifier|public
name|SearchSourceBuilder
name|clearRescorers
parameter_list|()
block|{
name|rescoreBuilders
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should the query be profiled. Defaults to<tt>false</tt>      */
DECL|method|profile
specifier|public
name|SearchSourceBuilder
name|profile
parameter_list|(
name|boolean
name|profile
parameter_list|)
block|{
name|this
operator|.
name|profile
operator|=
name|profile
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Return whether to profile query execution, or {@code null} if      * unspecified.      */
DECL|method|profile
specifier|public
name|boolean
name|profile
parameter_list|()
block|{
return|return
name|profile
return|;
block|}
comment|/**      * Gets the bytes representing the rescore builders for this request.      */
DECL|method|rescores
specifier|public
name|List
argument_list|<
name|RescoreBuilder
argument_list|>
name|rescores
parameter_list|()
block|{
return|return
name|rescoreBuilders
return|;
block|}
comment|/**      * Indicates whether the response should contain the stored _source for      * every hit      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
name|boolean
name|fetch
parameter_list|)
block|{
name|FetchSourceContext
name|fetchSourceContext
init|=
name|this
operator|.
name|fetchSourceContext
operator|!=
literal|null
condition|?
name|this
operator|.
name|fetchSourceContext
else|:
name|FetchSourceContext
operator|.
name|FETCH_SOURCE
decl_stmt|;
name|this
operator|.
name|fetchSourceContext
operator|=
operator|new
name|FetchSourceContext
argument_list|(
name|fetch
argument_list|,
name|fetchSourceContext
operator|.
name|includes
argument_list|()
argument_list|,
name|fetchSourceContext
operator|.
name|excludes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicate that _source should be returned with every hit, with an      * "include" and/or "exclude" set which can include simple wildcard      * elements.      *      * @param include      *            An optional include (optionally wildcarded) pattern to filter      *            the returned _source      * @param exclude      *            An optional exclude (optionally wildcarded) pattern to filter      *            the returned _source      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|String
name|include
parameter_list|,
annotation|@
name|Nullable
name|String
name|exclude
parameter_list|)
block|{
return|return
name|fetchSource
argument_list|(
name|include
operator|==
literal|null
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
operator|new
name|String
index|[]
block|{
name|include
block|}
argument_list|,
name|exclude
operator|==
literal|null
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
operator|new
name|String
index|[]
block|{
name|exclude
block|}
argument_list|)
return|;
block|}
comment|/**      * Indicate that _source should be returned with every hit, with an      * "include" and/or "exclude" set which can include simple wildcard      * elements.      *      * @param includes      *            An optional list of include (optionally wildcarded) pattern to      *            filter the returned _source      * @param excludes      *            An optional list of exclude (optionally wildcarded) pattern to      *            filter the returned _source      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|String
index|[]
name|includes
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|excludes
parameter_list|)
block|{
name|FetchSourceContext
name|fetchSourceContext
init|=
name|this
operator|.
name|fetchSourceContext
operator|!=
literal|null
condition|?
name|this
operator|.
name|fetchSourceContext
else|:
name|FetchSourceContext
operator|.
name|FETCH_SOURCE
decl_stmt|;
name|this
operator|.
name|fetchSourceContext
operator|=
operator|new
name|FetchSourceContext
argument_list|(
name|fetchSourceContext
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicate how the _source should be fetched.      */
DECL|method|fetchSource
specifier|public
name|SearchSourceBuilder
name|fetchSource
parameter_list|(
annotation|@
name|Nullable
name|FetchSourceContext
name|fetchSourceContext
parameter_list|)
block|{
name|this
operator|.
name|fetchSourceContext
operator|=
name|fetchSourceContext
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the {@link FetchSourceContext} which defines how the _source should      * be fetched.      */
DECL|method|fetchSource
specifier|public
name|FetchSourceContext
name|fetchSource
parameter_list|()
block|{
return|return
name|fetchSourceContext
return|;
block|}
comment|/**      * Adds a stored field to load and return as part of the      * search request. If none are specified, the source of the document will be      * return.      */
DECL|method|storedField
specifier|public
name|SearchSourceBuilder
name|storedField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|storedFields
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets the stored fields to load and return as part of the search request. If none      * are specified, the source of the document will be returned.      */
DECL|method|storedFields
specifier|public
name|SearchSourceBuilder
name|storedFields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
if|if
condition|(
name|storedFieldsContext
operator|==
literal|null
condition|)
block|{
name|storedFieldsContext
operator|=
name|StoredFieldsContext
operator|.
name|fromList
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storedFieldsContext
operator|.
name|addFieldNames
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Indicates how the stored fields should be fetched.      */
DECL|method|storedFields
specifier|public
name|SearchSourceBuilder
name|storedFields
parameter_list|(
name|StoredFieldsContext
name|context
parameter_list|)
block|{
name|storedFieldsContext
operator|=
name|context
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the stored fields context.      */
DECL|method|storedFields
specifier|public
name|StoredFieldsContext
name|storedFields
parameter_list|()
block|{
return|return
name|storedFieldsContext
return|;
block|}
comment|/**      * Adds a field to load from the docvalue and return as part of the      * search request.      *      * @deprecated Use {@link SearchSourceBuilder#docValueField(String)} instead.      */
annotation|@
name|Deprecated
DECL|method|fieldDataField
specifier|public
name|SearchSourceBuilder
name|fieldDataField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|docValueFields
operator|==
literal|null
condition|)
block|{
name|docValueFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|docValueFields
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the docvalue fields.      *      * @deprecated Use {@link SearchSourceBuilder#docValueFields()} instead.      */
annotation|@
name|Deprecated
DECL|method|fieldDataFields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fieldDataFields
parameter_list|()
block|{
return|return
name|docValueFields
return|;
block|}
comment|/**      * Gets the docvalue fields.      */
DECL|method|docValueFields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|docValueFields
parameter_list|()
block|{
return|return
name|docValueFields
return|;
block|}
comment|/**      * Adds a field to load from the docvalue and return as part of the      * search request.      */
DECL|method|docValueField
specifier|public
name|SearchSourceBuilder
name|docValueField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|docValueFields
operator|==
literal|null
condition|)
block|{
name|docValueFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|docValueFields
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a script field under the given name with the provided script.      *      * @param name      *            The name of the field      * @param script      *            The script      */
DECL|method|scriptField
specifier|public
name|SearchSourceBuilder
name|scriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|Script
name|script
parameter_list|)
block|{
name|scriptField
argument_list|(
name|name
argument_list|,
name|script
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a script field under the given name with the provided script.      *      * @param name      *            The name of the field      * @param script      *            The script      */
DECL|method|scriptField
specifier|public
name|SearchSourceBuilder
name|scriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|Script
name|script
parameter_list|,
name|boolean
name|ignoreFailure
parameter_list|)
block|{
if|if
condition|(
name|scriptFields
operator|==
literal|null
condition|)
block|{
name|scriptFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|scriptFields
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|name
argument_list|,
name|script
argument_list|,
name|ignoreFailure
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the script fields.      */
DECL|method|scriptFields
specifier|public
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
parameter_list|()
block|{
return|return
name|scriptFields
return|;
block|}
comment|/**      * Sets the boost a specific index or alias will receive when the query is executed      * against it.      *      * @param index      *            The index or alias to apply the boost against      * @param indexBoost      *            The boost to apply to the index      */
DECL|method|indexBoost
specifier|public
name|SearchSourceBuilder
name|indexBoost
parameter_list|(
name|String
name|index
parameter_list|,
name|float
name|indexBoost
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|index
argument_list|,
literal|"index must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexBoosts
operator|.
name|add
argument_list|(
operator|new
name|IndexBoost
argument_list|(
name|index
argument_list|,
name|indexBoost
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the boost a specific indices or aliases will receive when the query is      * executed against them.      */
DECL|method|indexBoosts
specifier|public
name|List
argument_list|<
name|IndexBoost
argument_list|>
name|indexBoosts
parameter_list|()
block|{
return|return
name|indexBoosts
return|;
block|}
comment|/**      * The stats groups this request will be aggregated under.      */
DECL|method|stats
specifier|public
name|SearchSourceBuilder
name|stats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|statsGroups
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|statsGroups
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The stats groups this request will be aggregated under.      */
DECL|method|stats
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|stats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
DECL|method|ext
specifier|public
name|SearchSourceBuilder
name|ext
parameter_list|(
name|List
argument_list|<
name|SearchExtBuilder
argument_list|>
name|searchExtBuilders
parameter_list|)
block|{
name|this
operator|.
name|extBuilders
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|searchExtBuilders
argument_list|,
literal|"searchExtBuilders must not be null"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|ext
specifier|public
name|List
argument_list|<
name|SearchExtBuilder
argument_list|>
name|ext
parameter_list|()
block|{
return|return
name|extBuilders
return|;
block|}
comment|/**      * @return true if the source only has suggest      */
DECL|method|isSuggestOnly
specifier|public
name|boolean
name|isSuggestOnly
parameter_list|()
block|{
return|return
name|suggestBuilder
operator|!=
literal|null
operator|&&
name|queryBuilder
operator|==
literal|null
operator|&&
name|aggregations
operator|==
literal|null
return|;
block|}
comment|/**      * Rewrites this search source builder into its primitive form. e.g. by      * rewriting the QueryBuilder. If the builder did not change the identity      * reference must be returned otherwise the builder will be rewritten      * infinitely.      */
DECL|method|rewrite
specifier|public
name|SearchSourceBuilder
name|rewrite
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|this
operator|.
name|equals
argument_list|(
name|shallowCopy
argument_list|(
name|queryBuilder
argument_list|,
name|postQueryBuilder
argument_list|,
name|sliceBuilder
argument_list|)
argument_list|)
operator|)
assert|;
name|QueryBuilder
name|queryBuilder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|queryBuilder
operator|!=
literal|null
condition|)
block|{
name|queryBuilder
operator|=
name|this
operator|.
name|queryBuilder
operator|.
name|rewrite
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|QueryBuilder
name|postQueryBuilder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|postQueryBuilder
operator|!=
literal|null
condition|)
block|{
name|postQueryBuilder
operator|=
name|this
operator|.
name|postQueryBuilder
operator|.
name|rewrite
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|boolean
name|rewritten
init|=
name|queryBuilder
operator|!=
name|this
operator|.
name|queryBuilder
operator|||
name|postQueryBuilder
operator|!=
name|this
operator|.
name|postQueryBuilder
decl_stmt|;
if|if
condition|(
name|rewritten
condition|)
block|{
return|return
name|shallowCopy
argument_list|(
name|queryBuilder
argument_list|,
name|postQueryBuilder
argument_list|,
name|sliceBuilder
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Create a shallow copy of this builder with a new slice configuration.      */
DECL|method|copyWithNewSlice
specifier|public
name|SearchSourceBuilder
name|copyWithNewSlice
parameter_list|(
name|SliceBuilder
name|slice
parameter_list|)
block|{
return|return
name|shallowCopy
argument_list|(
name|queryBuilder
argument_list|,
name|postQueryBuilder
argument_list|,
name|slice
argument_list|)
return|;
block|}
comment|/**      * Create a shallow copy of this source replaced {@link #queryBuilder}, {@link #postQueryBuilder}, and {@link #sliceBuilder}. Used by      * {@link #rewrite(QueryShardContext)} and {@link #copyWithNewSlice(SliceBuilder)}.      */
DECL|method|shallowCopy
specifier|private
name|SearchSourceBuilder
name|shallowCopy
parameter_list|(
name|QueryBuilder
name|queryBuilder
parameter_list|,
name|QueryBuilder
name|postQueryBuilder
parameter_list|,
name|SliceBuilder
name|slice
parameter_list|)
block|{
name|SearchSourceBuilder
name|rewrittenBuilder
init|=
operator|new
name|SearchSourceBuilder
argument_list|()
decl_stmt|;
name|rewrittenBuilder
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
name|rewrittenBuilder
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
name|rewrittenBuilder
operator|.
name|extBuilders
operator|=
name|extBuilders
expr_stmt|;
name|rewrittenBuilder
operator|.
name|fetchSourceContext
operator|=
name|fetchSourceContext
expr_stmt|;
name|rewrittenBuilder
operator|.
name|docValueFields
operator|=
name|docValueFields
expr_stmt|;
name|rewrittenBuilder
operator|.
name|storedFieldsContext
operator|=
name|storedFieldsContext
expr_stmt|;
name|rewrittenBuilder
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|rewrittenBuilder
operator|.
name|highlightBuilder
operator|=
name|highlightBuilder
expr_stmt|;
name|rewrittenBuilder
operator|.
name|indexBoosts
operator|=
name|indexBoosts
expr_stmt|;
name|rewrittenBuilder
operator|.
name|minScore
operator|=
name|minScore
expr_stmt|;
name|rewrittenBuilder
operator|.
name|postQueryBuilder
operator|=
name|postQueryBuilder
expr_stmt|;
name|rewrittenBuilder
operator|.
name|profile
operator|=
name|profile
expr_stmt|;
name|rewrittenBuilder
operator|.
name|queryBuilder
operator|=
name|queryBuilder
expr_stmt|;
name|rewrittenBuilder
operator|.
name|rescoreBuilders
operator|=
name|rescoreBuilders
expr_stmt|;
name|rewrittenBuilder
operator|.
name|scriptFields
operator|=
name|scriptFields
expr_stmt|;
name|rewrittenBuilder
operator|.
name|searchAfterBuilder
operator|=
name|searchAfterBuilder
expr_stmt|;
name|rewrittenBuilder
operator|.
name|sliceBuilder
operator|=
name|slice
expr_stmt|;
name|rewrittenBuilder
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|rewrittenBuilder
operator|.
name|sorts
operator|=
name|sorts
expr_stmt|;
name|rewrittenBuilder
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|rewrittenBuilder
operator|.
name|suggestBuilder
operator|=
name|suggestBuilder
expr_stmt|;
name|rewrittenBuilder
operator|.
name|terminateAfter
operator|=
name|terminateAfter
expr_stmt|;
name|rewrittenBuilder
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|rewrittenBuilder
operator|.
name|trackScores
operator|=
name|trackScores
expr_stmt|;
name|rewrittenBuilder
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|rewrittenBuilder
operator|.
name|collapse
operator|=
name|collapse
expr_stmt|;
return|return
name|rewrittenBuilder
return|;
block|}
comment|/**      * Parse some xContent into this SearchSourceBuilder, overwriting any values specified in the xContent. Use this if you need to set up      * different defaults than a regular SearchSourceBuilder would have and use      * {@link #fromXContent(QueryParseContext)} if you have normal defaults.      */
DECL|method|parseXContent
specifier|public
name|void
name|parseXContent
parameter_list|(
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|&&
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|FROM_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|from
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SIZE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|size
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TIMEOUT_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|timeout
operator|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TIMEOUT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TERMINATE_AFTER_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|terminateAfter
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MIN_SCORE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|minScore
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|VERSION_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|version
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|EXPLAIN_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|explain
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TRACK_SCORES_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|trackScores
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|_SOURCE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|fetchSourceContext
operator|=
name|FetchSourceContext
operator|.
name|fromXContent
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|STORED_FIELDS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|storedFieldsContext
operator|=
name|StoredFieldsContext
operator|.
name|fromXContent
argument_list|(
name|SearchSourceBuilder
operator|.
name|STORED_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SORT_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|sort
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PROFILE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|profile
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FIELDS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Deprecated field ["
operator|+
name|SearchSourceBuilder
operator|.
name|FIELDS_FIELD
operator|+
literal|"] used, expected ["
operator|+
name|SearchSourceBuilder
operator|.
name|STORED_FIELDS_FIELD
operator|+
literal|"] instead"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|QUERY_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|queryBuilder
operator|=
name|context
operator|.
name|parseInnerQueryBuilder
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|POST_FILTER_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|postQueryBuilder
operator|=
name|context
operator|.
name|parseInnerQueryBuilder
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|_SOURCE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|fetchSourceContext
operator|=
name|FetchSourceContext
operator|.
name|fromXContent
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SCRIPT_FIELDS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|scriptFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|scriptFields
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|INDICES_BOOST_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|DEPRECATION_LOGGER
operator|.
name|deprecated
argument_list|(
literal|"Object format in indices_boost is deprecated, please use array format instead"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
name|indexBoosts
operator|.
name|add
argument_list|(
operator|new
name|IndexBoost
argument_list|(
name|currentFieldName
argument_list|,
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|AGGREGATIONS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
operator|||
name|AGGS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|aggregations
operator|=
name|AggregatorFactories
operator|.
name|parseAggregators
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|HIGHLIGHT_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|=
name|HighlightBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SUGGEST_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|suggestBuilder
operator|=
name|SuggestBuilder
operator|.
name|fromXContent
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SORT_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|sorts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|SortBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RESCORE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|rescoreBuilders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|rescoreBuilders
operator|.
name|add
argument_list|(
name|RescoreBuilder
operator|.
name|parseFromXContent
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|EXT_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|extBuilders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|extSectionName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|extSectionName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SearchExtBuilder
name|searchExtBuilder
init|=
name|parser
operator|.
name|namedObject
argument_list|(
name|SearchExtBuilder
operator|.
name|class
argument_list|,
name|extSectionName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchExtBuilder
operator|.
name|getWriteableName
argument_list|()
operator|.
name|equals
argument_list|(
name|extSectionName
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The parsed ["
operator|+
name|searchExtBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] object has a "
operator|+
literal|"different writeable name compared to the name of the section that it was parsed from: found ["
operator|+
name|searchExtBuilder
operator|.
name|getWriteableName
argument_list|()
operator|+
literal|"] expected ["
operator|+
name|extSectionName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|extBuilders
operator|.
name|add
argument_list|(
name|searchExtBuilder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|SLICE
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|sliceBuilder
operator|=
name|SliceBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COLLAPSE
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|collapse
operator|=
name|CollapseBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|STORED_FIELDS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|storedFieldsContext
operator|=
name|StoredFieldsContext
operator|.
name|fromXContent
argument_list|(
name|STORED_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DOCVALUE_FIELDS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|docValueFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|docValueFields
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
operator|+
literal|"] in ["
operator|+
name|currentFieldName
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|INDICES_BOOST_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|indexBoosts
operator|.
name|add
argument_list|(
operator|new
name|IndexBoost
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|SORT_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|sorts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|SortBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RESCORE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|rescoreBuilders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|rescoreBuilders
operator|.
name|add
argument_list|(
name|RescoreBuilder
operator|.
name|parseFromXContent
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|STATS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|stats
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|stats
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
operator|+
literal|"] in ["
operator|+
name|currentFieldName
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|_SOURCE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|fetchSourceContext
operator|=
name|FetchSourceContext
operator|.
name|fromXContent
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SEARCH_AFTER
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|searchAfterBuilder
operator|=
name|SearchAfterBuilder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FIELDS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"The field ["
operator|+
name|SearchSourceBuilder
operator|.
name|FIELDS_FIELD
operator|+
literal|"] is no longer supported, please use ["
operator|+
name|SearchSourceBuilder
operator|.
name|STORED_FIELDS_FIELD
operator|+
literal|"] to retrieve stored fields or _source filtering "
operator|+
literal|"if the field is not stored"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|public
name|void
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|from
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FROM_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SIZE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeout
operator|!=
literal|null
operator|&&
operator|!
name|timeout
operator|.
name|equals
argument_list|(
name|TimeValue
operator|.
name|MINUS_ONE
argument_list|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|TIMEOUT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|timeout
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terminateAfter
operator|!=
name|SearchContext
operator|.
name|DEFAULT_TERMINATE_AFTER
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|TERMINATE_AFTER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|terminateAfter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|QUERY_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postQueryBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|POST_FILTER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|postQueryBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minScore
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MIN_SCORE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minScore
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|VERSION_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|explain
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|EXPLAIN_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|explain
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|profile
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"profile"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchSourceContext
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|_SOURCE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fetchSourceContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|storedFieldsContext
operator|!=
literal|null
condition|)
block|{
name|storedFieldsContext
operator|.
name|toXContent
argument_list|(
name|STORED_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docValueFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|DOCVALUE_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldDataField
range|:
name|docValueFields
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldDataField
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scriptFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|SCRIPT_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptField
name|scriptField
range|:
name|scriptFields
control|)
block|{
name|scriptField
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sorts
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|SORT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sort
range|:
name|sorts
control|)
block|{
name|sort
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trackScores
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|TRACK_SCORES_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchAfterBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
name|SEARCH_AFTER
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|searchAfterBuilder
operator|.
name|getSortValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sliceBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SLICE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|sliceBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|indexBoosts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|INDICES_BOOST_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexBoost
name|ib
range|:
name|indexBoosts
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|ib
operator|.
name|index
argument_list|,
name|ib
operator|.
name|boost
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|aggregations
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|AGGREGATIONS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlightBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|HIGHLIGHT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|highlightBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SUGGEST_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|suggestBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rescoreBuilders
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|RESCORE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RescoreBuilder
argument_list|<
name|?
argument_list|>
name|rescoreBuilder
range|:
name|rescoreBuilders
control|)
block|{
name|rescoreBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|STATS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extBuilders
operator|!=
literal|null
operator|&&
name|extBuilders
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|EXT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchExtBuilder
name|extBuilder
range|:
name|extBuilders
control|)
block|{
name|extBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|collapse
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|COLLAPSE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|collapse
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IndexBoost
specifier|public
specifier|static
class|class
name|IndexBoost
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|index
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|boost
specifier|private
specifier|final
name|float
name|boost
decl_stmt|;
DECL|method|IndexBoost
name|IndexBoost
parameter_list|(
name|String
name|index
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
DECL|method|IndexBoost
name|IndexBoost
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|index
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|boost
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
block|}
DECL|method|IndexBoost
name|IndexBoost
parameter_list|(
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|index
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
operator|+
literal|"] in ["
operator|+
name|INDICES_BOOST_FIELD
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|boost
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
operator|+
literal|"] in ["
operator|+
name|INDICES_BOOST_FIELD
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
operator|+
literal|"] in ["
operator|+
name|INDICES_BOOST_FIELD
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|+
literal|"] in ["
operator|+
name|parser
operator|.
name|currentName
argument_list|()
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|getBoost
specifier|public
name|float
name|getBoost
parameter_list|()
block|{
return|return
name|boost
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|boost
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|index
argument_list|,
name|boost
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|index
argument_list|,
name|boost
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IndexBoost
name|other
init|=
operator|(
name|IndexBoost
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|index
argument_list|,
name|other
operator|.
name|index
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|boost
argument_list|,
name|other
operator|.
name|boost
argument_list|)
return|;
block|}
block|}
DECL|class|ScriptField
specifier|public
specifier|static
class|class
name|ScriptField
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|ignoreFailure
specifier|private
specifier|final
name|boolean
name|ignoreFailure
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|Script
name|script
decl_stmt|;
DECL|method|ScriptField
specifier|public
name|ScriptField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Script
name|script
parameter_list|,
name|boolean
name|ignoreFailure
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|this
operator|.
name|ignoreFailure
operator|=
name|ignoreFailure
expr_stmt|;
block|}
comment|/**          * Read from a stream.          */
DECL|method|ScriptField
specifier|public
name|ScriptField
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|fieldName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|script
operator|=
operator|new
name|Script
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ignoreFailure
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|script
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|ignoreFailure
argument_list|)
expr_stmt|;
block|}
DECL|method|ScriptField
specifier|public
name|ScriptField
parameter_list|(
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|ignoreFailure
init|=
literal|false
decl_stmt|;
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|String
name|scriptFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|Script
name|script
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|SCRIPT_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|script
operator|=
name|Script
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IGNORE_FAILURE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|ignoreFailure
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|SCRIPT_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|script
operator|=
name|Script
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" in ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|ignoreFailure
operator|=
name|ignoreFailure
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|scriptFieldName
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|+
literal|"] in ["
operator|+
name|parser
operator|.
name|currentName
argument_list|()
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|fieldName
specifier|public
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
DECL|method|script
specifier|public
name|Script
name|script
parameter_list|()
block|{
return|return
name|script
return|;
block|}
DECL|method|ignoreFailure
specifier|public
name|boolean
name|ignoreFailure
parameter_list|()
block|{
return|return
name|ignoreFailure
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SCRIPT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|IGNORE_FAILURE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|ignoreFailure
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|fieldName
argument_list|,
name|script
argument_list|,
name|ignoreFailure
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ScriptField
name|other
init|=
operator|(
name|ScriptField
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|,
name|other
operator|.
name|fieldName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|script
argument_list|,
name|other
operator|.
name|script
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|ignoreFailure
argument_list|,
name|other
operator|.
name|ignoreFailure
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|aggregations
argument_list|,
name|explain
argument_list|,
name|fetchSourceContext
argument_list|,
name|docValueFields
argument_list|,
name|storedFieldsContext
argument_list|,
name|from
argument_list|,
name|highlightBuilder
argument_list|,
name|indexBoosts
argument_list|,
name|minScore
argument_list|,
name|postQueryBuilder
argument_list|,
name|queryBuilder
argument_list|,
name|rescoreBuilders
argument_list|,
name|scriptFields
argument_list|,
name|size
argument_list|,
name|sorts
argument_list|,
name|searchAfterBuilder
argument_list|,
name|sliceBuilder
argument_list|,
name|stats
argument_list|,
name|suggestBuilder
argument_list|,
name|terminateAfter
argument_list|,
name|timeout
argument_list|,
name|trackScores
argument_list|,
name|version
argument_list|,
name|profile
argument_list|,
name|extBuilders
argument_list|,
name|collapse
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SearchSourceBuilder
name|other
init|=
operator|(
name|SearchSourceBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|aggregations
argument_list|,
name|other
operator|.
name|aggregations
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|explain
argument_list|,
name|other
operator|.
name|explain
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fetchSourceContext
argument_list|,
name|other
operator|.
name|fetchSourceContext
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|docValueFields
argument_list|,
name|other
operator|.
name|docValueFields
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|storedFieldsContext
argument_list|,
name|other
operator|.
name|storedFieldsContext
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|from
argument_list|,
name|other
operator|.
name|from
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|highlightBuilder
argument_list|,
name|other
operator|.
name|highlightBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|indexBoosts
argument_list|,
name|other
operator|.
name|indexBoosts
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minScore
argument_list|,
name|other
operator|.
name|minScore
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|postQueryBuilder
argument_list|,
name|other
operator|.
name|postQueryBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|queryBuilder
argument_list|,
name|other
operator|.
name|queryBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|rescoreBuilders
argument_list|,
name|other
operator|.
name|rescoreBuilders
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|scriptFields
argument_list|,
name|other
operator|.
name|scriptFields
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|size
argument_list|,
name|other
operator|.
name|size
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|sorts
argument_list|,
name|other
operator|.
name|sorts
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|searchAfterBuilder
argument_list|,
name|other
operator|.
name|searchAfterBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|sliceBuilder
argument_list|,
name|other
operator|.
name|sliceBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|stats
argument_list|,
name|other
operator|.
name|stats
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|suggestBuilder
argument_list|,
name|other
operator|.
name|suggestBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|terminateAfter
argument_list|,
name|other
operator|.
name|terminateAfter
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|timeout
argument_list|,
name|other
operator|.
name|timeout
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|trackScores
argument_list|,
name|other
operator|.
name|trackScores
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|version
argument_list|,
name|other
operator|.
name|version
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|profile
argument_list|,
name|other
operator|.
name|profile
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|extBuilders
argument_list|,
name|other
operator|.
name|extBuilders
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|collapse
argument_list|,
name|other
operator|.
name|collapse
argument_list|)
return|;
block|}
block|}
end_class

end_unit

