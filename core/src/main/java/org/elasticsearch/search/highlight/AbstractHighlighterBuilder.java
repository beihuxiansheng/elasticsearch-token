begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.highlight
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|SimpleFragmenter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|SimpleSpanFragmenter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * This abstract class holds parameters shared by {@link HighlightBuilder} and {@link HighlightBuilder.Field}  * and provides the common setters, equality, hashCode calculation and common serialization  */
end_comment

begin_class
DECL|class|AbstractHighlighterBuilder
specifier|public
specifier|abstract
class|class
name|AbstractHighlighterBuilder
parameter_list|<
name|HB
extends|extends
name|AbstractHighlighterBuilder
parameter_list|<
name|?
parameter_list|>
parameter_list|>
block|{
DECL|field|PRE_TAGS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PRE_TAGS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"pre_tags"
argument_list|)
decl_stmt|;
DECL|field|POST_TAGS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|POST_TAGS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"post_tags"
argument_list|)
decl_stmt|;
DECL|field|FIELDS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
DECL|field|ORDER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|ORDER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"order"
argument_list|)
decl_stmt|;
DECL|field|TAGS_SCHEMA_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TAGS_SCHEMA_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"tags_schema"
argument_list|)
decl_stmt|;
DECL|field|HIGHLIGHT_FILTER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|HIGHLIGHT_FILTER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"highlight_filter"
argument_list|)
decl_stmt|;
DECL|field|FRAGMENT_SIZE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FRAGMENT_SIZE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fragment_size"
argument_list|)
decl_stmt|;
DECL|field|FRAGMENT_OFFSET_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FRAGMENT_OFFSET_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fragment_offset"
argument_list|)
decl_stmt|;
DECL|field|NUMBER_OF_FRAGMENTS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|NUMBER_OF_FRAGMENTS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"number_of_fragments"
argument_list|)
decl_stmt|;
DECL|field|ENCODER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|ENCODER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"encoder"
argument_list|)
decl_stmt|;
DECL|field|REQUIRE_FIELD_MATCH_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|REQUIRE_FIELD_MATCH_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"require_field_match"
argument_list|)
decl_stmt|;
DECL|field|BOUNDARY_MAX_SCAN_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|BOUNDARY_MAX_SCAN_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"boundary_max_scan"
argument_list|)
decl_stmt|;
DECL|field|BOUNDARY_CHARS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|BOUNDARY_CHARS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"boundary_chars"
argument_list|)
decl_stmt|;
DECL|field|TYPE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TYPE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
DECL|field|FRAGMENTER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FRAGMENTER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fragmenter"
argument_list|)
decl_stmt|;
DECL|field|NO_MATCH_SIZE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|NO_MATCH_SIZE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"no_match_size"
argument_list|)
decl_stmt|;
DECL|field|FORCE_SOURCE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FORCE_SOURCE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"force_source"
argument_list|)
decl_stmt|;
DECL|field|PHRASE_LIMIT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PHRASE_LIMIT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"phrase_limit"
argument_list|)
decl_stmt|;
DECL|field|OPTIONS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|OPTIONS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"options"
argument_list|)
decl_stmt|;
DECL|field|HIGHLIGHT_QUERY_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|HIGHLIGHT_QUERY_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"highlight_query"
argument_list|)
decl_stmt|;
DECL|field|MATCHED_FIELDS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MATCHED_FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"matched_fields"
argument_list|)
decl_stmt|;
DECL|field|preTags
specifier|protected
name|String
index|[]
name|preTags
decl_stmt|;
DECL|field|postTags
specifier|protected
name|String
index|[]
name|postTags
decl_stmt|;
DECL|field|fragmentSize
specifier|protected
name|Integer
name|fragmentSize
decl_stmt|;
DECL|field|numOfFragments
specifier|protected
name|Integer
name|numOfFragments
decl_stmt|;
DECL|field|highlighterType
specifier|protected
name|String
name|highlighterType
decl_stmt|;
DECL|field|fragmenter
specifier|protected
name|String
name|fragmenter
decl_stmt|;
DECL|field|highlightQuery
specifier|protected
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|highlightQuery
decl_stmt|;
DECL|field|order
specifier|protected
name|String
name|order
decl_stmt|;
DECL|field|highlightFilter
specifier|protected
name|Boolean
name|highlightFilter
decl_stmt|;
DECL|field|forceSource
specifier|protected
name|Boolean
name|forceSource
decl_stmt|;
DECL|field|boundaryMaxScan
specifier|protected
name|Integer
name|boundaryMaxScan
decl_stmt|;
DECL|field|boundaryChars
specifier|protected
name|char
index|[]
name|boundaryChars
decl_stmt|;
DECL|field|noMatchSize
specifier|protected
name|Integer
name|noMatchSize
decl_stmt|;
DECL|field|phraseLimit
specifier|protected
name|Integer
name|phraseLimit
decl_stmt|;
DECL|field|options
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
decl_stmt|;
DECL|field|requireFieldMatch
specifier|protected
name|Boolean
name|requireFieldMatch
decl_stmt|;
comment|/**      * Set the pre tags that will be used for highlighting.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|preTags
specifier|public
name|HB
name|preTags
parameter_list|(
name|String
modifier|...
name|preTags
parameter_list|)
block|{
name|this
operator|.
name|preTags
operator|=
name|preTags
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #preTags(String...)}      */
DECL|method|preTags
specifier|public
name|String
index|[]
name|preTags
parameter_list|()
block|{
return|return
name|this
operator|.
name|preTags
return|;
block|}
comment|/**      * Set the post tags that will be used for highlighting.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|postTags
specifier|public
name|HB
name|postTags
parameter_list|(
name|String
modifier|...
name|postTags
parameter_list|)
block|{
name|this
operator|.
name|postTags
operator|=
name|postTags
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #postTags(String...)}      */
DECL|method|postTags
specifier|public
name|String
index|[]
name|postTags
parameter_list|()
block|{
return|return
name|this
operator|.
name|postTags
return|;
block|}
comment|/**      * Set the fragment size in characters, defaults to {@link HighlightBuilder#DEFAULT_FRAGMENT_CHAR_SIZE}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fragmentSize
specifier|public
name|HB
name|fragmentSize
parameter_list|(
name|Integer
name|fragmentSize
parameter_list|)
block|{
name|this
operator|.
name|fragmentSize
operator|=
name|fragmentSize
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #fragmentSize(Integer)}      */
DECL|method|fragmentSize
specifier|public
name|Integer
name|fragmentSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|fragmentSize
return|;
block|}
comment|/**      * Set the number of fragments, defaults to {@link HighlightBuilder#DEFAULT_NUMBER_OF_FRAGMENTS}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|numOfFragments
specifier|public
name|HB
name|numOfFragments
parameter_list|(
name|Integer
name|numOfFragments
parameter_list|)
block|{
name|this
operator|.
name|numOfFragments
operator|=
name|numOfFragments
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #numOfFragments(Integer)}      */
DECL|method|numOfFragments
specifier|public
name|Integer
name|numOfFragments
parameter_list|()
block|{
return|return
name|this
operator|.
name|numOfFragments
return|;
block|}
comment|/**      * Set type of highlighter to use. Out of the box supported types      * are<tt>plain</tt>,<tt>fvh</tt> and<tt>postings</tt>.      * The default option selected is dependent on the mappings defined for your index.      * Details of the different highlighter types are covered in the reference guide.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|highlighterType
specifier|public
name|HB
name|highlighterType
parameter_list|(
name|String
name|highlighterType
parameter_list|)
block|{
name|this
operator|.
name|highlighterType
operator|=
name|highlighterType
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #highlighterType(String)}      */
DECL|method|highlighterType
specifier|public
name|String
name|highlighterType
parameter_list|()
block|{
return|return
name|this
operator|.
name|highlighterType
return|;
block|}
comment|/**      * Sets what fragmenter to use to break up text that is eligible for highlighting.      * This option is only applicable when using the plain highlighterType<tt>highlighter</tt>.      * Permitted values are "simple" or "span" relating to {@link SimpleFragmenter} and      * {@link SimpleSpanFragmenter} implementations respectively with the default being "span"      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fragmenter
specifier|public
name|HB
name|fragmenter
parameter_list|(
name|String
name|fragmenter
parameter_list|)
block|{
name|this
operator|.
name|fragmenter
operator|=
name|fragmenter
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #fragmenter(String)}      */
DECL|method|fragmenter
specifier|public
name|String
name|fragmenter
parameter_list|()
block|{
return|return
name|this
operator|.
name|fragmenter
return|;
block|}
comment|/**      * Sets a query to be used for highlighting instead of the search query.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|highlightQuery
specifier|public
name|HB
name|highlightQuery
parameter_list|(
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|highlightQuery
parameter_list|)
block|{
name|this
operator|.
name|highlightQuery
operator|=
name|highlightQuery
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #highlightQuery(QueryBuilder)}      */
DECL|method|highlightQuery
specifier|public
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|highlightQuery
parameter_list|()
block|{
return|return
name|this
operator|.
name|highlightQuery
return|;
block|}
comment|/**      * The order of fragments per field. By default, ordered by the order in the      * highlighted text. Can be<tt>score</tt>, which then it will be ordered      * by score of the fragments.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|order
specifier|public
name|HB
name|order
parameter_list|(
name|String
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #order(String)}      */
DECL|method|order
specifier|public
name|String
name|order
parameter_list|()
block|{
return|return
name|this
operator|.
name|order
return|;
block|}
comment|/**      * Set this to true when using the highlighterType<tt>fvh</tt>      * and you want to provide highlighting on filter clauses in your      * query. Default is<tt>false</tt>.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|highlightFilter
specifier|public
name|HB
name|highlightFilter
parameter_list|(
name|Boolean
name|highlightFilter
parameter_list|)
block|{
name|this
operator|.
name|highlightFilter
operator|=
name|highlightFilter
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #highlightFilter(Boolean)}      */
DECL|method|highlightFilter
specifier|public
name|Boolean
name|highlightFilter
parameter_list|()
block|{
return|return
name|this
operator|.
name|highlightFilter
return|;
block|}
comment|/**      * When using the highlighterType<tt>fvh</tt> this setting      * controls how far to look for boundary characters, and defaults to 20.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|boundaryMaxScan
specifier|public
name|HB
name|boundaryMaxScan
parameter_list|(
name|Integer
name|boundaryMaxScan
parameter_list|)
block|{
name|this
operator|.
name|boundaryMaxScan
operator|=
name|boundaryMaxScan
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #boundaryMaxScan(Integer)}      */
DECL|method|boundaryMaxScan
specifier|public
name|Integer
name|boundaryMaxScan
parameter_list|()
block|{
return|return
name|this
operator|.
name|boundaryMaxScan
return|;
block|}
comment|/**      * When using the highlighterType<tt>fvh</tt> this setting      * defines what constitutes a boundary for highlighting. Itâs a single string with      * each boundary character defined in it. It defaults to .,!? \t\n      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|boundaryChars
specifier|public
name|HB
name|boundaryChars
parameter_list|(
name|char
index|[]
name|boundaryChars
parameter_list|)
block|{
name|this
operator|.
name|boundaryChars
operator|=
name|boundaryChars
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #boundaryChars(char[])}      */
DECL|method|boundaryChars
specifier|public
name|char
index|[]
name|boundaryChars
parameter_list|()
block|{
return|return
name|this
operator|.
name|boundaryChars
return|;
block|}
comment|/**      * Allows to set custom options for custom highlighters.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|options
specifier|public
name|HB
name|options
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #options(Map)}      */
DECL|method|options
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|()
block|{
return|return
name|this
operator|.
name|options
return|;
block|}
comment|/**      * Set to true to cause a field to be highlighted only if a query matches that field.      * Default is false meaning that terms are highlighted on all requested fields regardless      * if the query matches specifically on them.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|requireFieldMatch
specifier|public
name|HB
name|requireFieldMatch
parameter_list|(
name|Boolean
name|requireFieldMatch
parameter_list|)
block|{
name|this
operator|.
name|requireFieldMatch
operator|=
name|requireFieldMatch
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #requireFieldMatch(Boolean)}      */
DECL|method|requireFieldMatch
specifier|public
name|Boolean
name|requireFieldMatch
parameter_list|()
block|{
return|return
name|this
operator|.
name|requireFieldMatch
return|;
block|}
comment|/**      * Sets the size of the fragment to return from the beginning of the field if there are no matches to      * highlight and the field doesn't also define noMatchSize.      * @param noMatchSize integer to set or null to leave out of request.  default is null.      * @return this for chaining      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|noMatchSize
specifier|public
name|HB
name|noMatchSize
parameter_list|(
name|Integer
name|noMatchSize
parameter_list|)
block|{
name|this
operator|.
name|noMatchSize
operator|=
name|noMatchSize
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #noMatchSize(Integer)}      */
DECL|method|noMatchSize
specifier|public
name|Integer
name|noMatchSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|noMatchSize
return|;
block|}
comment|/**      * Sets the maximum number of phrases the fvh will consider if the field doesn't also define phraseLimit.      * @param phraseLimit maximum number of phrases the fvh will consider      * @return this for chaining      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|phraseLimit
specifier|public
name|HB
name|phraseLimit
parameter_list|(
name|Integer
name|phraseLimit
parameter_list|)
block|{
name|this
operator|.
name|phraseLimit
operator|=
name|phraseLimit
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #phraseLimit(Integer)}      */
DECL|method|phraseLimit
specifier|public
name|Integer
name|phraseLimit
parameter_list|()
block|{
return|return
name|this
operator|.
name|noMatchSize
return|;
block|}
comment|/**      * Forces the highlighting to highlight fields based on the source even if fields are stored separately.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|forceSource
specifier|public
name|HB
name|forceSource
parameter_list|(
name|Boolean
name|forceSource
parameter_list|)
block|{
name|this
operator|.
name|forceSource
operator|=
name|forceSource
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * @return the value set by {@link #forceSource(Boolean)}      */
DECL|method|forceSource
specifier|public
name|Boolean
name|forceSource
parameter_list|()
block|{
return|return
name|this
operator|.
name|forceSource
return|;
block|}
DECL|method|commonOptionsToXContent
name|void
name|commonOptionsToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|preTags
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
name|PRE_TAGS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|preTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postTags
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
name|POST_TAGS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|postTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fragmentSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FRAGMENT_SIZE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fragmentSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numOfFragments
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|NUMBER_OF_FRAGMENTS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|numOfFragments
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterType
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|TYPE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|highlighterType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fragmenter
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FRAGMENTER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fragmenter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlightQuery
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|HIGHLIGHT_QUERY_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|highlightQuery
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ORDER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlightFilter
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|HIGHLIGHT_FILTER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|highlightFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boundaryMaxScan
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|BOUNDARY_MAX_SCAN_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|boundaryMaxScan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boundaryChars
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|BOUNDARY_CHARS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|boundaryChars
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|!=
literal|null
operator|&&
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|OPTIONS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|forceSource
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FORCE_SOURCE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|forceSource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requireFieldMatch
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|REQUIRE_FIELD_MATCH_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|requireFieldMatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|noMatchSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|NO_MATCH_SIZE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|noMatchSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|phraseLimit
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|PHRASE_LIMIT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|phraseLimit
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new {@link HighlightBuilder} from the highlighter held by the {@link QueryParseContext}      * in {@link org.elasticsearch.common.xcontent.XContent} format      *      * @param parseContext containing the parser positioned at the structure to be parsed from.      * the state on the parser contained in this context will be changed as a side effect of this      * method call      * @return the new {@link AbstractHighlighterBuilder}      */
DECL|method|fromXContent
specifier|public
name|HB
name|fromXContent
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|HB
name|highlightBuilder
init|=
name|createInstance
argument_list|(
name|parser
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|PRE_TAGS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|preTagsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|preTagsList
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|highlightBuilder
operator|.
name|preTags
argument_list|(
name|preTagsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|preTagsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|POST_TAGS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|postTagsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|postTagsList
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|highlightBuilder
operator|.
name|postTags
argument_list|(
name|postTagsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|postTagsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|false
operator|==
name|highlightBuilder
operator|.
name|doFromXContent
argument_list|(
name|parseContext
argument_list|,
name|currentFieldName
argument_list|,
name|token
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"cannot parse array with name [{}]"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|ORDER_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|order
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|HIGHLIGHT_FILTER_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|highlightFilter
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FRAGMENT_SIZE_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|fragmentSize
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|NUMBER_OF_FRAGMENTS_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|numOfFragments
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|REQUIRE_FIELD_MATCH_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|requireFieldMatch
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|BOUNDARY_MAX_SCAN_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|boundaryMaxScan
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|BOUNDARY_CHARS_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|boundaryChars
argument_list|(
name|parser
operator|.
name|text
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TYPE_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|highlighterType
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FRAGMENTER_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|fragmenter
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|NO_MATCH_SIZE_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|noMatchSize
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FORCE_SOURCE_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|forceSource
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|PHRASE_LIMIT_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|phraseLimit
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|false
operator|==
name|highlightBuilder
operator|.
name|doFromXContent
argument_list|(
name|parseContext
argument_list|,
name|currentFieldName
argument_list|,
name|token
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"unexpected fieldname [{}]"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|&&
name|currentFieldName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|OPTIONS_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|options
argument_list|(
name|parser
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|HIGHLIGHT_QUERY_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|highlightQuery
argument_list|(
name|parseContext
operator|.
name|parseInnerQueryBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|false
operator|==
name|highlightBuilder
operator|.
name|doFromXContent
argument_list|(
name|parseContext
argument_list|,
name|currentFieldName
argument_list|,
name|token
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"cannot parse object with name [{}]"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"unexpected token [{}] after [{}]"
argument_list|,
name|token
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|highlightBuilder
operator|.
name|preTags
argument_list|()
operator|!=
literal|null
operator|&&
name|highlightBuilder
operator|.
name|postTags
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Highlighter global preTags are set, but global postTags are not set"
argument_list|)
throw|;
block|}
return|return
name|highlightBuilder
return|;
block|}
comment|/**      * @param parser the input parser. Implementing classes might advance the parser depending on the      * information they need to instantiate a new instance      * @return a new instance      */
DECL|method|createInstance
specifier|protected
specifier|abstract
name|HB
name|createInstance
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Implementing subclasses can handle parsing special options depending on the      * current token, field name and the parse context.      * @return<tt>true</tt> if an option was found and successfully parsed, otherwise<tt>false</tt>      */
DECL|method|doFromXContent
specifier|protected
specifier|abstract
name|boolean
name|doFromXContent
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|,
name|String
name|currentFieldName
parameter_list|,
name|XContentParser
operator|.
name|Token
name|endMarkerToken
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|preTags
argument_list|)
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|postTags
argument_list|)
argument_list|,
name|fragmentSize
argument_list|,
name|numOfFragments
argument_list|,
name|highlighterType
argument_list|,
name|fragmenter
argument_list|,
name|highlightQuery
argument_list|,
name|order
argument_list|,
name|highlightFilter
argument_list|,
name|forceSource
argument_list|,
name|boundaryMaxScan
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|boundaryChars
argument_list|)
argument_list|,
name|noMatchSize
argument_list|,
name|phraseLimit
argument_list|,
name|options
argument_list|,
name|requireFieldMatch
argument_list|,
name|doHashCode
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * fields only present in subclass should contribute to hashCode in the implementation      */
DECL|method|doHashCode
specifier|protected
specifier|abstract
name|int
name|doHashCode
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|HB
name|other
init|=
operator|(
name|HB
operator|)
name|obj
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|preTags
argument_list|,
name|other
operator|.
name|preTags
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|postTags
argument_list|,
name|other
operator|.
name|postTags
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fragmentSize
argument_list|,
name|other
operator|.
name|fragmentSize
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|numOfFragments
argument_list|,
name|other
operator|.
name|numOfFragments
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|highlighterType
argument_list|,
name|other
operator|.
name|highlighterType
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fragmenter
argument_list|,
name|other
operator|.
name|fragmenter
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|highlightQuery
argument_list|,
name|other
operator|.
name|highlightQuery
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|order
argument_list|,
name|other
operator|.
name|order
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|highlightFilter
argument_list|,
name|other
operator|.
name|highlightFilter
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|forceSource
argument_list|,
name|other
operator|.
name|forceSource
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|boundaryMaxScan
argument_list|,
name|other
operator|.
name|boundaryMaxScan
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|boundaryChars
argument_list|,
name|other
operator|.
name|boundaryChars
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|noMatchSize
argument_list|,
name|other
operator|.
name|noMatchSize
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|phraseLimit
argument_list|,
name|other
operator|.
name|phraseLimit
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|options
argument_list|,
name|other
operator|.
name|options
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|requireFieldMatch
argument_list|,
name|other
operator|.
name|requireFieldMatch
argument_list|)
operator|&&
name|doEquals
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/**      * fields only present in subclass should be checked for equality in the implementation      */
DECL|method|doEquals
specifier|protected
specifier|abstract
name|boolean
name|doEquals
parameter_list|(
name|HB
name|other
parameter_list|)
function_decl|;
comment|/**      * read common parameters from {@link StreamInput}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readOptionsFrom
specifier|protected
name|HB
name|readOptionsFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|preTags
argument_list|(
name|in
operator|.
name|readOptionalStringArray
argument_list|()
argument_list|)
expr_stmt|;
name|postTags
argument_list|(
name|in
operator|.
name|readOptionalStringArray
argument_list|()
argument_list|)
expr_stmt|;
name|fragmentSize
argument_list|(
name|in
operator|.
name|readOptionalVInt
argument_list|()
argument_list|)
expr_stmt|;
name|numOfFragments
argument_list|(
name|in
operator|.
name|readOptionalVInt
argument_list|()
argument_list|)
expr_stmt|;
name|highlighterType
argument_list|(
name|in
operator|.
name|readOptionalString
argument_list|()
argument_list|)
expr_stmt|;
name|fragmenter
argument_list|(
name|in
operator|.
name|readOptionalString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|highlightQuery
argument_list|(
name|in
operator|.
name|readQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|order
argument_list|(
name|in
operator|.
name|readOptionalString
argument_list|()
argument_list|)
expr_stmt|;
name|highlightFilter
argument_list|(
name|in
operator|.
name|readOptionalBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|forceSource
argument_list|(
name|in
operator|.
name|readOptionalBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boundaryMaxScan
argument_list|(
name|in
operator|.
name|readOptionalVInt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|boundaryChars
argument_list|(
name|in
operator|.
name|readString
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|noMatchSize
argument_list|(
name|in
operator|.
name|readOptionalVInt
argument_list|()
argument_list|)
expr_stmt|;
name|phraseLimit
argument_list|(
name|in
operator|.
name|readOptionalVInt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|options
argument_list|(
name|in
operator|.
name|readMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|requireFieldMatch
argument_list|(
name|in
operator|.
name|readOptionalBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|HB
operator|)
name|this
return|;
block|}
comment|/**      * write common parameters to {@link StreamOutput}      */
DECL|method|writeOptionsTo
specifier|protected
name|void
name|writeOptionsTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalStringArray
argument_list|(
name|preTags
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStringArray
argument_list|(
name|postTags
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|fragmentSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|numOfFragments
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|highlighterType
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|fragmenter
argument_list|)
expr_stmt|;
name|boolean
name|hasQuery
init|=
name|highlightQuery
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasQuery
condition|)
block|{
name|out
operator|.
name|writeQuery
argument_list|(
name|highlightQuery
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalString
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|highlightFilter
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|forceSource
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|boundaryMaxScan
argument_list|)
expr_stmt|;
name|boolean
name|hasBounaryChars
init|=
name|boundaryChars
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasBounaryChars
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasBounaryChars
condition|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|boundaryChars
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|noMatchSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|phraseLimit
argument_list|)
expr_stmt|;
name|boolean
name|hasOptions
init|=
name|options
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOptions
condition|)
block|{
name|out
operator|.
name|writeMap
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|requireFieldMatch
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

