begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.highlight
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A builder for search highlighting. Settings can control how large fields  * are summarized to show only selected snippets ("fragments") containing search terms.  *  * @see org.elasticsearch.search.builder.SearchSourceBuilder#highlight()  */
end_comment

begin_class
DECL|class|HighlightBuilder
specifier|public
class|class
name|HighlightBuilder
extends|extends
name|AbstractHighlighterBuilder
argument_list|<
name|HighlightBuilder
argument_list|>
implements|implements
name|Writeable
argument_list|<
name|HighlightBuilder
argument_list|>
implements|,
name|ToXContent
block|{
DECL|field|PROTOTYPE
specifier|public
specifier|static
specifier|final
name|HighlightBuilder
name|PROTOTYPE
init|=
operator|new
name|HighlightBuilder
argument_list|()
decl_stmt|;
DECL|field|HIGHLIGHT_ELEMENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|HIGHLIGHT_ELEMENT_NAME
init|=
literal|"highlight"
decl_stmt|;
DECL|field|fields
specifier|private
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|encoder
specifier|private
name|String
name|encoder
decl_stmt|;
DECL|field|useExplicitFieldOrder
specifier|private
name|boolean
name|useExplicitFieldOrder
init|=
literal|false
decl_stmt|;
comment|/**      * Adds a field to be highlighted with default fragment size of 100 characters, and      * default number of fragments of 5 using the default encoder      *      * @param name The field to highlight      */
DECL|method|field
specifier|public
name|HighlightBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|field
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a field to be highlighted with a provided fragment size (in characters), and      * default number of fragments of 5.      *      * @param name         The field to highlight      * @param fragmentSize The size of a fragment in characters      */
DECL|method|field
specifier|public
name|HighlightBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fragmentSize
parameter_list|)
block|{
return|return
name|field
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|)
operator|.
name|fragmentSize
argument_list|(
name|fragmentSize
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a field to be highlighted with a provided fragment size (in characters), and      * a provided (maximum) number of fragments.      *      * @param name              The field to highlight      * @param fragmentSize      The size of a fragment in characters      * @param numberOfFragments The (maximum) number of fragments      */
DECL|method|field
specifier|public
name|HighlightBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fragmentSize
parameter_list|,
name|int
name|numberOfFragments
parameter_list|)
block|{
return|return
name|field
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|)
operator|.
name|fragmentSize
argument_list|(
name|fragmentSize
argument_list|)
operator|.
name|numOfFragments
argument_list|(
name|numberOfFragments
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a field to be highlighted with a provided fragment size (in characters), and      * a provided (maximum) number of fragments.      *      * @param name              The field to highlight      * @param fragmentSize      The size of a fragment in characters      * @param numberOfFragments The (maximum) number of fragments      * @param fragmentOffset    The offset from the start of the fragment to the start of the highlight      */
DECL|method|field
specifier|public
name|HighlightBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fragmentSize
parameter_list|,
name|int
name|numberOfFragments
parameter_list|,
name|int
name|fragmentOffset
parameter_list|)
block|{
return|return
name|field
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|)
operator|.
name|fragmentSize
argument_list|(
name|fragmentSize
argument_list|)
operator|.
name|numOfFragments
argument_list|(
name|numberOfFragments
argument_list|)
operator|.
name|fragmentOffset
argument_list|(
name|fragmentOffset
argument_list|)
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|HighlightBuilder
name|field
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|fields
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|()
block|{
return|return
name|this
operator|.
name|fields
return|;
block|}
comment|/**      * Set a tag scheme that encapsulates a built in pre and post tags. The allowed schemes      * are<tt>styled</tt> and<tt>default</tt>.      *      * @param schemaName The tag scheme name      */
DECL|method|tagsSchema
specifier|public
name|HighlightBuilder
name|tagsSchema
parameter_list|(
name|String
name|schemaName
parameter_list|)
block|{
switch|switch
condition|(
name|schemaName
condition|)
block|{
case|case
literal|"default"
case|:
name|preTags
argument_list|(
name|HighlighterParseElement
operator|.
name|DEFAULT_PRE_TAGS
argument_list|)
expr_stmt|;
name|postTags
argument_list|(
name|HighlighterParseElement
operator|.
name|DEFAULT_POST_TAGS
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"styled"
case|:
name|preTags
argument_list|(
name|HighlighterParseElement
operator|.
name|STYLED_PRE_TAG
argument_list|)
expr_stmt|;
name|postTags
argument_list|(
name|HighlighterParseElement
operator|.
name|STYLED_POST_TAGS
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown tag schema ["
operator|+
name|schemaName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Set encoder for the highlighting      * are<tt>styled</tt> and<tt>default</tt>.      *      * @param encoder name      */
DECL|method|encoder
specifier|public
name|HighlightBuilder
name|encoder
parameter_list|(
name|String
name|encoder
parameter_list|)
block|{
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Getter for {@link #encoder(String)}      */
DECL|method|encoder
specifier|public
name|String
name|encoder
parameter_list|()
block|{
return|return
name|this
operator|.
name|encoder
return|;
block|}
comment|/**      * Send the fields to be highlighted using a syntax that is specific about the order in which they should be highlighted.      * @return this for chaining      */
DECL|method|useExplicitFieldOrder
specifier|public
name|HighlightBuilder
name|useExplicitFieldOrder
parameter_list|(
name|boolean
name|useExplicitFieldOrder
parameter_list|)
block|{
name|this
operator|.
name|useExplicitFieldOrder
operator|=
name|useExplicitFieldOrder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets value set with {@link #useExplicitFieldOrder(boolean)}      */
DECL|method|useExplicitFieldOrder
specifier|public
name|Boolean
name|useExplicitFieldOrder
parameter_list|()
block|{
return|return
name|this
operator|.
name|useExplicitFieldOrder
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|HIGHLIGHT_ELEMENT_NAME
argument_list|)
expr_stmt|;
name|innerXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Creates a new {@link HighlightBuilder} from the highlighter held by the {@link QueryParseContext}      * in {@link org.elasticsearch.common.xcontent.XContent} format      *      * @param parseContext      *            the input parse context. The state on the parser contained in      *            this context will be changed as a side effect of this method      *            call      * @return the new {@link HighlightBuilder}      */
DECL|method|fromXContent
specifier|public
specifier|static
name|HighlightBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|topLevelFieldName
init|=
literal|null
decl_stmt|;
name|HighlightBuilder
name|highlightBuilder
init|=
operator|new
name|HighlightBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|topLevelFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|PRE_TAGS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|preTagsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|preTagsList
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|highlightBuilder
operator|.
name|preTags
argument_list|(
name|preTagsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|preTagsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|POST_TAGS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|postTagsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|postTagsList
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|highlightBuilder
operator|.
name|postTags
argument_list|(
name|postTagsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|postTagsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|FIELDS_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|useExplicitFieldOrder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|String
name|highlightFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
if|if
condition|(
name|highlightFieldName
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"If highlighter fields is an array it must contain objects containing a single field"
argument_list|)
throw|;
block|}
name|highlightFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|highlightBuilder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|fromXContent
argument_list|(
name|highlightFieldName
argument_list|,
name|parseContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"If highlighter fields is an array it must contain objects containing a single field"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"cannot parse array with name [{}]"
argument_list|,
name|topLevelFieldName
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|ORDER_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|order
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|TAGS_SCHEMA_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|tagsSchema
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|HIGHLIGHT_FILTER_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|highlightFilter
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|FRAGMENT_SIZE_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|fragmentSize
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|NUMBER_OF_FRAGMENTS_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|numOfFragments
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|ENCODER_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|encoder
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|REQUIRE_FIELD_MATCH_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|requireFieldMatch
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|BOUNDARY_MAX_SCAN_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|boundaryMaxScan
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|BOUNDARY_CHARS_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|boundaryChars
argument_list|(
name|parser
operator|.
name|text
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|TYPE_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|highlighterType
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|FRAGMENTER_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|fragmenter
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|NO_MATCH_SIZE_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|noMatchSize
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|FORCE_SOURCE_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|forceSource
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|PHRASE_LIMIT_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|phraseLimit
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"unexpected fieldname [{}]"
argument_list|,
name|topLevelFieldName
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|&&
name|topLevelFieldName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|OPTIONS_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|options
argument_list|(
name|parser
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|FIELDS_FIELD
argument_list|)
condition|)
block|{
name|String
name|highlightFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|highlightFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|highlightBuilder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|fromXContent
argument_list|(
name|highlightFieldName
argument_list|,
name|parseContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|topLevelFieldName
argument_list|,
name|HIGHLIGHT_QUERY_FIELD
argument_list|)
condition|)
block|{
name|highlightBuilder
operator|.
name|highlightQuery
argument_list|(
name|parseContext
operator|.
name|parseInnerQueryBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"cannot parse object with name [{}]"
argument_list|,
name|topLevelFieldName
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|topLevelFieldName
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"unexpected token [{}] after [{}]"
argument_list|,
name|token
argument_list|,
name|topLevelFieldName
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|highlightBuilder
operator|.
name|preTags
argument_list|()
operator|!=
literal|null
operator|&&
name|highlightBuilder
operator|.
name|postTags
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Highlighter global preTags are set, but global postTags are not set"
argument_list|)
throw|;
block|}
return|return
name|highlightBuilder
return|;
block|}
DECL|method|innerXContent
specifier|public
name|void
name|innerXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
comment|// first write common options
name|commonOptionsToXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
comment|// special options for top-level highlighter
if|if
condition|(
name|encoder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ENCODER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|useExplicitFieldOrder
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|useExplicitFieldOrder
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|innerXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|useExplicitFieldOrder
condition|)
block|{
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|useExplicitFieldOrder
condition|)
block|{
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"{ \"error\" : \""
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|"\"}"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|encoder
argument_list|,
name|useExplicitFieldOrder
argument_list|,
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|HighlightBuilder
name|other
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|encoder
argument_list|,
name|other
operator|.
name|encoder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|useExplicitFieldOrder
argument_list|,
name|other
operator|.
name|useExplicitFieldOrder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fields
argument_list|,
name|other
operator|.
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|HighlightBuilder
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|HighlightBuilder
name|highlightBuilder
init|=
operator|new
name|HighlightBuilder
argument_list|()
decl_stmt|;
name|highlightBuilder
operator|.
name|readOptionsFrom
argument_list|(
name|in
argument_list|)
operator|.
name|encoder
argument_list|(
name|in
operator|.
name|readOptionalString
argument_list|()
argument_list|)
operator|.
name|useExplicitFieldOrder
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|fields
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
condition|;
name|i
operator|++
control|)
block|{
name|highlightBuilder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|PROTOTYPE
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|highlightBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeOptionsTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|useExplicitFieldOrder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Field
specifier|public
specifier|static
class|class
name|Field
extends|extends
name|AbstractHighlighterBuilder
argument_list|<
name|Field
argument_list|>
implements|implements
name|Writeable
argument_list|<
name|Field
argument_list|>
block|{
DECL|field|PROTOTYPE
specifier|static
specifier|final
name|Field
name|PROTOTYPE
init|=
operator|new
name|Field
argument_list|(
literal|"_na_"
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|fragmentOffset
name|int
name|fragmentOffset
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|matchedFields
name|String
index|[]
name|matchedFields
decl_stmt|;
DECL|method|Field
specifier|public
name|Field
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|fragmentOffset
specifier|public
name|Field
name|fragmentOffset
parameter_list|(
name|int
name|fragmentOffset
parameter_list|)
block|{
name|this
operator|.
name|fragmentOffset
operator|=
name|fragmentOffset
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the matched fields to highlight against this field data.  Default to null, meaning just          * the named field.  If you provide a list of fields here then don't forget to include name as          * it is not automatically included.          */
DECL|method|matchedFields
specifier|public
name|Field
name|matchedFields
parameter_list|(
name|String
modifier|...
name|matchedFields
parameter_list|)
block|{
name|this
operator|.
name|matchedFields
operator|=
name|matchedFields
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|innerXContent
specifier|public
name|void
name|innerXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// write common options
name|commonOptionsToXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
comment|// write special field-highlighter options
if|if
condition|(
name|fragmentOffset
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FRAGMENT_OFFSET_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fragmentOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matchedFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MATCHED_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|matchedFields
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|private
specifier|static
name|HighlightBuilder
operator|.
name|Field
name|fromXContent
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
specifier|final
name|HighlightBuilder
operator|.
name|Field
name|field
init|=
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
name|fieldname
argument_list|)
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|PRE_TAGS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|preTagsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|preTagsList
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|preTags
argument_list|(
name|preTagsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|preTagsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|POST_TAGS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|postTagsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|postTagsList
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|postTags
argument_list|(
name|postTagsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|postTagsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|MATCHED_FIELDS_FIELD
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|matchedFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|matchedFields
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|matchedFields
argument_list|(
name|matchedFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|matchedFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"cannot parse array with name [{}]"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FRAGMENT_SIZE_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|fragmentSize
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|NUMBER_OF_FRAGMENTS_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|numOfFragments
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FRAGMENT_OFFSET_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|fragmentOffset
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|HIGHLIGHT_FILTER_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|highlightFilter
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|ORDER_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|order
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|REQUIRE_FIELD_MATCH_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|requireFieldMatch
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|BOUNDARY_MAX_SCAN_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|boundaryMaxScan
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|BOUNDARY_CHARS_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|boundaryChars
argument_list|(
name|parser
operator|.
name|text
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TYPE_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|highlighterType
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FRAGMENTER_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|fragmenter
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|NO_MATCH_SIZE_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|noMatchSize
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FORCE_SOURCE_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|forceSource
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|PHRASE_LIMIT_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|phraseLimit
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"unexpected fieldname [{}]"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|&&
name|currentFieldName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|HIGHLIGHT_QUERY_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|highlightQuery
argument_list|(
name|parseContext
operator|.
name|parseInnerQueryBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|OPTIONS_FIELD
argument_list|)
condition|)
block|{
name|field
operator|.
name|options
argument_list|(
name|parser
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"cannot parse object with name [{}]"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"unexpected token [{}] after [{}]"
argument_list|,
name|token
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
return|return
name|field
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|fragmentOffset
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|matchedFields
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|Field
name|other
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|other
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fragmentOffset
argument_list|,
name|other
operator|.
name|fragmentOffset
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|matchedFields
argument_list|,
name|other
operator|.
name|matchedFields
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|Field
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
name|field
operator|.
name|fragmentOffset
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|matchedFields
argument_list|(
name|in
operator|.
name|readOptionalStringArray
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|readOptionsFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|fragmentOffset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStringArray
argument_list|(
name|matchedFields
argument_list|)
expr_stmt|;
name|writeOptionsTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

