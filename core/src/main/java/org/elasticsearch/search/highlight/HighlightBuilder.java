begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.highlight
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|SimpleBoundaryScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
operator|.
name|NamedObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|SearchContextHighlight
operator|.
name|FieldOptions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
operator|.
name|fromList
import|;
end_import

begin_comment
comment|/**  * A builder for search highlighting. Settings can control how large fields  * are summarized to show only selected snippets ("fragments") containing search terms.  *  * @see org.elasticsearch.search.builder.SearchSourceBuilder#highlight()  */
end_comment

begin_class
DECL|class|HighlightBuilder
specifier|public
class|class
name|HighlightBuilder
extends|extends
name|AbstractHighlighterBuilder
argument_list|<
name|HighlightBuilder
argument_list|>
block|{
comment|/** default for whether to highlight fields based on the source even if stored separately */
DECL|field|DEFAULT_FORCE_SOURCE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_FORCE_SOURCE
init|=
literal|false
decl_stmt|;
comment|/** default for whether a field should be highlighted only if a query matches that field */
DECL|field|DEFAULT_REQUIRE_FIELD_MATCH
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_REQUIRE_FIELD_MATCH
init|=
literal|true
decl_stmt|;
comment|/** default for whether<tt>fvh</tt> should provide highlighting on filter clauses */
DECL|field|DEFAULT_HIGHLIGHT_FILTER
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_HIGHLIGHT_FILTER
init|=
literal|false
decl_stmt|;
comment|/** default for highlight fragments being ordered by score */
DECL|field|DEFAULT_SCORE_ORDERED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SCORE_ORDERED
init|=
literal|false
decl_stmt|;
comment|/** the default encoder setting */
DECL|field|DEFAULT_ENCODER
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ENCODER
init|=
literal|"default"
decl_stmt|;
comment|/** default for the maximum number of phrases the fvh will consider */
DECL|field|DEFAULT_PHRASE_LIMIT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PHRASE_LIMIT
init|=
literal|256
decl_stmt|;
comment|/** default for fragment size when there are no matches */
DECL|field|DEFAULT_NO_MATCH_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NO_MATCH_SIZE
init|=
literal|0
decl_stmt|;
comment|/** the default number of fragments for highlighting */
DECL|field|DEFAULT_NUMBER_OF_FRAGMENTS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NUMBER_OF_FRAGMENTS
init|=
literal|5
decl_stmt|;
comment|/** the default number of fragments size in characters */
DECL|field|DEFAULT_FRAGMENT_CHAR_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_FRAGMENT_CHAR_SIZE
init|=
literal|100
decl_stmt|;
comment|/** the default opening tag  */
DECL|field|DEFAULT_PRE_TAGS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_PRE_TAGS
init|=
operator|new
name|String
index|[]
block|{
literal|"<em>"
block|}
decl_stmt|;
comment|/** the default closing tag  */
DECL|field|DEFAULT_POST_TAGS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_POST_TAGS
init|=
operator|new
name|String
index|[]
block|{
literal|"</em>"
block|}
decl_stmt|;
comment|/** the default opening tags when<tt>tag_schema = "styled"</tt>  */
DECL|field|DEFAULT_STYLED_PRE_TAG
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_STYLED_PRE_TAG
init|=
block|{
literal|"<em class=\"hlt1\">"
block|,
literal|"<em class=\"hlt2\">"
block|,
literal|"<em class=\"hlt3\">"
block|,
literal|"<em class=\"hlt4\">"
block|,
literal|"<em class=\"hlt5\">"
block|,
literal|"<em class=\"hlt6\">"
block|,
literal|"<em class=\"hlt7\">"
block|,
literal|"<em class=\"hlt8\">"
block|,
literal|"<em class=\"hlt9\">"
block|,
literal|"<em class=\"hlt10\">"
block|}
decl_stmt|;
comment|/** the default closing tags when<tt>tag_schema = "styled"</tt>  */
DECL|field|DEFAULT_STYLED_POST_TAGS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_STYLED_POST_TAGS
init|=
block|{
literal|"</em>"
block|}
decl_stmt|;
comment|/**      * a {@link FieldOptions} with default settings      */
DECL|field|defaultOptions
specifier|final
specifier|static
name|FieldOptions
name|defaultOptions
init|=
operator|new
name|SearchContextHighlight
operator|.
name|FieldOptions
operator|.
name|Builder
argument_list|()
operator|.
name|preTags
argument_list|(
name|DEFAULT_PRE_TAGS
argument_list|)
operator|.
name|postTags
argument_list|(
name|DEFAULT_POST_TAGS
argument_list|)
operator|.
name|scoreOrdered
argument_list|(
name|DEFAULT_SCORE_ORDERED
argument_list|)
operator|.
name|highlightFilter
argument_list|(
name|DEFAULT_HIGHLIGHT_FILTER
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
name|DEFAULT_REQUIRE_FIELD_MATCH
argument_list|)
operator|.
name|forceSource
argument_list|(
name|DEFAULT_FORCE_SOURCE
argument_list|)
operator|.
name|fragmentCharSize
argument_list|(
name|DEFAULT_FRAGMENT_CHAR_SIZE
argument_list|)
operator|.
name|numberOfFragments
argument_list|(
name|DEFAULT_NUMBER_OF_FRAGMENTS
argument_list|)
operator|.
name|encoder
argument_list|(
name|DEFAULT_ENCODER
argument_list|)
operator|.
name|boundaryMaxScan
argument_list|(
name|SimpleBoundaryScanner
operator|.
name|DEFAULT_MAX_SCAN
argument_list|)
operator|.
name|boundaryChars
argument_list|(
name|SimpleBoundaryScanner
operator|.
name|DEFAULT_BOUNDARY_CHARS
argument_list|)
operator|.
name|noMatchSize
argument_list|(
name|DEFAULT_NO_MATCH_SIZE
argument_list|)
operator|.
name|phraseLimit
argument_list|(
name|DEFAULT_PHRASE_LIMIT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|fields
specifier|private
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|encoder
specifier|private
name|String
name|encoder
decl_stmt|;
DECL|field|useExplicitFieldOrder
specifier|private
name|boolean
name|useExplicitFieldOrder
init|=
literal|false
decl_stmt|;
DECL|method|HighlightBuilder
specifier|public
name|HighlightBuilder
parameter_list|()
block|{     }
comment|/**      * Read from a stream.      */
DECL|method|HighlightBuilder
specifier|public
name|HighlightBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|encoder
argument_list|(
name|in
operator|.
name|readOptionalString
argument_list|()
argument_list|)
expr_stmt|;
name|useExplicitFieldOrder
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|fields
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
condition|;
name|i
operator|++
control|)
block|{
name|field
argument_list|(
operator|new
name|Field
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|useExplicitFieldOrder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds a field to be highlighted with default fragment size of 100 characters, and      * default number of fragments of 5 using the default encoder      *      * @param name The field to highlight      */
DECL|method|field
specifier|public
name|HighlightBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|field
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a field to be highlighted with a provided fragment size (in characters), and      * default number of fragments of 5.      *      * @param name         The field to highlight      * @param fragmentSize The size of a fragment in characters      */
DECL|method|field
specifier|public
name|HighlightBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fragmentSize
parameter_list|)
block|{
return|return
name|field
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|)
operator|.
name|fragmentSize
argument_list|(
name|fragmentSize
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a field to be highlighted with a provided fragment size (in characters), and      * a provided (maximum) number of fragments.      *      * @param name              The field to highlight      * @param fragmentSize      The size of a fragment in characters      * @param numberOfFragments The (maximum) number of fragments      */
DECL|method|field
specifier|public
name|HighlightBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fragmentSize
parameter_list|,
name|int
name|numberOfFragments
parameter_list|)
block|{
return|return
name|field
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|)
operator|.
name|fragmentSize
argument_list|(
name|fragmentSize
argument_list|)
operator|.
name|numOfFragments
argument_list|(
name|numberOfFragments
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a field to be highlighted with a provided fragment size (in characters), and      * a provided (maximum) number of fragments.      *      * @param name              The field to highlight      * @param fragmentSize      The size of a fragment in characters      * @param numberOfFragments The (maximum) number of fragments      * @param fragmentOffset    The offset from the start of the fragment to the start of the highlight      */
DECL|method|field
specifier|public
name|HighlightBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fragmentSize
parameter_list|,
name|int
name|numberOfFragments
parameter_list|,
name|int
name|fragmentOffset
parameter_list|)
block|{
return|return
name|field
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|)
operator|.
name|fragmentSize
argument_list|(
name|fragmentSize
argument_list|)
operator|.
name|numOfFragments
argument_list|(
name|numberOfFragments
argument_list|)
operator|.
name|fragmentOffset
argument_list|(
name|fragmentOffset
argument_list|)
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|HighlightBuilder
name|field
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|fields
name|void
name|fields
parameter_list|(
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|.
name|addAll
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
DECL|method|fields
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|()
block|{
return|return
name|this
operator|.
name|fields
return|;
block|}
comment|/**      * Set a tag scheme that encapsulates a built in pre and post tags. The allowed schemes      * are<tt>styled</tt> and<tt>default</tt>.      *      * @param schemaName The tag scheme name      */
DECL|method|tagsSchema
specifier|public
name|HighlightBuilder
name|tagsSchema
parameter_list|(
name|String
name|schemaName
parameter_list|)
block|{
switch|switch
condition|(
name|schemaName
condition|)
block|{
case|case
literal|"default"
case|:
name|preTags
argument_list|(
name|DEFAULT_PRE_TAGS
argument_list|)
expr_stmt|;
name|postTags
argument_list|(
name|DEFAULT_POST_TAGS
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"styled"
case|:
name|preTags
argument_list|(
name|DEFAULT_STYLED_PRE_TAG
argument_list|)
expr_stmt|;
name|postTags
argument_list|(
name|DEFAULT_STYLED_POST_TAGS
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown tag schema ["
operator|+
name|schemaName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Set encoder for the highlighting      * are<tt>styled</tt> and<tt>default</tt>.      *      * @param encoder name      */
DECL|method|encoder
specifier|public
name|HighlightBuilder
name|encoder
parameter_list|(
name|String
name|encoder
parameter_list|)
block|{
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Getter for {@link #encoder(String)}      */
DECL|method|encoder
specifier|public
name|String
name|encoder
parameter_list|()
block|{
return|return
name|this
operator|.
name|encoder
return|;
block|}
comment|/**      * Send the fields to be highlighted using a syntax that is specific about the order in which they should be highlighted.      * @return this for chaining      */
DECL|method|useExplicitFieldOrder
specifier|public
name|HighlightBuilder
name|useExplicitFieldOrder
parameter_list|(
name|boolean
name|useExplicitFieldOrder
parameter_list|)
block|{
name|this
operator|.
name|useExplicitFieldOrder
operator|=
name|useExplicitFieldOrder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets value set with {@link #useExplicitFieldOrder(boolean)}      */
DECL|method|useExplicitFieldOrder
specifier|public
name|Boolean
name|useExplicitFieldOrder
parameter_list|()
block|{
return|return
name|this
operator|.
name|useExplicitFieldOrder
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|innerXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|BiFunction
argument_list|<
name|QueryParseContext
argument_list|,
name|HighlightBuilder
argument_list|,
name|HighlightBuilder
argument_list|>
name|PARSER
decl_stmt|;
static|static
block|{
name|ObjectParser
argument_list|<
name|HighlightBuilder
argument_list|,
name|QueryParseContext
argument_list|>
name|parser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"highlight"
argument_list|)
decl_stmt|;
name|parser
operator|.
name|declareString
argument_list|(
name|HighlightBuilder
operator|::
name|tagsSchema
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"tags_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareString
argument_list|(
name|HighlightBuilder
operator|::
name|encoder
argument_list|,
name|ENCODER_FIELD
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareNamedObjects
argument_list|(
name|HighlightBuilder
operator|::
name|fields
argument_list|,
name|Field
operator|.
name|PARSER
argument_list|,
parameter_list|(
name|HighlightBuilder
name|hb
parameter_list|)
lambda|->
name|hb
operator|.
name|useExplicitFieldOrder
argument_list|(
literal|true
argument_list|)
argument_list|,
name|FIELDS_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|=
name|setupParser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|HighlightBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|c
parameter_list|)
block|{
return|return
name|PARSER
operator|.
name|apply
argument_list|(
name|c
argument_list|,
operator|new
name|HighlightBuilder
argument_list|()
argument_list|)
return|;
block|}
DECL|method|build
specifier|public
name|SearchContextHighlight
name|build
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create template global options that are later merged with any partial field options
specifier|final
name|SearchContextHighlight
operator|.
name|FieldOptions
operator|.
name|Builder
name|globalOptionsBuilder
init|=
operator|new
name|SearchContextHighlight
operator|.
name|FieldOptions
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|globalOptionsBuilder
operator|.
name|encoder
argument_list|(
name|this
operator|.
name|encoder
argument_list|)
expr_stmt|;
name|transferOptions
argument_list|(
name|this
argument_list|,
name|globalOptionsBuilder
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// overwrite unset global options by default values
name|globalOptionsBuilder
operator|.
name|merge
argument_list|(
name|defaultOptions
argument_list|)
expr_stmt|;
comment|// create field options
name|Collection
argument_list|<
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|SearchContextHighlight
operator|.
name|Field
argument_list|>
name|fieldOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|this
operator|.
name|fields
control|)
block|{
specifier|final
name|SearchContextHighlight
operator|.
name|FieldOptions
operator|.
name|Builder
name|fieldOptionsBuilder
init|=
operator|new
name|SearchContextHighlight
operator|.
name|FieldOptions
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|fieldOptionsBuilder
operator|.
name|fragmentOffset
argument_list|(
name|field
operator|.
name|fragmentOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|matchedFields
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|matchedFields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|field
operator|.
name|matchedFields
operator|.
name|length
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|matchedFields
argument_list|,
name|field
operator|.
name|matchedFields
argument_list|)
expr_stmt|;
name|fieldOptionsBuilder
operator|.
name|matchedFields
argument_list|(
name|matchedFields
argument_list|)
expr_stmt|;
block|}
name|transferOptions
argument_list|(
name|field
argument_list|,
name|fieldOptionsBuilder
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|fieldOptions
operator|.
name|add
argument_list|(
operator|new
name|SearchContextHighlight
operator|.
name|Field
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
name|fieldOptionsBuilder
operator|.
name|merge
argument_list|(
name|globalOptionsBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SearchContextHighlight
argument_list|(
name|fieldOptions
argument_list|)
return|;
block|}
comment|/**      * Transfers field options present in the input {@link AbstractHighlighterBuilder} to the receiving      * {@link FieldOptions.Builder}, effectively overwriting existing settings      * @param targetOptionsBuilder the receiving options builder      * @param highlighterBuilder highlight builder with the input options      * @param context needed to convert {@link QueryBuilder} to {@link Query}      * @throws IOException on errors parsing any optional nested highlight query      */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|transferOptions
specifier|private
specifier|static
name|void
name|transferOptions
parameter_list|(
name|AbstractHighlighterBuilder
name|highlighterBuilder
parameter_list|,
name|SearchContextHighlight
operator|.
name|FieldOptions
operator|.
name|Builder
name|targetOptionsBuilder
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|highlighterBuilder
operator|.
name|preTags
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|preTags
argument_list|(
name|highlighterBuilder
operator|.
name|preTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|postTags
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|postTags
argument_list|(
name|highlighterBuilder
operator|.
name|postTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|order
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|scoreOrdered
argument_list|(
name|highlighterBuilder
operator|.
name|order
operator|==
name|Order
operator|.
name|SCORE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|highlightFilter
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|highlightFilter
argument_list|(
name|highlighterBuilder
operator|.
name|highlightFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|fragmentSize
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|fragmentCharSize
argument_list|(
name|highlighterBuilder
operator|.
name|fragmentSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|numOfFragments
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|numberOfFragments
argument_list|(
name|highlighterBuilder
operator|.
name|numOfFragments
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|requireFieldMatch
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|requireFieldMatch
argument_list|(
name|highlighterBuilder
operator|.
name|requireFieldMatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|boundaryMaxScan
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|boundaryMaxScan
argument_list|(
name|highlighterBuilder
operator|.
name|boundaryMaxScan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|boundaryChars
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|boundaryChars
argument_list|(
name|convertCharArray
argument_list|(
name|highlighterBuilder
operator|.
name|boundaryChars
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|highlighterType
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|highlighterType
argument_list|(
name|highlighterBuilder
operator|.
name|highlighterType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|fragmenter
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|fragmenter
argument_list|(
name|highlighterBuilder
operator|.
name|fragmenter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|noMatchSize
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|noMatchSize
argument_list|(
name|highlighterBuilder
operator|.
name|noMatchSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|forceSource
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|forceSource
argument_list|(
name|highlighterBuilder
operator|.
name|forceSource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|phraseLimit
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|phraseLimit
argument_list|(
name|highlighterBuilder
operator|.
name|phraseLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|options
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|options
argument_list|(
name|highlighterBuilder
operator|.
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highlighterBuilder
operator|.
name|highlightQuery
operator|!=
literal|null
condition|)
block|{
name|targetOptionsBuilder
operator|.
name|highlightQuery
argument_list|(
name|QueryBuilder
operator|.
name|rewriteQuery
argument_list|(
name|highlighterBuilder
operator|.
name|highlightQuery
argument_list|,
name|context
argument_list|)
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|convertCharArray
specifier|static
name|Character
index|[]
name|convertCharArray
parameter_list|(
name|char
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Character
index|[]
name|charArray
init|=
operator|new
name|Character
index|[
name|array
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|charArray
index|[
name|i
index|]
operator|=
name|array
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|charArray
return|;
block|}
annotation|@
name|Override
DECL|method|innerXContent
specifier|public
name|void
name|innerXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
comment|// first write common options
name|commonOptionsToXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
comment|// special options for top-level highlighter
if|if
condition|(
name|encoder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ENCODER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|useExplicitFieldOrder
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|useExplicitFieldOrder
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|innerXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|useExplicitFieldOrder
condition|)
block|{
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|useExplicitFieldOrder
condition|)
block|{
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|encoder
argument_list|,
name|useExplicitFieldOrder
argument_list|,
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|HighlightBuilder
name|other
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|encoder
argument_list|,
name|other
operator|.
name|encoder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|useExplicitFieldOrder
argument_list|,
name|other
operator|.
name|useExplicitFieldOrder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fields
argument_list|,
name|other
operator|.
name|fields
argument_list|)
return|;
block|}
DECL|class|Field
specifier|public
specifier|static
class|class
name|Field
extends|extends
name|AbstractHighlighterBuilder
argument_list|<
name|Field
argument_list|>
block|{
DECL|field|PARSER
specifier|static
specifier|final
name|NamedObjectParser
argument_list|<
name|Field
argument_list|,
name|QueryParseContext
argument_list|>
name|PARSER
decl_stmt|;
static|static
block|{
name|ObjectParser
argument_list|<
name|Field
argument_list|,
name|QueryParseContext
argument_list|>
name|parser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"highlight_field"
argument_list|)
decl_stmt|;
name|parser
operator|.
name|declareInt
argument_list|(
name|Field
operator|::
name|fragmentOffset
argument_list|,
name|FRAGMENT_OFFSET_FIELD
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareStringArray
argument_list|(
name|fromList
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Field
operator|::
name|matchedFields
argument_list|)
argument_list|,
name|MATCHED_FIELDS_FIELD
argument_list|)
expr_stmt|;
name|BiFunction
argument_list|<
name|QueryParseContext
argument_list|,
name|Field
argument_list|,
name|Field
argument_list|>
name|decoratedParser
init|=
name|setupParser
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|PARSER
operator|=
parameter_list|(
name|XContentParser
name|p
parameter_list|,
name|QueryParseContext
name|c
parameter_list|,
name|String
name|name
parameter_list|)
lambda|->
name|decoratedParser
operator|.
name|apply
argument_list|(
name|c
argument_list|,
operator|new
name|Field
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|fragmentOffset
name|int
name|fragmentOffset
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|matchedFields
name|String
index|[]
name|matchedFields
decl_stmt|;
DECL|method|Field
specifier|public
name|Field
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**          * Read from a stream.          */
DECL|method|Field
specifier|public
name|Field
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|fragmentOffset
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|matchedFields
argument_list|(
name|in
operator|.
name|readOptionalStringArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|fragmentOffset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStringArray
argument_list|(
name|matchedFields
argument_list|)
expr_stmt|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|fragmentOffset
specifier|public
name|Field
name|fragmentOffset
parameter_list|(
name|int
name|fragmentOffset
parameter_list|)
block|{
name|this
operator|.
name|fragmentOffset
operator|=
name|fragmentOffset
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the matched fields to highlight against this field data.  Default to null, meaning just          * the named field.  If you provide a list of fields here then don't forget to include name as          * it is not automatically included.          */
DECL|method|matchedFields
specifier|public
name|Field
name|matchedFields
parameter_list|(
name|String
modifier|...
name|matchedFields
parameter_list|)
block|{
name|this
operator|.
name|matchedFields
operator|=
name|matchedFields
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|innerXContent
specifier|public
name|void
name|innerXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// write common options
name|commonOptionsToXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
comment|// write special field-highlighter options
if|if
condition|(
name|fragmentOffset
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FRAGMENT_OFFSET_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fragmentOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matchedFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MATCHED_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|matchedFields
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|fragmentOffset
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|matchedFields
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|Field
name|other
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|other
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fragmentOffset
argument_list|,
name|other
operator|.
name|fragmentOffset
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|matchedFields
argument_list|,
name|other
operator|.
name|matchedFields
argument_list|)
return|;
block|}
block|}
DECL|enum|Order
specifier|public
enum|enum
name|Order
implements|implements
name|Writeable
argument_list|<
name|Order
argument_list|>
block|{
DECL|enum constant|NONE
DECL|enum constant|SCORE
name|NONE
block|,
name|SCORE
block|;
DECL|method|readFromStream
specifier|public
specifier|static
name|Order
name|readFromStream
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ordinal
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordinal
operator|<
literal|0
operator|||
name|ordinal
operator|>=
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown Order ordinal ["
operator|+
name|ordinal
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|values
argument_list|()
index|[
name|ordinal
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|fromString
specifier|public
specifier|static
name|Order
name|fromString
parameter_list|(
name|String
name|order
parameter_list|)
block|{
if|if
condition|(
name|order
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
name|SCORE
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Order
operator|.
name|SCORE
return|;
block|}
return|return
name|NONE
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

