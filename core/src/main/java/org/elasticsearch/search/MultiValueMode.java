begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomAccessOrds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|NumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Defines what values to pick in the case a document contains multiple values for a particular field.  */
end_comment

begin_enum
DECL|enum|MultiValueMode
specifier|public
enum|enum
name|MultiValueMode
implements|implements
name|Writeable
block|{
comment|/**      * Pick the sum of all the values.      */
DECL|enum constant|SUM
name|SUM
block|{
annotation|@
name|Override
specifier|protected
name|long
name|pick
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|total
operator|+=
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
else|else
block|{
return|return
name|missingValue
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|long
name|pick
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|missingValue
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
name|long
name|totalValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|totalValue
operator|+=
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|+=
name|count
expr_stmt|;
block|}
return|return
name|totalCount
operator|>
literal|0
condition|?
name|totalValue
else|:
name|missingValue
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|double
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|total
operator|+=
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
else|else
block|{
return|return
name|missingValue
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
name|double
name|totalValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|totalValue
operator|+=
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|+=
name|count
expr_stmt|;
block|}
return|return
name|totalCount
operator|>
literal|0
condition|?
name|totalValue
else|:
name|missingValue
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|UnsortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|double
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|total
operator|+=
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
else|else
block|{
return|return
name|missingValue
return|;
block|}
block|}
block|}
block|,
comment|/**      * Pick the average of all the values.      */
DECL|enum constant|AVG
name|AVG
block|{
annotation|@
name|Override
specifier|protected
name|long
name|pick
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|total
operator|+=
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|count
operator|>
literal|1
condition|?
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|total
operator|/
operator|(
name|double
operator|)
name|count
argument_list|)
else|:
name|total
return|;
block|}
else|else
block|{
return|return
name|missingValue
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|long
name|pick
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|missingValue
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
name|long
name|totalValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|totalValue
operator|+=
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|+=
name|count
expr_stmt|;
block|}
if|if
condition|(
name|totalCount
operator|<
literal|1
condition|)
block|{
return|return
name|missingValue
return|;
block|}
return|return
name|totalCount
operator|>
literal|1
condition|?
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|totalValue
operator|/
operator|(
name|double
operator|)
name|totalCount
argument_list|)
else|:
name|totalValue
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|double
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|total
operator|+=
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|total
operator|/
name|count
return|;
block|}
else|else
block|{
return|return
name|missingValue
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
name|double
name|totalValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|totalValue
operator|+=
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|+=
name|count
expr_stmt|;
block|}
if|if
condition|(
name|totalCount
operator|<
literal|1
condition|)
block|{
return|return
name|missingValue
return|;
block|}
return|return
name|totalValue
operator|/
name|totalCount
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|UnsortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|double
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|total
operator|+=
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|total
operator|/
name|count
return|;
block|}
else|else
block|{
return|return
name|missingValue
return|;
block|}
block|}
block|}
block|,
comment|/**      * Pick the median of the values.      */
DECL|enum constant|MEDIAN
name|MEDIAN
block|{
annotation|@
name|Override
specifier|protected
name|long
name|pick
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|count
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|count
operator|/=
literal|2
expr_stmt|;
return|return
name|Math
operator|.
name|round
argument_list|(
operator|(
name|values
operator|.
name|valueAt
argument_list|(
name|count
operator|-
literal|1
argument_list|)
operator|+
name|values
operator|.
name|valueAt
argument_list|(
name|count
argument_list|)
operator|)
operator|/
literal|2.0
argument_list|)
return|;
block|}
else|else
block|{
name|count
operator|/=
literal|2
expr_stmt|;
return|return
name|values
operator|.
name|valueAt
argument_list|(
name|count
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|missingValue
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|count
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|count
operator|/=
literal|2
expr_stmt|;
return|return
operator|(
name|values
operator|.
name|valueAt
argument_list|(
name|count
operator|-
literal|1
argument_list|)
operator|+
name|values
operator|.
name|valueAt
argument_list|(
name|count
argument_list|)
operator|)
operator|/
literal|2.0
return|;
block|}
else|else
block|{
name|count
operator|/=
literal|2
expr_stmt|;
return|return
name|values
operator|.
name|valueAt
argument_list|(
name|count
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|missingValue
return|;
block|}
block|}
block|}
block|,
comment|/**      * Pick the lowest value.      */
DECL|enum constant|MIN
name|MIN
block|{
annotation|@
name|Override
specifier|protected
name|long
name|pick
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
else|:
name|missingValue
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|pick
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|missingValue
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
name|long
name|minValue
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|minValue
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minValue
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|+=
name|count
expr_stmt|;
block|}
return|return
name|totalCount
operator|>
literal|0
condition|?
name|minValue
else|:
name|missingValue
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
else|:
name|missingValue
return|;
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
name|double
name|minValue
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|minValue
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minValue
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|+=
name|count
expr_stmt|;
block|}
return|return
name|totalCount
operator|>
literal|0
condition|?
name|minValue
else|:
name|missingValue
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|BytesRef
name|pick
parameter_list|(
name|SortedBinaryDocValues
name|values
parameter_list|,
name|BytesRef
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
else|:
name|missingValue
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BytesRef
name|pick
parameter_list|(
name|BinaryDocValues
name|values
parameter_list|,
name|BytesRefBuilder
name|builder
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|BytesRefBuilder
name|value
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
specifier|final
name|BytesRef
name|innerValue
init|=
name|values
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|copyBytes
argument_list|(
name|innerValue
argument_list|)
expr_stmt|;
name|value
operator|=
name|builder
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|BytesRef
name|min
init|=
name|value
operator|.
name|get
argument_list|()
operator|.
name|compareTo
argument_list|(
name|innerValue
argument_list|)
operator|<=
literal|0
condition|?
name|value
operator|.
name|get
argument_list|()
else|:
name|innerValue
decl_stmt|;
if|if
condition|(
name|min
operator|==
name|innerValue
condition|)
block|{
name|value
operator|.
name|copyBytes
argument_list|(
name|min
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|value
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|pick
parameter_list|(
name|RandomAccessOrds
name|values
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return
name|values
operator|.
name|cardinality
argument_list|()
operator|>
literal|0
condition|?
operator|(
name|int
operator|)
name|values
operator|.
name|ordAt
argument_list|(
literal|0
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|pick
parameter_list|(
name|SortedDocValues
name|values
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|int
name|ord
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
specifier|final
name|int
name|innerOrd
init|=
name|values
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerOrd
operator|!=
operator|-
literal|1
condition|)
block|{
name|ord
operator|=
name|ord
operator|==
operator|-
literal|1
condition|?
name|innerOrd
else|:
name|Math
operator|.
name|min
argument_list|(
name|ord
argument_list|,
name|innerOrd
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ord
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|UnsortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
name|double
name|min
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
return|return
name|count
operator|>
literal|0
condition|?
name|min
else|:
name|missingValue
return|;
block|}
block|}
block|,
comment|/**      * Pick the highest value.      */
DECL|enum constant|MAX
name|MAX
block|{
annotation|@
name|Override
specifier|protected
name|long
name|pick
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
name|values
operator|.
name|valueAt
argument_list|(
name|count
operator|-
literal|1
argument_list|)
else|:
name|missingValue
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|pick
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|missingValue
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
name|long
name|maxValue
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|maxValue
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxValue
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
name|count
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|+=
name|count
expr_stmt|;
block|}
return|return
name|totalCount
operator|>
literal|0
condition|?
name|maxValue
else|:
name|missingValue
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
name|values
operator|.
name|valueAt
argument_list|(
name|count
operator|-
literal|1
argument_list|)
else|:
name|missingValue
return|;
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
name|double
name|maxValue
init|=
name|Double
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|maxValue
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxValue
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
name|count
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|+=
name|count
expr_stmt|;
block|}
return|return
name|totalCount
operator|>
literal|0
condition|?
name|maxValue
else|:
name|missingValue
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|BytesRef
name|pick
parameter_list|(
name|SortedBinaryDocValues
name|values
parameter_list|,
name|BytesRef
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
name|values
operator|.
name|valueAt
argument_list|(
name|count
operator|-
literal|1
argument_list|)
else|:
name|missingValue
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BytesRef
name|pick
parameter_list|(
name|BinaryDocValues
name|values
parameter_list|,
name|BytesRefBuilder
name|builder
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|BytesRefBuilder
name|value
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
specifier|final
name|BytesRef
name|innerValue
init|=
name|values
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|copyBytes
argument_list|(
name|innerValue
argument_list|)
expr_stmt|;
name|value
operator|=
name|builder
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|BytesRef
name|max
init|=
name|value
operator|.
name|get
argument_list|()
operator|.
name|compareTo
argument_list|(
name|innerValue
argument_list|)
operator|>
literal|0
condition|?
name|value
operator|.
name|get
argument_list|()
else|:
name|innerValue
decl_stmt|;
if|if
condition|(
name|max
operator|==
name|innerValue
condition|)
block|{
name|value
operator|.
name|copyBytes
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|value
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|pick
parameter_list|(
name|RandomAccessOrds
name|values
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|values
operator|.
name|cardinality
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
operator|(
name|int
operator|)
name|values
operator|.
name|ordAt
argument_list|(
name|count
operator|-
literal|1
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|pick
parameter_list|(
name|SortedDocValues
name|values
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
try|try
block|{
name|int
name|ord
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|startDoc
init|;
name|doc
operator|<
name|endDoc
condition|;
name|doc
operator|=
name|docItr
operator|.
name|nextDoc
argument_list|()
control|)
block|{
specifier|final
name|int
name|innerOrd
init|=
name|values
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerOrd
operator|!=
operator|-
literal|1
condition|)
block|{
name|ord
operator|=
name|Math
operator|.
name|max
argument_list|(
name|ord
argument_list|,
name|innerOrd
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ord
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioException
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|double
name|pick
parameter_list|(
name|UnsortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
name|double
name|max
init|=
name|Double
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
return|return
name|count
operator|>
literal|0
condition|?
name|max
else|:
name|missingValue
return|;
block|}
block|}
block|;
comment|/**      * A case insensitive version of {@link #valueOf(String)}      *      * @throws IllegalArgumentException if the given string doesn't match a sort mode or is<code>null</code>.      */
DECL|method|fromString
specifier|public
specifier|static
name|MultiValueMode
name|fromString
parameter_list|(
name|String
name|sortMode
parameter_list|)
block|{
try|try
block|{
return|return
name|valueOf
argument_list|(
name|sortMode
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal sort mode: "
operator|+
name|sortMode
argument_list|)
throw|;
block|}
block|}
comment|/**      * Return a {@link NumericDocValues} instance that can be used to sort documents      * with this mode and the provided values. When a document has no value,      *<code>missingValue</code> is returned.      *      * Allowed Modes: SUM, AVG, MEDIAN, MIN, MAX      */
DECL|method|select
specifier|public
name|NumericDocValues
name|select
parameter_list|(
specifier|final
name|SortedNumericDocValues
name|values
parameter_list|,
specifier|final
name|long
name|missingValue
parameter_list|)
block|{
specifier|final
name|NumericDocValues
name|singleton
init|=
name|DocValues
operator|.
name|unwrapSingleton
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|singleton
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Bits
name|docsWithField
init|=
name|DocValues
operator|.
name|unwrapSingletonBits
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|==
literal|null
operator|||
name|missingValue
operator|==
literal|0
condition|)
block|{
return|return
name|singleton
return|;
block|}
else|else
block|{
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|long
name|value
init|=
name|singleton
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|0
operator|&&
name|docsWithField
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|missingValue
return|;
block|}
return|return
name|value
return|;
block|}
block|}
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|pick
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|docID
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
DECL|method|pick
specifier|protected
name|long
name|pick
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported sort mode: "
operator|+
name|this
argument_list|)
throw|;
block|}
comment|/**      * Return a {@link NumericDocValues} instance that can be used to sort root documents      * with this mode, the provided values and filters for root/inner documents.      *      * For every root document, the values of its inner documents will be aggregated.      * If none of the inner documents has a value, then<code>missingValue</code> is returned.      *      * Allowed Modes: SUM, AVG, MIN, MAX      *      * NOTE: Calling the returned instance on docs that are not root docs is illegal      *       The returned instance can only be evaluate the current and upcoming docs      */
DECL|method|select
specifier|public
name|NumericDocValues
name|select
parameter_list|(
specifier|final
name|SortedNumericDocValues
name|values
parameter_list|,
specifier|final
name|long
name|missingValue
parameter_list|,
specifier|final
name|BitSet
name|rootDocs
parameter_list|,
specifier|final
name|DocIdSetIterator
name|innerDocs
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rootDocs
operator|==
literal|null
operator|||
name|innerDocs
operator|==
literal|null
condition|)
block|{
return|return
name|select
argument_list|(
name|DocValues
operator|.
name|emptySortedNumeric
argument_list|(
name|maxDoc
argument_list|)
argument_list|,
name|missingValue
argument_list|)
return|;
block|}
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
name|int
name|lastSeenRootDoc
init|=
literal|0
decl_stmt|;
name|long
name|lastEmittedValue
init|=
name|missingValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|rootDoc
parameter_list|)
block|{
assert|assert
name|rootDocs
operator|.
name|get
argument_list|(
name|rootDoc
argument_list|)
operator|:
literal|"can only sort root documents"
assert|;
assert|assert
name|rootDoc
operator|>=
name|lastSeenRootDoc
operator|:
literal|"can only evaluate current and upcoming root docs"
assert|;
if|if
condition|(
name|rootDoc
operator|==
name|lastSeenRootDoc
condition|)
block|{
return|return
name|lastEmittedValue
return|;
block|}
try|try
block|{
specifier|final
name|int
name|prevRootDoc
init|=
name|rootDocs
operator|.
name|prevSetBit
argument_list|(
name|rootDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|firstNestedDoc
decl_stmt|;
if|if
condition|(
name|innerDocs
operator|.
name|docID
argument_list|()
operator|>
name|prevRootDoc
condition|)
block|{
name|firstNestedDoc
operator|=
name|innerDocs
operator|.
name|docID
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|firstNestedDoc
operator|=
name|innerDocs
operator|.
name|advance
argument_list|(
name|prevRootDoc
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|lastSeenRootDoc
operator|=
name|rootDoc
expr_stmt|;
name|lastEmittedValue
operator|=
name|pick
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|innerDocs
argument_list|,
name|firstNestedDoc
argument_list|,
name|rootDoc
argument_list|)
expr_stmt|;
return|return
name|lastEmittedValue
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
DECL|method|pick
specifier|protected
name|long
name|pick
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|missingValue
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported sort mode: "
operator|+
name|this
argument_list|)
throw|;
block|}
comment|/**      * Return a {@link NumericDoubleValues} instance that can be used to sort documents      * with this mode and the provided values. When a document has no value,      *<code>missingValue</code> is returned.      *      * Allowed Modes: SUM, AVG, MEDIAN, MIN, MAX      */
DECL|method|select
specifier|public
name|NumericDoubleValues
name|select
parameter_list|(
specifier|final
name|SortedNumericDoubleValues
name|values
parameter_list|,
specifier|final
name|double
name|missingValue
parameter_list|)
block|{
specifier|final
name|NumericDoubleValues
name|singleton
init|=
name|FieldData
operator|.
name|unwrapSingleton
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|singleton
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Bits
name|docsWithField
init|=
name|FieldData
operator|.
name|unwrapSingletonBits
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|==
literal|null
operator|||
name|missingValue
operator|==
literal|0
condition|)
block|{
return|return
name|singleton
return|;
block|}
else|else
block|{
return|return
operator|new
name|NumericDoubleValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|double
name|value
init|=
name|singleton
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|0
operator|&&
name|docsWithField
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|missingValue
return|;
block|}
return|return
name|value
return|;
block|}
block|}
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|NumericDoubleValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|pick
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|docID
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
DECL|method|pick
specifier|protected
name|double
name|pick
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported sort mode: "
operator|+
name|this
argument_list|)
throw|;
block|}
comment|/**      * Return a {@link NumericDoubleValues} instance that can be used to sort root documents      * with this mode, the provided values and filters for root/inner documents.      *      * For every root document, the values of its inner documents will be aggregated.      * If none of the inner documents has a value, then<code>missingValue</code> is returned.      *      * Allowed Modes: SUM, AVG, MIN, MAX      *      * NOTE: Calling the returned instance on docs that are not root docs is illegal      *       The returned instance can only be evaluate the current and upcoming docs      */
DECL|method|select
specifier|public
name|NumericDoubleValues
name|select
parameter_list|(
specifier|final
name|SortedNumericDoubleValues
name|values
parameter_list|,
specifier|final
name|double
name|missingValue
parameter_list|,
specifier|final
name|BitSet
name|rootDocs
parameter_list|,
specifier|final
name|DocIdSetIterator
name|innerDocs
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rootDocs
operator|==
literal|null
operator|||
name|innerDocs
operator|==
literal|null
condition|)
block|{
return|return
name|select
argument_list|(
name|FieldData
operator|.
name|emptySortedNumericDoubles
argument_list|(
name|maxDoc
argument_list|)
argument_list|,
name|missingValue
argument_list|)
return|;
block|}
return|return
operator|new
name|NumericDoubleValues
argument_list|()
block|{
name|int
name|lastSeenRootDoc
init|=
literal|0
decl_stmt|;
name|double
name|lastEmittedValue
init|=
name|missingValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|double
name|get
parameter_list|(
name|int
name|rootDoc
parameter_list|)
block|{
assert|assert
name|rootDocs
operator|.
name|get
argument_list|(
name|rootDoc
argument_list|)
operator|:
literal|"can only sort root documents"
assert|;
assert|assert
name|rootDoc
operator|>=
name|lastSeenRootDoc
operator|:
literal|"can only evaluate current and upcoming root docs"
assert|;
if|if
condition|(
name|rootDoc
operator|==
name|lastSeenRootDoc
condition|)
block|{
return|return
name|lastEmittedValue
return|;
block|}
try|try
block|{
specifier|final
name|int
name|prevRootDoc
init|=
name|rootDocs
operator|.
name|prevSetBit
argument_list|(
name|rootDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|firstNestedDoc
decl_stmt|;
if|if
condition|(
name|innerDocs
operator|.
name|docID
argument_list|()
operator|>
name|prevRootDoc
condition|)
block|{
name|firstNestedDoc
operator|=
name|innerDocs
operator|.
name|docID
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|firstNestedDoc
operator|=
name|innerDocs
operator|.
name|advance
argument_list|(
name|prevRootDoc
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|lastSeenRootDoc
operator|=
name|rootDoc
expr_stmt|;
name|lastEmittedValue
operator|=
name|pick
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|innerDocs
argument_list|,
name|firstNestedDoc
argument_list|,
name|rootDoc
argument_list|)
expr_stmt|;
return|return
name|lastEmittedValue
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
DECL|method|pick
specifier|protected
name|double
name|pick
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|double
name|missingValue
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported sort mode: "
operator|+
name|this
argument_list|)
throw|;
block|}
comment|/**      * Return a {@link BinaryDocValues} instance that can be used to sort documents      * with this mode and the provided values. When a document has no value,      *<code>missingValue</code> is returned.      *      * Allowed Modes: MIN, MAX      */
DECL|method|select
specifier|public
name|BinaryDocValues
name|select
parameter_list|(
specifier|final
name|SortedBinaryDocValues
name|values
parameter_list|,
specifier|final
name|BytesRef
name|missingValue
parameter_list|)
block|{
specifier|final
name|BinaryDocValues
name|singleton
init|=
name|FieldData
operator|.
name|unwrapSingleton
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|singleton
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Bits
name|docsWithField
init|=
name|FieldData
operator|.
name|unwrapSingletonBits
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|docsWithField
operator|==
literal|null
condition|)
block|{
return|return
name|singleton
return|;
block|}
else|else
block|{
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|BytesRef
name|value
init|=
name|singleton
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
operator|==
literal|0
operator|&&
name|docsWithField
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|missingValue
return|;
block|}
return|return
name|value
return|;
block|}
block|}
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|pick
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|docID
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
DECL|method|pick
specifier|protected
name|BytesRef
name|pick
parameter_list|(
name|SortedBinaryDocValues
name|values
parameter_list|,
name|BytesRef
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported sort mode: "
operator|+
name|this
argument_list|)
throw|;
block|}
comment|/**      * Return a {@link BinaryDocValues} instance that can be used to sort root documents      * with this mode, the provided values and filters for root/inner documents.      *      * For every root document, the values of its inner documents will be aggregated.      * If none of the inner documents has a value, then<code>missingValue</code> is returned.      *      * Allowed Modes: MIN, MAX      *      * NOTE: Calling the returned instance on docs that are not root docs is illegal      *       The returned instance can only be evaluate the current and upcoming docs      */
DECL|method|select
specifier|public
name|BinaryDocValues
name|select
parameter_list|(
specifier|final
name|SortedBinaryDocValues
name|values
parameter_list|,
specifier|final
name|BytesRef
name|missingValue
parameter_list|,
specifier|final
name|BitSet
name|rootDocs
parameter_list|,
specifier|final
name|DocIdSetIterator
name|innerDocs
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rootDocs
operator|==
literal|null
operator|||
name|innerDocs
operator|==
literal|null
condition|)
block|{
return|return
name|select
argument_list|(
name|FieldData
operator|.
name|emptySortedBinary
argument_list|(
name|maxDoc
argument_list|)
argument_list|,
name|missingValue
argument_list|)
return|;
block|}
specifier|final
name|BinaryDocValues
name|selectedValues
init|=
name|select
argument_list|(
name|values
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
specifier|final
name|BytesRefBuilder
name|builder
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|int
name|lastSeenRootDoc
init|=
literal|0
decl_stmt|;
name|BytesRef
name|lastEmittedValue
init|=
name|missingValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|rootDoc
parameter_list|)
block|{
assert|assert
name|rootDocs
operator|.
name|get
argument_list|(
name|rootDoc
argument_list|)
operator|:
literal|"can only sort root documents"
assert|;
assert|assert
name|rootDoc
operator|>=
name|lastSeenRootDoc
operator|:
literal|"can only evaluate current and upcoming root docs"
assert|;
if|if
condition|(
name|rootDoc
operator|==
name|lastSeenRootDoc
condition|)
block|{
return|return
name|lastEmittedValue
return|;
block|}
try|try
block|{
specifier|final
name|int
name|prevRootDoc
init|=
name|rootDocs
operator|.
name|prevSetBit
argument_list|(
name|rootDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|firstNestedDoc
decl_stmt|;
if|if
condition|(
name|innerDocs
operator|.
name|docID
argument_list|()
operator|>
name|prevRootDoc
condition|)
block|{
name|firstNestedDoc
operator|=
name|innerDocs
operator|.
name|docID
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|firstNestedDoc
operator|=
name|innerDocs
operator|.
name|advance
argument_list|(
name|prevRootDoc
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|lastSeenRootDoc
operator|=
name|rootDoc
expr_stmt|;
name|lastEmittedValue
operator|=
name|pick
argument_list|(
name|selectedValues
argument_list|,
name|builder
argument_list|,
name|innerDocs
argument_list|,
name|firstNestedDoc
argument_list|,
name|rootDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastEmittedValue
operator|==
literal|null
condition|)
block|{
name|lastEmittedValue
operator|=
name|missingValue
expr_stmt|;
block|}
return|return
name|lastEmittedValue
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
DECL|method|pick
specifier|protected
name|BytesRef
name|pick
parameter_list|(
name|BinaryDocValues
name|values
parameter_list|,
name|BytesRefBuilder
name|builder
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported sort mode: "
operator|+
name|this
argument_list|)
throw|;
block|}
comment|/**      * Return a {@link SortedDocValues} instance that can be used to sort documents      * with this mode and the provided values.      *      * Allowed Modes: MIN, MAX      */
DECL|method|select
specifier|public
name|SortedDocValues
name|select
parameter_list|(
specifier|final
name|RandomAccessOrds
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|getValueCount
argument_list|()
operator|>=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"fields containing more than "
operator|+
operator|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
operator|)
operator|+
literal|" unique terms are unsupported"
argument_list|)
throw|;
block|}
specifier|final
name|SortedDocValues
name|singleton
init|=
name|DocValues
operator|.
name|unwrapSingleton
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|singleton
operator|!=
literal|null
condition|)
block|{
return|return
name|singleton
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortedDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|pick
argument_list|(
name|values
argument_list|,
name|docID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|values
operator|.
name|getValueCount
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
DECL|method|pick
specifier|protected
name|int
name|pick
parameter_list|(
name|RandomAccessOrds
name|values
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported sort mode: "
operator|+
name|this
argument_list|)
throw|;
block|}
comment|/**      * Return a {@link SortedDocValues} instance that can be used to sort root documents      * with this mode, the provided values and filters for root/inner documents.      *      * For every root document, the values of its inner documents will be aggregated.      *      * Allowed Modes: MIN, MAX      *      * NOTE: Calling the returned instance on docs that are not root docs is illegal      *       The returned instance can only be evaluate the current and upcoming docs      */
DECL|method|select
specifier|public
name|SortedDocValues
name|select
parameter_list|(
specifier|final
name|RandomAccessOrds
name|values
parameter_list|,
specifier|final
name|BitSet
name|rootDocs
parameter_list|,
specifier|final
name|DocIdSetIterator
name|innerDocs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rootDocs
operator|==
literal|null
operator|||
name|innerDocs
operator|==
literal|null
condition|)
block|{
return|return
name|select
argument_list|(
name|DocValues
operator|.
name|emptySortedSet
argument_list|()
argument_list|)
return|;
block|}
specifier|final
name|SortedDocValues
name|selectedValues
init|=
name|select
argument_list|(
name|values
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedDocValues
argument_list|()
block|{
name|int
name|lastSeenRootDoc
init|=
literal|0
decl_stmt|;
name|int
name|lastEmittedOrd
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|selectedValues
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|selectedValues
operator|.
name|getValueCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|rootDoc
parameter_list|)
block|{
assert|assert
name|rootDocs
operator|.
name|get
argument_list|(
name|rootDoc
argument_list|)
operator|:
literal|"can only sort root documents"
assert|;
assert|assert
name|rootDoc
operator|>=
name|lastSeenRootDoc
operator|:
literal|"can only evaluate current and upcoming root docs"
assert|;
if|if
condition|(
name|rootDoc
operator|==
name|lastSeenRootDoc
condition|)
block|{
return|return
name|lastEmittedOrd
return|;
block|}
try|try
block|{
specifier|final
name|int
name|prevRootDoc
init|=
name|rootDocs
operator|.
name|prevSetBit
argument_list|(
name|rootDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|firstNestedDoc
decl_stmt|;
if|if
condition|(
name|innerDocs
operator|.
name|docID
argument_list|()
operator|>
name|prevRootDoc
condition|)
block|{
name|firstNestedDoc
operator|=
name|innerDocs
operator|.
name|docID
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|firstNestedDoc
operator|=
name|innerDocs
operator|.
name|advance
argument_list|(
name|prevRootDoc
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|lastSeenRootDoc
operator|=
name|rootDoc
expr_stmt|;
return|return
name|lastEmittedOrd
operator|=
name|pick
argument_list|(
name|selectedValues
argument_list|,
name|innerDocs
argument_list|,
name|firstNestedDoc
argument_list|,
name|rootDoc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
DECL|method|pick
specifier|protected
name|int
name|pick
parameter_list|(
name|SortedDocValues
name|values
parameter_list|,
name|DocIdSetIterator
name|docItr
parameter_list|,
name|int
name|startDoc
parameter_list|,
name|int
name|endDoc
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported sort mode: "
operator|+
name|this
argument_list|)
throw|;
block|}
comment|/**      * Return a {@link NumericDoubleValues} instance that can be used to sort documents      * with this mode and the provided values. When a document has no value,      *<code>missingValue</code> is returned.      *      * Allowed Modes: SUM, AVG, MIN, MAX      */
DECL|method|select
specifier|public
name|NumericDoubleValues
name|select
parameter_list|(
specifier|final
name|UnsortedNumericDoubleValues
name|values
parameter_list|,
specifier|final
name|double
name|missingValue
parameter_list|)
block|{
return|return
operator|new
name|NumericDoubleValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|pick
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|docID
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|pick
specifier|protected
name|double
name|pick
parameter_list|(
name|UnsortedNumericDoubleValues
name|values
parameter_list|,
specifier|final
name|double
name|missingValue
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported sort mode: "
operator|+
name|this
argument_list|)
throw|;
block|}
comment|/**      * Interface allowing custom value generators to be used in MultiValueMode.      */
DECL|interface|UnsortedNumericDoubleValues
specifier|public
interface|interface
name|UnsortedNumericDoubleValues
block|{
DECL|method|count
name|int
name|count
parameter_list|()
function_decl|;
DECL|method|setDocument
name|void
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
DECL|method|valueAt
name|double
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readMultiValueModeFrom
specifier|public
specifier|static
name|MultiValueMode
name|readMultiValueModeFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ordinal
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordinal
operator|<
literal|0
operator|||
name|ordinal
operator|>=
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown MultiValueMode ordinal ["
operator|+
name|ordinal
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|values
argument_list|()
index|[
name|ordinal
index|]
return|;
block|}
block|}
end_enum

end_unit

