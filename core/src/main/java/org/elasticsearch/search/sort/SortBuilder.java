begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.sort
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BitSetProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
operator|.
name|XFieldComparatorSource
operator|.
name|Nested
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SortBuilder
specifier|public
specifier|abstract
class|class
name|SortBuilder
parameter_list|<
name|T
extends|extends
name|SortBuilder
parameter_list|<
name|?
parameter_list|>
parameter_list|>
implements|implements
name|SortBuilderParser
argument_list|<
name|T
argument_list|>
implements|,
name|ToXContent
block|{
DECL|field|order
specifier|protected
name|SortOrder
name|order
init|=
name|SortOrder
operator|.
name|ASC
decl_stmt|;
DECL|field|ORDER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|ORDER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"order"
argument_list|)
decl_stmt|;
DECL|field|PARSERS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|PARSERS
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|parsers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parsers
operator|.
name|put
argument_list|(
name|ScriptSortBuilder
operator|.
name|NAME
argument_list|,
name|ScriptSortBuilder
operator|.
name|PROTOTYPE
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|put
argument_list|(
name|GeoDistanceSortBuilder
operator|.
name|NAME
argument_list|,
operator|new
name|GeoDistanceSortBuilder
argument_list|(
literal|"_na_"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|put
argument_list|(
name|GeoDistanceSortBuilder
operator|.
name|ALTERNATIVE_NAME
argument_list|,
operator|new
name|GeoDistanceSortBuilder
argument_list|(
literal|"_na_"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|put
argument_list|(
name|ScoreSortBuilder
operator|.
name|NAME
argument_list|,
name|ScoreSortBuilder
operator|.
name|PROTOTYPE
argument_list|)
expr_stmt|;
name|PARSERS
operator|=
name|unmodifiableMap
argument_list|(
name|parsers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Failed to build query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Set the order of sorting.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|order
specifier|public
name|T
name|order
parameter_list|(
name|SortOrder
name|order
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|order
argument_list|,
literal|"sort order cannot be null."
argument_list|)
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Return the {@link SortOrder} used for this {@link SortBuilder}.      */
DECL|method|order
specifier|public
name|SortOrder
name|order
parameter_list|()
block|{
return|return
name|this
operator|.
name|order
return|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|fromXContent
parameter_list|(
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|sortFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|parseCompoundSortField
argument_list|(
name|parser
argument_list|,
name|context
argument_list|,
name|sortFields
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|String
name|fieldName
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|ScoreSortBuilder
operator|.
name|NAME
argument_list|)
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|ScoreSortBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"malformed sort format, "
operator|+
literal|"within the sort array, an object, or an actual string are allowed"
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|String
name|fieldName
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|ScoreSortBuilder
operator|.
name|NAME
argument_list|)
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|ScoreSortBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|parseCompoundSortField
argument_list|(
name|parser
argument_list|,
name|context
argument_list|,
name|sortFields
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"malformed sort format, either start with array, object, or an actual string"
argument_list|)
throw|;
block|}
return|return
name|sortFields
return|;
block|}
DECL|method|parseCompoundSortField
specifier|private
specifier|static
name|void
name|parseCompoundSortField
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|QueryParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|sortFields
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|String
name|fieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|SortOrder
name|order
init|=
name|SortOrder
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|ScoreSortBuilder
operator|.
name|NAME
argument_list|)
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|ScoreSortBuilder
argument_list|()
operator|.
name|order
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortFields
operator|.
name|add
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
name|fieldName
argument_list|)
operator|.
name|order
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|PARSERS
operator|.
name|containsKey
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
name|PARSERS
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortFields
operator|.
name|add
argument_list|(
name|FieldSortBuilder
operator|.
name|PROTOTYPE
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|parseSort
specifier|public
specifier|static
name|void
name|parseSort
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryParseContext
name|parseContext
init|=
name|context
operator|.
name|getQueryShardContext
argument_list|()
operator|.
name|parseContext
argument_list|()
decl_stmt|;
name|parseContext
operator|.
name|reset
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Sort
argument_list|>
name|sortOptional
init|=
name|buildSort
argument_list|(
name|SortBuilder
operator|.
name|fromXContent
argument_list|(
name|parseContext
argument_list|)
argument_list|,
name|context
operator|.
name|getQueryShardContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortOptional
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|context
operator|.
name|sort
argument_list|(
name|sortOptional
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildSort
specifier|public
specifier|static
name|Optional
argument_list|<
name|Sort
argument_list|>
name|buildSort
parameter_list|(
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|sortBuilders
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SortField
argument_list|>
name|sortFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|sortBuilders
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|builder
range|:
name|sortBuilders
control|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sortFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// optimize if we just sort on score non reversed, we don't really need sorting
name|boolean
name|sort
decl_stmt|;
if|if
condition|(
name|sortFields
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sort
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|SortField
name|sortField
init|=
name|sortFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortField
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
operator|&&
operator|!
name|sortField
operator|.
name|getReverse
argument_list|()
condition|)
block|{
name|sort
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sort
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sort
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|Sort
argument_list|(
name|sortFields
operator|.
name|toArray
argument_list|(
operator|new
name|SortField
index|[
name|sortFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|resolveNested
specifier|protected
specifier|static
name|Nested
name|resolveNested
parameter_list|(
name|QueryShardContext
name|context
parameter_list|,
name|String
name|nestedPath
parameter_list|,
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|nestedFilter
parameter_list|)
throws|throws
name|IOException
block|{
name|Nested
name|nested
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nestedPath
operator|!=
literal|null
condition|)
block|{
name|BitSetProducer
name|rootDocumentsFilter
init|=
name|context
operator|.
name|bitsetFilter
argument_list|(
name|Queries
operator|.
name|newNonNestedFilter
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectMapper
name|nestedObjectMapper
init|=
name|context
operator|.
name|getObjectMapper
argument_list|(
name|nestedPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|nestedObjectMapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryShardException
argument_list|(
name|context
argument_list|,
literal|"[nested] failed to find nested object under path ["
operator|+
name|nestedPath
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|nestedObjectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|QueryShardException
argument_list|(
name|context
argument_list|,
literal|"[nested] nested object under path ["
operator|+
name|nestedPath
operator|+
literal|"] is not of nested type"
argument_list|)
throw|;
block|}
name|Query
name|innerDocumentsQuery
decl_stmt|;
if|if
condition|(
name|nestedFilter
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|nestedScope
argument_list|()
operator|.
name|nextLevel
argument_list|(
name|nestedObjectMapper
argument_list|)
expr_stmt|;
name|innerDocumentsQuery
operator|=
name|QueryBuilder
operator|.
name|rewriteQuery
argument_list|(
name|nestedFilter
argument_list|,
name|context
argument_list|)
operator|.
name|toFilter
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|nestedScope
argument_list|()
operator|.
name|previousLevel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|innerDocumentsQuery
operator|=
name|nestedObjectMapper
operator|.
name|nestedTypeFilter
argument_list|()
expr_stmt|;
block|}
name|nested
operator|=
operator|new
name|Nested
argument_list|(
name|rootDocumentsFilter
argument_list|,
name|innerDocumentsQuery
argument_list|)
expr_stmt|;
block|}
return|return
name|nested
return|;
block|}
block|}
end_class

end_unit

