begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.sort
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Elasticsearch supports sorting by array or multi-valued fields. The SortMode option controls what array value is picked  * for sorting the document it belongs to. The mode option can have the following values:  *<ul>  *<li>min - Pick the lowest value.</li>  *<li>max - Pick the highest value.</li>  *<li>sum - Use the sum of all values as sort value. Only applicable for number based array fields.</li>  *<li>avg - Use the average of all values as sort value. Only applicable for number based array fields.</li>  *<li>median - Use the median of all values as sort value. Only applicable for number based array fields.</li>  *</ul>  */
end_comment

begin_enum
DECL|enum|SortMode
specifier|public
enum|enum
name|SortMode
implements|implements
name|Writeable
argument_list|<
name|SortMode
argument_list|>
block|{
comment|/** pick the lowest value **/
DECL|enum constant|MIN
name|MIN
block|,
comment|/** pick the highest value **/
DECL|enum constant|MAX
name|MAX
block|,
comment|/** Use the sum of all values as sort value. Only applicable for number based array fields. **/
DECL|enum constant|SUM
name|SUM
block|,
comment|/** Use the average of all values as sort value. Only applicable for number based array fields. **/
DECL|enum constant|AVG
name|AVG
block|,
comment|/** Use the median of all values as sort value. Only applicable for number based array fields. **/
DECL|enum constant|MEDIAN
name|MEDIAN
block|;
DECL|field|PROTOTYPE
specifier|static
name|SortMode
name|PROTOTYPE
init|=
name|MIN
decl_stmt|;
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
specifier|final
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|SortMode
name|readFrom
parameter_list|(
specifier|final
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ordinal
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordinal
operator|<
literal|0
operator|||
name|ordinal
operator|>=
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown SortMode ordinal ["
operator|+
name|ordinal
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|values
argument_list|()
index|[
name|ordinal
index|]
return|;
block|}
DECL|method|fromString
specifier|public
specifier|static
name|SortMode
name|fromString
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|str
argument_list|,
literal|"input string is null"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|str
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
condition|)
block|{
case|case
operator|(
literal|"min"
operator|)
case|:
return|return
name|MIN
return|;
case|case
operator|(
literal|"max"
operator|)
case|:
return|return
name|MAX
return|;
case|case
operator|(
literal|"sum"
operator|)
case|:
return|return
name|SUM
return|;
case|case
operator|(
literal|"avg"
operator|)
case|:
return|return
name|AVG
return|;
case|case
operator|(
literal|"median"
operator|)
case|:
return|return
name|MEDIAN
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown SortMode ["
operator|+
name|str
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

