begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.sort
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A geo distance based sorting on a geo point like field.  */
end_comment

begin_class
DECL|class|GeoDistanceSortBuilder
specifier|public
class|class
name|GeoDistanceSortBuilder
extends|extends
name|SortBuilder
implements|implements
name|SortBuilderTemp
argument_list|<
name|GeoDistanceSortBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"_geo_distance"
decl_stmt|;
DECL|field|DEFAULT_COERCE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_COERCE
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_IGNORE_MALFORMED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_IGNORE_MALFORMED
init|=
literal|false
decl_stmt|;
DECL|field|PROTOTYPE
specifier|static
specifier|final
name|GeoDistanceSortBuilder
name|PROTOTYPE
init|=
operator|new
name|GeoDistanceSortBuilder
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|points
specifier|private
specifier|final
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|points
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|geoDistance
specifier|private
name|GeoDistance
name|geoDistance
init|=
name|GeoDistance
operator|.
name|DEFAULT
decl_stmt|;
DECL|field|unit
specifier|private
name|DistanceUnit
name|unit
init|=
name|DistanceUnit
operator|.
name|DEFAULT
decl_stmt|;
comment|// TODO there is an enum that covers that parameter which we should be using here
DECL|field|sortMode
specifier|private
name|String
name|sortMode
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|field|nestedFilter
specifier|private
name|QueryBuilder
name|nestedFilter
decl_stmt|;
DECL|field|nestedPath
specifier|private
name|String
name|nestedPath
decl_stmt|;
comment|// TODO switch to GeoValidationMethod enum
DECL|field|coerce
specifier|private
name|boolean
name|coerce
init|=
name|DEFAULT_COERCE
decl_stmt|;
DECL|field|ignoreMalformed
specifier|private
name|boolean
name|ignoreMalformed
init|=
name|DEFAULT_IGNORE_MALFORMED
decl_stmt|;
comment|/**      * Constructs a new distance based sort on a geo point like field.      *      * @param fieldName The geo point like field name.      * @param points The points to create the range distance facets from.      */
DECL|method|GeoDistanceSortBuilder
specifier|public
name|GeoDistanceSortBuilder
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|GeoPoint
modifier|...
name|points
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
if|if
condition|(
name|points
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Geo distance sorting needs at least one point."
argument_list|)
throw|;
block|}
name|this
operator|.
name|points
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|points
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new distance based sort on a geo point like field.      *      * @param fieldName The geo point like field name.      * @param lat Latitude of the point to create the range distance facets from.      * @param lon Longitude of the point to create the range distance facets from.      */
DECL|method|GeoDistanceSortBuilder
specifier|public
name|GeoDistanceSortBuilder
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|this
argument_list|(
name|fieldName
argument_list|,
operator|new
name|GeoPoint
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new distance based sort on a geo point like field.      *      * @param fieldName The geo point like field name.      * @param geohashes The points to create the range distance facets from.      */
DECL|method|GeoDistanceSortBuilder
specifier|public
name|GeoDistanceSortBuilder
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
modifier|...
name|geohashes
parameter_list|)
block|{
if|if
condition|(
name|geohashes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Geo distance sorting needs at least one point."
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|geohash
range|:
name|geohashes
control|)
block|{
name|this
operator|.
name|points
operator|.
name|add
argument_list|(
name|GeoPoint
operator|.
name|fromGeohash
argument_list|(
name|geohash
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
comment|/**      * Copy constructor.      * */
DECL|method|GeoDistanceSortBuilder
name|GeoDistanceSortBuilder
parameter_list|(
name|GeoDistanceSortBuilder
name|original
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|original
operator|.
name|fieldName
argument_list|()
expr_stmt|;
name|this
operator|.
name|points
operator|.
name|addAll
argument_list|(
name|original
operator|.
name|points
argument_list|)
expr_stmt|;
name|this
operator|.
name|geoDistance
operator|=
name|original
operator|.
name|geoDistance
expr_stmt|;
name|this
operator|.
name|unit
operator|=
name|original
operator|.
name|unit
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|original
operator|.
name|order
expr_stmt|;
name|this
operator|.
name|sortMode
operator|=
name|original
operator|.
name|sortMode
expr_stmt|;
name|this
operator|.
name|nestedFilter
operator|=
name|original
operator|.
name|nestedFilter
expr_stmt|;
name|this
operator|.
name|nestedPath
operator|=
name|original
operator|.
name|nestedPath
expr_stmt|;
name|this
operator|.
name|coerce
operator|=
name|original
operator|.
name|coerce
expr_stmt|;
name|this
operator|.
name|ignoreMalformed
operator|=
name|original
operator|.
name|ignoreMalformed
expr_stmt|;
block|}
comment|/**      * Returns the geo point like field the distance based sort operates on.      * */
DECL|method|fieldName
specifier|public
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|this
operator|.
name|fieldName
return|;
block|}
comment|/**      * The point to create the range distance facets from.      *      * @param lat latitude.      * @param lon longitude.      */
DECL|method|point
specifier|public
name|GeoDistanceSortBuilder
name|point
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|points
operator|.
name|add
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The point to create the range distance facets from.      *      * @param points reference points.      */
DECL|method|points
specifier|public
name|GeoDistanceSortBuilder
name|points
parameter_list|(
name|GeoPoint
modifier|...
name|points
parameter_list|)
block|{
name|this
operator|.
name|points
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|points
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the points to create the range distance facets from.      */
DECL|method|points
specifier|public
name|GeoPoint
index|[]
name|points
parameter_list|()
block|{
return|return
name|this
operator|.
name|points
operator|.
name|toArray
argument_list|(
operator|new
name|GeoPoint
index|[
name|this
operator|.
name|points
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * The geohash of the geo point to create the range distance facets from.      *      * Deprecated - please use points(GeoPoint... points) instead.      */
annotation|@
name|Deprecated
DECL|method|geohashes
specifier|public
name|GeoDistanceSortBuilder
name|geohashes
parameter_list|(
name|String
modifier|...
name|geohashes
parameter_list|)
block|{
for|for
control|(
name|String
name|geohash
range|:
name|geohashes
control|)
block|{
name|this
operator|.
name|points
operator|.
name|add
argument_list|(
name|GeoPoint
operator|.
name|fromGeohash
argument_list|(
name|geohash
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * The geo distance type used to compute the distance.      */
DECL|method|geoDistance
specifier|public
name|GeoDistanceSortBuilder
name|geoDistance
parameter_list|(
name|GeoDistance
name|geoDistance
parameter_list|)
block|{
name|this
operator|.
name|geoDistance
operator|=
name|geoDistance
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the geo distance type used to compute the distance.      */
DECL|method|geoDistance
specifier|public
name|GeoDistance
name|geoDistance
parameter_list|()
block|{
return|return
name|this
operator|.
name|geoDistance
return|;
block|}
comment|/**      * The distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#KILOMETERS}      */
DECL|method|unit
specifier|public
name|GeoDistanceSortBuilder
name|unit
parameter_list|(
name|DistanceUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|unit
operator|=
name|unit
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#KILOMETERS}      */
DECL|method|unit
specifier|public
name|DistanceUnit
name|unit
parameter_list|()
block|{
return|return
name|this
operator|.
name|unit
return|;
block|}
comment|/**      * Defines which distance to use for sorting in the case a document contains multiple geo points.      * Possible values: min and max      */
DECL|method|sortMode
specifier|public
name|GeoDistanceSortBuilder
name|sortMode
parameter_list|(
name|String
name|sortMode
parameter_list|)
block|{
name|MultiValueMode
name|temp
init|=
name|MultiValueMode
operator|.
name|fromString
argument_list|(
name|sortMode
argument_list|)
decl_stmt|;
if|if
condition|(
name|temp
operator|==
name|MultiValueMode
operator|.
name|SUM
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sort_mode [sum] isn't supported for sorting by geo distance"
argument_list|)
throw|;
block|}
name|this
operator|.
name|sortMode
operator|=
name|sortMode
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Returns which distance to use for sorting in the case a document contains multiple geo points. */
DECL|method|sortMode
specifier|public
name|String
name|sortMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|sortMode
return|;
block|}
comment|/**      * Sets the nested filter that the nested objects should match with in order to be taken into account      * for sorting.      */
DECL|method|setNestedFilter
specifier|public
name|GeoDistanceSortBuilder
name|setNestedFilter
parameter_list|(
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|nestedFilter
parameter_list|)
block|{
name|this
operator|.
name|nestedFilter
operator|=
name|nestedFilter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the nested filter that the nested objects should match with in order to be taken into account      * for sorting.      **/
DECL|method|getNestedFilter
specifier|public
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|getNestedFilter
parameter_list|()
block|{
return|return
name|this
operator|.
name|nestedFilter
return|;
block|}
comment|/**      * Sets the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a      * field inside a nested object, the nearest upper nested object is selected as nested path.      */
DECL|method|setNestedPath
specifier|public
name|GeoDistanceSortBuilder
name|setNestedPath
parameter_list|(
name|String
name|nestedPath
parameter_list|)
block|{
name|this
operator|.
name|nestedPath
operator|=
name|nestedPath
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the nested path if sorting occurs on a field that is inside a nested object. By default when sorting on a      * field inside a nested object, the nearest upper nested object is selected as nested path.      */
DECL|method|getNestedPath
specifier|public
name|String
name|getNestedPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|nestedPath
return|;
block|}
DECL|method|coerce
specifier|public
name|GeoDistanceSortBuilder
name|coerce
parameter_list|(
name|boolean
name|coerce
parameter_list|)
block|{
name|this
operator|.
name|coerce
operator|=
name|coerce
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|coerce
specifier|public
name|boolean
name|coerce
parameter_list|()
block|{
return|return
name|this
operator|.
name|coerce
return|;
block|}
DECL|method|ignoreMalformed
specifier|public
name|GeoDistanceSortBuilder
name|ignoreMalformed
parameter_list|(
name|boolean
name|ignoreMalformed
parameter_list|)
block|{
if|if
condition|(
name|coerce
operator|==
literal|false
condition|)
block|{
name|this
operator|.
name|ignoreMalformed
operator|=
name|ignoreMalformed
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|ignoreMalformed
specifier|public
name|boolean
name|ignoreMalformed
parameter_list|()
block|{
return|return
name|this
operator|.
name|ignoreMalformed
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
for|for
control|(
name|GeoPoint
name|point
range|:
name|points
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|point
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"unit"
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"distance_type"
argument_list|,
name|geoDistance
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|ORDER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|order
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortMode
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"mode"
argument_list|,
name|sortMode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nestedPath
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"nested_path"
argument_list|,
name|nestedPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nestedFilter
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"nested_filter"
argument_list|,
name|nestedFilter
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"coerce"
argument_list|,
name|coerce
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"ignore_malformed"
argument_list|,
name|ignoreMalformed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|object
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|GeoDistanceSortBuilder
name|other
init|=
operator|(
name|GeoDistanceSortBuilder
operator|)
name|object
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|,
name|other
operator|.
name|fieldName
argument_list|)
operator|&&
name|Objects
operator|.
name|deepEquals
argument_list|(
name|points
argument_list|,
name|other
operator|.
name|points
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|geoDistance
argument_list|,
name|other
operator|.
name|geoDistance
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|unit
argument_list|,
name|other
operator|.
name|unit
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|sortMode
argument_list|,
name|other
operator|.
name|sortMode
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|order
argument_list|,
name|other
operator|.
name|order
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|nestedFilter
argument_list|,
name|other
operator|.
name|nestedFilter
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|nestedPath
argument_list|,
name|other
operator|.
name|nestedPath
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|coerce
argument_list|,
name|other
operator|.
name|coerce
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|ignoreMalformed
argument_list|,
name|other
operator|.
name|ignoreMalformed
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|this
operator|.
name|fieldName
argument_list|,
name|this
operator|.
name|points
argument_list|,
name|this
operator|.
name|geoDistance
argument_list|,
name|this
operator|.
name|unit
argument_list|,
name|this
operator|.
name|sortMode
argument_list|,
name|this
operator|.
name|order
argument_list|,
name|this
operator|.
name|nestedFilter
argument_list|,
name|this
operator|.
name|nestedPath
argument_list|,
name|this
operator|.
name|coerce
argument_list|,
name|this
operator|.
name|ignoreMalformed
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|points
argument_list|)
expr_stmt|;
name|geoDistance
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|unit
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|order
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|sortMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|nestedFilter
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeQuery
argument_list|(
name|nestedFilter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalString
argument_list|(
name|nestedPath
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|coerce
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|ignoreMalformed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|GeoDistanceSortBuilder
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fieldName
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|GeoPoint
argument_list|>
name|points
init|=
operator|(
name|ArrayList
argument_list|<
name|GeoPoint
argument_list|>
operator|)
name|in
operator|.
name|readGenericValue
argument_list|()
decl_stmt|;
name|GeoDistanceSortBuilder
name|result
init|=
operator|new
name|GeoDistanceSortBuilder
argument_list|(
name|fieldName
argument_list|,
name|points
operator|.
name|toArray
argument_list|(
operator|new
name|GeoPoint
index|[
name|points
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|geoDistance
argument_list|(
name|GeoDistance
operator|.
name|readGeoDistanceFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|unit
argument_list|(
name|DistanceUnit
operator|.
name|readDistanceUnit
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|order
argument_list|(
name|SortOrder
operator|.
name|readOrderFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sortMode
init|=
name|in
operator|.
name|readOptionalString
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortMode
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|sortMode
argument_list|(
name|sortMode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|result
operator|.
name|setNestedFilter
argument_list|(
name|in
operator|.
name|readQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|setNestedPath
argument_list|(
name|in
operator|.
name|readOptionalString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|coerce
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|ignoreMalformed
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|fromXContent
specifier|public
name|GeoDistanceSortBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|context
parameter_list|,
name|String
name|elementName
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|geoPoints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|DistanceUnit
name|unit
init|=
name|DistanceUnit
operator|.
name|DEFAULT
decl_stmt|;
name|GeoDistance
name|geoDistance
init|=
name|GeoDistance
operator|.
name|DEFAULT
decl_stmt|;
name|SortOrder
name|order
init|=
name|SortOrder
operator|.
name|ASC
decl_stmt|;
name|MultiValueMode
name|sortMode
init|=
literal|null
decl_stmt|;
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|nestedFilter
init|=
literal|null
decl_stmt|;
name|String
name|nestedPath
init|=
literal|null
decl_stmt|;
name|boolean
name|coerce
init|=
name|GeoDistanceSortBuilder
operator|.
name|DEFAULT_COERCE
decl_stmt|;
name|boolean
name|ignoreMalformed
init|=
name|GeoDistanceSortBuilder
operator|.
name|DEFAULT_IGNORE_MALFORMED
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|parseGeoPoints
argument_list|(
name|parser
argument_list|,
name|geoPoints
argument_list|)
expr_stmt|;
name|fieldName
operator|=
name|currentName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
comment|// the json in the format of -> field : { lat : 30, lon : 12 }
if|if
condition|(
literal|"nested_filter"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
operator|||
literal|"nestedFilter"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
condition|)
block|{
comment|// TODO Note to remember: while this is kept as a QueryBuilder internally,
comment|// we need to make sure to call toFilter() on it once on the shard
comment|// (e.g. in the new build() method)
name|nestedFilter
operator|=
name|context
operator|.
name|parseInnerQueryBuilder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fieldName
operator|=
name|currentName
expr_stmt|;
name|GeoPoint
name|point
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|,
name|point
argument_list|)
expr_stmt|;
name|geoPoints
operator|.
name|add
argument_list|(
name|point
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"reverse"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
condition|)
block|{
name|order
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
condition|?
name|SortOrder
operator|.
name|DESC
else|:
name|SortOrder
operator|.
name|ASC
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"order"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
condition|)
block|{
name|order
operator|=
name|SortOrder
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"unit"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
condition|)
block|{
name|unit
operator|=
name|DistanceUnit
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"distance_type"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
operator|||
literal|"distanceType"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
condition|)
block|{
name|geoDistance
operator|=
name|GeoDistance
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"coerce"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
operator|||
literal|"normalize"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
condition|)
block|{
name|coerce
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|coerce
operator|==
literal|true
condition|)
block|{
name|ignoreMalformed
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"ignore_malformed"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
condition|)
block|{
name|boolean
name|ignore_malformed_value
init|=
name|parser
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|coerce
operator|==
literal|false
condition|)
block|{
name|ignoreMalformed
operator|=
name|ignore_malformed_value
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"sort_mode"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
operator|||
literal|"sortMode"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
operator|||
literal|"mode"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
condition|)
block|{
name|sortMode
operator|=
name|MultiValueMode
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"nested_path"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
operator|||
literal|"nestedPath"
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
condition|)
block|{
name|nestedPath
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|GeoPoint
name|point
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
name|point
operator|.
name|resetFromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|geoPoints
operator|.
name|add
argument_list|(
name|point
argument_list|)
expr_stmt|;
name|fieldName
operator|=
name|currentName
expr_stmt|;
block|}
block|}
block|}
name|GeoDistanceSortBuilder
name|result
init|=
operator|new
name|GeoDistanceSortBuilder
argument_list|(
name|fieldName
argument_list|,
name|geoPoints
operator|.
name|toArray
argument_list|(
operator|new
name|GeoPoint
index|[
name|geoPoints
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|geoDistance
argument_list|(
name|geoDistance
argument_list|)
expr_stmt|;
name|result
operator|.
name|unit
argument_list|(
name|unit
argument_list|)
expr_stmt|;
name|result
operator|.
name|order
argument_list|(
name|order
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortMode
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|sortMode
argument_list|(
name|sortMode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|setNestedFilter
argument_list|(
name|nestedFilter
argument_list|)
expr_stmt|;
name|result
operator|.
name|setNestedPath
argument_list|(
name|nestedPath
argument_list|)
expr_stmt|;
name|result
operator|.
name|coerce
argument_list|(
name|coerce
argument_list|)
expr_stmt|;
name|result
operator|.
name|ignoreMalformed
argument_list|(
name|ignoreMalformed
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|parseGeoPoints
specifier|static
name|void
name|parseGeoPoints
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|geoPoints
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|parser
operator|.
name|nextToken
argument_list|()
operator|.
name|equals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
argument_list|)
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
comment|// we might get here if the geo point is " number, number] " and the parser already moved over the opening bracket
comment|// in this case we cannot use GeoUtils.parseGeoPoint(..) because this expects an opening bracket
name|double
name|lon
init|=
name|parser
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|currentToken
argument_list|()
operator|.
name|equals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"geo point parsing: expected second number but got [{}] instead"
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
throw|;
block|}
name|double
name|lat
init|=
name|parser
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|GeoPoint
name|point
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
name|point
operator|.
name|reset
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
name|geoPoints
operator|.
name|add
argument_list|(
name|point
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GeoPoint
name|point
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|,
name|point
argument_list|)
expr_stmt|;
name|geoPoints
operator|.
name|add
argument_list|(
name|point
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

