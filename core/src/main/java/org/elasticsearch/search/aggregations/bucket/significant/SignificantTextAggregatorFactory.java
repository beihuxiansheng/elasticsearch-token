begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterableTermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|index
operator|.
name|FreqTermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|BucketUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|SignificanceHeuristic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsAggregator
operator|.
name|BucketCountThresholds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|SignificantTextAggregatorFactory
specifier|public
class|class
name|SignificantTextAggregatorFactory
extends|extends
name|AggregatorFactory
argument_list|<
name|SignificantTextAggregatorFactory
argument_list|>
implements|implements
name|Releasable
block|{
DECL|field|includeExclude
specifier|private
specifier|final
name|IncludeExclude
name|includeExclude
decl_stmt|;
DECL|field|indexedFieldName
specifier|private
name|String
name|indexedFieldName
decl_stmt|;
DECL|field|fieldType
specifier|private
name|MappedFieldType
name|fieldType
decl_stmt|;
DECL|field|sourceFieldNames
specifier|private
specifier|final
name|String
index|[]
name|sourceFieldNames
decl_stmt|;
DECL|field|termsEnum
specifier|private
name|FilterableTermsEnum
name|termsEnum
decl_stmt|;
DECL|field|numberOfAggregatorsCreated
specifier|private
name|int
name|numberOfAggregatorsCreated
decl_stmt|;
DECL|field|filter
specifier|private
specifier|final
name|Query
name|filter
decl_stmt|;
DECL|field|supersetNumDocs
specifier|private
specifier|final
name|int
name|supersetNumDocs
decl_stmt|;
DECL|field|bucketCountThresholds
specifier|private
specifier|final
name|TermsAggregator
operator|.
name|BucketCountThresholds
name|bucketCountThresholds
decl_stmt|;
DECL|field|significanceHeuristic
specifier|private
specifier|final
name|SignificanceHeuristic
name|significanceHeuristic
decl_stmt|;
DECL|field|format
specifier|private
specifier|final
name|DocValueFormat
name|format
init|=
name|DocValueFormat
operator|.
name|RAW
decl_stmt|;
DECL|field|filterDuplicateText
specifier|private
specifier|final
name|boolean
name|filterDuplicateText
decl_stmt|;
DECL|method|SignificantTextAggregatorFactory
specifier|public
name|SignificantTextAggregatorFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|IncludeExclude
name|includeExclude
parameter_list|,
name|QueryBuilder
name|filterBuilder
parameter_list|,
name|TermsAggregator
operator|.
name|BucketCountThresholds
name|bucketCountThresholds
parameter_list|,
name|SignificanceHeuristic
name|significanceHeuristic
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|AggregatorFactories
operator|.
name|Builder
name|subFactoriesBuilder
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
index|[]
name|sourceFieldNames
parameter_list|,
name|boolean
name|filterDuplicateText
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|subFactoriesBuilder
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|this
operator|.
name|includeExclude
operator|=
name|includeExclude
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filterBuilder
operator|==
literal|null
condition|?
literal|null
else|:
name|filterBuilder
operator|.
name|toQuery
argument_list|(
name|context
operator|.
name|getQueryShardContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexedFieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|sourceFieldNames
operator|=
name|sourceFieldNames
expr_stmt|;
name|this
operator|.
name|filterDuplicateText
operator|=
name|filterDuplicateText
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|context
operator|.
name|searcher
argument_list|()
decl_stmt|;
comment|// Important - need to use the doc count that includes deleted docs
comment|// or we have this issue: https://github.com/elastic/elasticsearch/issues/7951
name|this
operator|.
name|supersetNumDocs
operator|=
name|filter
operator|==
literal|null
condition|?
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
else|:
name|searcher
operator|.
name|count
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucketCountThresholds
operator|=
name|bucketCountThresholds
expr_stmt|;
name|this
operator|.
name|significanceHeuristic
operator|=
name|significanceHeuristic
expr_stmt|;
name|fieldType
operator|=
name|context
operator|.
name|getQueryShardContext
argument_list|()
operator|.
name|fieldMapper
argument_list|(
name|indexedFieldName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the number of docs in the superset.      */
DECL|method|getSupersetNumDocs
specifier|public
name|long
name|getSupersetNumDocs
parameter_list|()
block|{
return|return
name|supersetNumDocs
return|;
block|}
DECL|method|getTermsEnum
specifier|private
name|FilterableTermsEnum
name|getTermsEnum
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|termsEnum
operator|!=
literal|null
condition|)
block|{
return|return
name|termsEnum
return|;
block|}
name|IndexReader
name|reader
init|=
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfAggregatorsCreated
operator|>
literal|1
condition|)
block|{
name|termsEnum
operator|=
operator|new
name|FreqTermsEnum
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|filter
argument_list|,
name|context
operator|.
name|bigArrays
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|termsEnum
operator|=
operator|new
name|FilterableTermsEnum
argument_list|(
name|reader
argument_list|,
name|indexedFieldName
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
return|return
name|termsEnum
return|;
block|}
DECL|method|getBackgroundFrequency
specifier|private
name|long
name|getBackgroundFrequency
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|query
init|=
name|fieldType
operator|.
name|termQuery
argument_list|(
name|value
argument_list|,
name|context
operator|.
name|getQueryShardContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|instanceof
name|TermQuery
condition|)
block|{
comment|// for types that use the inverted index, we prefer using a caching terms
comment|// enum that will do a better job at reusing index inputs
name|Term
name|term
init|=
operator|(
operator|(
name|TermQuery
operator|)
name|query
operator|)
operator|.
name|getTerm
argument_list|()
decl_stmt|;
name|FilterableTermsEnum
name|termsEnum
init|=
name|getTermsEnum
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|termsEnum
operator|.
name|docFreq
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
comment|// otherwise do it the naive way
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|add
argument_list|(
name|filter
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|count
argument_list|(
name|query
argument_list|)
return|;
block|}
DECL|method|getBackgroundFrequency
specifier|public
name|long
name|getBackgroundFrequency
parameter_list|(
name|BytesRef
name|termBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
name|format
operator|.
name|format
argument_list|(
name|termBytes
argument_list|)
decl_stmt|;
return|return
name|getBackgroundFrequency
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|termsEnum
operator|instanceof
name|Releasable
condition|)
block|{
operator|(
operator|(
name|Releasable
operator|)
name|termsEnum
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|termsEnum
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createInternal
specifier|protected
name|Aggregator
name|createInternal
parameter_list|(
name|Aggregator
name|parent
parameter_list|,
name|boolean
name|collectsFromSingleBucket
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|collectsFromSingleBucket
operator|==
literal|false
condition|)
block|{
return|return
name|asMultiBucketAggregator
argument_list|(
name|this
argument_list|,
name|context
argument_list|,
name|parent
argument_list|)
return|;
block|}
name|numberOfAggregatorsCreated
operator|++
expr_stmt|;
name|BucketCountThresholds
name|bucketCountThresholds
init|=
operator|new
name|BucketCountThresholds
argument_list|(
name|this
operator|.
name|bucketCountThresholds
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketCountThresholds
operator|.
name|getShardSize
argument_list|()
operator|==
name|SignificantTextAggregationBuilder
operator|.
name|DEFAULT_BUCKET_COUNT_THRESHOLDS
operator|.
name|getShardSize
argument_list|()
condition|)
block|{
comment|// The user has not made a shardSize selection.
comment|// Use default heuristic to avoid any wrong-ranking caused by
comment|// distributed counting but request double the usual amount.
comment|// We typically need more than the number of "top" terms requested
comment|// by other aggregations as the significance algorithm is in less
comment|// of a position to down-select at shard-level - some of the things
comment|// we want to find have only one occurrence on each shard and as
comment|// such are impossible to differentiate from non-significant terms
comment|// at that early stage.
name|bucketCountThresholds
operator|.
name|setShardSize
argument_list|(
literal|2
operator|*
name|BucketUtils
operator|.
name|suggestShardSideQueueSize
argument_list|(
name|bucketCountThresholds
operator|.
name|getRequiredSize
argument_list|()
argument_list|,
name|context
operator|.
name|numberOfShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//        TODO - need to check with mapping that this is indeed a text field....
name|IncludeExclude
operator|.
name|StringFilter
name|incExcFilter
init|=
name|includeExclude
operator|==
literal|null
condition|?
literal|null
else|:
name|includeExclude
operator|.
name|convertToStringFilter
argument_list|(
name|DocValueFormat
operator|.
name|RAW
argument_list|)
decl_stmt|;
return|return
operator|new
name|SignificantTextAggregator
argument_list|(
name|name
argument_list|,
name|factories
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|pipelineAggregators
argument_list|,
name|bucketCountThresholds
argument_list|,
name|incExcFilter
argument_list|,
name|significanceHeuristic
argument_list|,
name|this
argument_list|,
name|indexedFieldName
argument_list|,
name|sourceFieldNames
argument_list|,
name|filterDuplicateText
argument_list|,
name|metaData
argument_list|)
return|;
block|}
block|}
end_class

end_unit

