begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalMultiBucketAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|BucketPriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|InternalTerms
specifier|public
specifier|abstract
class|class
name|InternalTerms
parameter_list|<
name|A
extends|extends
name|InternalTerms
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
parameter_list|,
name|B
extends|extends
name|InternalTerms
operator|.
name|Bucket
parameter_list|<
name|B
parameter_list|>
parameter_list|>
extends|extends
name|InternalMultiBucketAggregation
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
implements|implements
name|Terms
implements|,
name|ToXContent
block|{
DECL|field|DOC_COUNT_ERROR_UPPER_BOUND_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|ParseField
name|DOC_COUNT_ERROR_UPPER_BOUND_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"doc_count_error_upper_bound"
argument_list|)
decl_stmt|;
DECL|field|SUM_OF_OTHER_DOC_COUNTS
specifier|protected
specifier|static
specifier|final
name|ParseField
name|SUM_OF_OTHER_DOC_COUNTS
init|=
operator|new
name|ParseField
argument_list|(
literal|"sum_other_doc_count"
argument_list|)
decl_stmt|;
DECL|class|Bucket
specifier|public
specifier|abstract
specifier|static
class|class
name|Bucket
parameter_list|<
name|B
extends|extends
name|Bucket
parameter_list|<
name|B
parameter_list|>
parameter_list|>
extends|extends
name|InternalMultiBucketAggregation
operator|.
name|InternalBucket
implements|implements
name|Terms
operator|.
name|Bucket
block|{
comment|/**          * Reads a bucket. Should be a constructor reference.          */
annotation|@
name|FunctionalInterface
DECL|interface|Reader
specifier|public
interface|interface
name|Reader
parameter_list|<
name|B
extends|extends
name|Bucket
parameter_list|<
name|B
parameter_list|>
parameter_list|>
block|{
DECL|method|read
name|B
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|DocValueFormat
name|format
parameter_list|,
name|boolean
name|showDocCountError
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|field|bucketOrd
name|long
name|bucketOrd
decl_stmt|;
DECL|field|docCount
specifier|protected
name|long
name|docCount
decl_stmt|;
DECL|field|docCountError
specifier|protected
name|long
name|docCountError
decl_stmt|;
DECL|field|aggregations
specifier|protected
name|InternalAggregations
name|aggregations
decl_stmt|;
DECL|field|showDocCountError
specifier|protected
specifier|final
name|boolean
name|showDocCountError
decl_stmt|;
DECL|field|format
specifier|protected
specifier|final
name|DocValueFormat
name|format
decl_stmt|;
DECL|method|Bucket
specifier|protected
name|Bucket
parameter_list|(
name|long
name|docCount
parameter_list|,
name|InternalAggregations
name|aggregations
parameter_list|,
name|boolean
name|showDocCountError
parameter_list|,
name|long
name|docCountError
parameter_list|,
name|DocValueFormat
name|formatter
parameter_list|)
block|{
name|this
operator|.
name|showDocCountError
operator|=
name|showDocCountError
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|formatter
expr_stmt|;
name|this
operator|.
name|docCount
operator|=
name|docCount
expr_stmt|;
name|this
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
name|this
operator|.
name|docCountError
operator|=
name|docCountError
expr_stmt|;
block|}
comment|/**          * Read from a stream.          */
DECL|method|Bucket
specifier|protected
name|Bucket
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|DocValueFormat
name|formatter
parameter_list|,
name|boolean
name|showDocCountError
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|showDocCountError
operator|=
name|showDocCountError
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|formatter
expr_stmt|;
name|docCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|docCountError
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|showDocCountError
condition|)
block|{
name|docCountError
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|aggregations
operator|=
name|InternalAggregations
operator|.
name|readAggregations
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
specifier|final
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|showDocCountError
condition|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|docCountError
argument_list|)
expr_stmt|;
block|}
name|aggregations
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|writeTermTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTermTo
specifier|protected
specifier|abstract
name|void
name|writeTermTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|long
name|getDocCount
parameter_list|()
block|{
return|return
name|docCount
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCountError
specifier|public
name|long
name|getDocCountError
parameter_list|()
block|{
if|if
condition|(
operator|!
name|showDocCountError
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"show_terms_doc_count_error is false"
argument_list|)
throw|;
block|}
return|return
name|docCountError
return|;
block|}
annotation|@
name|Override
DECL|method|getAggregations
specifier|public
name|Aggregations
name|getAggregations
parameter_list|()
block|{
return|return
name|aggregations
return|;
block|}
DECL|method|newBucket
specifier|abstract
name|B
name|newBucket
parameter_list|(
name|long
name|docCount
parameter_list|,
name|InternalAggregations
name|aggs
parameter_list|,
name|long
name|docCountError
parameter_list|)
function_decl|;
DECL|method|reduce
specifier|public
name|B
name|reduce
parameter_list|(
name|List
argument_list|<
name|B
argument_list|>
name|buckets
parameter_list|,
name|ReduceContext
name|context
parameter_list|)
block|{
name|long
name|docCount
init|=
literal|0
decl_stmt|;
comment|// For the per term doc count error we add up the errors from the
comment|// shards that did not respond with the term. To do this we add up
comment|// the errors from the shards that did respond with the terms and
comment|// subtract that from the sum of the error from all shards
name|long
name|docCountError
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|InternalAggregations
argument_list|>
name|aggregationsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|B
name|bucket
range|:
name|buckets
control|)
block|{
name|docCount
operator|+=
name|bucket
operator|.
name|docCount
expr_stmt|;
if|if
condition|(
name|docCountError
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|bucket
operator|.
name|docCountError
operator|==
operator|-
literal|1
condition|)
block|{
name|docCountError
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|docCountError
operator|+=
name|bucket
operator|.
name|docCountError
expr_stmt|;
block|}
block|}
name|aggregationsList
operator|.
name|add
argument_list|(
name|bucket
operator|.
name|aggregations
argument_list|)
expr_stmt|;
block|}
name|InternalAggregations
name|aggs
init|=
name|InternalAggregations
operator|.
name|reduce
argument_list|(
name|aggregationsList
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
name|newBucket
argument_list|(
name|docCount
argument_list|,
name|aggs
argument_list|,
name|docCountError
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
specifier|final
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|keyToXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|CommonFields
operator|.
name|DOC_COUNT
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|showDocCountError
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|InternalTerms
operator|.
name|DOC_COUNT_ERROR_UPPER_BOUND_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|getDocCountError
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|aggregations
operator|.
name|toXContentInternal
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|keyToXContent
specifier|protected
specifier|abstract
name|XContentBuilder
name|keyToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Bucket
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|Bucket
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
comment|// No need to take format and showDocCountError, they are attributes
comment|// of the parent terms aggregation object that are only copied here
comment|// for serialization purposes
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|docCount
argument_list|,
name|that
operator|.
name|docCount
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|docCountError
argument_list|,
name|that
operator|.
name|docCountError
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|aggregations
argument_list|,
name|that
operator|.
name|aggregations
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|docCount
argument_list|,
name|docCountError
argument_list|,
name|aggregations
argument_list|)
return|;
block|}
block|}
DECL|field|order
specifier|protected
specifier|final
name|Terms
operator|.
name|Order
name|order
decl_stmt|;
DECL|field|requiredSize
specifier|protected
specifier|final
name|int
name|requiredSize
decl_stmt|;
DECL|field|minDocCount
specifier|protected
specifier|final
name|long
name|minDocCount
decl_stmt|;
DECL|method|InternalTerms
specifier|protected
name|InternalTerms
parameter_list|(
name|String
name|name
parameter_list|,
name|Terms
operator|.
name|Order
name|order
parameter_list|,
name|int
name|requiredSize
parameter_list|,
name|long
name|minDocCount
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
name|this
operator|.
name|requiredSize
operator|=
name|requiredSize
expr_stmt|;
name|this
operator|.
name|minDocCount
operator|=
name|minDocCount
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|InternalTerms
specifier|protected
name|InternalTerms
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|order
operator|=
name|InternalOrder
operator|.
name|Streams
operator|.
name|readOrder
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requiredSize
operator|=
name|readSize
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|minDocCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
specifier|final
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalOrder
operator|.
name|Streams
operator|.
name|writeOrder
argument_list|(
name|order
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|writeSize
argument_list|(
name|requiredSize
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|minDocCount
argument_list|)
expr_stmt|;
name|writeTermTypeInfoTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTermTypeInfoTo
specifier|protected
specifier|abstract
name|void
name|writeTermTypeInfoTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|getBuckets
specifier|public
specifier|abstract
name|List
argument_list|<
name|B
argument_list|>
name|getBuckets
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getBucketByKey
specifier|public
specifier|abstract
name|B
name|getBucketByKey
parameter_list|(
name|String
name|term
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|doReduce
specifier|public
name|InternalAggregation
name|doReduce
parameter_list|(
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|B
argument_list|>
argument_list|>
name|buckets
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|sumDocCountError
init|=
literal|0
decl_stmt|;
name|long
name|otherDocCount
init|=
literal|0
decl_stmt|;
name|InternalTerms
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
name|referenceTerms
init|=
literal|null
decl_stmt|;
for|for
control|(
name|InternalAggregation
name|aggregation
range|:
name|aggregations
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|InternalTerms
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
name|terms
init|=
operator|(
name|InternalTerms
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
operator|)
name|aggregation
decl_stmt|;
if|if
condition|(
name|referenceTerms
operator|==
literal|null
operator|&&
operator|!
name|aggregation
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|UnmappedTerms
operator|.
name|class
argument_list|)
condition|)
block|{
name|referenceTerms
operator|=
name|terms
expr_stmt|;
block|}
if|if
condition|(
name|referenceTerms
operator|!=
literal|null
operator|&&
operator|!
name|referenceTerms
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|terms
operator|.
name|getClass
argument_list|()
argument_list|)
operator|&&
operator|!
name|terms
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|UnmappedTerms
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// control gets into this loop when the same field name against which the query is executed
comment|// is of different types in different indices.
throw|throw
operator|new
name|AggregationExecutionException
argument_list|(
literal|"Merging/Reducing the aggregations failed when computing the aggregation ["
operator|+
name|referenceTerms
operator|.
name|getName
argument_list|()
operator|+
literal|"] because the field you gave in the aggregation query existed as two different "
operator|+
literal|"types in two different indices"
argument_list|)
throw|;
block|}
name|otherDocCount
operator|+=
name|terms
operator|.
name|getSumOfOtherDocCounts
argument_list|()
expr_stmt|;
specifier|final
name|long
name|thisAggDocCountError
decl_stmt|;
if|if
condition|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|getShardSize
argument_list|()
operator|||
name|InternalOrder
operator|.
name|isTermOrder
argument_list|(
name|order
argument_list|)
condition|)
block|{
name|thisAggDocCountError
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|InternalOrder
operator|.
name|isCountDesc
argument_list|(
name|this
operator|.
name|order
argument_list|)
condition|)
block|{
if|if
condition|(
name|terms
operator|.
name|getDocCountError
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// If there is an existing docCountError for this agg then
comment|// use this as the error for this aggregation
name|thisAggDocCountError
operator|=
name|terms
operator|.
name|getDocCountError
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise use the doc count of the last term in the
comment|// aggregation
name|thisAggDocCountError
operator|=
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
name|terms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|docCount
expr_stmt|;
block|}
block|}
else|else
block|{
name|thisAggDocCountError
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|sumDocCountError
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|thisAggDocCountError
operator|==
operator|-
literal|1
condition|)
block|{
name|sumDocCountError
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|sumDocCountError
operator|+=
name|thisAggDocCountError
expr_stmt|;
block|}
block|}
name|setDocCountError
argument_list|(
name|thisAggDocCountError
argument_list|)
expr_stmt|;
for|for
control|(
name|B
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
comment|// If there is already a doc count error for this bucket
comment|// subtract this aggs doc count error from it to make the
comment|// new value for the bucket. This then means that when the
comment|// final error for the bucket is calculated below we account
comment|// for the existing error calculated in a previous reduce.
comment|// Note that if the error is unbounded (-1) this will be fixed
comment|// later in this method.
name|bucket
operator|.
name|docCountError
operator|-=
name|thisAggDocCountError
expr_stmt|;
name|List
argument_list|<
name|B
argument_list|>
name|bucketList
init|=
name|buckets
operator|.
name|get
argument_list|(
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketList
operator|==
literal|null
condition|)
block|{
name|bucketList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|buckets
operator|.
name|put
argument_list|(
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|bucketList
argument_list|)
expr_stmt|;
block|}
name|bucketList
operator|.
name|add
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|size
init|=
name|reduceContext
operator|.
name|isFinalReduce
argument_list|()
operator|==
literal|false
condition|?
name|buckets
operator|.
name|size
argument_list|()
else|:
name|Math
operator|.
name|min
argument_list|(
name|requiredSize
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|BucketPriorityQueue
argument_list|<
name|B
argument_list|>
name|ordered
init|=
operator|new
name|BucketPriorityQueue
argument_list|<>
argument_list|(
name|size
argument_list|,
name|order
operator|.
name|comparator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|B
argument_list|>
name|sameTermBuckets
range|:
name|buckets
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|B
name|b
init|=
name|sameTermBuckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reduce
argument_list|(
name|sameTermBuckets
argument_list|,
name|reduceContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|sumDocCountError
operator|==
operator|-
literal|1
condition|)
block|{
name|b
operator|.
name|docCountError
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|docCountError
operator|+=
name|sumDocCountError
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|.
name|docCount
operator|>=
name|minDocCount
operator|||
name|reduceContext
operator|.
name|isFinalReduce
argument_list|()
operator|==
literal|false
condition|)
block|{
name|B
name|removed
init|=
name|ordered
operator|.
name|insertWithOverflow
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|otherDocCount
operator|+=
name|removed
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|B
index|[]
name|list
init|=
name|createBucketsArray
argument_list|(
name|ordered
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ordered
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|list
index|[
name|i
index|]
operator|=
name|ordered
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
name|long
name|docCountError
decl_stmt|;
if|if
condition|(
name|sumDocCountError
operator|==
operator|-
literal|1
condition|)
block|{
name|docCountError
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|docCountError
operator|=
name|aggregations
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|0
else|:
name|sumDocCountError
expr_stmt|;
block|}
return|return
name|create
argument_list|(
name|name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|list
argument_list|)
argument_list|,
name|docCountError
argument_list|,
name|otherDocCount
argument_list|)
return|;
block|}
DECL|method|setDocCountError
specifier|protected
specifier|abstract
name|void
name|setDocCountError
parameter_list|(
name|long
name|docCountError
parameter_list|)
function_decl|;
DECL|method|getShardSize
specifier|protected
specifier|abstract
name|int
name|getShardSize
parameter_list|()
function_decl|;
DECL|method|create
specifier|protected
specifier|abstract
name|A
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|B
argument_list|>
name|buckets
parameter_list|,
name|long
name|docCountError
parameter_list|,
name|long
name|otherDocCount
parameter_list|)
function_decl|;
comment|/**      * Create an array to hold some buckets. Used in collecting the results.      */
DECL|method|createBucketsArray
specifier|protected
specifier|abstract
name|B
index|[]
name|createBucketsArray
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|InternalTerms
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|that
init|=
operator|(
name|InternalTerms
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|minDocCount
argument_list|,
name|that
operator|.
name|minDocCount
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|order
argument_list|,
name|that
operator|.
name|order
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|requiredSize
argument_list|,
name|that
operator|.
name|requiredSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|minDocCount
argument_list|,
name|order
argument_list|,
name|requiredSize
argument_list|)
return|;
block|}
DECL|method|doXContentCommon
specifier|protected
specifier|static
name|XContentBuilder
name|doXContentCommon
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|,
name|long
name|docCountError
parameter_list|,
name|long
name|otherDocCount
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|DOC_COUNT_ERROR_UPPER_BOUND_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|docCountError
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SUM_OF_OTHER_DOC_COUNTS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|otherDocCount
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|CommonFields
operator|.
name|BUCKETS
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|bucket
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

