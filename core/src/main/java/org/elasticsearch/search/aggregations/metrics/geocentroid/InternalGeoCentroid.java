begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.geocentroid
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|geocentroid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Serialization and merge logic for {@link GeoCentroidAggregator}.  */
end_comment

begin_class
DECL|class|InternalGeoCentroid
specifier|public
class|class
name|InternalGeoCentroid
extends|extends
name|InternalAggregation
implements|implements
name|GeoCentroid
block|{
DECL|field|centroid
specifier|protected
specifier|final
name|GeoPoint
name|centroid
decl_stmt|;
DECL|field|count
specifier|protected
specifier|final
name|long
name|count
decl_stmt|;
DECL|method|encodeLatLon
specifier|public
specifier|static
name|long
name|encodeLatLon
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|.
name|toUnsignedLong
argument_list|(
name|GeoEncodingUtils
operator|.
name|encodeLatitude
argument_list|(
name|lat
argument_list|)
argument_list|)
operator|<<
literal|32
operator|)
operator||
name|Integer
operator|.
name|toUnsignedLong
argument_list|(
name|GeoEncodingUtils
operator|.
name|encodeLongitude
argument_list|(
name|lon
argument_list|)
argument_list|)
return|;
block|}
DECL|method|decodeLatitude
specifier|public
specifier|static
name|double
name|decodeLatitude
parameter_list|(
name|long
name|encodedLatLon
parameter_list|)
block|{
return|return
name|GeoEncodingUtils
operator|.
name|decodeLatitude
argument_list|(
call|(
name|int
call|)
argument_list|(
name|encodedLatLon
operator|>>>
literal|32
argument_list|)
argument_list|)
return|;
block|}
DECL|method|decodeLongitude
specifier|public
specifier|static
name|double
name|decodeLongitude
parameter_list|(
name|long
name|encodedLatLon
parameter_list|)
block|{
return|return
name|GeoEncodingUtils
operator|.
name|decodeLongitude
argument_list|(
call|(
name|int
call|)
argument_list|(
name|encodedLatLon
operator|&
literal|0xFFFFFFFFL
argument_list|)
argument_list|)
return|;
block|}
DECL|method|InternalGeoCentroid
name|InternalGeoCentroid
parameter_list|(
name|String
name|name
parameter_list|,
name|GeoPoint
name|centroid
parameter_list|,
name|long
name|count
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|centroid
operator|==
literal|null
operator|)
operator|==
operator|(
name|count
operator|==
literal|0
operator|)
assert|;
name|this
operator|.
name|centroid
operator|=
name|centroid
expr_stmt|;
assert|assert
name|count
operator|>=
literal|0
assert|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|InternalGeoCentroid
specifier|public
name|InternalGeoCentroid
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|count
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
specifier|final
name|long
name|hash
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|centroid
operator|=
operator|new
name|GeoPoint
argument_list|(
name|decodeLatitude
argument_list|(
name|hash
argument_list|)
argument_list|,
name|decodeLongitude
argument_list|(
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|centroid
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|centroid
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// should we just write lat and lon separately?
name|out
operator|.
name|writeLong
argument_list|(
name|encodeLatLon
argument_list|(
name|centroid
operator|.
name|lat
argument_list|()
argument_list|,
name|centroid
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|GeoCentroidAggregationBuilder
operator|.
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|centroid
specifier|public
name|GeoPoint
name|centroid
parameter_list|()
block|{
return|return
name|centroid
return|;
block|}
annotation|@
name|Override
DECL|method|count
specifier|public
name|long
name|count
parameter_list|()
block|{
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|doReduce
specifier|public
name|InternalGeoCentroid
name|doReduce
parameter_list|(
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
name|double
name|lonSum
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
name|double
name|latSum
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InternalAggregation
name|aggregation
range|:
name|aggregations
control|)
block|{
name|InternalGeoCentroid
name|centroidAgg
init|=
operator|(
name|InternalGeoCentroid
operator|)
name|aggregation
decl_stmt|;
if|if
condition|(
name|centroidAgg
operator|.
name|count
operator|>
literal|0
condition|)
block|{
name|totalCount
operator|+=
name|centroidAgg
operator|.
name|count
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lonSum
argument_list|)
condition|)
block|{
name|lonSum
operator|=
name|centroidAgg
operator|.
name|count
operator|*
name|centroidAgg
operator|.
name|centroid
operator|.
name|getLon
argument_list|()
expr_stmt|;
name|latSum
operator|=
name|centroidAgg
operator|.
name|count
operator|*
name|centroidAgg
operator|.
name|centroid
operator|.
name|getLat
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lonSum
operator|+=
operator|(
name|centroidAgg
operator|.
name|count
operator|*
name|centroidAgg
operator|.
name|centroid
operator|.
name|getLon
argument_list|()
operator|)
expr_stmt|;
name|latSum
operator|+=
operator|(
name|centroidAgg
operator|.
name|count
operator|*
name|centroidAgg
operator|.
name|centroid
operator|.
name|getLat
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|GeoPoint
name|result
init|=
operator|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lonSum
argument_list|)
operator|)
condition|?
literal|null
else|:
operator|new
name|GeoPoint
argument_list|(
name|latSum
operator|/
name|totalCount
argument_list|,
name|lonSum
operator|/
name|totalCount
argument_list|)
decl_stmt|;
return|return
operator|new
name|InternalGeoCentroid
argument_list|(
name|name
argument_list|,
name|result
argument_list|,
name|totalCount
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|getMetaData
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProperty
specifier|public
name|Object
name|getProperty
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|coordinate
init|=
name|path
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|coordinate
condition|)
block|{
case|case
literal|"value"
case|:
return|return
name|centroid
return|;
case|case
literal|"lat"
case|:
return|return
name|centroid
operator|.
name|lat
argument_list|()
return|;
case|case
literal|"lon"
case|:
return|return
name|centroid
operator|.
name|lon
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Found unknown path element ["
operator|+
name|coordinate
operator|+
literal|"] in ["
operator|+
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path not supported for ["
operator|+
name|getName
argument_list|()
operator|+
literal|"]: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
DECL|class|Fields
specifier|static
class|class
name|Fields
block|{
DECL|field|CENTROID
specifier|static
specifier|final
name|String
name|CENTROID
init|=
literal|"location"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|public
name|XContentBuilder
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|centroid
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|CENTROID
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|centroid
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|centroid
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

