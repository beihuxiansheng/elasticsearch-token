begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|Comparators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|BucketsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|MultiBucketsAggregation
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|SingleBucketAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|NumericMetricsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|BucketOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalOrder
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalOrder
operator|.
name|CompoundOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|TermsAggregator
specifier|public
specifier|abstract
class|class
name|TermsAggregator
extends|extends
name|BucketsAggregator
block|{
DECL|class|BucketCountThresholds
specifier|public
specifier|static
class|class
name|BucketCountThresholds
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|minDocCount
specifier|private
name|long
name|minDocCount
decl_stmt|;
DECL|field|shardMinDocCount
specifier|private
name|long
name|shardMinDocCount
decl_stmt|;
DECL|field|requiredSize
specifier|private
name|int
name|requiredSize
decl_stmt|;
DECL|field|shardSize
specifier|private
name|int
name|shardSize
decl_stmt|;
DECL|method|BucketCountThresholds
specifier|public
name|BucketCountThresholds
parameter_list|(
name|long
name|minDocCount
parameter_list|,
name|long
name|shardMinDocCount
parameter_list|,
name|int
name|requiredSize
parameter_list|,
name|int
name|shardSize
parameter_list|)
block|{
name|this
operator|.
name|minDocCount
operator|=
name|minDocCount
expr_stmt|;
name|this
operator|.
name|shardMinDocCount
operator|=
name|shardMinDocCount
expr_stmt|;
name|this
operator|.
name|requiredSize
operator|=
name|requiredSize
expr_stmt|;
name|this
operator|.
name|shardSize
operator|=
name|shardSize
expr_stmt|;
block|}
comment|/**          * Read from a stream.          */
DECL|method|BucketCountThresholds
specifier|public
name|BucketCountThresholds
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|requiredSize
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|shardSize
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|minDocCount
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|shardMinDocCount
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|requiredSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|shardSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|minDocCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|shardMinDocCount
argument_list|)
expr_stmt|;
block|}
DECL|method|BucketCountThresholds
specifier|public
name|BucketCountThresholds
parameter_list|(
name|BucketCountThresholds
name|bucketCountThresholds
parameter_list|)
block|{
name|this
argument_list|(
name|bucketCountThresholds
operator|.
name|minDocCount
argument_list|,
name|bucketCountThresholds
operator|.
name|shardMinDocCount
argument_list|,
name|bucketCountThresholds
operator|.
name|requiredSize
argument_list|,
name|bucketCountThresholds
operator|.
name|shardSize
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureValidity
specifier|public
name|void
name|ensureValidity
parameter_list|()
block|{
comment|// shard_size cannot be smaller than size as we need to at least fetch<size> entries from every shards in order to return<size>
if|if
condition|(
name|shardSize
operator|<
name|requiredSize
condition|)
block|{
name|setShardSize
argument_list|(
name|requiredSize
argument_list|)
expr_stmt|;
block|}
comment|// shard_min_doc_count should not be larger than min_doc_count because this can cause buckets to be removed that would match the min_doc_count criteria
if|if
condition|(
name|shardMinDocCount
operator|>
name|minDocCount
condition|)
block|{
name|setShardMinDocCount
argument_list|(
name|minDocCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requiredSize
operator|<=
literal|0
operator|||
name|shardSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"parameters [required_size] and [shard_size] must be>0 in terms aggregation."
argument_list|)
throw|;
block|}
if|if
condition|(
name|minDocCount
operator|<
literal|0
operator|||
name|shardMinDocCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"parameter [min_doc_count] and [shardMinDocCount] must be>=0 in terms aggregation."
argument_list|)
throw|;
block|}
block|}
DECL|method|getShardMinDocCount
specifier|public
name|long
name|getShardMinDocCount
parameter_list|()
block|{
return|return
name|shardMinDocCount
return|;
block|}
DECL|method|setShardMinDocCount
specifier|public
name|void
name|setShardMinDocCount
parameter_list|(
name|long
name|shardMinDocCount
parameter_list|)
block|{
name|this
operator|.
name|shardMinDocCount
operator|=
name|shardMinDocCount
expr_stmt|;
block|}
DECL|method|getMinDocCount
specifier|public
name|long
name|getMinDocCount
parameter_list|()
block|{
return|return
name|minDocCount
return|;
block|}
DECL|method|setMinDocCount
specifier|public
name|void
name|setMinDocCount
parameter_list|(
name|long
name|minDocCount
parameter_list|)
block|{
name|this
operator|.
name|minDocCount
operator|=
name|minDocCount
expr_stmt|;
block|}
DECL|method|getRequiredSize
specifier|public
name|int
name|getRequiredSize
parameter_list|()
block|{
return|return
name|requiredSize
return|;
block|}
DECL|method|setRequiredSize
specifier|public
name|void
name|setRequiredSize
parameter_list|(
name|int
name|requiredSize
parameter_list|)
block|{
name|this
operator|.
name|requiredSize
operator|=
name|requiredSize
expr_stmt|;
block|}
DECL|method|getShardSize
specifier|public
name|int
name|getShardSize
parameter_list|()
block|{
return|return
name|shardSize
return|;
block|}
DECL|method|setShardSize
specifier|public
name|void
name|setShardSize
parameter_list|(
name|int
name|shardSize
parameter_list|)
block|{
name|this
operator|.
name|shardSize
operator|=
name|shardSize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|TermsAggregationBuilder
operator|.
name|REQUIRED_SIZE_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|requiredSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardSize
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|TermsAggregationBuilder
operator|.
name|SHARD_SIZE_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|shardSize
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|TermsAggregationBuilder
operator|.
name|MIN_DOC_COUNT_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minDocCount
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|TermsAggregationBuilder
operator|.
name|SHARD_MIN_DOC_COUNT_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|shardMinDocCount
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|requiredSize
argument_list|,
name|shardSize
argument_list|,
name|minDocCount
argument_list|,
name|shardMinDocCount
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BucketCountThresholds
name|other
init|=
operator|(
name|BucketCountThresholds
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|requiredSize
argument_list|,
name|other
operator|.
name|requiredSize
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|shardSize
argument_list|,
name|other
operator|.
name|shardSize
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minDocCount
argument_list|,
name|other
operator|.
name|minDocCount
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|shardMinDocCount
argument_list|,
name|other
operator|.
name|shardMinDocCount
argument_list|)
return|;
block|}
block|}
DECL|field|format
specifier|protected
specifier|final
name|DocValueFormat
name|format
decl_stmt|;
DECL|field|bucketCountThresholds
specifier|protected
specifier|final
name|BucketCountThresholds
name|bucketCountThresholds
decl_stmt|;
DECL|field|order
specifier|protected
specifier|final
name|BucketOrder
name|order
decl_stmt|;
DECL|field|aggsUsedForSorting
specifier|protected
specifier|final
name|Set
argument_list|<
name|Aggregator
argument_list|>
name|aggsUsedForSorting
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|collectMode
specifier|protected
specifier|final
name|SubAggCollectionMode
name|collectMode
decl_stmt|;
DECL|method|TermsAggregator
specifier|public
name|TermsAggregator
parameter_list|(
name|String
name|name
parameter_list|,
name|AggregatorFactories
name|factories
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|BucketCountThresholds
name|bucketCountThresholds
parameter_list|,
name|BucketOrder
name|order
parameter_list|,
name|DocValueFormat
name|format
parameter_list|,
name|SubAggCollectionMode
name|collectMode
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|name
argument_list|,
name|factories
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucketCountThresholds
operator|=
name|bucketCountThresholds
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|InternalOrder
operator|.
name|validate
argument_list|(
name|order
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|collectMode
operator|=
name|collectMode
expr_stmt|;
comment|// Don't defer any child agg if we are dependent on it for pruning results
if|if
condition|(
name|order
operator|instanceof
name|Aggregation
condition|)
block|{
name|AggregationPath
name|path
init|=
operator|(
operator|(
name|Aggregation
operator|)
name|order
operator|)
operator|.
name|path
argument_list|()
decl_stmt|;
name|aggsUsedForSorting
operator|.
name|add
argument_list|(
name|path
operator|.
name|resolveTopmostAggregator
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|order
operator|instanceof
name|CompoundOrder
condition|)
block|{
name|CompoundOrder
name|compoundOrder
init|=
operator|(
name|CompoundOrder
operator|)
name|order
decl_stmt|;
for|for
control|(
name|BucketOrder
name|orderElement
range|:
name|compoundOrder
operator|.
name|orderElements
argument_list|()
control|)
block|{
if|if
condition|(
name|orderElement
operator|instanceof
name|Aggregation
condition|)
block|{
name|AggregationPath
name|path
init|=
operator|(
operator|(
name|Aggregation
operator|)
name|orderElement
operator|)
operator|.
name|path
argument_list|()
decl_stmt|;
name|aggsUsedForSorting
operator|.
name|add
argument_list|(
name|path
operator|.
name|resolveTopmostAggregator
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Internal Optimization for ordering {@link InternalTerms.Bucket}s by a sub aggregation.      *<p>      * in this phase, if the order is based on sub-aggregations, we need to use a different comparator      * to avoid constructing buckets for ordering purposes (we can potentially have a lot of buckets and building      * them will cause loads of redundant object constructions). The "special" comparators here will fetch the      * sub aggregation values directly from the sub aggregators bypassing bucket creation. Note that the comparator      * attached to the order will still be used in the reduce phase of the Aggregation.      *      * @param path determines which sub aggregation to use for ordering.      * @param asc  {@code true} for ascending order, {@code false} for descending.      * @return {@code Comparator} to order {@link InternalTerms.Bucket}s in the desired order.      */
DECL|method|bucketComparator
specifier|public
name|Comparator
argument_list|<
name|Bucket
argument_list|>
name|bucketComparator
parameter_list|(
name|AggregationPath
name|path
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
specifier|final
name|Aggregator
name|aggregator
init|=
name|path
operator|.
name|resolveAggregator
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|String
name|key
init|=
name|path
operator|.
name|lastPathElement
argument_list|()
operator|.
name|key
decl_stmt|;
if|if
condition|(
name|aggregator
operator|instanceof
name|SingleBucketAggregator
condition|)
block|{
assert|assert
name|key
operator|==
literal|null
operator|:
literal|"this should be picked up before the aggregation is executed - on validate"
assert|;
return|return
parameter_list|(
name|b1
parameter_list|,
name|b2
parameter_list|)
lambda|->
block|{
name|int
name|mul
init|=
name|asc
condition|?
literal|1
else|:
operator|-
literal|1
decl_stmt|;
name|int
name|v1
init|=
operator|(
operator|(
name|SingleBucketAggregator
operator|)
name|aggregator
operator|)
operator|.
name|bucketDocCount
argument_list|(
operator|(
operator|(
name|InternalTerms
operator|.
name|Bucket
operator|)
name|b1
operator|)
operator|.
name|bucketOrd
argument_list|)
decl_stmt|;
name|int
name|v2
init|=
operator|(
operator|(
name|SingleBucketAggregator
operator|)
name|aggregator
operator|)
operator|.
name|bucketDocCount
argument_list|(
operator|(
operator|(
name|InternalTerms
operator|.
name|Bucket
operator|)
name|b2
operator|)
operator|.
name|bucketOrd
argument_list|)
decl_stmt|;
return|return
name|mul
operator|*
operator|(
name|v1
operator|-
name|v2
operator|)
return|;
block|}
return|;
block|}
comment|// with only support single-bucket aggregators
assert|assert
operator|!
operator|(
name|aggregator
operator|instanceof
name|BucketsAggregator
operator|)
operator|:
literal|"this should be picked up before the aggregation is executed - on validate"
assert|;
if|if
condition|(
name|aggregator
operator|instanceof
name|NumericMetricsAggregator
operator|.
name|MultiValue
condition|)
block|{
assert|assert
name|key
operator|!=
literal|null
operator|:
literal|"this should be picked up before the aggregation is executed - on validate"
assert|;
return|return
parameter_list|(
name|b1
parameter_list|,
name|b2
parameter_list|)
lambda|->
block|{
name|double
name|v1
init|=
operator|(
operator|(
name|NumericMetricsAggregator
operator|.
name|MultiValue
operator|)
name|aggregator
operator|)
operator|.
name|metric
argument_list|(
name|key
argument_list|,
operator|(
operator|(
name|InternalTerms
operator|.
name|Bucket
operator|)
name|b1
operator|)
operator|.
name|bucketOrd
argument_list|)
decl_stmt|;
name|double
name|v2
init|=
operator|(
operator|(
name|NumericMetricsAggregator
operator|.
name|MultiValue
operator|)
name|aggregator
operator|)
operator|.
name|metric
argument_list|(
name|key
argument_list|,
operator|(
operator|(
name|InternalTerms
operator|.
name|Bucket
operator|)
name|b2
operator|)
operator|.
name|bucketOrd
argument_list|)
decl_stmt|;
comment|// some metrics may return NaN (eg. avg, variance, etc...) in which case we'd like to push all of those to
comment|// the bottom
return|return
name|Comparators
operator|.
name|compareDiscardNaN
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|,
name|asc
argument_list|)
return|;
block|}
return|;
block|}
comment|// single-value metrics agg
return|return
parameter_list|(
name|b1
parameter_list|,
name|b2
parameter_list|)
lambda|->
block|{
name|double
name|v1
init|=
operator|(
operator|(
name|NumericMetricsAggregator
operator|.
name|SingleValue
operator|)
name|aggregator
operator|)
operator|.
name|metric
argument_list|(
operator|(
operator|(
name|InternalTerms
operator|.
name|Bucket
operator|)
name|b1
operator|)
operator|.
name|bucketOrd
argument_list|)
decl_stmt|;
name|double
name|v2
init|=
operator|(
operator|(
name|NumericMetricsAggregator
operator|.
name|SingleValue
operator|)
name|aggregator
operator|)
operator|.
name|metric
argument_list|(
operator|(
operator|(
name|InternalTerms
operator|.
name|Bucket
operator|)
name|b2
operator|)
operator|.
name|bucketOrd
argument_list|)
decl_stmt|;
comment|// some metrics may return NaN (eg. avg, variance, etc...) in which case we'd like to push all of those to
comment|// the bottom
return|return
name|Comparators
operator|.
name|compareDiscardNaN
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|,
name|asc
argument_list|)
return|;
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|shouldDefer
specifier|protected
name|boolean
name|shouldDefer
parameter_list|(
name|Aggregator
name|aggregator
parameter_list|)
block|{
return|return
name|collectMode
operator|==
name|SubAggCollectionMode
operator|.
name|BREADTH_FIRST
operator|&&
operator|!
name|aggsUsedForSorting
operator|.
name|contains
argument_list|(
name|aggregator
argument_list|)
return|;
block|}
block|}
end_class

end_unit

