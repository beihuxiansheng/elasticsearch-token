begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.histogram
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|Rounding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|LongHash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|LeafBucketCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|LeafBucketCollectorBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|BucketsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
operator|.
name|Numeric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceAggregatorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|format
operator|.
name|ValueFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|HistogramAggregator
specifier|public
class|class
name|HistogramAggregator
extends|extends
name|BucketsAggregator
block|{
DECL|field|ORDER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|ORDER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"order"
argument_list|)
decl_stmt|;
DECL|field|KEYED_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|KEYED_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"keyed"
argument_list|)
decl_stmt|;
DECL|field|MIN_DOC_COUNT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MIN_DOC_COUNT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_doc_count"
argument_list|)
decl_stmt|;
DECL|field|valuesSource
specifier|private
specifier|final
name|ValuesSource
operator|.
name|Numeric
name|valuesSource
decl_stmt|;
DECL|field|formatter
specifier|private
specifier|final
name|ValueFormatter
name|formatter
decl_stmt|;
DECL|field|rounding
specifier|private
specifier|final
name|Rounding
name|rounding
decl_stmt|;
DECL|field|order
specifier|private
specifier|final
name|InternalOrder
name|order
decl_stmt|;
DECL|field|keyed
specifier|private
specifier|final
name|boolean
name|keyed
decl_stmt|;
DECL|field|minDocCount
specifier|private
specifier|final
name|long
name|minDocCount
decl_stmt|;
DECL|field|extendedBounds
specifier|private
specifier|final
name|ExtendedBounds
name|extendedBounds
decl_stmt|;
DECL|field|histogramFactory
specifier|private
specifier|final
name|InternalHistogram
operator|.
name|Factory
name|histogramFactory
decl_stmt|;
DECL|field|bucketOrds
specifier|private
specifier|final
name|LongHash
name|bucketOrds
decl_stmt|;
DECL|method|HistogramAggregator
specifier|public
name|HistogramAggregator
parameter_list|(
name|String
name|name
parameter_list|,
name|AggregatorFactories
name|factories
parameter_list|,
name|Rounding
name|rounding
parameter_list|,
name|InternalOrder
name|order
parameter_list|,
name|boolean
name|keyed
parameter_list|,
name|long
name|minDocCount
parameter_list|,
annotation|@
name|Nullable
name|ExtendedBounds
name|extendedBounds
parameter_list|,
annotation|@
name|Nullable
name|ValuesSource
operator|.
name|Numeric
name|valuesSource
parameter_list|,
name|ValueFormatter
name|formatter
parameter_list|,
name|InternalHistogram
operator|.
name|Factory
argument_list|<
name|?
argument_list|>
name|histogramFactory
parameter_list|,
name|AggregationContext
name|aggregationContext
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|name
argument_list|,
name|factories
argument_list|,
name|aggregationContext
argument_list|,
name|parent
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|this
operator|.
name|rounding
operator|=
name|rounding
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
name|this
operator|.
name|keyed
operator|=
name|keyed
expr_stmt|;
name|this
operator|.
name|minDocCount
operator|=
name|minDocCount
expr_stmt|;
name|this
operator|.
name|extendedBounds
operator|=
name|extendedBounds
expr_stmt|;
name|this
operator|.
name|valuesSource
operator|=
name|valuesSource
expr_stmt|;
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
name|this
operator|.
name|histogramFactory
operator|=
name|histogramFactory
expr_stmt|;
name|bucketOrds
operator|=
operator|new
name|LongHash
argument_list|(
literal|1
argument_list|,
name|aggregationContext
operator|.
name|bigArrays
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
operator|(
name|valuesSource
operator|!=
literal|null
operator|&&
name|valuesSource
operator|.
name|needsScores
argument_list|()
operator|)
operator|||
name|super
operator|.
name|needsScores
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafBucketCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|,
specifier|final
name|LeafBucketCollector
name|sub
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valuesSource
operator|==
literal|null
condition|)
block|{
return|return
name|LeafBucketCollector
operator|.
name|NO_OP_COLLECTOR
return|;
block|}
specifier|final
name|SortedNumericDocValues
name|values
init|=
name|valuesSource
operator|.
name|longValues
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
return|return
operator|new
name|LeafBucketCollectorBase
argument_list|(
name|sub
argument_list|,
name|values
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|bucket
operator|==
literal|0
assert|;
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|valuesCount
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
name|long
name|previousKey
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valuesCount
condition|;
operator|++
name|i
control|)
block|{
name|long
name|value
init|=
name|values
operator|.
name|valueAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|key
init|=
name|rounding
operator|.
name|roundKey
argument_list|(
name|value
argument_list|)
decl_stmt|;
assert|assert
name|key
operator|>=
name|previousKey
assert|;
if|if
condition|(
name|key
operator|==
name|previousKey
condition|)
block|{
continue|continue;
block|}
name|long
name|bucketOrd
init|=
name|bucketOrds
operator|.
name|add
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketOrd
operator|<
literal|0
condition|)
block|{
comment|// already seen
name|bucketOrd
operator|=
operator|-
literal|1
operator|-
name|bucketOrd
expr_stmt|;
name|collectExistingBucket
argument_list|(
name|sub
argument_list|,
name|doc
argument_list|,
name|bucketOrd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collectBucket
argument_list|(
name|sub
argument_list|,
name|doc
argument_list|,
name|bucketOrd
argument_list|)
expr_stmt|;
block|}
name|previousKey
operator|=
name|key
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|buildAggregation
specifier|public
name|InternalAggregation
name|buildAggregation
parameter_list|(
name|long
name|owningBucketOrdinal
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|owningBucketOrdinal
operator|==
literal|0
assert|;
name|List
argument_list|<
name|InternalHistogram
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|(
name|int
operator|)
name|bucketOrds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketOrds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|buckets
operator|.
name|add
argument_list|(
name|histogramFactory
operator|.
name|createBucket
argument_list|(
name|rounding
operator|.
name|valueForKey
argument_list|(
name|bucketOrds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|bucketDocCount
argument_list|(
name|i
argument_list|)
argument_list|,
name|bucketAggregations
argument_list|(
name|i
argument_list|)
argument_list|,
name|keyed
argument_list|,
name|formatter
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// the contract of the histogram aggregation is that shards must return buckets ordered by key in ascending order
name|CollectionUtil
operator|.
name|introSort
argument_list|(
name|buckets
argument_list|,
name|InternalOrder
operator|.
name|KEY_ASC
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// value source will be null for unmapped fields
name|InternalHistogram
operator|.
name|EmptyBucketInfo
name|emptyBucketInfo
init|=
name|minDocCount
operator|==
literal|0
condition|?
operator|new
name|InternalHistogram
operator|.
name|EmptyBucketInfo
argument_list|(
name|rounding
argument_list|,
name|buildEmptySubAggregations
argument_list|()
argument_list|,
name|extendedBounds
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
name|histogramFactory
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|buckets
argument_list|,
name|order
argument_list|,
name|minDocCount
argument_list|,
name|emptyBucketInfo
argument_list|,
name|formatter
argument_list|,
name|keyed
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|buildEmptyAggregation
specifier|public
name|InternalAggregation
name|buildEmptyAggregation
parameter_list|()
block|{
name|InternalHistogram
operator|.
name|EmptyBucketInfo
name|emptyBucketInfo
init|=
name|minDocCount
operator|==
literal|0
condition|?
operator|new
name|InternalHistogram
operator|.
name|EmptyBucketInfo
argument_list|(
name|rounding
argument_list|,
name|buildEmptySubAggregations
argument_list|()
argument_list|,
name|extendedBounds
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
name|histogramFactory
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|order
argument_list|,
name|minDocCount
argument_list|,
name|emptyBucketInfo
argument_list|,
name|formatter
argument_list|,
name|keyed
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|public
name|void
name|doClose
parameter_list|()
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|bucketOrds
argument_list|)
expr_stmt|;
block|}
DECL|class|HistogramAggregatorBuilder
specifier|public
specifier|static
class|class
name|HistogramAggregatorBuilder
extends|extends
name|AbstractBuilder
argument_list|<
name|HistogramAggregatorBuilder
argument_list|>
block|{
DECL|field|PROTOTYPE
specifier|public
specifier|static
specifier|final
name|HistogramAggregatorBuilder
name|PROTOTYPE
init|=
operator|new
name|HistogramAggregatorBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|method|HistogramAggregatorBuilder
specifier|public
name|HistogramAggregatorBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|InternalHistogram
operator|.
name|HISTOGRAM_FACTORY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createFactoryFromStream
specifier|protected
name|HistogramAggregatorBuilder
name|createFactoryFromStream
parameter_list|(
name|String
name|name
parameter_list|,
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HistogramAggregatorBuilder
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|innerBuild
specifier|protected
name|HistogramAggregatorFactory
name|innerBuild
parameter_list|(
name|AggregationContext
name|context
parameter_list|,
name|ValuesSourceConfig
argument_list|<
name|Numeric
argument_list|>
name|config
parameter_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|Builder
name|subFactoriesBuilder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HistogramAggregatorFactory
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|config
argument_list|,
name|interval
argument_list|,
name|offset
argument_list|,
name|order
argument_list|,
name|keyed
argument_list|,
name|minDocCount
argument_list|,
name|extendedBounds
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|subFactoriesBuilder
argument_list|,
name|metaData
argument_list|)
return|;
block|}
block|}
DECL|class|AbstractBuilder
specifier|public
specifier|static
specifier|abstract
class|class
name|AbstractBuilder
parameter_list|<
name|AB
extends|extends
name|AbstractBuilder
parameter_list|<
name|AB
parameter_list|>
parameter_list|>
extends|extends
name|ValuesSourceAggregatorBuilder
argument_list|<
name|ValuesSource
operator|.
name|Numeric
argument_list|,
name|AB
argument_list|>
block|{
DECL|field|interval
specifier|protected
name|long
name|interval
decl_stmt|;
DECL|field|offset
specifier|protected
name|long
name|offset
init|=
literal|0
decl_stmt|;
DECL|field|order
specifier|protected
name|InternalOrder
name|order
init|=
operator|(
name|InternalOrder
operator|)
name|Histogram
operator|.
name|Order
operator|.
name|KEY_ASC
decl_stmt|;
DECL|field|keyed
specifier|protected
name|boolean
name|keyed
init|=
literal|false
decl_stmt|;
DECL|field|minDocCount
specifier|protected
name|long
name|minDocCount
init|=
literal|0
decl_stmt|;
DECL|field|extendedBounds
specifier|protected
name|ExtendedBounds
name|extendedBounds
decl_stmt|;
DECL|method|AbstractBuilder
specifier|private
name|AbstractBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|InternalHistogram
operator|.
name|Factory
argument_list|<
name|?
argument_list|>
name|histogramFactory
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|histogramFactory
operator|.
name|type
argument_list|()
argument_list|,
name|ValuesSourceType
operator|.
name|NUMERIC
argument_list|,
name|histogramFactory
operator|.
name|valueType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|interval
specifier|public
name|long
name|interval
parameter_list|()
block|{
return|return
name|interval
return|;
block|}
DECL|method|interval
specifier|public
name|AB
name|interval
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
if|if
condition|(
name|interval
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[interval] must be 1 or greater for histogram aggregation ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
return|return
operator|(
name|AB
operator|)
name|this
return|;
block|}
DECL|method|offset
specifier|public
name|long
name|offset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
DECL|method|offset
specifier|public
name|AB
name|offset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
return|return
operator|(
name|AB
operator|)
name|this
return|;
block|}
DECL|method|order
specifier|public
name|Histogram
operator|.
name|Order
name|order
parameter_list|()
block|{
return|return
name|order
return|;
block|}
DECL|method|order
specifier|public
name|AB
name|order
parameter_list|(
name|Histogram
operator|.
name|Order
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
operator|(
name|InternalOrder
operator|)
name|order
expr_stmt|;
return|return
operator|(
name|AB
operator|)
name|this
return|;
block|}
DECL|method|keyed
specifier|public
name|boolean
name|keyed
parameter_list|()
block|{
return|return
name|keyed
return|;
block|}
DECL|method|keyed
specifier|public
name|AB
name|keyed
parameter_list|(
name|boolean
name|keyed
parameter_list|)
block|{
name|this
operator|.
name|keyed
operator|=
name|keyed
expr_stmt|;
return|return
operator|(
name|AB
operator|)
name|this
return|;
block|}
DECL|method|minDocCount
specifier|public
name|long
name|minDocCount
parameter_list|()
block|{
return|return
name|minDocCount
return|;
block|}
DECL|method|minDocCount
specifier|public
name|AB
name|minDocCount
parameter_list|(
name|long
name|minDocCount
parameter_list|)
block|{
name|this
operator|.
name|minDocCount
operator|=
name|minDocCount
expr_stmt|;
return|return
operator|(
name|AB
operator|)
name|this
return|;
block|}
DECL|method|extendedBounds
specifier|public
name|ExtendedBounds
name|extendedBounds
parameter_list|()
block|{
return|return
name|extendedBounds
return|;
block|}
DECL|method|extendedBounds
specifier|public
name|AB
name|extendedBounds
parameter_list|(
name|ExtendedBounds
name|extendedBounds
parameter_list|)
block|{
name|this
operator|.
name|extendedBounds
operator|=
name|extendedBounds
expr_stmt|;
return|return
operator|(
name|AB
operator|)
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|XContentBuilder
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|Rounding
operator|.
name|Interval
operator|.
name|INTERVAL_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|doXContentInterval
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Rounding
operator|.
name|OffsetRounding
operator|.
name|OFFSET_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ORDER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|order
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|KEYED_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|keyed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MIN_DOC_COUNT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minDocCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|extendedBounds
operator|!=
literal|null
condition|)
block|{
name|extendedBounds
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|doXContentInterval
specifier|protected
name|XContentBuilder
name|doXContentInterval
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|value
argument_list|(
name|interval
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|InternalHistogram
operator|.
name|TYPE
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|innerReadFrom
specifier|protected
name|AB
name|innerReadFrom
parameter_list|(
name|String
name|name
parameter_list|,
name|ValuesSourceType
name|valuesSourceType
parameter_list|,
name|ValueType
name|targetValueType
parameter_list|,
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|AbstractBuilder
argument_list|<
name|AB
argument_list|>
name|factory
init|=
name|createFactoryFromStream
argument_list|(
name|name
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|factory
operator|.
name|interval
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|factory
operator|.
name|offset
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|order
operator|=
name|InternalOrder
operator|.
name|Streams
operator|.
name|readOrder
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|factory
operator|.
name|keyed
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|factory
operator|.
name|minDocCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|extendedBounds
operator|=
name|ExtendedBounds
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|AB
operator|)
name|factory
return|;
block|}
DECL|method|createFactoryFromStream
specifier|protected
specifier|abstract
name|AB
name|createFactoryFromStream
parameter_list|(
name|String
name|name
parameter_list|,
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|innerWriteTo
specifier|protected
name|void
name|innerWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFactoryToStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|boolean
name|hasOrder
init|=
name|order
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasOrder
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOrder
condition|)
block|{
name|InternalOrder
operator|.
name|Streams
operator|.
name|writeOrder
argument_list|(
name|order
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|keyed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|minDocCount
argument_list|)
expr_stmt|;
name|boolean
name|hasExtendedBounds
init|=
name|extendedBounds
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasExtendedBounds
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasExtendedBounds
condition|)
block|{
name|extendedBounds
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeFactoryToStream
specifier|protected
name|void
name|writeFactoryToStream
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Default impl does nothing
block|}
annotation|@
name|Override
DECL|method|innerHashCode
specifier|protected
name|int
name|innerHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|interval
argument_list|,
name|offset
argument_list|,
name|order
argument_list|,
name|keyed
argument_list|,
name|minDocCount
argument_list|,
name|extendedBounds
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|innerEquals
specifier|protected
name|boolean
name|innerEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|AbstractBuilder
name|other
init|=
operator|(
name|AbstractBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|interval
argument_list|,
name|other
operator|.
name|interval
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|offset
argument_list|,
name|other
operator|.
name|offset
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|order
argument_list|,
name|other
operator|.
name|order
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|keyed
argument_list|,
name|other
operator|.
name|keyed
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minDocCount
argument_list|,
name|other
operator|.
name|minDocCount
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|extendedBounds
argument_list|,
name|other
operator|.
name|extendedBounds
argument_list|)
return|;
block|}
block|}
DECL|class|DateHistogramAggregatorBuilder
specifier|public
specifier|static
class|class
name|DateHistogramAggregatorBuilder
extends|extends
name|AbstractBuilder
argument_list|<
name|DateHistogramAggregatorBuilder
argument_list|>
block|{
DECL|field|PROTOTYPE
specifier|public
specifier|static
specifier|final
name|DateHistogramAggregatorBuilder
name|PROTOTYPE
init|=
operator|new
name|DateHistogramAggregatorBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|dateHistogramInterval
specifier|private
name|DateHistogramInterval
name|dateHistogramInterval
decl_stmt|;
DECL|method|DateHistogramAggregatorBuilder
specifier|public
name|DateHistogramAggregatorBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|InternalDateHistogram
operator|.
name|HISTOGRAM_FACTORY
argument_list|)
expr_stmt|;
block|}
comment|/**          * Set the interval.          */
DECL|method|dateHistogramInterval
specifier|public
name|DateHistogramAggregatorBuilder
name|dateHistogramInterval
parameter_list|(
name|DateHistogramInterval
name|dateHistogramInterval
parameter_list|)
block|{
name|this
operator|.
name|dateHistogramInterval
operator|=
name|dateHistogramInterval
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|offset
specifier|public
name|DateHistogramAggregatorBuilder
name|offset
parameter_list|(
name|String
name|offset
parameter_list|)
block|{
return|return
name|offset
argument_list|(
name|parseStringOffset
argument_list|(
name|offset
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseStringOffset
specifier|protected
specifier|static
name|long
name|parseStringOffset
parameter_list|(
name|String
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
return|return
operator|-
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|offset
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
name|DateHistogramAggregatorBuilder
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".parseOffset"
argument_list|)
operator|.
name|millis
argument_list|()
return|;
block|}
name|int
name|beginIndex
init|=
name|offset
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'+'
condition|?
literal|1
else|:
literal|0
decl_stmt|;
return|return
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|offset
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|)
argument_list|,
literal|null
argument_list|,
name|DateHistogramAggregatorBuilder
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".parseOffset"
argument_list|)
operator|.
name|millis
argument_list|()
return|;
block|}
DECL|method|dateHistogramInterval
specifier|public
name|DateHistogramInterval
name|dateHistogramInterval
parameter_list|()
block|{
return|return
name|dateHistogramInterval
return|;
block|}
annotation|@
name|Override
DECL|method|innerBuild
specifier|protected
name|DateHistogramAggregatorFactory
name|innerBuild
parameter_list|(
name|AggregationContext
name|context
parameter_list|,
name|ValuesSourceConfig
argument_list|<
name|Numeric
argument_list|>
name|config
parameter_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|Builder
name|subFactoriesBuilder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DateHistogramAggregatorFactory
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|config
argument_list|,
name|interval
argument_list|,
name|dateHistogramInterval
argument_list|,
name|offset
argument_list|,
name|order
argument_list|,
name|keyed
argument_list|,
name|minDocCount
argument_list|,
name|extendedBounds
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|subFactoriesBuilder
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|InternalDateHistogram
operator|.
name|TYPE
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doXContentInterval
specifier|protected
name|XContentBuilder
name|doXContentInterval
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dateHistogramInterval
operator|==
literal|null
condition|)
block|{
name|super
operator|.
name|doXContentInterval
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|value
argument_list|(
name|dateHistogramInterval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|createFactoryFromStream
specifier|protected
name|DateHistogramAggregatorBuilder
name|createFactoryFromStream
parameter_list|(
name|String
name|name
parameter_list|,
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|DateHistogramAggregatorBuilder
name|factory
init|=
operator|new
name|DateHistogramAggregatorBuilder
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|dateHistogramInterval
operator|=
name|DateHistogramInterval
operator|.
name|readFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
annotation|@
name|Override
DECL|method|writeFactoryToStream
specifier|protected
name|void
name|writeFactoryToStream
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasDateInterval
init|=
name|dateHistogramInterval
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasDateInterval
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDateInterval
condition|)
block|{
name|dateHistogramInterval
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|innerHashCode
specifier|protected
name|int
name|innerHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|super
operator|.
name|innerHashCode
argument_list|()
argument_list|,
name|dateHistogramInterval
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|innerEquals
specifier|protected
name|boolean
name|innerEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|DateHistogramAggregatorBuilder
name|other
init|=
operator|(
name|DateHistogramAggregatorBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|super
operator|.
name|innerEquals
argument_list|(
name|obj
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|dateHistogramInterval
argument_list|,
name|other
operator|.
name|dateHistogramInterval
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

