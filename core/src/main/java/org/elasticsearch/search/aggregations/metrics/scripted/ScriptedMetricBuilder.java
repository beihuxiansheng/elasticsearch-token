begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.scripted
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|scripted
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptParameterParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|MetricsAggregationBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Builder for the {@link ScriptedMetric} aggregation.  */
end_comment

begin_class
DECL|class|ScriptedMetricBuilder
specifier|public
class|class
name|ScriptedMetricBuilder
extends|extends
name|MetricsAggregationBuilder
argument_list|<
name|ScriptedMetricBuilder
argument_list|>
block|{
DECL|field|initScript
specifier|private
name|Script
name|initScript
init|=
literal|null
decl_stmt|;
DECL|field|mapScript
specifier|private
name|Script
name|mapScript
init|=
literal|null
decl_stmt|;
DECL|field|combineScript
specifier|private
name|Script
name|combineScript
init|=
literal|null
decl_stmt|;
DECL|field|reduceScript
specifier|private
name|Script
name|reduceScript
init|=
literal|null
decl_stmt|;
DECL|field|params
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
literal|null
decl_stmt|;
comment|/**      * Sole constructor.      */
DECL|method|ScriptedMetricBuilder
specifier|public
name|ScriptedMetricBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|InternalScriptedMetric
operator|.
name|TYPE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the<tt>init</tt> script.      */
DECL|method|initScript
specifier|public
name|ScriptedMetricBuilder
name|initScript
parameter_list|(
name|Script
name|initScript
parameter_list|)
block|{
name|this
operator|.
name|initScript
operator|=
name|initScript
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the<tt>map</tt> script.      */
DECL|method|mapScript
specifier|public
name|ScriptedMetricBuilder
name|mapScript
parameter_list|(
name|Script
name|mapScript
parameter_list|)
block|{
name|this
operator|.
name|mapScript
operator|=
name|mapScript
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the<tt>combine</tt> script.      */
DECL|method|combineScript
specifier|public
name|ScriptedMetricBuilder
name|combineScript
parameter_list|(
name|Script
name|combineScript
parameter_list|)
block|{
name|this
operator|.
name|combineScript
operator|=
name|combineScript
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the<tt>reduce</tt> script.      */
DECL|method|reduceScript
specifier|public
name|ScriptedMetricBuilder
name|reduceScript
parameter_list|(
name|Script
name|reduceScript
parameter_list|)
block|{
name|this
operator|.
name|reduceScript
operator|=
name|reduceScript
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set parameters that will be available in the<tt>init</tt>,<tt>map</tt>      * and<tt>combine</tt> phases.      */
DECL|method|params
specifier|public
name|ScriptedMetricBuilder
name|params
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|internalXContent
specifier|protected
name|void
name|internalXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|builderParams
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initScript
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ScriptedMetricParser
operator|.
name|INIT_SCRIPT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|initScript
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapScript
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ScriptedMetricParser
operator|.
name|MAP_SCRIPT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|mapScript
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|combineScript
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ScriptedMetricParser
operator|.
name|COMBINE_SCRIPT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|combineScript
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reduceScript
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ScriptedMetricParser
operator|.
name|REDUCE_SCRIPT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|reduceScript
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ScriptedMetricParser
operator|.
name|PARAMS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

