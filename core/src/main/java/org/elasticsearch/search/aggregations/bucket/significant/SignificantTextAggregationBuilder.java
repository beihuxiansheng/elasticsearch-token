begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ParseFieldRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AbstractAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|SignificanceHeuristic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|SignificanceHeuristicParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsAggregator
operator|.
name|BucketCountThresholds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|SignificantTextAggregationBuilder
specifier|public
class|class
name|SignificantTextAggregationBuilder
extends|extends
name|AbstractAggregationBuilder
argument_list|<
name|SignificantTextAggregationBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"significant_text"
decl_stmt|;
DECL|field|FIELD_NAME
specifier|static
specifier|final
name|ParseField
name|FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
DECL|field|SOURCE_FIELDS_NAME
specifier|static
specifier|final
name|ParseField
name|SOURCE_FIELDS_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"source_fields"
argument_list|)
decl_stmt|;
DECL|field|FILTER_DUPLICATE_TEXT_FIELD_NAME
specifier|static
specifier|final
name|ParseField
name|FILTER_DUPLICATE_TEXT_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"filter_duplicate_text"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_BUCKET_COUNT_THRESHOLDS
specifier|static
specifier|final
name|TermsAggregator
operator|.
name|BucketCountThresholds
name|DEFAULT_BUCKET_COUNT_THRESHOLDS
init|=
name|SignificantTermsAggregationBuilder
operator|.
name|DEFAULT_BUCKET_COUNT_THRESHOLDS
decl_stmt|;
DECL|field|DEFAULT_SIGNIFICANCE_HEURISTIC
specifier|static
specifier|final
name|SignificanceHeuristic
name|DEFAULT_SIGNIFICANCE_HEURISTIC
init|=
name|SignificantTermsAggregationBuilder
operator|.
name|DEFAULT_SIGNIFICANCE_HEURISTIC
decl_stmt|;
DECL|field|fieldName
specifier|private
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
DECL|field|sourceFieldNames
specifier|private
name|String
index|[]
name|sourceFieldNames
init|=
literal|null
decl_stmt|;
DECL|field|filterDuplicateText
specifier|private
name|boolean
name|filterDuplicateText
init|=
literal|false
decl_stmt|;
DECL|field|includeExclude
specifier|private
name|IncludeExclude
name|includeExclude
init|=
literal|null
decl_stmt|;
DECL|field|filterBuilder
specifier|private
name|QueryBuilder
name|filterBuilder
init|=
literal|null
decl_stmt|;
DECL|field|bucketCountThresholds
specifier|private
name|TermsAggregator
operator|.
name|BucketCountThresholds
name|bucketCountThresholds
init|=
operator|new
name|BucketCountThresholds
argument_list|(
name|DEFAULT_BUCKET_COUNT_THRESHOLDS
argument_list|)
decl_stmt|;
DECL|field|significanceHeuristic
specifier|private
name|SignificanceHeuristic
name|significanceHeuristic
init|=
name|DEFAULT_SIGNIFICANCE_HEURISTIC
decl_stmt|;
DECL|method|getParser
specifier|public
specifier|static
name|Aggregator
operator|.
name|Parser
name|getParser
parameter_list|(
name|ParseFieldRegistry
argument_list|<
name|SignificanceHeuristicParser
argument_list|>
name|significanceHeuristicParserRegistry
parameter_list|)
block|{
name|ObjectParser
argument_list|<
name|SignificantTextAggregationBuilder
argument_list|,
name|QueryParseContext
argument_list|>
name|parser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
name|SignificantTextAggregationBuilder
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|parser
operator|.
name|declareInt
argument_list|(
name|SignificantTextAggregationBuilder
operator|::
name|shardSize
argument_list|,
name|TermsAggregationBuilder
operator|.
name|SHARD_SIZE_FIELD_NAME
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareLong
argument_list|(
name|SignificantTextAggregationBuilder
operator|::
name|minDocCount
argument_list|,
name|TermsAggregationBuilder
operator|.
name|MIN_DOC_COUNT_FIELD_NAME
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareLong
argument_list|(
name|SignificantTextAggregationBuilder
operator|::
name|shardMinDocCount
argument_list|,
name|TermsAggregationBuilder
operator|.
name|SHARD_MIN_DOC_COUNT_FIELD_NAME
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareInt
argument_list|(
name|SignificantTextAggregationBuilder
operator|::
name|size
argument_list|,
name|TermsAggregationBuilder
operator|.
name|REQUIRED_SIZE_FIELD_NAME
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareString
argument_list|(
name|SignificantTextAggregationBuilder
operator|::
name|fieldName
argument_list|,
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareStringArray
argument_list|(
name|SignificantTextAggregationBuilder
operator|::
name|sourceFieldNames
argument_list|,
name|SOURCE_FIELDS_NAME
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareBoolean
argument_list|(
name|SignificantTextAggregationBuilder
operator|::
name|filterDuplicateText
argument_list|,
name|FILTER_DUPLICATE_TEXT_FIELD_NAME
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareObject
argument_list|(
name|SignificantTextAggregationBuilder
operator|::
name|backgroundFilter
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|context
parameter_list|)
lambda|->
name|context
operator|.
name|parseInnerQueryBuilder
argument_list|()
argument_list|,
name|SignificantTermsAggregationBuilder
operator|.
name|BACKGROUND_FILTER
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareField
argument_list|(
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|includeExclude
argument_list|(
name|IncludeExclude
operator|.
name|merge
argument_list|(
name|v
argument_list|,
name|b
operator|.
name|includeExclude
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|IncludeExclude
operator|::
name|parseInclude
argument_list|,
name|IncludeExclude
operator|.
name|INCLUDE_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT_ARRAY_OR_STRING
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareField
argument_list|(
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|includeExclude
argument_list|(
name|IncludeExclude
operator|.
name|merge
argument_list|(
name|b
operator|.
name|includeExclude
argument_list|()
argument_list|,
name|v
argument_list|)
argument_list|)
argument_list|,
name|IncludeExclude
operator|::
name|parseExclude
argument_list|,
name|IncludeExclude
operator|.
name|EXCLUDE_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|STRING_ARRAY
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|significanceHeuristicParserRegistry
operator|.
name|getNames
argument_list|()
control|)
block|{
name|parser
operator|.
name|declareObject
argument_list|(
name|SignificantTextAggregationBuilder
operator|::
name|significanceHeuristic
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|context
parameter_list|)
lambda|->
block|{
name|SignificanceHeuristicParser
name|significanceHeuristicParser
init|=
name|significanceHeuristicParserRegistry
operator|.
name|lookupReturningNullIfNotFound
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|significanceHeuristicParser
operator|.
name|parse
argument_list|(
name|context
argument_list|)
return|;
block|}
argument_list|,
operator|new
name|ParseField
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Aggregator
operator|.
name|Parser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AggregationBuilder
name|parse
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parser
operator|.
name|parse
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|SignificantTextAggregationBuilder
argument_list|(
name|aggregationName
argument_list|,
literal|null
argument_list|)
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|getBucketCountThresholds
specifier|protected
name|TermsAggregator
operator|.
name|BucketCountThresholds
name|getBucketCountThresholds
parameter_list|()
block|{
return|return
operator|new
name|TermsAggregator
operator|.
name|BucketCountThresholds
argument_list|(
name|bucketCountThresholds
argument_list|)
return|;
block|}
DECL|method|bucketCountThresholds
specifier|public
name|TermsAggregator
operator|.
name|BucketCountThresholds
name|bucketCountThresholds
parameter_list|()
block|{
return|return
name|bucketCountThresholds
return|;
block|}
annotation|@
name|Override
DECL|method|subAggregations
specifier|public
name|SignificantTextAggregationBuilder
name|subAggregations
parameter_list|(
name|Builder
name|subFactories
parameter_list|)
block|{
throw|throw
operator|new
name|AggregationInitializationException
argument_list|(
literal|"Aggregator ["
operator|+
name|name
operator|+
literal|"] of type ["
operator|+
name|getType
argument_list|()
operator|+
literal|"] cannot accept sub-aggregations"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|subAggregation
specifier|public
name|SignificantTextAggregationBuilder
name|subAggregation
parameter_list|(
name|AggregationBuilder
name|aggregation
parameter_list|)
block|{
throw|throw
operator|new
name|AggregationInitializationException
argument_list|(
literal|"Aggregator ["
operator|+
name|name
operator|+
literal|"] of type ["
operator|+
name|getType
argument_list|()
operator|+
literal|"] cannot accept sub-aggregations"
argument_list|)
throw|;
block|}
DECL|method|bucketCountThresholds
specifier|public
name|SignificantTextAggregationBuilder
name|bucketCountThresholds
parameter_list|(
name|TermsAggregator
operator|.
name|BucketCountThresholds
name|bucketCountThresholds
parameter_list|)
block|{
if|if
condition|(
name|bucketCountThresholds
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[bucketCountThresholds] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|bucketCountThresholds
operator|=
name|bucketCountThresholds
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the size - indicating how many term buckets should be returned      * (defaults to 10)      */
DECL|method|size
specifier|public
name|SignificantTextAggregationBuilder
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[size] must be greater than 0. Found ["
operator|+
name|size
operator|+
literal|"] in ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|bucketCountThresholds
operator|.
name|setRequiredSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the shard_size - indicating the number of term buckets each shard      * will return to the coordinating node (the node that coordinates the      * search execution). The higher the shard size is, the more accurate the      * results are.      */
DECL|method|shardSize
specifier|public
name|SignificantTextAggregationBuilder
name|shardSize
parameter_list|(
name|int
name|shardSize
parameter_list|)
block|{
if|if
condition|(
name|shardSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[shardSize] must be greater than  0. Found ["
operator|+
name|shardSize
operator|+
literal|"] in ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|bucketCountThresholds
operator|.
name|setShardSize
argument_list|(
name|shardSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the name of the text field that will be the subject of this      * aggregation.      */
DECL|method|fieldName
specifier|public
name|SignificantTextAggregationBuilder
name|fieldName
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Selects the fields to load from _source JSON and analyze.      * If none are specified, the indexed "fieldName" value is assumed       * to also be the name of the JSON field holding the value      */
DECL|method|sourceFieldNames
specifier|public
name|SignificantTextAggregationBuilder
name|sourceFieldNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|this
operator|.
name|sourceFieldNames
operator|=
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Control if duplicate paragraphs of text should try be filtered from the      * statistical text analysis. Can improve results but slows down analysis.      * Default is false.      */
DECL|method|filterDuplicateText
specifier|public
name|SignificantTextAggregationBuilder
name|filterDuplicateText
parameter_list|(
name|boolean
name|filterDuplicateText
parameter_list|)
block|{
name|this
operator|.
name|filterDuplicateText
operator|=
name|filterDuplicateText
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the minimum document count terms should have in order to appear in      * the response.      */
DECL|method|minDocCount
specifier|public
name|SignificantTextAggregationBuilder
name|minDocCount
parameter_list|(
name|long
name|minDocCount
parameter_list|)
block|{
if|if
condition|(
name|minDocCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[minDocCount] must be greater than or equal to 0. Found ["
operator|+
name|minDocCount
operator|+
literal|"] in ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|bucketCountThresholds
operator|.
name|setMinDocCount
argument_list|(
name|minDocCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the minimum document count terms should have on the shard in order to      * appear in the response.      */
DECL|method|shardMinDocCount
specifier|public
name|SignificantTextAggregationBuilder
name|shardMinDocCount
parameter_list|(
name|long
name|shardMinDocCount
parameter_list|)
block|{
if|if
condition|(
name|shardMinDocCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[shardMinDocCount] must be greater than or equal to 0. Found ["
operator|+
name|shardMinDocCount
operator|+
literal|"] in ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|bucketCountThresholds
operator|.
name|setShardMinDocCount
argument_list|(
name|shardMinDocCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|backgroundFilter
specifier|public
name|SignificantTextAggregationBuilder
name|backgroundFilter
parameter_list|(
name|QueryBuilder
name|backgroundFilter
parameter_list|)
block|{
if|if
condition|(
name|backgroundFilter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[backgroundFilter] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|filterBuilder
operator|=
name|backgroundFilter
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|backgroundFilter
specifier|public
name|QueryBuilder
name|backgroundFilter
parameter_list|()
block|{
return|return
name|filterBuilder
return|;
block|}
comment|/**      * Set terms to include and exclude from the aggregation results      */
DECL|method|includeExclude
specifier|public
name|SignificantTextAggregationBuilder
name|includeExclude
parameter_list|(
name|IncludeExclude
name|includeExclude
parameter_list|)
block|{
name|this
operator|.
name|includeExclude
operator|=
name|includeExclude
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Get terms to include and exclude from the aggregation results      */
DECL|method|includeExclude
specifier|public
name|IncludeExclude
name|includeExclude
parameter_list|()
block|{
return|return
name|includeExclude
return|;
block|}
DECL|method|significanceHeuristic
specifier|public
name|SignificantTextAggregationBuilder
name|significanceHeuristic
parameter_list|(
name|SignificanceHeuristic
name|significanceHeuristic
parameter_list|)
block|{
if|if
condition|(
name|significanceHeuristic
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[significanceHeuristic] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|significanceHeuristic
operator|=
name|significanceHeuristic
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|significanceHeuristic
specifier|public
name|SignificanceHeuristic
name|significanceHeuristic
parameter_list|()
block|{
return|return
name|significanceHeuristic
return|;
block|}
comment|/**      * @param name      *            the name of this aggregation      * @param fieldName      *            the name of the text field that will be the subject of this      *            aggregation      *       */
DECL|method|SignificantTextAggregationBuilder
specifier|public
name|SignificantTextAggregationBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|SignificantTextAggregationBuilder
specifier|public
name|SignificantTextAggregationBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fieldName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|filterDuplicateText
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|bucketCountThresholds
operator|=
operator|new
name|BucketCountThresholds
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|filterBuilder
operator|=
name|in
operator|.
name|readOptionalNamedWriteable
argument_list|(
name|QueryBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
name|includeExclude
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|IncludeExclude
operator|::
operator|new
argument_list|)
expr_stmt|;
name|significanceHeuristic
operator|=
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|SignificanceHeuristic
operator|.
name|class
argument_list|)
expr_stmt|;
name|sourceFieldNames
operator|=
name|in
operator|.
name|readOptionalStringArray
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|filterDuplicateText
argument_list|)
expr_stmt|;
name|bucketCountThresholds
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalNamedWriteable
argument_list|(
name|filterBuilder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|includeExclude
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|significanceHeuristic
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStringArray
argument_list|(
name|sourceFieldNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doBuild
specifier|protected
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|doBuild
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|Builder
name|subFactoriesBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|SignificanceHeuristic
name|executionHeuristic
init|=
name|this
operator|.
name|significanceHeuristic
operator|.
name|rewrite
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|String
index|[]
name|execFieldNames
init|=
name|sourceFieldNames
decl_stmt|;
if|if
condition|(
name|execFieldNames
operator|==
literal|null
condition|)
block|{
name|execFieldNames
operator|=
operator|new
name|String
index|[]
block|{
name|fieldName
block|}
expr_stmt|;
block|}
return|return
operator|new
name|SignificantTextAggregatorFactory
argument_list|(
name|name
argument_list|,
name|includeExclude
argument_list|,
name|filterBuilder
argument_list|,
name|bucketCountThresholds
argument_list|,
name|executionHeuristic
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|subFactoriesBuilder
argument_list|,
name|fieldName
argument_list|,
name|execFieldNames
argument_list|,
name|filterDuplicateText
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|internalXContent
specifier|protected
name|XContentBuilder
name|internalXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|bucketCountThresholds
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sourceFieldNames
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
name|SOURCE_FIELDS_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|sourceFieldNames
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterDuplicateText
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FILTER_DUPLICATE_TEXT_FIELD_NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|filterDuplicateText
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SignificantTermsAggregationBuilder
operator|.
name|BACKGROUND_FILTER
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|filterBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeExclude
operator|!=
literal|null
condition|)
block|{
name|includeExclude
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|significanceHeuristic
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|bucketCountThresholds
argument_list|,
name|fieldName
argument_list|,
name|filterDuplicateText
argument_list|,
name|filterBuilder
argument_list|,
name|includeExclude
argument_list|,
name|significanceHeuristic
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|sourceFieldNames
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|SignificantTextAggregationBuilder
name|other
init|=
operator|(
name|SignificantTextAggregationBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|bucketCountThresholds
argument_list|,
name|other
operator|.
name|bucketCountThresholds
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|,
name|other
operator|.
name|fieldName
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|sourceFieldNames
argument_list|,
name|other
operator|.
name|sourceFieldNames
argument_list|)
operator|&&
name|filterDuplicateText
operator|==
name|other
operator|.
name|filterDuplicateText
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|filterBuilder
argument_list|,
name|other
operator|.
name|filterBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|includeExclude
argument_list|,
name|other
operator|.
name|includeExclude
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|significanceHeuristic
argument_list|,
name|other
operator|.
name|significanceHeuristic
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
block|}
end_class

end_unit

