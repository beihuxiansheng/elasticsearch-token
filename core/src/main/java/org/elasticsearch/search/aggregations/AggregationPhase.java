begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|global
operator|.
name|GlobalAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|SiblingPipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|CollectorResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|InternalProfileCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryPhaseExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Aggregation phase of a search request, used to collect aggregations  */
end_comment

begin_class
DECL|class|AggregationPhase
specifier|public
class|class
name|AggregationPhase
implements|implements
name|SearchPhase
block|{
annotation|@
name|Inject
DECL|method|AggregationPhase
specifier|public
name|AggregationPhase
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|preProcess
specifier|public
name|void
name|preProcess
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|aggregations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Aggregator
argument_list|>
name|collectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Aggregator
index|[]
name|aggregators
decl_stmt|;
try|try
block|{
name|AggregatorFactories
name|factories
init|=
name|context
operator|.
name|aggregations
argument_list|()
operator|.
name|factories
argument_list|()
decl_stmt|;
name|aggregators
operator|=
name|factories
operator|.
name|createTopLevelAggregators
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|aggregators
index|[
name|i
index|]
operator|instanceof
name|GlobalAggregator
operator|==
literal|false
condition|)
block|{
name|collectors
operator|.
name|add
argument_list|(
name|aggregators
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|aggregations
argument_list|()
operator|.
name|aggregators
argument_list|(
name|aggregators
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|collectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collector
name|collector
init|=
name|BucketCollector
operator|.
name|wrap
argument_list|(
name|collectors
argument_list|)
decl_stmt|;
operator|(
operator|(
name|BucketCollector
operator|)
name|collector
operator|)
operator|.
name|preCollection
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfilers
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|collector
operator|=
operator|new
name|InternalProfileCollector
argument_list|(
name|collector
argument_list|,
name|CollectorResult
operator|.
name|REASON_AGGREGATION
argument_list|,
comment|// TODO: report on child aggs as well
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|queryCollectors
argument_list|()
operator|.
name|put
argument_list|(
name|AggregationPhase
operator|.
name|class
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AggregationInitializationException
argument_list|(
literal|"Could not initialize aggregators"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|aggregations
argument_list|()
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|queryResult
argument_list|()
operator|.
name|aggregations
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|queryResult
argument_list|()
operator|.
name|hasAggs
argument_list|()
condition|)
block|{
comment|// no need to compute the aggs twice, they should be computed on a per context basis
return|return;
block|}
name|Aggregator
index|[]
name|aggregators
init|=
name|context
operator|.
name|aggregations
argument_list|()
operator|.
name|aggregators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Aggregator
argument_list|>
name|globals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|aggregators
index|[
name|i
index|]
operator|instanceof
name|GlobalAggregator
condition|)
block|{
name|globals
operator|.
name|add
argument_list|(
name|aggregators
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// optimize the global collector based execution
if|if
condition|(
operator|!
name|globals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BucketCollector
name|globalsCollector
init|=
name|BucketCollector
operator|.
name|wrap
argument_list|(
name|globals
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
decl_stmt|;
name|Query
name|searchFilter
init|=
name|context
operator|.
name|searchFilter
argument_list|(
name|context
operator|.
name|getQueryShardContext
argument_list|()
operator|.
name|getTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchFilter
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
name|filtered
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|searchFilter
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|query
operator|=
name|filtered
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|Collector
name|collector
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfilers
argument_list|()
operator|==
literal|null
condition|)
block|{
name|collector
operator|=
name|globalsCollector
expr_stmt|;
block|}
else|else
block|{
name|InternalProfileCollector
name|profileCollector
init|=
operator|new
name|InternalProfileCollector
argument_list|(
name|globalsCollector
argument_list|,
name|CollectorResult
operator|.
name|REASON_AGGREGATION_GLOBAL
argument_list|,
comment|// TODO: report on sub collectors
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|collector
operator|=
name|profileCollector
expr_stmt|;
comment|// start a new profile with this collector
name|context
operator|.
name|getProfilers
argument_list|()
operator|.
name|addQueryProfiler
argument_list|()
operator|.
name|setCollector
argument_list|(
name|profileCollector
argument_list|)
expr_stmt|;
block|}
name|globalsCollector
operator|.
name|preCollection
argument_list|()
expr_stmt|;
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryPhaseExecutionException
argument_list|(
name|context
argument_list|,
literal|"Failed to execute global aggregators"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|context
operator|.
name|clearReleasables
argument_list|(
name|SearchContext
operator|.
name|Lifetime
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aggregators
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Aggregator
name|aggregator
range|:
name|context
operator|.
name|aggregations
argument_list|()
operator|.
name|aggregators
argument_list|()
control|)
block|{
try|try
block|{
name|aggregator
operator|.
name|postCollection
argument_list|()
expr_stmt|;
name|aggregations
operator|.
name|add
argument_list|(
name|aggregator
operator|.
name|buildAggregation
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AggregationExecutionException
argument_list|(
literal|"Failed to build aggregation ["
operator|+
name|aggregator
operator|.
name|name
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|context
operator|.
name|queryResult
argument_list|()
operator|.
name|aggregations
argument_list|(
operator|new
name|InternalAggregations
argument_list|(
name|aggregations
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
init|=
name|context
operator|.
name|aggregations
argument_list|()
operator|.
name|factories
argument_list|()
operator|.
name|createPipelineAggregators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SiblingPipelineAggregator
argument_list|>
name|siblingPipelineAggregators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pipelineAggregators
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PipelineAggregator
name|pipelineAggregator
range|:
name|pipelineAggregators
control|)
block|{
if|if
condition|(
name|pipelineAggregator
operator|instanceof
name|SiblingPipelineAggregator
condition|)
block|{
name|siblingPipelineAggregators
operator|.
name|add
argument_list|(
operator|(
name|SiblingPipelineAggregator
operator|)
name|pipelineAggregator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AggregationExecutionException
argument_list|(
literal|"Invalid pipeline aggregation named ["
operator|+
name|pipelineAggregator
operator|.
name|name
argument_list|()
operator|+
literal|"] of type ["
operator|+
name|pipelineAggregator
operator|.
name|getWriteableName
argument_list|()
operator|+
literal|"]. Only sibling pipeline aggregations are "
operator|+
literal|"allowed at the top level"
argument_list|)
throw|;
block|}
block|}
name|context
operator|.
name|queryResult
argument_list|()
operator|.
name|pipelineAggregators
argument_list|(
name|siblingPipelineAggregators
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AggregationExecutionException
argument_list|(
literal|"Failed to build top level pipeline aggregators"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// disable aggregations so that they don't run on next pages in case of scrolling
name|context
operator|.
name|aggregations
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|queryCollectors
argument_list|()
operator|.
name|remove
argument_list|(
name|AggregationPhase
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

