begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|MultiBucketsAggregation
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * {@link Bucket} Ordering strategy.  */
end_comment

begin_class
DECL|class|BucketOrder
specifier|public
specifier|abstract
class|class
name|BucketOrder
implements|implements
name|ToXContentObject
implements|,
name|Writeable
block|{
comment|/**      * Creates a bucket ordering strategy that sorts buckets by their document counts (ascending or descending).      *      * @param asc direction to sort by: {@code true} for ascending, {@code false} for descending.      */
DECL|method|count
specifier|public
specifier|static
name|BucketOrder
name|count
parameter_list|(
name|boolean
name|asc
parameter_list|)
block|{
return|return
name|asc
condition|?
name|InternalOrder
operator|.
name|COUNT_ASC
else|:
name|InternalOrder
operator|.
name|COUNT_DESC
return|;
block|}
comment|/**      * Creates a bucket ordering strategy that sorts buckets by their keys (ascending or descending). This may be      * used as a tie-breaker to avoid non-deterministic ordering.      *      * @param asc direction to sort by: {@code true} for ascending, {@code false} for descending.      */
DECL|method|key
specifier|public
specifier|static
name|BucketOrder
name|key
parameter_list|(
name|boolean
name|asc
parameter_list|)
block|{
return|return
name|asc
condition|?
name|InternalOrder
operator|.
name|KEY_ASC
else|:
name|InternalOrder
operator|.
name|KEY_DESC
return|;
block|}
comment|/**      * Creates a bucket ordering strategy which sorts buckets based on a single-valued sub-aggregation.      *      * @param path path to the sub-aggregation to sort on.      * @param asc  direction to sort by: {@code true} for ascending, {@code false} for descending.      * @see AggregationPath      */
DECL|method|aggregation
specifier|public
specifier|static
name|BucketOrder
name|aggregation
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
return|return
operator|new
name|InternalOrder
operator|.
name|Aggregation
argument_list|(
name|path
argument_list|,
name|asc
argument_list|)
return|;
block|}
comment|/**      * Creates a bucket ordering strategy which sorts buckets based on a metric from a multi-valued sub-aggregation.      *      * @param path       path to the sub-aggregation to sort on.      * @param metricName name of the value of the multi-value metric to sort on.      * @param asc        direction to sort by: {@code true} for ascending, {@code false} for descending.      * @see AggregationPath      */
DECL|method|aggregation
specifier|public
specifier|static
name|BucketOrder
name|aggregation
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|metricName
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
return|return
operator|new
name|InternalOrder
operator|.
name|Aggregation
argument_list|(
name|path
operator|+
literal|"."
operator|+
name|metricName
argument_list|,
name|asc
argument_list|)
return|;
block|}
comment|/**      * Creates a bucket ordering strategy which sorts buckets based on multiple criteria. A tie-breaker may be added to      * avoid non-deterministic ordering.      *      * @param orders a list of {@link BucketOrder} objects to sort on, in order of priority.      */
DECL|method|compound
specifier|public
specifier|static
name|BucketOrder
name|compound
parameter_list|(
name|List
argument_list|<
name|BucketOrder
argument_list|>
name|orders
parameter_list|)
block|{
return|return
operator|new
name|InternalOrder
operator|.
name|CompoundOrder
argument_list|(
name|orders
argument_list|)
return|;
block|}
comment|/**      * Creates a bucket ordering strategy which sorts buckets based on multiple criteria. A tie-breaker may be added to      * avoid non-deterministic ordering.      *      * @param orders a list of {@link BucketOrder} parameters to sort on, in order of priority.      */
DECL|method|compound
specifier|public
specifier|static
name|BucketOrder
name|compound
parameter_list|(
name|BucketOrder
modifier|...
name|orders
parameter_list|)
block|{
return|return
name|compound
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|orders
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @return A comparator for the bucket based on the given aggregator. The comparator is used in two phases:      *<p>      * - aggregation phase, where each shard builds a list of buckets to be sent to the coordinating node.      * In this phase, the passed in aggregator will be the aggregator that aggregates the buckets on the      * shard level.      *<p>      * - reduce phase, where the coordinating node gathers all the buckets from all the shards and reduces them      * to a final bucket list. In this case, the passed in aggregator will be {@code null}.      */
DECL|method|comparator
specifier|public
specifier|abstract
name|Comparator
argument_list|<
name|Bucket
argument_list|>
name|comparator
parameter_list|(
name|Aggregator
name|aggregator
parameter_list|)
function_decl|;
comment|/**      * @return unique internal ID used for reading/writing this order from/to a stream.      * @see InternalOrder.Streams      */
DECL|method|id
specifier|abstract
name|byte
name|id
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|abstract
name|int
name|hashCode
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|abstract
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalOrder
operator|.
name|Streams
operator|.
name|writeOrder
argument_list|(
name|this
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

