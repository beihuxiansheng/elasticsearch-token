begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.histogram
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
operator|.
name|Numeric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceAggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A builder for histograms on date fields.  */
end_comment

begin_class
DECL|class|DateHistogramAggregationBuilder
specifier|public
class|class
name|DateHistogramAggregationBuilder
extends|extends
name|ValuesSourceAggregationBuilder
argument_list|<
name|ValuesSource
operator|.
name|Numeric
argument_list|,
name|DateHistogramAggregationBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
name|InternalDateHistogram
operator|.
name|TYPE
operator|.
name|name
argument_list|()
decl_stmt|;
DECL|field|AGGREGATION_NAME_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|AGGREGATION_NAME_FIELD
init|=
operator|new
name|ParseField
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
DECL|field|interval
specifier|private
name|long
name|interval
decl_stmt|;
DECL|field|dateHistogramInterval
specifier|private
name|DateHistogramInterval
name|dateHistogramInterval
decl_stmt|;
DECL|field|offset
specifier|private
name|long
name|offset
init|=
literal|0
decl_stmt|;
DECL|field|extendedBounds
specifier|private
name|ExtendedBounds
name|extendedBounds
decl_stmt|;
DECL|field|order
specifier|private
name|InternalOrder
name|order
init|=
operator|(
name|InternalOrder
operator|)
name|Histogram
operator|.
name|Order
operator|.
name|KEY_ASC
decl_stmt|;
DECL|field|keyed
specifier|private
name|boolean
name|keyed
init|=
literal|false
decl_stmt|;
DECL|field|minDocCount
specifier|private
name|long
name|minDocCount
init|=
literal|0
decl_stmt|;
comment|/** Create a new builder with the given name. */
DECL|method|DateHistogramAggregationBuilder
specifier|public
name|DateHistogramAggregationBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|InternalDateHistogram
operator|.
name|TYPE
argument_list|,
name|ValuesSourceType
operator|.
name|NUMERIC
argument_list|,
name|ValueType
operator|.
name|DATE
argument_list|)
expr_stmt|;
block|}
comment|/** Read from a stream, for internal use only. */
DECL|method|DateHistogramAggregationBuilder
specifier|public
name|DateHistogramAggregationBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|InternalDateHistogram
operator|.
name|TYPE
argument_list|,
name|ValuesSourceType
operator|.
name|NUMERIC
argument_list|,
name|ValueType
operator|.
name|DATE
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|order
operator|=
name|InternalOrder
operator|.
name|Streams
operator|.
name|readOrder
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|keyed
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|minDocCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|interval
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|dateHistogramInterval
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|DateHistogramInterval
operator|::
operator|new
argument_list|)
expr_stmt|;
name|offset
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|extendedBounds
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|ExtendedBounds
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|innerWriteTo
specifier|protected
name|void
name|innerWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasOrder
init|=
name|order
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasOrder
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOrder
condition|)
block|{
name|InternalOrder
operator|.
name|Streams
operator|.
name|writeOrder
argument_list|(
name|order
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|keyed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|minDocCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|dateHistogramInterval
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|extendedBounds
argument_list|)
expr_stmt|;
block|}
comment|/** Get the current interval in milliseconds that is set on this builder. */
DECL|method|interval
specifier|public
name|double
name|interval
parameter_list|()
block|{
return|return
name|interval
return|;
block|}
comment|/** Set the interval on this builder, and return the builder so that calls can be chained.      *  If both {@link #interval()} and {@link #dateHistogramInterval()} are set, then the      *  {@link #dateHistogramInterval()} wins. */
DECL|method|interval
specifier|public
name|DateHistogramAggregationBuilder
name|interval
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
if|if
condition|(
name|interval
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[interval] must be 1 or greater for histogram aggregation ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Get the current date interval that is set on this builder. */
DECL|method|dateHistogramInterval
specifier|public
name|DateHistogramInterval
name|dateHistogramInterval
parameter_list|()
block|{
return|return
name|dateHistogramInterval
return|;
block|}
comment|/** Set the interval on this builder, and return the builder so that calls can be chained.      *  If both {@link #interval()} and {@link #dateHistogramInterval()} are set, then the      *  {@link #dateHistogramInterval()} wins. */
DECL|method|dateHistogramInterval
specifier|public
name|DateHistogramAggregationBuilder
name|dateHistogramInterval
parameter_list|(
name|DateHistogramInterval
name|dateHistogramInterval
parameter_list|)
block|{
if|if
condition|(
name|dateHistogramInterval
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[dateHistogramInterval] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|dateHistogramInterval
operator|=
name|dateHistogramInterval
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Get the offset to use when rounding, which is a number of milliseconds. */
DECL|method|offset
specifier|public
name|double
name|offset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/** Set the offset on this builder, which is a number of milliseconds, and      *  return the builder so that calls can be chained. */
DECL|method|offset
specifier|public
name|DateHistogramAggregationBuilder
name|offset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Set the offset on this builder, as a time value, and      *  return the builder so that calls can be chained. */
DECL|method|offset
specifier|public
name|DateHistogramAggregationBuilder
name|offset
parameter_list|(
name|String
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[offset] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|offset
argument_list|(
name|parseStringOffset
argument_list|(
name|offset
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseStringOffset
specifier|static
name|long
name|parseStringOffset
parameter_list|(
name|String
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
return|return
operator|-
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|offset
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
name|DateHistogramAggregationBuilder
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".parseOffset"
argument_list|)
operator|.
name|millis
argument_list|()
return|;
block|}
name|int
name|beginIndex
init|=
name|offset
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'+'
condition|?
literal|1
else|:
literal|0
decl_stmt|;
return|return
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|offset
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|)
argument_list|,
literal|null
argument_list|,
name|DateHistogramAggregationBuilder
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".parseOffset"
argument_list|)
operator|.
name|millis
argument_list|()
return|;
block|}
comment|/** Return extended bounds for this histogram, or {@code null} if none are set. */
DECL|method|extendedBounds
specifier|public
name|ExtendedBounds
name|extendedBounds
parameter_list|()
block|{
return|return
name|extendedBounds
return|;
block|}
comment|/** Set extended bounds on this histogram, so that buckets would also be      *  generated on intervals that did not match any documents. */
DECL|method|extendedBounds
specifier|public
name|DateHistogramAggregationBuilder
name|extendedBounds
parameter_list|(
name|ExtendedBounds
name|extendedBounds
parameter_list|)
block|{
if|if
condition|(
name|extendedBounds
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[extendedBounds] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|extendedBounds
operator|=
name|extendedBounds
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Return the order to use to sort buckets of this histogram. */
DECL|method|order
specifier|public
name|Histogram
operator|.
name|Order
name|order
parameter_list|()
block|{
return|return
name|order
return|;
block|}
comment|/** Set a new order on this builder and return the builder so that calls      *  can be chained. */
DECL|method|order
specifier|public
name|DateHistogramAggregationBuilder
name|order
parameter_list|(
name|Histogram
operator|.
name|Order
name|order
parameter_list|)
block|{
if|if
condition|(
name|order
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[order] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|order
operator|=
operator|(
name|InternalOrder
operator|)
name|order
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Return whether buckets should be returned as a hash. In case      *  {@code keyed} is false, buckets will be returned as an array. */
DECL|method|keyed
specifier|public
name|boolean
name|keyed
parameter_list|()
block|{
return|return
name|keyed
return|;
block|}
comment|/** Set whether to return buckets as a hash or as an array, and return the      *  builder so that calls can be chained. */
DECL|method|keyed
specifier|public
name|DateHistogramAggregationBuilder
name|keyed
parameter_list|(
name|boolean
name|keyed
parameter_list|)
block|{
name|this
operator|.
name|keyed
operator|=
name|keyed
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Return the minimum count of documents that buckets need to have in order      *  to be included in the response. */
DECL|method|minDocCount
specifier|public
name|long
name|minDocCount
parameter_list|()
block|{
return|return
name|minDocCount
return|;
block|}
comment|/** Set the minimum count of matching documents that buckets need to have      *  and return this builder so that calls can be chained. */
DECL|method|minDocCount
specifier|public
name|DateHistogramAggregationBuilder
name|minDocCount
parameter_list|(
name|long
name|minDocCount
parameter_list|)
block|{
if|if
condition|(
name|minDocCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[minDocCount] must be greater than or equal to 0. Found ["
operator|+
name|minDocCount
operator|+
literal|"] in ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|minDocCount
operator|=
name|minDocCount
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|XContentBuilder
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dateHistogramInterval
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Histogram
operator|.
name|INTERVAL_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|Histogram
operator|.
name|INTERVAL_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|dateHistogramInterval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|Histogram
operator|.
name|OFFSET_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Histogram
operator|.
name|ORDER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|order
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|Histogram
operator|.
name|KEYED_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|keyed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Histogram
operator|.
name|MIN_DOC_COUNT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minDocCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|extendedBounds
operator|!=
literal|null
condition|)
block|{
name|extendedBounds
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|innerBuild
specifier|protected
name|ValuesSourceAggregatorFactory
argument_list|<
name|Numeric
argument_list|,
name|?
argument_list|>
name|innerBuild
parameter_list|(
name|AggregationContext
name|context
parameter_list|,
name|ValuesSourceConfig
argument_list|<
name|Numeric
argument_list|>
name|config
parameter_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|Builder
name|subFactoriesBuilder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DateHistogramAggregatorFactory
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|config
argument_list|,
name|interval
argument_list|,
name|dateHistogramInterval
argument_list|,
name|offset
argument_list|,
name|order
argument_list|,
name|keyed
argument_list|,
name|minDocCount
argument_list|,
name|extendedBounds
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|subFactoriesBuilder
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|innerHashCode
specifier|protected
name|int
name|innerHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|order
argument_list|,
name|keyed
argument_list|,
name|minDocCount
argument_list|,
name|interval
argument_list|,
name|dateHistogramInterval
argument_list|,
name|minDocCount
argument_list|,
name|extendedBounds
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|innerEquals
specifier|protected
name|boolean
name|innerEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|DateHistogramAggregationBuilder
name|other
init|=
operator|(
name|DateHistogramAggregationBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|order
argument_list|,
name|other
operator|.
name|order
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|keyed
argument_list|,
name|other
operator|.
name|keyed
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minDocCount
argument_list|,
name|other
operator|.
name|minDocCount
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|interval
argument_list|,
name|other
operator|.
name|interval
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|dateHistogramInterval
argument_list|,
name|other
operator|.
name|dateHistogramInterval
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|offset
argument_list|,
name|other
operator|.
name|offset
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|extendedBounds
argument_list|,
name|other
operator|.
name|extendedBounds
argument_list|)
return|;
block|}
block|}
end_class

end_unit

