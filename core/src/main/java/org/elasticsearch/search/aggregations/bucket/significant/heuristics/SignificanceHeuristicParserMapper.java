begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant.heuristics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|SignificanceHeuristicParserMapper
specifier|public
class|class
name|SignificanceHeuristicParserMapper
block|{
DECL|field|significanceHeuristicParsers
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SignificanceHeuristicParser
argument_list|>
name|significanceHeuristicParsers
decl_stmt|;
annotation|@
name|Inject
DECL|method|SignificanceHeuristicParserMapper
specifier|public
name|SignificanceHeuristicParserMapper
parameter_list|(
name|Set
argument_list|<
name|SignificanceHeuristicParser
argument_list|>
name|parsers
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SignificanceHeuristicParser
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|add
argument_list|(
name|map
argument_list|,
operator|new
name|JLHScore
operator|.
name|JLHScoreParser
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|map
argument_list|,
operator|new
name|PercentageScore
operator|.
name|PercentageScoreParser
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|map
argument_list|,
operator|new
name|MutualInformation
operator|.
name|MutualInformationParser
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|map
argument_list|,
operator|new
name|ChiSquare
operator|.
name|ChiSquareParser
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|map
argument_list|,
operator|new
name|GND
operator|.
name|GNDParser
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|map
argument_list|,
operator|new
name|ScriptHeuristic
operator|.
name|ScriptHeuristicParser
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SignificanceHeuristicParser
name|parser
range|:
name|parsers
control|)
block|{
name|add
argument_list|(
name|map
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
name|significanceHeuristicParsers
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|SignificanceHeuristicParser
name|get
parameter_list|(
name|String
name|parserName
parameter_list|)
block|{
return|return
name|significanceHeuristicParsers
operator|.
name|get
argument_list|(
name|parserName
argument_list|)
return|;
block|}
DECL|method|add
specifier|private
name|void
name|add
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SignificanceHeuristicParser
argument_list|>
name|map
parameter_list|,
name|SignificanceHeuristicParser
name|parser
parameter_list|)
block|{
for|for
control|(
name|String
name|type
range|:
name|parser
operator|.
name|getNames
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

