begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractSortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractSortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|MultiGeoPointValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Utility class that allows to return views of {@link ValuesSource}s that  * replace the missing value with a configured value.  */
end_comment

begin_enum
DECL|enum|MissingValues
specifier|public
enum|enum
name|MissingValues
block|{     ;
comment|// TODO: we could specialize the single value case
DECL|method|replaceMissing
specifier|public
specifier|static
name|ValuesSource
operator|.
name|Bytes
name|replaceMissing
parameter_list|(
specifier|final
name|ValuesSource
operator|.
name|Bytes
name|valuesSource
parameter_list|,
specifier|final
name|BytesRef
name|missing
parameter_list|)
block|{
return|return
operator|new
name|ValuesSource
operator|.
name|Bytes
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedBinaryDocValues
name|values
init|=
name|valuesSource
operator|.
name|bytesValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|replaceMissing
argument_list|(
name|values
argument_list|,
name|missing
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|replaceMissing
specifier|static
name|SortedBinaryDocValues
name|replaceMissing
parameter_list|(
specifier|final
name|SortedBinaryDocValues
name|values
parameter_list|,
specifier|final
name|BytesRef
name|missing
parameter_list|)
block|{
return|return
operator|new
name|SortedBinaryDocValues
argument_list|()
block|{
specifier|private
name|int
name|count
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|count
operator|=
name|values
operator|.
name|docValueCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
comment|// always return true because we want to return a value even if
comment|// the document does not have a value
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|count
operator|==
literal|0
condition|?
literal|1
else|:
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|nextValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
return|return
name|values
operator|.
name|nextValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|missing
return|;
block|}
block|}
block|}
return|;
block|}
DECL|method|replaceMissing
specifier|public
specifier|static
name|ValuesSource
operator|.
name|Numeric
name|replaceMissing
parameter_list|(
specifier|final
name|ValuesSource
operator|.
name|Numeric
name|valuesSource
parameter_list|,
specifier|final
name|Number
name|missing
parameter_list|)
block|{
specifier|final
name|boolean
name|missingIsFloat
init|=
name|missing
operator|.
name|doubleValue
argument_list|()
operator|%
literal|1
operator|!=
literal|0
decl_stmt|;
specifier|final
name|boolean
name|isFloatingPoint
init|=
name|valuesSource
operator|.
name|isFloatingPoint
argument_list|()
operator|||
name|missingIsFloat
decl_stmt|;
return|return
operator|new
name|ValuesSource
operator|.
name|Numeric
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
name|isFloatingPoint
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|replaceMissing
argument_list|(
name|valuesSource
operator|.
name|bytesValues
argument_list|(
name|context
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|missing
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedNumericDocValues
name|longValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SortedNumericDocValues
name|values
init|=
name|valuesSource
operator|.
name|longValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|replaceMissing
argument_list|(
name|values
argument_list|,
name|missing
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedNumericDoubleValues
name|doubleValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SortedNumericDoubleValues
name|values
init|=
name|valuesSource
operator|.
name|doubleValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|replaceMissing
argument_list|(
name|values
argument_list|,
name|missing
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|replaceMissing
specifier|static
name|SortedNumericDocValues
name|replaceMissing
parameter_list|(
specifier|final
name|SortedNumericDocValues
name|values
parameter_list|,
specifier|final
name|long
name|missing
parameter_list|)
block|{
return|return
operator|new
name|AbstractSortedNumericDocValues
argument_list|()
block|{
specifier|private
name|int
name|count
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|nextValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
return|return
name|values
operator|.
name|nextValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|missing
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|count
operator|==
literal|0
condition|?
literal|1
else|:
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|count
operator|=
name|values
operator|.
name|docValueCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
comment|// always return true because we want to return a value even if
comment|// the document does not have a value
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
DECL|method|replaceMissing
specifier|static
name|SortedNumericDoubleValues
name|replaceMissing
parameter_list|(
specifier|final
name|SortedNumericDoubleValues
name|values
parameter_list|,
specifier|final
name|double
name|missing
parameter_list|)
block|{
return|return
operator|new
name|SortedNumericDoubleValues
argument_list|()
block|{
specifier|private
name|int
name|count
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|count
operator|=
name|values
operator|.
name|docValueCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
comment|// always return true because we want to return a value even if
comment|// the document does not have a value
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|nextValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
return|return
name|values
operator|.
name|nextValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|missing
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|count
operator|==
literal|0
condition|?
literal|1
else|:
name|count
return|;
block|}
block|}
return|;
block|}
DECL|method|replaceMissing
specifier|public
specifier|static
name|ValuesSource
operator|.
name|Bytes
name|replaceMissing
parameter_list|(
specifier|final
name|ValuesSource
operator|.
name|Bytes
operator|.
name|WithOrdinals
name|valuesSource
parameter_list|,
specifier|final
name|BytesRef
name|missing
parameter_list|)
block|{
return|return
operator|new
name|ValuesSource
operator|.
name|Bytes
operator|.
name|WithOrdinals
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedBinaryDocValues
name|values
init|=
name|valuesSource
operator|.
name|bytesValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|replaceMissing
argument_list|(
name|values
argument_list|,
name|missing
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedSetDocValues
name|ordinalsValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSetDocValues
name|values
init|=
name|valuesSource
operator|.
name|ordinalsValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|replaceMissing
argument_list|(
name|values
argument_list|,
name|missing
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedSetDocValues
name|globalOrdinalsValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSetDocValues
name|values
init|=
name|valuesSource
operator|.
name|globalOrdinalsValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|replaceMissing
argument_list|(
name|values
argument_list|,
name|missing
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|replaceMissing
specifier|static
name|SortedSetDocValues
name|replaceMissing
parameter_list|(
specifier|final
name|SortedSetDocValues
name|values
parameter_list|,
specifier|final
name|BytesRef
name|missing
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|missingOrd
init|=
name|values
operator|.
name|lookupTerm
argument_list|(
name|missing
argument_list|)
decl_stmt|;
if|if
condition|(
name|missingOrd
operator|>=
literal|0
condition|)
block|{
comment|// The value already exists
return|return
name|replaceMissingOrd
argument_list|(
name|values
argument_list|,
name|missingOrd
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|long
name|insertedOrd
init|=
operator|-
literal|1
operator|-
name|missingOrd
decl_stmt|;
return|return
name|insertOrd
argument_list|(
name|values
argument_list|,
name|insertedOrd
argument_list|,
name|missing
argument_list|)
return|;
block|}
block|}
DECL|method|replaceMissingOrd
specifier|static
name|SortedSetDocValues
name|replaceMissingOrd
parameter_list|(
specifier|final
name|SortedSetDocValues
name|values
parameter_list|,
specifier|final
name|long
name|missingOrd
parameter_list|)
block|{
return|return
operator|new
name|AbstractSortedSetDocValues
argument_list|()
block|{
specifier|private
name|boolean
name|hasOrds
decl_stmt|;
specifier|private
name|long
name|nextMissingOrd
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|values
operator|.
name|getValueCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasOrds
condition|)
block|{
return|return
name|values
operator|.
name|nextOrd
argument_list|()
return|;
block|}
else|else
block|{
comment|// we want to return the next missing ord but set this to
comment|// NO_MORE_ORDS so on the next call we indicate there are no
comment|// more values
name|long
name|ordToReturn
init|=
name|nextMissingOrd
decl_stmt|;
name|nextMissingOrd
operator|=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
expr_stmt|;
return|return
name|ordToReturn
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|hasOrds
operator|=
name|values
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|nextMissingOrd
operator|=
name|missingOrd
expr_stmt|;
comment|// always return true because we want to return a value even if
comment|// the document does not have a value
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
DECL|method|insertOrd
specifier|static
name|SortedSetDocValues
name|insertOrd
parameter_list|(
specifier|final
name|SortedSetDocValues
name|values
parameter_list|,
specifier|final
name|long
name|insertedOrd
parameter_list|,
specifier|final
name|BytesRef
name|missingValue
parameter_list|)
block|{
return|return
operator|new
name|AbstractSortedSetDocValues
argument_list|()
block|{
specifier|private
name|boolean
name|hasOrds
decl_stmt|;
specifier|private
name|long
name|nextMissingOrd
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ord
operator|<
name|insertedOrd
condition|)
block|{
return|return
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ord
operator|>
name|insertedOrd
condition|)
block|{
return|return
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|missingValue
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
literal|1
operator|+
name|values
operator|.
name|getValueCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasOrds
condition|)
block|{
specifier|final
name|long
name|ord
init|=
name|values
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
if|if
condition|(
name|ord
operator|<
name|insertedOrd
condition|)
block|{
return|return
name|ord
return|;
block|}
else|else
block|{
return|return
name|ord
operator|+
literal|1
return|;
block|}
block|}
else|else
block|{
comment|// we want to return the next missing ord but set this to
comment|// NO_MORE_ORDS so on the next call we indicate there are no
comment|// more values
name|long
name|ordToReturn
init|=
name|nextMissingOrd
decl_stmt|;
name|nextMissingOrd
operator|=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
expr_stmt|;
return|return
name|ordToReturn
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|hasOrds
operator|=
name|values
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|nextMissingOrd
operator|=
name|insertedOrd
expr_stmt|;
comment|// always return true because we want to return a value even if
comment|// the document does not have a value
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
DECL|method|replaceMissing
specifier|public
specifier|static
name|ValuesSource
operator|.
name|GeoPoint
name|replaceMissing
parameter_list|(
specifier|final
name|ValuesSource
operator|.
name|GeoPoint
name|valuesSource
parameter_list|,
specifier|final
name|GeoPoint
name|missing
parameter_list|)
block|{
return|return
operator|new
name|ValuesSource
operator|.
name|GeoPoint
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|replaceMissing
argument_list|(
name|valuesSource
operator|.
name|bytesValues
argument_list|(
name|context
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|missing
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MultiGeoPointValues
name|geoPointValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
specifier|final
name|MultiGeoPointValues
name|values
init|=
name|valuesSource
operator|.
name|geoPointValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|replaceMissing
argument_list|(
name|values
argument_list|,
name|missing
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|replaceMissing
specifier|static
name|MultiGeoPointValues
name|replaceMissing
parameter_list|(
specifier|final
name|MultiGeoPointValues
name|values
parameter_list|,
specifier|final
name|GeoPoint
name|missing
parameter_list|)
block|{
return|return
operator|new
name|MultiGeoPointValues
argument_list|()
block|{
specifier|private
name|int
name|count
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|count
operator|=
name|values
operator|.
name|docValueCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
comment|// always return true because we want to return a value even if
comment|// the document does not have a value
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|count
operator|==
literal|0
condition|?
literal|1
else|:
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|GeoPoint
name|nextValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
return|return
name|values
operator|.
name|nextValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|missing
return|;
block|}
block|}
block|}
return|;
block|}
block|}
end_enum

end_unit

