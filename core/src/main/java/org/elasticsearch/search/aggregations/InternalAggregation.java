begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|search
operator|.
name|RestSearchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * An internal implementation of {@link Aggregation}. Serves as a base class for all aggregation implementations.  */
end_comment

begin_class
DECL|class|InternalAggregation
specifier|public
specifier|abstract
class|class
name|InternalAggregation
implements|implements
name|Aggregation
implements|,
name|ToXContent
implements|,
name|NamedWriteable
block|{
comment|/** Delimiter used when prefixing aggregation names with their type using the typed_keys parameter **/
DECL|field|TYPED_KEYS_DELIMITER
specifier|public
specifier|static
specifier|final
name|String
name|TYPED_KEYS_DELIMITER
init|=
literal|"#"
decl_stmt|;
DECL|class|ReduceContext
specifier|public
specifier|static
class|class
name|ReduceContext
block|{
DECL|field|bigArrays
specifier|private
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|field|isFinalReduce
specifier|private
specifier|final
name|boolean
name|isFinalReduce
decl_stmt|;
DECL|method|ReduceContext
specifier|public
name|ReduceContext
parameter_list|(
name|BigArrays
name|bigArrays
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|boolean
name|isFinalReduce
parameter_list|)
block|{
name|this
operator|.
name|bigArrays
operator|=
name|bigArrays
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
name|this
operator|.
name|isFinalReduce
operator|=
name|isFinalReduce
expr_stmt|;
block|}
comment|/**          * Returns<code>true</code> iff the current reduce phase is the final reduce phase. This indicates if operations like          * pipeline aggregations should be applied or if specific features like<tt>minDocCount</tt> should be taken into account.          * Operations that are potentially loosing information can only be applied during the final reduce phase.          */
DECL|method|isFinalReduce
specifier|public
name|boolean
name|isFinalReduce
parameter_list|()
block|{
return|return
name|isFinalReduce
return|;
block|}
DECL|method|bigArrays
specifier|public
name|BigArrays
name|bigArrays
parameter_list|()
block|{
return|return
name|bigArrays
return|;
block|}
DECL|method|scriptService
specifier|public
name|ScriptService
name|scriptService
parameter_list|()
block|{
return|return
name|scriptService
return|;
block|}
block|}
DECL|field|name
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|metaData
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
decl_stmt|;
DECL|field|pipelineAggregators
specifier|private
specifier|final
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
decl_stmt|;
comment|/**      * Constructs an get with a given name.      *      * @param name The name of the get.      */
DECL|method|InternalAggregation
specifier|protected
name|InternalAggregation
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|pipelineAggregators
operator|=
name|pipelineAggregators
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|InternalAggregation
specifier|protected
name|InternalAggregation
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|metaData
operator|=
name|in
operator|.
name|readMap
argument_list|()
expr_stmt|;
name|pipelineAggregators
operator|=
name|in
operator|.
name|readNamedWriteableList
argument_list|(
name|PipelineAggregator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
specifier|final
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeNamedWriteableList
argument_list|(
name|pipelineAggregators
argument_list|)
expr_stmt|;
name|doWriteTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doWriteTo
specifier|protected
specifier|abstract
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Reduces the given aggregations to a single one and returns it. In<b>most</b> cases, the assumption will be the all given      * aggregations are of the same type (the same type as this aggregation). For best efficiency, when implementing,      * try reusing an existing instance (typically the first in the given list) to save on redundant object      * construction.      */
DECL|method|reduce
specifier|public
specifier|final
name|InternalAggregation
name|reduce
parameter_list|(
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
name|InternalAggregation
name|aggResult
init|=
name|doReduce
argument_list|(
name|aggregations
argument_list|,
name|reduceContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|reduceContext
operator|.
name|isFinalReduce
argument_list|()
condition|)
block|{
for|for
control|(
name|PipelineAggregator
name|pipelineAggregator
range|:
name|pipelineAggregators
control|)
block|{
name|aggResult
operator|=
name|pipelineAggregator
operator|.
name|reduce
argument_list|(
name|aggResult
argument_list|,
name|reduceContext
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aggResult
return|;
block|}
DECL|method|doReduce
specifier|public
specifier|abstract
name|InternalAggregation
name|doReduce
parameter_list|(
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
function_decl|;
comment|/**      * Get the value of specified path in the aggregation.      *      * @param path      *            the path to the property in the aggregation tree      * @return the value of the property      */
DECL|method|getProperty
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|AggregationPath
name|aggPath
init|=
name|AggregationPath
operator|.
name|parse
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|getProperty
argument_list|(
name|aggPath
operator|.
name|getPathElementsAsStringList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getProperty
specifier|public
specifier|abstract
name|Object
name|getProperty
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|path
parameter_list|)
function_decl|;
comment|/**      * Read a size under the assumption that a value of 0 means unlimited.      */
DECL|method|readSize
specifier|protected
specifier|static
name|int
name|readSize
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
return|return
name|size
operator|==
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|size
return|;
block|}
comment|/**      * Write a size under the assumption that a value of 0 means unlimited.      */
DECL|method|writeSize
specifier|protected
specifier|static
name|void
name|writeSize
parameter_list|(
name|int
name|size
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|size
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|size
operator|=
literal|0
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetaData
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getMetaData
parameter_list|()
block|{
return|return
name|metaData
return|;
block|}
DECL|method|pipelineAggregators
specifier|public
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|()
block|{
return|return
name|pipelineAggregators
return|;
block|}
comment|/**      * Returns a string representing the type of the aggregation. This type is added to      * the aggregation name in the response, so that it can later be used by REST clients      * to determine the internal type of the aggregation.      */
DECL|method|getType
specifier|protected
name|String
name|getType
parameter_list|()
block|{
return|return
name|getWriteableName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
specifier|final
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|params
operator|.
name|paramAsBoolean
argument_list|(
name|RestSearchAction
operator|.
name|TYPED_KEYS_PARAM
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// Concatenates the type and the name of the aggregation (ex: top_hits#foo)
name|builder
operator|.
name|startObject
argument_list|(
name|String
operator|.
name|join
argument_list|(
name|TYPED_KEYS_DELIMITER
argument_list|,
name|getType
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|metaData
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|CommonFields
operator|.
name|META
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|this
operator|.
name|metaData
argument_list|)
expr_stmt|;
block|}
name|doXContentBody
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|doXContentBody
specifier|public
specifier|abstract
name|XContentBuilder
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|metaData
argument_list|,
name|pipelineAggregators
argument_list|,
name|doHashCode
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Opportunity for subclasses to the {@link #hashCode()} for this      * class.      **/
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|InternalAggregation
name|other
init|=
operator|(
name|InternalAggregation
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|other
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|pipelineAggregators
argument_list|,
name|other
operator|.
name|pipelineAggregators
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|metaData
argument_list|,
name|other
operator|.
name|metaData
argument_list|)
operator|&&
name|doEquals
argument_list|(
name|obj
argument_list|)
return|;
block|}
comment|// norelease: make this abstract when all InternalAggregations implement this method
comment|/**      * Opportunity for subclasses to add criteria to the {@link #equals(Object)}      * method for this class.      *      * This method can safely cast<code>obj</code> to the subclass since the      * {@link #equals(Object)} method checks that<code>obj</code> is the same      * class as<code>this</code>      */
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|this
operator|==
name|obj
return|;
block|}
comment|/**      * Common xcontent fields that are shared among addAggregation      */
DECL|class|CommonFields
specifier|public
specifier|static
specifier|final
class|class
name|CommonFields
extends|extends
name|ParseField
operator|.
name|CommonFields
block|{
DECL|field|META
specifier|public
specifier|static
specifier|final
name|ParseField
name|META
init|=
operator|new
name|ParseField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
DECL|field|BUCKETS
specifier|public
specifier|static
specifier|final
name|ParseField
name|BUCKETS
init|=
operator|new
name|ParseField
argument_list|(
literal|"buckets"
argument_list|)
decl_stmt|;
DECL|field|VALUE
specifier|public
specifier|static
specifier|final
name|ParseField
name|VALUE
init|=
operator|new
name|ParseField
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
DECL|field|VALUES
specifier|public
specifier|static
specifier|final
name|ParseField
name|VALUES
init|=
operator|new
name|ParseField
argument_list|(
literal|"values"
argument_list|)
decl_stmt|;
DECL|field|VALUE_AS_STRING
specifier|public
specifier|static
specifier|final
name|ParseField
name|VALUE_AS_STRING
init|=
operator|new
name|ParseField
argument_list|(
literal|"value_as_string"
argument_list|)
decl_stmt|;
DECL|field|DOC_COUNT
specifier|public
specifier|static
specifier|final
name|ParseField
name|DOC_COUNT
init|=
operator|new
name|ParseField
argument_list|(
literal|"doc_count"
argument_list|)
decl_stmt|;
DECL|field|KEY
specifier|public
specifier|static
specifier|final
name|ParseField
name|KEY
init|=
operator|new
name|ParseField
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
DECL|field|KEY_AS_STRING
specifier|public
specifier|static
specifier|final
name|ParseField
name|KEY_AS_STRING
init|=
operator|new
name|ParseField
argument_list|(
literal|"key_as_string"
argument_list|)
decl_stmt|;
DECL|field|FROM
specifier|public
specifier|static
specifier|final
name|ParseField
name|FROM
init|=
operator|new
name|ParseField
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
DECL|field|FROM_AS_STRING
specifier|public
specifier|static
specifier|final
name|ParseField
name|FROM_AS_STRING
init|=
operator|new
name|ParseField
argument_list|(
literal|"from_as_string"
argument_list|)
decl_stmt|;
DECL|field|TO
specifier|public
specifier|static
specifier|final
name|ParseField
name|TO
init|=
operator|new
name|ParseField
argument_list|(
literal|"to"
argument_list|)
decl_stmt|;
DECL|field|TO_AS_STRING
specifier|public
specifier|static
specifier|final
name|ParseField
name|TO_AS_STRING
init|=
operator|new
name|ParseField
argument_list|(
literal|"to_as_string"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

