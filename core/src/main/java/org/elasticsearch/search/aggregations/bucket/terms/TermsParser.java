begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|BucketUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsParametersParser
operator|.
name|OrderElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TermsParser
specifier|public
class|class
name|TermsParser
implements|implements
name|Aggregator
operator|.
name|Parser
block|{
annotation|@
name|Override
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|StringTerms
operator|.
name|TYPE
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|AggregatorFactory
name|parse
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|TermsParametersParser
name|aggParser
init|=
operator|new
name|TermsParametersParser
argument_list|()
decl_stmt|;
name|ValuesSourceParser
name|vsParser
init|=
name|ValuesSourceParser
operator|.
name|any
argument_list|(
name|aggregationName
argument_list|,
name|StringTerms
operator|.
name|TYPE
argument_list|,
name|context
argument_list|)
operator|.
name|scriptable
argument_list|(
literal|true
argument_list|)
operator|.
name|formattable
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IncludeExclude
operator|.
name|Parser
name|incExcParser
init|=
operator|new
name|IncludeExclude
operator|.
name|Parser
argument_list|()
decl_stmt|;
name|aggParser
operator|.
name|parse
argument_list|(
name|aggregationName
argument_list|,
name|parser
argument_list|,
name|context
argument_list|,
name|vsParser
argument_list|,
name|incExcParser
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrderElement
argument_list|>
name|orderElements
init|=
name|aggParser
operator|.
name|getOrderElements
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Terms
operator|.
name|Order
argument_list|>
name|orders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|orderElements
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OrderElement
name|orderElement
range|:
name|orderElements
control|)
block|{
name|orders
operator|.
name|add
argument_list|(
name|resolveOrder
argument_list|(
name|orderElement
operator|.
name|key
argument_list|()
argument_list|,
name|orderElement
operator|.
name|asc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Terms
operator|.
name|Order
name|order
decl_stmt|;
if|if
condition|(
name|orders
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|(
name|orders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|InternalOrder
operator|.
name|TERM_ASC
operator|||
name|orders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|InternalOrder
operator|.
name|TERM_DESC
operator|)
condition|)
block|{
comment|// If order is only terms order then we don't need compound ordering
name|order
operator|=
name|orders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for all other cases we need compound order so term order asc can be added to make the order deterministic
name|order
operator|=
name|Order
operator|.
name|compound
argument_list|(
name|orders
argument_list|)
expr_stmt|;
block|}
name|TermsAggregator
operator|.
name|BucketCountThresholds
name|bucketCountThresholds
init|=
name|aggParser
operator|.
name|getBucketCountThresholds
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|order
operator|==
name|InternalOrder
operator|.
name|TERM_ASC
operator|||
name|order
operator|==
name|InternalOrder
operator|.
name|TERM_DESC
operator|)
operator|&&
name|bucketCountThresholds
operator|.
name|getShardSize
argument_list|()
operator|==
name|aggParser
operator|.
name|getDefaultBucketCountThresholds
argument_list|()
operator|.
name|getShardSize
argument_list|()
condition|)
block|{
comment|// The user has not made a shardSize selection. Use default heuristic to avoid any wrong-ranking caused by distributed counting
name|bucketCountThresholds
operator|.
name|setShardSize
argument_list|(
name|BucketUtils
operator|.
name|suggestShardSideQueueSize
argument_list|(
name|bucketCountThresholds
operator|.
name|getRequiredSize
argument_list|()
argument_list|,
name|context
operator|.
name|numberOfShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bucketCountThresholds
operator|.
name|ensureValidity
argument_list|()
expr_stmt|;
return|return
operator|new
name|TermsAggregatorFactory
argument_list|(
name|aggregationName
argument_list|,
name|vsParser
operator|.
name|input
argument_list|()
argument_list|,
name|order
argument_list|,
name|bucketCountThresholds
argument_list|,
name|aggParser
operator|.
name|getIncludeExclude
argument_list|()
argument_list|,
name|aggParser
operator|.
name|getExecutionHint
argument_list|()
argument_list|,
name|aggParser
operator|.
name|getCollectionMode
argument_list|()
argument_list|,
name|aggParser
operator|.
name|showTermDocCountError
argument_list|()
argument_list|)
return|;
block|}
DECL|method|resolveOrder
specifier|static
name|Terms
operator|.
name|Order
name|resolveOrder
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
if|if
condition|(
literal|"_term"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|Order
operator|.
name|term
argument_list|(
name|asc
argument_list|)
return|;
block|}
if|if
condition|(
literal|"_count"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|Order
operator|.
name|count
argument_list|(
name|asc
argument_list|)
return|;
block|}
return|return
name|Order
operator|.
name|aggregation
argument_list|(
name|key
argument_list|,
name|asc
argument_list|)
return|;
block|}
comment|// NORELEASE implement this method when refactoring this aggregation
annotation|@
name|Override
DECL|method|getFactoryPrototype
specifier|public
name|AggregatorFactory
name|getFactoryPrototype
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

