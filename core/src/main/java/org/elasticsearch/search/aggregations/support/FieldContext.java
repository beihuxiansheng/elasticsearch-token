begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_comment
comment|/**  * Used by all field data based aggregators. This determine the context of the field data the aggregators are operating  * in. I holds both the field names and the index field datas that are associated with them.  */
end_comment

begin_class
DECL|class|FieldContext
specifier|public
class|class
name|FieldContext
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|indexFieldData
specifier|private
specifier|final
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
decl_stmt|;
DECL|field|fieldType
specifier|private
specifier|final
name|MappedFieldType
name|fieldType
decl_stmt|;
comment|/**      * Constructs a field data context for the given field and its index field data      *      * @param field             The name of the field      * @param indexFieldData    The index field data of the field      */
DECL|method|FieldContext
specifier|public
name|FieldContext
parameter_list|(
name|String
name|field
parameter_list|,
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
name|this
operator|.
name|fieldType
operator|=
name|fieldType
expr_stmt|;
block|}
DECL|method|field
specifier|public
name|String
name|field
parameter_list|()
block|{
return|return
name|field
return|;
block|}
comment|/**      * @return The index field datas in this context      */
DECL|method|indexFieldData
specifier|public
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
parameter_list|()
block|{
return|return
name|indexFieldData
return|;
block|}
DECL|method|fieldType
specifier|public
name|MappedFieldType
name|fieldType
parameter_list|()
block|{
return|return
name|fieldType
return|;
block|}
block|}
end_class

end_unit

