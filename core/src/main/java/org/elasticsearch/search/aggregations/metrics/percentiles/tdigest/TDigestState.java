begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.percentiles.tdigest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
package|;
end_package

begin_import
import|import
name|com
operator|.
name|tdunning
operator|.
name|math
operator|.
name|stats
operator|.
name|AVLTreeDigest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|tdunning
operator|.
name|math
operator|.
name|stats
operator|.
name|Centroid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Extension of {@link com.tdunning.math.stats.TDigest} with custom serialization.  */
end_comment

begin_class
DECL|class|TDigestState
specifier|public
class|class
name|TDigestState
extends|extends
name|AVLTreeDigest
block|{
DECL|field|compression
specifier|private
specifier|final
name|double
name|compression
decl_stmt|;
DECL|method|TDigestState
specifier|public
name|TDigestState
parameter_list|(
name|double
name|compression
parameter_list|)
block|{
name|super
argument_list|(
name|compression
argument_list|)
expr_stmt|;
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compression
specifier|public
name|double
name|compression
parameter_list|()
block|{
return|return
name|compression
return|;
block|}
DECL|method|write
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|TDigestState
name|state
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeDouble
argument_list|(
name|state
operator|.
name|compression
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|state
operator|.
name|centroidCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Centroid
name|centroid
range|:
name|state
operator|.
name|centroids
argument_list|()
control|)
block|{
name|out
operator|.
name|writeDouble
argument_list|(
name|centroid
operator|.
name|mean
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|centroid
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|read
specifier|public
specifier|static
name|TDigestState
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|compression
init|=
name|in
operator|.
name|readDouble
argument_list|()
decl_stmt|;
name|TDigestState
name|state
init|=
operator|new
name|TDigestState
argument_list|(
name|compression
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|state
operator|.
name|add
argument_list|(
name|in
operator|.
name|readDouble
argument_list|()
argument_list|,
name|in
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|obj
operator|instanceof
name|TDigestState
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TDigestState
name|that
init|=
operator|(
name|TDigestState
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|compression
operator|!=
name|that
operator|.
name|compression
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterator
argument_list|<
name|?
extends|extends
name|Centroid
argument_list|>
name|thisCentroids
init|=
name|centroids
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Centroid
argument_list|>
name|thatCentroids
init|=
name|that
operator|.
name|centroids
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|thisCentroids
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|thatCentroids
operator|.
name|hasNext
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Centroid
name|thisNext
init|=
name|thisCentroids
operator|.
name|next
argument_list|()
decl_stmt|;
name|Centroid
name|thatNext
init|=
name|thatCentroids
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|thisNext
operator|.
name|mean
argument_list|()
operator|!=
name|thatNext
operator|.
name|mean
argument_list|()
operator|||
name|thisNext
operator|.
name|count
argument_list|()
operator|!=
name|thatNext
operator|.
name|count
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|thatCentroids
operator|.
name|hasNext
argument_list|()
operator|==
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|Double
operator|.
name|hashCode
argument_list|(
name|compression
argument_list|)
expr_stmt|;
for|for
control|(
name|Centroid
name|centroid
range|:
name|centroids
argument_list|()
control|)
block|{
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|Double
operator|.
name|hashCode
argument_list|(
name|centroid
operator|.
name|mean
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|centroid
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
block|}
end_class

end_unit

