begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.percentiles
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|DoubleArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AbstractValuesSourceParser
operator|.
name|NumericValuesSourceParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
operator|.
name|Numeric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceAggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AbstractPercentilesParser
specifier|public
specifier|abstract
class|class
name|AbstractPercentilesParser
extends|extends
name|NumericValuesSourceParser
block|{
DECL|field|KEYED_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|KEYED_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"keyed"
argument_list|)
decl_stmt|;
DECL|field|METHOD_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|METHOD_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"method"
argument_list|)
decl_stmt|;
DECL|field|COMPRESSION_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|COMPRESSION_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"compression"
argument_list|)
decl_stmt|;
DECL|field|NUMBER_SIGNIFICANT_DIGITS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|NUMBER_SIGNIFICANT_DIGITS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"number_of_significant_value_digits"
argument_list|)
decl_stmt|;
DECL|field|formattable
specifier|private
name|boolean
name|formattable
decl_stmt|;
DECL|method|AbstractPercentilesParser
specifier|public
name|AbstractPercentilesParser
parameter_list|(
name|boolean
name|formattable
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|,
name|formattable
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|token
specifier|protected
name|boolean
name|token
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|String
name|currentFieldName
parameter_list|,
name|Token
name|token
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|,
name|Map
argument_list|<
name|ParseField
argument_list|,
name|Object
argument_list|>
name|otherOptions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|keysField
argument_list|()
argument_list|)
condition|)
block|{
name|DoubleArrayList
name|values
init|=
operator|new
name|DoubleArrayList
argument_list|(
literal|10
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|double
name|value
init|=
name|parser
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|double
index|[]
name|keys
init|=
name|values
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|otherOptions
operator|.
name|put
argument_list|(
name|keysField
argument_list|()
argument_list|,
name|keys
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_BOOLEAN
condition|)
block|{
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|KEYED_FIELD
argument_list|)
condition|)
block|{
name|boolean
name|keyed
init|=
name|parser
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|otherOptions
operator|.
name|put
argument_list|(
name|KEYED_FIELD
argument_list|,
name|keyed
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|PercentilesMethod
name|method
init|=
name|PercentilesMethod
operator|.
name|resolveFromName
argument_list|(
name|currentFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|otherOptions
operator|.
name|put
argument_list|(
name|METHOD_FIELD
argument_list|,
name|method
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|TDIGEST
case|:
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|COMPRESSION_FIELD
argument_list|)
condition|)
block|{
name|double
name|compression
init|=
name|parser
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|otherOptions
operator|.
name|put
argument_list|(
name|COMPRESSION_FIELD
argument_list|,
name|compression
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
break|break;
case|case
name|HDR
case|:
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|NUMBER_SIGNIFICANT_DIGITS_FIELD
argument_list|)
condition|)
block|{
name|int
name|numberOfSignificantValueDigits
init|=
name|parser
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|otherOptions
operator|.
name|put
argument_list|(
name|NUMBER_SIGNIFICANT_DIGITS_FIELD
argument_list|,
name|numberOfSignificantValueDigits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
break|break;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|createFactory
specifier|protected
name|ValuesSourceAggregatorFactory
argument_list|<
name|Numeric
argument_list|,
name|?
argument_list|>
name|createFactory
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|ValuesSourceType
name|valuesSourceType
parameter_list|,
name|ValueType
name|targetValueType
parameter_list|,
name|Map
argument_list|<
name|ParseField
argument_list|,
name|Object
argument_list|>
name|otherOptions
parameter_list|)
block|{
name|PercentilesMethod
name|method
init|=
operator|(
name|PercentilesMethod
operator|)
name|otherOptions
operator|.
name|getOrDefault
argument_list|(
name|METHOD_FIELD
argument_list|,
name|PercentilesMethod
operator|.
name|TDIGEST
argument_list|)
decl_stmt|;
name|double
index|[]
name|cdfValues
init|=
operator|(
name|double
index|[]
operator|)
name|otherOptions
operator|.
name|get
argument_list|(
name|keysField
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|compression
init|=
operator|(
name|Double
operator|)
name|otherOptions
operator|.
name|get
argument_list|(
name|COMPRESSION_FIELD
argument_list|)
decl_stmt|;
name|Integer
name|numberOfSignificantValueDigits
init|=
operator|(
name|Integer
operator|)
name|otherOptions
operator|.
name|get
argument_list|(
name|NUMBER_SIGNIFICANT_DIGITS_FIELD
argument_list|)
decl_stmt|;
name|Boolean
name|keyed
init|=
operator|(
name|Boolean
operator|)
name|otherOptions
operator|.
name|get
argument_list|(
name|KEYED_FIELD
argument_list|)
decl_stmt|;
return|return
name|buildFactory
argument_list|(
name|aggregationName
argument_list|,
name|cdfValues
argument_list|,
name|method
argument_list|,
name|compression
argument_list|,
name|numberOfSignificantValueDigits
argument_list|,
name|keyed
argument_list|)
return|;
block|}
DECL|method|buildFactory
specifier|protected
specifier|abstract
name|ValuesSourceAggregatorFactory
argument_list|<
name|Numeric
argument_list|,
name|?
argument_list|>
name|buildFactory
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|double
index|[]
name|cdfValues
parameter_list|,
name|PercentilesMethod
name|method
parameter_list|,
name|Double
name|compression
parameter_list|,
name|Integer
name|numberOfSignificantValueDigits
parameter_list|,
name|Boolean
name|keyed
parameter_list|)
function_decl|;
DECL|method|keysField
specifier|protected
specifier|abstract
name|ParseField
name|keysField
parameter_list|()
function_decl|;
block|}
end_class

end_unit

