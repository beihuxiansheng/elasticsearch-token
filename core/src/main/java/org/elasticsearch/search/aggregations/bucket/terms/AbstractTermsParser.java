begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
operator|.
name|SubAggCollectionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsAggregator
operator|.
name|BucketCountThresholds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AbstractValuesSourceParser
operator|.
name|AnyValuesSourceParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AbstractTermsParser
specifier|public
specifier|abstract
class|class
name|AbstractTermsParser
extends|extends
name|AnyValuesSourceParser
block|{
DECL|field|EXECUTION_HINT_FIELD_NAME
specifier|public
specifier|static
specifier|final
name|ParseField
name|EXECUTION_HINT_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"execution_hint"
argument_list|)
decl_stmt|;
DECL|field|SHARD_SIZE_FIELD_NAME
specifier|public
specifier|static
specifier|final
name|ParseField
name|SHARD_SIZE_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"shard_size"
argument_list|)
decl_stmt|;
DECL|field|MIN_DOC_COUNT_FIELD_NAME
specifier|public
specifier|static
specifier|final
name|ParseField
name|MIN_DOC_COUNT_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_doc_count"
argument_list|)
decl_stmt|;
DECL|field|SHARD_MIN_DOC_COUNT_FIELD_NAME
specifier|public
specifier|static
specifier|final
name|ParseField
name|SHARD_MIN_DOC_COUNT_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"shard_min_doc_count"
argument_list|)
decl_stmt|;
DECL|field|REQUIRED_SIZE_FIELD_NAME
specifier|public
specifier|static
specifier|final
name|ParseField
name|REQUIRED_SIZE_FIELD_NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
DECL|field|incExcParser
specifier|public
name|IncludeExclude
operator|.
name|Parser
name|incExcParser
init|=
operator|new
name|IncludeExclude
operator|.
name|Parser
argument_list|()
decl_stmt|;
DECL|method|AbstractTermsParser
specifier|protected
name|AbstractTermsParser
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createFactory
specifier|protected
specifier|final
name|ValuesSourceAggregationBuilder
argument_list|<
name|ValuesSource
argument_list|,
name|?
argument_list|>
name|createFactory
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|ValuesSourceType
name|valuesSourceType
parameter_list|,
name|ValueType
name|targetValueType
parameter_list|,
name|Map
argument_list|<
name|ParseField
argument_list|,
name|Object
argument_list|>
name|otherOptions
parameter_list|)
block|{
name|BucketCountThresholds
name|bucketCountThresholds
init|=
name|getDefaultBucketCountThresholds
argument_list|()
decl_stmt|;
name|Integer
name|requiredSize
init|=
operator|(
name|Integer
operator|)
name|otherOptions
operator|.
name|get
argument_list|(
name|REQUIRED_SIZE_FIELD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredSize
operator|!=
literal|null
operator|&&
name|requiredSize
operator|!=
operator|-
literal|1
condition|)
block|{
name|bucketCountThresholds
operator|.
name|setRequiredSize
argument_list|(
name|requiredSize
argument_list|)
expr_stmt|;
block|}
name|Integer
name|shardSize
init|=
operator|(
name|Integer
operator|)
name|otherOptions
operator|.
name|get
argument_list|(
name|SHARD_SIZE_FIELD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardSize
operator|!=
literal|null
operator|&&
name|shardSize
operator|!=
operator|-
literal|1
condition|)
block|{
name|bucketCountThresholds
operator|.
name|setShardSize
argument_list|(
name|shardSize
argument_list|)
expr_stmt|;
block|}
name|Long
name|minDocCount
init|=
operator|(
name|Long
operator|)
name|otherOptions
operator|.
name|get
argument_list|(
name|MIN_DOC_COUNT_FIELD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|minDocCount
operator|!=
literal|null
operator|&&
name|minDocCount
operator|!=
operator|-
literal|1
condition|)
block|{
name|bucketCountThresholds
operator|.
name|setMinDocCount
argument_list|(
name|minDocCount
argument_list|)
expr_stmt|;
block|}
name|Long
name|shardMinDocCount
init|=
operator|(
name|Long
operator|)
name|otherOptions
operator|.
name|get
argument_list|(
name|SHARD_MIN_DOC_COUNT_FIELD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardMinDocCount
operator|!=
literal|null
operator|&&
name|shardMinDocCount
operator|!=
operator|-
literal|1
condition|)
block|{
name|bucketCountThresholds
operator|.
name|setShardMinDocCount
argument_list|(
name|shardMinDocCount
argument_list|)
expr_stmt|;
block|}
name|SubAggCollectionMode
name|collectMode
init|=
operator|(
name|SubAggCollectionMode
operator|)
name|otherOptions
operator|.
name|get
argument_list|(
name|SubAggCollectionMode
operator|.
name|KEY
argument_list|)
decl_stmt|;
name|String
name|executionHint
init|=
operator|(
name|String
operator|)
name|otherOptions
operator|.
name|get
argument_list|(
name|EXECUTION_HINT_FIELD_NAME
argument_list|)
decl_stmt|;
name|IncludeExclude
name|incExc
init|=
name|incExcParser
operator|.
name|createIncludeExclude
argument_list|(
name|otherOptions
argument_list|)
decl_stmt|;
return|return
name|doCreateFactory
argument_list|(
name|aggregationName
argument_list|,
name|valuesSourceType
argument_list|,
name|targetValueType
argument_list|,
name|bucketCountThresholds
argument_list|,
name|collectMode
argument_list|,
name|executionHint
argument_list|,
name|incExc
argument_list|,
name|otherOptions
argument_list|)
return|;
block|}
DECL|method|doCreateFactory
specifier|protected
specifier|abstract
name|ValuesSourceAggregationBuilder
argument_list|<
name|ValuesSource
argument_list|,
name|?
argument_list|>
name|doCreateFactory
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|ValuesSourceType
name|valuesSourceType
parameter_list|,
name|ValueType
name|targetValueType
parameter_list|,
name|BucketCountThresholds
name|bucketCountThresholds
parameter_list|,
name|SubAggCollectionMode
name|collectMode
parameter_list|,
name|String
name|executionHint
parameter_list|,
name|IncludeExclude
name|incExc
parameter_list|,
name|Map
argument_list|<
name|ParseField
argument_list|,
name|Object
argument_list|>
name|otherOptions
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|token
specifier|protected
name|boolean
name|token
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|String
name|currentFieldName
parameter_list|,
name|Token
name|token
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|,
name|Map
argument_list|<
name|ParseField
argument_list|,
name|Object
argument_list|>
name|otherOptions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|incExcParser
operator|.
name|token
argument_list|(
name|currentFieldName
argument_list|,
name|token
argument_list|,
name|parser
argument_list|,
name|parseFieldMatcher
argument_list|,
name|otherOptions
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|EXECUTION_HINT_FIELD_NAME
argument_list|)
condition|)
block|{
name|otherOptions
operator|.
name|put
argument_list|(
name|EXECUTION_HINT_FIELD_NAME
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SubAggCollectionMode
operator|.
name|KEY
argument_list|)
condition|)
block|{
name|otherOptions
operator|.
name|put
argument_list|(
name|SubAggCollectionMode
operator|.
name|KEY
argument_list|,
name|SubAggCollectionMode
operator|.
name|parse
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|,
name|parseFieldMatcher
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|REQUIRED_SIZE_FIELD_NAME
argument_list|)
condition|)
block|{
name|otherOptions
operator|.
name|put
argument_list|(
name|REQUIRED_SIZE_FIELD_NAME
argument_list|,
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|parseSpecial
argument_list|(
name|aggregationName
argument_list|,
name|parser
argument_list|,
name|parseFieldMatcher
argument_list|,
name|token
argument_list|,
name|currentFieldName
argument_list|,
name|otherOptions
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|REQUIRED_SIZE_FIELD_NAME
argument_list|)
condition|)
block|{
name|otherOptions
operator|.
name|put
argument_list|(
name|REQUIRED_SIZE_FIELD_NAME
argument_list|,
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SHARD_SIZE_FIELD_NAME
argument_list|)
condition|)
block|{
name|otherOptions
operator|.
name|put
argument_list|(
name|SHARD_SIZE_FIELD_NAME
argument_list|,
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|MIN_DOC_COUNT_FIELD_NAME
argument_list|)
condition|)
block|{
name|otherOptions
operator|.
name|put
argument_list|(
name|MIN_DOC_COUNT_FIELD_NAME
argument_list|,
name|parser
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SHARD_MIN_DOC_COUNT_FIELD_NAME
argument_list|)
condition|)
block|{
name|otherOptions
operator|.
name|put
argument_list|(
name|SHARD_MIN_DOC_COUNT_FIELD_NAME
argument_list|,
name|parser
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|parseSpecial
argument_list|(
name|aggregationName
argument_list|,
name|parser
argument_list|,
name|parseFieldMatcher
argument_list|,
name|token
argument_list|,
name|currentFieldName
argument_list|,
name|otherOptions
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseSpecial
argument_list|(
name|aggregationName
argument_list|,
name|parser
argument_list|,
name|parseFieldMatcher
argument_list|,
name|token
argument_list|,
name|currentFieldName
argument_list|,
name|otherOptions
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|parseSpecial
specifier|public
specifier|abstract
name|boolean
name|parseSpecial
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|,
name|XContentParser
operator|.
name|Token
name|token
parameter_list|,
name|String
name|currentFieldName
parameter_list|,
name|Map
argument_list|<
name|ParseField
argument_list|,
name|Object
argument_list|>
name|otherOptions
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getDefaultBucketCountThresholds
specifier|protected
specifier|abstract
name|TermsAggregator
operator|.
name|BucketCountThresholds
name|getDefaultBucketCountThresholds
parameter_list|()
function_decl|;
block|}
end_class

end_unit

