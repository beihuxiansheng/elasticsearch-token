begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * An aggregation. Extends {@link ToXContent} as it makes it easier to print out its content.  */
end_comment

begin_interface
DECL|interface|Aggregation
specifier|public
interface|interface
name|Aggregation
extends|extends
name|ToXContent
block|{
comment|/**      * Delimiter used when prefixing aggregation names with their type      * using the typed_keys parameter      */
DECL|field|TYPED_KEYS_DELIMITER
name|String
name|TYPED_KEYS_DELIMITER
init|=
literal|"#"
decl_stmt|;
comment|/**      * @return The name of this aggregation.      */
DECL|method|getName
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**      * @return a string representing the type of the aggregation. This type is added to      * the aggregation name in the response, so that it can later be used by clients      * to determine type of the aggregation and parse it into the proper object.      */
DECL|method|getType
name|String
name|getType
parameter_list|()
function_decl|;
comment|/**      * Get the optional byte array metadata that was set on the aggregation      */
DECL|method|getMetaData
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getMetaData
parameter_list|()
function_decl|;
comment|/**      * Common xcontent fields that are shared among addAggregation      */
DECL|class|CommonFields
specifier|final
class|class
name|CommonFields
extends|extends
name|ParseField
operator|.
name|CommonFields
block|{
DECL|field|META
specifier|public
specifier|static
specifier|final
name|ParseField
name|META
init|=
operator|new
name|ParseField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
DECL|field|BUCKETS
specifier|public
specifier|static
specifier|final
name|ParseField
name|BUCKETS
init|=
operator|new
name|ParseField
argument_list|(
literal|"buckets"
argument_list|)
decl_stmt|;
DECL|field|VALUE
specifier|public
specifier|static
specifier|final
name|ParseField
name|VALUE
init|=
operator|new
name|ParseField
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
DECL|field|VALUES
specifier|public
specifier|static
specifier|final
name|ParseField
name|VALUES
init|=
operator|new
name|ParseField
argument_list|(
literal|"values"
argument_list|)
decl_stmt|;
DECL|field|VALUE_AS_STRING
specifier|public
specifier|static
specifier|final
name|ParseField
name|VALUE_AS_STRING
init|=
operator|new
name|ParseField
argument_list|(
literal|"value_as_string"
argument_list|)
decl_stmt|;
DECL|field|DOC_COUNT
specifier|public
specifier|static
specifier|final
name|ParseField
name|DOC_COUNT
init|=
operator|new
name|ParseField
argument_list|(
literal|"doc_count"
argument_list|)
decl_stmt|;
DECL|field|KEY
specifier|public
specifier|static
specifier|final
name|ParseField
name|KEY
init|=
operator|new
name|ParseField
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
DECL|field|KEY_AS_STRING
specifier|public
specifier|static
specifier|final
name|ParseField
name|KEY_AS_STRING
init|=
operator|new
name|ParseField
argument_list|(
literal|"key_as_string"
argument_list|)
decl_stmt|;
DECL|field|FROM
specifier|public
specifier|static
specifier|final
name|ParseField
name|FROM
init|=
operator|new
name|ParseField
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
DECL|field|FROM_AS_STRING
specifier|public
specifier|static
specifier|final
name|ParseField
name|FROM_AS_STRING
init|=
operator|new
name|ParseField
argument_list|(
literal|"from_as_string"
argument_list|)
decl_stmt|;
DECL|field|TO
specifier|public
specifier|static
specifier|final
name|ParseField
name|TO
init|=
operator|new
name|ParseField
argument_list|(
literal|"to"
argument_list|)
decl_stmt|;
DECL|field|TO_AS_STRING
specifier|public
specifier|static
specifier|final
name|ParseField
name|TO_AS_STRING
init|=
operator|new
name|ParseField
argument_list|(
literal|"to_as_string"
argument_list|)
decl_stmt|;
block|}
block|}
end_interface

end_unit

