begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|BitMixer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|LongHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|LongSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomAccessOrds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|ByteRunAutomaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Defines the include/exclude regular expression filtering for string terms aggregation. In this filtering logic,  * exclusion has precedence, where the {@code include} is evaluated first and then the {@code exclude}.  */
end_comment

begin_class
DECL|class|IncludeExclude
specifier|public
class|class
name|IncludeExclude
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|INCLUDE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|INCLUDE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"include"
argument_list|)
decl_stmt|;
DECL|field|EXCLUDE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|EXCLUDE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"exclude"
argument_list|)
decl_stmt|;
DECL|field|PATTERN_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PATTERN_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
DECL|field|PARTITION_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PARTITION_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"partition"
argument_list|)
decl_stmt|;
DECL|field|NUM_PARTITIONS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|NUM_PARTITIONS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"num_partitions"
argument_list|)
decl_stmt|;
comment|// Needed to add this seed for a deterministic term hashing policy
comment|// otherwise tests fail to get expected results and worse, shards
comment|// can disagree on which terms hash to the required partition.
DECL|field|HASH_PARTITIONING_SEED
specifier|private
specifier|static
specifier|final
name|int
name|HASH_PARTITIONING_SEED
init|=
literal|31
decl_stmt|;
comment|// for parsing purposes only
comment|// TODO: move all aggs to the same package so that this stuff could be pkg-private
DECL|method|merge
specifier|public
specifier|static
name|IncludeExclude
name|merge
parameter_list|(
name|IncludeExclude
name|include
parameter_list|,
name|IncludeExclude
name|exclude
parameter_list|)
block|{
if|if
condition|(
name|include
operator|==
literal|null
condition|)
block|{
return|return
name|exclude
return|;
block|}
if|if
condition|(
name|exclude
operator|==
literal|null
condition|)
block|{
return|return
name|include
return|;
block|}
if|if
condition|(
name|include
operator|.
name|isPartitionBased
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot specify any excludes when using a partition-based include"
argument_list|)
throw|;
block|}
name|String
name|includeMethod
init|=
name|include
operator|.
name|isRegexBased
argument_list|()
condition|?
literal|"regex"
else|:
literal|"set"
decl_stmt|;
name|String
name|excludeMethod
init|=
name|exclude
operator|.
name|isRegexBased
argument_list|()
condition|?
literal|"regex"
else|:
literal|"set"
decl_stmt|;
if|if
condition|(
name|includeMethod
operator|.
name|equals
argument_list|(
name|excludeMethod
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot mix a "
operator|+
name|includeMethod
operator|+
literal|"-based include with a "
operator|+
name|excludeMethod
operator|+
literal|"-based method"
argument_list|)
throw|;
block|}
if|if
condition|(
name|include
operator|.
name|isRegexBased
argument_list|()
condition|)
block|{
return|return
operator|new
name|IncludeExclude
argument_list|(
name|include
operator|.
name|include
argument_list|,
name|exclude
operator|.
name|exclude
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|IncludeExclude
argument_list|(
name|include
operator|.
name|includeValues
argument_list|,
name|exclude
operator|.
name|excludeValues
argument_list|)
return|;
block|}
block|}
DECL|method|parseInclude
specifier|public
specifier|static
name|IncludeExclude
name|parseInclude
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
return|return
operator|new
name|IncludeExclude
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
return|return
operator|new
name|IncludeExclude
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|parseArrayToSet
argument_list|(
name|parser
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|Integer
name|partition
init|=
literal|null
decl_stmt|,
name|numPartitions
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
comment|// This "include":{"pattern":"foo.*"} syntax is undocumented since 2.0
comment|// Regexes should be "include":"foo.*"
if|if
condition|(
name|PATTERN_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
return|return
operator|new
name|IncludeExclude
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|NUM_PARTITIONS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|numPartitions
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PARTITION_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|partition
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Unknown parameter in Include/Exclude clause: "
operator|+
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|partition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing ["
operator|+
name|PARTITION_FIELD
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] parameter for partition-based include"
argument_list|)
throw|;
block|}
if|if
condition|(
name|numPartitions
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing ["
operator|+
name|NUM_PARTITIONS_FIELD
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] parameter for partition-based include"
argument_list|)
throw|;
block|}
return|return
operator|new
name|IncludeExclude
argument_list|(
name|partition
argument_list|,
name|numPartitions
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized token for an include ["
operator|+
name|token
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseExclude
specifier|public
specifier|static
name|IncludeExclude
name|parseExclude
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
return|return
operator|new
name|IncludeExclude
argument_list|(
literal|null
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
return|return
operator|new
name|IncludeExclude
argument_list|(
literal|null
argument_list|,
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|parseArrayToSet
argument_list|(
name|parser
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized token for an exclude ["
operator|+
name|token
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|// The includeValue and excludeValue ByteRefs which are the result of the parsing
comment|// process are converted into a LongFilter when used on numeric fields
comment|// in the index.
DECL|class|LongFilter
specifier|public
specifier|abstract
specifier|static
class|class
name|LongFilter
block|{
DECL|method|accept
specifier|public
specifier|abstract
name|boolean
name|accept
parameter_list|(
name|long
name|value
parameter_list|)
function_decl|;
block|}
DECL|class|PartitionedLongFilter
specifier|public
class|class
name|PartitionedLongFilter
extends|extends
name|LongFilter
block|{
annotation|@
name|Override
DECL|method|accept
specifier|public
name|boolean
name|accept
parameter_list|(
name|long
name|value
parameter_list|)
block|{
comment|// hash the value to keep even distributions
specifier|final
name|long
name|hashCode
init|=
name|BitMixer
operator|.
name|mix64
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|Math
operator|.
name|floorMod
argument_list|(
name|hashCode
argument_list|,
name|incNumPartitions
argument_list|)
operator|==
name|incZeroBasedPartition
return|;
block|}
block|}
DECL|class|SetBackedLongFilter
specifier|public
specifier|static
class|class
name|SetBackedLongFilter
extends|extends
name|LongFilter
block|{
DECL|field|valids
specifier|private
name|LongSet
name|valids
decl_stmt|;
DECL|field|invalids
specifier|private
name|LongSet
name|invalids
decl_stmt|;
DECL|method|SetBackedLongFilter
specifier|private
name|SetBackedLongFilter
parameter_list|(
name|int
name|numValids
parameter_list|,
name|int
name|numInvalids
parameter_list|)
block|{
if|if
condition|(
name|numValids
operator|>
literal|0
condition|)
block|{
name|valids
operator|=
operator|new
name|LongHashSet
argument_list|(
name|numValids
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numInvalids
operator|>
literal|0
condition|)
block|{
name|invalids
operator|=
operator|new
name|LongHashSet
argument_list|(
name|numInvalids
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|accept
specifier|public
name|boolean
name|accept
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|valids
operator|==
literal|null
operator|)
operator|||
operator|(
name|valids
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|)
operator|)
operator|&&
operator|(
operator|(
name|invalids
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|invalids
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|)
operator|)
return|;
block|}
DECL|method|addAccept
specifier|private
name|void
name|addAccept
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|valids
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|addReject
specifier|private
name|void
name|addReject
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|invalids
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Only used for the 'map' execution mode (ie. scripts)
DECL|class|StringFilter
specifier|public
specifier|abstract
specifier|static
class|class
name|StringFilter
block|{
DECL|method|accept
specifier|public
specifier|abstract
name|boolean
name|accept
parameter_list|(
name|BytesRef
name|value
parameter_list|)
function_decl|;
block|}
DECL|class|PartitionedStringFilter
class|class
name|PartitionedStringFilter
extends|extends
name|StringFilter
block|{
annotation|@
name|Override
DECL|method|accept
specifier|public
name|boolean
name|accept
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
return|return
name|Math
operator|.
name|floorMod
argument_list|(
name|StringHelper
operator|.
name|murmurhash3_x86_32
argument_list|(
name|value
argument_list|,
name|HASH_PARTITIONING_SEED
argument_list|)
argument_list|,
name|incNumPartitions
argument_list|)
operator|==
name|incZeroBasedPartition
return|;
block|}
block|}
DECL|class|AutomatonBackedStringFilter
specifier|static
class|class
name|AutomatonBackedStringFilter
extends|extends
name|StringFilter
block|{
DECL|field|runAutomaton
specifier|private
specifier|final
name|ByteRunAutomaton
name|runAutomaton
decl_stmt|;
DECL|method|AutomatonBackedStringFilter
specifier|private
name|AutomatonBackedStringFilter
parameter_list|(
name|Automaton
name|automaton
parameter_list|)
block|{
name|this
operator|.
name|runAutomaton
operator|=
operator|new
name|ByteRunAutomaton
argument_list|(
name|automaton
argument_list|)
expr_stmt|;
block|}
comment|/**          * Returns whether the given value is accepted based on the {@code include}&amp; {@code exclude} patterns.          */
annotation|@
name|Override
DECL|method|accept
specifier|public
name|boolean
name|accept
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
return|return
name|runAutomaton
operator|.
name|run
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
return|;
block|}
block|}
DECL|class|TermListBackedStringFilter
specifier|static
class|class
name|TermListBackedStringFilter
extends|extends
name|StringFilter
block|{
DECL|field|valids
specifier|private
specifier|final
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|valids
decl_stmt|;
DECL|field|invalids
specifier|private
specifier|final
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|invalids
decl_stmt|;
DECL|method|TermListBackedStringFilter
specifier|public
name|TermListBackedStringFilter
parameter_list|(
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|includeValues
parameter_list|,
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|excludeValues
parameter_list|)
block|{
name|this
operator|.
name|valids
operator|=
name|includeValues
expr_stmt|;
name|this
operator|.
name|invalids
operator|=
name|excludeValues
expr_stmt|;
block|}
comment|/**          * Returns whether the given value is accepted based on the          * {@code include}&amp; {@code exclude} sets.          */
annotation|@
name|Override
DECL|method|accept
specifier|public
name|boolean
name|accept
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|valids
operator|==
literal|null
operator|)
operator|||
operator|(
name|valids
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|)
operator|)
operator|&&
operator|(
operator|(
name|invalids
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|invalids
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|)
operator|)
return|;
block|}
block|}
DECL|class|OrdinalsFilter
specifier|public
specifier|abstract
specifier|static
class|class
name|OrdinalsFilter
block|{
DECL|method|acceptedGlobalOrdinals
specifier|public
specifier|abstract
name|LongBitSet
name|acceptedGlobalOrdinals
parameter_list|(
name|RandomAccessOrds
name|globalOrdinals
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|PartitionedOrdinalsFilter
class|class
name|PartitionedOrdinalsFilter
extends|extends
name|OrdinalsFilter
block|{
annotation|@
name|Override
DECL|method|acceptedGlobalOrdinals
specifier|public
name|LongBitSet
name|acceptedGlobalOrdinals
parameter_list|(
name|RandomAccessOrds
name|globalOrdinals
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|numOrds
init|=
name|globalOrdinals
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
specifier|final
name|LongBitSet
name|acceptedGlobalOrdinals
init|=
operator|new
name|LongBitSet
argument_list|(
name|numOrds
argument_list|)
decl_stmt|;
specifier|final
name|TermsEnum
name|termEnum
init|=
name|globalOrdinals
operator|.
name|termsEnum
argument_list|()
decl_stmt|;
name|BytesRef
name|term
init|=
name|termEnum
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|term
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Math
operator|.
name|floorMod
argument_list|(
name|StringHelper
operator|.
name|murmurhash3_x86_32
argument_list|(
name|term
argument_list|,
name|HASH_PARTITIONING_SEED
argument_list|)
argument_list|,
name|incNumPartitions
argument_list|)
operator|==
name|incZeroBasedPartition
condition|)
block|{
name|acceptedGlobalOrdinals
operator|.
name|set
argument_list|(
name|termEnum
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|term
operator|=
name|termEnum
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|acceptedGlobalOrdinals
return|;
block|}
block|}
DECL|class|AutomatonBackedOrdinalsFilter
specifier|static
class|class
name|AutomatonBackedOrdinalsFilter
extends|extends
name|OrdinalsFilter
block|{
DECL|field|compiled
specifier|private
specifier|final
name|CompiledAutomaton
name|compiled
decl_stmt|;
DECL|method|AutomatonBackedOrdinalsFilter
specifier|private
name|AutomatonBackedOrdinalsFilter
parameter_list|(
name|Automaton
name|automaton
parameter_list|)
block|{
name|this
operator|.
name|compiled
operator|=
operator|new
name|CompiledAutomaton
argument_list|(
name|automaton
argument_list|)
expr_stmt|;
block|}
comment|/**          * Computes which global ordinals are accepted by this IncludeExclude instance.          *          */
annotation|@
name|Override
DECL|method|acceptedGlobalOrdinals
specifier|public
name|LongBitSet
name|acceptedGlobalOrdinals
parameter_list|(
name|RandomAccessOrds
name|globalOrdinals
parameter_list|)
throws|throws
name|IOException
block|{
name|LongBitSet
name|acceptedGlobalOrdinals
init|=
operator|new
name|LongBitSet
argument_list|(
name|globalOrdinals
operator|.
name|getValueCount
argument_list|()
argument_list|)
decl_stmt|;
name|TermsEnum
name|globalTermsEnum
decl_stmt|;
name|Terms
name|globalTerms
init|=
operator|new
name|DocValuesTerms
argument_list|(
name|globalOrdinals
argument_list|)
decl_stmt|;
comment|// TODO: specialize based on compiled.type: for ALL and prefixes (sinkState>= 0 ) we can avoid i/o and just set bits.
name|globalTermsEnum
operator|=
name|compiled
operator|.
name|getTermsEnum
argument_list|(
name|globalTerms
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|term
init|=
name|globalTermsEnum
operator|.
name|next
argument_list|()
init|;
name|term
operator|!=
literal|null
condition|;
name|term
operator|=
name|globalTermsEnum
operator|.
name|next
argument_list|()
control|)
block|{
name|acceptedGlobalOrdinals
operator|.
name|set
argument_list|(
name|globalTermsEnum
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|acceptedGlobalOrdinals
return|;
block|}
block|}
DECL|class|TermListBackedOrdinalsFilter
specifier|static
class|class
name|TermListBackedOrdinalsFilter
extends|extends
name|OrdinalsFilter
block|{
DECL|field|includeValues
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|includeValues
decl_stmt|;
DECL|field|excludeValues
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|excludeValues
decl_stmt|;
DECL|method|TermListBackedOrdinalsFilter
specifier|public
name|TermListBackedOrdinalsFilter
parameter_list|(
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|includeValues
parameter_list|,
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|excludeValues
parameter_list|)
block|{
name|this
operator|.
name|includeValues
operator|=
name|includeValues
expr_stmt|;
name|this
operator|.
name|excludeValues
operator|=
name|excludeValues
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acceptedGlobalOrdinals
specifier|public
name|LongBitSet
name|acceptedGlobalOrdinals
parameter_list|(
name|RandomAccessOrds
name|globalOrdinals
parameter_list|)
throws|throws
name|IOException
block|{
name|LongBitSet
name|acceptedGlobalOrdinals
init|=
operator|new
name|LongBitSet
argument_list|(
name|globalOrdinals
operator|.
name|getValueCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BytesRef
name|term
range|:
name|includeValues
control|)
block|{
name|long
name|ord
init|=
name|globalOrdinals
operator|.
name|lookupTerm
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>=
literal|0
condition|)
block|{
name|acceptedGlobalOrdinals
operator|.
name|set
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|acceptedGlobalOrdinals
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// default to all terms being acceptable
name|acceptedGlobalOrdinals
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|acceptedGlobalOrdinals
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BytesRef
name|term
range|:
name|excludeValues
control|)
block|{
name|long
name|ord
init|=
name|globalOrdinals
operator|.
name|lookupTerm
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>=
literal|0
condition|)
block|{
name|acceptedGlobalOrdinals
operator|.
name|clear
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|acceptedGlobalOrdinals
return|;
block|}
block|}
DECL|field|include
DECL|field|exclude
specifier|private
specifier|final
name|RegExp
name|include
decl_stmt|,
name|exclude
decl_stmt|;
DECL|field|includeValues
DECL|field|excludeValues
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|includeValues
decl_stmt|,
name|excludeValues
decl_stmt|;
DECL|field|incZeroBasedPartition
specifier|private
specifier|final
name|int
name|incZeroBasedPartition
decl_stmt|;
DECL|field|incNumPartitions
specifier|private
specifier|final
name|int
name|incNumPartitions
decl_stmt|;
comment|/**      * @param include   The regular expression pattern for the terms to be included      * @param exclude   The regular expression pattern for the terms to be excluded      */
DECL|method|IncludeExclude
specifier|public
name|IncludeExclude
parameter_list|(
name|RegExp
name|include
parameter_list|,
name|RegExp
name|exclude
parameter_list|)
block|{
if|if
condition|(
name|include
operator|==
literal|null
operator|&&
name|exclude
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|this
operator|.
name|include
operator|=
name|include
expr_stmt|;
name|this
operator|.
name|exclude
operator|=
name|exclude
expr_stmt|;
name|this
operator|.
name|includeValues
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|excludeValues
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|incZeroBasedPartition
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|incNumPartitions
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|IncludeExclude
specifier|public
name|IncludeExclude
parameter_list|(
name|String
name|include
parameter_list|,
name|String
name|exclude
parameter_list|)
block|{
name|this
argument_list|(
name|include
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|RegExp
argument_list|(
name|include
argument_list|)
argument_list|,
name|exclude
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|RegExp
argument_list|(
name|exclude
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param includeValues   The terms to be included      * @param excludeValues   The terms to be excluded      */
DECL|method|IncludeExclude
specifier|public
name|IncludeExclude
parameter_list|(
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|includeValues
parameter_list|,
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|excludeValues
parameter_list|)
block|{
if|if
condition|(
name|includeValues
operator|==
literal|null
operator|&&
name|excludeValues
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|this
operator|.
name|include
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|exclude
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|incZeroBasedPartition
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|incNumPartitions
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|includeValues
operator|=
name|includeValues
expr_stmt|;
name|this
operator|.
name|excludeValues
operator|=
name|excludeValues
expr_stmt|;
block|}
DECL|method|IncludeExclude
specifier|public
name|IncludeExclude
parameter_list|(
name|String
index|[]
name|includeValues
parameter_list|,
name|String
index|[]
name|excludeValues
parameter_list|)
block|{
name|this
argument_list|(
name|convertToBytesRefSet
argument_list|(
name|includeValues
argument_list|)
argument_list|,
name|convertToBytesRefSet
argument_list|(
name|excludeValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|IncludeExclude
specifier|public
name|IncludeExclude
parameter_list|(
name|double
index|[]
name|includeValues
parameter_list|,
name|double
index|[]
name|excludeValues
parameter_list|)
block|{
name|this
argument_list|(
name|convertToBytesRefSet
argument_list|(
name|includeValues
argument_list|)
argument_list|,
name|convertToBytesRefSet
argument_list|(
name|excludeValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|IncludeExclude
specifier|public
name|IncludeExclude
parameter_list|(
name|long
index|[]
name|includeValues
parameter_list|,
name|long
index|[]
name|excludeValues
parameter_list|)
block|{
name|this
argument_list|(
name|convertToBytesRefSet
argument_list|(
name|includeValues
argument_list|)
argument_list|,
name|convertToBytesRefSet
argument_list|(
name|excludeValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|IncludeExclude
specifier|public
name|IncludeExclude
parameter_list|(
name|int
name|partition
parameter_list|,
name|int
name|numPartitions
parameter_list|)
block|{
if|if
condition|(
name|partition
operator|<
literal|0
operator|||
name|partition
operator|>=
name|numPartitions
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Partition must be>=0 and< numPartition which is "
operator|+
name|numPartitions
argument_list|)
throw|;
block|}
name|this
operator|.
name|incZeroBasedPartition
operator|=
name|partition
expr_stmt|;
name|this
operator|.
name|incNumPartitions
operator|=
name|numPartitions
expr_stmt|;
name|this
operator|.
name|include
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|exclude
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|includeValues
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|excludeValues
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|IncludeExclude
specifier|public
name|IncludeExclude
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|includeValues
operator|=
literal|null
expr_stmt|;
name|excludeValues
operator|=
literal|null
expr_stmt|;
name|incZeroBasedPartition
operator|=
literal|0
expr_stmt|;
name|incNumPartitions
operator|=
literal|0
expr_stmt|;
name|String
name|includeString
init|=
name|in
operator|.
name|readOptionalString
argument_list|()
decl_stmt|;
name|include
operator|=
name|includeString
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|RegExp
argument_list|(
name|includeString
argument_list|)
expr_stmt|;
name|String
name|excludeString
init|=
name|in
operator|.
name|readOptionalString
argument_list|()
decl_stmt|;
name|exclude
operator|=
name|excludeString
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|RegExp
argument_list|(
name|excludeString
argument_list|)
expr_stmt|;
return|return;
block|}
name|include
operator|=
literal|null
expr_stmt|;
name|exclude
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|includeValues
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|includeValues
operator|.
name|add
argument_list|(
name|in
operator|.
name|readBytesRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|includeValues
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|excludeValues
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|excludeValues
operator|.
name|add
argument_list|(
name|in
operator|.
name|readBytesRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|excludeValues
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_2_0_UNRELEASED
argument_list|)
condition|)
block|{
name|incNumPartitions
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|incZeroBasedPartition
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|incNumPartitions
operator|=
literal|0
expr_stmt|;
name|incZeroBasedPartition
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|regexBased
init|=
name|isRegexBased
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|regexBased
argument_list|)
expr_stmt|;
if|if
condition|(
name|regexBased
condition|)
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|include
operator|==
literal|null
condition|?
literal|null
else|:
name|include
operator|.
name|getOriginalString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|exclude
operator|==
literal|null
condition|?
literal|null
else|:
name|exclude
operator|.
name|getOriginalString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|hasIncludes
init|=
name|includeValues
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasIncludes
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasIncludes
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|includeValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|value
range|:
name|includeValues
control|)
block|{
name|out
operator|.
name|writeBytesRef
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasExcludes
init|=
name|excludeValues
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasExcludes
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasExcludes
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|excludeValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|value
range|:
name|excludeValues
control|)
block|{
name|out
operator|.
name|writeBytesRef
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_2_0_UNRELEASED
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|incNumPartitions
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|incZeroBasedPartition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|convertToBytesRefSet
specifier|private
specifier|static
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|convertToBytesRefSet
parameter_list|(
name|String
index|[]
name|values
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|returnSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|returnSet
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|returnSet
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|returnSet
return|;
block|}
DECL|method|convertToBytesRefSet
specifier|private
specifier|static
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|convertToBytesRefSet
parameter_list|(
name|double
index|[]
name|values
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|returnSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|returnSet
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
control|)
block|{
name|returnSet
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|returnSet
return|;
block|}
DECL|method|convertToBytesRefSet
specifier|private
specifier|static
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|convertToBytesRefSet
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|returnSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|returnSet
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|value
range|:
name|values
control|)
block|{
name|returnSet
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|returnSet
return|;
block|}
comment|/**      * Terms adapter around doc values.      */
DECL|class|DocValuesTerms
specifier|private
specifier|static
class|class
name|DocValuesTerms
extends|extends
name|Terms
block|{
DECL|field|values
specifier|private
specifier|final
name|SortedSetDocValues
name|values
decl_stmt|;
DECL|method|DocValuesTerms
name|DocValuesTerms
parameter_list|(
name|SortedSetDocValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|values
operator|.
name|termsEnum
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getSumTotalTermFreq
specifier|public
name|long
name|getSumTotalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getSumDocFreq
specifier|public
name|long
name|getSumDocFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|int
name|getDocCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|hasFreqs
specifier|public
name|boolean
name|hasFreqs
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasOffsets
specifier|public
name|boolean
name|hasOffsets
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasPositions
specifier|public
name|boolean
name|hasPositions
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasPayloads
specifier|public
name|boolean
name|hasPayloads
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|parseArrayToSet
specifier|private
specifier|static
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|parseArrayToSet
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Missing start of array in include/exclude clause"
argument_list|)
throw|;
block|}
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
operator|!
name|parser
operator|.
name|currentToken
argument_list|()
operator|.
name|isValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Array elements in include/exclude clauses should be string values"
argument_list|)
throw|;
block|}
name|set
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
DECL|method|isRegexBased
specifier|public
name|boolean
name|isRegexBased
parameter_list|()
block|{
return|return
name|include
operator|!=
literal|null
operator|||
name|exclude
operator|!=
literal|null
return|;
block|}
DECL|method|isPartitionBased
specifier|public
name|boolean
name|isPartitionBased
parameter_list|()
block|{
return|return
name|incNumPartitions
operator|>
literal|0
return|;
block|}
DECL|method|toAutomaton
specifier|private
name|Automaton
name|toAutomaton
parameter_list|()
block|{
name|Automaton
name|a
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|include
operator|!=
literal|null
condition|)
block|{
name|a
operator|=
name|include
operator|.
name|toAutomaton
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeValues
operator|!=
literal|null
condition|)
block|{
name|a
operator|=
name|Automata
operator|.
name|makeStringUnion
argument_list|(
name|includeValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|a
operator|=
name|Automata
operator|.
name|makeAnyString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exclude
operator|!=
literal|null
condition|)
block|{
name|a
operator|=
name|Operations
operator|.
name|minus
argument_list|(
name|a
argument_list|,
name|exclude
operator|.
name|toAutomaton
argument_list|()
argument_list|,
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|excludeValues
operator|!=
literal|null
condition|)
block|{
name|a
operator|=
name|Operations
operator|.
name|minus
argument_list|(
name|a
argument_list|,
name|Automata
operator|.
name|makeStringUnion
argument_list|(
name|excludeValues
argument_list|)
argument_list|,
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
DECL|method|convertToStringFilter
specifier|public
name|StringFilter
name|convertToStringFilter
parameter_list|(
name|DocValueFormat
name|format
parameter_list|)
block|{
if|if
condition|(
name|isRegexBased
argument_list|()
condition|)
block|{
return|return
operator|new
name|AutomatonBackedStringFilter
argument_list|(
name|toAutomaton
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|isPartitionBased
argument_list|()
condition|)
block|{
return|return
operator|new
name|PartitionedStringFilter
argument_list|()
return|;
block|}
return|return
operator|new
name|TermListBackedStringFilter
argument_list|(
name|parseForDocValues
argument_list|(
name|includeValues
argument_list|,
name|format
argument_list|)
argument_list|,
name|parseForDocValues
argument_list|(
name|excludeValues
argument_list|,
name|format
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseForDocValues
specifier|private
specifier|static
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|parseForDocValues
parameter_list|(
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|endUserFormattedValues
parameter_list|,
name|DocValueFormat
name|format
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|result
init|=
name|endUserFormattedValues
decl_stmt|;
if|if
condition|(
name|endUserFormattedValues
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|format
operator|!=
name|DocValueFormat
operator|.
name|RAW
condition|)
block|{
name|result
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|BytesRef
name|formattedVal
range|:
name|endUserFormattedValues
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|format
operator|.
name|parseBytesRef
argument_list|(
name|formattedVal
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|convertToOrdinalsFilter
specifier|public
name|OrdinalsFilter
name|convertToOrdinalsFilter
parameter_list|(
name|DocValueFormat
name|format
parameter_list|)
block|{
if|if
condition|(
name|isRegexBased
argument_list|()
condition|)
block|{
return|return
operator|new
name|AutomatonBackedOrdinalsFilter
argument_list|(
name|toAutomaton
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|isPartitionBased
argument_list|()
condition|)
block|{
return|return
operator|new
name|PartitionedOrdinalsFilter
argument_list|()
return|;
block|}
return|return
operator|new
name|TermListBackedOrdinalsFilter
argument_list|(
name|parseForDocValues
argument_list|(
name|includeValues
argument_list|,
name|format
argument_list|)
argument_list|,
name|parseForDocValues
argument_list|(
name|excludeValues
argument_list|,
name|format
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convertToLongFilter
specifier|public
name|LongFilter
name|convertToLongFilter
parameter_list|(
name|DocValueFormat
name|format
parameter_list|)
block|{
if|if
condition|(
name|isPartitionBased
argument_list|()
condition|)
block|{
return|return
operator|new
name|PartitionedLongFilter
argument_list|()
return|;
block|}
name|int
name|numValids
init|=
name|includeValues
operator|==
literal|null
condition|?
literal|0
else|:
name|includeValues
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numInvalids
init|=
name|excludeValues
operator|==
literal|null
condition|?
literal|0
else|:
name|excludeValues
operator|.
name|size
argument_list|()
decl_stmt|;
name|SetBackedLongFilter
name|result
init|=
operator|new
name|SetBackedLongFilter
argument_list|(
name|numValids
argument_list|,
name|numInvalids
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BytesRef
name|val
range|:
name|includeValues
control|)
block|{
name|result
operator|.
name|addAccept
argument_list|(
name|format
operator|.
name|parseLong
argument_list|(
name|val
operator|.
name|utf8ToString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|excludeValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BytesRef
name|val
range|:
name|excludeValues
control|)
block|{
name|result
operator|.
name|addReject
argument_list|(
name|format
operator|.
name|parseLong
argument_list|(
name|val
operator|.
name|utf8ToString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|convertToDoubleFilter
specifier|public
name|LongFilter
name|convertToDoubleFilter
parameter_list|()
block|{
if|if
condition|(
name|isPartitionBased
argument_list|()
condition|)
block|{
return|return
operator|new
name|PartitionedLongFilter
argument_list|()
return|;
block|}
name|int
name|numValids
init|=
name|includeValues
operator|==
literal|null
condition|?
literal|0
else|:
name|includeValues
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numInvalids
init|=
name|excludeValues
operator|==
literal|null
condition|?
literal|0
else|:
name|excludeValues
operator|.
name|size
argument_list|()
decl_stmt|;
name|SetBackedLongFilter
name|result
init|=
operator|new
name|SetBackedLongFilter
argument_list|(
name|numValids
argument_list|,
name|numInvalids
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BytesRef
name|val
range|:
name|includeValues
control|)
block|{
name|double
name|dval
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|val
operator|.
name|utf8ToString
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|addAccept
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|dval
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|excludeValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BytesRef
name|val
range|:
name|excludeValues
control|)
block|{
name|double
name|dval
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|val
operator|.
name|utf8ToString
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|addReject
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|dval
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|include
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|INCLUDE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|include
operator|.
name|getOriginalString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeValues
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|INCLUDE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|value
range|:
name|includeValues
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|value
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isPartitionBased
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|INCLUDE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|PARTITION_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|incZeroBasedPartition
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|NUM_PARTITIONS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|incNumPartitions
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exclude
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|EXCLUDE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|exclude
operator|.
name|getOriginalString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|excludeValues
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|EXCLUDE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|value
range|:
name|excludeValues
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|value
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|include
operator|==
literal|null
condition|?
literal|null
else|:
name|include
operator|.
name|getOriginalString
argument_list|()
argument_list|,
name|exclude
operator|==
literal|null
condition|?
literal|null
else|:
name|exclude
operator|.
name|getOriginalString
argument_list|()
argument_list|,
name|includeValues
argument_list|,
name|excludeValues
argument_list|,
name|incZeroBasedPartition
argument_list|,
name|incNumPartitions
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IncludeExclude
name|other
init|=
operator|(
name|IncludeExclude
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|include
operator|==
literal|null
condition|?
literal|null
else|:
name|include
operator|.
name|getOriginalString
argument_list|()
argument_list|,
name|other
operator|.
name|include
operator|==
literal|null
condition|?
literal|null
else|:
name|other
operator|.
name|include
operator|.
name|getOriginalString
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|exclude
operator|==
literal|null
condition|?
literal|null
else|:
name|exclude
operator|.
name|getOriginalString
argument_list|()
argument_list|,
name|other
operator|.
name|exclude
operator|==
literal|null
condition|?
literal|null
else|:
name|other
operator|.
name|exclude
operator|.
name|getOriginalString
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|includeValues
argument_list|,
name|other
operator|.
name|includeValues
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|excludeValues
argument_list|,
name|other
operator|.
name|excludeValues
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|incZeroBasedPartition
argument_list|,
name|other
operator|.
name|incZeroBasedPartition
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|incNumPartitions
argument_list|,
name|other
operator|.
name|incNumPartitions
argument_list|)
return|;
block|}
block|}
end_class

end_unit

