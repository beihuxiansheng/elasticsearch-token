begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|DeDuplicatingTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|DuplicateByteSequenceSpotter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|TokenStreamFromTermVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BytesRefHash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|LeafBucketCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|LeafBucketCollectorBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|BucketsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|SignificanceHeuristic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsAggregator
operator|.
name|BucketCountThresholds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
operator|.
name|StringFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ContextIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SourceLookup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_class
DECL|class|SignificantTextAggregator
specifier|public
class|class
name|SignificantTextAggregator
extends|extends
name|BucketsAggregator
block|{
DECL|field|includeExclude
specifier|private
specifier|final
name|StringFilter
name|includeExclude
decl_stmt|;
DECL|field|bucketCountThresholds
specifier|protected
specifier|final
name|BucketCountThresholds
name|bucketCountThresholds
decl_stmt|;
DECL|field|numCollectedDocs
specifier|protected
name|long
name|numCollectedDocs
decl_stmt|;
DECL|field|bucketOrds
specifier|private
specifier|final
name|BytesRefHash
name|bucketOrds
decl_stmt|;
DECL|field|significanceHeuristic
specifier|private
specifier|final
name|SignificanceHeuristic
name|significanceHeuristic
decl_stmt|;
DECL|field|termsAggFactory
specifier|private
name|SignificantTextAggregatorFactory
name|termsAggFactory
decl_stmt|;
DECL|field|format
specifier|private
specifier|final
name|DocValueFormat
name|format
init|=
name|DocValueFormat
operator|.
name|RAW
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|sourceFieldNames
specifier|private
specifier|final
name|String
index|[]
name|sourceFieldNames
decl_stmt|;
DECL|field|dupSequenceSpotter
specifier|private
name|DuplicateByteSequenceSpotter
name|dupSequenceSpotter
init|=
literal|null
decl_stmt|;
DECL|field|lastTrieSize
specifier|private
name|long
name|lastTrieSize
decl_stmt|;
DECL|field|MEMORY_GROWTH_REPORTING_INTERVAL_BYTES
specifier|private
specifier|static
specifier|final
name|int
name|MEMORY_GROWTH_REPORTING_INTERVAL_BYTES
init|=
literal|5000
decl_stmt|;
DECL|method|SignificantTextAggregator
specifier|public
name|SignificantTextAggregator
parameter_list|(
name|String
name|name
parameter_list|,
name|AggregatorFactories
name|factories
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|BucketCountThresholds
name|bucketCountThresholds
parameter_list|,
name|IncludeExclude
operator|.
name|StringFilter
name|includeExclude
parameter_list|,
name|SignificanceHeuristic
name|significanceHeuristic
parameter_list|,
name|SignificantTextAggregatorFactory
name|termsAggFactory
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
index|[]
name|sourceFieldNames
parameter_list|,
name|boolean
name|filterDuplicateText
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|name
argument_list|,
name|factories
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucketCountThresholds
operator|=
name|bucketCountThresholds
expr_stmt|;
name|this
operator|.
name|includeExclude
operator|=
name|includeExclude
expr_stmt|;
name|this
operator|.
name|significanceHeuristic
operator|=
name|significanceHeuristic
expr_stmt|;
name|this
operator|.
name|termsAggFactory
operator|=
name|termsAggFactory
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|sourceFieldNames
operator|=
name|sourceFieldNames
expr_stmt|;
name|bucketOrds
operator|=
operator|new
name|BytesRefHash
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|bigArrays
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterDuplicateText
condition|)
block|{
name|dupSequenceSpotter
operator|=
operator|new
name|DuplicateByteSequenceSpotter
argument_list|()
expr_stmt|;
name|lastTrieSize
operator|=
name|dupSequenceSpotter
operator|.
name|getEstimatedSizeInBytes
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafBucketCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|,
specifier|final
name|LeafBucketCollector
name|sub
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesRefBuilder
name|previous
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
return|return
operator|new
name|LeafBucketCollectorBase
argument_list|(
name|sub
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|collectFromSource
argument_list|(
name|doc
argument_list|,
name|bucket
argument_list|,
name|fieldName
argument_list|,
name|sourceFieldNames
argument_list|)
expr_stmt|;
name|numCollectedDocs
operator|++
expr_stmt|;
if|if
condition|(
name|dupSequenceSpotter
operator|!=
literal|null
condition|)
block|{
name|dupSequenceSpotter
operator|.
name|startNewSequence
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processTokenStream
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|,
name|TokenStream
name|ts
parameter_list|,
name|String
name|fieldText
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dupSequenceSpotter
operator|!=
literal|null
condition|)
block|{
name|ts
operator|=
operator|new
name|DeDuplicatingTokenFilter
argument_list|(
name|ts
argument_list|,
name|dupSequenceSpotter
argument_list|)
expr_stmt|;
block|}
name|CharTermAttribute
name|termAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
comment|//Assume tokens will average 5 bytes in length to size number of tokens
name|BytesRefHash
name|inDocTerms
init|=
operator|new
name|BytesRefHash
argument_list|(
literal|1
operator|+
operator|(
name|fieldText
operator|.
name|length
argument_list|()
operator|/
literal|5
operator|)
argument_list|,
name|context
operator|.
name|bigArrays
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|dupSequenceSpotter
operator|!=
literal|null
condition|)
block|{
name|long
name|newTrieSize
init|=
name|dupSequenceSpotter
operator|.
name|getEstimatedSizeInBytes
argument_list|()
decl_stmt|;
name|long
name|growth
init|=
name|newTrieSize
operator|-
name|lastTrieSize
decl_stmt|;
comment|// Only update the circuitbreaker after
if|if
condition|(
name|growth
operator|>
name|MEMORY_GROWTH_REPORTING_INTERVAL_BYTES
condition|)
block|{
name|addRequestCircuitBreakerBytes
argument_list|(
name|growth
argument_list|)
expr_stmt|;
name|lastTrieSize
operator|=
name|newTrieSize
expr_stmt|;
block|}
block|}
name|previous
operator|.
name|clear
argument_list|()
expr_stmt|;
name|previous
operator|.
name|copyChars
argument_list|(
name|termAtt
argument_list|)
expr_stmt|;
name|BytesRef
name|bytes
init|=
name|previous
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|inDocTerms
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|includeExclude
operator|==
literal|null
operator|||
name|includeExclude
operator|.
name|accept
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
name|long
name|bucketOrdinal
init|=
name|bucketOrds
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketOrdinal
operator|<
literal|0
condition|)
block|{
comment|// already seen
name|bucketOrdinal
operator|=
operator|-
literal|1
operator|-
name|bucketOrdinal
expr_stmt|;
name|collectExistingBucket
argument_list|(
name|sub
argument_list|,
name|doc
argument_list|,
name|bucketOrdinal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collectBucket
argument_list|(
name|sub
argument_list|,
name|doc
argument_list|,
name|bucketOrdinal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|inDocTerms
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|collectFromSource
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|,
name|String
name|indexedFieldName
parameter_list|,
name|String
index|[]
name|sourceFieldNames
parameter_list|)
throws|throws
name|IOException
block|{
name|MappedFieldType
name|fieldType
init|=
name|context
operator|.
name|getQueryShardContext
argument_list|()
operator|.
name|fieldMapper
argument_list|(
name|indexedFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Aggregation ["
operator|+
name|name
operator|+
literal|"] cannot process field ["
operator|+
name|indexedFieldName
operator|+
literal|"] since it is not present"
argument_list|)
throw|;
block|}
name|SourceLookup
name|sourceLookup
init|=
name|context
operator|.
name|lookup
argument_list|()
operator|.
name|source
argument_list|()
decl_stmt|;
name|sourceLookup
operator|.
name|setSegmentAndDocument
argument_list|(
name|ctx
argument_list|,
name|doc
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|sourceField
range|:
name|sourceFieldNames
control|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|textsToHighlight
init|=
name|sourceLookup
operator|.
name|extractRawValues
argument_list|(
name|sourceField
argument_list|)
decl_stmt|;
name|textsToHighlight
operator|=
name|textsToHighlight
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|obj
lambda|->
block|{
if|if
condition|(
name|obj
operator|instanceof
name|BytesRef
condition|)
block|{
return|return
name|fieldType
operator|.
name|valueForDisplay
argument_list|(
name|obj
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|obj
return|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|Analyzer
name|analyzer
init|=
name|fieldType
operator|.
name|indexAnalyzer
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|fieldValue
range|:
name|textsToHighlight
control|)
block|{
name|String
name|fieldText
init|=
name|fieldValue
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TokenStream
name|ts
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|indexedFieldName
argument_list|,
name|fieldText
argument_list|)
decl_stmt|;
name|processTokenStream
argument_list|(
name|doc
argument_list|,
name|bucket
argument_list|,
name|ts
argument_list|,
name|fieldText
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|buildAggregation
specifier|public
name|SignificantStringTerms
name|buildAggregation
parameter_list|(
name|long
name|owningBucketOrdinal
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|owningBucketOrdinal
operator|==
literal|0
assert|;
specifier|final
name|int
name|size
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|bucketOrds
operator|.
name|size
argument_list|()
argument_list|,
name|bucketCountThresholds
operator|.
name|getShardSize
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|supersetSize
init|=
name|termsAggFactory
operator|.
name|getSupersetNumDocs
argument_list|()
decl_stmt|;
name|long
name|subsetSize
init|=
name|numCollectedDocs
decl_stmt|;
name|BucketSignificancePriorityQueue
argument_list|<
name|SignificantStringTerms
operator|.
name|Bucket
argument_list|>
name|ordered
init|=
operator|new
name|BucketSignificancePriorityQueue
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|SignificantStringTerms
operator|.
name|Bucket
name|spare
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketOrds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|docCount
init|=
name|bucketDocCount
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|docCount
operator|<
name|bucketCountThresholds
operator|.
name|getShardMinDocCount
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|spare
operator|==
literal|null
condition|)
block|{
name|spare
operator|=
operator|new
name|SignificantStringTerms
operator|.
name|Bucket
argument_list|(
operator|new
name|BytesRef
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
name|bucketOrds
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|spare
operator|.
name|termBytes
argument_list|)
expr_stmt|;
name|spare
operator|.
name|subsetDf
operator|=
name|docCount
expr_stmt|;
name|spare
operator|.
name|subsetSize
operator|=
name|subsetSize
expr_stmt|;
name|spare
operator|.
name|supersetDf
operator|=
name|termsAggFactory
operator|.
name|getBackgroundFrequency
argument_list|(
name|spare
operator|.
name|termBytes
argument_list|)
expr_stmt|;
name|spare
operator|.
name|supersetSize
operator|=
name|supersetSize
expr_stmt|;
comment|// During shard-local down-selection we use subset/superset stats
comment|// that are for this shard only
comment|// Back at the central reducer these properties will be updated with
comment|// global stats
name|spare
operator|.
name|updateScore
argument_list|(
name|significanceHeuristic
argument_list|)
expr_stmt|;
name|spare
operator|.
name|bucketOrd
operator|=
name|i
expr_stmt|;
name|spare
operator|=
name|ordered
operator|.
name|insertWithOverflow
argument_list|(
name|spare
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SignificantStringTerms
operator|.
name|Bucket
index|[]
name|list
init|=
operator|new
name|SignificantStringTerms
operator|.
name|Bucket
index|[
name|ordered
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ordered
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|SignificantStringTerms
operator|.
name|Bucket
name|bucket
init|=
name|ordered
operator|.
name|pop
argument_list|()
decl_stmt|;
comment|// the terms are owned by the BytesRefHash, we need to pull a copy since the BytesRef hash data may be recycled at some point
name|bucket
operator|.
name|termBytes
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|bucket
operator|.
name|termBytes
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|aggregations
operator|=
name|bucketAggregations
argument_list|(
name|bucket
operator|.
name|bucketOrd
argument_list|)
expr_stmt|;
name|list
index|[
name|i
index|]
operator|=
name|bucket
expr_stmt|;
block|}
return|return
operator|new
name|SignificantStringTerms
argument_list|(
name|name
argument_list|,
name|bucketCountThresholds
operator|.
name|getRequiredSize
argument_list|()
argument_list|,
name|bucketCountThresholds
operator|.
name|getMinDocCount
argument_list|()
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|,
name|format
argument_list|,
name|subsetSize
argument_list|,
name|supersetSize
argument_list|,
name|significanceHeuristic
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|list
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|buildEmptyAggregation
specifier|public
name|SignificantStringTerms
name|buildEmptyAggregation
parameter_list|()
block|{
comment|// We need to account for the significance of a miss in our global stats - provide corpus size as context
name|ContextIndexSearcher
name|searcher
init|=
name|context
operator|.
name|searcher
argument_list|()
decl_stmt|;
name|IndexReader
name|topReader
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|int
name|supersetSize
init|=
name|topReader
operator|.
name|numDocs
argument_list|()
decl_stmt|;
return|return
operator|new
name|SignificantStringTerms
argument_list|(
name|name
argument_list|,
name|bucketCountThresholds
operator|.
name|getRequiredSize
argument_list|()
argument_list|,
name|bucketCountThresholds
operator|.
name|getMinDocCount
argument_list|()
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|,
name|format
argument_list|,
literal|0
argument_list|,
name|supersetSize
argument_list|,
name|significanceHeuristic
argument_list|,
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|public
name|void
name|doClose
parameter_list|()
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|bucketOrds
argument_list|,
name|termsAggFactory
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

