begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support.format
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|format
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|DateFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ValueFormat
specifier|public
class|class
name|ValueFormat
block|{
DECL|field|RAW
specifier|public
specifier|static
specifier|final
name|ValueFormat
name|RAW
init|=
operator|new
name|ValueFormat
argument_list|(
name|ValueFormatter
operator|.
name|RAW
argument_list|,
name|ValueParser
operator|.
name|RAW
argument_list|)
decl_stmt|;
DECL|field|IPv4
specifier|public
specifier|static
specifier|final
name|ValueFormat
name|IPv4
init|=
operator|new
name|ValueFormat
argument_list|(
name|ValueFormatter
operator|.
name|IPv4
argument_list|,
name|ValueParser
operator|.
name|IPv4
argument_list|)
decl_stmt|;
DECL|field|BOOLEAN
specifier|public
specifier|static
specifier|final
name|ValueFormat
name|BOOLEAN
init|=
operator|new
name|ValueFormat
argument_list|(
name|ValueFormatter
operator|.
name|BOOLEAN
argument_list|,
name|ValueParser
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
DECL|field|formatter
specifier|private
specifier|final
name|ValueFormatter
name|formatter
decl_stmt|;
DECL|field|parser
specifier|private
specifier|final
name|ValueParser
name|parser
decl_stmt|;
DECL|method|ValueFormat
specifier|public
name|ValueFormat
parameter_list|(
name|ValueFormatter
name|formatter
parameter_list|,
name|ValueParser
name|parser
parameter_list|)
block|{
assert|assert
name|formatter
operator|!=
literal|null
operator|&&
name|parser
operator|!=
literal|null
assert|;
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
block|}
DECL|method|formatter
specifier|public
name|ValueFormatter
name|formatter
parameter_list|()
block|{
return|return
name|formatter
return|;
block|}
DECL|method|parser
specifier|public
name|ValueParser
name|parser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
DECL|class|Patternable
specifier|public
specifier|abstract
specifier|static
class|class
name|Patternable
parameter_list|<
name|VF
extends|extends
name|Patternable
parameter_list|<
name|VF
parameter_list|>
parameter_list|>
extends|extends
name|ValueFormat
block|{
DECL|field|pattern
specifier|private
specifier|final
name|String
name|pattern
decl_stmt|;
DECL|method|Patternable
specifier|public
name|Patternable
parameter_list|(
name|String
name|pattern
parameter_list|,
name|ValueFormatter
name|formatter
parameter_list|,
name|ValueParser
name|parser
parameter_list|)
block|{
name|super
argument_list|(
name|formatter
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
DECL|method|pattern
specifier|public
name|String
name|pattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
DECL|method|create
specifier|public
specifier|abstract
name|VF
name|create
parameter_list|(
name|String
name|pattern
parameter_list|)
function_decl|;
block|}
DECL|class|DateTime
specifier|public
specifier|static
class|class
name|DateTime
extends|extends
name|Patternable
argument_list|<
name|DateTime
argument_list|>
block|{
DECL|field|DEFAULT
specifier|public
specifier|static
specifier|final
name|DateTime
name|DEFAULT
init|=
operator|new
name|DateTime
argument_list|(
name|DateFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
operator|.
name|format
argument_list|()
argument_list|,
name|ValueFormatter
operator|.
name|DateTime
operator|.
name|DEFAULT
argument_list|,
name|ValueParser
operator|.
name|DateMath
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
DECL|method|format
specifier|public
specifier|static
name|DateTime
name|format
parameter_list|(
name|String
name|format
parameter_list|,
name|DateTimeZone
name|timezone
parameter_list|)
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|format
argument_list|,
operator|new
name|ValueFormatter
operator|.
name|DateTime
argument_list|(
name|format
argument_list|,
name|timezone
argument_list|)
argument_list|,
operator|new
name|ValueParser
operator|.
name|DateMath
argument_list|(
name|format
argument_list|)
argument_list|)
return|;
block|}
DECL|method|mapper
specifier|public
specifier|static
name|DateTime
name|mapper
parameter_list|(
name|DateFieldMapper
operator|.
name|DateFieldType
name|fieldType
parameter_list|,
name|DateTimeZone
name|timezone
parameter_list|)
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|fieldType
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|,
name|ValueFormatter
operator|.
name|DateTime
operator|.
name|mapper
argument_list|(
name|fieldType
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|ValueParser
operator|.
name|DateMath
operator|.
name|mapper
argument_list|(
name|fieldType
argument_list|)
argument_list|)
return|;
block|}
DECL|method|DateTime
specifier|public
name|DateTime
parameter_list|(
name|String
name|pattern
parameter_list|,
name|ValueFormatter
name|formatter
parameter_list|,
name|ValueParser
name|parser
parameter_list|)
block|{
name|super
argument_list|(
name|pattern
argument_list|,
name|formatter
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|DateTime
name|create
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|format
argument_list|(
name|pattern
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
DECL|class|Number
specifier|public
specifier|static
class|class
name|Number
extends|extends
name|Patternable
argument_list|<
name|Number
argument_list|>
block|{
DECL|method|format
specifier|public
specifier|static
name|Number
name|format
parameter_list|(
name|String
name|format
parameter_list|)
block|{
return|return
operator|new
name|Number
argument_list|(
name|format
argument_list|,
operator|new
name|ValueFormatter
operator|.
name|Number
operator|.
name|Pattern
argument_list|(
name|format
argument_list|)
argument_list|,
operator|new
name|ValueParser
operator|.
name|Number
operator|.
name|Pattern
argument_list|(
name|format
argument_list|)
argument_list|)
return|;
block|}
DECL|method|Number
specifier|public
name|Number
parameter_list|(
name|String
name|pattern
parameter_list|,
name|ValueFormatter
name|formatter
parameter_list|,
name|ValueParser
name|parser
parameter_list|)
block|{
name|super
argument_list|(
name|pattern
argument_list|,
name|formatter
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|Number
name|create
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|format
argument_list|(
name|pattern
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

