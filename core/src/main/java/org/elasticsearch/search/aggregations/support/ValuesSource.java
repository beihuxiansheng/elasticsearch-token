begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|ScorerAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractSortingNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicOrdinalsFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexGeoPointFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexOrdinalsFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|MultiGeoPointValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortingBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortingNumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|LeafSearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
operator|.
name|WithScript
operator|.
name|BytesValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|values
operator|.
name|ScriptBytesValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|values
operator|.
name|ScriptDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|values
operator|.
name|ScriptLongValues
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|ValuesSource
specifier|public
specifier|abstract
class|class
name|ValuesSource
block|{
comment|/**      * Get the current {@link BytesValues}.      */
DECL|method|bytesValues
specifier|public
specifier|abstract
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|docsWithValue
specifier|public
specifier|abstract
name|Bits
name|docsWithValue
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Whether this values source needs scores. */
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|class|Bytes
specifier|public
specifier|abstract
specifier|static
class|class
name|Bytes
extends|extends
name|ValuesSource
block|{
annotation|@
name|Override
DECL|method|docsWithValue
specifier|public
name|Bits
name|docsWithValue
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SortedBinaryDocValues
name|bytes
init|=
name|bytesValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
operator|.
name|docsWithValue
argument_list|(
name|bytes
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
DECL|class|WithOrdinals
specifier|public
specifier|abstract
specifier|static
class|class
name|WithOrdinals
extends|extends
name|Bytes
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|WithOrdinals
name|EMPTY
init|=
operator|new
name|WithOrdinals
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedSetDocValues
name|ordinalsValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
name|DocValues
operator|.
name|emptySortedSet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedSetDocValues
name|globalOrdinalsValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
name|DocValues
operator|.
name|emptySortedSet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
operator|.
name|emptySortedBinary
argument_list|()
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|docsWithValue
specifier|public
name|Bits
name|docsWithValue
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SortedSetDocValues
name|ordinals
init|=
name|ordinalsValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
operator|.
name|docsWithValue
argument_list|(
name|ordinals
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
DECL|method|ordinalsValues
specifier|public
specifier|abstract
name|SortedSetDocValues
name|ordinalsValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|globalOrdinalsValues
specifier|public
specifier|abstract
name|SortedSetDocValues
name|globalOrdinalsValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|globalMaxOrd
specifier|public
name|long
name|globalMaxOrd
parameter_list|(
name|IndexSearcher
name|indexSearcher
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexReader
name|indexReader
init|=
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexReader
operator|.
name|leaves
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
name|LeafReaderContext
name|atomicReaderContext
init|=
name|indexReader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SortedSetDocValues
name|values
init|=
name|globalOrdinalsValues
argument_list|(
name|atomicReaderContext
argument_list|)
decl_stmt|;
return|return
name|values
operator|.
name|getValueCount
argument_list|()
return|;
block|}
block|}
DECL|class|FieldData
specifier|public
specifier|static
class|class
name|FieldData
extends|extends
name|WithOrdinals
block|{
DECL|field|indexFieldData
specifier|protected
specifier|final
name|IndexOrdinalsFieldData
name|indexFieldData
decl_stmt|;
DECL|method|FieldData
specifier|public
name|FieldData
parameter_list|(
name|IndexOrdinalsFieldData
name|indexFieldData
parameter_list|)
block|{
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
specifier|final
name|AtomicOrdinalsFieldData
name|atomicFieldData
init|=
name|indexFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|atomicFieldData
operator|.
name|getBytesValues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|ordinalsValues
specifier|public
name|SortedSetDocValues
name|ordinalsValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
specifier|final
name|AtomicOrdinalsFieldData
name|atomicFieldData
init|=
name|indexFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|atomicFieldData
operator|.
name|getOrdinalsValues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|globalOrdinalsValues
specifier|public
name|SortedSetDocValues
name|globalOrdinalsValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
specifier|final
name|IndexOrdinalsFieldData
name|global
init|=
name|indexFieldData
operator|.
name|loadGlobal
argument_list|(
operator|(
name|DirectoryReader
operator|)
name|context
operator|.
name|parent
operator|.
name|reader
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicOrdinalsFieldData
name|atomicFieldData
init|=
name|global
operator|.
name|load
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|atomicFieldData
operator|.
name|getOrdinalsValues
argument_list|()
return|;
block|}
block|}
block|}
DECL|class|FieldData
specifier|public
specifier|static
class|class
name|FieldData
extends|extends
name|Bytes
block|{
DECL|field|indexFieldData
specifier|protected
specifier|final
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
decl_stmt|;
DECL|method|FieldData
specifier|public
name|FieldData
parameter_list|(
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
parameter_list|)
block|{
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
name|indexFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getBytesValues
argument_list|()
return|;
block|}
block|}
DECL|class|Script
specifier|public
specifier|static
class|class
name|Script
extends|extends
name|Bytes
block|{
DECL|field|script
specifier|private
specifier|final
name|SearchScript
name|script
decl_stmt|;
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|SearchScript
name|script
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScriptBytesValues
argument_list|(
name|script
operator|.
name|getLeafSearchScript
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
name|script
operator|.
name|needsScores
argument_list|()
return|;
block|}
block|}
block|}
DECL|class|Numeric
specifier|public
specifier|abstract
specifier|static
class|class
name|Numeric
extends|extends
name|ValuesSource
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|Numeric
name|EMPTY
init|=
operator|new
name|Numeric
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedNumericDocValues
name|longValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
name|DocValues
operator|.
name|emptySortedNumeric
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedNumericDoubleValues
name|doubleValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
operator|.
name|emptySortedNumericDoubles
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
operator|.
name|emptySortedBinary
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** Whether the underlying data is floating-point or not. */
DECL|method|isFloatingPoint
specifier|public
specifier|abstract
name|boolean
name|isFloatingPoint
parameter_list|()
function_decl|;
comment|/** Get the current {@link SortedNumericDocValues}. */
DECL|method|longValues
specifier|public
specifier|abstract
name|SortedNumericDocValues
name|longValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Get the current {@link SortedNumericDoubleValues}. */
DECL|method|doubleValues
specifier|public
specifier|abstract
name|SortedNumericDoubleValues
name|doubleValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|docsWithValue
specifier|public
name|Bits
name|docsWithValue
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isFloatingPoint
argument_list|()
condition|)
block|{
specifier|final
name|SortedNumericDoubleValues
name|values
init|=
name|doubleValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
operator|.
name|docsWithValue
argument_list|(
name|values
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|SortedNumericDocValues
name|values
init|=
name|longValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
operator|.
name|docsWithValue
argument_list|(
name|values
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|WithScript
specifier|public
specifier|static
class|class
name|WithScript
extends|extends
name|Numeric
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Numeric
name|delegate
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|SearchScript
name|script
decl_stmt|;
DECL|method|WithScript
specifier|public
name|WithScript
parameter_list|(
name|Numeric
name|delegate
parameter_list|,
name|SearchScript
name|script
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isFloatingPoint
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
literal|true
return|;
comment|// even if the underlying source produces longs, scripts can change them to doubles
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
name|script
operator|.
name|needsScores
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ValuesSource
operator|.
name|WithScript
operator|.
name|BytesValues
argument_list|(
name|delegate
operator|.
name|bytesValues
argument_list|(
name|context
argument_list|)
argument_list|,
name|script
operator|.
name|getLeafSearchScript
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|longValues
specifier|public
name|SortedNumericDocValues
name|longValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LongValues
argument_list|(
name|delegate
operator|.
name|longValues
argument_list|(
name|context
argument_list|)
argument_list|,
name|script
operator|.
name|getLeafSearchScript
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doubleValues
specifier|public
name|SortedNumericDoubleValues
name|doubleValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DoubleValues
argument_list|(
name|delegate
operator|.
name|doubleValues
argument_list|(
name|context
argument_list|)
argument_list|,
name|script
operator|.
name|getLeafSearchScript
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
DECL|class|LongValues
specifier|static
class|class
name|LongValues
extends|extends
name|AbstractSortingNumericDocValues
implements|implements
name|ScorerAware
block|{
DECL|field|longValues
specifier|private
specifier|final
name|SortedNumericDocValues
name|longValues
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|LeafSearchScript
name|script
decl_stmt|;
DECL|method|LongValues
name|LongValues
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|LeafSearchScript
name|script
parameter_list|)
block|{
name|this
operator|.
name|longValues
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|script
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|longValues
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|resize
argument_list|(
name|longValues
operator|.
name|docValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|script
operator|.
name|setDocument
argument_list|(
name|target
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docValueCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|script
operator|.
name|setNextAggregationValue
argument_list|(
name|longValues
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|script
operator|.
name|runAsLong
argument_list|()
expr_stmt|;
block|}
name|sort
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|DoubleValues
specifier|static
class|class
name|DoubleValues
extends|extends
name|SortingNumericDoubleValues
implements|implements
name|ScorerAware
block|{
DECL|field|doubleValues
specifier|private
specifier|final
name|SortedNumericDoubleValues
name|doubleValues
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|LeafSearchScript
name|script
decl_stmt|;
DECL|method|DoubleValues
name|DoubleValues
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|LeafSearchScript
name|script
parameter_list|)
block|{
name|this
operator|.
name|doubleValues
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|script
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doubleValues
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|resize
argument_list|(
name|doubleValues
operator|.
name|docValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|script
operator|.
name|setDocument
argument_list|(
name|target
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docValueCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|script
operator|.
name|setNextAggregationValue
argument_list|(
name|doubleValues
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|script
operator|.
name|runAsDouble
argument_list|()
expr_stmt|;
block|}
name|sort
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|class|FieldData
specifier|public
specifier|static
class|class
name|FieldData
extends|extends
name|Numeric
block|{
DECL|field|indexFieldData
specifier|protected
specifier|final
name|IndexNumericFieldData
name|indexFieldData
decl_stmt|;
DECL|method|FieldData
specifier|public
name|FieldData
parameter_list|(
name|IndexNumericFieldData
name|indexFieldData
parameter_list|)
block|{
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isFloatingPoint
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
name|indexFieldData
operator|.
name|getNumericType
argument_list|()
operator|.
name|isFloatingPoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
name|indexFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getBytesValues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|longValues
specifier|public
name|SortedNumericDocValues
name|longValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
name|indexFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getLongValues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doubleValues
specifier|public
name|SortedNumericDoubleValues
name|doubleValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
name|indexFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getDoubleValues
argument_list|()
return|;
block|}
block|}
DECL|class|Script
specifier|public
specifier|static
class|class
name|Script
extends|extends
name|Numeric
block|{
DECL|field|script
specifier|private
specifier|final
name|SearchScript
name|script
decl_stmt|;
DECL|field|scriptValueType
specifier|private
specifier|final
name|ValueType
name|scriptValueType
decl_stmt|;
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|SearchScript
name|script
parameter_list|,
name|ValueType
name|scriptValueType
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|this
operator|.
name|scriptValueType
operator|=
name|scriptValueType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isFloatingPoint
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
name|scriptValueType
operator|!=
literal|null
condition|?
name|scriptValueType
operator|.
name|isFloatingPoint
argument_list|()
else|:
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|longValues
specifier|public
name|SortedNumericDocValues
name|longValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScriptLongValues
argument_list|(
name|script
operator|.
name|getLeafSearchScript
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doubleValues
specifier|public
name|SortedNumericDoubleValues
name|doubleValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScriptDoubleValues
argument_list|(
name|script
operator|.
name|getLeafSearchScript
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScriptBytesValues
argument_list|(
name|script
operator|.
name|getLeafSearchScript
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
name|script
operator|.
name|needsScores
argument_list|()
return|;
block|}
block|}
block|}
comment|// No need to implement ReaderContextAware here, the delegate already takes care of updating data structures
DECL|class|WithScript
specifier|public
specifier|static
class|class
name|WithScript
extends|extends
name|Bytes
block|{
DECL|field|delegate
specifier|private
specifier|final
name|ValuesSource
name|delegate
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|SearchScript
name|script
decl_stmt|;
DECL|method|WithScript
specifier|public
name|WithScript
parameter_list|(
name|ValuesSource
name|delegate
parameter_list|,
name|SearchScript
name|script
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
name|script
operator|.
name|needsScores
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BytesValues
argument_list|(
name|delegate
operator|.
name|bytesValues
argument_list|(
name|context
argument_list|)
argument_list|,
name|script
operator|.
name|getLeafSearchScript
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
DECL|class|BytesValues
specifier|static
class|class
name|BytesValues
extends|extends
name|SortingBinaryDocValues
implements|implements
name|ScorerAware
block|{
DECL|field|bytesValues
specifier|private
specifier|final
name|SortedBinaryDocValues
name|bytesValues
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|LeafSearchScript
name|script
decl_stmt|;
DECL|method|BytesValues
name|BytesValues
parameter_list|(
name|SortedBinaryDocValues
name|bytesValues
parameter_list|,
name|LeafSearchScript
name|script
parameter_list|)
block|{
name|this
operator|.
name|bytesValues
operator|=
name|bytesValues
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|script
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytesValues
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|count
operator|=
name|bytesValues
operator|.
name|docValueCount
argument_list|()
expr_stmt|;
name|grow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|BytesRef
name|value
init|=
name|bytesValues
operator|.
name|nextValue
argument_list|()
decl_stmt|;
name|script
operator|.
name|setNextAggregationValue
argument_list|(
name|value
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|.
name|copyChars
argument_list|(
name|script
operator|.
name|run
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sort
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|grow
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
DECL|class|GeoPoint
specifier|public
specifier|abstract
specifier|static
class|class
name|GeoPoint
extends|extends
name|ValuesSource
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|GeoPoint
name|EMPTY
init|=
operator|new
name|GeoPoint
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MultiGeoPointValues
name|geoPointValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
operator|.
name|emptyMultiGeoPoints
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
operator|.
name|emptySortedBinary
argument_list|()
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|docsWithValue
specifier|public
name|Bits
name|docsWithValue
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
specifier|final
name|MultiGeoPointValues
name|geoPoints
init|=
name|geoPointValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
operator|.
name|docsWithValue
argument_list|(
name|geoPoints
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
DECL|method|geoPointValues
specifier|public
specifier|abstract
name|MultiGeoPointValues
name|geoPointValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
function_decl|;
DECL|class|Fielddata
specifier|public
specifier|static
class|class
name|Fielddata
extends|extends
name|GeoPoint
block|{
DECL|field|indexFieldData
specifier|protected
specifier|final
name|IndexGeoPointFieldData
name|indexFieldData
decl_stmt|;
DECL|method|Fielddata
specifier|public
name|Fielddata
parameter_list|(
name|IndexGeoPointFieldData
name|indexFieldData
parameter_list|)
block|{
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bytesValues
specifier|public
name|SortedBinaryDocValues
name|bytesValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
name|indexFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getBytesValues
argument_list|()
return|;
block|}
DECL|method|geoPointValues
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|MultiGeoPointValues
name|geoPointValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
name|indexFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getGeoPointValues
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

