begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.histogram
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|ValuesSourceAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Builder for the {@link DateHistogram} aggregation.  */
end_comment

begin_class
DECL|class|DateHistogramBuilder
specifier|public
class|class
name|DateHistogramBuilder
extends|extends
name|ValuesSourceAggregationBuilder
argument_list|<
name|DateHistogramBuilder
argument_list|>
block|{
DECL|field|interval
specifier|private
name|Object
name|interval
decl_stmt|;
DECL|field|order
specifier|private
name|Histogram
operator|.
name|Order
name|order
decl_stmt|;
DECL|field|minDocCount
specifier|private
name|Long
name|minDocCount
decl_stmt|;
DECL|field|extendedBoundsMin
specifier|private
name|Object
name|extendedBoundsMin
decl_stmt|;
DECL|field|extendedBoundsMax
specifier|private
name|Object
name|extendedBoundsMax
decl_stmt|;
DECL|field|timeZone
specifier|private
name|String
name|timeZone
decl_stmt|;
DECL|field|format
specifier|private
name|String
name|format
decl_stmt|;
DECL|field|offset
specifier|private
name|String
name|offset
decl_stmt|;
DECL|field|factor
specifier|private
name|float
name|factor
init|=
literal|1.0f
decl_stmt|;
comment|/**      * Sole constructor.      */
DECL|method|DateHistogramBuilder
specifier|public
name|DateHistogramBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|InternalDateHistogram
operator|.
name|TYPE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the interval in milliseconds.      */
DECL|method|interval
specifier|public
name|DateHistogramBuilder
name|interval
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the interval.      */
DECL|method|interval
specifier|public
name|DateHistogramBuilder
name|interval
parameter_list|(
name|DateHistogramInterval
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the order by which the buckets will be returned.      */
DECL|method|order
specifier|public
name|DateHistogramBuilder
name|order
parameter_list|(
name|Histogram
operator|.
name|Order
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the minimum document count per bucket. Buckets with less documents      * than this min value will not be returned.      */
DECL|method|minDocCount
specifier|public
name|DateHistogramBuilder
name|minDocCount
parameter_list|(
name|long
name|minDocCount
parameter_list|)
block|{
name|this
operator|.
name|minDocCount
operator|=
name|minDocCount
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the timezone in which to translate dates before computing buckets.      */
DECL|method|timeZone
specifier|public
name|DateHistogramBuilder
name|timeZone
parameter_list|(
name|String
name|timeZone
parameter_list|)
block|{
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @param offset sets the offset of time intervals in this histogram      * @return the current builder      */
DECL|method|offset
specifier|public
name|DateHistogramBuilder
name|offset
parameter_list|(
name|String
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set a factor to apply to values of the field, typically used if times      * are stored in seconds instead of milliseconds.      */
DECL|method|factor
specifier|public
name|DateHistogramBuilder
name|factor
parameter_list|(
name|float
name|factor
parameter_list|)
block|{
name|this
operator|.
name|factor
operator|=
name|factor
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the format to use for dates.      */
DECL|method|format
specifier|public
name|DateHistogramBuilder
name|format
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set extended bounds for the histogram. In case the lower value in the      * histogram would be greater than<code>min</code> or the upper value would      * be less than<code>max</code>, empty buckets will be generated.      */
DECL|method|extendedBounds
specifier|public
name|DateHistogramBuilder
name|extendedBounds
parameter_list|(
name|Long
name|min
parameter_list|,
name|Long
name|max
parameter_list|)
block|{
name|extendedBoundsMin
operator|=
name|min
expr_stmt|;
name|extendedBoundsMax
operator|=
name|max
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set extended bounds for the histogram. In case the lower value in the      * histogram would be greater than<code>min</code> or the upper value would      * be less than<code>max</code>, empty buckets will be generated.      */
DECL|method|extendedBounds
specifier|public
name|DateHistogramBuilder
name|extendedBounds
parameter_list|(
name|String
name|min
parameter_list|,
name|String
name|max
parameter_list|)
block|{
name|extendedBoundsMin
operator|=
name|min
expr_stmt|;
name|extendedBoundsMax
operator|=
name|max
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set extended bounds for the histogram. In case the lower value in the      * histogram would be greater than<code>min</code> or the upper value would      * be less than<code>max</code>, empty buckets will be generated.      */
DECL|method|extendedBounds
specifier|public
name|DateHistogramBuilder
name|extendedBounds
parameter_list|(
name|DateTime
name|min
parameter_list|,
name|DateTime
name|max
parameter_list|)
block|{
name|extendedBoundsMin
operator|=
name|min
expr_stmt|;
name|extendedBoundsMax
operator|=
name|max
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doInternalXContent
specifier|protected
name|XContentBuilder
name|doInternalXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|interval
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SearchSourceBuilderException
argument_list|(
literal|"[interval] must be defined for histogram aggregation ["
operator|+
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|interval
operator|instanceof
name|Number
condition|)
block|{
name|interval
operator|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|interval
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"interval"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
if|if
condition|(
name|minDocCount
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"min_doc_count"
argument_list|,
name|minDocCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"order"
argument_list|)
expr_stmt|;
name|order
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeZone
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"time_zone"
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"offset"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factor
operator|!=
literal|1.0f
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"factor"
argument_list|,
name|factor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extendedBoundsMin
operator|!=
literal|null
operator|||
name|extendedBoundsMax
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|DateHistogramParser
operator|.
name|EXTENDED_BOUNDS
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|extendedBoundsMin
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"min"
argument_list|,
name|extendedBoundsMin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extendedBoundsMax
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"max"
argument_list|,
name|extendedBoundsMax
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

