begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant.heuristics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|MutualInformation
specifier|public
class|class
name|MutualInformation
extends|extends
name|NXYSignificanceHeuristic
block|{
DECL|field|PROTOTYPE
specifier|static
specifier|final
name|MutualInformation
name|PROTOTYPE
init|=
operator|new
name|MutualInformation
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|NAMES_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|NAMES_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"mutual_information"
argument_list|)
decl_stmt|;
DECL|field|log2
specifier|private
specifier|static
specifier|final
name|double
name|log2
init|=
name|Math
operator|.
name|log
argument_list|(
literal|2.0
argument_list|)
decl_stmt|;
DECL|method|MutualInformation
specifier|public
name|MutualInformation
parameter_list|(
name|boolean
name|includeNegatives
parameter_list|,
name|boolean
name|backgroundIsSuperset
parameter_list|)
block|{
name|super
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|MutualInformation
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|NAMES_FIELD
operator|.
name|getPreferredName
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|super
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Calculates mutual information      * see "Information Retrieval", Manning et al., Eq. 13.17      */
annotation|@
name|Override
DECL|method|getScore
specifier|public
name|double
name|getScore
parameter_list|(
name|long
name|subsetFreq
parameter_list|,
name|long
name|subsetSize
parameter_list|,
name|long
name|supersetFreq
parameter_list|,
name|long
name|supersetSize
parameter_list|)
block|{
name|Frequencies
name|frequencies
init|=
name|computeNxys
argument_list|(
name|subsetFreq
argument_list|,
name|subsetSize
argument_list|,
name|supersetFreq
argument_list|,
name|supersetSize
argument_list|,
literal|"MutualInformation"
argument_list|)
decl_stmt|;
name|double
name|score
init|=
operator|(
name|getMITerm
argument_list|(
name|frequencies
operator|.
name|N00
argument_list|,
name|frequencies
operator|.
name|N0_
argument_list|,
name|frequencies
operator|.
name|N_0
argument_list|,
name|frequencies
operator|.
name|N
argument_list|)
operator|+
name|getMITerm
argument_list|(
name|frequencies
operator|.
name|N01
argument_list|,
name|frequencies
operator|.
name|N0_
argument_list|,
name|frequencies
operator|.
name|N_1
argument_list|,
name|frequencies
operator|.
name|N
argument_list|)
operator|+
name|getMITerm
argument_list|(
name|frequencies
operator|.
name|N10
argument_list|,
name|frequencies
operator|.
name|N1_
argument_list|,
name|frequencies
operator|.
name|N_0
argument_list|,
name|frequencies
operator|.
name|N
argument_list|)
operator|+
name|getMITerm
argument_list|(
name|frequencies
operator|.
name|N11
argument_list|,
name|frequencies
operator|.
name|N1_
argument_list|,
name|frequencies
operator|.
name|N_1
argument_list|,
name|frequencies
operator|.
name|N
argument_list|)
operator|)
operator|/
name|log2
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|score
argument_list|)
condition|)
block|{
name|score
operator|=
name|Double
operator|.
name|NEGATIVE_INFINITY
expr_stmt|;
block|}
comment|// here we check if the term appears more often in subset than in background without subset.
if|if
condition|(
operator|!
name|includeNegatives
operator|&&
name|frequencies
operator|.
name|N11
operator|/
name|frequencies
operator|.
name|N_1
operator|<
name|frequencies
operator|.
name|N10
operator|/
name|frequencies
operator|.
name|N_0
condition|)
block|{
name|score
operator|=
name|Double
operator|.
name|NEGATIVE_INFINITY
expr_stmt|;
block|}
return|return
name|score
return|;
block|}
comment|/*  make sure that         0 * log(0/0) = 0         0 * log(0) = 0         Else, this would be the score:         double score =                   N11 / N * Math.log((N * N11) / (N1_ * N_1))                 + N01 / N * Math.log((N * N01) / (N0_ * N_1))                 + N10 / N * Math.log((N * N10) / (N1_ * N_0))                 + N00 / N * Math.log((N * N00) / (N0_ * N_0));          but we get many NaN if we do not take case of the 0s */
DECL|method|getMITerm
name|double
name|getMITerm
parameter_list|(
name|double
name|Nxy
parameter_list|,
name|double
name|Nx_
parameter_list|,
name|double
name|N_y
parameter_list|,
name|double
name|N
parameter_list|)
block|{
name|double
name|numerator
init|=
name|Math
operator|.
name|abs
argument_list|(
name|N
operator|*
name|Nxy
argument_list|)
decl_stmt|;
name|double
name|denominator
init|=
name|Math
operator|.
name|abs
argument_list|(
name|Nx_
operator|*
name|N_y
argument_list|)
decl_stmt|;
name|double
name|factor
init|=
name|Math
operator|.
name|abs
argument_list|(
name|Nxy
operator|/
name|N
argument_list|)
decl_stmt|;
if|if
condition|(
name|numerator
operator|<
literal|1.e-7
operator|&&
name|factor
operator|<
literal|1.e-7
condition|)
block|{
return|return
literal|0.0
return|;
block|}
else|else
block|{
return|return
name|factor
operator|*
name|Math
operator|.
name|log
argument_list|(
name|numerator
operator|/
name|denominator
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAMES_FIELD
operator|.
name|getPreferredName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|SignificanceHeuristic
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MutualInformation
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|,
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAMES_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|build
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|MutualInformationParser
specifier|public
specifier|static
class|class
name|MutualInformationParser
extends|extends
name|NXYParser
block|{
annotation|@
name|Override
DECL|method|newHeuristic
specifier|protected
name|SignificanceHeuristic
name|newHeuristic
parameter_list|(
name|boolean
name|includeNegatives
parameter_list|,
name|boolean
name|backgroundIsSuperset
parameter_list|)
block|{
return|return
operator|new
name|MutualInformation
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNames
specifier|public
name|String
index|[]
name|getNames
parameter_list|()
block|{
return|return
name|NAMES_FIELD
operator|.
name|getAllNamesIncludedDeprecated
argument_list|()
return|;
block|}
block|}
DECL|class|MutualInformationBuilder
specifier|public
specifier|static
class|class
name|MutualInformationBuilder
extends|extends
name|NXYBuilder
block|{
DECL|method|MutualInformationBuilder
specifier|public
name|MutualInformationBuilder
parameter_list|(
name|boolean
name|includeNegatives
parameter_list|,
name|boolean
name|backgroundIsSuperset
parameter_list|)
block|{
name|super
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAMES_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|build
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

