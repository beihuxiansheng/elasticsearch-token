begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_comment
comment|/**  * A minimal context for parsing xcontent into aggregation builders.  * Only a minimal set of dependencies and settings are available.  */
end_comment

begin_class
DECL|class|XContentParseContext
specifier|public
specifier|final
class|class
name|XContentParseContext
block|{
DECL|field|parser
specifier|private
specifier|final
name|XContentParser
name|parser
decl_stmt|;
DECL|field|parseFieldMatcher
specifier|private
specifier|final
name|ParseFieldMatcher
name|parseFieldMatcher
decl_stmt|;
DECL|field|defaultScriptLanguage
specifier|private
specifier|final
name|String
name|defaultScriptLanguage
decl_stmt|;
DECL|method|XContentParseContext
specifier|public
name|XContentParseContext
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|,
name|String
name|defaultScriptLanguage
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|this
operator|.
name|parseFieldMatcher
operator|=
name|parseFieldMatcher
expr_stmt|;
name|this
operator|.
name|defaultScriptLanguage
operator|=
name|defaultScriptLanguage
expr_stmt|;
block|}
DECL|method|getParser
specifier|public
name|XContentParser
name|getParser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
DECL|method|getParseFieldMatcher
specifier|public
name|ParseFieldMatcher
name|getParseFieldMatcher
parameter_list|()
block|{
return|return
name|parseFieldMatcher
return|;
block|}
DECL|method|getDefaultScriptLanguage
specifier|public
name|String
name|getDefaultScriptLanguage
parameter_list|()
block|{
return|return
name|defaultScriptLanguage
return|;
block|}
comment|/**      * Returns whether the parse field we're looking for matches with the found field name.      *      * Helper that delegates to {@link ParseFieldMatcher#match(String, ParseField)}.      */
DECL|method|matchField
specifier|public
name|boolean
name|matchField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|ParseField
name|parseField
parameter_list|)
block|{
return|return
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|fieldName
argument_list|,
name|parseField
argument_list|)
return|;
block|}
block|}
end_class

end_unit

