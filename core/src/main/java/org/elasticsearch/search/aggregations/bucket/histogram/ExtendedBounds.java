begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.histogram
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|Rounding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|format
operator|.
name|ValueParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ExtendedBounds
specifier|public
class|class
name|ExtendedBounds
implements|implements
name|ToXContent
block|{
DECL|field|EXTENDED_BOUNDS_FIELD
specifier|static
specifier|final
name|ParseField
name|EXTENDED_BOUNDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"extended_bounds"
argument_list|)
decl_stmt|;
DECL|field|MIN_FIELD
specifier|static
specifier|final
name|ParseField
name|MIN_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"min"
argument_list|)
decl_stmt|;
DECL|field|MAX_FIELD
specifier|static
specifier|final
name|ParseField
name|MAX_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
DECL|field|PROTOTYPE
specifier|private
specifier|static
specifier|final
name|ExtendedBounds
name|PROTOTYPE
init|=
operator|new
name|ExtendedBounds
argument_list|()
decl_stmt|;
DECL|field|min
name|Long
name|min
decl_stmt|;
DECL|field|max
name|Long
name|max
decl_stmt|;
DECL|field|minAsStr
name|String
name|minAsStr
decl_stmt|;
DECL|field|maxAsStr
name|String
name|maxAsStr
decl_stmt|;
DECL|method|ExtendedBounds
name|ExtendedBounds
parameter_list|()
block|{}
comment|//for serialization
DECL|method|ExtendedBounds
specifier|public
name|ExtendedBounds
parameter_list|(
name|Long
name|min
parameter_list|,
name|Long
name|max
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
DECL|method|ExtendedBounds
specifier|public
name|ExtendedBounds
parameter_list|(
name|String
name|minAsStr
parameter_list|,
name|String
name|maxAsStr
parameter_list|)
block|{
name|this
operator|.
name|minAsStr
operator|=
name|minAsStr
expr_stmt|;
name|this
operator|.
name|maxAsStr
operator|=
name|maxAsStr
expr_stmt|;
block|}
DECL|method|processAndValidate
name|void
name|processAndValidate
parameter_list|(
name|String
name|aggName
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|ValueParser
name|parser
parameter_list|)
block|{
assert|assert
name|parser
operator|!=
literal|null
assert|;
if|if
condition|(
name|minAsStr
operator|!=
literal|null
condition|)
block|{
name|min
operator|=
name|parser
operator|.
name|parseLong
argument_list|(
name|minAsStr
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxAsStr
operator|!=
literal|null
condition|)
block|{
name|max
operator|=
name|parser
operator|.
name|parseLong
argument_list|(
name|maxAsStr
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|!=
literal|null
operator|&&
name|max
operator|!=
literal|null
operator|&&
name|min
operator|.
name|compareTo
argument_list|(
name|max
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"[extended_bounds.min]["
operator|+
name|min
operator|+
literal|"] cannot be greater than "
operator|+
literal|"[extended_bounds.max]["
operator|+
name|max
operator|+
literal|"] for histogram aggregation ["
operator|+
name|aggName
operator|+
literal|"]"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
DECL|method|round
name|ExtendedBounds
name|round
parameter_list|(
name|Rounding
name|rounding
parameter_list|)
block|{
return|return
operator|new
name|ExtendedBounds
argument_list|(
name|min
operator|!=
literal|null
condition|?
name|rounding
operator|.
name|round
argument_list|(
name|min
argument_list|)
else|:
literal|null
argument_list|,
name|max
operator|!=
literal|null
condition|?
name|rounding
operator|.
name|round
argument_list|(
name|max
argument_list|)
else|:
literal|null
argument_list|)
return|;
block|}
DECL|method|writeTo
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|min
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalString
argument_list|(
name|minAsStr
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|maxAsStr
argument_list|)
expr_stmt|;
block|}
DECL|method|readFrom
specifier|static
name|ExtendedBounds
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ExtendedBounds
name|bounds
init|=
operator|new
name|ExtendedBounds
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|bounds
operator|.
name|min
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|bounds
operator|.
name|max
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|bounds
operator|.
name|minAsStr
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|bounds
operator|.
name|maxAsStr
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
return|return
name|bounds
return|;
block|}
DECL|method|fromXContent
specifier|public
name|ExtendedBounds
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|,
name|String
name|aggregationName
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
literal|null
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|ExtendedBounds
name|extendedBounds
init|=
operator|new
name|ExtendedBounds
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
if|if
condition|(
literal|"min"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|extendedBounds
operator|.
name|minAsStr
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"max"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|extendedBounds
operator|.
name|maxAsStr
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown extended_bounds key for a "
operator|+
name|token
operator|+
literal|" in aggregation ["
operator|+
name|aggregationName
operator|+
literal|"]: ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|MIN_FIELD
argument_list|)
condition|)
block|{
name|extendedBounds
operator|.
name|min
operator|=
name|parser
operator|.
name|longValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|MAX_FIELD
argument_list|)
condition|)
block|{
name|extendedBounds
operator|.
name|max
operator|=
name|parser
operator|.
name|longValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unknown extended_bounds key for a "
operator|+
name|token
operator|+
literal|" in aggregation ["
operator|+
name|aggregationName
operator|+
literal|"]: ["
operator|+
name|currentFieldName
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|extendedBounds
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|EXTENDED_BOUNDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MIN_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|MIN_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minAsStr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MAX_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|MAX_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxAsStr
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ExtendedBounds
name|other
init|=
operator|(
name|ExtendedBounds
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|min
argument_list|,
name|other
operator|.
name|min
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|min
argument_list|,
name|other
operator|.
name|min
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|ExtendedBounds
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|,
name|String
name|aggregationName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PROTOTYPE
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
name|parseFieldMatcher
argument_list|,
name|aggregationName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

