begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.histogram
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcherSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|Rounding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|AbstractObjectParser
operator|.
name|NoContextParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
operator|.
name|optionalConstructorArg
import|;
end_import

begin_class
DECL|class|ExtendedBounds
specifier|public
class|class
name|ExtendedBounds
implements|implements
name|ToXContent
implements|,
name|Writeable
block|{
DECL|field|EXTENDED_BOUNDS_FIELD
specifier|static
specifier|final
name|ParseField
name|EXTENDED_BOUNDS_FIELD
init|=
name|Histogram
operator|.
name|EXTENDED_BOUNDS_FIELD
decl_stmt|;
DECL|field|MIN_FIELD
specifier|static
specifier|final
name|ParseField
name|MIN_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"min"
argument_list|)
decl_stmt|;
DECL|field|MAX_FIELD
specifier|static
specifier|final
name|ParseField
name|MAX_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
DECL|field|PARSER
specifier|public
specifier|static
specifier|final
name|ConstructingObjectParser
argument_list|<
name|ExtendedBounds
argument_list|,
name|ParseFieldMatcherSupplier
argument_list|>
name|PARSER
init|=
operator|new
name|ConstructingObjectParser
argument_list|<>
argument_list|(
literal|"extended_bounds"
argument_list|,
name|a
lambda|->
block|{
assert|assert
name|a
operator|.
name|length
operator|==
literal|2
assert|;
name|Long
name|min
init|=
literal|null
decl_stmt|;
name|Long
name|max
init|=
literal|null
decl_stmt|;
name|String
name|minAsStr
init|=
literal|null
decl_stmt|;
name|String
name|maxAsStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|a
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
comment|// nothing to do with it
block|}
elseif|else
if|if
condition|(
name|a
index|[
literal|0
index|]
operator|instanceof
name|Long
condition|)
block|{
name|min
operator|=
operator|(
name|Long
operator|)
name|a
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
index|[
literal|0
index|]
operator|instanceof
name|String
condition|)
block|{
name|minAsStr
operator|=
operator|(
name|String
operator|)
name|a
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown field type ["
operator|+
name|a
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|a
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
comment|// nothing to do with it
block|}
elseif|else
if|if
condition|(
name|a
index|[
literal|1
index|]
operator|instanceof
name|Long
condition|)
block|{
name|max
operator|=
operator|(
name|Long
operator|)
name|a
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
index|[
literal|1
index|]
operator|instanceof
name|String
condition|)
block|{
name|maxAsStr
operator|=
operator|(
name|String
operator|)
name|a
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown field type ["
operator|+
name|a
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ExtendedBounds
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|minAsStr
argument_list|,
name|maxAsStr
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|NoContextParser
argument_list|<
name|Object
argument_list|>
name|longOrString
init|=
name|p
lambda|->
block|{
if|if
condition|(
name|p
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
return|return
name|p
operator|.
name|longValue
argument_list|(
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|p
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
return|return
name|p
operator|.
name|text
argument_list|()
return|;
block|}
if|if
condition|(
name|p
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported token ["
operator|+
name|p
operator|.
name|currentToken
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
decl_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
name|optionalConstructorArg
argument_list|()
argument_list|,
name|longOrString
argument_list|,
name|MIN_FIELD
argument_list|,
name|ValueType
operator|.
name|LONG_OR_NULL
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
name|optionalConstructorArg
argument_list|()
argument_list|,
name|longOrString
argument_list|,
name|MAX_FIELD
argument_list|,
name|ValueType
operator|.
name|LONG_OR_NULL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parsed min value. If this is null and {@linkplain #minAsStr} isn't then this must be parsed from {@linkplain #minAsStr}. If this is      * null and {@linkplain #minAsStr} is also null then there is no lower bound.      */
DECL|field|min
specifier|private
specifier|final
name|Long
name|min
decl_stmt|;
comment|/**      * Parsed min value. If this is null and {@linkplain #maxAsStr} isn't then this must be parsed from {@linkplain #maxAsStr}. If this is      * null and {@linkplain #maxAsStr} is also null then there is no lower bound.      */
DECL|field|max
specifier|private
specifier|final
name|Long
name|max
decl_stmt|;
DECL|field|minAsStr
specifier|private
specifier|final
name|String
name|minAsStr
decl_stmt|;
DECL|field|maxAsStr
specifier|private
specifier|final
name|String
name|maxAsStr
decl_stmt|;
comment|/**      * Construct with parsed bounds.      */
DECL|method|ExtendedBounds
specifier|public
name|ExtendedBounds
parameter_list|(
name|Long
name|min
parameter_list|,
name|Long
name|max
parameter_list|)
block|{
name|this
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct with unparsed bounds.      */
DECL|method|ExtendedBounds
specifier|public
name|ExtendedBounds
parameter_list|(
name|String
name|minAsStr
parameter_list|,
name|String
name|maxAsStr
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|minAsStr
argument_list|,
name|maxAsStr
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct with all possible information.      */
DECL|method|ExtendedBounds
specifier|private
name|ExtendedBounds
parameter_list|(
name|Long
name|min
parameter_list|,
name|Long
name|max
parameter_list|,
name|String
name|minAsStr
parameter_list|,
name|String
name|maxAsStr
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|minAsStr
operator|=
name|minAsStr
expr_stmt|;
name|this
operator|.
name|maxAsStr
operator|=
name|maxAsStr
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|ExtendedBounds
specifier|public
name|ExtendedBounds
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|min
operator|=
name|in
operator|.
name|readOptionalLong
argument_list|()
expr_stmt|;
name|max
operator|=
name|in
operator|.
name|readOptionalLong
argument_list|()
expr_stmt|;
name|minAsStr
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|maxAsStr
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalLong
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalLong
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|minAsStr
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|maxAsStr
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parse the bounds and perform any delayed validation. Returns the result of the parsing.      */
DECL|method|parseAndValidate
name|ExtendedBounds
name|parseAndValidate
parameter_list|(
name|String
name|aggName
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|DocValueFormat
name|format
parameter_list|)
block|{
name|Long
name|min
init|=
name|this
operator|.
name|min
decl_stmt|;
name|Long
name|max
init|=
name|this
operator|.
name|max
decl_stmt|;
assert|assert
name|format
operator|!=
literal|null
assert|;
if|if
condition|(
name|minAsStr
operator|!=
literal|null
condition|)
block|{
name|min
operator|=
name|format
operator|.
name|parseLong
argument_list|(
name|minAsStr
argument_list|,
literal|false
argument_list|,
name|context
operator|::
name|nowInMillis
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxAsStr
operator|!=
literal|null
condition|)
block|{
comment|// TODO: Should we rather pass roundUp=true?
name|max
operator|=
name|format
operator|.
name|parseLong
argument_list|(
name|maxAsStr
argument_list|,
literal|false
argument_list|,
name|context
operator|::
name|nowInMillis
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|!=
literal|null
operator|&&
name|max
operator|!=
literal|null
operator|&&
name|min
operator|.
name|compareTo
argument_list|(
name|max
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"[extended_bounds.min]["
operator|+
name|min
operator|+
literal|"] cannot be greater than "
operator|+
literal|"[extended_bounds.max]["
operator|+
name|max
operator|+
literal|"] for histogram aggregation ["
operator|+
name|aggName
operator|+
literal|"]"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
return|return
operator|new
name|ExtendedBounds
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|minAsStr
argument_list|,
name|maxAsStr
argument_list|)
return|;
block|}
DECL|method|round
name|ExtendedBounds
name|round
parameter_list|(
name|Rounding
name|rounding
parameter_list|)
block|{
return|return
operator|new
name|ExtendedBounds
argument_list|(
name|min
operator|!=
literal|null
condition|?
name|rounding
operator|.
name|round
argument_list|(
name|min
argument_list|)
else|:
literal|null
argument_list|,
name|max
operator|!=
literal|null
condition|?
name|rounding
operator|.
name|round
argument_list|(
name|max
argument_list|)
else|:
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|EXTENDED_BOUNDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MIN_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|MIN_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minAsStr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MAX_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|MAX_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxAsStr
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|minAsStr
argument_list|,
name|maxAsStr
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ExtendedBounds
name|other
init|=
operator|(
name|ExtendedBounds
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|min
argument_list|,
name|other
operator|.
name|min
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|max
argument_list|,
name|other
operator|.
name|max
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minAsStr
argument_list|,
name|other
operator|.
name|minAsStr
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|maxAsStr
argument_list|,
name|other
operator|.
name|maxAsStr
argument_list|)
return|;
block|}
DECL|method|getMin
specifier|public
name|Long
name|getMin
parameter_list|()
block|{
return|return
name|min
return|;
block|}
DECL|method|getMax
specifier|public
name|Long
name|getMax
parameter_list|()
block|{
return|return
name|max
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|min
argument_list|)
expr_stmt|;
if|if
condition|(
name|minAsStr
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|minAsStr
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|minAsStr
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|minAsStr
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|append
argument_list|(
literal|"--"
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|min
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxAsStr
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|maxAsStr
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|maxAsStr
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|maxAsStr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

