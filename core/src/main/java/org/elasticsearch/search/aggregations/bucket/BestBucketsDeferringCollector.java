begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedLongValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|LongHash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|BucketCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|LeafBucketCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A specialization of {@link DeferringBucketCollector} that collects all  * matches and then is able to replay a given subset of buckets which represent  * the survivors from a pruning process performed by the aggregator that owns  * this collector.  */
end_comment

begin_class
DECL|class|BestBucketsDeferringCollector
specifier|public
class|class
name|BestBucketsDeferringCollector
extends|extends
name|DeferringBucketCollector
block|{
DECL|class|Entry
specifier|private
specifier|static
class|class
name|Entry
block|{
DECL|field|context
specifier|final
name|LeafReaderContext
name|context
decl_stmt|;
DECL|field|docDeltas
specifier|final
name|PackedLongValues
name|docDeltas
decl_stmt|;
DECL|field|buckets
specifier|final
name|PackedLongValues
name|buckets
decl_stmt|;
DECL|method|Entry
name|Entry
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|PackedLongValues
name|docDeltas
parameter_list|,
name|PackedLongValues
name|buckets
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|docDeltas
operator|=
name|docDeltas
expr_stmt|;
name|this
operator|.
name|buckets
operator|=
name|buckets
expr_stmt|;
block|}
block|}
DECL|field|entries
specifier|final
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|collector
name|BucketCollector
name|collector
decl_stmt|;
DECL|field|searchContext
specifier|final
name|SearchContext
name|searchContext
decl_stmt|;
DECL|field|context
name|LeafReaderContext
name|context
decl_stmt|;
DECL|field|docDeltas
name|PackedLongValues
operator|.
name|Builder
name|docDeltas
decl_stmt|;
DECL|field|buckets
name|PackedLongValues
operator|.
name|Builder
name|buckets
decl_stmt|;
DECL|field|maxBucket
name|long
name|maxBucket
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|finished
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
DECL|field|selectedBuckets
name|LongHash
name|selectedBuckets
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|BestBucketsDeferringCollector
specifier|public
name|BestBucketsDeferringCollector
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|searchContext
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
if|if
condition|(
name|collector
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
return|return
name|collector
operator|.
name|needsScores
argument_list|()
return|;
block|}
comment|/** Set the deferred collectors. */
annotation|@
name|Override
DECL|method|setDeferredCollector
specifier|public
name|void
name|setDeferredCollector
parameter_list|(
name|Iterable
argument_list|<
name|BucketCollector
argument_list|>
name|deferredCollectors
parameter_list|)
block|{
name|this
operator|.
name|collector
operator|=
name|BucketCollector
operator|.
name|wrap
argument_list|(
name|deferredCollectors
argument_list|)
expr_stmt|;
block|}
DECL|method|finishLeaf
specifier|private
name|void
name|finishLeaf
parameter_list|()
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|entries
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|context
argument_list|,
name|docDeltas
operator|.
name|build
argument_list|()
argument_list|,
name|buckets
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|context
operator|=
literal|null
expr_stmt|;
name|docDeltas
operator|=
literal|null
expr_stmt|;
name|buckets
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafBucketCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|finishLeaf
argument_list|()
expr_stmt|;
name|context
operator|=
name|ctx
expr_stmt|;
name|docDeltas
operator|=
name|PackedLongValues
operator|.
name|packedBuilder
argument_list|(
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|buckets
operator|=
name|PackedLongValues
operator|.
name|packedBuilder
argument_list|(
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
return|return
operator|new
name|LeafBucketCollector
argument_list|()
block|{
name|int
name|lastDoc
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|docDeltas
operator|.
name|add
argument_list|(
name|doc
operator|-
name|lastDoc
argument_list|)
expr_stmt|;
name|buckets
operator|.
name|add
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|lastDoc
operator|=
name|doc
expr_stmt|;
name|maxBucket
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxBucket
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|preCollection
specifier|public
name|void
name|preCollection
parameter_list|()
throws|throws
name|IOException
block|{
name|collector
operator|.
name|preCollection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postCollection
specifier|public
name|void
name|postCollection
parameter_list|()
throws|throws
name|IOException
block|{
name|finishLeaf
argument_list|()
expr_stmt|;
name|finished
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Replay the wrapped collector, but only on a selection of buckets.      */
annotation|@
name|Override
DECL|method|prepareSelectedBuckets
specifier|public
name|void
name|prepareSelectedBuckets
parameter_list|(
name|long
modifier|...
name|selectedBuckets
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|finished
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot replay yet, collection is not finished: postCollect() has not been called"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|selectedBuckets
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Already been replayed"
argument_list|)
throw|;
block|}
specifier|final
name|LongHash
name|hash
init|=
operator|new
name|LongHash
argument_list|(
name|selectedBuckets
operator|.
name|length
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|bucket
range|:
name|selectedBuckets
control|)
block|{
name|hash
operator|.
name|add
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|selectedBuckets
operator|=
name|hash
expr_stmt|;
name|boolean
name|needsScores
init|=
name|collector
operator|.
name|needsScores
argument_list|()
decl_stmt|;
name|Weight
name|weight
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|weight
operator|=
name|searchContext
operator|.
name|searcher
argument_list|()
operator|.
name|createNormalizedWeight
argument_list|(
name|searchContext
operator|.
name|query
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
specifier|final
name|LeafBucketCollector
name|leafCollector
init|=
name|collector
operator|.
name|getLeafCollector
argument_list|(
name|entry
operator|.
name|context
argument_list|)
decl_stmt|;
name|DocIdSetIterator
name|docIt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|needsScores
operator|&&
name|entry
operator|.
name|docDeltas
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Scorer
name|scorer
init|=
name|weight
operator|.
name|scorer
argument_list|(
name|entry
operator|.
name|context
argument_list|)
decl_stmt|;
comment|// We don't need to check if the scorer is null
comment|// since we are sure that there are documents to replay (entry.docDeltas it not empty).
name|docIt
operator|=
name|scorer
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|leafCollector
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PackedLongValues
operator|.
name|Iterator
name|docDeltaIterator
init|=
name|entry
operator|.
name|docDeltas
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|PackedLongValues
operator|.
name|Iterator
name|buckets
init|=
name|entry
operator|.
name|buckets
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|doc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|,
name|end
init|=
name|entry
operator|.
name|docDeltas
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|doc
operator|+=
name|docDeltaIterator
operator|.
name|next
argument_list|()
expr_stmt|;
specifier|final
name|long
name|bucket
init|=
name|buckets
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|long
name|rebasedBucket
init|=
name|hash
operator|.
name|find
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
if|if
condition|(
name|rebasedBucket
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|needsScores
condition|)
block|{
if|if
condition|(
name|docIt
operator|.
name|docID
argument_list|()
operator|<
name|doc
condition|)
block|{
name|docIt
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// aggregations should only be replayed on matching documents
assert|assert
name|docIt
operator|.
name|docID
argument_list|()
operator|==
name|doc
assert|;
block|}
name|leafCollector
operator|.
name|collect
argument_list|(
name|doc
argument_list|,
name|rebasedBucket
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|collector
operator|.
name|postCollection
argument_list|()
expr_stmt|;
block|}
comment|/**      * Wrap the provided aggregator so that it behaves (almost) as if it had      * been collected directly.      */
annotation|@
name|Override
DECL|method|wrap
specifier|public
name|Aggregator
name|wrap
parameter_list|(
specifier|final
name|Aggregator
name|in
parameter_list|)
block|{
return|return
operator|new
name|WrappedAggregator
argument_list|(
name|in
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|InternalAggregation
name|buildAggregation
parameter_list|(
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|selectedBuckets
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Collection has not been replayed yet."
argument_list|)
throw|;
block|}
specifier|final
name|long
name|rebasedBucket
init|=
name|selectedBuckets
operator|.
name|find
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
if|if
condition|(
name|rebasedBucket
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot build for a bucket which has not been collected"
argument_list|)
throw|;
block|}
return|return
name|in
operator|.
name|buildAggregation
argument_list|(
name|rebasedBucket
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

