begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_comment
comment|/**  * Represents a set of {@link Aggregation}s  */
end_comment

begin_class
DECL|class|Aggregations
specifier|public
class|class
name|Aggregations
implements|implements
name|Iterable
argument_list|<
name|Aggregation
argument_list|>
implements|,
name|ToXContent
block|{
DECL|field|AGGREGATIONS_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|AGGREGATIONS_FIELD
init|=
literal|"aggregations"
decl_stmt|;
DECL|field|aggregations
specifier|protected
name|List
argument_list|<
name|?
extends|extends
name|Aggregation
argument_list|>
name|aggregations
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|aggregationsAsMap
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|aggregationsAsMap
decl_stmt|;
DECL|method|Aggregations
specifier|protected
name|Aggregations
parameter_list|()
block|{     }
DECL|method|Aggregations
specifier|public
name|Aggregations
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Aggregation
argument_list|>
name|aggregations
parameter_list|)
block|{
name|this
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
block|}
comment|/**      * Iterates over the {@link Aggregation}s.      */
annotation|@
name|Override
DECL|method|iterator
specifier|public
specifier|final
name|Iterator
argument_list|<
name|Aggregation
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|aggregations
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
parameter_list|(
name|p
parameter_list|)
lambda|->
operator|(
name|Aggregation
operator|)
name|p
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * The list of {@link Aggregation}s.      */
DECL|method|asList
specifier|public
specifier|final
name|List
argument_list|<
name|Aggregation
argument_list|>
name|asList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|aggregations
argument_list|)
return|;
block|}
comment|/**      * Returns the {@link Aggregation}s keyed by aggregation name.      */
DECL|method|asMap
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|asMap
parameter_list|()
block|{
return|return
name|getAsMap
argument_list|()
return|;
block|}
comment|/**      * Returns the {@link Aggregation}s keyed by aggregation name.      */
DECL|method|getAsMap
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|getAsMap
parameter_list|()
block|{
if|if
condition|(
name|aggregationsAsMap
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|newAggregationsAsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|aggregations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Aggregation
name|aggregation
range|:
name|aggregations
control|)
block|{
name|newAggregationsAsMap
operator|.
name|put
argument_list|(
name|aggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|aggregation
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|aggregationsAsMap
operator|=
name|unmodifiableMap
argument_list|(
name|newAggregationsAsMap
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregationsAsMap
return|;
block|}
comment|/**      * Returns the aggregation that is associated with the specified name.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get
specifier|public
specifier|final
parameter_list|<
name|A
extends|extends
name|Aggregation
parameter_list|>
name|A
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|A
operator|)
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|aggregations
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Aggregations
operator|)
name|obj
operator|)
operator|.
name|aggregations
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|aggregations
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|aggregations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|builder
return|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
name|AGGREGATIONS_FIELD
argument_list|)
expr_stmt|;
name|toXContentInternal
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
comment|/**      * Directly write all the aggregations without their bounding object. Used by sub-aggregations (non top level aggs)      */
DECL|method|toXContentInternal
specifier|public
name|XContentBuilder
name|toXContentInternal
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Aggregation
name|aggregation
range|:
name|aggregations
control|)
block|{
name|aggregation
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|Aggregations
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Aggregation
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|aggregations
operator|.
name|add
argument_list|(
name|XContentParserUtils
operator|.
name|parseTypedKeysObject
argument_list|(
name|parser
argument_list|,
name|Aggregation
operator|.
name|TYPED_KEYS_DELIMITER
argument_list|,
name|Aggregation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Aggregations
argument_list|(
name|aggregations
argument_list|)
return|;
block|}
block|}
end_class

end_unit

