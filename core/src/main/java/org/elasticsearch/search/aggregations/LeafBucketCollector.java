begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Per-leaf bucket collector.  */
end_comment

begin_class
DECL|class|LeafBucketCollector
specifier|public
specifier|abstract
class|class
name|LeafBucketCollector
implements|implements
name|LeafCollector
block|{
DECL|field|NO_OP_COLLECTOR
specifier|public
specifier|static
specifier|final
name|LeafBucketCollector
name|NO_OP_COLLECTOR
init|=
operator|new
name|LeafBucketCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no-op
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
block|{
comment|// no-op
block|}
block|}
decl_stmt|;
DECL|method|wrap
specifier|public
specifier|static
name|LeafBucketCollector
name|wrap
parameter_list|(
name|Iterable
argument_list|<
name|LeafBucketCollector
argument_list|>
name|collectors
parameter_list|)
block|{
specifier|final
name|Iterable
argument_list|<
name|LeafBucketCollector
argument_list|>
name|actualCollectors
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|collectors
argument_list|,
operator|new
name|Predicate
argument_list|<
name|LeafBucketCollector
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|LeafBucketCollector
name|c
parameter_list|)
block|{
return|return
name|c
operator|!=
name|NO_OP_COLLECTOR
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|LeafBucketCollector
index|[]
name|colls
init|=
name|Iterables
operator|.
name|toArray
argument_list|(
name|actualCollectors
argument_list|,
name|LeafBucketCollector
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|colls
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
return|return
name|NO_OP_COLLECTOR
return|;
case|case
literal|1
case|:
return|return
name|colls
index|[
literal|0
index|]
return|;
default|default:
return|return
operator|new
name|LeafBucketCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|s
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|LeafBucketCollector
name|c
range|:
name|colls
control|)
block|{
name|c
operator|.
name|setScorer
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|LeafBucketCollector
name|c
range|:
name|colls
control|)
block|{
name|c
operator|.
name|collect
argument_list|(
name|doc
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
comment|/**      * Collect the given doc in the given bucket.      */
DECL|method|collect
specifier|public
specifier|abstract
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|collect
specifier|public
specifier|final
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|collect
argument_list|(
name|doc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no-op by default
block|}
block|}
end_class

end_unit

