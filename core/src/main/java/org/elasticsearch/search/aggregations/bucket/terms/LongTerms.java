begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Result of the {@link TermsAggregator} when the field is some kind of whole number like a integer, long, or a date.  */
end_comment

begin_class
DECL|class|LongTerms
specifier|public
class|class
name|LongTerms
extends|extends
name|InternalMappedTerms
argument_list|<
name|LongTerms
argument_list|,
name|LongTerms
operator|.
name|Bucket
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"lterms"
decl_stmt|;
DECL|class|Bucket
specifier|public
specifier|static
class|class
name|Bucket
extends|extends
name|InternalTerms
operator|.
name|Bucket
argument_list|<
name|Bucket
argument_list|>
block|{
DECL|field|term
name|long
name|term
decl_stmt|;
DECL|method|Bucket
specifier|public
name|Bucket
parameter_list|(
name|long
name|term
parameter_list|,
name|long
name|docCount
parameter_list|,
name|InternalAggregations
name|aggregations
parameter_list|,
name|boolean
name|showDocCountError
parameter_list|,
name|long
name|docCountError
parameter_list|,
name|DocValueFormat
name|format
parameter_list|)
block|{
name|super
argument_list|(
name|docCount
argument_list|,
name|aggregations
argument_list|,
name|showDocCountError
argument_list|,
name|docCountError
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
comment|/**          * Read from a stream.          */
DECL|method|Bucket
specifier|public
name|Bucket
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|DocValueFormat
name|format
parameter_list|,
name|boolean
name|showDocCountError
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|format
argument_list|,
name|showDocCountError
argument_list|)
expr_stmt|;
name|term
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTermTo
specifier|protected
name|void
name|writeTermTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKeyAsString
specifier|public
name|String
name|getKeyAsString
parameter_list|()
block|{
return|return
name|format
operator|.
name|format
argument_list|(
name|term
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKey
specifier|public
name|Object
name|getKey
parameter_list|()
block|{
return|return
name|term
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyAsNumber
specifier|public
name|Number
name|getKeyAsNumber
parameter_list|()
block|{
return|return
name|term
return|;
block|}
annotation|@
name|Override
DECL|method|compareTerm
name|int
name|compareTerm
parameter_list|(
name|Terms
operator|.
name|Bucket
name|other
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|term
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|other
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newBucket
name|Bucket
name|newBucket
parameter_list|(
name|long
name|docCount
parameter_list|,
name|InternalAggregations
name|aggs
parameter_list|,
name|long
name|docCountError
parameter_list|)
block|{
return|return
operator|new
name|Bucket
argument_list|(
name|term
argument_list|,
name|docCount
argument_list|,
name|aggs
argument_list|,
name|showDocCountError
argument_list|,
name|docCountError
argument_list|,
name|format
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|keyToXContent
specifier|protected
specifier|final
name|XContentBuilder
name|keyToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|CommonFields
operator|.
name|KEY
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|!=
name|DocValueFormat
operator|.
name|RAW
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|CommonFields
operator|.
name|KEY_AS_STRING
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|format
operator|.
name|format
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|term
argument_list|,
operator|(
operator|(
name|Bucket
operator|)
name|obj
operator|)
operator|.
name|term
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|super
operator|.
name|hashCode
argument_list|()
argument_list|,
name|term
argument_list|)
return|;
block|}
block|}
DECL|method|LongTerms
specifier|public
name|LongTerms
parameter_list|(
name|String
name|name
parameter_list|,
name|Terms
operator|.
name|Order
name|order
parameter_list|,
name|int
name|requiredSize
parameter_list|,
name|long
name|minDocCount
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|,
name|DocValueFormat
name|format
parameter_list|,
name|int
name|shardSize
parameter_list|,
name|boolean
name|showTermDocCountError
parameter_list|,
name|long
name|otherDocCount
parameter_list|,
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
parameter_list|,
name|long
name|docCountError
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|order
argument_list|,
name|requiredSize
argument_list|,
name|minDocCount
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|,
name|format
argument_list|,
name|shardSize
argument_list|,
name|showTermDocCountError
argument_list|,
name|otherDocCount
argument_list|,
name|buckets
argument_list|,
name|docCountError
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|LongTerms
specifier|public
name|LongTerms
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|Bucket
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|LongTerms
name|create
parameter_list|(
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
parameter_list|)
block|{
return|return
operator|new
name|LongTerms
argument_list|(
name|name
argument_list|,
name|order
argument_list|,
name|requiredSize
argument_list|,
name|minDocCount
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|metaData
argument_list|,
name|format
argument_list|,
name|shardSize
argument_list|,
name|showTermDocCountError
argument_list|,
name|otherDocCount
argument_list|,
name|buckets
argument_list|,
name|docCountError
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createBucket
specifier|public
name|Bucket
name|createBucket
parameter_list|(
name|InternalAggregations
name|aggregations
parameter_list|,
name|Bucket
name|prototype
parameter_list|)
block|{
return|return
operator|new
name|Bucket
argument_list|(
name|prototype
operator|.
name|term
argument_list|,
name|prototype
operator|.
name|docCount
argument_list|,
name|aggregations
argument_list|,
name|prototype
operator|.
name|showDocCountError
argument_list|,
name|prototype
operator|.
name|docCountError
argument_list|,
name|prototype
operator|.
name|format
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|protected
name|LongTerms
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
parameter_list|,
name|long
name|docCountError
parameter_list|,
name|long
name|otherDocCount
parameter_list|)
block|{
return|return
operator|new
name|LongTerms
argument_list|(
name|name
argument_list|,
name|order
argument_list|,
name|requiredSize
argument_list|,
name|minDocCount
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|getMetaData
argument_list|()
argument_list|,
name|format
argument_list|,
name|shardSize
argument_list|,
name|showTermDocCountError
argument_list|,
name|otherDocCount
argument_list|,
name|buckets
argument_list|,
name|docCountError
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createBucketsArray
specifier|protected
name|Bucket
index|[]
name|createBucketsArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
operator|new
name|Bucket
index|[
name|size
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|doReduce
specifier|public
name|InternalAggregation
name|doReduce
parameter_list|(
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
for|for
control|(
name|InternalAggregation
name|agg
range|:
name|aggregations
control|)
block|{
if|if
condition|(
name|agg
operator|instanceof
name|DoubleTerms
condition|)
block|{
return|return
name|agg
operator|.
name|doReduce
argument_list|(
name|aggregations
argument_list|,
name|reduceContext
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|doReduce
argument_list|(
name|aggregations
argument_list|,
name|reduceContext
argument_list|)
return|;
block|}
comment|/**      * Converts a {@link LongTerms} into a {@link DoubleTerms}, returning the value of the specified long terms as doubles.      */
DECL|method|convertLongTermsToDouble
specifier|static
name|DoubleTerms
name|convertLongTermsToDouble
parameter_list|(
name|LongTerms
name|longTerms
parameter_list|,
name|DocValueFormat
name|decimalFormat
parameter_list|)
block|{
name|List
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|longTerms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DoubleTerms
operator|.
name|Bucket
argument_list|>
name|newBuckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|newBuckets
operator|.
name|add
argument_list|(
operator|new
name|DoubleTerms
operator|.
name|Bucket
argument_list|(
name|bucket
operator|.
name|getKeyAsNumber
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
operator|(
name|InternalAggregations
operator|)
name|bucket
operator|.
name|getAggregations
argument_list|()
argument_list|,
name|longTerms
operator|.
name|showTermDocCountError
argument_list|,
name|longTerms
operator|.
name|showTermDocCountError
condition|?
name|bucket
operator|.
name|getDocCountError
argument_list|()
else|:
literal|0
argument_list|,
name|decimalFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DoubleTerms
argument_list|(
name|longTerms
operator|.
name|getName
argument_list|()
argument_list|,
name|longTerms
operator|.
name|order
argument_list|,
name|longTerms
operator|.
name|requiredSize
argument_list|,
name|longTerms
operator|.
name|minDocCount
argument_list|,
name|longTerms
operator|.
name|pipelineAggregators
argument_list|()
argument_list|,
name|longTerms
operator|.
name|metaData
argument_list|,
name|longTerms
operator|.
name|format
argument_list|,
name|longTerms
operator|.
name|shardSize
argument_list|,
name|longTerms
operator|.
name|showTermDocCountError
argument_list|,
name|longTerms
operator|.
name|otherDocCount
argument_list|,
name|newBuckets
argument_list|,
name|longTerms
operator|.
name|docCountError
argument_list|)
return|;
block|}
block|}
end_class

end_unit

