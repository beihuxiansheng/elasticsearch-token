begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ToXContentToBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationPath
operator|.
name|PathElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AggregatorFactories
specifier|public
class|class
name|AggregatorFactories
extends|extends
name|ToXContentToBytes
implements|implements
name|Writeable
argument_list|<
name|AggregatorFactories
argument_list|>
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|AggregatorFactories
name|EMPTY
init|=
operator|new
name|AggregatorFactories
argument_list|(
operator|new
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
index|[
literal|0
index|]
condition|,
operator|new
name|ArrayList
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|parent
specifier|private
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
decl_stmt|;
DECL|field|factories
specifier|private
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
index|[]
name|factories
decl_stmt|;
DECL|field|pipelineAggregatorFactories
specifier|private
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|pipelineAggregatorFactories
decl_stmt|;
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|method|AggregatorFactories
specifier|private
name|AggregatorFactories
parameter_list|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
index|[]
name|factories
parameter_list|,
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|pipelineAggregators
parameter_list|)
block|{
name|this
operator|.
name|factories
operator|=
name|factories
expr_stmt|;
name|this
operator|.
name|pipelineAggregatorFactories
operator|=
name|pipelineAggregators
expr_stmt|;
block|}
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|AggregationContext
name|context
parameter_list|)
block|{
for|for
control|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|factory
range|:
name|factories
control|)
block|{
name|factory
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createPipelineAggregators
specifier|public
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|createPipelineAggregators
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PipelineAggregatorFactory
name|factory
range|:
name|this
operator|.
name|pipelineAggregatorFactories
control|)
block|{
name|pipelineAggregators
operator|.
name|add
argument_list|(
name|factory
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pipelineAggregators
return|;
block|}
comment|/**      * Create all aggregators so that they can be consumed with multiple      * buckets.      */
DECL|method|createSubAggregators
specifier|public
name|Aggregator
index|[]
name|createSubAggregators
parameter_list|(
name|Aggregator
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|Aggregator
index|[]
name|aggregators
init|=
operator|new
name|Aggregator
index|[
name|countAggregators
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|factories
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|// TODO: sometimes even sub aggregations always get called with bucket 0, eg. if
comment|// you have a terms agg under a top-level filter agg. We should have a way to
comment|// propagate the fact that only bucket 0 will be collected with single-bucket
comment|// aggs
specifier|final
name|boolean
name|collectsFromSingleBucket
init|=
literal|false
decl_stmt|;
name|aggregators
index|[
name|i
index|]
operator|=
name|factories
index|[
name|i
index|]
operator|.
name|create
argument_list|(
name|parent
argument_list|,
name|collectsFromSingleBucket
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregators
return|;
block|}
DECL|method|createTopLevelAggregators
specifier|public
name|Aggregator
index|[]
name|createTopLevelAggregators
parameter_list|()
throws|throws
name|IOException
block|{
comment|// These aggregators are going to be used with a single bucket ordinal, no need to wrap the PER_BUCKET ones
name|Aggregator
index|[]
name|aggregators
init|=
operator|new
name|Aggregator
index|[
name|factories
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|factories
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// top-level aggs only get called with bucket 0
specifier|final
name|boolean
name|collectsFromSingleBucket
init|=
literal|true
decl_stmt|;
name|aggregators
index|[
name|i
index|]
operator|=
name|factories
index|[
name|i
index|]
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|collectsFromSingleBucket
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregators
return|;
block|}
comment|/**      * @return the number of sub-aggregator factories not including pipeline      *         aggregator factories      */
DECL|method|countAggregators
specifier|public
name|int
name|countAggregators
parameter_list|()
block|{
return|return
name|factories
operator|.
name|length
return|;
block|}
comment|/**      * @return the number of pipeline aggregator factories      */
DECL|method|countPipelineAggregators
specifier|public
name|int
name|countPipelineAggregators
parameter_list|()
block|{
return|return
name|pipelineAggregatorFactories
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|setParent
name|void
name|setParent
parameter_list|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
for|for
control|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|factory
range|:
name|factories
control|)
block|{
name|factory
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
block|}
DECL|method|validate
specifier|public
name|void
name|validate
parameter_list|()
block|{
for|for
control|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|factory
range|:
name|factories
control|)
block|{
name|factory
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|PipelineAggregatorFactory
name|factory
range|:
name|pipelineAggregatorFactories
control|)
block|{
name|factory
operator|.
name|validate
argument_list|(
name|parent
argument_list|,
name|factories
argument_list|,
name|pipelineAggregatorFactories
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|names
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|factories
specifier|private
specifier|final
name|List
argument_list|<
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
argument_list|>
name|factories
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|pipelineAggregatorFactories
specifier|private
specifier|final
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|pipelineAggregatorFactories
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|skipResolveOrder
specifier|private
name|boolean
name|skipResolveOrder
decl_stmt|;
DECL|method|addAggregators
specifier|public
name|Builder
name|addAggregators
parameter_list|(
name|AggregatorFactories
name|factories
parameter_list|)
block|{
for|for
control|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|factory
range|:
name|factories
operator|.
name|factories
control|)
block|{
name|addAggregator
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PipelineAggregatorFactory
name|factory
range|:
name|factories
operator|.
name|pipelineAggregatorFactories
control|)
block|{
name|addPipelineAggregator
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addAggregator
specifier|public
name|Builder
name|addAggregator
parameter_list|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|factory
parameter_list|)
block|{
if|if
condition|(
operator|!
name|names
operator|.
name|add
argument_list|(
name|factory
operator|.
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Two sibling aggregations cannot have the same name: ["
operator|+
name|factory
operator|.
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|factories
operator|.
name|add
argument_list|(
name|factory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addPipelineAggregator
specifier|public
name|Builder
name|addPipelineAggregator
parameter_list|(
name|PipelineAggregatorFactory
name|pipelineAggregatorFactory
parameter_list|)
block|{
name|this
operator|.
name|pipelineAggregatorFactories
operator|.
name|add
argument_list|(
name|pipelineAggregatorFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * FOR TESTING ONLY          */
DECL|method|skipResolveOrder
name|Builder
name|skipResolveOrder
parameter_list|()
block|{
name|this
operator|.
name|skipResolveOrder
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|AggregatorFactories
name|build
parameter_list|()
block|{
if|if
condition|(
name|factories
operator|.
name|isEmpty
argument_list|()
operator|&&
name|pipelineAggregatorFactories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|orderedpipelineAggregators
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|skipResolveOrder
condition|)
block|{
name|orderedpipelineAggregators
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pipelineAggregatorFactories
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|orderedpipelineAggregators
operator|=
name|resolvePipelineAggregatorOrder
argument_list|(
name|this
operator|.
name|pipelineAggregatorFactories
argument_list|,
name|this
operator|.
name|factories
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AggregatorFactories
argument_list|(
name|factories
operator|.
name|toArray
argument_list|(
operator|new
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
index|[
name|factories
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|orderedpipelineAggregators
argument_list|)
return|;
block|}
DECL|method|resolvePipelineAggregatorOrder
specifier|private
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|resolvePipelineAggregatorOrder
parameter_list|(
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|pipelineAggregatorFactories
parameter_list|,
name|List
argument_list|<
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
argument_list|>
name|aggFactories
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PipelineAggregatorFactory
argument_list|>
name|pipelineAggregatorFactoriesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PipelineAggregatorFactory
name|factory
range|:
name|pipelineAggregatorFactories
control|)
block|{
name|pipelineAggregatorFactoriesMap
operator|.
name|put
argument_list|(
name|factory
operator|.
name|getName
argument_list|()
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
argument_list|>
name|aggFactoriesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|aggFactory
range|:
name|aggFactories
control|)
block|{
name|aggFactoriesMap
operator|.
name|put
argument_list|(
name|aggFactory
operator|.
name|name
argument_list|,
name|aggFactory
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|orderedPipelineAggregatorrs
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|unmarkedFactories
init|=
operator|new
name|ArrayList
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
argument_list|(
name|pipelineAggregatorFactories
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|temporarilyMarked
init|=
operator|new
name|HashSet
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|unmarkedFactories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PipelineAggregatorFactory
name|factory
init|=
name|unmarkedFactories
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|resolvePipelineAggregatorOrder
argument_list|(
name|aggFactoriesMap
argument_list|,
name|pipelineAggregatorFactoriesMap
argument_list|,
name|orderedPipelineAggregatorrs
argument_list|,
name|unmarkedFactories
argument_list|,
name|temporarilyMarked
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
return|return
name|orderedPipelineAggregatorrs
return|;
block|}
DECL|method|resolvePipelineAggregatorOrder
specifier|private
name|void
name|resolvePipelineAggregatorOrder
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
argument_list|>
name|aggFactoriesMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PipelineAggregatorFactory
argument_list|>
name|pipelineAggregatorFactoriesMap
parameter_list|,
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|orderedPipelineAggregators
parameter_list|,
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|unmarkedFactories
parameter_list|,
name|Set
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|temporarilyMarked
parameter_list|,
name|PipelineAggregatorFactory
name|factory
parameter_list|)
block|{
if|if
condition|(
name|temporarilyMarked
operator|.
name|contains
argument_list|(
name|factory
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cyclical dependancy found with pipeline aggregator ["
operator|+
name|factory
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|unmarkedFactories
operator|.
name|contains
argument_list|(
name|factory
argument_list|)
condition|)
block|{
name|temporarilyMarked
operator|.
name|add
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|String
index|[]
name|bucketsPaths
init|=
name|factory
operator|.
name|getBucketsPaths
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|bucketsPath
range|:
name|bucketsPaths
control|)
block|{
name|List
argument_list|<
name|AggregationPath
operator|.
name|PathElement
argument_list|>
name|bucketsPathElements
init|=
name|AggregationPath
operator|.
name|parse
argument_list|(
name|bucketsPath
argument_list|)
operator|.
name|getPathElements
argument_list|()
decl_stmt|;
name|String
name|firstAggName
init|=
name|bucketsPathElements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
decl_stmt|;
if|if
condition|(
name|bucketsPath
operator|.
name|equals
argument_list|(
literal|"_count"
argument_list|)
operator|||
name|bucketsPath
operator|.
name|equals
argument_list|(
literal|"_key"
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|aggFactoriesMap
operator|.
name|containsKey
argument_list|(
name|firstAggName
argument_list|)
condition|)
block|{
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|aggFactory
init|=
name|aggFactoriesMap
operator|.
name|get
argument_list|(
name|firstAggName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|bucketsPathElements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PathElement
name|pathElement
init|=
name|bucketsPathElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|aggName
init|=
name|pathElement
operator|.
name|name
decl_stmt|;
if|if
condition|(
operator|(
name|i
operator|==
name|bucketsPathElements
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|&&
operator|(
name|aggName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"_key"
argument_list|)
operator|||
name|aggName
operator|.
name|equals
argument_list|(
literal|"_count"
argument_list|)
operator|)
condition|)
block|{
break|break;
block|}
else|else
block|{
comment|// Check the non-pipeline sub-aggregator
comment|// factories
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
index|[]
name|subFactories
init|=
name|aggFactory
operator|.
name|factories
operator|.
name|factories
decl_stmt|;
name|boolean
name|foundSubFactory
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|subFactory
range|:
name|subFactories
control|)
block|{
if|if
condition|(
name|aggName
operator|.
name|equals
argument_list|(
name|subFactory
operator|.
name|name
argument_list|)
condition|)
block|{
name|aggFactory
operator|=
name|subFactory
expr_stmt|;
name|foundSubFactory
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|// Check the pipeline sub-aggregator factories
if|if
condition|(
operator|!
name|foundSubFactory
operator|&&
operator|(
name|i
operator|==
name|bucketsPathElements
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|subPipelineFactories
init|=
name|aggFactory
operator|.
name|factories
operator|.
name|pipelineAggregatorFactories
decl_stmt|;
for|for
control|(
name|PipelineAggregatorFactory
name|subFactory
range|:
name|subPipelineFactories
control|)
block|{
if|if
condition|(
name|aggName
operator|.
name|equals
argument_list|(
name|subFactory
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|foundSubFactory
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|foundSubFactory
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No aggregation ["
operator|+
name|aggName
operator|+
literal|"] found for path ["
operator|+
name|bucketsPath
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
continue|continue;
block|}
else|else
block|{
name|PipelineAggregatorFactory
name|matchingFactory
init|=
name|pipelineAggregatorFactoriesMap
operator|.
name|get
argument_list|(
name|firstAggName
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchingFactory
operator|!=
literal|null
condition|)
block|{
name|resolvePipelineAggregatorOrder
argument_list|(
name|aggFactoriesMap
argument_list|,
name|pipelineAggregatorFactoriesMap
argument_list|,
name|orderedPipelineAggregators
argument_list|,
name|unmarkedFactories
argument_list|,
name|temporarilyMarked
argument_list|,
name|matchingFactory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No aggregation found for path ["
operator|+
name|bucketsPath
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
name|unmarkedFactories
operator|.
name|remove
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|temporarilyMarked
operator|.
name|remove
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|orderedPipelineAggregators
operator|.
name|add
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAggregatorFactories
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
index|[]
name|getAggregatorFactories
parameter_list|()
block|{
return|return
name|this
operator|.
name|factories
operator|.
name|toArray
argument_list|(
operator|new
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
index|[
name|this
operator|.
name|factories
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getPipelineAggregatorFactories
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|getPipelineAggregatorFactories
parameter_list|()
block|{
return|return
name|this
operator|.
name|pipelineAggregatorFactories
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|AggregatorFactories
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|factoriesSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
index|[]
name|factoriesList
init|=
operator|new
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
index|[
name|factoriesSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|factoriesSize
condition|;
name|i
operator|++
control|)
block|{
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|factory
init|=
name|in
operator|.
name|readAggregatorFactory
argument_list|()
decl_stmt|;
name|factoriesList
index|[
name|i
index|]
operator|=
name|factory
expr_stmt|;
block|}
name|int
name|pipelineFactoriesSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
name|pipelineAggregatorFactoriesList
init|=
operator|new
name|ArrayList
argument_list|<
name|PipelineAggregatorFactory
argument_list|>
argument_list|(
name|pipelineFactoriesSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pipelineFactoriesSize
condition|;
name|i
operator|++
control|)
block|{
name|PipelineAggregatorFactory
name|factory
init|=
name|in
operator|.
name|readPipelineAggregatorFactory
argument_list|()
decl_stmt|;
name|pipelineAggregatorFactoriesList
operator|.
name|add
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
name|AggregatorFactories
name|aggregatorFactories
init|=
operator|new
name|AggregatorFactories
argument_list|(
name|factoriesList
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|pipelineAggregatorFactoriesList
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|aggregatorFactories
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|factories
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|factory
range|:
name|factories
control|)
block|{
name|out
operator|.
name|writeAggregatorFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|pipelineAggregatorFactories
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PipelineAggregatorFactory
name|factory
range|:
name|pipelineAggregatorFactories
control|)
block|{
name|out
operator|.
name|writePipelineAggregatorFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|factories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|subAgg
range|:
name|factories
control|)
block|{
name|subAgg
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pipelineAggregatorFactories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PipelineAggregatorFactory
name|subAgg
range|:
name|pipelineAggregatorFactories
control|)
block|{
name|subAgg
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|Arrays
operator|.
name|hashCode
argument_list|(
name|factories
argument_list|)
argument_list|,
name|pipelineAggregatorFactories
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|AggregatorFactories
name|other
init|=
operator|(
name|AggregatorFactories
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|deepEquals
argument_list|(
name|factories
argument_list|,
name|other
operator|.
name|factories
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|pipelineAggregatorFactories
argument_list|,
name|other
operator|.
name|pipelineAggregatorFactories
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

