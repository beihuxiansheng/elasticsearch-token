begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Common superclass for results of the terms aggregation on mapped fields.  */
end_comment

begin_class
DECL|class|InternalMappedTerms
specifier|public
specifier|abstract
class|class
name|InternalMappedTerms
parameter_list|<
name|A
extends|extends
name|InternalTerms
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
parameter_list|,
name|B
extends|extends
name|InternalTerms
operator|.
name|Bucket
parameter_list|<
name|B
parameter_list|>
parameter_list|>
extends|extends
name|InternalTerms
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
block|{
DECL|field|format
specifier|protected
specifier|final
name|DocValueFormat
name|format
decl_stmt|;
DECL|field|shardSize
specifier|protected
specifier|final
name|int
name|shardSize
decl_stmt|;
DECL|field|showTermDocCountError
specifier|protected
specifier|final
name|boolean
name|showTermDocCountError
decl_stmt|;
DECL|field|otherDocCount
specifier|protected
specifier|final
name|long
name|otherDocCount
decl_stmt|;
DECL|field|buckets
specifier|protected
specifier|final
name|List
argument_list|<
name|B
argument_list|>
name|buckets
decl_stmt|;
DECL|field|bucketMap
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|B
argument_list|>
name|bucketMap
decl_stmt|;
DECL|field|docCountError
specifier|protected
name|long
name|docCountError
decl_stmt|;
DECL|method|InternalMappedTerms
specifier|protected
name|InternalMappedTerms
parameter_list|(
name|String
name|name
parameter_list|,
name|Terms
operator|.
name|Order
name|order
parameter_list|,
name|int
name|requiredSize
parameter_list|,
name|long
name|minDocCount
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|,
name|DocValueFormat
name|format
parameter_list|,
name|int
name|shardSize
parameter_list|,
name|boolean
name|showTermDocCountError
parameter_list|,
name|long
name|otherDocCount
parameter_list|,
name|List
argument_list|<
name|B
argument_list|>
name|buckets
parameter_list|,
name|long
name|docCountError
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|order
argument_list|,
name|requiredSize
argument_list|,
name|minDocCount
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|shardSize
operator|=
name|shardSize
expr_stmt|;
name|this
operator|.
name|showTermDocCountError
operator|=
name|showTermDocCountError
expr_stmt|;
name|this
operator|.
name|otherDocCount
operator|=
name|otherDocCount
expr_stmt|;
name|this
operator|.
name|docCountError
operator|=
name|docCountError
expr_stmt|;
name|this
operator|.
name|buckets
operator|=
name|buckets
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|InternalMappedTerms
specifier|protected
name|InternalMappedTerms
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|Bucket
operator|.
name|Reader
argument_list|<
name|B
argument_list|>
name|bucketReader
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|docCountError
operator|=
name|in
operator|.
name|readZLong
argument_list|()
expr_stmt|;
name|format
operator|=
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|shardSize
operator|=
name|readSize
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|showTermDocCountError
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|otherDocCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|buckets
operator|=
name|in
operator|.
name|readList
argument_list|(
name|stream
lambda|->
name|bucketReader
operator|.
name|read
argument_list|(
name|stream
argument_list|,
name|format
argument_list|,
name|showTermDocCountError
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTermTypeInfoTo
specifier|protected
specifier|final
name|void
name|writeTermTypeInfoTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeZLong
argument_list|(
name|docCountError
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|writeSize
argument_list|(
name|shardSize
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|showTermDocCountError
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|otherDocCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeList
argument_list|(
name|buckets
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocCountError
specifier|protected
name|void
name|setDocCountError
parameter_list|(
name|long
name|docCountError
parameter_list|)
block|{
name|this
operator|.
name|docCountError
operator|=
name|docCountError
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getShardSize
specifier|protected
name|int
name|getShardSize
parameter_list|()
block|{
return|return
name|shardSize
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCountError
specifier|public
name|long
name|getDocCountError
parameter_list|()
block|{
return|return
name|docCountError
return|;
block|}
annotation|@
name|Override
DECL|method|getSumOfOtherDocCounts
specifier|public
name|long
name|getSumOfOtherDocCounts
parameter_list|()
block|{
return|return
name|otherDocCount
return|;
block|}
annotation|@
name|Override
DECL|method|getBuckets
specifier|public
name|List
argument_list|<
name|B
argument_list|>
name|getBuckets
parameter_list|()
block|{
return|return
name|buckets
return|;
block|}
annotation|@
name|Override
DECL|method|getBucketByKey
specifier|public
name|B
name|getBucketByKey
parameter_list|(
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|bucketMap
operator|==
literal|null
condition|)
block|{
name|bucketMap
operator|=
name|buckets
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Bucket
operator|::
name|getKeyAsString
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|bucketMap
operator|.
name|get
argument_list|(
name|term
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|InternalMappedTerms
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|that
init|=
operator|(
name|InternalMappedTerms
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|super
operator|.
name|doEquals
argument_list|(
name|obj
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|buckets
argument_list|,
name|that
operator|.
name|buckets
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|format
argument_list|,
name|that
operator|.
name|format
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|otherDocCount
argument_list|,
name|that
operator|.
name|otherDocCount
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|showTermDocCountError
argument_list|,
name|that
operator|.
name|showTermDocCountError
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|shardSize
argument_list|,
name|that
operator|.
name|shardSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|super
operator|.
name|doHashCode
argument_list|()
argument_list|,
name|buckets
argument_list|,
name|format
argument_list|,
name|otherDocCount
argument_list|,
name|showTermDocCountError
argument_list|,
name|shardSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|public
specifier|final
name|XContentBuilder
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doXContentCommon
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|docCountError
argument_list|,
name|otherDocCount
argument_list|,
name|buckets
argument_list|)
return|;
block|}
block|}
end_class

end_unit

