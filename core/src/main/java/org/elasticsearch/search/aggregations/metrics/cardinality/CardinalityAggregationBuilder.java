begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.cardinality
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|cardinality
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceParserHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|CardinalityAggregationBuilder
specifier|public
specifier|final
class|class
name|CardinalityAggregationBuilder
extends|extends
name|ValuesSourceAggregationBuilder
operator|.
name|LeafOnly
argument_list|<
name|ValuesSource
argument_list|,
name|CardinalityAggregationBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"cardinality"
decl_stmt|;
DECL|field|TYPE
specifier|private
specifier|static
specifier|final
name|Type
name|TYPE
init|=
operator|new
name|Type
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
DECL|field|REHASH
specifier|private
specifier|static
specifier|final
name|ParseField
name|REHASH
init|=
operator|new
name|ParseField
argument_list|(
literal|"rehash"
argument_list|)
operator|.
name|withAllDeprecated
argument_list|(
literal|"no replacement - values will always be rehashed"
argument_list|)
decl_stmt|;
DECL|field|PRECISION_THRESHOLD_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PRECISION_THRESHOLD_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"precision_threshold"
argument_list|)
decl_stmt|;
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|ObjectParser
argument_list|<
name|CardinalityAggregationBuilder
argument_list|,
name|QueryParseContext
argument_list|>
name|PARSER
decl_stmt|;
static|static
block|{
name|PARSER
operator|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
name|CardinalityAggregationBuilder
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|ValuesSourceParserHelper
operator|.
name|declareAnyFields
argument_list|(
name|PARSER
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareLong
argument_list|(
name|CardinalityAggregationBuilder
operator|::
name|precisionThreshold
argument_list|,
name|CardinalityAggregationBuilder
operator|.
name|PRECISION_THRESHOLD_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareLong
argument_list|(
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
comment|/*ignore*/
block|}
argument_list|,
name|REHASH
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|AggregationBuilder
name|parse
parameter_list|(
name|String
name|aggregationName
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parse
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|CardinalityAggregationBuilder
argument_list|(
name|aggregationName
argument_list|,
literal|null
argument_list|)
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|field|precisionThreshold
specifier|private
name|Long
name|precisionThreshold
init|=
literal|null
decl_stmt|;
DECL|method|CardinalityAggregationBuilder
specifier|public
name|CardinalityAggregationBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|ValueType
name|targetValueType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|TYPE
argument_list|,
name|ValuesSourceType
operator|.
name|ANY
argument_list|,
name|targetValueType
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|CardinalityAggregationBuilder
specifier|public
name|CardinalityAggregationBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|TYPE
argument_list|,
name|ValuesSourceType
operator|.
name|ANY
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|precisionThreshold
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|innerWriteTo
specifier|protected
name|void
name|innerWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasPrecisionThreshold
init|=
name|precisionThreshold
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasPrecisionThreshold
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasPrecisionThreshold
condition|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|precisionThreshold
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serializeTargetValueType
specifier|protected
name|boolean
name|serializeTargetValueType
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Set a precision threshold. Higher values improve accuracy but also      * increase memory usage.      */
DECL|method|precisionThreshold
specifier|public
name|CardinalityAggregationBuilder
name|precisionThreshold
parameter_list|(
name|long
name|precisionThreshold
parameter_list|)
block|{
if|if
condition|(
name|precisionThreshold
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[precisionThreshold] must be greater than or equal to 0. Found ["
operator|+
name|precisionThreshold
operator|+
literal|"] in ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|precisionThreshold
operator|=
name|precisionThreshold
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Get the precision threshold. Higher values improve accuracy but also      * increase memory usage. Will return<code>null</code> if the      * precisionThreshold has not been set yet.      */
DECL|method|precisionThreshold
specifier|public
name|Long
name|precisionThreshold
parameter_list|()
block|{
return|return
name|precisionThreshold
return|;
block|}
comment|/**      * @deprecated no replacement - values will always be rehashed      */
annotation|@
name|Deprecated
DECL|method|rehash
specifier|public
name|void
name|rehash
parameter_list|(
name|boolean
name|rehash
parameter_list|)
block|{
comment|// Deprecated all values are already rehashed so do nothing
block|}
annotation|@
name|Override
DECL|method|innerBuild
specifier|protected
name|CardinalityAggregatorFactory
name|innerBuild
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|ValuesSourceConfig
argument_list|<
name|ValuesSource
argument_list|>
name|config
parameter_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|Builder
name|subFactoriesBuilder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CardinalityAggregatorFactory
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|config
argument_list|,
name|precisionThreshold
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|subFactoriesBuilder
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|public
name|XContentBuilder
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|precisionThreshold
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|PRECISION_THRESHOLD_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|precisionThreshold
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|innerHashCode
specifier|protected
name|int
name|innerHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|precisionThreshold
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|innerEquals
specifier|protected
name|boolean
name|innerEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|CardinalityAggregationBuilder
name|other
init|=
operator|(
name|CardinalityAggregationBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|precisionThreshold
argument_list|,
name|other
operator|.
name|precisionThreshold
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
block|}
end_class

end_unit

