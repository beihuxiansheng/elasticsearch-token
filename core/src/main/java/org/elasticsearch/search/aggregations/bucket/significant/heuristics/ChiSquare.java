begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant.heuristics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|ChiSquare
specifier|public
class|class
name|ChiSquare
extends|extends
name|NXYSignificanceHeuristic
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"chi_square"
decl_stmt|;
DECL|method|ChiSquare
specifier|public
name|ChiSquare
parameter_list|(
name|boolean
name|includeNegatives
parameter_list|,
name|boolean
name|backgroundIsSuperset
parameter_list|)
block|{
name|super
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|ChiSquare
specifier|public
name|ChiSquare
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|ChiSquare
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|NAME
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|super
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Calculates Chi^2      * see "Information Retrieval", Manning et al., Eq. 13.19      */
annotation|@
name|Override
DECL|method|getScore
specifier|public
name|double
name|getScore
parameter_list|(
name|long
name|subsetFreq
parameter_list|,
name|long
name|subsetSize
parameter_list|,
name|long
name|supersetFreq
parameter_list|,
name|long
name|supersetSize
parameter_list|)
block|{
name|Frequencies
name|frequencies
init|=
name|computeNxys
argument_list|(
name|subsetFreq
argument_list|,
name|subsetSize
argument_list|,
name|supersetFreq
argument_list|,
name|supersetSize
argument_list|,
literal|"ChiSquare"
argument_list|)
decl_stmt|;
comment|// here we check if the term appears more often in subset than in background without subset.
if|if
condition|(
operator|!
name|includeNegatives
operator|&&
name|frequencies
operator|.
name|N11
operator|/
name|frequencies
operator|.
name|N_1
operator|<
name|frequencies
operator|.
name|N10
operator|/
name|frequencies
operator|.
name|N_0
condition|)
block|{
return|return
name|Double
operator|.
name|NEGATIVE_INFINITY
return|;
block|}
return|return
operator|(
name|frequencies
operator|.
name|N
operator|*
name|Math
operator|.
name|pow
argument_list|(
operator|(
name|frequencies
operator|.
name|N11
operator|*
name|frequencies
operator|.
name|N00
operator|-
name|frequencies
operator|.
name|N01
operator|*
name|frequencies
operator|.
name|N10
operator|)
argument_list|,
literal|2.0
argument_list|)
operator|/
operator|(
operator|(
name|frequencies
operator|.
name|N_1
operator|)
operator|*
operator|(
name|frequencies
operator|.
name|N1_
operator|)
operator|*
operator|(
name|frequencies
operator|.
name|N0_
operator|)
operator|*
operator|(
name|frequencies
operator|.
name|N_0
operator|)
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|super
operator|.
name|build
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|field|PARSER
specifier|public
specifier|static
specifier|final
name|SignificanceHeuristicParser
name|PARSER
init|=
operator|new
name|NXYParser
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SignificanceHeuristic
name|newHeuristic
parameter_list|(
name|boolean
name|includeNegatives
parameter_list|,
name|boolean
name|backgroundIsSuperset
parameter_list|)
block|{
return|return
operator|new
name|ChiSquare
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|class|ChiSquareBuilder
specifier|public
specifier|static
class|class
name|ChiSquareBuilder
extends|extends
name|NXYSignificanceHeuristic
operator|.
name|NXYBuilder
block|{
DECL|method|ChiSquareBuilder
specifier|public
name|ChiSquareBuilder
parameter_list|(
name|boolean
name|includeNegatives
parameter_list|,
name|boolean
name|backgroundIsSuperset
parameter_list|)
block|{
name|super
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|super
operator|.
name|build
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

