begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline.bucketmetrics.stats.extended
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|stats
operator|.
name|extended
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|BucketMetricsParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ExtendedStatsBucketParser
specifier|public
class|class
name|ExtendedStatsBucketParser
extends|extends
name|BucketMetricsParser
block|{
DECL|field|SIGMA
specifier|static
specifier|final
name|ParseField
name|SIGMA
init|=
operator|new
name|ParseField
argument_list|(
literal|"sigma"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|buildFactory
specifier|protected
name|ExtendedStatsBucketPipelineAggregationBuilder
name|buildFactory
parameter_list|(
name|String
name|pipelineAggregatorName
parameter_list|,
name|String
name|bucketsPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|ExtendedStatsBucketPipelineAggregationBuilder
name|factory
init|=
operator|new
name|ExtendedStatsBucketPipelineAggregationBuilder
argument_list|(
name|pipelineAggregatorName
argument_list|,
name|bucketsPath
argument_list|)
decl_stmt|;
name|Double
name|sigma
init|=
operator|(
name|Double
operator|)
name|params
operator|.
name|get
argument_list|(
name|SIGMA
operator|.
name|getPreferredName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sigma
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|sigma
argument_list|(
name|sigma
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
annotation|@
name|Override
DECL|method|token
specifier|protected
name|boolean
name|token
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|QueryParseContext
name|context
parameter_list|,
name|String
name|field
parameter_list|,
name|XContentParser
operator|.
name|Token
name|token
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|context
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|field
argument_list|,
name|SIGMA
argument_list|)
operator|&&
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|SIGMA
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|parser
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

