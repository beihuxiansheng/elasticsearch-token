begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Base implementation of a {@link AggregationBuilder}.  */
end_comment

begin_class
DECL|class|AbstractAggregationBuilder
specifier|public
specifier|abstract
class|class
name|AbstractAggregationBuilder
parameter_list|<
name|AB
extends|extends
name|AbstractAggregationBuilder
parameter_list|<
name|AB
parameter_list|>
parameter_list|>
extends|extends
name|AggregationBuilder
block|{
DECL|field|metaData
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
decl_stmt|;
comment|/**      * Constructs a new aggregation builder.      *      * @param name  The aggregation name      */
DECL|method|AbstractAggregationBuilder
specifier|public
name|AbstractAggregationBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|AbstractAggregationBuilder
specifier|protected
name|AbstractAggregationBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|factoriesBuilder
operator|=
operator|new
name|AggregatorFactories
operator|.
name|Builder
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|metaData
operator|=
name|in
operator|.
name|readMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
specifier|final
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|factoriesBuilder
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeMap
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|doWriteTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doWriteTo
specifier|protected
specifier|abstract
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|subAggregation
specifier|public
name|AB
name|subAggregation
parameter_list|(
name|AggregationBuilder
name|aggregation
parameter_list|)
block|{
if|if
condition|(
name|aggregation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[aggregation] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|factoriesBuilder
operator|.
name|addAggregator
argument_list|(
name|aggregation
argument_list|)
expr_stmt|;
return|return
operator|(
name|AB
operator|)
name|this
return|;
block|}
comment|/**      * Add a sub aggregation to this aggregation.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|subAggregation
specifier|public
name|AB
name|subAggregation
parameter_list|(
name|PipelineAggregationBuilder
name|aggregation
parameter_list|)
block|{
if|if
condition|(
name|aggregation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[aggregation] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|factoriesBuilder
operator|.
name|addPipelineAggregator
argument_list|(
name|aggregation
argument_list|)
expr_stmt|;
return|return
operator|(
name|AB
operator|)
name|this
return|;
block|}
comment|/**      * Registers sub-factories with this factory. The sub-factory will be      * responsible for the creation of sub-aggregators under the aggregator      * created by this factory.      *      * @param subFactories      *            The sub-factories      * @return this factory (fluent interface)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|subAggregations
specifier|public
name|AB
name|subAggregations
parameter_list|(
name|AggregatorFactories
operator|.
name|Builder
name|subFactories
parameter_list|)
block|{
if|if
condition|(
name|subFactories
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[subFactories] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|factoriesBuilder
operator|=
name|subFactories
expr_stmt|;
return|return
operator|(
name|AB
operator|)
name|this
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|setMetaData
specifier|public
name|AB
name|setMetaData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[metaData] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
return|return
operator|(
name|AB
operator|)
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getMetaData
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getMetaData
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
specifier|final
name|String
name|getWriteableName
parameter_list|()
block|{
comment|// We always use the type of the aggregation as the writeable name
return|return
name|getType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
specifier|final
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|build
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|factory
init|=
name|doBuild
argument_list|(
name|context
argument_list|,
name|parent
argument_list|,
name|factoriesBuilder
argument_list|)
decl_stmt|;
return|return
name|factory
return|;
block|}
DECL|method|doBuild
specifier|protected
specifier|abstract
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|doBuild
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|AggregatorFactories
operator|.
name|Builder
name|subfactoriesBuilder
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|toXContent
specifier|public
specifier|final
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|metaData
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"meta"
argument_list|,
name|this
operator|.
name|metaData
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|internalXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|factoriesBuilder
operator|!=
literal|null
operator|&&
operator|(
name|factoriesBuilder
operator|.
name|count
argument_list|()
operator|)
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"aggregations"
argument_list|)
expr_stmt|;
name|factoriesBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|internalXContent
specifier|protected
specifier|abstract
name|XContentBuilder
name|internalXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|factoriesBuilder
argument_list|,
name|metaData
argument_list|,
name|name
argument_list|,
name|doHashCode
argument_list|()
argument_list|)
return|;
block|}
DECL|method|doHashCode
specifier|protected
specifier|abstract
name|int
name|doHashCode
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AbstractAggregationBuilder
argument_list|<
name|AB
argument_list|>
name|other
init|=
operator|(
name|AbstractAggregationBuilder
argument_list|<
name|AB
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|other
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|metaData
argument_list|,
name|other
operator|.
name|metaData
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|factoriesBuilder
argument_list|,
name|other
operator|.
name|factoriesBuilder
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|doEquals
argument_list|(
name|obj
argument_list|)
return|;
block|}
DECL|method|doEquals
specifier|protected
specifier|abstract
name|boolean
name|doEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
function_decl|;
block|}
end_class

end_unit

