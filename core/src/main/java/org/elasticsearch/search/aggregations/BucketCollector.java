begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_comment
comment|/**  * A Collector that can collect data in separate buckets.  */
end_comment

begin_class
DECL|class|BucketCollector
specifier|public
specifier|abstract
class|class
name|BucketCollector
implements|implements
name|Collector
block|{
DECL|field|NO_OP_COLLECTOR
specifier|public
specifier|final
specifier|static
name|BucketCollector
name|NO_OP_COLLECTOR
init|=
operator|new
name|BucketCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LeafBucketCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|reader
parameter_list|)
block|{
return|return
name|LeafBucketCollector
operator|.
name|NO_OP_COLLECTOR
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCollection
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no-op
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCollection
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no-op
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Wrap the given collectors into a single instance.      */
DECL|method|wrap
specifier|public
specifier|static
name|BucketCollector
name|wrap
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|BucketCollector
argument_list|>
name|collectorList
parameter_list|)
block|{
specifier|final
name|BucketCollector
index|[]
name|collectors
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|collectorList
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|toArray
argument_list|(
name|size
lambda|->
operator|new
name|BucketCollector
index|[
name|size
index|]
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|collectors
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
return|return
name|NO_OP_COLLECTOR
return|;
case|case
literal|1
case|:
return|return
name|collectors
index|[
literal|0
index|]
return|;
default|default:
return|return
operator|new
name|BucketCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LeafBucketCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|LeafBucketCollector
argument_list|>
name|leafCollectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BucketCollector
name|c
range|:
name|collectors
control|)
block|{
name|leafCollectors
operator|.
name|add
argument_list|(
name|c
operator|.
name|getLeafCollector
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|LeafBucketCollector
operator|.
name|wrap
argument_list|(
name|leafCollectors
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCollection
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|BucketCollector
name|collector
range|:
name|collectors
control|)
block|{
name|collector
operator|.
name|preCollection
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCollection
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|BucketCollector
name|collector
range|:
name|collectors
control|)
block|{
name|collector
operator|.
name|postCollection
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
for|for
control|(
name|BucketCollector
name|collector
range|:
name|collectors
control|)
block|{
if|if
condition|(
name|collector
operator|.
name|needsScores
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|collectors
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
specifier|abstract
name|LeafBucketCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Pre collection callback.      */
DECL|method|preCollection
specifier|public
specifier|abstract
name|void
name|preCollection
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Post-collection callback.      */
DECL|method|postCollection
specifier|public
specifier|abstract
name|void
name|postCollection
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

