begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexGeoPointFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|BooleanFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|DateFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ip
operator|.
name|IpFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|format
operator|.
name|ValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ValuesSourceAggregatorFactory
specifier|public
specifier|abstract
class|class
name|ValuesSourceAggregatorFactory
parameter_list|<
name|VS
extends|extends
name|ValuesSource
parameter_list|>
extends|extends
name|AggregatorFactory
block|{
DECL|class|LeafOnly
specifier|public
specifier|static
specifier|abstract
class|class
name|LeafOnly
parameter_list|<
name|VS
extends|extends
name|ValuesSource
parameter_list|>
extends|extends
name|ValuesSourceAggregatorFactory
argument_list|<
name|VS
argument_list|>
block|{
DECL|method|LeafOnly
specifier|protected
name|LeafOnly
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|ValuesSourceParser
operator|.
name|Input
argument_list|<
name|VS
argument_list|>
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|LeafOnly
specifier|protected
name|LeafOnly
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|Class
argument_list|<
name|VS
argument_list|>
name|valuesSourceType
parameter_list|,
name|ValueType
name|targetValueType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|valuesSourceType
argument_list|,
name|targetValueType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|subFactories
specifier|public
name|AggregatorFactory
name|subFactories
parameter_list|(
name|AggregatorFactories
name|subFactories
parameter_list|)
block|{
throw|throw
operator|new
name|AggregationInitializationException
argument_list|(
literal|"Aggregator ["
operator|+
name|name
operator|+
literal|"] of type ["
operator|+
name|type
operator|+
literal|"] cannot accept sub-aggregations"
argument_list|)
throw|;
block|}
block|}
DECL|field|valuesSourceType
specifier|private
specifier|final
name|Class
argument_list|<
name|VS
argument_list|>
name|valuesSourceType
decl_stmt|;
DECL|field|targetValueType
specifier|private
specifier|final
name|ValueType
name|targetValueType
decl_stmt|;
DECL|field|field
specifier|private
name|String
name|field
init|=
literal|null
decl_stmt|;
DECL|field|script
specifier|private
name|Script
name|script
init|=
literal|null
decl_stmt|;
DECL|field|valueType
specifier|private
name|ValueType
name|valueType
init|=
literal|null
decl_stmt|;
DECL|field|format
specifier|private
name|String
name|format
init|=
literal|null
decl_stmt|;
DECL|field|missing
specifier|private
name|Object
name|missing
init|=
literal|null
decl_stmt|;
DECL|field|config
specifier|protected
name|ValuesSourceConfig
argument_list|<
name|VS
argument_list|>
name|config
decl_stmt|;
DECL|field|timeZone
specifier|private
name|DateTimeZone
name|timeZone
decl_stmt|;
comment|// NORELEASE remove this method when aggs refactoring complete
comment|/**      * This constructor remains here until all subclasses have been moved to the      * new constructor. This also means moving from using      * {@link ValuesSourceParser} to using {@link AbstractValuesSourceParser}.      */
annotation|@
name|Deprecated
DECL|method|ValuesSourceAggregatorFactory
specifier|protected
name|ValuesSourceAggregatorFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|ValuesSourceParser
operator|.
name|Input
argument_list|<
name|VS
argument_list|>
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|valuesSourceType
operator|=
name|input
operator|.
name|valuesSourceType
expr_stmt|;
name|this
operator|.
name|targetValueType
operator|=
name|input
operator|.
name|targetValueType
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|input
operator|.
name|field
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|input
operator|.
name|script
expr_stmt|;
name|this
operator|.
name|valueType
operator|=
name|input
operator|.
name|valueType
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|input
operator|.
name|format
expr_stmt|;
name|this
operator|.
name|missing
operator|=
name|input
operator|.
name|missing
expr_stmt|;
name|this
operator|.
name|timeZone
operator|=
name|input
operator|.
name|timezone
expr_stmt|;
block|}
DECL|method|ValuesSourceAggregatorFactory
specifier|protected
name|ValuesSourceAggregatorFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|Class
argument_list|<
name|VS
argument_list|>
name|valuesSourceType
parameter_list|,
name|ValueType
name|targetValueType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|valuesSourceType
operator|=
name|valuesSourceType
expr_stmt|;
name|this
operator|.
name|targetValueType
operator|=
name|targetValueType
expr_stmt|;
block|}
DECL|method|field
specifier|public
name|void
name|field
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|script
specifier|public
name|void
name|script
parameter_list|(
name|Script
name|script
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
DECL|method|valueType
specifier|public
name|void
name|valueType
parameter_list|(
name|ValueType
name|valueType
parameter_list|)
block|{
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
block|}
DECL|method|format
specifier|public
name|void
name|format
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
block|}
DECL|method|missing
specifier|public
name|void
name|missing
parameter_list|(
name|Object
name|missing
parameter_list|)
block|{
name|this
operator|.
name|missing
operator|=
name|missing
expr_stmt|;
block|}
DECL|method|timeZone
specifier|public
name|void
name|timeZone
parameter_list|(
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doInit
specifier|public
name|void
name|doInit
parameter_list|(
name|AggregationContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
operator|||
operator|!
name|config
operator|.
name|valid
argument_list|()
condition|)
block|{
name|resolveValuesSourceConfigFromAncestors
argument_list|(
name|name
argument_list|,
name|this
operator|.
name|parent
argument_list|,
name|config
operator|.
name|valueSourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createInternal
specifier|public
name|Aggregator
name|createInternal
parameter_list|(
name|AggregationContext
name|context
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|boolean
name|collectsFromSingleBucket
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|VS
name|vs
init|=
name|context
operator|.
name|valuesSource
argument_list|(
name|config
argument_list|,
name|context
operator|.
name|searchContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|vs
operator|==
literal|null
condition|)
block|{
return|return
name|createUnmapped
argument_list|(
name|context
argument_list|,
name|parent
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
return|return
name|doCreateInternal
argument_list|(
name|vs
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|collectsFromSingleBucket
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doValidate
specifier|public
name|void
name|doValidate
parameter_list|()
block|{     }
DECL|method|config
specifier|public
name|ValuesSourceConfig
argument_list|<
name|VS
argument_list|>
name|config
parameter_list|(
name|AggregationContext
name|context
parameter_list|)
block|{
name|ValueType
name|valueType
init|=
name|this
operator|.
name|valueType
operator|!=
literal|null
condition|?
name|this
operator|.
name|valueType
else|:
name|targetValueType
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
name|ValuesSourceConfig
argument_list|<
name|VS
argument_list|>
name|config
init|=
operator|new
name|ValuesSourceConfig
argument_list|(
name|ValuesSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|config
operator|.
name|format
operator|=
name|resolveFormat
argument_list|(
literal|null
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
name|Class
name|valuesSourceType
init|=
name|valueType
operator|!=
literal|null
condition|?
operator|(
name|Class
argument_list|<
name|VS
argument_list|>
operator|)
name|valueType
operator|.
name|getValuesSourceType
argument_list|()
else|:
name|this
operator|.
name|valuesSourceType
decl_stmt|;
if|if
condition|(
name|valuesSourceType
operator|==
literal|null
operator|||
name|valuesSourceType
operator|==
name|ValuesSource
operator|.
name|class
condition|)
block|{
comment|// the specific value source type is undefined, but for scripts,
comment|// we need to have a specific value source
comment|// type to know how to handle the script values, so we fallback
comment|// on Bytes
name|valuesSourceType
operator|=
name|ValuesSource
operator|.
name|Bytes
operator|.
name|class
expr_stmt|;
block|}
name|ValuesSourceConfig
argument_list|<
name|VS
argument_list|>
name|config
init|=
operator|new
name|ValuesSourceConfig
argument_list|<
name|VS
argument_list|>
argument_list|(
name|valuesSourceType
argument_list|)
decl_stmt|;
name|config
operator|.
name|missing
operator|=
name|missing
expr_stmt|;
name|config
operator|.
name|format
operator|=
name|resolveFormat
argument_list|(
name|format
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|config
operator|.
name|script
operator|=
name|createScript
argument_list|(
name|script
argument_list|,
name|context
operator|.
name|searchContext
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|scriptValueType
operator|=
name|valueType
expr_stmt|;
return|return
name|config
return|;
block|}
name|MappedFieldType
name|fieldType
init|=
name|context
operator|.
name|searchContext
argument_list|()
operator|.
name|smartNameFieldTypeFromAnyType
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|==
literal|null
condition|)
block|{
name|Class
argument_list|<
name|VS
argument_list|>
name|valuesSourceType
init|=
name|valueType
operator|!=
literal|null
condition|?
operator|(
name|Class
argument_list|<
name|VS
argument_list|>
operator|)
name|valueType
operator|.
name|getValuesSourceType
argument_list|()
else|:
name|this
operator|.
name|valuesSourceType
decl_stmt|;
name|ValuesSourceConfig
argument_list|<
name|VS
argument_list|>
name|config
init|=
operator|new
name|ValuesSourceConfig
argument_list|<>
argument_list|(
name|valuesSourceType
argument_list|)
decl_stmt|;
name|config
operator|.
name|missing
operator|=
name|missing
expr_stmt|;
name|config
operator|.
name|format
operator|=
name|resolveFormat
argument_list|(
name|format
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|config
operator|.
name|unmapped
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|valueType
operator|!=
literal|null
condition|)
block|{
comment|// todo do we really need this for unmapped?
name|config
operator|.
name|scriptValueType
operator|=
name|valueType
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
init|=
name|context
operator|.
name|searchContext
argument_list|()
operator|.
name|fieldData
argument_list|()
operator|.
name|getForField
argument_list|(
name|fieldType
argument_list|)
decl_stmt|;
name|ValuesSourceConfig
name|config
decl_stmt|;
if|if
condition|(
name|valuesSourceType
operator|==
name|ValuesSource
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|indexFieldData
operator|instanceof
name|IndexNumericFieldData
condition|)
block|{
name|config
operator|=
operator|new
name|ValuesSourceConfig
argument_list|<>
argument_list|(
name|ValuesSource
operator|.
name|Numeric
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexFieldData
operator|instanceof
name|IndexGeoPointFieldData
condition|)
block|{
name|config
operator|=
operator|new
name|ValuesSourceConfig
argument_list|<>
argument_list|(
name|ValuesSource
operator|.
name|GeoPoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
operator|new
name|ValuesSourceConfig
argument_list|<>
argument_list|(
name|ValuesSource
operator|.
name|Bytes
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|config
operator|=
operator|new
name|ValuesSourceConfig
argument_list|(
name|valuesSourceType
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|fieldContext
operator|=
operator|new
name|FieldContext
argument_list|(
name|field
argument_list|,
name|indexFieldData
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
name|config
operator|.
name|missing
operator|=
name|missing
expr_stmt|;
name|config
operator|.
name|script
operator|=
name|createScript
argument_list|(
name|script
argument_list|,
name|context
operator|.
name|searchContext
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|format
operator|=
name|resolveFormat
argument_list|(
name|format
argument_list|,
name|this
operator|.
name|timeZone
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
DECL|method|createScript
specifier|private
name|SearchScript
name|createScript
parameter_list|(
name|Script
name|script
parameter_list|,
name|SearchContext
name|context
parameter_list|)
block|{
return|return
name|script
operator|==
literal|null
condition|?
literal|null
else|:
name|context
operator|.
name|scriptService
argument_list|()
operator|.
name|search
argument_list|(
name|context
operator|.
name|lookup
argument_list|()
argument_list|,
name|script
argument_list|,
name|ScriptContext
operator|.
name|Standard
operator|.
name|AGGS
argument_list|)
return|;
block|}
DECL|method|resolveFormat
specifier|private
specifier|static
name|ValueFormat
name|resolveFormat
parameter_list|(
annotation|@
name|Nullable
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|ValueType
name|valueType
parameter_list|)
block|{
if|if
condition|(
name|valueType
operator|==
literal|null
condition|)
block|{
return|return
name|ValueFormat
operator|.
name|RAW
return|;
comment|// we can't figure it out
block|}
name|ValueFormat
name|valueFormat
init|=
name|valueType
operator|.
name|defaultFormat
decl_stmt|;
if|if
condition|(
name|valueFormat
operator|!=
literal|null
operator|&&
name|valueFormat
operator|instanceof
name|ValueFormat
operator|.
name|Patternable
operator|&&
name|format
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|ValueFormat
operator|.
name|Patternable
operator|)
name|valueFormat
operator|)
operator|.
name|create
argument_list|(
name|format
argument_list|)
return|;
block|}
return|return
name|valueFormat
return|;
block|}
DECL|method|resolveFormat
specifier|private
specifier|static
name|ValueFormat
name|resolveFormat
parameter_list|(
annotation|@
name|Nullable
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|DateTimeZone
name|timezone
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|)
block|{
if|if
condition|(
name|fieldType
operator|instanceof
name|DateFieldMapper
operator|.
name|DateFieldType
condition|)
block|{
return|return
name|format
operator|!=
literal|null
condition|?
name|ValueFormat
operator|.
name|DateTime
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|timezone
argument_list|)
else|:
name|ValueFormat
operator|.
name|DateTime
operator|.
name|mapper
argument_list|(
operator|(
name|DateFieldMapper
operator|.
name|DateFieldType
operator|)
name|fieldType
argument_list|,
name|timezone
argument_list|)
return|;
block|}
if|if
condition|(
name|fieldType
operator|instanceof
name|IpFieldMapper
operator|.
name|IpFieldType
condition|)
block|{
return|return
name|ValueFormat
operator|.
name|IPv4
return|;
block|}
if|if
condition|(
name|fieldType
operator|instanceof
name|BooleanFieldMapper
operator|.
name|BooleanFieldType
condition|)
block|{
return|return
name|ValueFormat
operator|.
name|BOOLEAN
return|;
block|}
if|if
condition|(
name|fieldType
operator|instanceof
name|NumberFieldMapper
operator|.
name|NumberFieldType
condition|)
block|{
return|return
name|format
operator|!=
literal|null
condition|?
name|ValueFormat
operator|.
name|Number
operator|.
name|format
argument_list|(
name|format
argument_list|)
else|:
name|ValueFormat
operator|.
name|RAW
return|;
block|}
return|return
name|ValueFormat
operator|.
name|RAW
return|;
block|}
DECL|method|createUnmapped
specifier|protected
specifier|abstract
name|Aggregator
name|createUnmapped
parameter_list|(
name|AggregationContext
name|aggregationContext
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|doCreateInternal
specifier|protected
specifier|abstract
name|Aggregator
name|doCreateInternal
parameter_list|(
name|VS
name|valuesSource
parameter_list|,
name|AggregationContext
name|aggregationContext
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|boolean
name|collectsFromSingleBucket
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|resolveValuesSourceConfigFromAncestors
specifier|private
name|void
name|resolveValuesSourceConfigFromAncestors
parameter_list|(
name|String
name|aggName
parameter_list|,
name|AggregatorFactory
name|parent
parameter_list|,
name|Class
argument_list|<
name|VS
argument_list|>
name|requiredValuesSourceType
parameter_list|)
block|{
name|ValuesSourceConfig
name|config
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|instanceof
name|ValuesSourceAggregatorFactory
condition|)
block|{
name|config
operator|=
operator|(
operator|(
name|ValuesSourceAggregatorFactory
operator|)
name|parent
operator|)
operator|.
name|config
expr_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|valid
argument_list|()
condition|)
block|{
if|if
condition|(
name|requiredValuesSourceType
operator|==
literal|null
operator|||
name|requiredValuesSourceType
operator|.
name|isAssignableFrom
argument_list|(
name|config
operator|.
name|valueSourceType
argument_list|)
condition|)
block|{
name|ValueFormat
name|format
init|=
name|config
operator|.
name|format
decl_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
comment|// if the user explicitly defined a format pattern,
comment|// we'll do our best to keep it even when we inherit the
comment|// value source form one of the ancestor aggregations
if|if
condition|(
name|this
operator|.
name|config
operator|.
name|formatPattern
operator|!=
literal|null
operator|&&
name|format
operator|!=
literal|null
operator|&&
name|format
operator|instanceof
name|ValueFormat
operator|.
name|Patternable
condition|)
block|{
name|this
operator|.
name|config
operator|.
name|format
operator|=
operator|(
operator|(
name|ValueFormat
operator|.
name|Patternable
operator|)
name|format
operator|)
operator|.
name|create
argument_list|(
name|this
operator|.
name|config
operator|.
name|formatPattern
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
name|parent
operator|=
name|parent
operator|.
name|parent
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|AggregationExecutionException
argument_list|(
literal|"could not find the appropriate value context to perform aggregation ["
operator|+
name|aggName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

