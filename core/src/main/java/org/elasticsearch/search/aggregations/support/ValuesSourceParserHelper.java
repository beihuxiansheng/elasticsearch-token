begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_class
DECL|class|ValuesSourceParserHelper
specifier|public
specifier|final
class|class
name|ValuesSourceParserHelper
block|{
DECL|field|TIME_ZONE
specifier|static
specifier|final
name|ParseField
name|TIME_ZONE
init|=
operator|new
name|ParseField
argument_list|(
literal|"time_zone"
argument_list|)
decl_stmt|;
DECL|method|ValuesSourceParserHelper
specifier|private
name|ValuesSourceParserHelper
parameter_list|()
block|{}
comment|// utility class, no instantiation
DECL|method|declareAnyFields
specifier|public
specifier|static
name|void
name|declareAnyFields
parameter_list|(
name|ObjectParser
argument_list|<
name|?
extends|extends
name|ValuesSourceAggregationBuilder
argument_list|<
name|ValuesSource
argument_list|,
name|?
argument_list|>
argument_list|,
name|QueryParseContext
argument_list|>
name|objectParser
parameter_list|,
name|boolean
name|scriptable
parameter_list|,
name|boolean
name|formattable
parameter_list|)
block|{
name|declareFields
argument_list|(
name|objectParser
argument_list|,
name|scriptable
argument_list|,
name|formattable
argument_list|,
literal|false
argument_list|,
name|ValuesSourceType
operator|.
name|ANY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|declareNumericFields
specifier|public
specifier|static
name|void
name|declareNumericFields
parameter_list|(
name|ObjectParser
argument_list|<
name|?
extends|extends
name|ValuesSourceAggregationBuilder
argument_list|<
name|ValuesSource
operator|.
name|Numeric
argument_list|,
name|?
argument_list|>
argument_list|,
name|QueryParseContext
argument_list|>
name|objectParser
parameter_list|,
name|boolean
name|scriptable
parameter_list|,
name|boolean
name|formattable
parameter_list|,
name|boolean
name|timezoneAware
parameter_list|)
block|{
name|declareFields
argument_list|(
name|objectParser
argument_list|,
name|scriptable
argument_list|,
name|formattable
argument_list|,
name|timezoneAware
argument_list|,
name|ValuesSourceType
operator|.
name|NUMERIC
argument_list|,
name|ValueType
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
block|}
DECL|method|declareBytesFields
specifier|public
specifier|static
name|void
name|declareBytesFields
parameter_list|(
name|ObjectParser
argument_list|<
name|?
extends|extends
name|ValuesSourceAggregationBuilder
argument_list|<
name|ValuesSource
operator|.
name|Bytes
argument_list|,
name|?
argument_list|>
argument_list|,
name|QueryParseContext
argument_list|>
name|objectParser
parameter_list|,
name|boolean
name|scriptable
parameter_list|,
name|boolean
name|formattable
parameter_list|)
block|{
name|declareFields
argument_list|(
name|objectParser
argument_list|,
name|scriptable
argument_list|,
name|formattable
argument_list|,
literal|false
argument_list|,
name|ValuesSourceType
operator|.
name|BYTES
argument_list|,
name|ValueType
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
DECL|method|declareGeoFields
specifier|public
specifier|static
name|void
name|declareGeoFields
parameter_list|(
name|ObjectParser
argument_list|<
name|?
extends|extends
name|ValuesSourceAggregationBuilder
argument_list|<
name|ValuesSource
operator|.
name|GeoPoint
argument_list|,
name|?
argument_list|>
argument_list|,
name|QueryParseContext
argument_list|>
name|objectParser
parameter_list|,
name|boolean
name|scriptable
parameter_list|,
name|boolean
name|formattable
parameter_list|)
block|{
name|declareFields
argument_list|(
name|objectParser
argument_list|,
name|scriptable
argument_list|,
name|formattable
argument_list|,
literal|false
argument_list|,
name|ValuesSourceType
operator|.
name|GEOPOINT
argument_list|,
name|ValueType
operator|.
name|GEOPOINT
argument_list|)
expr_stmt|;
block|}
DECL|method|declareFields
specifier|private
specifier|static
parameter_list|<
name|VS
extends|extends
name|ValuesSource
parameter_list|>
name|void
name|declareFields
parameter_list|(
name|ObjectParser
argument_list|<
name|?
extends|extends
name|ValuesSourceAggregationBuilder
argument_list|<
name|VS
argument_list|,
name|?
argument_list|>
argument_list|,
name|QueryParseContext
argument_list|>
name|objectParser
parameter_list|,
name|boolean
name|scriptable
parameter_list|,
name|boolean
name|formattable
parameter_list|,
name|boolean
name|timezoneAware
parameter_list|,
name|ValuesSourceType
name|valuesSourceType
parameter_list|,
name|ValueType
name|targetValueType
parameter_list|)
block|{
name|objectParser
operator|.
name|declareField
argument_list|(
name|ValuesSourceAggregationBuilder
operator|::
name|field
argument_list|,
name|XContentParser
operator|::
name|text
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"field"
argument_list|)
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareField
argument_list|(
name|ValuesSourceAggregationBuilder
operator|::
name|missing
argument_list|,
name|XContentParser
operator|::
name|objectText
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"missing"
argument_list|)
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|VALUE
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareField
argument_list|(
name|ValuesSourceAggregationBuilder
operator|::
name|valueType
argument_list|,
name|p
lambda|->
block|{
name|ValueType
name|valueType
init|=
name|ValueType
operator|.
name|resolveForScript
argument_list|(
name|p
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetValueType
operator|!=
literal|null
operator|&&
name|valueType
operator|.
name|isNotA
argument_list|(
name|targetValueType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|p
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Aggregation ["
operator|+
name|objectParser
operator|.
name|getName
argument_list|()
operator|+
literal|"] was configured with an incompatible value type ["
operator|+
name|valueType
operator|+
literal|"]. It can only work on value of type ["
operator|+
name|targetValueType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|valueType
return|;
block|}
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"value_type"
argument_list|,
literal|"valueType"
argument_list|)
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|STRING
argument_list|)
expr_stmt|;
if|if
condition|(
name|formattable
condition|)
block|{
name|objectParser
operator|.
name|declareField
argument_list|(
name|ValuesSourceAggregationBuilder
operator|::
name|format
argument_list|,
name|XContentParser
operator|::
name|text
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"format"
argument_list|)
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scriptable
condition|)
block|{
name|objectParser
operator|.
name|declareField
argument_list|(
name|ValuesSourceAggregationBuilder
operator|::
name|script
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
operator|::
name|parse
argument_list|,
name|Script
operator|.
name|SCRIPT_PARSE_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT_OR_STRING
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timezoneAware
condition|)
block|{
name|objectParser
operator|.
name|declareField
argument_list|(
name|ValuesSourceAggregationBuilder
operator|::
name|timeZone
argument_list|,
name|p
lambda|->
block|{
if|if
condition|(
name|p
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
return|return
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|p
operator|.
name|text
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
name|p
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|,
name|TIME_ZONE
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

