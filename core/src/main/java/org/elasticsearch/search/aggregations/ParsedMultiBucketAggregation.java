begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedBiConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|MultiBucketsAggregation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|ensureExpectedToken
import|;
end_import

begin_class
DECL|class|ParsedMultiBucketAggregation
specifier|public
specifier|abstract
class|class
name|ParsedMultiBucketAggregation
parameter_list|<
name|B
extends|extends
name|ParsedMultiBucketAggregation
operator|.
name|Bucket
parameter_list|>
extends|extends
name|ParsedAggregation
implements|implements
name|MultiBucketsAggregation
block|{
DECL|field|buckets
specifier|protected
specifier|final
name|List
argument_list|<
name|B
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|keyed
specifier|protected
name|boolean
name|keyed
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|XContentBuilder
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|keyed
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|CommonFields
operator|.
name|BUCKETS
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|CommonFields
operator|.
name|BUCKETS
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|B
name|bucket
range|:
name|buckets
control|)
block|{
name|bucket
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keyed
condition|)
block|{
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|declareMultiBucketAggregationFields
specifier|protected
specifier|static
name|void
name|declareMultiBucketAggregationFields
parameter_list|(
specifier|final
name|ObjectParser
argument_list|<
name|?
extends|extends
name|ParsedMultiBucketAggregation
argument_list|,
name|Void
argument_list|>
name|objectParser
parameter_list|,
specifier|final
name|CheckedFunction
argument_list|<
name|XContentParser
argument_list|,
name|ParsedBucket
argument_list|,
name|IOException
argument_list|>
name|bucketParser
parameter_list|,
specifier|final
name|CheckedFunction
argument_list|<
name|XContentParser
argument_list|,
name|ParsedBucket
argument_list|,
name|IOException
argument_list|>
name|keyedBucketParser
parameter_list|)
block|{
name|declareAggregationFields
argument_list|(
name|objectParser
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareField
argument_list|(
parameter_list|(
name|parser
parameter_list|,
name|aggregation
parameter_list|,
name|context
parameter_list|)
lambda|->
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|aggregation
operator|.
name|keyed
operator|=
literal|true
expr_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|aggregation
operator|.
name|buckets
operator|.
name|add
argument_list|(
name|keyedBucketParser
operator|.
name|apply
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|aggregation
operator|.
name|keyed
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|aggregation
operator|.
name|buckets
operator|.
name|add
argument_list|(
name|bucketParser
operator|.
name|apply
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|CommonFields
operator|.
name|BUCKETS
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT_ARRAY
argument_list|)
expr_stmt|;
block|}
DECL|class|ParsedBucket
specifier|public
specifier|abstract
specifier|static
class|class
name|ParsedBucket
implements|implements
name|MultiBucketsAggregation
operator|.
name|Bucket
block|{
DECL|field|aggregations
specifier|private
name|Aggregations
name|aggregations
decl_stmt|;
DECL|field|keyAsString
specifier|private
name|String
name|keyAsString
decl_stmt|;
DECL|field|docCount
specifier|private
name|long
name|docCount
decl_stmt|;
DECL|field|keyed
specifier|private
name|boolean
name|keyed
decl_stmt|;
DECL|method|setKeyAsString
specifier|protected
name|void
name|setKeyAsString
parameter_list|(
name|String
name|keyAsString
parameter_list|)
block|{
name|this
operator|.
name|keyAsString
operator|=
name|keyAsString
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKeyAsString
specifier|public
name|String
name|getKeyAsString
parameter_list|()
block|{
return|return
name|keyAsString
return|;
block|}
DECL|method|setDocCount
specifier|protected
name|void
name|setDocCount
parameter_list|(
name|long
name|docCount
parameter_list|)
block|{
name|this
operator|.
name|docCount
operator|=
name|docCount
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|long
name|getDocCount
parameter_list|()
block|{
return|return
name|docCount
return|;
block|}
DECL|method|setKeyed
specifier|public
name|void
name|setKeyed
parameter_list|(
name|boolean
name|keyed
parameter_list|)
block|{
name|this
operator|.
name|keyed
operator|=
name|keyed
expr_stmt|;
block|}
DECL|method|isKeyed
specifier|protected
name|boolean
name|isKeyed
parameter_list|()
block|{
return|return
name|keyed
return|;
block|}
DECL|method|setAggregations
specifier|protected
name|void
name|setAggregations
parameter_list|(
name|Aggregations
name|aggregations
parameter_list|)
block|{
name|this
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAggregations
specifier|public
name|Aggregations
name|getAggregations
parameter_list|()
block|{
return|return
name|aggregations
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|keyed
condition|)
block|{
comment|// Subclasses can override the getKeyAsString method to handle specific cases like
comment|// keyed bucket with RAW doc value format where the key_as_string field is not printed
comment|// out but we still need to have a string version of the key to use as the bucket's name.
name|builder
operator|.
name|startObject
argument_list|(
name|getKeyAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|keyAsString
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|CommonFields
operator|.
name|KEY_AS_STRING
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|getKeyAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keyToXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|CommonFields
operator|.
name|DOC_COUNT
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|docCount
argument_list|)
expr_stmt|;
name|aggregations
operator|.
name|toXContentInternal
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|keyToXContent
specifier|protected
name|XContentBuilder
name|keyToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|builder
operator|.
name|field
argument_list|(
name|CommonFields
operator|.
name|KEY
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|getKey
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parseXContent
specifier|protected
specifier|static
parameter_list|<
name|B
extends|extends
name|ParsedBucket
parameter_list|>
name|B
name|parseXContent
parameter_list|(
specifier|final
name|XContentParser
name|parser
parameter_list|,
specifier|final
name|boolean
name|keyed
parameter_list|,
specifier|final
name|Supplier
argument_list|<
name|B
argument_list|>
name|bucketSupplier
parameter_list|,
specifier|final
name|CheckedBiConsumer
argument_list|<
name|XContentParser
argument_list|,
name|B
argument_list|,
name|IOException
argument_list|>
name|keyConsumer
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|B
name|bucket
init|=
name|bucketSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|bucket
operator|.
name|setKeyed
argument_list|(
name|keyed
argument_list|)
expr_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyed
condition|)
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|token
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Aggregation
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|CommonFields
operator|.
name|KEY_AS_STRING
operator|.
name|getPreferredName
argument_list|()
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|bucket
operator|.
name|setKeyAsString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CommonFields
operator|.
name|KEY
operator|.
name|getPreferredName
argument_list|()
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|keyConsumer
operator|.
name|accept
argument_list|(
name|parser
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CommonFields
operator|.
name|DOC_COUNT
operator|.
name|getPreferredName
argument_list|()
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|bucket
operator|.
name|setDocCount
argument_list|(
name|parser
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|XContentParserUtils
operator|.
name|parseTypedKeysObject
argument_list|(
name|parser
argument_list|,
name|Aggregation
operator|.
name|TYPED_KEYS_DELIMITER
argument_list|,
name|Aggregation
operator|.
name|class
argument_list|,
name|aggregations
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
block|}
name|bucket
operator|.
name|setAggregations
argument_list|(
operator|new
name|Aggregations
argument_list|(
name|aggregations
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bucket
return|;
block|}
block|}
block|}
end_class

end_unit

