begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline.movavg
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|EvictingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
operator|.
name|ReduceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalMultiBucketAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|MultiBucketsAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|MultiBucketsAggregation
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|HistogramFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|BucketHelpers
operator|.
name|GapPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|InternalSimpleValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|MovAvgModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|BucketHelpers
operator|.
name|resolveBucketValue
import|;
end_import

begin_class
DECL|class|MovAvgPipelineAggregator
specifier|public
class|class
name|MovAvgPipelineAggregator
extends|extends
name|PipelineAggregator
block|{
DECL|field|formatter
specifier|private
specifier|final
name|DocValueFormat
name|formatter
decl_stmt|;
DECL|field|gapPolicy
specifier|private
specifier|final
name|GapPolicy
name|gapPolicy
decl_stmt|;
DECL|field|window
specifier|private
specifier|final
name|int
name|window
decl_stmt|;
DECL|field|model
specifier|private
name|MovAvgModel
name|model
decl_stmt|;
DECL|field|predict
specifier|private
specifier|final
name|int
name|predict
decl_stmt|;
DECL|field|minimize
specifier|private
specifier|final
name|boolean
name|minimize
decl_stmt|;
DECL|method|MovAvgPipelineAggregator
specifier|public
name|MovAvgPipelineAggregator
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|bucketsPaths
parameter_list|,
name|DocValueFormat
name|formatter
parameter_list|,
name|GapPolicy
name|gapPolicy
parameter_list|,
name|int
name|window
parameter_list|,
name|int
name|predict
parameter_list|,
name|MovAvgModel
name|model
parameter_list|,
name|boolean
name|minimize
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|bucketsPaths
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
name|this
operator|.
name|gapPolicy
operator|=
name|gapPolicy
expr_stmt|;
name|this
operator|.
name|window
operator|=
name|window
expr_stmt|;
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
name|this
operator|.
name|predict
operator|=
name|predict
expr_stmt|;
name|this
operator|.
name|minimize
operator|=
name|minimize
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|MovAvgPipelineAggregator
specifier|public
name|MovAvgPipelineAggregator
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|formatter
operator|=
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|gapPolicy
operator|=
name|GapPolicy
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|window
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|predict
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|model
operator|=
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|MovAvgModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|minimize
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|public
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
name|gapPolicy
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|predict
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|minimize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|MovAvgPipelineAggregationBuilder
operator|.
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|reduce
specifier|public
name|InternalAggregation
name|reduce
parameter_list|(
name|InternalAggregation
name|aggregation
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
name|InternalMultiBucketAggregation
argument_list|<
name|?
extends|extends
name|InternalMultiBucketAggregation
argument_list|,
name|?
extends|extends
name|InternalMultiBucketAggregation
operator|.
name|InternalBucket
argument_list|>
name|histo
init|=
operator|(
name|InternalMultiBucketAggregation
argument_list|<
name|?
extends|extends
name|InternalMultiBucketAggregation
argument_list|,
name|?
extends|extends
name|InternalMultiBucketAggregation
operator|.
name|InternalBucket
argument_list|>
operator|)
name|aggregation
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|InternalMultiBucketAggregation
operator|.
name|InternalBucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|HistogramFactory
name|factory
init|=
operator|(
name|HistogramFactory
operator|)
name|histo
decl_stmt|;
name|List
argument_list|<
name|Bucket
argument_list|>
name|newBuckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|values
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|this
operator|.
name|window
argument_list|)
decl_stmt|;
name|Number
name|lastValidKey
init|=
literal|0
decl_stmt|;
name|int
name|lastValidPosition
init|=
literal|0
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
comment|// Do we need to fit the model parameters to the data?
if|if
condition|(
name|minimize
condition|)
block|{
assert|assert
operator|(
name|model
operator|.
name|canBeMinimized
argument_list|()
operator|)
assert|;
name|model
operator|=
name|minimize
argument_list|(
name|buckets
argument_list|,
name|histo
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InternalMultiBucketAggregation
operator|.
name|InternalBucket
name|bucket
range|:
name|buckets
control|)
block|{
name|Double
name|thisBucketValue
init|=
name|resolveBucketValue
argument_list|(
name|histo
argument_list|,
name|bucket
argument_list|,
name|bucketsPaths
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|gapPolicy
argument_list|)
decl_stmt|;
comment|// Default is to reuse existing bucket.  Simplifies the rest of the logic,
comment|// since we only change newBucket if we can add to it
name|Bucket
name|newBucket
init|=
name|bucket
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|thisBucketValue
operator|==
literal|null
operator|||
name|thisBucketValue
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
operator|)
condition|)
block|{
comment|// Some models (e.g. HoltWinters) have certain preconditions that must be met
if|if
condition|(
name|model
operator|.
name|hasValue
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
condition|)
block|{
name|double
name|movavg
init|=
name|model
operator|.
name|next
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggs
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
parameter_list|(
name|p
parameter_list|)
lambda|->
block|{
return|return
operator|(
name|InternalAggregation
operator|)
name|p
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|aggs
operator|.
name|add
argument_list|(
operator|new
name|InternalSimpleValue
argument_list|(
name|name
argument_list|()
argument_list|,
name|movavg
argument_list|,
name|formatter
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|PipelineAggregator
argument_list|>
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newBucket
operator|=
name|factory
operator|.
name|createBucket
argument_list|(
name|factory
operator|.
name|getKey
argument_list|(
name|bucket
argument_list|)
argument_list|,
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
operator|new
name|InternalAggregations
argument_list|(
name|aggs
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|predict
operator|>
literal|0
condition|)
block|{
name|lastValidKey
operator|=
name|factory
operator|.
name|getKey
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|lastValidPosition
operator|=
name|counter
expr_stmt|;
block|}
name|values
operator|.
name|offer
argument_list|(
name|thisBucketValue
argument_list|)
expr_stmt|;
block|}
name|counter
operator|+=
literal|1
expr_stmt|;
name|newBuckets
operator|.
name|add
argument_list|(
name|newBucket
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buckets
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|predict
operator|>
literal|0
condition|)
block|{
name|double
index|[]
name|predictions
init|=
name|model
operator|.
name|predict
argument_list|(
name|values
argument_list|,
name|predict
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|predictions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggs
decl_stmt|;
name|Number
name|newKey
init|=
name|factory
operator|.
name|nextKey
argument_list|(
name|lastValidKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastValidPosition
operator|+
name|i
operator|+
literal|1
operator|<
name|newBuckets
operator|.
name|size
argument_list|()
condition|)
block|{
name|Bucket
name|bucket
init|=
name|newBuckets
operator|.
name|get
argument_list|(
name|lastValidPosition
operator|+
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Get the existing aggs in the bucket so we don't clobber data
name|aggs
operator|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
parameter_list|(
name|p
parameter_list|)
lambda|->
block|{
return|return
operator|(
name|InternalAggregation
operator|)
name|p
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|aggs
operator|.
name|add
argument_list|(
operator|new
name|InternalSimpleValue
argument_list|(
name|name
argument_list|()
argument_list|,
name|predictions
index|[
name|i
index|]
argument_list|,
name|formatter
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|PipelineAggregator
argument_list|>
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Bucket
name|newBucket
init|=
name|factory
operator|.
name|createBucket
argument_list|(
name|newKey
argument_list|,
literal|0
argument_list|,
operator|new
name|InternalAggregations
argument_list|(
name|aggs
argument_list|)
argument_list|)
decl_stmt|;
comment|// Overwrite the existing bucket with the new version
name|newBuckets
operator|.
name|set
argument_list|(
name|lastValidPosition
operator|+
name|i
operator|+
literal|1
argument_list|,
name|newBucket
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not seen before, create fresh
name|aggs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|aggs
operator|.
name|add
argument_list|(
operator|new
name|InternalSimpleValue
argument_list|(
name|name
argument_list|()
argument_list|,
name|predictions
index|[
name|i
index|]
argument_list|,
name|formatter
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|PipelineAggregator
argument_list|>
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Bucket
name|newBucket
init|=
name|factory
operator|.
name|createBucket
argument_list|(
name|newKey
argument_list|,
literal|0
argument_list|,
operator|new
name|InternalAggregations
argument_list|(
name|aggs
argument_list|)
argument_list|)
decl_stmt|;
comment|// Since this is a new bucket, simply append it
name|newBuckets
operator|.
name|add
argument_list|(
name|newBucket
argument_list|)
expr_stmt|;
block|}
name|lastValidKey
operator|=
name|newKey
expr_stmt|;
block|}
block|}
return|return
name|factory
operator|.
name|createAggregation
argument_list|(
name|newBuckets
argument_list|)
return|;
block|}
DECL|method|minimize
specifier|private
name|MovAvgModel
name|minimize
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|InternalMultiBucketAggregation
operator|.
name|InternalBucket
argument_list|>
name|buckets
parameter_list|,
name|MultiBucketsAggregation
name|histo
parameter_list|,
name|MovAvgModel
name|model
parameter_list|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|values
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|this
operator|.
name|window
argument_list|)
decl_stmt|;
name|double
index|[]
name|test
init|=
operator|new
name|double
index|[
name|window
index|]
decl_stmt|;
name|ListIterator
argument_list|<
name|?
extends|extends
name|InternalMultiBucketAggregation
operator|.
name|InternalBucket
argument_list|>
name|iter
init|=
name|buckets
operator|.
name|listIterator
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// We have to walk the iterator backwards because we don't know if/how many buckets are empty.
while|while
condition|(
name|iter
operator|.
name|hasPrevious
argument_list|()
operator|&&
name|counter
operator|<
name|window
condition|)
block|{
name|Double
name|thisBucketValue
init|=
name|resolveBucketValue
argument_list|(
name|histo
argument_list|,
name|iter
operator|.
name|previous
argument_list|()
argument_list|,
name|bucketsPaths
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|gapPolicy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|thisBucketValue
operator|==
literal|null
operator|||
name|thisBucketValue
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
operator|)
condition|)
block|{
name|test
index|[
name|window
operator|-
name|counter
operator|-
literal|1
index|]
operator|=
name|thisBucketValue
expr_stmt|;
name|counter
operator|+=
literal|1
expr_stmt|;
block|}
block|}
comment|// If we didn't fill the test set, we don't have enough data to minimize.
comment|// Just return the model with the starting coef
if|if
condition|(
name|counter
operator|<
name|window
condition|)
block|{
return|return
name|model
return|;
block|}
comment|//And do it again, for the train set.  Unfortunately we have to fill an array and then
comment|//fill an evicting queue backwards :(
name|counter
operator|=
literal|0
expr_stmt|;
name|double
index|[]
name|train
init|=
operator|new
name|double
index|[
name|window
index|]
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasPrevious
argument_list|()
operator|&&
name|counter
operator|<
name|window
condition|)
block|{
name|Double
name|thisBucketValue
init|=
name|resolveBucketValue
argument_list|(
name|histo
argument_list|,
name|iter
operator|.
name|previous
argument_list|()
argument_list|,
name|bucketsPaths
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|gapPolicy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|thisBucketValue
operator|==
literal|null
operator|||
name|thisBucketValue
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
operator|)
condition|)
block|{
name|train
index|[
name|window
operator|-
name|counter
operator|-
literal|1
index|]
operator|=
name|thisBucketValue
expr_stmt|;
name|counter
operator|+=
literal|1
expr_stmt|;
block|}
block|}
comment|// If we didn't fill the train set, we don't have enough data to minimize.
comment|// Just return the model with the starting coef
if|if
condition|(
name|counter
operator|<
name|window
condition|)
block|{
return|return
name|model
return|;
block|}
for|for
control|(
name|double
name|v
range|:
name|train
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|SimulatedAnealingMinimizer
operator|.
name|minimize
argument_list|(
name|model
argument_list|,
name|values
argument_list|,
name|test
argument_list|)
return|;
block|}
block|}
end_class

end_unit

