begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline.movavg
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|EvictingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
operator|.
name|ReduceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|AbstractHistogramAggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|InternalHistogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|BucketHelpers
operator|.
name|GapPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|InternalSimpleValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|MovAvgModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|MovAvgModelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|MovAvgModelStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|SimpleModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|format
operator|.
name|ValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|format
operator|.
name|ValueFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|format
operator|.
name|ValueFormatterStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|BucketHelpers
operator|.
name|resolveBucketValue
import|;
end_import

begin_class
DECL|class|MovAvgPipelineAggregator
specifier|public
class|class
name|MovAvgPipelineAggregator
extends|extends
name|PipelineAggregator
block|{
DECL|field|TYPE
specifier|public
specifier|final
specifier|static
name|Type
name|TYPE
init|=
operator|new
name|Type
argument_list|(
literal|"moving_avg"
argument_list|)
decl_stmt|;
DECL|field|STREAM
specifier|public
specifier|final
specifier|static
name|PipelineAggregatorStreams
operator|.
name|Stream
name|STREAM
init|=
operator|new
name|PipelineAggregatorStreams
operator|.
name|Stream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MovAvgPipelineAggregator
name|readResult
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|MovAvgPipelineAggregator
name|result
init|=
operator|new
name|MovAvgPipelineAggregator
argument_list|()
decl_stmt|;
name|result
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
DECL|method|registerStreams
specifier|public
specifier|static
name|void
name|registerStreams
parameter_list|()
block|{
name|PipelineAggregatorStreams
operator|.
name|registerStream
argument_list|(
name|STREAM
argument_list|,
name|TYPE
operator|.
name|stream
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|formatter
specifier|private
name|ValueFormatter
name|formatter
decl_stmt|;
DECL|field|gapPolicy
specifier|private
name|GapPolicy
name|gapPolicy
decl_stmt|;
DECL|field|window
specifier|private
name|int
name|window
decl_stmt|;
DECL|field|model
specifier|private
name|MovAvgModel
name|model
decl_stmt|;
DECL|field|predict
specifier|private
name|int
name|predict
decl_stmt|;
DECL|field|minimize
specifier|private
name|boolean
name|minimize
decl_stmt|;
DECL|method|MovAvgPipelineAggregator
specifier|public
name|MovAvgPipelineAggregator
parameter_list|()
block|{     }
DECL|method|MovAvgPipelineAggregator
specifier|public
name|MovAvgPipelineAggregator
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|bucketsPaths
parameter_list|,
name|ValueFormatter
name|formatter
parameter_list|,
name|GapPolicy
name|gapPolicy
parameter_list|,
name|int
name|window
parameter_list|,
name|int
name|predict
parameter_list|,
name|MovAvgModel
name|model
parameter_list|,
name|boolean
name|minimize
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|bucketsPaths
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
name|this
operator|.
name|gapPolicy
operator|=
name|gapPolicy
expr_stmt|;
name|this
operator|.
name|window
operator|=
name|window
expr_stmt|;
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
name|this
operator|.
name|predict
operator|=
name|predict
expr_stmt|;
name|this
operator|.
name|minimize
operator|=
name|minimize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
name|Type
name|type
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|reduce
specifier|public
name|InternalAggregation
name|reduce
parameter_list|(
name|InternalAggregation
name|aggregation
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
name|InternalHistogram
name|histo
init|=
operator|(
name|InternalHistogram
operator|)
name|aggregation
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|InternalHistogram
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|InternalHistogram
operator|.
name|Factory
argument_list|<
name|?
extends|extends
name|InternalHistogram
operator|.
name|Bucket
argument_list|>
name|factory
init|=
name|histo
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|List
name|newBuckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|values
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|this
operator|.
name|window
argument_list|)
decl_stmt|;
name|long
name|lastValidKey
init|=
literal|0
decl_stmt|;
name|int
name|lastValidPosition
init|=
literal|0
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
comment|// Do we need to fit the model parameters to the data?
if|if
condition|(
name|minimize
condition|)
block|{
assert|assert
operator|(
name|model
operator|.
name|canBeMinimized
argument_list|()
operator|)
assert|;
name|model
operator|=
name|minimize
argument_list|(
name|buckets
argument_list|,
name|histo
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InternalHistogram
operator|.
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|Double
name|thisBucketValue
init|=
name|resolveBucketValue
argument_list|(
name|histo
argument_list|,
name|bucket
argument_list|,
name|bucketsPaths
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|gapPolicy
argument_list|)
decl_stmt|;
comment|// Default is to reuse existing bucket.  Simplifies the rest of the logic,
comment|// since we only change newBucket if we can add to it
name|InternalHistogram
operator|.
name|Bucket
name|newBucket
init|=
name|bucket
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|thisBucketValue
operator|==
literal|null
operator|||
name|thisBucketValue
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
operator|)
condition|)
block|{
comment|// Some models (e.g. HoltWinters) have certain preconditions that must be met
if|if
condition|(
name|model
operator|.
name|hasValue
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
condition|)
block|{
name|double
name|movavg
init|=
name|model
operator|.
name|next
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggs
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
parameter_list|(
name|p
parameter_list|)
lambda|->
block|{
return|return
operator|(
name|InternalAggregation
operator|)
name|p
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|aggs
operator|.
name|add
argument_list|(
operator|new
name|InternalSimpleValue
argument_list|(
name|name
argument_list|()
argument_list|,
name|movavg
argument_list|,
name|formatter
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|PipelineAggregator
argument_list|>
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newBucket
operator|=
name|factory
operator|.
name|createBucket
argument_list|(
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
operator|new
name|InternalAggregations
argument_list|(
name|aggs
argument_list|)
argument_list|,
name|bucket
operator|.
name|getKeyed
argument_list|()
argument_list|,
name|bucket
operator|.
name|getFormatter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|predict
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|bucket
operator|.
name|getKey
argument_list|()
operator|instanceof
name|Number
condition|)
block|{
name|lastValidKey
operator|=
operator|(
operator|(
name|Number
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bucket
operator|.
name|getKey
argument_list|()
operator|instanceof
name|DateTime
condition|)
block|{
name|lastValidKey
operator|=
operator|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getMillis
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AggregationExecutionException
argument_list|(
literal|"Expected key of type Number or DateTime but got ["
operator|+
name|lastValidKey
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|lastValidPosition
operator|=
name|counter
expr_stmt|;
block|}
name|values
operator|.
name|offer
argument_list|(
name|thisBucketValue
argument_list|)
expr_stmt|;
block|}
name|counter
operator|+=
literal|1
expr_stmt|;
name|newBuckets
operator|.
name|add
argument_list|(
name|newBucket
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buckets
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|predict
operator|>
literal|0
condition|)
block|{
name|boolean
name|keyed
decl_stmt|;
name|ValueFormatter
name|formatter
decl_stmt|;
name|keyed
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyed
argument_list|()
expr_stmt|;
name|formatter
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFormatter
argument_list|()
expr_stmt|;
name|double
index|[]
name|predictions
init|=
name|model
operator|.
name|predict
argument_list|(
name|values
argument_list|,
name|predict
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|predictions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggs
decl_stmt|;
name|long
name|newKey
init|=
name|histo
operator|.
name|getRounding
argument_list|()
operator|.
name|nextRoundingValue
argument_list|(
name|lastValidKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastValidPosition
operator|+
name|i
operator|+
literal|1
operator|<
name|newBuckets
operator|.
name|size
argument_list|()
condition|)
block|{
name|InternalHistogram
operator|.
name|Bucket
name|bucket
init|=
operator|(
name|InternalHistogram
operator|.
name|Bucket
operator|)
name|newBuckets
operator|.
name|get
argument_list|(
name|lastValidPosition
operator|+
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Get the existing aggs in the bucket so we don't clobber data
name|aggs
operator|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
parameter_list|(
name|p
parameter_list|)
lambda|->
block|{
return|return
operator|(
name|InternalAggregation
operator|)
name|p
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|aggs
operator|.
name|add
argument_list|(
operator|new
name|InternalSimpleValue
argument_list|(
name|name
argument_list|()
argument_list|,
name|predictions
index|[
name|i
index|]
argument_list|,
name|formatter
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|PipelineAggregator
argument_list|>
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
operator|.
name|Bucket
name|newBucket
init|=
name|factory
operator|.
name|createBucket
argument_list|(
name|newKey
argument_list|,
literal|0
argument_list|,
operator|new
name|InternalAggregations
argument_list|(
name|aggs
argument_list|)
argument_list|,
name|keyed
argument_list|,
name|formatter
argument_list|)
decl_stmt|;
comment|// Overwrite the existing bucket with the new version
name|newBuckets
operator|.
name|set
argument_list|(
name|lastValidPosition
operator|+
name|i
operator|+
literal|1
argument_list|,
name|newBucket
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not seen before, create fresh
name|aggs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|aggs
operator|.
name|add
argument_list|(
operator|new
name|InternalSimpleValue
argument_list|(
name|name
argument_list|()
argument_list|,
name|predictions
index|[
name|i
index|]
argument_list|,
name|formatter
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|PipelineAggregator
argument_list|>
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
operator|.
name|Bucket
name|newBucket
init|=
name|factory
operator|.
name|createBucket
argument_list|(
name|newKey
argument_list|,
literal|0
argument_list|,
operator|new
name|InternalAggregations
argument_list|(
name|aggs
argument_list|)
argument_list|,
name|keyed
argument_list|,
name|formatter
argument_list|)
decl_stmt|;
comment|// Since this is a new bucket, simply append it
name|newBuckets
operator|.
name|add
argument_list|(
name|newBucket
argument_list|)
expr_stmt|;
block|}
name|lastValidKey
operator|=
name|newKey
expr_stmt|;
block|}
block|}
return|return
name|factory
operator|.
name|create
argument_list|(
name|newBuckets
argument_list|,
name|histo
argument_list|)
return|;
block|}
DECL|method|minimize
specifier|private
name|MovAvgModel
name|minimize
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|InternalHistogram
operator|.
name|Bucket
argument_list|>
name|buckets
parameter_list|,
name|InternalHistogram
name|histo
parameter_list|,
name|MovAvgModel
name|model
parameter_list|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|values
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|this
operator|.
name|window
argument_list|)
decl_stmt|;
name|double
index|[]
name|test
init|=
operator|new
name|double
index|[
name|window
index|]
decl_stmt|;
name|ListIterator
argument_list|<
name|?
extends|extends
name|InternalHistogram
operator|.
name|Bucket
argument_list|>
name|iter
init|=
name|buckets
operator|.
name|listIterator
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// We have to walk the iterator backwards because we don't know if/how many buckets are empty.
while|while
condition|(
name|iter
operator|.
name|hasPrevious
argument_list|()
operator|&&
name|counter
operator|<
name|window
condition|)
block|{
name|Double
name|thisBucketValue
init|=
name|resolveBucketValue
argument_list|(
name|histo
argument_list|,
name|iter
operator|.
name|previous
argument_list|()
argument_list|,
name|bucketsPaths
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|gapPolicy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|thisBucketValue
operator|==
literal|null
operator|||
name|thisBucketValue
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
operator|)
condition|)
block|{
name|test
index|[
name|window
operator|-
name|counter
operator|-
literal|1
index|]
operator|=
name|thisBucketValue
expr_stmt|;
name|counter
operator|+=
literal|1
expr_stmt|;
block|}
block|}
comment|// If we didn't fill the test set, we don't have enough data to minimize.
comment|// Just return the model with the starting coef
if|if
condition|(
name|counter
operator|<
name|window
condition|)
block|{
return|return
name|model
return|;
block|}
comment|//And do it again, for the train set.  Unfortunately we have to fill an array and then
comment|//fill an evicting queue backwards :(
name|counter
operator|=
literal|0
expr_stmt|;
name|double
index|[]
name|train
init|=
operator|new
name|double
index|[
name|window
index|]
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasPrevious
argument_list|()
operator|&&
name|counter
operator|<
name|window
condition|)
block|{
name|Double
name|thisBucketValue
init|=
name|resolveBucketValue
argument_list|(
name|histo
argument_list|,
name|iter
operator|.
name|previous
argument_list|()
argument_list|,
name|bucketsPaths
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|gapPolicy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|thisBucketValue
operator|==
literal|null
operator|||
name|thisBucketValue
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
operator|)
condition|)
block|{
name|train
index|[
name|window
operator|-
name|counter
operator|-
literal|1
index|]
operator|=
name|thisBucketValue
expr_stmt|;
name|counter
operator|+=
literal|1
expr_stmt|;
block|}
block|}
comment|// If we didn't fill the train set, we don't have enough data to minimize.
comment|// Just return the model with the starting coef
if|if
condition|(
name|counter
operator|<
name|window
condition|)
block|{
return|return
name|model
return|;
block|}
for|for
control|(
name|double
name|v
range|:
name|train
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|SimulatedAnealingMinimizer
operator|.
name|minimize
argument_list|(
name|model
argument_list|,
name|values
argument_list|,
name|test
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doReadFrom
specifier|public
name|void
name|doReadFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|formatter
operator|=
name|ValueFormatterStreams
operator|.
name|readOptional
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|gapPolicy
operator|=
name|GapPolicy
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|window
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|predict
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|model
operator|=
name|MovAvgModelStreams
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|minimize
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|public
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|ValueFormatterStreams
operator|.
name|writeOptional
argument_list|(
name|formatter
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|gapPolicy
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|predict
argument_list|)
expr_stmt|;
name|model
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|minimize
argument_list|)
expr_stmt|;
block|}
DECL|class|MovAvgPipelineAggregatorBuilder
specifier|public
specifier|static
class|class
name|MovAvgPipelineAggregatorBuilder
extends|extends
name|PipelineAggregatorBuilder
block|{
DECL|field|format
specifier|private
name|String
name|format
decl_stmt|;
DECL|field|gapPolicy
specifier|private
name|GapPolicy
name|gapPolicy
init|=
name|GapPolicy
operator|.
name|SKIP
decl_stmt|;
DECL|field|window
specifier|private
name|int
name|window
init|=
literal|5
decl_stmt|;
DECL|field|model
specifier|private
name|MovAvgModel
name|model
init|=
operator|new
name|SimpleModel
argument_list|()
decl_stmt|;
DECL|field|predict
specifier|private
name|int
name|predict
init|=
literal|0
decl_stmt|;
DECL|field|minimize
specifier|private
name|Boolean
name|minimize
decl_stmt|;
DECL|method|MovAvgPipelineAggregatorBuilder
specifier|public
name|MovAvgPipelineAggregatorBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|bucketsPath
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|bucketsPath
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|MovAvgPipelineAggregatorBuilder
specifier|private
name|MovAvgPipelineAggregatorBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|bucketsPaths
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|TYPE
operator|.
name|name
argument_list|()
argument_list|,
name|bucketsPaths
argument_list|)
expr_stmt|;
block|}
comment|/**          * Sets the format to use on the output of this aggregation.          */
DECL|method|format
specifier|public
name|MovAvgPipelineAggregatorBuilder
name|format
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the format to use on the output of this aggregation.          */
DECL|method|format
specifier|public
name|String
name|format
parameter_list|()
block|{
return|return
name|format
return|;
block|}
comment|/**          * Sets the GapPolicy to use on the output of this aggregation.          */
DECL|method|gapPolicy
specifier|public
name|MovAvgPipelineAggregatorBuilder
name|gapPolicy
parameter_list|(
name|GapPolicy
name|gapPolicy
parameter_list|)
block|{
name|this
operator|.
name|gapPolicy
operator|=
name|gapPolicy
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the GapPolicy to use on the output of this aggregation.          */
DECL|method|gapPolicy
specifier|public
name|GapPolicy
name|gapPolicy
parameter_list|()
block|{
return|return
name|gapPolicy
return|;
block|}
DECL|method|formatter
specifier|protected
name|ValueFormatter
name|formatter
parameter_list|()
block|{
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
return|return
name|ValueFormat
operator|.
name|Patternable
operator|.
name|Number
operator|.
name|format
argument_list|(
name|format
argument_list|)
operator|.
name|formatter
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ValueFormatter
operator|.
name|RAW
return|;
block|}
block|}
comment|/**          * Sets the window size for the moving average. This window will "slide"          * across the series, and the values inside that window will be used to          * calculate the moving avg value          *          * @param window          *            Size of window          */
DECL|method|window
specifier|public
name|MovAvgPipelineAggregatorBuilder
name|window
parameter_list|(
name|int
name|window
parameter_list|)
block|{
if|if
condition|(
name|window
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[window] must be a positive integer: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|window
operator|=
name|window
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the window size for the moving average. This window will "slide"          * across the series, and the values inside that window will be used to          * calculate the moving avg value          */
DECL|method|window
specifier|public
name|int
name|window
parameter_list|()
block|{
return|return
name|window
return|;
block|}
comment|/**          * Sets a MovAvgModel for the Moving Average. The model is used to          * define what type of moving average you want to use on the series          *          * @param model          *            A MovAvgModel which has been prepopulated with settings          */
DECL|method|modelBuilder
specifier|public
name|MovAvgPipelineAggregatorBuilder
name|modelBuilder
parameter_list|(
name|MovAvgModelBuilder
name|model
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
name|model
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a MovAvgModel for the Moving Average. The model is used to          * define what type of moving average you want to use on the series          *          * @param model          *            A MovAvgModel which has been prepopulated with settings          */
DECL|method|model
specifier|public
name|MovAvgPipelineAggregatorBuilder
name|model
parameter_list|(
name|MovAvgModel
name|model
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets a MovAvgModel for the Moving Average. The model is used to          * define what type of moving average you want to use on the series          */
DECL|method|model
specifier|public
name|MovAvgModel
name|model
parameter_list|()
block|{
return|return
name|model
return|;
block|}
comment|/**          * Sets the number of predictions that should be returned. Each          * prediction will be spaced at the intervals specified in the          * histogram. E.g "predict: 2" will return two new buckets at the end of          * the histogram with the predicted values.          *          * @param predict          *            Number of predictions to make          */
DECL|method|predict
specifier|public
name|MovAvgPipelineAggregatorBuilder
name|predict
parameter_list|(
name|int
name|predict
parameter_list|)
block|{
if|if
condition|(
name|predict
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"predict must be greater than 0. Found ["
operator|+
name|predict
operator|+
literal|"] in ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|predict
operator|=
name|predict
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the number of predictions that should be returned. Each          * prediction will be spaced at the intervals specified in the          * histogram. E.g "predict: 2" will return two new buckets at the end of          * the histogram with the predicted values.          */
DECL|method|predict
specifier|public
name|int
name|predict
parameter_list|()
block|{
return|return
name|predict
return|;
block|}
comment|/**          * Sets whether the model should be fit to the data using a cost          * minimizing algorithm.          *          * @param minimize          *            If the model should be fit to the underlying data          */
DECL|method|minimize
specifier|public
name|MovAvgPipelineAggregatorBuilder
name|minimize
parameter_list|(
name|boolean
name|minimize
parameter_list|)
block|{
name|this
operator|.
name|minimize
operator|=
name|minimize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets whether the model should be fit to the data using a cost          * minimizing algorithm.          */
DECL|method|minimize
specifier|public
name|Boolean
name|minimize
parameter_list|()
block|{
return|return
name|minimize
return|;
block|}
annotation|@
name|Override
DECL|method|createInternal
specifier|protected
name|PipelineAggregator
name|createInternal
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If the user doesn't set a preference for cost minimization, ask
comment|// what the model prefers
name|boolean
name|minimize
init|=
name|this
operator|.
name|minimize
operator|==
literal|null
condition|?
name|model
operator|.
name|minimizeByDefault
argument_list|()
else|:
name|this
operator|.
name|minimize
decl_stmt|;
return|return
operator|new
name|MovAvgPipelineAggregator
argument_list|(
name|name
argument_list|,
name|bucketsPaths
argument_list|,
name|formatter
argument_list|()
argument_list|,
name|gapPolicy
argument_list|,
name|window
argument_list|,
name|predict
argument_list|,
name|model
argument_list|,
name|minimize
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doValidate
specifier|public
name|void
name|doValidate
parameter_list|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
index|[]
name|aggFactories
parameter_list|,
name|List
argument_list|<
name|PipelineAggregatorBuilder
argument_list|>
name|pipelineAggregatoractories
parameter_list|)
block|{
if|if
condition|(
name|minimize
operator|!=
literal|null
operator|&&
name|minimize
operator|&&
operator|!
name|model
operator|.
name|canBeMinimized
argument_list|()
condition|)
block|{
comment|// If the user asks to minimize, but this model doesn't support
comment|// it, throw exception
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The ["
operator|+
name|model
operator|+
literal|"] model cannot be minimized for aggregation ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|bucketsPaths
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|PipelineAggregator
operator|.
name|Parser
operator|.
name|BUCKETS_PATH
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|" must contain a single entry for aggregation ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|parent
operator|instanceof
name|AbstractHistogramAggregatorFactory
argument_list|<
name|?
argument_list|>
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"moving average aggregation ["
operator|+
name|name
operator|+
literal|"] must have a histogram or date_histogram as parent"
argument_list|)
throw|;
block|}
else|else
block|{
name|AbstractHistogramAggregatorFactory
argument_list|<
name|?
argument_list|>
name|histoParent
init|=
operator|(
name|AbstractHistogramAggregatorFactory
argument_list|<
name|?
argument_list|>
operator|)
name|parent
decl_stmt|;
if|if
condition|(
name|histoParent
operator|.
name|minDocCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"parent histogram of moving average aggregation ["
operator|+
name|name
operator|+
literal|"] must have min_doc_count of 0"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|internalXContent
specifier|protected
name|XContentBuilder
name|internalXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MovAvgParser
operator|.
name|FORMAT
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|MovAvgParser
operator|.
name|GAP_POLICY
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|gapPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MovAvgParser
operator|.
name|WINDOW
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|window
argument_list|)
expr_stmt|;
if|if
condition|(
name|predict
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MovAvgParser
operator|.
name|PREDICT
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|predict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minimize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MovAvgParser
operator|.
name|MINIMIZE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minimize
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|doReadFrom
specifier|protected
name|PipelineAggregatorBuilder
name|doReadFrom
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|bucketsPaths
parameter_list|,
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|MovAvgPipelineAggregatorBuilder
name|factory
init|=
operator|new
name|MovAvgPipelineAggregatorBuilder
argument_list|(
name|name
argument_list|,
name|bucketsPaths
argument_list|)
decl_stmt|;
name|factory
operator|.
name|format
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|factory
operator|.
name|gapPolicy
operator|=
name|GapPolicy
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|factory
operator|.
name|window
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|factory
operator|.
name|model
operator|=
name|MovAvgModelStreams
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|factory
operator|.
name|predict
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|factory
operator|.
name|minimize
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
return|return
name|factory
return|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|gapPolicy
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|model
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|predict
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|minimize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|format
argument_list|,
name|gapPolicy
argument_list|,
name|window
argument_list|,
name|model
argument_list|,
name|predict
argument_list|,
name|minimize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|MovAvgPipelineAggregatorBuilder
name|other
init|=
operator|(
name|MovAvgPipelineAggregatorBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|format
argument_list|,
name|other
operator|.
name|format
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|gapPolicy
argument_list|,
name|other
operator|.
name|gapPolicy
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|window
argument_list|,
name|other
operator|.
name|window
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|model
argument_list|,
name|other
operator|.
name|model
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|predict
argument_list|,
name|other
operator|.
name|predict
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minimize
argument_list|,
name|other
operator|.
name|minimize
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

