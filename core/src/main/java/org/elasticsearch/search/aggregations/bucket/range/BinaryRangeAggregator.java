begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.range
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|LeafBucketCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|LeafBucketCollectorBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|BucketsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_comment
comment|/** A range aggregator for values that are stored in SORTED_SET doc values. */
end_comment

begin_class
DECL|class|BinaryRangeAggregator
specifier|public
specifier|final
class|class
name|BinaryRangeAggregator
extends|extends
name|BucketsAggregator
block|{
DECL|class|Range
specifier|public
specifier|static
class|class
name|Range
block|{
DECL|field|key
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|from
DECL|field|to
specifier|final
name|BytesRef
name|from
decl_stmt|,
name|to
decl_stmt|;
DECL|method|Range
specifier|public
name|Range
parameter_list|(
name|String
name|key
parameter_list|,
name|BytesRef
name|from
parameter_list|,
name|BytesRef
name|to
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|to
operator|=
name|to
expr_stmt|;
block|}
block|}
DECL|field|RANGE_COMPARATOR
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Range
argument_list|>
name|RANGE_COMPARATOR
init|=
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|a
operator|.
name|from
argument_list|,
name|b
operator|.
name|from
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|to
argument_list|,
name|b
operator|.
name|to
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|cmp
return|;
block|}
decl_stmt|;
DECL|method|compare
specifier|private
specifier|static
name|int
name|compare
parameter_list|(
name|BytesRef
name|a
parameter_list|,
name|BytesRef
name|b
parameter_list|,
name|int
name|m
parameter_list|)
block|{
return|return
name|a
operator|==
literal|null
condition|?
name|b
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
name|m
else|:
name|b
operator|==
literal|null
condition|?
name|m
else|:
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
DECL|field|valuesSource
specifier|final
name|ValuesSource
operator|.
name|Bytes
name|valuesSource
decl_stmt|;
DECL|field|format
specifier|final
name|DocValueFormat
name|format
decl_stmt|;
DECL|field|keyed
specifier|final
name|boolean
name|keyed
decl_stmt|;
DECL|field|ranges
specifier|final
name|Range
index|[]
name|ranges
decl_stmt|;
DECL|method|BinaryRangeAggregator
specifier|public
name|BinaryRangeAggregator
parameter_list|(
name|String
name|name
parameter_list|,
name|AggregatorFactories
name|factories
parameter_list|,
name|ValuesSource
operator|.
name|Bytes
name|valuesSource
parameter_list|,
name|DocValueFormat
name|format
parameter_list|,
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
parameter_list|,
name|boolean
name|keyed
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|Aggregator
name|parent
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|name
argument_list|,
name|factories
argument_list|,
name|context
argument_list|,
name|parent
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|this
operator|.
name|valuesSource
operator|=
name|valuesSource
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|keyed
operator|=
name|keyed
expr_stmt|;
name|this
operator|.
name|ranges
operator|=
name|ranges
operator|.
name|toArray
argument_list|(
operator|new
name|Range
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|this
operator|.
name|ranges
argument_list|,
name|RANGE_COMPARATOR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
operator|(
name|valuesSource
operator|!=
literal|null
operator|&&
name|valuesSource
operator|.
name|needsScores
argument_list|()
operator|)
operator|||
name|super
operator|.
name|needsScores
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|protected
name|LeafBucketCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|,
name|LeafBucketCollector
name|sub
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valuesSource
operator|==
literal|null
condition|)
block|{
return|return
name|LeafBucketCollector
operator|.
name|NO_OP_COLLECTOR
return|;
block|}
if|if
condition|(
name|valuesSource
operator|instanceof
name|ValuesSource
operator|.
name|Bytes
operator|.
name|WithOrdinals
condition|)
block|{
name|SortedSetDocValues
name|values
init|=
operator|(
operator|(
name|ValuesSource
operator|.
name|Bytes
operator|.
name|WithOrdinals
operator|)
name|valuesSource
operator|)
operator|.
name|ordinalsValues
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedSetRangeLeafCollector
argument_list|(
name|values
argument_list|,
name|ranges
argument_list|,
name|sub
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doCollect
parameter_list|(
name|LeafBucketCollector
name|sub
parameter_list|,
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|collectBucket
argument_list|(
name|sub
argument_list|,
name|doc
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
else|else
block|{
name|SortedBinaryDocValues
name|values
init|=
name|valuesSource
operator|.
name|bytesValues
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedBinaryRangeLeafCollector
argument_list|(
name|values
argument_list|,
name|ranges
argument_list|,
name|sub
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doCollect
parameter_list|(
name|LeafBucketCollector
name|sub
parameter_list|,
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|collectBucket
argument_list|(
name|sub
argument_list|,
name|doc
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
DECL|class|SortedSetRangeLeafCollector
specifier|abstract
specifier|static
class|class
name|SortedSetRangeLeafCollector
extends|extends
name|LeafBucketCollectorBase
block|{
DECL|field|froms
DECL|field|tos
DECL|field|maxTos
specifier|final
name|long
index|[]
name|froms
decl_stmt|,
name|tos
decl_stmt|,
name|maxTos
decl_stmt|;
DECL|field|values
specifier|final
name|SortedSetDocValues
name|values
decl_stmt|;
DECL|field|sub
specifier|final
name|LeafBucketCollector
name|sub
decl_stmt|;
DECL|method|SortedSetRangeLeafCollector
name|SortedSetRangeLeafCollector
parameter_list|(
name|SortedSetDocValues
name|values
parameter_list|,
name|Range
index|[]
name|ranges
parameter_list|,
name|LeafBucketCollector
name|sub
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|sub
argument_list|,
name|values
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|RANGE_COMPARATOR
operator|.
name|compare
argument_list|(
name|ranges
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|ranges
index|[
name|i
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Ranges must be sorted"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|sub
operator|=
name|sub
expr_stmt|;
name|froms
operator|=
operator|new
name|long
index|[
name|ranges
operator|.
name|length
index|]
expr_stmt|;
name|tos
operator|=
operator|new
name|long
index|[
name|ranges
operator|.
name|length
index|]
expr_stmt|;
comment|// inclusive
name|maxTos
operator|=
operator|new
name|long
index|[
name|ranges
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|ranges
index|[
name|i
index|]
operator|.
name|from
operator|==
literal|null
condition|)
block|{
name|froms
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|froms
index|[
name|i
index|]
operator|=
name|values
operator|.
name|lookupTerm
argument_list|(
name|ranges
index|[
name|i
index|]
operator|.
name|from
argument_list|)
expr_stmt|;
if|if
condition|(
name|froms
index|[
name|i
index|]
operator|<
literal|0
condition|)
block|{
name|froms
index|[
name|i
index|]
operator|=
operator|-
literal|1
operator|-
name|froms
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ranges
index|[
name|i
index|]
operator|.
name|to
operator|==
literal|null
condition|)
block|{
name|tos
index|[
name|i
index|]
operator|=
name|values
operator|.
name|getValueCount
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|long
name|ord
init|=
name|values
operator|.
name|lookupTerm
argument_list|(
name|ranges
index|[
name|i
index|]
operator|.
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|<
literal|0
condition|)
block|{
name|tos
index|[
name|i
index|]
operator|=
operator|-
literal|2
operator|-
name|ord
expr_stmt|;
block|}
else|else
block|{
name|tos
index|[
name|i
index|]
operator|=
name|ord
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
name|maxTos
index|[
literal|0
index|]
operator|=
name|tos
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|tos
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|maxTos
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxTos
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|tos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|int
name|lo
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|ord
init|=
name|values
operator|.
name|nextOrd
argument_list|()
init|;
name|ord
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
control|)
block|{
name|lo
operator|=
name|collect
argument_list|(
name|doc
argument_list|,
name|ord
argument_list|,
name|bucket
argument_list|,
name|lo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|collect
specifier|private
name|int
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|ord
parameter_list|,
name|long
name|bucket
parameter_list|,
name|int
name|lowBound
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|lo
init|=
name|lowBound
decl_stmt|,
name|hi
init|=
name|froms
operator|.
name|length
operator|-
literal|1
decl_stmt|;
comment|// all candidates are between these indexes
name|int
name|mid
init|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
decl_stmt|;
while|while
condition|(
name|lo
operator|<=
name|hi
condition|)
block|{
if|if
condition|(
name|ord
operator|<
name|froms
index|[
name|mid
index|]
condition|)
block|{
name|hi
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ord
operator|>
name|maxTos
index|[
name|mid
index|]
condition|)
block|{
name|lo
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
name|mid
operator|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|lo
operator|>
name|hi
condition|)
return|return
name|lo
return|;
comment|// no potential candidate
comment|// binary search the lower bound
name|int
name|startLo
init|=
name|lo
decl_stmt|,
name|startHi
init|=
name|mid
decl_stmt|;
while|while
condition|(
name|startLo
operator|<=
name|startHi
condition|)
block|{
specifier|final
name|int
name|startMid
init|=
operator|(
name|startLo
operator|+
name|startHi
operator|)
operator|>>>
literal|1
decl_stmt|;
if|if
condition|(
name|ord
operator|>
name|maxTos
index|[
name|startMid
index|]
condition|)
block|{
name|startLo
operator|=
name|startMid
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|startHi
operator|=
name|startMid
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|// binary search the upper bound
name|int
name|endLo
init|=
name|mid
decl_stmt|,
name|endHi
init|=
name|hi
decl_stmt|;
while|while
condition|(
name|endLo
operator|<=
name|endHi
condition|)
block|{
specifier|final
name|int
name|endMid
init|=
operator|(
name|endLo
operator|+
name|endHi
operator|)
operator|>>>
literal|1
decl_stmt|;
if|if
condition|(
name|ord
operator|<
name|froms
index|[
name|endMid
index|]
condition|)
block|{
name|endHi
operator|=
name|endMid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|endLo
operator|=
name|endMid
operator|+
literal|1
expr_stmt|;
block|}
block|}
assert|assert
name|startLo
operator|==
name|lowBound
operator|||
name|ord
operator|>
name|maxTos
index|[
name|startLo
operator|-
literal|1
index|]
assert|;
assert|assert
name|endHi
operator|==
name|froms
operator|.
name|length
operator|-
literal|1
operator|||
name|ord
operator|<
name|froms
index|[
name|endHi
operator|+
literal|1
index|]
assert|;
for|for
control|(
name|int
name|i
init|=
name|startLo
init|;
name|i
operator|<=
name|endHi
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|ord
operator|<=
name|tos
index|[
name|i
index|]
condition|)
block|{
name|doCollect
argument_list|(
name|sub
argument_list|,
name|doc
argument_list|,
name|bucket
operator|*
name|froms
operator|.
name|length
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|endHi
operator|+
literal|1
return|;
block|}
DECL|method|doCollect
specifier|protected
specifier|abstract
name|void
name|doCollect
parameter_list|(
name|LeafBucketCollector
name|sub
parameter_list|,
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|SortedBinaryRangeLeafCollector
specifier|abstract
specifier|static
class|class
name|SortedBinaryRangeLeafCollector
extends|extends
name|LeafBucketCollectorBase
block|{
DECL|field|ranges
specifier|final
name|Range
index|[]
name|ranges
decl_stmt|;
DECL|field|maxTos
specifier|final
name|BytesRef
index|[]
name|maxTos
decl_stmt|;
DECL|field|values
specifier|final
name|SortedBinaryDocValues
name|values
decl_stmt|;
DECL|field|sub
specifier|final
name|LeafBucketCollector
name|sub
decl_stmt|;
DECL|method|SortedBinaryRangeLeafCollector
name|SortedBinaryRangeLeafCollector
parameter_list|(
name|SortedBinaryDocValues
name|values
parameter_list|,
name|Range
index|[]
name|ranges
parameter_list|,
name|LeafBucketCollector
name|sub
parameter_list|)
block|{
name|super
argument_list|(
name|sub
argument_list|,
name|values
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|RANGE_COMPARATOR
operator|.
name|compare
argument_list|(
name|ranges
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|ranges
index|[
name|i
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Ranges must be sorted"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|sub
operator|=
name|sub
expr_stmt|;
name|this
operator|.
name|ranges
operator|=
name|ranges
expr_stmt|;
name|maxTos
operator|=
operator|new
name|BytesRef
index|[
name|ranges
operator|.
name|length
index|]
expr_stmt|;
if|if
condition|(
name|ranges
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|maxTos
index|[
literal|0
index|]
operator|=
name|ranges
index|[
literal|0
index|]
operator|.
name|to
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|compare
argument_list|(
name|ranges
index|[
name|i
index|]
operator|.
name|to
argument_list|,
name|maxTos
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
operator|-
literal|1
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|maxTos
index|[
name|i
index|]
operator|=
name|ranges
index|[
name|i
index|]
operator|.
name|to
expr_stmt|;
block|}
else|else
block|{
name|maxTos
index|[
name|i
index|]
operator|=
name|maxTos
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
condition|)
block|{
specifier|final
name|int
name|valuesCount
init|=
name|values
operator|.
name|docValueCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|lo
init|=
literal|0
init|;
name|i
operator|<
name|valuesCount
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|BytesRef
name|value
init|=
name|values
operator|.
name|nextValue
argument_list|()
decl_stmt|;
name|lo
operator|=
name|collect
argument_list|(
name|doc
argument_list|,
name|value
argument_list|,
name|bucket
argument_list|,
name|lo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|collect
specifier|private
name|int
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|value
parameter_list|,
name|long
name|bucket
parameter_list|,
name|int
name|lowBound
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|lo
init|=
name|lowBound
decl_stmt|,
name|hi
init|=
name|ranges
operator|.
name|length
operator|-
literal|1
decl_stmt|;
comment|// all candidates are between these indexes
name|int
name|mid
init|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
decl_stmt|;
while|while
condition|(
name|lo
operator|<=
name|hi
condition|)
block|{
if|if
condition|(
name|compare
argument_list|(
name|value
argument_list|,
name|ranges
index|[
name|mid
index|]
operator|.
name|from
argument_list|,
literal|1
argument_list|)
operator|<
literal|0
condition|)
block|{
name|hi
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compare
argument_list|(
name|value
argument_list|,
name|maxTos
index|[
name|mid
index|]
argument_list|,
operator|-
literal|1
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|lo
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
name|mid
operator|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|lo
operator|>
name|hi
condition|)
return|return
name|lo
return|;
comment|// no potential candidate
comment|// binary search the lower bound
name|int
name|startLo
init|=
name|lo
decl_stmt|,
name|startHi
init|=
name|mid
decl_stmt|;
while|while
condition|(
name|startLo
operator|<=
name|startHi
condition|)
block|{
specifier|final
name|int
name|startMid
init|=
operator|(
name|startLo
operator|+
name|startHi
operator|)
operator|>>>
literal|1
decl_stmt|;
if|if
condition|(
name|compare
argument_list|(
name|value
argument_list|,
name|maxTos
index|[
name|startMid
index|]
argument_list|,
operator|-
literal|1
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|startLo
operator|=
name|startMid
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|startHi
operator|=
name|startMid
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|// binary search the upper bound
name|int
name|endLo
init|=
name|mid
decl_stmt|,
name|endHi
init|=
name|hi
decl_stmt|;
while|while
condition|(
name|endLo
operator|<=
name|endHi
condition|)
block|{
specifier|final
name|int
name|endMid
init|=
operator|(
name|endLo
operator|+
name|endHi
operator|)
operator|>>>
literal|1
decl_stmt|;
if|if
condition|(
name|compare
argument_list|(
name|value
argument_list|,
name|ranges
index|[
name|endMid
index|]
operator|.
name|from
argument_list|,
literal|1
argument_list|)
operator|<
literal|0
condition|)
block|{
name|endHi
operator|=
name|endMid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|endLo
operator|=
name|endMid
operator|+
literal|1
expr_stmt|;
block|}
block|}
assert|assert
name|startLo
operator|==
name|lowBound
operator|||
name|compare
argument_list|(
name|value
argument_list|,
name|maxTos
index|[
name|startLo
operator|-
literal|1
index|]
argument_list|,
operator|-
literal|1
argument_list|)
operator|>=
literal|0
assert|;
assert|assert
name|endHi
operator|==
name|ranges
operator|.
name|length
operator|-
literal|1
operator|||
name|compare
argument_list|(
name|value
argument_list|,
name|ranges
index|[
name|endHi
operator|+
literal|1
index|]
operator|.
name|from
argument_list|,
literal|1
argument_list|)
operator|<
literal|0
assert|;
for|for
control|(
name|int
name|i
init|=
name|startLo
init|;
name|i
operator|<=
name|endHi
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|compare
argument_list|(
name|value
argument_list|,
name|ranges
index|[
name|i
index|]
operator|.
name|to
argument_list|,
operator|-
literal|1
argument_list|)
operator|<
literal|0
condition|)
block|{
name|doCollect
argument_list|(
name|sub
argument_list|,
name|doc
argument_list|,
name|bucket
operator|*
name|ranges
operator|.
name|length
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|endHi
operator|+
literal|1
return|;
block|}
DECL|method|doCollect
specifier|protected
specifier|abstract
name|void
name|doCollect
parameter_list|(
name|LeafBucketCollector
name|sub
parameter_list|,
name|int
name|doc
parameter_list|,
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
annotation|@
name|Override
DECL|method|buildAggregation
specifier|public
name|InternalAggregation
name|buildAggregation
parameter_list|(
name|long
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InternalBinaryRange
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ranges
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|long
name|bucketOrd
init|=
name|bucket
operator|*
name|ranges
operator|.
name|length
operator|+
name|i
decl_stmt|;
name|buckets
operator|.
name|add
argument_list|(
operator|new
name|InternalBinaryRange
operator|.
name|Bucket
argument_list|(
name|format
argument_list|,
name|keyed
argument_list|,
name|ranges
index|[
name|i
index|]
operator|.
name|key
argument_list|,
name|ranges
index|[
name|i
index|]
operator|.
name|from
argument_list|,
name|ranges
index|[
name|i
index|]
operator|.
name|to
argument_list|,
name|bucketDocCount
argument_list|(
name|bucketOrd
argument_list|)
argument_list|,
name|bucketAggregations
argument_list|(
name|bucketOrd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InternalBinaryRange
argument_list|(
name|name
argument_list|,
name|format
argument_list|,
name|keyed
argument_list|,
name|buckets
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|buildEmptyAggregation
specifier|public
name|InternalAggregation
name|buildEmptyAggregation
parameter_list|()
block|{
return|return
operator|new
name|InternalBinaryRange
argument_list|(
name|name
argument_list|,
name|format
argument_list|,
name|keyed
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|metaData
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

