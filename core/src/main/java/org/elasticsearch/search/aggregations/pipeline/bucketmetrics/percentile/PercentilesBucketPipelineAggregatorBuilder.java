begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline.bucketmetrics.percentile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|percentile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|BucketMetricsPipelineAggregatorBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|PercentilesBucketPipelineAggregatorBuilder
specifier|public
class|class
name|PercentilesBucketPipelineAggregatorBuilder
extends|extends
name|BucketMetricsPipelineAggregatorBuilder
argument_list|<
name|PercentilesBucketPipelineAggregatorBuilder
argument_list|>
block|{
DECL|field|PROTOTYPE
specifier|static
specifier|final
name|PercentilesBucketPipelineAggregatorBuilder
name|PROTOTYPE
init|=
operator|new
name|PercentilesBucketPipelineAggregatorBuilder
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
DECL|field|percents
specifier|private
name|double
index|[]
name|percents
init|=
operator|new
name|double
index|[]
block|{
literal|1.0
block|,
literal|5.0
block|,
literal|25.0
block|,
literal|50.0
block|,
literal|75.0
block|,
literal|95.0
block|,
literal|99.0
block|}
decl_stmt|;
DECL|method|PercentilesBucketPipelineAggregatorBuilder
specifier|public
name|PercentilesBucketPipelineAggregatorBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|bucketsPath
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|bucketsPath
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|PercentilesBucketPipelineAggregatorBuilder
specifier|private
name|PercentilesBucketPipelineAggregatorBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|bucketsPaths
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|PercentilesBucketPipelineAggregator
operator|.
name|TYPE
operator|.
name|name
argument_list|()
argument_list|,
name|bucketsPaths
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the percentages to calculate percentiles for in this aggregation      */
DECL|method|percents
specifier|public
name|double
index|[]
name|percents
parameter_list|()
block|{
return|return
name|percents
return|;
block|}
comment|/**      * Set the percentages to calculate percentiles for in this aggregation      */
DECL|method|percents
specifier|public
name|PercentilesBucketPipelineAggregatorBuilder
name|percents
parameter_list|(
name|double
index|[]
name|percents
parameter_list|)
block|{
if|if
condition|(
name|percents
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[percents] must not be null: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
for|for
control|(
name|Double
name|p
range|:
name|percents
control|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
argument_list|<
literal|0.0
operator|||
name|p
argument_list|>
literal|100.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|PercentilesBucketParser
operator|.
name|PERCENTS
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|" must only contain non-null doubles from 0.0-100.0 inclusive"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|percents
operator|=
name|percents
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|createInternal
specifier|protected
name|PipelineAggregator
name|createInternal
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|PercentilesBucketPipelineAggregator
argument_list|(
name|name
argument_list|,
name|percents
argument_list|,
name|bucketsPaths
argument_list|,
name|gapPolicy
argument_list|()
argument_list|,
name|formatter
argument_list|()
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doValidate
specifier|public
name|void
name|doValidate
parameter_list|(
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
index|[]
name|aggFactories
parameter_list|,
name|List
argument_list|<
name|PipelineAggregatorBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|pipelineAggregatorFactories
parameter_list|)
block|{
if|if
condition|(
name|bucketsPaths
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|PipelineAggregator
operator|.
name|Parser
operator|.
name|BUCKETS_PATH
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|" must contain a single entry for aggregation ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
for|for
control|(
name|Double
name|p
range|:
name|percents
control|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
argument_list|<
literal|0.0
operator|||
name|p
argument_list|>
literal|100.0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|PercentilesBucketParser
operator|.
name|PERCENTS
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|" must only contain non-null doubles from 0.0-100.0 inclusive"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|XContentBuilder
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|percents
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|PercentilesBucketParser
operator|.
name|PERCENTS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|percents
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|innerReadFrom
specifier|protected
name|PercentilesBucketPipelineAggregatorBuilder
name|innerReadFrom
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|bucketsPaths
parameter_list|,
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|PercentilesBucketPipelineAggregatorBuilder
name|factory
init|=
operator|new
name|PercentilesBucketPipelineAggregatorBuilder
argument_list|(
name|name
argument_list|,
name|bucketsPaths
argument_list|)
decl_stmt|;
name|factory
operator|.
name|percents
operator|=
name|in
operator|.
name|readDoubleArray
argument_list|()
expr_stmt|;
return|return
name|factory
return|;
block|}
annotation|@
name|Override
DECL|method|innerWriteTo
specifier|protected
name|void
name|innerWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeDoubleArray
argument_list|(
name|percents
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|innerHashCode
specifier|protected
name|int
name|innerHashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|percents
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|innerEquals
specifier|protected
name|boolean
name|innerEquals
parameter_list|(
name|BucketMetricsPipelineAggregatorBuilder
argument_list|<
name|PercentilesBucketPipelineAggregatorBuilder
argument_list|>
name|obj
parameter_list|)
block|{
name|PercentilesBucketPipelineAggregatorBuilder
name|other
init|=
operator|(
name|PercentilesBucketPipelineAggregatorBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|deepEquals
argument_list|(
name|percents
argument_list|,
name|other
operator|.
name|percents
argument_list|)
return|;
block|}
block|}
end_class

end_unit

