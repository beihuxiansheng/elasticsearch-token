begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.histogram
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|Rounding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalMultiBucketAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|MultiBucketsAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link Histogram}.  */
end_comment

begin_class
DECL|class|InternalDateHistogram
specifier|public
specifier|final
class|class
name|InternalDateHistogram
extends|extends
name|InternalMultiBucketAggregation
argument_list|<
name|InternalDateHistogram
argument_list|,
name|InternalDateHistogram
operator|.
name|Bucket
argument_list|>
implements|implements
name|Histogram
implements|,
name|HistogramFactory
block|{
DECL|class|Bucket
specifier|public
specifier|static
class|class
name|Bucket
extends|extends
name|InternalMultiBucketAggregation
operator|.
name|InternalBucket
implements|implements
name|Histogram
operator|.
name|Bucket
block|{
DECL|field|key
specifier|final
name|long
name|key
decl_stmt|;
DECL|field|docCount
specifier|final
name|long
name|docCount
decl_stmt|;
DECL|field|aggregations
specifier|final
name|InternalAggregations
name|aggregations
decl_stmt|;
DECL|field|keyed
specifier|private
specifier|final
specifier|transient
name|boolean
name|keyed
decl_stmt|;
DECL|field|format
specifier|protected
specifier|final
specifier|transient
name|DocValueFormat
name|format
decl_stmt|;
DECL|method|Bucket
specifier|public
name|Bucket
parameter_list|(
name|long
name|key
parameter_list|,
name|long
name|docCount
parameter_list|,
name|boolean
name|keyed
parameter_list|,
name|DocValueFormat
name|format
parameter_list|,
name|InternalAggregations
name|aggregations
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|keyed
operator|=
name|keyed
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|docCount
operator|=
name|docCount
expr_stmt|;
name|this
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
block|}
comment|/**          * Read from a stream.          */
DECL|method|Bucket
specifier|public
name|Bucket
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|boolean
name|keyed
parameter_list|,
name|DocValueFormat
name|format
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|keyed
operator|=
name|keyed
expr_stmt|;
name|key
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|docCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|aggregations
operator|=
name|InternalAggregations
operator|.
name|readAggregations
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|InternalDateHistogram
operator|.
name|Bucket
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
block|}
name|InternalDateHistogram
operator|.
name|Bucket
name|that
init|=
operator|(
name|InternalDateHistogram
operator|.
name|Bucket
operator|)
name|obj
decl_stmt|;
comment|// No need to take the keyed and format parameters into account,
comment|// they are already stored and tested on the InternalDateHistogram object
return|return
name|key
operator|==
name|that
operator|.
name|key
operator|&&
name|docCount
operator|==
name|that
operator|.
name|docCount
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|aggregations
argument_list|,
name|that
operator|.
name|aggregations
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|key
argument_list|,
name|docCount
argument_list|,
name|aggregations
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|docCount
argument_list|)
expr_stmt|;
name|aggregations
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKeyAsString
specifier|public
name|String
name|getKeyAsString
parameter_list|()
block|{
return|return
name|format
operator|.
name|format
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKey
specifier|public
name|Object
name|getKey
parameter_list|()
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|key
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|long
name|getDocCount
parameter_list|()
block|{
return|return
name|docCount
return|;
block|}
annotation|@
name|Override
DECL|method|getAggregations
specifier|public
name|Aggregations
name|getAggregations
parameter_list|()
block|{
return|return
name|aggregations
return|;
block|}
DECL|method|reduce
name|Bucket
name|reduce
parameter_list|(
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
parameter_list|,
name|ReduceContext
name|context
parameter_list|)
block|{
name|List
argument_list|<
name|InternalAggregations
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|docCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|docCount
operator|+=
name|bucket
operator|.
name|docCount
expr_stmt|;
name|aggregations
operator|.
name|add
argument_list|(
operator|(
name|InternalAggregations
operator|)
name|bucket
operator|.
name|getAggregations
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|InternalAggregations
name|aggs
init|=
name|InternalAggregations
operator|.
name|reduce
argument_list|(
name|aggregations
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|InternalDateHistogram
operator|.
name|Bucket
argument_list|(
name|key
argument_list|,
name|docCount
argument_list|,
name|keyed
argument_list|,
name|format
argument_list|,
name|aggs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|keyAsString
init|=
name|format
operator|.
name|format
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyed
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|keyAsString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|!=
name|DocValueFormat
operator|.
name|RAW
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|CommonFields
operator|.
name|KEY_AS_STRING
argument_list|,
name|keyAsString
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|CommonFields
operator|.
name|KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|CommonFields
operator|.
name|DOC_COUNT
argument_list|,
name|docCount
argument_list|)
expr_stmt|;
name|aggregations
operator|.
name|toXContentInternal
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|getFormatter
specifier|public
name|DocValueFormat
name|getFormatter
parameter_list|()
block|{
return|return
name|format
return|;
block|}
DECL|method|getKeyed
specifier|public
name|boolean
name|getKeyed
parameter_list|()
block|{
return|return
name|keyed
return|;
block|}
block|}
DECL|class|EmptyBucketInfo
specifier|static
class|class
name|EmptyBucketInfo
block|{
DECL|field|rounding
specifier|final
name|Rounding
name|rounding
decl_stmt|;
DECL|field|subAggregations
specifier|final
name|InternalAggregations
name|subAggregations
decl_stmt|;
DECL|field|bounds
specifier|final
name|ExtendedBounds
name|bounds
decl_stmt|;
DECL|method|EmptyBucketInfo
name|EmptyBucketInfo
parameter_list|(
name|Rounding
name|rounding
parameter_list|,
name|InternalAggregations
name|subAggregations
parameter_list|)
block|{
name|this
argument_list|(
name|rounding
argument_list|,
name|subAggregations
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|EmptyBucketInfo
name|EmptyBucketInfo
parameter_list|(
name|Rounding
name|rounding
parameter_list|,
name|InternalAggregations
name|subAggregations
parameter_list|,
name|ExtendedBounds
name|bounds
parameter_list|)
block|{
name|this
operator|.
name|rounding
operator|=
name|rounding
expr_stmt|;
name|this
operator|.
name|subAggregations
operator|=
name|subAggregations
expr_stmt|;
name|this
operator|.
name|bounds
operator|=
name|bounds
expr_stmt|;
block|}
DECL|method|EmptyBucketInfo
name|EmptyBucketInfo
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|rounding
operator|=
name|Rounding
operator|.
name|Streams
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|subAggregations
operator|=
name|InternalAggregations
operator|.
name|readAggregations
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|bounds
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|ExtendedBounds
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTo
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Rounding
operator|.
name|Streams
operator|.
name|write
argument_list|(
name|rounding
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|subAggregations
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|bounds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|EmptyBucketInfo
name|that
init|=
operator|(
name|EmptyBucketInfo
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|rounding
argument_list|,
name|that
operator|.
name|rounding
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|bounds
argument_list|,
name|that
operator|.
name|bounds
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|subAggregations
argument_list|,
name|that
operator|.
name|subAggregations
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|rounding
argument_list|,
name|bounds
argument_list|,
name|subAggregations
argument_list|)
return|;
block|}
block|}
DECL|field|buckets
specifier|private
specifier|final
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
decl_stmt|;
DECL|field|order
specifier|private
specifier|final
name|InternalOrder
name|order
decl_stmt|;
DECL|field|format
specifier|private
specifier|final
name|DocValueFormat
name|format
decl_stmt|;
DECL|field|keyed
specifier|private
specifier|final
name|boolean
name|keyed
decl_stmt|;
DECL|field|minDocCount
specifier|private
specifier|final
name|long
name|minDocCount
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|long
name|offset
decl_stmt|;
DECL|field|emptyBucketInfo
specifier|private
specifier|final
name|EmptyBucketInfo
name|emptyBucketInfo
decl_stmt|;
DECL|method|InternalDateHistogram
name|InternalDateHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
parameter_list|,
name|InternalOrder
name|order
parameter_list|,
name|long
name|minDocCount
parameter_list|,
name|long
name|offset
parameter_list|,
name|EmptyBucketInfo
name|emptyBucketInfo
parameter_list|,
name|DocValueFormat
name|formatter
parameter_list|,
name|boolean
name|keyed
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|this
operator|.
name|buckets
operator|=
name|buckets
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
assert|assert
operator|(
name|minDocCount
operator|==
literal|0
operator|)
operator|==
operator|(
name|emptyBucketInfo
operator|!=
literal|null
operator|)
assert|;
name|this
operator|.
name|minDocCount
operator|=
name|minDocCount
expr_stmt|;
name|this
operator|.
name|emptyBucketInfo
operator|=
name|emptyBucketInfo
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|formatter
expr_stmt|;
name|this
operator|.
name|keyed
operator|=
name|keyed
expr_stmt|;
block|}
comment|/**      * Stream from a stream.      */
DECL|method|InternalDateHistogram
specifier|public
name|InternalDateHistogram
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|order
operator|=
name|InternalOrder
operator|.
name|Streams
operator|.
name|readOrder
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|minDocCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|minDocCount
operator|==
literal|0
condition|)
block|{
name|emptyBucketInfo
operator|=
operator|new
name|EmptyBucketInfo
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|emptyBucketInfo
operator|=
literal|null
expr_stmt|;
block|}
name|offset
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|format
operator|=
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|keyed
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|buckets
operator|=
name|in
operator|.
name|readList
argument_list|(
name|stream
lambda|->
operator|new
name|Bucket
argument_list|(
name|stream
argument_list|,
name|keyed
argument_list|,
name|format
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalOrder
operator|.
name|Streams
operator|.
name|writeOrder
argument_list|(
name|order
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|minDocCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|minDocCount
operator|==
literal|0
condition|)
block|{
name|emptyBucketInfo
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|keyed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeList
argument_list|(
name|buckets
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|DateHistogramAggregationBuilder
operator|.
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getBuckets
specifier|public
name|List
argument_list|<
name|Histogram
operator|.
name|Bucket
argument_list|>
name|getBuckets
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|buckets
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|InternalDateHistogram
name|create
parameter_list|(
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
parameter_list|)
block|{
return|return
operator|new
name|InternalDateHistogram
argument_list|(
name|name
argument_list|,
name|buckets
argument_list|,
name|order
argument_list|,
name|minDocCount
argument_list|,
name|offset
argument_list|,
name|emptyBucketInfo
argument_list|,
name|format
argument_list|,
name|keyed
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createBucket
specifier|public
name|Bucket
name|createBucket
parameter_list|(
name|InternalAggregations
name|aggregations
parameter_list|,
name|Bucket
name|prototype
parameter_list|)
block|{
return|return
operator|new
name|Bucket
argument_list|(
name|prototype
operator|.
name|key
argument_list|,
name|prototype
operator|.
name|docCount
argument_list|,
name|prototype
operator|.
name|keyed
argument_list|,
name|prototype
operator|.
name|format
argument_list|,
name|aggregations
argument_list|)
return|;
block|}
DECL|class|IteratorAndCurrent
specifier|private
specifier|static
class|class
name|IteratorAndCurrent
block|{
DECL|field|iterator
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Bucket
argument_list|>
name|iterator
decl_stmt|;
DECL|field|current
specifier|private
name|Bucket
name|current
decl_stmt|;
DECL|method|IteratorAndCurrent
name|IteratorAndCurrent
parameter_list|(
name|Iterator
argument_list|<
name|Bucket
argument_list|>
name|iterator
parameter_list|)
block|{
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
name|current
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reduceBuckets
specifier|private
name|List
argument_list|<
name|Bucket
argument_list|>
name|reduceBuckets
parameter_list|(
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
specifier|final
name|PriorityQueue
argument_list|<
name|IteratorAndCurrent
argument_list|>
name|pq
init|=
operator|new
name|PriorityQueue
argument_list|<
name|IteratorAndCurrent
argument_list|>
argument_list|(
name|aggregations
operator|.
name|size
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|IteratorAndCurrent
name|a
parameter_list|,
name|IteratorAndCurrent
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|current
operator|.
name|key
operator|<
name|b
operator|.
name|current
operator|.
name|key
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|InternalAggregation
name|aggregation
range|:
name|aggregations
control|)
block|{
name|InternalDateHistogram
name|histogram
init|=
operator|(
name|InternalDateHistogram
operator|)
name|aggregation
decl_stmt|;
if|if
condition|(
name|histogram
operator|.
name|buckets
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|pq
operator|.
name|add
argument_list|(
operator|new
name|IteratorAndCurrent
argument_list|(
name|histogram
operator|.
name|buckets
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Bucket
argument_list|>
name|reducedBuckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|pq
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// list of buckets coming from different shards that have the same key
name|List
argument_list|<
name|Bucket
argument_list|>
name|currentBuckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|double
name|key
init|=
name|pq
operator|.
name|top
argument_list|()
operator|.
name|current
operator|.
name|key
decl_stmt|;
do|do
block|{
specifier|final
name|IteratorAndCurrent
name|top
init|=
name|pq
operator|.
name|top
argument_list|()
decl_stmt|;
if|if
condition|(
name|top
operator|.
name|current
operator|.
name|key
operator|!=
name|key
condition|)
block|{
comment|// the key changes, reduce what we already buffered and reset the buffer for current buckets
specifier|final
name|Bucket
name|reduced
init|=
name|currentBuckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reduce
argument_list|(
name|currentBuckets
argument_list|,
name|reduceContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|reduced
operator|.
name|getDocCount
argument_list|()
operator|>=
name|minDocCount
operator|||
name|reduceContext
operator|.
name|isFinalReduce
argument_list|()
operator|==
literal|false
condition|)
block|{
name|reducedBuckets
operator|.
name|add
argument_list|(
name|reduced
argument_list|)
expr_stmt|;
block|}
name|currentBuckets
operator|.
name|clear
argument_list|()
expr_stmt|;
name|key
operator|=
name|top
operator|.
name|current
operator|.
name|key
expr_stmt|;
block|}
name|currentBuckets
operator|.
name|add
argument_list|(
name|top
operator|.
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|top
operator|.
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Bucket
name|next
init|=
name|top
operator|.
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
assert|assert
name|next
operator|.
name|key
operator|>
name|top
operator|.
name|current
operator|.
name|key
operator|:
literal|"shards must return data sorted by key"
assert|;
name|top
operator|.
name|current
operator|=
name|next
expr_stmt|;
name|pq
operator|.
name|updateTop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pq
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|pq
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
do|;
if|if
condition|(
name|currentBuckets
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
specifier|final
name|Bucket
name|reduced
init|=
name|currentBuckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reduce
argument_list|(
name|currentBuckets
argument_list|,
name|reduceContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|reduced
operator|.
name|getDocCount
argument_list|()
operator|>=
name|minDocCount
operator|||
name|reduceContext
operator|.
name|isFinalReduce
argument_list|()
operator|==
literal|false
condition|)
block|{
name|reducedBuckets
operator|.
name|add
argument_list|(
name|reduced
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|reducedBuckets
return|;
block|}
DECL|method|addEmptyBuckets
specifier|private
name|void
name|addEmptyBuckets
parameter_list|(
name|List
argument_list|<
name|Bucket
argument_list|>
name|list
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
name|Bucket
name|lastBucket
init|=
literal|null
decl_stmt|;
name|ExtendedBounds
name|bounds
init|=
name|emptyBucketInfo
operator|.
name|bounds
decl_stmt|;
name|ListIterator
argument_list|<
name|Bucket
argument_list|>
name|iter
init|=
name|list
operator|.
name|listIterator
argument_list|()
decl_stmt|;
comment|// first adding all the empty buckets *before* the actual data (based on th extended_bounds.min the user requested)
name|InternalAggregations
name|reducedEmptySubAggs
init|=
name|InternalAggregations
operator|.
name|reduce
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|emptyBucketInfo
operator|.
name|subAggregations
argument_list|)
argument_list|,
name|reduceContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|bounds
operator|!=
literal|null
condition|)
block|{
name|Bucket
name|firstBucket
init|=
name|iter
operator|.
name|hasNext
argument_list|()
condition|?
name|list
operator|.
name|get
argument_list|(
name|iter
operator|.
name|nextIndex
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|firstBucket
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|bounds
operator|.
name|getMin
argument_list|()
operator|!=
literal|null
operator|&&
name|bounds
operator|.
name|getMax
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|long
name|key
init|=
name|bounds
operator|.
name|getMin
argument_list|()
decl_stmt|;
name|long
name|max
init|=
name|bounds
operator|.
name|getMax
argument_list|()
decl_stmt|;
while|while
condition|(
name|key
operator|<=
name|max
condition|)
block|{
name|iter
operator|.
name|add
argument_list|(
operator|new
name|InternalDateHistogram
operator|.
name|Bucket
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|keyed
argument_list|,
name|format
argument_list|,
name|reducedEmptySubAggs
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
name|nextKey
argument_list|(
name|key
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|bounds
operator|.
name|getMin
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|long
name|key
init|=
name|bounds
operator|.
name|getMin
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|<
name|firstBucket
operator|.
name|key
condition|)
block|{
while|while
condition|(
name|key
operator|<
name|firstBucket
operator|.
name|key
condition|)
block|{
name|iter
operator|.
name|add
argument_list|(
operator|new
name|InternalDateHistogram
operator|.
name|Bucket
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|keyed
argument_list|,
name|format
argument_list|,
name|reducedEmptySubAggs
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
name|nextKey
argument_list|(
name|key
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// now adding the empty buckets within the actual data,
comment|// e.g. if the data series is [1,2,3,7] there're 3 empty buckets that will be created for 4,5,6
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Bucket
name|nextBucket
init|=
name|list
operator|.
name|get
argument_list|(
name|iter
operator|.
name|nextIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastBucket
operator|!=
literal|null
condition|)
block|{
name|long
name|key
init|=
name|nextKey
argument_list|(
name|lastBucket
operator|.
name|key
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|key
operator|<
name|nextBucket
operator|.
name|key
condition|)
block|{
name|iter
operator|.
name|add
argument_list|(
operator|new
name|InternalDateHistogram
operator|.
name|Bucket
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|keyed
argument_list|,
name|format
argument_list|,
name|reducedEmptySubAggs
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
name|nextKey
argument_list|(
name|key
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
assert|assert
name|key
operator|==
name|nextBucket
operator|.
name|key
assert|;
block|}
name|lastBucket
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
comment|// finally, adding the empty buckets *after* the actual data (based on the extended_bounds.max requested by the user)
if|if
condition|(
name|bounds
operator|!=
literal|null
operator|&&
name|lastBucket
operator|!=
literal|null
operator|&&
name|bounds
operator|.
name|getMax
argument_list|()
operator|!=
literal|null
operator|&&
name|bounds
operator|.
name|getMax
argument_list|()
operator|>
name|lastBucket
operator|.
name|key
condition|)
block|{
name|long
name|key
init|=
name|emptyBucketInfo
operator|.
name|rounding
operator|.
name|nextRoundingValue
argument_list|(
name|lastBucket
operator|.
name|key
argument_list|)
decl_stmt|;
name|long
name|max
init|=
name|bounds
operator|.
name|getMax
argument_list|()
decl_stmt|;
while|while
condition|(
name|key
operator|<=
name|max
condition|)
block|{
name|iter
operator|.
name|add
argument_list|(
operator|new
name|InternalDateHistogram
operator|.
name|Bucket
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|keyed
argument_list|,
name|format
argument_list|,
name|reducedEmptySubAggs
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
name|emptyBucketInfo
operator|.
name|rounding
operator|.
name|nextRoundingValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doReduce
specifier|public
name|InternalAggregation
name|doReduce
parameter_list|(
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggregations
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
name|List
argument_list|<
name|Bucket
argument_list|>
name|reducedBuckets
init|=
name|reduceBuckets
argument_list|(
name|aggregations
argument_list|,
name|reduceContext
argument_list|)
decl_stmt|;
comment|// adding empty buckets if needed
if|if
condition|(
name|minDocCount
operator|==
literal|0
condition|)
block|{
name|addEmptyBuckets
argument_list|(
name|reducedBuckets
argument_list|,
name|reduceContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|==
name|InternalOrder
operator|.
name|KEY_ASC
operator|||
name|reduceContext
operator|.
name|isFinalReduce
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// nothing to do, data are already sorted since shards return
comment|// sorted buckets and the merge-sort performed by reduceBuckets
comment|// maintains order
block|}
elseif|else
if|if
condition|(
name|order
operator|==
name|InternalOrder
operator|.
name|KEY_DESC
condition|)
block|{
comment|// we just need to reverse here...
name|List
argument_list|<
name|Bucket
argument_list|>
name|reverse
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|reducedBuckets
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|reverse
argument_list|)
expr_stmt|;
name|reducedBuckets
operator|=
name|reverse
expr_stmt|;
block|}
else|else
block|{
comment|// sorted by sub-aggregation, need to fall back to a costly n*log(n) sort
name|CollectionUtil
operator|.
name|introSort
argument_list|(
name|reducedBuckets
argument_list|,
name|order
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InternalDateHistogram
argument_list|(
name|getName
argument_list|()
argument_list|,
name|reducedBuckets
argument_list|,
name|order
argument_list|,
name|minDocCount
argument_list|,
name|offset
argument_list|,
name|emptyBucketInfo
argument_list|,
name|format
argument_list|,
name|keyed
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|getMetaData
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|public
name|XContentBuilder
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|keyed
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|CommonFields
operator|.
name|BUCKETS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|CommonFields
operator|.
name|BUCKETS
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|bucket
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keyed
condition|)
block|{
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|// HistogramFactory method impls
annotation|@
name|Override
DECL|method|getKey
specifier|public
name|Number
name|getKey
parameter_list|(
name|MultiBucketsAggregation
operator|.
name|Bucket
name|bucket
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Bucket
operator|)
name|bucket
operator|)
operator|.
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|nextKey
specifier|public
name|Number
name|nextKey
parameter_list|(
name|Number
name|key
parameter_list|)
block|{
return|return
name|emptyBucketInfo
operator|.
name|rounding
operator|.
name|nextRoundingValue
argument_list|(
name|key
operator|.
name|longValue
argument_list|()
operator|-
name|offset
argument_list|)
operator|+
name|offset
return|;
block|}
annotation|@
name|Override
DECL|method|createAggregation
specifier|public
name|InternalAggregation
name|createAggregation
parameter_list|(
name|List
argument_list|<
name|MultiBucketsAggregation
operator|.
name|Bucket
argument_list|>
name|buckets
parameter_list|)
block|{
comment|// convert buckets to the right type
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|b
range|:
name|buckets
control|)
block|{
name|buckets2
operator|.
name|add
argument_list|(
operator|(
name|Bucket
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
name|buckets2
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|buckets2
argument_list|)
expr_stmt|;
return|return
operator|new
name|InternalDateHistogram
argument_list|(
name|name
argument_list|,
name|buckets2
argument_list|,
name|order
argument_list|,
name|minDocCount
argument_list|,
name|offset
argument_list|,
name|emptyBucketInfo
argument_list|,
name|format
argument_list|,
name|keyed
argument_list|,
name|pipelineAggregators
argument_list|()
argument_list|,
name|getMetaData
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createBucket
specifier|public
name|Bucket
name|createBucket
parameter_list|(
name|Number
name|key
parameter_list|,
name|long
name|docCount
parameter_list|,
name|InternalAggregations
name|aggregations
parameter_list|)
block|{
return|return
operator|new
name|Bucket
argument_list|(
name|key
operator|.
name|longValue
argument_list|()
argument_list|,
name|docCount
argument_list|,
name|keyed
argument_list|,
name|format
argument_list|,
name|aggregations
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|InternalDateHistogram
name|that
init|=
operator|(
name|InternalDateHistogram
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|buckets
argument_list|,
name|that
operator|.
name|buckets
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|order
argument_list|,
name|that
operator|.
name|order
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|format
argument_list|,
name|that
operator|.
name|format
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|keyed
argument_list|,
name|that
operator|.
name|keyed
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minDocCount
argument_list|,
name|that
operator|.
name|minDocCount
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|offset
argument_list|,
name|that
operator|.
name|offset
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|emptyBucketInfo
argument_list|,
name|that
operator|.
name|emptyBucketInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|buckets
argument_list|,
name|order
argument_list|,
name|format
argument_list|,
name|keyed
argument_list|,
name|minDocCount
argument_list|,
name|offset
argument_list|,
name|emptyBucketInfo
argument_list|)
return|;
block|}
block|}
end_class

end_unit

