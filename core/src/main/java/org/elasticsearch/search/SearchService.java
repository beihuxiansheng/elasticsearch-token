begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectFloatHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
operator|.
name|PageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMapLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
operator|.
name|Loading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|ParentFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|stats
operator|.
name|ShardSearchStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|stats
operator|.
name|StatsGroupsParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesWarmer
operator|.
name|TerminationHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|cache
operator|.
name|request
operator|.
name|IndicesRequestCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|QueryFetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|ScrollQueryFetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|ShardFetchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|fielddata
operator|.
name|FieldDataFieldsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|fielddata
operator|.
name|FieldDataFieldsContext
operator|.
name|FieldDataField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|fielddata
operator|.
name|FieldDataFieldsFetchSubPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|script
operator|.
name|ScriptFieldsContext
operator|.
name|ScriptField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|DefaultSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalScrollSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ScrollContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
operator|.
name|Lifetime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ShardSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|Profilers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResultProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|ScrollQuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMinutes
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SearchService
specifier|public
class|class
name|SearchService
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|SearchService
argument_list|>
implements|implements
name|IndexEventListener
block|{
DECL|field|NORMS_LOADING_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NORMS_LOADING_KEY
init|=
literal|"index.norms.loading"
decl_stmt|;
DECL|field|DEFAULT_KEEPALIVE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_KEEPALIVE_KEY
init|=
literal|"search.default_keep_alive"
decl_stmt|;
DECL|field|KEEPALIVE_INTERVAL_KEY
specifier|public
specifier|static
specifier|final
name|String
name|KEEPALIVE_INTERVAL_KEY
init|=
literal|"search.keep_alive_interval"
decl_stmt|;
DECL|field|NO_TIMEOUT
specifier|public
specifier|static
specifier|final
name|TimeValue
name|NO_TIMEOUT
init|=
name|timeValueMillis
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_SEARCH_TIMEOUT_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|DEFAULT_SEARCH_TIMEOUT_SETTING
init|=
name|Setting
operator|.
name|timeSetting
argument_list|(
literal|"search.default_search_timeout"
argument_list|,
name|NO_TIMEOUT
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|indicesWarmer
specifier|private
specifier|final
name|IndicesWarmer
name|indicesWarmer
decl_stmt|;
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|field|pageCacheRecycler
specifier|private
specifier|final
name|PageCacheRecycler
name|pageCacheRecycler
decl_stmt|;
DECL|field|bigArrays
specifier|private
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|dfsPhase
specifier|private
specifier|final
name|DfsPhase
name|dfsPhase
decl_stmt|;
DECL|field|queryPhase
specifier|private
specifier|final
name|QueryPhase
name|queryPhase
decl_stmt|;
DECL|field|fetchPhase
specifier|private
specifier|final
name|FetchPhase
name|fetchPhase
decl_stmt|;
DECL|field|indicesQueryCache
specifier|private
specifier|final
name|IndicesRequestCache
name|indicesQueryCache
decl_stmt|;
DECL|field|defaultKeepAlive
specifier|private
specifier|final
name|long
name|defaultKeepAlive
decl_stmt|;
DECL|field|defaultSearchTimeout
specifier|private
specifier|volatile
name|TimeValue
name|defaultSearchTimeout
decl_stmt|;
DECL|field|keepAliveReaper
specifier|private
specifier|final
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|keepAliveReaper
decl_stmt|;
DECL|field|idGenerator
specifier|private
specifier|final
name|AtomicLong
name|idGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|activeContexts
specifier|private
specifier|final
name|ConcurrentMapLong
argument_list|<
name|SearchContext
argument_list|>
name|activeContexts
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMapLongWithAggressiveConcurrency
argument_list|()
decl_stmt|;
DECL|field|elementParsers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SearchParseElement
argument_list|>
name|elementParsers
decl_stmt|;
DECL|field|parseFieldMatcher
specifier|private
specifier|final
name|ParseFieldMatcher
name|parseFieldMatcher
decl_stmt|;
annotation|@
name|Inject
DECL|method|SearchService
specifier|public
name|SearchService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|IndicesWarmer
name|indicesWarmer
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|PageCacheRecycler
name|pageCacheRecycler
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|DfsPhase
name|dfsPhase
parameter_list|,
name|QueryPhase
name|queryPhase
parameter_list|,
name|FetchPhase
name|fetchPhase
parameter_list|,
name|IndicesRequestCache
name|indicesQueryCache
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|parseFieldMatcher
operator|=
operator|new
name|ParseFieldMatcher
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|indicesWarmer
operator|=
name|indicesWarmer
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
name|this
operator|.
name|pageCacheRecycler
operator|=
name|pageCacheRecycler
expr_stmt|;
name|this
operator|.
name|bigArrays
operator|=
name|bigArrays
expr_stmt|;
name|this
operator|.
name|dfsPhase
operator|=
name|dfsPhase
expr_stmt|;
name|this
operator|.
name|queryPhase
operator|=
name|queryPhase
expr_stmt|;
name|this
operator|.
name|fetchPhase
operator|=
name|fetchPhase
expr_stmt|;
name|this
operator|.
name|indicesQueryCache
operator|=
name|indicesQueryCache
expr_stmt|;
name|TimeValue
name|keepAliveInterval
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|KEEPALIVE_INTERVAL_KEY
argument_list|,
name|timeValueMinutes
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// we can have 5 minutes here, since we make sure to clean with search requests and when shard/index closes
name|this
operator|.
name|defaultKeepAlive
operator|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|DEFAULT_KEEPALIVE_KEY
argument_list|,
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|millis
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SearchParseElement
argument_list|>
name|elementParsers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|elementParsers
operator|.
name|putAll
argument_list|(
name|dfsPhase
operator|.
name|parseElements
argument_list|()
argument_list|)
expr_stmt|;
name|elementParsers
operator|.
name|putAll
argument_list|(
name|queryPhase
operator|.
name|parseElements
argument_list|()
argument_list|)
expr_stmt|;
name|elementParsers
operator|.
name|putAll
argument_list|(
name|fetchPhase
operator|.
name|parseElements
argument_list|()
argument_list|)
expr_stmt|;
name|elementParsers
operator|.
name|put
argument_list|(
literal|"stats"
argument_list|,
operator|new
name|StatsGroupsParseElement
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|elementParsers
operator|=
name|unmodifiableMap
argument_list|(
name|elementParsers
argument_list|)
expr_stmt|;
name|this
operator|.
name|keepAliveReaper
operator|=
name|threadPool
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|Reaper
argument_list|()
argument_list|,
name|keepAliveInterval
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesWarmer
operator|.
name|addListener
argument_list|(
operator|new
name|NormsWarmer
argument_list|(
name|indicesWarmer
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesWarmer
operator|.
name|addListener
argument_list|(
operator|new
name|FieldDataWarmer
argument_list|(
name|indicesWarmer
argument_list|)
argument_list|)
expr_stmt|;
name|defaultSearchTimeout
operator|=
name|DEFAULT_SEARCH_TIMEOUT_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|clusterSettings
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|DEFAULT_SEARCH_TIMEOUT_SETTING
argument_list|,
name|this
operator|::
name|setDefaultSearchTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|setDefaultSearchTimeout
specifier|private
name|void
name|setDefaultSearchTimeout
parameter_list|(
name|TimeValue
name|defaultSearchTimeout
parameter_list|)
block|{
name|this
operator|.
name|defaultSearchTimeout
operator|=
name|defaultSearchTimeout
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterIndexClosed
specifier|public
name|void
name|afterIndexClosed
parameter_list|(
name|Index
name|index
parameter_list|,
name|Settings
name|indexSettings
parameter_list|)
block|{
comment|// once an index is closed we can just clean up all the pending search context information
comment|// to release memory and let references to the filesystem go etc.
name|IndexMetaData
name|idxMeta
init|=
name|SearchService
operator|.
name|this
operator|.
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxMeta
operator|!=
literal|null
operator|&&
name|idxMeta
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
comment|// we need to check if it's really closed
comment|// since sometimes due to a relocation we already closed the shard and that causes the index to be closed
comment|// if we then close all the contexts we can get some search failures along the way which are not expected.
comment|// it's fine to keep the contexts open if the index is still "alive"
comment|// unfortunately we don't have a clear way to signal today why an index is closed.
name|afterIndexDeleted
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|afterIndexDeleted
specifier|public
name|void
name|afterIndexDeleted
parameter_list|(
name|Index
name|index
parameter_list|,
name|Settings
name|indexSettings
parameter_list|)
block|{
name|freeAllContextForIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
DECL|method|putContext
specifier|protected
name|void
name|putContext
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
specifier|final
name|SearchContext
name|previous
init|=
name|activeContexts
operator|.
name|put
argument_list|(
name|context
operator|.
name|id
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
assert|assert
name|previous
operator|==
literal|null
assert|;
block|}
DECL|method|removeContext
specifier|protected
name|SearchContext
name|removeContext
parameter_list|(
name|long
name|id
parameter_list|)
block|{
return|return
name|activeContexts
operator|.
name|remove
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
for|for
control|(
specifier|final
name|SearchContext
name|context
range|:
name|activeContexts
operator|.
name|values
argument_list|()
control|)
block|{
name|freeContext
argument_list|(
name|context
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{
name|doStop
argument_list|()
expr_stmt|;
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|keepAliveReaper
argument_list|)
expr_stmt|;
block|}
DECL|method|executeDfsPhase
specifier|public
name|DfsSearchResult
name|executeDfsPhase
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|)
block|{
specifier|final
name|SearchContext
name|context
init|=
name|createAndPutContext
argument_list|(
name|request
argument_list|)
decl_stmt|;
try|try
block|{
name|contextProcessing
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|dfsPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|contextProcessedSuccessfully
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|dfsResult
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Dfs phase failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|processFailure
argument_list|(
name|context
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Try to load the query results from the cache or execute the query phase directly if the cache cannot be used.      */
DECL|method|loadOrExecuteQueryPhase
specifier|private
name|void
name|loadOrExecuteQueryPhase
parameter_list|(
specifier|final
name|ShardSearchRequest
name|request
parameter_list|,
specifier|final
name|SearchContext
name|context
parameter_list|,
specifier|final
name|QueryPhase
name|queryPhase
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|boolean
name|canCache
init|=
name|indicesQueryCache
operator|.
name|canCache
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|canCache
condition|)
block|{
name|indicesQueryCache
operator|.
name|loadIntoContext
argument_list|(
name|request
argument_list|,
name|context
argument_list|,
name|queryPhase
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeQueryPhase
specifier|public
name|QuerySearchResultProvider
name|executeQueryPhase
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|)
block|{
specifier|final
name|SearchContext
name|context
init|=
name|createAndPutContext
argument_list|(
name|request
argument_list|)
decl_stmt|;
specifier|final
name|ShardSearchStats
name|shardSearchStats
init|=
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|searchService
argument_list|()
decl_stmt|;
try|try
block|{
name|shardSearchStats
operator|.
name|onPreQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|contextProcessing
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|loadOrExecuteQueryPhase
argument_list|(
name|request
argument_list|,
name|context
argument_list|,
name|queryPhase
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
operator|.
name|scoreDocs
operator|.
name|length
operator|==
literal|0
operator|&&
name|context
operator|.
name|scrollContext
argument_list|()
operator|==
literal|null
condition|)
block|{
name|freeContext
argument_list|(
name|context
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contextProcessedSuccessfully
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|shardSearchStats
operator|.
name|onQueryPhase
argument_list|(
name|context
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|time
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|queryResult
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// execution exception can happen while loading the cache, strip it
if|if
condition|(
name|e
operator|instanceof
name|ExecutionException
condition|)
block|{
name|e
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|shardSearchStats
operator|.
name|onFailedQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Query phase failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|processFailure
argument_list|(
name|context
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeQueryPhase
specifier|public
name|ScrollQuerySearchResult
name|executeQueryPhase
parameter_list|(
name|InternalScrollSearchRequest
name|request
parameter_list|)
block|{
specifier|final
name|SearchContext
name|context
init|=
name|findContext
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|ShardSearchStats
name|shardSearchStats
init|=
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|searchService
argument_list|()
decl_stmt|;
try|try
block|{
name|shardSearchStats
operator|.
name|onPreQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|contextProcessing
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|processScroll
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|queryPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|contextProcessedSuccessfully
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|shardSearchStats
operator|.
name|onQueryPhase
argument_list|(
name|context
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|time
argument_list|)
expr_stmt|;
return|return
operator|new
name|ScrollQuerySearchResult
argument_list|(
name|context
operator|.
name|queryResult
argument_list|()
argument_list|,
name|context
operator|.
name|shardTarget
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|shardSearchStats
operator|.
name|onFailedQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Query phase failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|processFailure
argument_list|(
name|context
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeQueryPhase
specifier|public
name|QuerySearchResult
name|executeQueryPhase
parameter_list|(
name|QuerySearchRequest
name|request
parameter_list|)
block|{
specifier|final
name|SearchContext
name|context
init|=
name|findContext
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|contextProcessing
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|setAggregatedDfs
argument_list|(
name|request
operator|.
name|dfs
argument_list|()
argument_list|)
expr_stmt|;
name|IndexShard
name|indexShard
init|=
name|context
operator|.
name|indexShard
argument_list|()
decl_stmt|;
name|ShardSearchStats
name|shardSearchStats
init|=
name|indexShard
operator|.
name|searchService
argument_list|()
decl_stmt|;
try|try
block|{
name|shardSearchStats
operator|.
name|onPreQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|queryPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
operator|.
name|scoreDocs
operator|.
name|length
operator|==
literal|0
operator|&&
name|context
operator|.
name|scrollContext
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// no hits, we can release the context since there will be no fetch phase
name|freeContext
argument_list|(
name|context
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contextProcessedSuccessfully
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|shardSearchStats
operator|.
name|onQueryPhase
argument_list|(
name|context
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|time
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|queryResult
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|shardSearchStats
operator|.
name|onFailedQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Query phase failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|processFailure
argument_list|(
name|context
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fetchPhaseShouldFreeContext
specifier|private
name|boolean
name|fetchPhaseShouldFreeContext
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|scrollContext
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// simple search, no scroll
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// scroll request, but the scroll was not extended
return|return
name|context
operator|.
name|scrollContext
argument_list|()
operator|.
name|scroll
operator|==
literal|null
return|;
block|}
block|}
DECL|method|executeFetchPhase
specifier|public
name|QueryFetchSearchResult
name|executeFetchPhase
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|)
block|{
specifier|final
name|SearchContext
name|context
init|=
name|createAndPutContext
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|contextProcessing
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|ShardSearchStats
name|shardSearchStats
init|=
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|searchService
argument_list|()
decl_stmt|;
name|shardSearchStats
operator|.
name|onPreQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|loadOrExecuteQueryPhase
argument_list|(
name|request
argument_list|,
name|context
argument_list|,
name|queryPhase
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|shardSearchStats
operator|.
name|onFailedQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|long
name|time2
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|shardSearchStats
operator|.
name|onQueryPhase
argument_list|(
name|context
argument_list|,
name|time2
operator|-
name|time
argument_list|)
expr_stmt|;
name|shardSearchStats
operator|.
name|onPreFetchPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|shortcutDocIdsToLoad
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fetchPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchPhaseShouldFreeContext
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|freeContext
argument_list|(
name|context
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contextProcessedSuccessfully
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|shardSearchStats
operator|.
name|onFailedFetchPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|shardSearchStats
operator|.
name|onFetchPhase
argument_list|(
name|context
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|time2
argument_list|)
expr_stmt|;
return|return
operator|new
name|QueryFetchSearchResult
argument_list|(
name|context
operator|.
name|queryResult
argument_list|()
argument_list|,
name|context
operator|.
name|fetchResult
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Fetch phase failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|processFailure
argument_list|(
name|context
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeFetchPhase
specifier|public
name|QueryFetchSearchResult
name|executeFetchPhase
parameter_list|(
name|QuerySearchRequest
name|request
parameter_list|)
block|{
specifier|final
name|SearchContext
name|context
init|=
name|findContext
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|contextProcessing
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|setAggregatedDfs
argument_list|(
name|request
operator|.
name|dfs
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ShardSearchStats
name|shardSearchStats
init|=
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|searchService
argument_list|()
decl_stmt|;
name|shardSearchStats
operator|.
name|onPreQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|queryPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|shardSearchStats
operator|.
name|onFailedQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|long
name|time2
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|shardSearchStats
operator|.
name|onQueryPhase
argument_list|(
name|context
argument_list|,
name|time2
operator|-
name|time
argument_list|)
expr_stmt|;
name|shardSearchStats
operator|.
name|onPreFetchPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|shortcutDocIdsToLoad
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fetchPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchPhaseShouldFreeContext
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|freeContext
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contextProcessedSuccessfully
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|shardSearchStats
operator|.
name|onFailedFetchPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|shardSearchStats
operator|.
name|onFetchPhase
argument_list|(
name|context
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|time2
argument_list|)
expr_stmt|;
return|return
operator|new
name|QueryFetchSearchResult
argument_list|(
name|context
operator|.
name|queryResult
argument_list|()
argument_list|,
name|context
operator|.
name|fetchResult
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Fetch phase failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|processFailure
argument_list|(
name|context
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeFetchPhase
specifier|public
name|ScrollQueryFetchSearchResult
name|executeFetchPhase
parameter_list|(
name|InternalScrollSearchRequest
name|request
parameter_list|)
block|{
specifier|final
name|SearchContext
name|context
init|=
name|findContext
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|contextProcessing
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|ShardSearchStats
name|shardSearchStats
init|=
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|searchService
argument_list|()
decl_stmt|;
name|processScroll
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|shardSearchStats
operator|.
name|onPreQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|queryPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|shardSearchStats
operator|.
name|onFailedQueryPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|long
name|time2
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|shardSearchStats
operator|.
name|onQueryPhase
argument_list|(
name|context
argument_list|,
name|time2
operator|-
name|time
argument_list|)
expr_stmt|;
name|shardSearchStats
operator|.
name|onPreFetchPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|shortcutDocIdsToLoad
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fetchPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchPhaseShouldFreeContext
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|freeContext
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contextProcessedSuccessfully
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|shardSearchStats
operator|.
name|onFailedFetchPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|shardSearchStats
operator|.
name|onFetchPhase
argument_list|(
name|context
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|time2
argument_list|)
expr_stmt|;
return|return
operator|new
name|ScrollQueryFetchSearchResult
argument_list|(
operator|new
name|QueryFetchSearchResult
argument_list|(
name|context
operator|.
name|queryResult
argument_list|()
argument_list|,
name|context
operator|.
name|fetchResult
argument_list|()
argument_list|)
argument_list|,
name|context
operator|.
name|shardTarget
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Fetch phase failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|processFailure
argument_list|(
name|context
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeFetchPhase
specifier|public
name|FetchSearchResult
name|executeFetchPhase
parameter_list|(
name|ShardFetchRequest
name|request
parameter_list|)
block|{
specifier|final
name|SearchContext
name|context
init|=
name|findContext
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|contextProcessing
argument_list|(
name|context
argument_list|)
expr_stmt|;
specifier|final
name|ShardSearchStats
name|shardSearchStats
init|=
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|searchService
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|request
operator|.
name|lastEmittedDoc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|scrollContext
argument_list|()
operator|.
name|lastEmittedDoc
operator|=
name|request
operator|.
name|lastEmittedDoc
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|docIdsToLoad
argument_list|(
name|request
operator|.
name|docIds
argument_list|()
argument_list|,
literal|0
argument_list|,
name|request
operator|.
name|docIdsSize
argument_list|()
argument_list|)
expr_stmt|;
name|shardSearchStats
operator|.
name|onPreFetchPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|fetchPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchPhaseShouldFreeContext
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|freeContext
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contextProcessedSuccessfully
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|shardSearchStats
operator|.
name|onFetchPhase
argument_list|(
name|context
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|time
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|fetchResult
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|shardSearchStats
operator|.
name|onFailedFetchPhase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Fetch phase failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|processFailure
argument_list|(
name|context
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findContext
specifier|private
name|SearchContext
name|findContext
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|SearchContextMissingException
block|{
name|SearchContext
name|context
init|=
name|activeContexts
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SearchContextMissingException
argument_list|(
name|id
argument_list|)
throw|;
block|}
name|SearchContext
operator|.
name|setCurrent
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|createAndPutContext
specifier|final
name|SearchContext
name|createAndPutContext
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|)
block|{
name|SearchContext
name|context
init|=
name|createContext
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|putContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|scroll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|searchService
argument_list|()
operator|.
name|onNewScrollContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|searchService
argument_list|()
operator|.
name|onNewContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|context
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|freeContext
argument_list|(
name|context
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createContext
specifier|final
name|SearchContext
name|createContext
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|,
annotation|@
name|Nullable
name|Engine
operator|.
name|Searcher
name|searcher
parameter_list|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShard
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
name|SearchShardTarget
name|shardTarget
init|=
operator|new
name|SearchShardTarget
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Searcher
name|engineSearcher
init|=
name|searcher
operator|==
literal|null
condition|?
name|indexShard
operator|.
name|acquireSearcher
argument_list|(
literal|"search"
argument_list|)
else|:
name|searcher
decl_stmt|;
name|DefaultSearchContext
name|context
init|=
operator|new
name|DefaultSearchContext
argument_list|(
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|request
argument_list|,
name|shardTarget
argument_list|,
name|engineSearcher
argument_list|,
name|indexService
argument_list|,
name|indexShard
argument_list|,
name|scriptService
argument_list|,
name|pageCacheRecycler
argument_list|,
name|bigArrays
argument_list|,
name|threadPool
operator|.
name|estimatedTimeInMillisCounter
argument_list|()
argument_list|,
name|parseFieldMatcher
argument_list|,
name|defaultSearchTimeout
argument_list|)
decl_stmt|;
name|SearchContext
operator|.
name|setCurrent
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|request
operator|.
name|scroll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|scrollContext
argument_list|(
operator|new
name|ScrollContext
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|scrollContext
argument_list|()
operator|.
name|scroll
operator|=
name|request
operator|.
name|scroll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|template
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExecutableScript
name|executable
init|=
name|this
operator|.
name|scriptService
operator|.
name|executable
argument_list|(
name|request
operator|.
name|template
argument_list|()
argument_list|,
name|ScriptContext
operator|.
name|Standard
operator|.
name|SEARCH
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|BytesReference
name|run
init|=
operator|(
name|BytesReference
operator|)
name|executable
operator|.
name|run
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|run
argument_list|)
operator|.
name|createParser
argument_list|(
name|run
argument_list|)
init|)
block|{
name|QueryParseContext
name|queryParseContext
init|=
operator|new
name|QueryParseContext
argument_list|(
name|indicesService
operator|.
name|getIndicesQueryRegistry
argument_list|()
argument_list|)
decl_stmt|;
name|queryParseContext
operator|.
name|reset
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|queryParseContext
operator|.
name|parseFieldMatcher
argument_list|(
name|parseFieldMatcher
argument_list|)
expr_stmt|;
name|parseSource
argument_list|(
name|context
argument_list|,
name|SearchSourceBuilder
operator|.
name|parseSearchSource
argument_list|(
name|parser
argument_list|,
name|queryParseContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|parseSource
argument_list|(
name|context
argument_list|,
name|request
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
comment|// if the from and size are still not set, default them
if|if
condition|(
name|context
operator|.
name|from
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|context
operator|.
name|from
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|size
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|context
operator|.
name|size
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// pre process
name|dfsPhase
operator|.
name|preProcess
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|queryPhase
operator|.
name|preProcess
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fetchPhase
operator|.
name|preProcess
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// compute the context keep alive
name|long
name|keepAlive
init|=
name|defaultKeepAlive
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|scroll
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|scroll
argument_list|()
operator|.
name|keepAlive
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keepAlive
operator|=
name|request
operator|.
name|scroll
argument_list|()
operator|.
name|keepAlive
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|keepAlive
argument_list|(
name|keepAlive
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|context
return|;
block|}
DECL|method|freeAllContextForIndex
specifier|private
name|void
name|freeAllContextForIndex
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
assert|assert
name|index
operator|!=
literal|null
assert|;
for|for
control|(
name|SearchContext
name|ctx
range|:
name|activeContexts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|index
operator|.
name|equals
argument_list|(
name|ctx
operator|.
name|indexShard
argument_list|()
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|freeContext
argument_list|(
name|ctx
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|freeContext
specifier|public
name|boolean
name|freeContext
parameter_list|(
name|long
name|id
parameter_list|)
block|{
specifier|final
name|SearchContext
name|context
init|=
name|removeContext
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|searchService
argument_list|()
operator|.
name|onFreeContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|scrollContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|searchService
argument_list|()
operator|.
name|onFreeScrollContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|freeAllScrollContexts
specifier|public
name|void
name|freeAllScrollContexts
parameter_list|()
block|{
for|for
control|(
name|SearchContext
name|searchContext
range|:
name|activeContexts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|searchContext
operator|.
name|scrollContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|freeContext
argument_list|(
name|searchContext
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|contextProcessing
specifier|private
name|void
name|contextProcessing
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
comment|// disable timeout while executing a search
name|context
operator|.
name|accessed
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|contextProcessedSuccessfully
specifier|private
name|void
name|contextProcessedSuccessfully
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|accessed
argument_list|(
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanContext
specifier|private
name|void
name|cleanContext
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
assert|assert
name|context
operator|==
name|SearchContext
operator|.
name|current
argument_list|()
assert|;
name|context
operator|.
name|clearReleasables
argument_list|(
name|Lifetime
operator|.
name|PHASE
argument_list|)
expr_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
block|}
DECL|method|processFailure
specifier|private
name|void
name|processFailure
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|freeContext
argument_list|(
name|context
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|Lucene
operator|.
name|isCorruptionException
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|failShard
argument_list|(
literal|"search execution corruption failure"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to process shard failure to (potentially) send back shard failure on corruption"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseSource
specifier|private
name|void
name|parseSource
parameter_list|(
name|DefaultSearchContext
name|context
parameter_list|,
name|SearchSourceBuilder
name|source
parameter_list|)
throws|throws
name|SearchContextException
block|{
comment|// nothing to parse...
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|IndexShard
name|indexShard
init|=
name|context
operator|.
name|indexShard
argument_list|()
decl_stmt|;
name|QueryShardContext
name|queryShardContext
init|=
name|indexShard
operator|.
name|getQueryShardContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|from
argument_list|(
name|source
operator|.
name|from
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|size
argument_list|(
name|source
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectFloatHashMap
argument_list|<
name|String
argument_list|>
name|indexBoostMap
init|=
name|source
operator|.
name|indexBoost
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexBoostMap
operator|!=
literal|null
condition|)
block|{
name|Float
name|indexBoost
init|=
name|indexBoostMap
operator|.
name|get
argument_list|(
name|context
operator|.
name|shardTarget
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexBoost
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|queryBoost
argument_list|(
name|indexBoost
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|source
operator|.
name|query
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|parsedQuery
argument_list|(
name|queryShardContext
operator|.
name|toQuery
argument_list|(
name|source
operator|.
name|query
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|.
name|postFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|parsedPostFilter
argument_list|(
name|queryShardContext
operator|.
name|toQuery
argument_list|(
name|source
operator|.
name|postFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|.
name|sorts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XContentParser
name|completeSortParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|XContentBuilder
name|completeSortBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|completeSortBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|completeSortBuilder
operator|.
name|startArray
argument_list|(
literal|"sort"
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|sort
range|:
name|source
operator|.
name|sorts
argument_list|()
control|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|sort
argument_list|)
operator|.
name|createParser
argument_list|(
name|sort
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|completeSortBuilder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|completeSortBuilder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|completeSortBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|BytesReference
name|completeSortBytes
init|=
name|completeSortBuilder
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|completeSortParser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|completeSortBytes
argument_list|)
operator|.
name|createParser
argument_list|(
name|completeSortBytes
argument_list|)
expr_stmt|;
name|completeSortParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|completeSortParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|completeSortParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|this
operator|.
name|elementParsers
operator|.
name|get
argument_list|(
literal|"sort"
argument_list|)
operator|.
name|parse
argument_list|(
name|completeSortParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|sSource
init|=
literal|"_na_"
decl_stmt|;
try|try
block|{
name|sSource
operator|=
name|source
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
name|XContentLocation
name|location
init|=
name|completeSortParser
operator|!=
literal|null
condition|?
name|completeSortParser
operator|.
name|getTokenLocation
argument_list|()
else|:
literal|null
decl_stmt|;
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"failed to parse sort source ["
operator|+
name|sSource
operator|+
literal|"]"
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|context
operator|.
name|trackScores
argument_list|(
name|source
operator|.
name|trackScores
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|minScore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|minimumScore
argument_list|(
name|source
operator|.
name|minScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|.
name|profile
argument_list|()
condition|)
block|{
name|context
operator|.
name|setProfilers
argument_list|(
operator|new
name|Profilers
argument_list|(
name|context
operator|.
name|searcher
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|timeoutInMillis
argument_list|(
name|source
operator|.
name|timeoutInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|terminateAfter
argument_list|(
name|source
operator|.
name|terminateAfter
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|aggregations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XContentParser
name|completeAggregationsParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|XContentBuilder
name|completeAggregationsBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|completeAggregationsBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
for|for
control|(
name|BytesReference
name|agg
range|:
name|source
operator|.
name|aggregations
argument_list|()
control|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|agg
argument_list|)
operator|.
name|createParser
argument_list|(
name|agg
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|completeAggregationsBuilder
operator|.
name|field
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|completeAggregationsBuilder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|completeAggregationsBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|BytesReference
name|completeAggregationsBytes
init|=
name|completeAggregationsBuilder
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|completeAggregationsParser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|completeAggregationsBytes
argument_list|)
operator|.
name|createParser
argument_list|(
name|completeAggregationsBytes
argument_list|)
expr_stmt|;
name|completeAggregationsParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|this
operator|.
name|elementParsers
operator|.
name|get
argument_list|(
literal|"aggregations"
argument_list|)
operator|.
name|parse
argument_list|(
name|completeAggregationsParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|sSource
init|=
literal|"_na_"
decl_stmt|;
try|try
block|{
name|sSource
operator|=
name|source
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
name|XContentLocation
name|location
init|=
name|completeAggregationsParser
operator|!=
literal|null
condition|?
name|completeAggregationsParser
operator|.
name|getTokenLocation
argument_list|()
else|:
literal|null
decl_stmt|;
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"failed to parse rescore source ["
operator|+
name|sSource
operator|+
literal|"]"
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|source
operator|.
name|suggest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XContentParser
name|suggestParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|suggestParser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
operator|.
name|suggest
argument_list|()
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
operator|.
name|suggest
argument_list|()
argument_list|)
expr_stmt|;
name|suggestParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|this
operator|.
name|elementParsers
operator|.
name|get
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|parse
argument_list|(
name|suggestParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|sSource
init|=
literal|"_na_"
decl_stmt|;
try|try
block|{
name|sSource
operator|=
name|source
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
name|XContentLocation
name|location
init|=
name|suggestParser
operator|!=
literal|null
condition|?
name|suggestParser
operator|.
name|getTokenLocation
argument_list|()
else|:
literal|null
decl_stmt|;
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"failed to parse suggest source ["
operator|+
name|sSource
operator|+
literal|"]"
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|source
operator|.
name|rescores
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XContentParser
name|completeRescoreParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|XContentBuilder
name|completeRescoreBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|completeRescoreBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|completeRescoreBuilder
operator|.
name|startArray
argument_list|(
literal|"rescore"
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesReference
name|rescore
range|:
name|source
operator|.
name|rescores
argument_list|()
control|)
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|rescore
argument_list|)
operator|.
name|createParser
argument_list|(
name|rescore
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|completeRescoreBuilder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|completeRescoreBuilder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|completeRescoreBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|BytesReference
name|completeRescoreBytes
init|=
name|completeRescoreBuilder
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|completeRescoreParser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|completeRescoreBytes
argument_list|)
operator|.
name|createParser
argument_list|(
name|completeRescoreBytes
argument_list|)
expr_stmt|;
name|completeRescoreParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|completeRescoreParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|completeRescoreParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|this
operator|.
name|elementParsers
operator|.
name|get
argument_list|(
literal|"rescore"
argument_list|)
operator|.
name|parse
argument_list|(
name|completeRescoreParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|sSource
init|=
literal|"_na_"
decl_stmt|;
try|try
block|{
name|sSource
operator|=
name|source
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
name|XContentLocation
name|location
init|=
name|completeRescoreParser
operator|!=
literal|null
condition|?
name|completeRescoreParser
operator|.
name|getTokenLocation
argument_list|()
else|:
literal|null
decl_stmt|;
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"failed to parse rescore source ["
operator|+
name|sSource
operator|+
literal|"]"
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|source
operator|.
name|fields
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|fieldNames
argument_list|()
operator|.
name|addAll
argument_list|(
name|source
operator|.
name|fields
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|.
name|explain
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|explain
argument_list|(
name|source
operator|.
name|explain
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|.
name|fetchSource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|fetchSourceContext
argument_list|(
name|source
operator|.
name|fetchSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|.
name|fieldDataFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|FieldDataFieldsContext
name|fieldDataFieldsContext
init|=
name|context
operator|.
name|getFetchSubPhaseContext
argument_list|(
name|FieldDataFieldsFetchSubPhase
operator|.
name|CONTEXT_FACTORY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|source
operator|.
name|fieldDataFields
argument_list|()
control|)
block|{
name|fieldDataFieldsContext
operator|.
name|add
argument_list|(
operator|new
name|FieldDataField
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fieldDataFieldsContext
operator|.
name|setHitExecutionNeeded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|.
name|highlighter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|HighlightBuilder
name|highlightBuilder
init|=
name|source
operator|.
name|highlighter
argument_list|()
decl_stmt|;
try|try
block|{
name|context
operator|.
name|highlight
argument_list|(
name|highlightBuilder
operator|.
name|build
argument_list|(
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|getQueryShardContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SearchContextException
argument_list|(
name|context
argument_list|,
literal|"failed to create SearchContextHighlighter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|source
operator|.
name|innerHits
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XContentParser
name|innerHitsParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|innerHitsParser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
operator|.
name|innerHits
argument_list|()
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
operator|.
name|innerHits
argument_list|()
argument_list|)
expr_stmt|;
name|innerHitsParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|this
operator|.
name|elementParsers
operator|.
name|get
argument_list|(
literal|"inner_hits"
argument_list|)
operator|.
name|parse
argument_list|(
name|innerHitsParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|sSource
init|=
literal|"_na_"
decl_stmt|;
try|try
block|{
name|sSource
operator|=
name|source
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
name|XContentLocation
name|location
init|=
name|innerHitsParser
operator|!=
literal|null
condition|?
name|innerHitsParser
operator|.
name|getTokenLocation
argument_list|()
else|:
literal|null
decl_stmt|;
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"failed to parse suggest source ["
operator|+
name|sSource
operator|+
literal|"]"
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|source
operator|.
name|scriptFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
operator|.
name|ScriptField
name|field
range|:
name|source
operator|.
name|scriptFields
argument_list|()
control|)
block|{
name|SearchScript
name|searchScript
init|=
name|context
operator|.
name|scriptService
argument_list|()
operator|.
name|search
argument_list|(
name|context
operator|.
name|lookup
argument_list|()
argument_list|,
name|field
operator|.
name|script
argument_list|()
argument_list|,
name|ScriptContext
operator|.
name|Standard
operator|.
name|SEARCH
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|scriptFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|field
operator|.
name|fieldName
argument_list|()
argument_list|,
name|searchScript
argument_list|,
name|field
operator|.
name|ignoreFailure
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|source
operator|.
name|ext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XContentParser
name|extParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|extParser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
operator|.
name|ext
argument_list|()
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
operator|.
name|ext
argument_list|()
argument_list|)
expr_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|extParser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|extParser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|extParser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SearchParseElement
name|parseElement
init|=
name|this
operator|.
name|elementParsers
operator|.
name|get
argument_list|(
name|currentFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseElement
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"Unknown element ["
operator|+
name|currentFieldName
operator|+
literal|"] in [ext]"
argument_list|,
name|extParser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|parseElement
operator|.
name|parse
argument_list|(
name|extParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|sSource
init|=
literal|"_na_"
decl_stmt|;
try|try
block|{
name|sSource
operator|=
name|source
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
name|XContentLocation
name|location
init|=
name|extParser
operator|!=
literal|null
condition|?
name|extParser
operator|.
name|getTokenLocation
argument_list|()
else|:
literal|null
decl_stmt|;
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"failed to parse ext source ["
operator|+
name|sSource
operator|+
literal|"]"
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|source
operator|.
name|version
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|version
argument_list|(
name|source
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|.
name|stats
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|groupStats
argument_list|(
name|source
operator|.
name|stats
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|EMPTY_DOC_IDS
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|EMPTY_DOC_IDS
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
comment|/**      * Shortcut ids to load, we load only "from" and up to "size". The phase controller      * handles this as well since the result is always size * shards for Q_A_F      */
DECL|method|shortcutDocIdsToLoad
specifier|private
name|void
name|shortcutDocIdsToLoad
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|request
argument_list|()
operator|.
name|scroll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TopDocs
name|topDocs
init|=
name|context
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|int
index|[]
name|docIdsToLoad
init|=
operator|new
name|int
index|[
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|docIdsToLoad
index|[
name|i
index|]
operator|=
name|topDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
expr_stmt|;
block|}
name|context
operator|.
name|docIdsToLoad
argument_list|(
name|docIdsToLoad
argument_list|,
literal|0
argument_list|,
name|docIdsToLoad
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TopDocs
name|topDocs
init|=
name|context
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
operator|<
name|context
operator|.
name|from
argument_list|()
condition|)
block|{
comment|// no more docs...
name|context
operator|.
name|docIdsToLoad
argument_list|(
name|EMPTY_DOC_IDS
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|totalSize
init|=
name|context
operator|.
name|from
argument_list|()
operator|+
name|context
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
index|[]
name|docIdsToLoad
init|=
operator|new
name|int
index|[
name|Math
operator|.
name|min
argument_list|(
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
operator|-
name|context
operator|.
name|from
argument_list|()
argument_list|,
name|context
operator|.
name|size
argument_list|()
argument_list|)
index|]
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|context
operator|.
name|from
argument_list|()
init|;
name|i
operator|<
name|totalSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|)
block|{
name|docIdsToLoad
index|[
name|counter
index|]
operator|=
name|topDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
name|counter
operator|++
expr_stmt|;
block|}
name|context
operator|.
name|docIdsToLoad
argument_list|(
name|docIdsToLoad
argument_list|,
literal|0
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shortcutDocIdsToLoadForScanning
specifier|private
name|void
name|shortcutDocIdsToLoadForScanning
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
name|TopDocs
name|topDocs
init|=
name|context
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// no more docs...
name|context
operator|.
name|docIdsToLoad
argument_list|(
name|EMPTY_DOC_IDS
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
index|[]
name|docIdsToLoad
init|=
operator|new
name|int
index|[
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docIdsToLoad
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|docIdsToLoad
index|[
name|i
index|]
operator|=
name|topDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
expr_stmt|;
block|}
name|context
operator|.
name|docIdsToLoad
argument_list|(
name|docIdsToLoad
argument_list|,
literal|0
argument_list|,
name|docIdsToLoad
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|processScroll
specifier|private
name|void
name|processScroll
parameter_list|(
name|InternalScrollSearchRequest
name|request
parameter_list|,
name|SearchContext
name|context
parameter_list|)
block|{
comment|// process scroll
name|context
operator|.
name|from
argument_list|(
name|context
operator|.
name|from
argument_list|()
operator|+
name|context
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|scrollContext
argument_list|()
operator|.
name|scroll
operator|=
name|request
operator|.
name|scroll
argument_list|()
expr_stmt|;
comment|// update the context keep alive based on the new scroll value
if|if
condition|(
name|request
operator|.
name|scroll
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|scroll
argument_list|()
operator|.
name|keepAlive
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|keepAlive
argument_list|(
name|request
operator|.
name|scroll
argument_list|()
operator|.
name|keepAlive
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the number of active contexts in this      * SearchService      */
DECL|method|getActiveContexts
specifier|public
name|int
name|getActiveContexts
parameter_list|()
block|{
return|return
name|this
operator|.
name|activeContexts
operator|.
name|size
argument_list|()
return|;
block|}
DECL|class|NormsWarmer
specifier|static
class|class
name|NormsWarmer
implements|implements
name|IndicesWarmer
operator|.
name|Listener
block|{
DECL|field|indicesWarmer
specifier|private
specifier|final
name|IndicesWarmer
name|indicesWarmer
decl_stmt|;
DECL|method|NormsWarmer
specifier|public
name|NormsWarmer
parameter_list|(
name|IndicesWarmer
name|indicesWarmer
parameter_list|)
block|{
name|this
operator|.
name|indicesWarmer
operator|=
name|indicesWarmer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|warmNewReaders
specifier|public
name|TerminationHandle
name|warmNewReaders
parameter_list|(
specifier|final
name|IndexShard
name|indexShard
parameter_list|,
specifier|final
name|Engine
operator|.
name|Searcher
name|searcher
parameter_list|)
block|{
specifier|final
name|Loading
name|defaultLoading
init|=
name|Loading
operator|.
name|parse
argument_list|(
name|indexShard
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
name|NORMS_LOADING_KEY
argument_list|)
argument_list|,
name|Loading
operator|.
name|LAZY
argument_list|)
decl_stmt|;
specifier|final
name|MapperService
name|mapperService
init|=
name|indexShard
operator|.
name|mapperService
argument_list|()
decl_stmt|;
specifier|final
name|ObjectSet
argument_list|<
name|String
argument_list|>
name|warmUp
init|=
operator|new
name|ObjectHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DocumentMapper
name|docMapper
range|:
name|mapperService
operator|.
name|docMappers
argument_list|(
literal|false
argument_list|)
control|)
block|{
for|for
control|(
name|FieldMapper
name|fieldMapper
range|:
name|docMapper
operator|.
name|mappers
argument_list|()
control|)
block|{
specifier|final
name|String
name|indexName
init|=
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|Loading
name|normsLoading
init|=
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|normsLoading
argument_list|()
decl_stmt|;
if|if
condition|(
name|normsLoading
operator|==
literal|null
condition|)
block|{
name|normsLoading
operator|=
name|defaultLoading
expr_stmt|;
block|}
if|if
condition|(
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
operator|&&
operator|!
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|omitNorms
argument_list|()
operator|&&
name|normsLoading
operator|==
name|Loading
operator|.
name|EAGER
condition|)
block|{
name|warmUp
operator|.
name|add
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Norms loading may be I/O intensive but is not CPU intensive, so we execute it in a single task
name|indicesWarmer
operator|.
name|getExecutor
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|stringObjectCursor
range|:
name|warmUp
control|)
block|{
specifier|final
name|String
name|indexName
init|=
name|stringObjectCursor
operator|.
name|value
decl_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|LeafReaderContext
name|ctx
range|:
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
specifier|final
name|NumericDocValues
name|values
init|=
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getNormValues
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|trace
argument_list|(
literal|"warmed norms for [{}], took [{}]"
argument_list|,
name|indexName
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"failed to warm-up norms"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|TerminationHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|awaitTermination
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|warmTopReader
specifier|public
name|TerminationHandle
name|warmTopReader
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
specifier|final
name|Engine
operator|.
name|Searcher
name|searcher
parameter_list|)
block|{
return|return
name|TerminationHandle
operator|.
name|NO_WAIT
return|;
block|}
block|}
DECL|class|FieldDataWarmer
specifier|static
class|class
name|FieldDataWarmer
implements|implements
name|IndicesWarmer
operator|.
name|Listener
block|{
DECL|field|indicesWarmer
specifier|private
specifier|final
name|IndicesWarmer
name|indicesWarmer
decl_stmt|;
DECL|method|FieldDataWarmer
specifier|public
name|FieldDataWarmer
parameter_list|(
name|IndicesWarmer
name|indicesWarmer
parameter_list|)
block|{
name|this
operator|.
name|indicesWarmer
operator|=
name|indicesWarmer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|warmNewReaders
specifier|public
name|TerminationHandle
name|warmNewReaders
parameter_list|(
specifier|final
name|IndexShard
name|indexShard
parameter_list|,
specifier|final
name|Engine
operator|.
name|Searcher
name|searcher
parameter_list|)
block|{
specifier|final
name|MapperService
name|mapperService
init|=
name|indexShard
operator|.
name|mapperService
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MappedFieldType
argument_list|>
name|warmUp
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DocumentMapper
name|docMapper
range|:
name|mapperService
operator|.
name|docMappers
argument_list|(
literal|false
argument_list|)
control|)
block|{
for|for
control|(
name|FieldMapper
name|fieldMapper
range|:
name|docMapper
operator|.
name|mappers
argument_list|()
control|)
block|{
specifier|final
name|FieldDataType
name|fieldDataType
decl_stmt|;
specifier|final
name|String
name|indexName
decl_stmt|;
if|if
condition|(
name|fieldMapper
operator|instanceof
name|ParentFieldMapper
condition|)
block|{
name|MappedFieldType
name|joinFieldType
init|=
operator|(
operator|(
name|ParentFieldMapper
operator|)
name|fieldMapper
operator|)
operator|.
name|getChildJoinFieldType
argument_list|()
decl_stmt|;
if|if
condition|(
name|joinFieldType
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|fieldDataType
operator|=
name|joinFieldType
operator|.
name|fieldDataType
argument_list|()
expr_stmt|;
comment|// TODO: this can be removed in 3.0 when the old parent/child impl is removed:
comment|// related to: https://github.com/elastic/elasticsearch/pull/12418
name|indexName
operator|=
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fieldDataType
operator|=
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|fieldDataType
argument_list|()
expr_stmt|;
name|indexName
operator|=
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fieldDataType
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|fieldDataType
operator|.
name|getLoading
argument_list|()
operator|==
name|Loading
operator|.
name|LAZY
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|warmUp
operator|.
name|containsKey
argument_list|(
name|indexName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|warmUp
operator|.
name|put
argument_list|(
name|indexName
argument_list|,
name|fieldMapper
operator|.
name|fieldType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|IndexFieldDataService
name|indexFieldDataService
init|=
name|indexShard
operator|.
name|indexFieldDataService
argument_list|()
decl_stmt|;
specifier|final
name|Executor
name|executor
init|=
name|indicesWarmer
operator|.
name|getExecutor
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|warmUp
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|LeafReaderContext
name|ctx
range|:
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
for|for
control|(
specifier|final
name|MappedFieldType
name|fieldType
range|:
name|warmUp
operator|.
name|values
argument_list|()
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|indexFieldDataService
operator|.
name|getForField
argument_list|(
name|fieldType
argument_list|)
operator|.
name|load
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|trace
argument_list|(
literal|"warmed fielddata for [{}], took [{}]"
argument_list|,
name|fieldType
operator|.
name|name
argument_list|()
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"failed to warm-up fielddata for [{}]"
argument_list|,
name|t
argument_list|,
name|fieldType
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TerminationHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|awaitTermination
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|warmTopReader
specifier|public
name|TerminationHandle
name|warmTopReader
parameter_list|(
specifier|final
name|IndexShard
name|indexShard
parameter_list|,
specifier|final
name|Engine
operator|.
name|Searcher
name|searcher
parameter_list|)
block|{
specifier|final
name|MapperService
name|mapperService
init|=
name|indexShard
operator|.
name|mapperService
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MappedFieldType
argument_list|>
name|warmUpGlobalOrdinals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DocumentMapper
name|docMapper
range|:
name|mapperService
operator|.
name|docMappers
argument_list|(
literal|false
argument_list|)
control|)
block|{
for|for
control|(
name|FieldMapper
name|fieldMapper
range|:
name|docMapper
operator|.
name|mappers
argument_list|()
control|)
block|{
specifier|final
name|FieldDataType
name|fieldDataType
decl_stmt|;
specifier|final
name|String
name|indexName
decl_stmt|;
if|if
condition|(
name|fieldMapper
operator|instanceof
name|ParentFieldMapper
condition|)
block|{
name|MappedFieldType
name|joinFieldType
init|=
operator|(
operator|(
name|ParentFieldMapper
operator|)
name|fieldMapper
operator|)
operator|.
name|getChildJoinFieldType
argument_list|()
decl_stmt|;
if|if
condition|(
name|joinFieldType
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|fieldDataType
operator|=
name|joinFieldType
operator|.
name|fieldDataType
argument_list|()
expr_stmt|;
comment|// TODO: this can be removed in 3.0 when the old parent/child impl is removed:
comment|// related to: https://github.com/elastic/elasticsearch/pull/12418
name|indexName
operator|=
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fieldDataType
operator|=
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|fieldDataType
argument_list|()
expr_stmt|;
name|indexName
operator|=
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fieldDataType
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|fieldDataType
operator|.
name|getLoading
argument_list|()
operator|!=
name|Loading
operator|.
name|EAGER_GLOBAL_ORDINALS
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|warmUpGlobalOrdinals
operator|.
name|containsKey
argument_list|(
name|indexName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|warmUpGlobalOrdinals
operator|.
name|put
argument_list|(
name|indexName
argument_list|,
name|fieldMapper
operator|.
name|fieldType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|IndexFieldDataService
name|indexFieldDataService
init|=
name|indexShard
operator|.
name|indexFieldDataService
argument_list|()
decl_stmt|;
specifier|final
name|Executor
name|executor
init|=
name|indicesWarmer
operator|.
name|getExecutor
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|warmUpGlobalOrdinals
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|MappedFieldType
name|fieldType
range|:
name|warmUpGlobalOrdinals
operator|.
name|values
argument_list|()
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|IndexFieldData
operator|.
name|Global
name|ifd
init|=
name|indexFieldDataService
operator|.
name|getForField
argument_list|(
name|fieldType
argument_list|)
decl_stmt|;
name|ifd
operator|.
name|loadGlobal
argument_list|(
name|searcher
operator|.
name|getDirectoryReader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|trace
argument_list|(
literal|"warmed global ordinals for [{}], took [{}]"
argument_list|,
name|fieldType
operator|.
name|name
argument_list|()
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"failed to warm-up global ordinals for [{}]"
argument_list|,
name|t
argument_list|,
name|fieldType
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TerminationHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|awaitTermination
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
DECL|class|Reaper
class|class
name|Reaper
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|long
name|time
init|=
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchContext
name|context
range|:
name|activeContexts
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Use the same value for both checks since lastAccessTime can
comment|// be modified by another thread between checks!
specifier|final
name|long
name|lastAccessTime
init|=
name|context
operator|.
name|lastAccessTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastAccessTime
operator|==
operator|-
literal|1l
condition|)
block|{
comment|// its being processed or timeout is disabled
continue|continue;
block|}
if|if
condition|(
operator|(
name|time
operator|-
name|lastAccessTime
operator|>
name|context
operator|.
name|keepAlive
argument_list|()
operator|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"freeing search context [{}], time [{}], lastAccessTime [{}], keepAlive [{}]"
argument_list|,
name|context
operator|.
name|id
argument_list|()
argument_list|,
name|time
argument_list|,
name|lastAccessTime
argument_list|,
name|context
operator|.
name|keepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|freeContext
argument_list|(
name|context
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

