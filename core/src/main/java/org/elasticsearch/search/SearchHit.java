begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SourceFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SourceLookup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
operator|.
name|readExplanation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
operator|.
name|writeExplanation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
operator|.
name|constructorArg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
operator|.
name|optionalConstructorArg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|ensureExpectedToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|parseStoredFieldsValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|throwUnknownField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|throwUnknownToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightField
operator|.
name|readHighlightField
import|;
end_import

begin_comment
comment|/**  * A single search hit.  *  * @see SearchHits  */
end_comment

begin_class
DECL|class|SearchHit
specifier|public
specifier|final
class|class
name|SearchHit
implements|implements
name|Streamable
implements|,
name|ToXContentObject
implements|,
name|Iterable
argument_list|<
name|SearchHitField
argument_list|>
block|{
DECL|field|docId
specifier|private
specifier|transient
name|int
name|docId
decl_stmt|;
DECL|field|DEFAULT_SCORE
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_SCORE
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
DECL|field|score
specifier|private
name|float
name|score
init|=
name|DEFAULT_SCORE
decl_stmt|;
DECL|field|id
specifier|private
name|Text
name|id
decl_stmt|;
DECL|field|type
specifier|private
name|Text
name|type
decl_stmt|;
DECL|field|nestedIdentity
specifier|private
name|NestedIdentity
name|nestedIdentity
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|source
specifier|private
name|BytesReference
name|source
decl_stmt|;
DECL|field|fields
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
init|=
name|emptyMap
argument_list|()
decl_stmt|;
DECL|field|highlightFields
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|highlightFields
init|=
literal|null
decl_stmt|;
DECL|field|sortValues
specifier|private
name|SearchSortValues
name|sortValues
init|=
name|SearchSortValues
operator|.
name|EMPTY
decl_stmt|;
DECL|field|matchedQueries
specifier|private
name|String
index|[]
name|matchedQueries
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|explanation
specifier|private
name|Explanation
name|explanation
decl_stmt|;
annotation|@
name|Nullable
DECL|field|shard
specifier|private
name|SearchShardTarget
name|shard
decl_stmt|;
DECL|field|index
specifier|private
specifier|transient
name|String
name|index
decl_stmt|;
DECL|field|sourceAsMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
decl_stmt|;
DECL|field|sourceAsBytes
specifier|private
name|byte
index|[]
name|sourceAsBytes
decl_stmt|;
DECL|field|innerHits
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHits
argument_list|>
name|innerHits
decl_stmt|;
DECL|method|SearchHit
specifier|private
name|SearchHit
parameter_list|()
block|{      }
DECL|method|SearchHit
specifier|public
name|SearchHit
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|this
argument_list|(
name|docId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SearchHit
specifier|public
name|SearchHit
parameter_list|(
name|int
name|docId
parameter_list|,
name|String
name|id
parameter_list|,
name|Text
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
parameter_list|)
block|{
name|this
argument_list|(
name|docId
argument_list|,
name|id
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
DECL|method|SearchHit
specifier|public
name|SearchHit
parameter_list|(
name|int
name|nestedTopDocId
parameter_list|,
name|String
name|id
parameter_list|,
name|Text
name|type
parameter_list|,
name|NestedIdentity
name|nestedIdentity
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|docId
operator|=
name|nestedTopDocId
expr_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|id
operator|=
operator|new
name|Text
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|id
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|nestedIdentity
operator|=
name|nestedIdentity
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
DECL|method|docId
specifier|public
name|int
name|docId
parameter_list|()
block|{
return|return
name|this
operator|.
name|docId
return|;
block|}
DECL|method|score
specifier|public
name|void
name|score
parameter_list|(
name|float
name|score
parameter_list|)
block|{
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
comment|/**      * The score.      */
DECL|method|getScore
specifier|public
name|float
name|getScore
parameter_list|()
block|{
return|return
name|this
operator|.
name|score
return|;
block|}
DECL|method|version
specifier|public
name|void
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/**      * The version of the hit.      */
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
comment|/**      * The index of the hit.      */
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
return|;
block|}
comment|/**      * The id of the document.      */
DECL|method|getId
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|string
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * The type of the document.      */
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
operator|!=
literal|null
condition|?
name|type
operator|.
name|string
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * If this is a nested hit then nested reference information is returned otherwise<code>null</code> is returned.      */
DECL|method|getNestedIdentity
specifier|public
name|NestedIdentity
name|getNestedIdentity
parameter_list|()
block|{
return|return
name|nestedIdentity
return|;
block|}
comment|/**      * Returns bytes reference, also un compress the source if needed.      */
DECL|method|getSourceRef
specifier|public
name|BytesReference
name|getSourceRef
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|this
operator|.
name|source
operator|=
name|CompressorFactory
operator|.
name|uncompressIfNeeded
argument_list|(
name|this
operator|.
name|source
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|source
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to decompress source"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Sets representation, might be compressed....      */
DECL|method|sourceRef
specifier|public
name|SearchHit
name|sourceRef
parameter_list|(
name|BytesReference
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|sourceAsBytes
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|sourceAsMap
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Is the source available or not. A source with no fields will return true. This will return false if {@code fields} doesn't contain      * {@code _source} or if source is disabled in the mapping.      */
DECL|method|hasSource
specifier|public
name|boolean
name|hasSource
parameter_list|()
block|{
return|return
name|source
operator|!=
literal|null
return|;
block|}
comment|/**      * The source of the document as string (can be<tt>null</tt>).      */
DECL|method|getSourceAsString
specifier|public
name|String
name|getSourceAsString
parameter_list|()
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|XContentHelper
operator|.
name|convertToJson
argument_list|(
name|getSourceRef
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to convert source to a json string"
argument_list|)
throw|;
block|}
block|}
comment|/**      * The source of the document as a map (can be<tt>null</tt>).      */
DECL|method|getSourceAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSourceAsMap
parameter_list|()
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|sourceAsMap
operator|!=
literal|null
condition|)
block|{
return|return
name|sourceAsMap
return|;
block|}
name|sourceAsMap
operator|=
name|SourceLookup
operator|.
name|sourceAsMap
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|sourceAsMap
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|SearchHitField
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|fields
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * The hit field matching the given field name.      */
DECL|method|field
specifier|public
name|SearchHitField
name|field
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
comment|/**      * A map of hit fields (from field name to hit fields) if additional fields      * were required to be loaded.      */
DECL|method|getFields
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|fields
operator|==
literal|null
condition|?
name|emptyMap
argument_list|()
else|:
name|fields
return|;
block|}
comment|// returns the fields without handling null cases
DECL|method|fieldsOrNull
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fieldsOrNull
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
DECL|method|fields
specifier|public
name|void
name|fields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
comment|/**      * A map of highlighted fields.      */
DECL|method|getHighlightFields
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|getHighlightFields
parameter_list|()
block|{
return|return
name|highlightFields
operator|==
literal|null
condition|?
name|emptyMap
argument_list|()
else|:
name|highlightFields
return|;
block|}
DECL|method|highlightFields
specifier|public
name|void
name|highlightFields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|highlightFields
parameter_list|)
block|{
name|this
operator|.
name|highlightFields
operator|=
name|highlightFields
expr_stmt|;
block|}
DECL|method|sortValues
specifier|public
name|void
name|sortValues
parameter_list|(
name|Object
index|[]
name|sortValues
parameter_list|,
name|DocValueFormat
index|[]
name|sortValueFormats
parameter_list|)
block|{
name|sortValues
argument_list|(
operator|new
name|SearchSortValues
argument_list|(
name|sortValues
argument_list|,
name|sortValueFormats
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sortValues
specifier|public
name|void
name|sortValues
parameter_list|(
name|SearchSortValues
name|sortValues
parameter_list|)
block|{
name|this
operator|.
name|sortValues
operator|=
name|sortValues
expr_stmt|;
block|}
comment|/**      * An array of the sort values used.      */
DECL|method|getSortValues
specifier|public
name|Object
index|[]
name|getSortValues
parameter_list|()
block|{
return|return
name|sortValues
operator|.
name|sortValues
argument_list|()
return|;
block|}
comment|/**      * If enabled, the explanation of the search hit.      */
DECL|method|getExplanation
specifier|public
name|Explanation
name|getExplanation
parameter_list|()
block|{
return|return
name|explanation
return|;
block|}
DECL|method|explanation
specifier|public
name|void
name|explanation
parameter_list|(
name|Explanation
name|explanation
parameter_list|)
block|{
name|this
operator|.
name|explanation
operator|=
name|explanation
expr_stmt|;
block|}
comment|/**      * The shard of the search hit.      */
DECL|method|getShard
specifier|public
name|SearchShardTarget
name|getShard
parameter_list|()
block|{
return|return
name|shard
return|;
block|}
DECL|method|shard
specifier|public
name|void
name|shard
parameter_list|(
name|SearchShardTarget
name|target
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|target
expr_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|index
operator|=
name|target
operator|.
name|getIndex
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|matchedQueries
specifier|public
name|void
name|matchedQueries
parameter_list|(
name|String
index|[]
name|matchedQueries
parameter_list|)
block|{
name|this
operator|.
name|matchedQueries
operator|=
name|matchedQueries
expr_stmt|;
block|}
comment|/**      * The set of query and filter names the query matched with. Mainly makes sense for compound filters and queries.      */
DECL|method|getMatchedQueries
specifier|public
name|String
index|[]
name|getMatchedQueries
parameter_list|()
block|{
return|return
name|this
operator|.
name|matchedQueries
return|;
block|}
comment|/**      * @return Inner hits or<code>null</code> if there are none      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getInnerHits
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHits
argument_list|>
name|getInnerHits
parameter_list|()
block|{
return|return
operator|(
name|Map
operator|)
name|innerHits
return|;
block|}
DECL|method|setInnerHits
specifier|public
name|void
name|setInnerHits
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHits
argument_list|>
name|innerHits
parameter_list|)
block|{
name|this
operator|.
name|innerHits
operator|=
name|innerHits
expr_stmt|;
block|}
DECL|class|Fields
specifier|public
specifier|static
class|class
name|Fields
block|{
DECL|field|_INDEX
specifier|static
specifier|final
name|String
name|_INDEX
init|=
literal|"_index"
decl_stmt|;
DECL|field|_TYPE
specifier|static
specifier|final
name|String
name|_TYPE
init|=
literal|"_type"
decl_stmt|;
DECL|field|_ID
specifier|static
specifier|final
name|String
name|_ID
init|=
literal|"_id"
decl_stmt|;
DECL|field|_VERSION
specifier|static
specifier|final
name|String
name|_VERSION
init|=
literal|"_version"
decl_stmt|;
DECL|field|_SCORE
specifier|static
specifier|final
name|String
name|_SCORE
init|=
literal|"_score"
decl_stmt|;
DECL|field|FIELDS
specifier|static
specifier|final
name|String
name|FIELDS
init|=
literal|"fields"
decl_stmt|;
DECL|field|HIGHLIGHT
specifier|static
specifier|final
name|String
name|HIGHLIGHT
init|=
literal|"highlight"
decl_stmt|;
DECL|field|SORT
specifier|static
specifier|final
name|String
name|SORT
init|=
literal|"sort"
decl_stmt|;
DECL|field|MATCHED_QUERIES
specifier|static
specifier|final
name|String
name|MATCHED_QUERIES
init|=
literal|"matched_queries"
decl_stmt|;
DECL|field|_EXPLANATION
specifier|static
specifier|final
name|String
name|_EXPLANATION
init|=
literal|"_explanation"
decl_stmt|;
DECL|field|VALUE
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"value"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"description"
decl_stmt|;
DECL|field|DETAILS
specifier|static
specifier|final
name|String
name|DETAILS
init|=
literal|"details"
decl_stmt|;
DECL|field|INNER_HITS
specifier|static
specifier|final
name|String
name|INNER_HITS
init|=
literal|"inner_hits"
decl_stmt|;
DECL|field|_SHARD
specifier|static
specifier|final
name|String
name|_SHARD
init|=
literal|"_shard"
decl_stmt|;
DECL|field|_NODE
specifier|static
specifier|final
name|String
name|_NODE
init|=
literal|"_node"
decl_stmt|;
block|}
comment|// public because we render hit as part of completion suggestion option
DECL|method|toInnerXContent
specifier|public
name|XContentBuilder
name|toInnerXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SearchHitField
argument_list|>
name|metaFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SearchHitField
argument_list|>
name|otherFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
operator|!
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|SearchHitField
name|field
range|:
name|fields
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|field
operator|.
name|isMetadataField
argument_list|()
condition|)
block|{
name|metaFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|otherFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// For inner_hit hits shard is null and that is ok, because the parent search hit has all this information.
comment|// Even if this was included in the inner_hit hits this would be the same, so better leave it out.
if|if
condition|(
name|getExplanation
argument_list|()
operator|!=
literal|null
operator|&&
name|shard
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_SHARD
argument_list|,
name|shard
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_NODE
argument_list|,
name|shard
operator|.
name|getNodeIdText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nestedIdentity
operator|!=
literal|null
condition|)
block|{
name|nestedIdentity
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_INDEX
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|version
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Float
operator|.
name|isNaN
argument_list|(
name|score
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullField
argument_list|(
name|Fields
operator|.
name|_SCORE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_SCORE
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SearchHitField
name|field
range|:
name|metaFields
control|)
block|{
name|Object
name|value
init|=
name|field
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|XContentHelper
operator|.
name|writeRawField
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|source
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|otherFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|FIELDS
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHitField
name|field
range|:
name|otherFields
control|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|field
operator|.
name|getValues
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|highlightFields
operator|!=
literal|null
operator|&&
operator|!
name|highlightFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|HIGHLIGHT
argument_list|)
expr_stmt|;
for|for
control|(
name|HighlightField
name|field
range|:
name|highlightFields
operator|.
name|values
argument_list|()
control|)
block|{
name|field
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|sortValues
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchedQueries
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|MATCHED_QUERIES
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|matchedFilter
range|:
name|matchedQueries
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|matchedFilter
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getExplanation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_EXPLANATION
argument_list|)
expr_stmt|;
name|buildExplanation
argument_list|(
name|builder
argument_list|,
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|innerHits
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|INNER_HITS
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SearchHits
argument_list|>
name|entry
range|:
name|innerHits
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|SearchHit
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|,
name|id
init|=
literal|null
decl_stmt|;
name|String
name|index
init|=
literal|null
decl_stmt|;
name|float
name|score
init|=
name|DEFAULT_SCORE
decl_stmt|;
name|long
name|version
init|=
operator|-
literal|1
decl_stmt|;
name|SearchSortValues
name|sortValues
init|=
name|SearchSortValues
operator|.
name|EMPTY
decl_stmt|;
name|NestedIdentity
name|nestedIdentity
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|highlightFields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|BytesReference
name|parsedSource
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|matchedQueries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Explanation
name|explanation
init|=
literal|null
decl_stmt|;
name|ShardId
name|shardId
init|=
literal|null
decl_stmt|;
name|String
name|nodeId
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHits
argument_list|>
name|innerHits
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|Fields
operator|.
name|_TYPE
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|type
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|_INDEX
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|index
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|_ID
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|id
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|_SCORE
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|score
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|_VERSION
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|version
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|_SHARD
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|shardId
operator|=
name|ShardId
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|_NODE
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|nodeId
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MapperService
operator|.
name|isMetadataField
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|parseStoredFieldsValue
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|currentFieldName
argument_list|,
operator|new
name|SearchHitField
argument_list|(
name|currentFieldName
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|throwUnknownField
argument_list|(
name|currentFieldName
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
if|if
condition|(
name|Fields
operator|.
name|_SCORE
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|score
operator|=
name|Float
operator|.
name|NaN
expr_stmt|;
block|}
else|else
block|{
name|throwUnknownField
argument_list|(
name|currentFieldName
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|SourceFieldMapper
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|parser
operator|.
name|contentType
argument_list|()
operator|.
name|xContent
argument_list|()
argument_list|)
init|)
block|{
comment|//the original document gets slightly modified: whitespaces or pretty printing are not preserved,
comment|//it all depends on the current builder settings
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|parsedSource
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|HIGHLIGHT
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|HighlightField
name|highlightField
init|=
name|HighlightField
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|highlightFields
operator|.
name|put
argument_list|(
name|highlightField
operator|.
name|getName
argument_list|()
argument_list|,
name|highlightField
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|FIELDS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|String
name|fieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|parseStoredFieldsValue
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
operator|new
name|SearchHitField
argument_list|(
name|fieldName
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|_EXPLANATION
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|explanation
operator|=
name|parseExplanation
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|INNER_HITS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|innerHits
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
comment|// parse the key
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|innerHits
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|SearchHits
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|NestedIdentity
operator|.
name|Fields
operator|.
name|_NESTED
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|nestedIdentity
operator|=
name|NestedIdentity
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|throwUnknownField
argument_list|(
name|currentFieldName
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|Fields
operator|.
name|SORT
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|sortValues
operator|=
name|SearchSortValues
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|MATCHED_QUERIES
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|matchedQueries
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|throwUnknownField
argument_list|(
name|currentFieldName
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|throwUnknownToken
argument_list|(
name|token
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|SearchHit
name|searchHit
init|=
operator|new
name|SearchHit
argument_list|(
operator|-
literal|1
argument_list|,
name|id
argument_list|,
operator|new
name|Text
argument_list|(
name|type
argument_list|)
argument_list|,
name|nestedIdentity
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|searchHit
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|searchHit
operator|.
name|score
argument_list|(
name|score
argument_list|)
expr_stmt|;
name|searchHit
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|searchHit
operator|.
name|sortValues
argument_list|(
name|sortValues
argument_list|)
expr_stmt|;
name|searchHit
operator|.
name|highlightFields
argument_list|(
name|highlightFields
argument_list|)
expr_stmt|;
name|searchHit
operator|.
name|sourceRef
argument_list|(
name|parsedSource
argument_list|)
expr_stmt|;
name|searchHit
operator|.
name|explanation
argument_list|(
name|explanation
argument_list|)
expr_stmt|;
name|searchHit
operator|.
name|setInnerHits
argument_list|(
name|innerHits
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchedQueries
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|searchHit
operator|.
name|matchedQueries
argument_list|(
name|matchedQueries
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|matchedQueries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardId
operator|!=
literal|null
operator|&&
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|searchHit
operator|.
name|shard
argument_list|(
operator|new
name|SearchShardTarget
argument_list|(
name|nodeId
argument_list|,
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|searchHit
operator|.
name|fields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
return|return
name|searchHit
return|;
block|}
DECL|method|parseExplanation
specifier|private
specifier|static
name|Explanation
name|parseExplanation
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|Float
name|value
init|=
literal|null
decl_stmt|;
name|String
name|description
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Explanation
argument_list|>
name|details
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|token
argument_list|,
parameter_list|()
lambda|->
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|currentFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|Fields
operator|.
name|VALUE
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|value
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|DESCRIPTION
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|description
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|DETAILS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|,
name|token
argument_list|,
parameter_list|()
lambda|->
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|details
operator|.
name|add
argument_list|(
name|parseExplanation
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|throwUnknownField
argument_list|(
name|currentFieldName
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"missing explanation value"
argument_list|)
throw|;
block|}
if|if
condition|(
name|description
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"missing explanation description"
argument_list|)
throw|;
block|}
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|value
argument_list|,
name|description
argument_list|,
name|details
argument_list|)
return|;
block|}
DECL|method|buildExplanation
specifier|private
name|void
name|buildExplanation
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Explanation
name|explanation
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VALUE
argument_list|,
name|explanation
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|DESCRIPTION
argument_list|,
name|explanation
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Explanation
index|[]
name|innerExps
init|=
name|explanation
operator|.
name|getDetails
argument_list|()
decl_stmt|;
if|if
condition|(
name|innerExps
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|DETAILS
argument_list|)
expr_stmt|;
for|for
control|(
name|Explanation
name|exp
range|:
name|innerExps
control|)
block|{
name|buildExplanation
argument_list|(
name|builder
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toInnerXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|readSearchHit
specifier|public
specifier|static
name|SearchHit
name|readSearchHit
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|SearchHit
name|hit
init|=
operator|new
name|SearchHit
argument_list|()
decl_stmt|;
name|hit
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|hit
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|score
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readOptionalText
argument_list|()
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readOptionalText
argument_list|()
expr_stmt|;
name|nestedIdentity
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|NestedIdentity
operator|::
operator|new
argument_list|)
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|source
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|source
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|explanation
operator|=
name|readExplanation
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|fields
operator|=
name|emptyMap
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|SearchHitField
name|hitField
init|=
name|SearchHitField
operator|.
name|readSearchHitField
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|fields
operator|=
name|singletonMap
argument_list|(
name|hitField
operator|.
name|getName
argument_list|()
argument_list|,
name|hitField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|SearchHitField
name|hitField
init|=
name|SearchHitField
operator|.
name|readSearchHitField
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|hitField
operator|.
name|getName
argument_list|()
argument_list|,
name|hitField
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fields
operator|=
name|unmodifiableMap
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|highlightFields
operator|=
name|emptyMap
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|HighlightField
name|field
init|=
name|readHighlightField
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|highlightFields
operator|=
name|singletonMap
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|highlightFields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|HighlightField
name|field
init|=
name|readHighlightField
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|highlightFields
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|highlightFields
operator|=
name|unmodifiableMap
argument_list|(
name|highlightFields
argument_list|)
expr_stmt|;
block|}
name|sortValues
operator|=
operator|new
name|SearchSortValues
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|matchedQueries
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|matchedQueries
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
comment|// we call the setter here because that also sets the local index parameter
name|shard
argument_list|(
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|SearchShardTarget
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|innerHits
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|SearchHits
name|value
init|=
name|SearchHits
operator|.
name|readSearchHits
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|innerHits
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeFloat
argument_list|(
name|score
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalText
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalText
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|nestedIdentity
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytesReference
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|explanation
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writeExplanation
argument_list|(
name|out
argument_list|,
name|explanation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHitField
name|hitField
range|:
name|getFields
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|hitField
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|highlightFields
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|highlightFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HighlightField
name|highlightField
range|:
name|highlightFields
operator|.
name|values
argument_list|()
control|)
block|{
name|highlightField
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|sortValues
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchedQueries
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|matchedQueries
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|matchedFilter
range|:
name|matchedQueries
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|matchedFilter
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|shard
argument_list|)
expr_stmt|;
if|if
condition|(
name|innerHits
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|innerHits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SearchHits
argument_list|>
name|entry
range|:
name|innerHits
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SearchHit
name|other
init|=
operator|(
name|SearchHit
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|other
operator|.
name|id
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|type
argument_list|,
name|other
operator|.
name|type
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|nestedIdentity
argument_list|,
name|other
operator|.
name|nestedIdentity
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|version
argument_list|,
name|other
operator|.
name|version
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|source
argument_list|,
name|other
operator|.
name|source
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fields
argument_list|,
name|other
operator|.
name|fields
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|getHighlightFields
argument_list|()
argument_list|,
name|other
operator|.
name|getHighlightFields
argument_list|()
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|matchedQueries
argument_list|,
name|other
operator|.
name|matchedQueries
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|explanation
argument_list|,
name|other
operator|.
name|explanation
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|shard
argument_list|,
name|other
operator|.
name|shard
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|innerHits
argument_list|,
name|other
operator|.
name|innerHits
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
name|nestedIdentity
argument_list|,
name|version
argument_list|,
name|source
argument_list|,
name|fields
argument_list|,
name|getHighlightFields
argument_list|()
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|matchedQueries
argument_list|)
argument_list|,
name|explanation
argument_list|,
name|shard
argument_list|,
name|innerHits
argument_list|)
return|;
block|}
comment|/**      * Encapsulates the nested identity of a hit.      */
DECL|class|NestedIdentity
specifier|public
specifier|static
specifier|final
class|class
name|NestedIdentity
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|field
specifier|private
name|Text
name|field
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|field|child
specifier|private
name|NestedIdentity
name|child
decl_stmt|;
DECL|method|NestedIdentity
specifier|public
name|NestedIdentity
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|offset
parameter_list|,
name|NestedIdentity
name|child
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
operator|new
name|Text
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|child
operator|=
name|child
expr_stmt|;
block|}
DECL|method|NestedIdentity
name|NestedIdentity
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|field
operator|=
name|in
operator|.
name|readOptionalText
argument_list|()
expr_stmt|;
name|offset
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|child
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|NestedIdentity
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
comment|/**          * Returns the nested field in the source this hit originates from          */
DECL|method|getField
specifier|public
name|Text
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
comment|/**          * Returns the offset in the nested array of objects in the source this hit          */
DECL|method|getOffset
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**          * Returns the next child nested level if there is any, otherwise<code>null</code> is returned.          *          * In the case of mappings with multiple levels of nested object fields          */
DECL|method|getChild
specifier|public
name|NestedIdentity
name|getChild
parameter_list|()
block|{
return|return
name|child
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalText
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_NESTED
argument_list|)
expr_stmt|;
return|return
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/**          * Rendering of the inner XContent object without the leading field name. This way the structure innerToXContent renders and          * fromXContent parses correspond to each other.          */
DECL|method|innerToXContent
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_NESTED_FIELD
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_NESTED_OFFSET
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|child
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|ConstructingObjectParser
argument_list|<
name|NestedIdentity
argument_list|,
name|Void
argument_list|>
name|PARSER
init|=
operator|new
name|ConstructingObjectParser
argument_list|<>
argument_list|(
literal|"nested_identity"
argument_list|,
name|ctorArgs
lambda|->
operator|new
name|NestedIdentity
argument_list|(
operator|(
name|String
operator|)
name|ctorArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|int
operator|)
name|ctorArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|NestedIdentity
operator|)
name|ctorArgs
index|[
literal|2
index|]
argument_list|)
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareString
argument_list|(
name|constructorArg
argument_list|()
argument_list|,
operator|new
name|ParseField
argument_list|(
name|Fields
operator|.
name|_NESTED_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|constructorArg
argument_list|()
argument_list|,
operator|new
name|ParseField
argument_list|(
name|Fields
operator|.
name|_NESTED_OFFSET
argument_list|)
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareObject
argument_list|(
name|optionalConstructorArg
argument_list|()
argument_list|,
name|PARSER
argument_list|,
operator|new
name|ParseField
argument_list|(
name|Fields
operator|.
name|_NESTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|NestedIdentity
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
block|{
return|return
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NestedIdentity
name|other
init|=
operator|(
name|NestedIdentity
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|field
argument_list|,
name|other
operator|.
name|field
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|offset
argument_list|,
name|other
operator|.
name|offset
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|child
argument_list|,
name|other
operator|.
name|child
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|field
argument_list|,
name|offset
argument_list|,
name|child
argument_list|)
return|;
block|}
DECL|class|Fields
specifier|public
specifier|static
class|class
name|Fields
block|{
DECL|field|_NESTED
specifier|static
specifier|final
name|String
name|_NESTED
init|=
literal|"_nested"
decl_stmt|;
DECL|field|_NESTED_FIELD
specifier|static
specifier|final
name|String
name|_NESTED_FIELD
init|=
literal|"field"
decl_stmt|;
DECL|field|_NESTED_OFFSET
specifier|static
specifier|final
name|String
name|_NESTED_OFFSET
init|=
literal|"offset"
decl_stmt|;
block|}
block|}
block|}
end_class

end_unit

