begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FunctionScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|WeightFactorFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|bitset
operator|.
name|BitsetFilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|AbstractQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|ParsedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|NestedHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|SearchContextAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|collapse
operator|.
name|CollapseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|StoredFieldsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|DocValueFieldsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|FetchSourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|ScriptFieldsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|SearchContextHighlight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ContextIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ScrollContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ShardSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|Profilers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|slice
operator|.
name|SliceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortAndFormats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestionSearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|DefaultSearchContext
specifier|final
class|class
name|DefaultSearchContext
extends|extends
name|SearchContext
block|{
DECL|field|id
specifier|private
specifier|final
name|long
name|id
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|ShardSearchRequest
name|request
decl_stmt|;
DECL|field|shardTarget
specifier|private
specifier|final
name|SearchShardTarget
name|shardTarget
decl_stmt|;
DECL|field|timeEstimateCounter
specifier|private
specifier|final
name|Counter
name|timeEstimateCounter
decl_stmt|;
DECL|field|searchType
specifier|private
name|SearchType
name|searchType
decl_stmt|;
DECL|field|engineSearcher
specifier|private
specifier|final
name|Engine
operator|.
name|Searcher
name|engineSearcher
decl_stmt|;
DECL|field|bigArrays
specifier|private
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|indexShard
specifier|private
specifier|final
name|IndexShard
name|indexShard
decl_stmt|;
DECL|field|indexService
specifier|private
specifier|final
name|IndexService
name|indexService
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|final
name|ContextIndexSearcher
name|searcher
decl_stmt|;
DECL|field|dfsResult
specifier|private
specifier|final
name|DfsSearchResult
name|dfsResult
decl_stmt|;
DECL|field|queryResult
specifier|private
specifier|final
name|QuerySearchResult
name|queryResult
decl_stmt|;
DECL|field|fetchResult
specifier|private
specifier|final
name|FetchSearchResult
name|fetchResult
decl_stmt|;
DECL|field|queryBoost
specifier|private
specifier|final
name|float
name|queryBoost
decl_stmt|;
DECL|field|timeout
specifier|private
name|TimeValue
name|timeout
decl_stmt|;
comment|// terminate after count
DECL|field|terminateAfter
specifier|private
name|int
name|terminateAfter
init|=
name|DEFAULT_TERMINATE_AFTER
decl_stmt|;
DECL|field|groupStats
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|groupStats
decl_stmt|;
DECL|field|scrollContext
specifier|private
name|ScrollContext
name|scrollContext
decl_stmt|;
DECL|field|explain
specifier|private
name|boolean
name|explain
decl_stmt|;
DECL|field|version
specifier|private
name|boolean
name|version
init|=
literal|false
decl_stmt|;
comment|// by default, we don't return versions
DECL|field|storedFields
specifier|private
name|StoredFieldsContext
name|storedFields
decl_stmt|;
DECL|field|scriptFields
specifier|private
name|ScriptFieldsContext
name|scriptFields
decl_stmt|;
DECL|field|fetchSourceContext
specifier|private
name|FetchSourceContext
name|fetchSourceContext
decl_stmt|;
DECL|field|docValueFieldsContext
specifier|private
name|DocValueFieldsContext
name|docValueFieldsContext
decl_stmt|;
DECL|field|from
specifier|private
name|int
name|from
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|sort
specifier|private
name|SortAndFormats
name|sort
decl_stmt|;
DECL|field|minimumScore
specifier|private
name|Float
name|minimumScore
decl_stmt|;
DECL|field|trackScores
specifier|private
name|boolean
name|trackScores
init|=
literal|false
decl_stmt|;
comment|// when sorting, track scores as well...
DECL|field|trackTotalHits
specifier|private
name|boolean
name|trackTotalHits
init|=
literal|true
decl_stmt|;
DECL|field|searchAfter
specifier|private
name|FieldDoc
name|searchAfter
decl_stmt|;
DECL|field|collapse
specifier|private
name|CollapseContext
name|collapse
decl_stmt|;
DECL|field|lowLevelCancellation
specifier|private
name|boolean
name|lowLevelCancellation
decl_stmt|;
comment|// filter for sliced scroll
DECL|field|sliceBuilder
specifier|private
name|SliceBuilder
name|sliceBuilder
decl_stmt|;
DECL|field|task
specifier|private
name|SearchTask
name|task
decl_stmt|;
comment|/**      * The original query as sent by the user without the types and aliases      * applied. Putting things in here leaks them into highlighting so don't add      * things like the type filter or alias filters.      */
DECL|field|originalQuery
specifier|private
name|ParsedQuery
name|originalQuery
decl_stmt|;
comment|/**      * The query to actually execute.      */
DECL|field|query
specifier|private
name|Query
name|query
decl_stmt|;
DECL|field|postFilter
specifier|private
name|ParsedQuery
name|postFilter
decl_stmt|;
DECL|field|aliasFilter
specifier|private
name|Query
name|aliasFilter
decl_stmt|;
DECL|field|docIdsToLoad
specifier|private
name|int
index|[]
name|docIdsToLoad
decl_stmt|;
DECL|field|docsIdsToLoadFrom
specifier|private
name|int
name|docsIdsToLoadFrom
decl_stmt|;
DECL|field|docsIdsToLoadSize
specifier|private
name|int
name|docsIdsToLoadSize
decl_stmt|;
DECL|field|aggregations
specifier|private
name|SearchContextAggregations
name|aggregations
decl_stmt|;
DECL|field|highlight
specifier|private
name|SearchContextHighlight
name|highlight
decl_stmt|;
DECL|field|suggest
specifier|private
name|SuggestionSearchContext
name|suggest
decl_stmt|;
DECL|field|rescore
specifier|private
name|List
argument_list|<
name|RescoreSearchContext
argument_list|>
name|rescore
decl_stmt|;
DECL|field|keepAlive
specifier|private
specifier|volatile
name|long
name|keepAlive
decl_stmt|;
DECL|field|originNanoTime
specifier|private
specifier|final
name|long
name|originNanoTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
DECL|field|lastAccessTime
specifier|private
specifier|volatile
name|long
name|lastAccessTime
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|profilers
specifier|private
name|Profilers
name|profilers
decl_stmt|;
DECL|field|searchExtBuilders
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SearchExtBuilder
argument_list|>
name|searchExtBuilders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|queryCollectors
specifier|private
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Collector
argument_list|>
name|queryCollectors
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|queryShardContext
specifier|private
specifier|final
name|QueryShardContext
name|queryShardContext
decl_stmt|;
DECL|field|fetchPhase
specifier|private
name|FetchPhase
name|fetchPhase
decl_stmt|;
DECL|method|DefaultSearchContext
name|DefaultSearchContext
parameter_list|(
name|long
name|id
parameter_list|,
name|ShardSearchRequest
name|request
parameter_list|,
name|SearchShardTarget
name|shardTarget
parameter_list|,
name|Engine
operator|.
name|Searcher
name|engineSearcher
parameter_list|,
name|IndexService
name|indexService
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|Counter
name|timeEstimateCounter
parameter_list|,
name|TimeValue
name|timeout
parameter_list|,
name|FetchPhase
name|fetchPhase
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|fetchPhase
operator|=
name|fetchPhase
expr_stmt|;
name|this
operator|.
name|searchType
operator|=
name|request
operator|.
name|searchType
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardTarget
operator|=
name|shardTarget
expr_stmt|;
name|this
operator|.
name|engineSearcher
operator|=
name|engineSearcher
expr_stmt|;
comment|// SearchContexts use a BigArrays that can circuit break
name|this
operator|.
name|bigArrays
operator|=
name|bigArrays
operator|.
name|withCircuitBreaking
argument_list|()
expr_stmt|;
name|this
operator|.
name|dfsResult
operator|=
operator|new
name|DfsSearchResult
argument_list|(
name|id
argument_list|,
name|shardTarget
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryResult
operator|=
operator|new
name|QuerySearchResult
argument_list|(
name|id
argument_list|,
name|shardTarget
argument_list|)
expr_stmt|;
name|this
operator|.
name|fetchResult
operator|=
operator|new
name|FetchSearchResult
argument_list|(
name|id
argument_list|,
name|shardTarget
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexShard
operator|=
name|indexShard
expr_stmt|;
name|this
operator|.
name|indexService
operator|=
name|indexService
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
operator|new
name|ContextIndexSearcher
argument_list|(
name|engineSearcher
argument_list|,
name|indexService
operator|.
name|cache
argument_list|()
operator|.
name|query
argument_list|()
argument_list|,
name|indexShard
operator|.
name|getQueryCachingPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeEstimateCounter
operator|=
name|timeEstimateCounter
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|queryShardContext
operator|=
name|indexService
operator|.
name|newQueryShardContext
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|request
operator|::
name|nowInMillis
argument_list|)
expr_stmt|;
name|queryShardContext
operator|.
name|setTypes
argument_list|(
name|request
operator|.
name|types
argument_list|()
argument_list|)
expr_stmt|;
name|queryBoost
operator|=
name|request
operator|.
name|indexBoost
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|public
name|void
name|doClose
parameter_list|()
block|{
comment|// clear and scope phase we  have
name|Releasables
operator|.
name|close
argument_list|(
name|searcher
argument_list|,
name|engineSearcher
argument_list|)
expr_stmt|;
block|}
comment|/**      * Should be called before executing the main query and after all other parameters have been set.      */
annotation|@
name|Override
DECL|method|preProcess
specifier|public
name|void
name|preProcess
parameter_list|(
name|boolean
name|rewrite
parameter_list|)
block|{
if|if
condition|(
name|hasOnlySuggest
argument_list|()
condition|)
block|{
return|return;
block|}
name|long
name|from
init|=
name|from
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|from
argument_list|()
decl_stmt|;
name|long
name|size
init|=
name|size
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|10
else|:
name|size
argument_list|()
decl_stmt|;
name|long
name|resultWindow
init|=
name|from
operator|+
name|size
decl_stmt|;
name|int
name|maxResultWindow
init|=
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getMaxResultWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|resultWindow
operator|>
name|maxResultWindow
condition|)
block|{
if|if
condition|(
name|scrollContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryPhaseExecutionException
argument_list|(
name|this
argument_list|,
literal|"Result window is too large, from + size must be less than or equal to: ["
operator|+
name|maxResultWindow
operator|+
literal|"] but was ["
operator|+
name|resultWindow
operator|+
literal|"]. See the scroll api for a more efficient way to request large data sets. "
operator|+
literal|"This limit can be set by changing the ["
operator|+
name|IndexSettings
operator|.
name|MAX_RESULT_WINDOW_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"] index level setting."
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|QueryPhaseExecutionException
argument_list|(
name|this
argument_list|,
literal|"Batch size is too large, size must be less than or equal to: ["
operator|+
name|maxResultWindow
operator|+
literal|"] but was ["
operator|+
name|resultWindow
operator|+
literal|"]. Scroll batch sizes cost as much memory as result windows so they are controlled by the ["
operator|+
name|IndexSettings
operator|.
name|MAX_RESULT_WINDOW_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"] index level setting."
argument_list|)
throw|;
block|}
if|if
condition|(
name|rescore
operator|!=
literal|null
condition|)
block|{
name|int
name|maxWindow
init|=
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getMaxRescoreWindow
argument_list|()
decl_stmt|;
for|for
control|(
name|RescoreSearchContext
name|rescoreContext
range|:
name|rescore
control|)
block|{
if|if
condition|(
name|rescoreContext
operator|.
name|window
argument_list|()
operator|>
name|maxWindow
condition|)
block|{
throw|throw
operator|new
name|QueryPhaseExecutionException
argument_list|(
name|this
argument_list|,
literal|"Rescore window ["
operator|+
name|rescoreContext
operator|.
name|window
argument_list|()
operator|+
literal|"] is too large. It must "
operator|+
literal|"be less than ["
operator|+
name|maxWindow
operator|+
literal|"]. This prevents allocating massive heaps for storing the results to be "
operator|+
literal|"rescored. This limit can be set by changing the ["
operator|+
name|IndexSettings
operator|.
name|MAX_RESCORE_WINDOW_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"] index level setting."
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|sliceBuilder
operator|!=
literal|null
condition|)
block|{
name|int
name|sliceLimit
init|=
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getMaxSlicesPerScroll
argument_list|()
decl_stmt|;
name|int
name|numSlices
init|=
name|sliceBuilder
operator|.
name|getMax
argument_list|()
decl_stmt|;
if|if
condition|(
name|numSlices
operator|>
name|sliceLimit
condition|)
block|{
throw|throw
operator|new
name|QueryPhaseExecutionException
argument_list|(
name|this
argument_list|,
literal|"The number of slices ["
operator|+
name|numSlices
operator|+
literal|"] is too large. It must "
operator|+
literal|"be less than ["
operator|+
name|sliceLimit
operator|+
literal|"]. This limit can be set by changing the ["
operator|+
name|IndexSettings
operator|.
name|MAX_SLICES_PER_SCROLL
operator|.
name|getKey
argument_list|()
operator|+
literal|"] index level setting."
argument_list|)
throw|;
block|}
block|}
comment|// initialize the filtering alias based on the provided filters
try|try
block|{
specifier|final
name|QueryBuilder
name|queryBuilder
init|=
name|request
operator|.
name|filteringAliases
argument_list|()
decl_stmt|;
name|aliasFilter
operator|=
name|queryBuilder
operator|==
literal|null
condition|?
literal|null
else|:
name|queryBuilder
operator|.
name|toFilter
argument_list|(
name|queryShardContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|query
argument_list|()
operator|==
literal|null
condition|)
block|{
name|parsedQuery
argument_list|(
name|ParsedQuery
operator|.
name|parsedMatchAllQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryBoost
argument_list|()
operator|!=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
condition|)
block|{
name|parsedQuery
argument_list|(
operator|new
name|ParsedQuery
argument_list|(
operator|new
name|FunctionScoreQuery
argument_list|(
name|query
argument_list|()
argument_list|,
operator|new
name|WeightFactorFunction
argument_list|(
name|queryBoost
argument_list|)
argument_list|)
argument_list|,
name|parsedQuery
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|query
operator|=
name|buildFilteredQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|rewrite
condition|)
block|{
try|try
block|{
name|this
operator|.
name|query
operator|=
name|searcher
operator|.
name|rewrite
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryPhaseExecutionException
argument_list|(
name|this
argument_list|,
literal|"Failed to rewrite main query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|buildFilteredQuery
specifier|public
name|Query
name|buildFilteredQuery
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|List
argument_list|<
name|Query
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Query
name|typeFilter
init|=
name|createTypeFilter
argument_list|(
name|queryShardContext
operator|.
name|getTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeFilter
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|typeFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapperService
argument_list|()
operator|.
name|hasNested
argument_list|()
operator|&&
name|typeFilter
operator|==
literal|null
comment|// when a _type filter is set, it will automatically exclude nested docs
operator|&&
operator|new
name|NestedHelper
argument_list|(
name|mapperService
argument_list|()
argument_list|)
operator|.
name|mightMatchNestedDocs
argument_list|(
name|query
argument_list|)
operator|&&
operator|(
name|aliasFilter
operator|==
literal|null
operator|||
operator|new
name|NestedHelper
argument_list|(
name|mapperService
argument_list|()
argument_list|)
operator|.
name|mightMatchNestedDocs
argument_list|(
name|aliasFilter
argument_list|)
operator|)
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|Queries
operator|.
name|newNonNestedFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aliasFilter
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|aliasFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sliceBuilder
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|sliceBuilder
operator|.
name|toFilter
argument_list|(
name|queryShardContext
argument_list|,
name|shardTarget
argument_list|()
operator|.
name|getShardId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|queryShardContext
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getNumberOfShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|query
return|;
block|}
else|else
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
for|for
control|(
name|Query
name|filter
range|:
name|filters
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|filter
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|method|createTypeFilter
specifier|private
name|Query
name|createTypeFilter
parameter_list|(
name|String
index|[]
name|types
parameter_list|)
block|{
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
name|types
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
name|MappedFieldType
name|ft
init|=
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|!=
literal|null
condition|)
block|{
comment|// ft might be null if no documents have been indexed yet
return|return
name|ft
operator|.
name|termsQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|types
argument_list|)
argument_list|,
name|queryShardContext
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|id
specifier|public
name|long
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|source
specifier|public
name|String
name|source
parameter_list|()
block|{
return|return
name|engineSearcher
operator|.
name|source
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|request
specifier|public
name|ShardSearchRequest
name|request
parameter_list|()
block|{
return|return
name|this
operator|.
name|request
return|;
block|}
annotation|@
name|Override
DECL|method|searchType
specifier|public
name|SearchType
name|searchType
parameter_list|()
block|{
return|return
name|this
operator|.
name|searchType
return|;
block|}
annotation|@
name|Override
DECL|method|shardTarget
specifier|public
name|SearchShardTarget
name|shardTarget
parameter_list|()
block|{
return|return
name|this
operator|.
name|shardTarget
return|;
block|}
annotation|@
name|Override
DECL|method|numberOfShards
specifier|public
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
name|request
operator|.
name|numberOfShards
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|queryBoost
specifier|public
name|float
name|queryBoost
parameter_list|()
block|{
return|return
name|queryBoost
return|;
block|}
annotation|@
name|Override
DECL|method|getOriginNanoTime
specifier|public
name|long
name|getOriginNanoTime
parameter_list|()
block|{
return|return
name|originNanoTime
return|;
block|}
annotation|@
name|Override
DECL|method|scrollContext
specifier|public
name|ScrollContext
name|scrollContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|scrollContext
return|;
block|}
annotation|@
name|Override
DECL|method|scrollContext
specifier|public
name|SearchContext
name|scrollContext
parameter_list|(
name|ScrollContext
name|scrollContext
parameter_list|)
block|{
name|this
operator|.
name|scrollContext
operator|=
name|scrollContext
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|aggregations
specifier|public
name|SearchContextAggregations
name|aggregations
parameter_list|()
block|{
return|return
name|aggregations
return|;
block|}
annotation|@
name|Override
DECL|method|aggregations
specifier|public
name|SearchContext
name|aggregations
parameter_list|(
name|SearchContextAggregations
name|aggregations
parameter_list|)
block|{
name|this
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|addSearchExt
specifier|public
name|void
name|addSearchExt
parameter_list|(
name|SearchExtBuilder
name|searchExtBuilder
parameter_list|)
block|{
comment|//it's ok to use the writeable name here given that we enforce it to be the same as the name of the element that gets
comment|//parsed by the corresponding parser. There is one single name and one single way to retrieve the parsed object from the context.
name|searchExtBuilders
operator|.
name|put
argument_list|(
name|searchExtBuilder
operator|.
name|getWriteableName
argument_list|()
argument_list|,
name|searchExtBuilder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSearchExt
specifier|public
name|SearchExtBuilder
name|getSearchExt
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|searchExtBuilders
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|highlight
specifier|public
name|SearchContextHighlight
name|highlight
parameter_list|()
block|{
return|return
name|highlight
return|;
block|}
annotation|@
name|Override
DECL|method|highlight
specifier|public
name|void
name|highlight
parameter_list|(
name|SearchContextHighlight
name|highlight
parameter_list|)
block|{
name|this
operator|.
name|highlight
operator|=
name|highlight
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|suggest
specifier|public
name|SuggestionSearchContext
name|suggest
parameter_list|()
block|{
return|return
name|suggest
return|;
block|}
annotation|@
name|Override
DECL|method|suggest
specifier|public
name|void
name|suggest
parameter_list|(
name|SuggestionSearchContext
name|suggest
parameter_list|)
block|{
name|this
operator|.
name|suggest
operator|=
name|suggest
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rescore
specifier|public
name|List
argument_list|<
name|RescoreSearchContext
argument_list|>
name|rescore
parameter_list|()
block|{
if|if
condition|(
name|rescore
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|rescore
return|;
block|}
annotation|@
name|Override
DECL|method|addRescore
specifier|public
name|void
name|addRescore
parameter_list|(
name|RescoreSearchContext
name|rescore
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rescore
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rescore
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rescore
operator|.
name|add
argument_list|(
name|rescore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasScriptFields
specifier|public
name|boolean
name|hasScriptFields
parameter_list|()
block|{
return|return
name|scriptFields
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|scriptFields
specifier|public
name|ScriptFieldsContext
name|scriptFields
parameter_list|()
block|{
if|if
condition|(
name|scriptFields
operator|==
literal|null
condition|)
block|{
name|scriptFields
operator|=
operator|new
name|ScriptFieldsContext
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|scriptFields
return|;
block|}
comment|/**      * A shortcut function to see whether there is a fetchSourceContext and it says the source is requested.      */
annotation|@
name|Override
DECL|method|sourceRequested
specifier|public
name|boolean
name|sourceRequested
parameter_list|()
block|{
return|return
name|fetchSourceContext
operator|!=
literal|null
operator|&&
name|fetchSourceContext
operator|.
name|fetchSource
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasFetchSourceContext
specifier|public
name|boolean
name|hasFetchSourceContext
parameter_list|()
block|{
return|return
name|fetchSourceContext
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|fetchSourceContext
specifier|public
name|FetchSourceContext
name|fetchSourceContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|fetchSourceContext
return|;
block|}
annotation|@
name|Override
DECL|method|fetchSourceContext
specifier|public
name|SearchContext
name|fetchSourceContext
parameter_list|(
name|FetchSourceContext
name|fetchSourceContext
parameter_list|)
block|{
name|this
operator|.
name|fetchSourceContext
operator|=
name|fetchSourceContext
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|docValueFieldsContext
specifier|public
name|DocValueFieldsContext
name|docValueFieldsContext
parameter_list|()
block|{
return|return
name|docValueFieldsContext
return|;
block|}
annotation|@
name|Override
DECL|method|docValueFieldsContext
specifier|public
name|SearchContext
name|docValueFieldsContext
parameter_list|(
name|DocValueFieldsContext
name|docValueFieldsContext
parameter_list|)
block|{
name|this
operator|.
name|docValueFieldsContext
operator|=
name|docValueFieldsContext
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|searcher
specifier|public
name|ContextIndexSearcher
name|searcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|searcher
return|;
block|}
annotation|@
name|Override
DECL|method|indexShard
specifier|public
name|IndexShard
name|indexShard
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexShard
return|;
block|}
annotation|@
name|Override
DECL|method|mapperService
specifier|public
name|MapperService
name|mapperService
parameter_list|()
block|{
return|return
name|indexService
operator|.
name|mapperService
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|similarityService
specifier|public
name|SimilarityService
name|similarityService
parameter_list|()
block|{
return|return
name|indexService
operator|.
name|similarityService
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|bigArrays
specifier|public
name|BigArrays
name|bigArrays
parameter_list|()
block|{
return|return
name|bigArrays
return|;
block|}
annotation|@
name|Override
DECL|method|bitsetFilterCache
specifier|public
name|BitsetFilterCache
name|bitsetFilterCache
parameter_list|()
block|{
return|return
name|indexService
operator|.
name|cache
argument_list|()
operator|.
name|bitsetFilterCache
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|fieldData
specifier|public
name|IndexFieldDataService
name|fieldData
parameter_list|()
block|{
return|return
name|indexService
operator|.
name|fieldData
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|timeout
specifier|public
name|TimeValue
name|timeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
annotation|@
name|Override
DECL|method|timeout
specifier|public
name|void
name|timeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|terminateAfter
specifier|public
name|int
name|terminateAfter
parameter_list|()
block|{
return|return
name|terminateAfter
return|;
block|}
annotation|@
name|Override
DECL|method|terminateAfter
specifier|public
name|void
name|terminateAfter
parameter_list|(
name|int
name|terminateAfter
parameter_list|)
block|{
name|this
operator|.
name|terminateAfter
operator|=
name|terminateAfter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|minimumScore
specifier|public
name|SearchContext
name|minimumScore
parameter_list|(
name|float
name|minimumScore
parameter_list|)
block|{
name|this
operator|.
name|minimumScore
operator|=
name|minimumScore
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|minimumScore
specifier|public
name|Float
name|minimumScore
parameter_list|()
block|{
return|return
name|this
operator|.
name|minimumScore
return|;
block|}
annotation|@
name|Override
DECL|method|sort
specifier|public
name|SearchContext
name|sort
parameter_list|(
name|SortAndFormats
name|sort
parameter_list|)
block|{
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|sort
specifier|public
name|SortAndFormats
name|sort
parameter_list|()
block|{
return|return
name|this
operator|.
name|sort
return|;
block|}
annotation|@
name|Override
DECL|method|trackScores
specifier|public
name|SearchContext
name|trackScores
parameter_list|(
name|boolean
name|trackScores
parameter_list|)
block|{
name|this
operator|.
name|trackScores
operator|=
name|trackScores
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|trackScores
specifier|public
name|boolean
name|trackScores
parameter_list|()
block|{
return|return
name|this
operator|.
name|trackScores
return|;
block|}
annotation|@
name|Override
DECL|method|trackTotalHits
specifier|public
name|SearchContext
name|trackTotalHits
parameter_list|(
name|boolean
name|trackTotalHits
parameter_list|)
block|{
name|this
operator|.
name|trackTotalHits
operator|=
name|trackTotalHits
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|trackTotalHits
specifier|public
name|boolean
name|trackTotalHits
parameter_list|()
block|{
return|return
name|trackTotalHits
return|;
block|}
annotation|@
name|Override
DECL|method|searchAfter
specifier|public
name|SearchContext
name|searchAfter
parameter_list|(
name|FieldDoc
name|searchAfter
parameter_list|)
block|{
name|this
operator|.
name|searchAfter
operator|=
name|searchAfter
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|lowLevelCancellation
specifier|public
name|boolean
name|lowLevelCancellation
parameter_list|()
block|{
return|return
name|lowLevelCancellation
return|;
block|}
DECL|method|lowLevelCancellation
specifier|public
name|void
name|lowLevelCancellation
parameter_list|(
name|boolean
name|lowLevelCancellation
parameter_list|)
block|{
name|this
operator|.
name|lowLevelCancellation
operator|=
name|lowLevelCancellation
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|searchAfter
specifier|public
name|FieldDoc
name|searchAfter
parameter_list|()
block|{
return|return
name|searchAfter
return|;
block|}
annotation|@
name|Override
DECL|method|collapse
specifier|public
name|SearchContext
name|collapse
parameter_list|(
name|CollapseContext
name|collapse
parameter_list|)
block|{
name|this
operator|.
name|collapse
operator|=
name|collapse
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|collapse
specifier|public
name|CollapseContext
name|collapse
parameter_list|()
block|{
return|return
name|collapse
return|;
block|}
DECL|method|sliceBuilder
specifier|public
name|SearchContext
name|sliceBuilder
parameter_list|(
name|SliceBuilder
name|sliceBuilder
parameter_list|)
block|{
name|this
operator|.
name|sliceBuilder
operator|=
name|sliceBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|parsedPostFilter
specifier|public
name|SearchContext
name|parsedPostFilter
parameter_list|(
name|ParsedQuery
name|postFilter
parameter_list|)
block|{
name|this
operator|.
name|postFilter
operator|=
name|postFilter
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|parsedPostFilter
specifier|public
name|ParsedQuery
name|parsedPostFilter
parameter_list|()
block|{
return|return
name|this
operator|.
name|postFilter
return|;
block|}
annotation|@
name|Override
DECL|method|aliasFilter
specifier|public
name|Query
name|aliasFilter
parameter_list|()
block|{
return|return
name|aliasFilter
return|;
block|}
annotation|@
name|Override
DECL|method|parsedQuery
specifier|public
name|SearchContext
name|parsedQuery
parameter_list|(
name|ParsedQuery
name|query
parameter_list|)
block|{
name|this
operator|.
name|originalQuery
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
operator|.
name|query
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|parsedQuery
specifier|public
name|ParsedQuery
name|parsedQuery
parameter_list|()
block|{
return|return
name|this
operator|.
name|originalQuery
return|;
block|}
comment|/**      * The query to execute, in its rewritten form.      */
annotation|@
name|Override
DECL|method|query
specifier|public
name|Query
name|query
parameter_list|()
block|{
return|return
name|this
operator|.
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|from
specifier|public
name|int
name|from
parameter_list|()
block|{
return|return
name|from
return|;
block|}
annotation|@
name|Override
DECL|method|from
specifier|public
name|SearchContext
name|from
parameter_list|(
name|int
name|from
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|SearchContext
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasStoredFields
specifier|public
name|boolean
name|hasStoredFields
parameter_list|()
block|{
return|return
name|storedFields
operator|!=
literal|null
operator|&&
name|storedFields
operator|.
name|fieldNames
argument_list|()
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasStoredFieldsContext
specifier|public
name|boolean
name|hasStoredFieldsContext
parameter_list|()
block|{
return|return
name|storedFields
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|storedFieldsContext
specifier|public
name|StoredFieldsContext
name|storedFieldsContext
parameter_list|()
block|{
return|return
name|storedFields
return|;
block|}
annotation|@
name|Override
DECL|method|storedFieldsContext
specifier|public
name|SearchContext
name|storedFieldsContext
parameter_list|(
name|StoredFieldsContext
name|storedFieldsContext
parameter_list|)
block|{
name|this
operator|.
name|storedFields
operator|=
name|storedFieldsContext
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|storedFieldsRequested
specifier|public
name|boolean
name|storedFieldsRequested
parameter_list|()
block|{
return|return
name|storedFields
operator|==
literal|null
operator|||
name|storedFields
operator|.
name|fetchFields
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|boolean
name|explain
parameter_list|()
block|{
return|return
name|explain
return|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|void
name|explain
parameter_list|(
name|boolean
name|explain
parameter_list|)
block|{
name|this
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|groupStats
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|groupStats
parameter_list|()
block|{
return|return
name|this
operator|.
name|groupStats
return|;
block|}
annotation|@
name|Override
DECL|method|groupStats
specifier|public
name|void
name|groupStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groupStats
parameter_list|)
block|{
name|this
operator|.
name|groupStats
operator|=
name|groupStats
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|version
specifier|public
name|boolean
name|version
parameter_list|()
block|{
return|return
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|version
specifier|public
name|void
name|version
parameter_list|(
name|boolean
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docIdsToLoad
specifier|public
name|int
index|[]
name|docIdsToLoad
parameter_list|()
block|{
return|return
name|docIdsToLoad
return|;
block|}
annotation|@
name|Override
DECL|method|docIdsToLoadFrom
specifier|public
name|int
name|docIdsToLoadFrom
parameter_list|()
block|{
return|return
name|docsIdsToLoadFrom
return|;
block|}
annotation|@
name|Override
DECL|method|docIdsToLoadSize
specifier|public
name|int
name|docIdsToLoadSize
parameter_list|()
block|{
return|return
name|docsIdsToLoadSize
return|;
block|}
annotation|@
name|Override
DECL|method|docIdsToLoad
specifier|public
name|SearchContext
name|docIdsToLoad
parameter_list|(
name|int
index|[]
name|docIdsToLoad
parameter_list|,
name|int
name|docsIdsToLoadFrom
parameter_list|,
name|int
name|docsIdsToLoadSize
parameter_list|)
block|{
name|this
operator|.
name|docIdsToLoad
operator|=
name|docIdsToLoad
expr_stmt|;
name|this
operator|.
name|docsIdsToLoadFrom
operator|=
name|docsIdsToLoadFrom
expr_stmt|;
name|this
operator|.
name|docsIdsToLoadSize
operator|=
name|docsIdsToLoadSize
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|accessed
specifier|public
name|void
name|accessed
parameter_list|(
name|long
name|accessTime
parameter_list|)
block|{
name|this
operator|.
name|lastAccessTime
operator|=
name|accessTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lastAccessTime
specifier|public
name|long
name|lastAccessTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastAccessTime
return|;
block|}
annotation|@
name|Override
DECL|method|keepAlive
specifier|public
name|long
name|keepAlive
parameter_list|()
block|{
return|return
name|this
operator|.
name|keepAlive
return|;
block|}
annotation|@
name|Override
DECL|method|keepAlive
specifier|public
name|void
name|keepAlive
parameter_list|(
name|long
name|keepAlive
parameter_list|)
block|{
name|this
operator|.
name|keepAlive
operator|=
name|keepAlive
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|dfsResult
specifier|public
name|DfsSearchResult
name|dfsResult
parameter_list|()
block|{
return|return
name|dfsResult
return|;
block|}
annotation|@
name|Override
DECL|method|queryResult
specifier|public
name|QuerySearchResult
name|queryResult
parameter_list|()
block|{
return|return
name|queryResult
return|;
block|}
annotation|@
name|Override
DECL|method|fetchPhase
specifier|public
name|FetchPhase
name|fetchPhase
parameter_list|()
block|{
return|return
name|fetchPhase
return|;
block|}
annotation|@
name|Override
DECL|method|fetchResult
specifier|public
name|FetchSearchResult
name|fetchResult
parameter_list|()
block|{
return|return
name|fetchResult
return|;
block|}
annotation|@
name|Override
DECL|method|smartNameFieldType
specifier|public
name|MappedFieldType
name|smartNameFieldType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getObjectMapper
specifier|public
name|ObjectMapper
name|getObjectMapper
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|mapperService
argument_list|()
operator|.
name|getObjectMapper
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|timeEstimateCounter
specifier|public
name|Counter
name|timeEstimateCounter
parameter_list|()
block|{
return|return
name|timeEstimateCounter
return|;
block|}
annotation|@
name|Override
DECL|method|queryCollectors
specifier|public
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Collector
argument_list|>
name|queryCollectors
parameter_list|()
block|{
return|return
name|queryCollectors
return|;
block|}
annotation|@
name|Override
DECL|method|getQueryShardContext
specifier|public
name|QueryShardContext
name|getQueryShardContext
parameter_list|()
block|{
return|return
name|queryShardContext
return|;
block|}
annotation|@
name|Override
DECL|method|getProfilers
specifier|public
name|Profilers
name|getProfilers
parameter_list|()
block|{
return|return
name|profilers
return|;
block|}
DECL|method|setProfilers
specifier|public
name|void
name|setProfilers
parameter_list|(
name|Profilers
name|profilers
parameter_list|)
block|{
name|this
operator|.
name|profilers
operator|=
name|profilers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTask
specifier|public
name|void
name|setTask
parameter_list|(
name|SearchTask
name|task
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTask
specifier|public
name|SearchTask
name|getTask
parameter_list|()
block|{
return|return
name|task
return|;
block|}
annotation|@
name|Override
DECL|method|isCancelled
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|task
operator|.
name|isCancelled
argument_list|()
return|;
block|}
block|}
end_class

end_unit

