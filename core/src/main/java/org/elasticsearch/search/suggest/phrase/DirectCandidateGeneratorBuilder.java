begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.phrase
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|DirectSpellChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|JaroWinklerDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|LevensteinDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|LuceneLevenshteinDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|NGramDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|StringDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|LevenshteinAutomata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SortBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestionBuilder
operator|.
name|CandidateGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_class
DECL|class|DirectCandidateGeneratorBuilder
specifier|public
specifier|final
class|class
name|DirectCandidateGeneratorBuilder
implements|implements
name|CandidateGenerator
block|{
DECL|field|TYPE
specifier|private
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"direct_generator"
decl_stmt|;
DECL|field|DIRECT_GENERATOR_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|DIRECT_GENERATOR_FIELD
init|=
operator|new
name|ParseField
argument_list|(
name|TYPE
argument_list|)
decl_stmt|;
DECL|field|FIELDNAME_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FIELDNAME_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
DECL|field|PREFILTER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PREFILTER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"pre_filter"
argument_list|)
decl_stmt|;
DECL|field|POSTFILTER_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|POSTFILTER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"post_filter"
argument_list|)
decl_stmt|;
DECL|field|SUGGESTMODE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SUGGESTMODE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"suggest_mode"
argument_list|)
decl_stmt|;
DECL|field|MIN_DOC_FREQ_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MIN_DOC_FREQ_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_doc_freq"
argument_list|)
decl_stmt|;
DECL|field|ACCURACY_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|ACCURACY_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"accuracy"
argument_list|)
decl_stmt|;
DECL|field|SIZE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SIZE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
DECL|field|SORT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SORT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"sort"
argument_list|)
decl_stmt|;
DECL|field|STRING_DISTANCE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|STRING_DISTANCE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"string_distance"
argument_list|)
decl_stmt|;
DECL|field|MAX_EDITS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MAX_EDITS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_edits"
argument_list|)
decl_stmt|;
DECL|field|MAX_INSPECTIONS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MAX_INSPECTIONS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_inspections"
argument_list|)
decl_stmt|;
DECL|field|MAX_TERM_FREQ_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MAX_TERM_FREQ_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_term_freq"
argument_list|)
decl_stmt|;
DECL|field|PREFIX_LENGTH_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PREFIX_LENGTH_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"prefix_length"
argument_list|)
decl_stmt|;
DECL|field|MIN_WORD_LENGTH_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MIN_WORD_LENGTH_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_word_length"
argument_list|)
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|preFilter
specifier|private
name|String
name|preFilter
decl_stmt|;
DECL|field|postFilter
specifier|private
name|String
name|postFilter
decl_stmt|;
DECL|field|suggestMode
specifier|private
name|String
name|suggestMode
decl_stmt|;
DECL|field|accuracy
specifier|private
name|Float
name|accuracy
decl_stmt|;
DECL|field|size
specifier|private
name|Integer
name|size
decl_stmt|;
DECL|field|sort
specifier|private
name|String
name|sort
decl_stmt|;
DECL|field|stringDistance
specifier|private
name|String
name|stringDistance
decl_stmt|;
DECL|field|maxEdits
specifier|private
name|Integer
name|maxEdits
decl_stmt|;
DECL|field|maxInspections
specifier|private
name|Integer
name|maxInspections
decl_stmt|;
DECL|field|maxTermFreq
specifier|private
name|Float
name|maxTermFreq
decl_stmt|;
DECL|field|prefixLength
specifier|private
name|Integer
name|prefixLength
decl_stmt|;
DECL|field|minWordLength
specifier|private
name|Integer
name|minWordLength
decl_stmt|;
DECL|field|minDocFreq
specifier|private
name|Float
name|minDocFreq
decl_stmt|;
comment|/**      * @param field Sets from what field to fetch the candidate suggestions from.      */
DECL|method|DirectCandidateGeneratorBuilder
specifier|public
name|DirectCandidateGeneratorBuilder
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|DirectCandidateGeneratorBuilder
specifier|public
name|DirectCandidateGeneratorBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|field
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|suggestMode
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|accuracy
operator|=
name|in
operator|.
name|readOptionalFloat
argument_list|()
expr_stmt|;
name|size
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|sort
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|stringDistance
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|maxEdits
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|maxInspections
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|maxTermFreq
operator|=
name|in
operator|.
name|readOptionalFloat
argument_list|()
expr_stmt|;
name|prefixLength
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|minWordLength
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|minDocFreq
operator|=
name|in
operator|.
name|readOptionalFloat
argument_list|()
expr_stmt|;
name|preFilter
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|postFilter
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|suggestMode
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalFloat
argument_list|(
name|accuracy
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|sort
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|stringDistance
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|maxEdits
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|maxInspections
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalFloat
argument_list|(
name|maxTermFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|prefixLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|minWordLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalFloat
argument_list|(
name|minDocFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|preFilter
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|postFilter
argument_list|)
expr_stmt|;
block|}
DECL|method|field
name|String
name|field
parameter_list|()
block|{
return|return
name|this
operator|.
name|field
return|;
block|}
comment|/**      * The global suggest mode controls what suggested terms are included or      * controls for what suggest text tokens, terms should be suggested for.      * Three possible values can be specified:      *<ol>      *<li><code>missing</code> - Only suggest terms in the suggest text      * that aren't in the index. This is the default.      *<li><code>popular</code> - Only suggest terms that occur in more docs      * then the original suggest text term.      *<li><code>always</code> - Suggest any matching suggest terms based on      * tokens in the suggest text.      *</ol>      */
DECL|method|suggestMode
specifier|public
name|DirectCandidateGeneratorBuilder
name|suggestMode
parameter_list|(
name|String
name|suggestMode
parameter_list|)
block|{
name|this
operator|.
name|suggestMode
operator|=
name|suggestMode
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|suggestMode
name|String
name|suggestMode
parameter_list|()
block|{
return|return
name|suggestMode
return|;
block|}
comment|/**      * Sets how similar the suggested terms at least need to be compared to      * the original suggest text tokens. A value between 0 and 1 can be      * specified. This value will be compared to the string distance result      * of each candidate spelling correction.      *<p>      * Default is<tt>0.5</tt>      */
DECL|method|accuracy
specifier|public
name|DirectCandidateGeneratorBuilder
name|accuracy
parameter_list|(
name|float
name|accuracy
parameter_list|)
block|{
name|this
operator|.
name|accuracy
operator|=
name|accuracy
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|accuracy
name|Float
name|accuracy
parameter_list|()
block|{
return|return
name|this
operator|.
name|accuracy
return|;
block|}
comment|/**      * Sets the maximum suggestions to be returned per suggest text term.      */
DECL|method|size
specifier|public
name|DirectCandidateGeneratorBuilder
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Size must be positive"
argument_list|)
throw|;
block|}
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|size
name|Integer
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**      * Sets how to sort the suggest terms per suggest text token. Two      * possible values:      *<ol>      *<li><code>score</code> - Sort should first be based on score, then      * document frequency and then the term itself.      *<li><code>frequency</code> - Sort should first be based on document      * frequency, then score and then the term itself.      *</ol>      *<p>      * What the score is depends on the suggester being used.      */
DECL|method|sort
specifier|public
name|DirectCandidateGeneratorBuilder
name|sort
parameter_list|(
name|String
name|sort
parameter_list|)
block|{
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|sort
name|String
name|sort
parameter_list|()
block|{
return|return
name|sort
return|;
block|}
comment|/**      * Sets what string distance implementation to use for comparing how      * similar suggested terms are. Four possible values can be specified:      *<ol>      *<li><code>internal</code> - This is the default and is based on      *<code>damerau_levenshtein</code>, but highly optimized for comparing      * string distance for terms inside the index.      *<li><code>damerau_levenshtein</code> - String distance algorithm      * based on Damerau-Levenshtein algorithm.      *<li><code>levenstein</code> - String distance algorithm based on      * Levenstein edit distance algorithm.      *<li><code>jarowinkler</code> - String distance algorithm based on      * Jaro-Winkler algorithm.      *<li><code>ngram</code> - String distance algorithm based on character      * n-grams.      *</ol>      */
DECL|method|stringDistance
specifier|public
name|DirectCandidateGeneratorBuilder
name|stringDistance
parameter_list|(
name|String
name|stringDistance
parameter_list|)
block|{
name|this
operator|.
name|stringDistance
operator|=
name|stringDistance
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|stringDistance
name|String
name|stringDistance
parameter_list|()
block|{
return|return
name|stringDistance
return|;
block|}
comment|/**      * Sets the maximum edit distance candidate suggestions can have in      * order to be considered as a suggestion. Can only be a value between 1      * and 2. Any other value result in an bad request error being thrown.      * Defaults to<tt>2</tt>.      */
DECL|method|maxEdits
specifier|public
name|DirectCandidateGeneratorBuilder
name|maxEdits
parameter_list|(
name|Integer
name|maxEdits
parameter_list|)
block|{
if|if
condition|(
name|maxEdits
argument_list|<
literal|1
operator|||
name|maxEdits
argument_list|>
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal max_edits value "
operator|+
name|maxEdits
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxEdits
operator|=
name|maxEdits
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxEdits
name|Integer
name|maxEdits
parameter_list|()
block|{
return|return
name|maxEdits
return|;
block|}
comment|/**      * A factor that is used to multiply with the size in order to inspect      * more candidate suggestions. Can improve accuracy at the cost of      * performance. Defaults to<tt>5</tt>.      */
DECL|method|maxInspections
specifier|public
name|DirectCandidateGeneratorBuilder
name|maxInspections
parameter_list|(
name|Integer
name|maxInspections
parameter_list|)
block|{
name|this
operator|.
name|maxInspections
operator|=
name|maxInspections
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxInspections
name|Integer
name|maxInspections
parameter_list|()
block|{
return|return
name|maxInspections
return|;
block|}
comment|/**      * Sets a maximum threshold in number of documents a suggest text token      * can exist in order to be corrected. Can be a relative percentage      * number (e.g 0.4) or an absolute number to represent document      * frequencies. If an value higher than 1 is specified then fractional      * can not be specified. Defaults to<tt>0.01</tt>.      *<p>      * This can be used to exclude high frequency terms from being      * suggested. High frequency terms are usually spelled correctly on top      * of this this also improves the suggest performance.      */
DECL|method|maxTermFreq
specifier|public
name|DirectCandidateGeneratorBuilder
name|maxTermFreq
parameter_list|(
name|float
name|maxTermFreq
parameter_list|)
block|{
name|this
operator|.
name|maxTermFreq
operator|=
name|maxTermFreq
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxTermFreq
name|Float
name|maxTermFreq
parameter_list|()
block|{
return|return
name|maxTermFreq
return|;
block|}
comment|/**      * Sets the number of minimal prefix characters that must match in order      * be a candidate suggestion. Defaults to 1. Increasing this number      * improves suggest performance. Usually misspellings don't occur in the      * beginning of terms.      */
DECL|method|prefixLength
specifier|public
name|DirectCandidateGeneratorBuilder
name|prefixLength
parameter_list|(
name|int
name|prefixLength
parameter_list|)
block|{
name|this
operator|.
name|prefixLength
operator|=
name|prefixLength
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|prefixLength
name|Integer
name|prefixLength
parameter_list|()
block|{
return|return
name|prefixLength
return|;
block|}
comment|/**      * The minimum length a suggest text term must have in order to be      * corrected. Defaults to<tt>4</tt>.      */
DECL|method|minWordLength
specifier|public
name|DirectCandidateGeneratorBuilder
name|minWordLength
parameter_list|(
name|int
name|minWordLength
parameter_list|)
block|{
name|this
operator|.
name|minWordLength
operator|=
name|minWordLength
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|minWordLength
name|Integer
name|minWordLength
parameter_list|()
block|{
return|return
name|minWordLength
return|;
block|}
comment|/**      * Sets a minimal threshold in number of documents a suggested term      * should appear in. This can be specified as an absolute number or as a      * relative percentage of number of documents. This can improve quality      * by only suggesting high frequency terms. Defaults to 0f and is not      * enabled. If a value higher than 1 is specified then the number cannot      * be fractional.      */
DECL|method|minDocFreq
specifier|public
name|DirectCandidateGeneratorBuilder
name|minDocFreq
parameter_list|(
name|float
name|minDocFreq
parameter_list|)
block|{
name|this
operator|.
name|minDocFreq
operator|=
name|minDocFreq
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|minDocFreq
name|Float
name|minDocFreq
parameter_list|()
block|{
return|return
name|minDocFreq
return|;
block|}
comment|/**      * Sets a filter (analyzer) that is applied to each of the tokens passed to this candidate generator.      * This filter is applied to the original token before candidates are generated.      */
DECL|method|preFilter
specifier|public
name|DirectCandidateGeneratorBuilder
name|preFilter
parameter_list|(
name|String
name|preFilter
parameter_list|)
block|{
name|this
operator|.
name|preFilter
operator|=
name|preFilter
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|preFilter
name|String
name|preFilter
parameter_list|()
block|{
return|return
name|preFilter
return|;
block|}
comment|/**      * Sets a filter (analyzer) that is applied to each of the generated tokens      * before they are passed to the actual phrase scorer.      */
DECL|method|postFilter
specifier|public
name|DirectCandidateGeneratorBuilder
name|postFilter
parameter_list|(
name|String
name|postFilter
parameter_list|)
block|{
name|this
operator|.
name|postFilter
operator|=
name|postFilter
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|postFilter
name|String
name|postFilter
parameter_list|()
block|{
return|return
name|postFilter
return|;
block|}
comment|/**      * gets the type identifier of this {@link CandidateGenerator}      */
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|field
argument_list|,
name|FIELDNAME_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|accuracy
argument_list|,
name|ACCURACY_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|maxEdits
argument_list|,
name|MAX_EDITS_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|maxInspections
argument_list|,
name|MAX_INSPECTIONS_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|maxTermFreq
argument_list|,
name|MAX_TERM_FREQ_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|minWordLength
argument_list|,
name|MIN_WORD_LENGTH_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|minDocFreq
argument_list|,
name|MIN_DOC_FREQ_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|preFilter
argument_list|,
name|PREFILTER_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|prefixLength
argument_list|,
name|PREFIX_LENGTH_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|postFilter
argument_list|,
name|POSTFILTER_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|suggestMode
argument_list|,
name|SUGGESTMODE_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|size
argument_list|,
name|SIZE_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|sort
argument_list|,
name|SORT_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|outputFieldIfNotNull
argument_list|(
name|stringDistance
argument_list|,
name|STRING_DISTANCE_FIELD
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|outputFieldIfNotNull
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|outputFieldIfNotNull
parameter_list|(
name|T
name|value
parameter_list|,
name|ParseField
name|field
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|field
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|PARSER
specifier|public
specifier|static
specifier|final
name|ConstructingObjectParser
argument_list|<
name|DirectCandidateGeneratorBuilder
argument_list|,
name|Void
argument_list|>
name|PARSER
init|=
operator|new
name|ConstructingObjectParser
argument_list|<>
argument_list|(
name|TYPE
argument_list|,
name|args
lambda|->
operator|new
name|DirectCandidateGeneratorBuilder
argument_list|(
operator|(
name|String
operator|)
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareString
argument_list|(
name|ConstructingObjectParser
operator|.
name|constructorArg
argument_list|()
argument_list|,
name|FIELDNAME_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|preFilter
argument_list|,
name|PREFILTER_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|postFilter
argument_list|,
name|POSTFILTER_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|suggestMode
argument_list|,
name|SUGGESTMODE_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareFloat
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|minDocFreq
argument_list|,
name|MIN_DOC_FREQ_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareFloat
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|accuracy
argument_list|,
name|ACCURACY_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|size
argument_list|,
name|SIZE_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|sort
argument_list|,
name|SORT_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|stringDistance
argument_list|,
name|STRING_DISTANCE_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|maxInspections
argument_list|,
name|MAX_INSPECTIONS_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareFloat
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|maxTermFreq
argument_list|,
name|MAX_TERM_FREQ_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|maxEdits
argument_list|,
name|MAX_EDITS_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|minWordLength
argument_list|,
name|MIN_WORD_LENGTH_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|::
name|prefixLength
argument_list|,
name|PREFIX_LENGTH_FIELD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|PhraseSuggestionContext
operator|.
name|DirectCandidateGenerator
name|build
parameter_list|(
name|MapperService
name|mapperService
parameter_list|)
throws|throws
name|IOException
block|{
name|PhraseSuggestionContext
operator|.
name|DirectCandidateGenerator
name|generator
init|=
operator|new
name|PhraseSuggestionContext
operator|.
name|DirectCandidateGenerator
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setField
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|transferIfNotNull
argument_list|(
name|this
operator|.
name|size
argument_list|,
name|generator
operator|::
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|preFilter
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|preFilter
argument_list|(
name|mapperService
operator|.
name|getIndexAnalyzers
argument_list|()
operator|.
name|get
argument_list|(
name|this
operator|.
name|preFilter
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|generator
operator|.
name|preFilter
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Analyzer ["
operator|+
name|this
operator|.
name|preFilter
operator|+
literal|"] doesn't exists"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|postFilter
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|postFilter
argument_list|(
name|mapperService
operator|.
name|getIndexAnalyzers
argument_list|()
operator|.
name|get
argument_list|(
name|this
operator|.
name|postFilter
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|generator
operator|.
name|postFilter
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Analyzer ["
operator|+
name|this
operator|.
name|postFilter
operator|+
literal|"] doesn't exists"
argument_list|)
throw|;
block|}
block|}
name|transferIfNotNull
argument_list|(
name|this
operator|.
name|accuracy
argument_list|,
name|generator
operator|::
name|accuracy
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|suggestMode
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|suggestMode
argument_list|(
name|resolveSuggestMode
argument_list|(
name|this
operator|.
name|suggestMode
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|sort
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|sort
argument_list|(
name|SortBy
operator|.
name|resolve
argument_list|(
name|this
operator|.
name|sort
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|stringDistance
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|stringDistance
argument_list|(
name|resolveDistance
argument_list|(
name|this
operator|.
name|stringDistance
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|transferIfNotNull
argument_list|(
name|this
operator|.
name|maxEdits
argument_list|,
name|generator
operator|::
name|maxEdits
argument_list|)
expr_stmt|;
if|if
condition|(
name|generator
operator|.
name|maxEdits
argument_list|()
operator|<
literal|1
operator|||
name|generator
operator|.
name|maxEdits
argument_list|()
operator|>
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal max_edits value "
operator|+
name|generator
operator|.
name|maxEdits
argument_list|()
argument_list|)
throw|;
block|}
name|transferIfNotNull
argument_list|(
name|this
operator|.
name|maxInspections
argument_list|,
name|generator
operator|::
name|maxInspections
argument_list|)
expr_stmt|;
name|transferIfNotNull
argument_list|(
name|this
operator|.
name|maxTermFreq
argument_list|,
name|generator
operator|::
name|maxTermFreq
argument_list|)
expr_stmt|;
name|transferIfNotNull
argument_list|(
name|this
operator|.
name|prefixLength
argument_list|,
name|generator
operator|::
name|prefixLength
argument_list|)
expr_stmt|;
name|transferIfNotNull
argument_list|(
name|this
operator|.
name|minWordLength
argument_list|,
name|generator
operator|::
name|minWordLength
argument_list|)
expr_stmt|;
name|transferIfNotNull
argument_list|(
name|this
operator|.
name|minDocFreq
argument_list|,
name|generator
operator|::
name|minDocFreq
argument_list|)
expr_stmt|;
return|return
name|generator
return|;
block|}
DECL|method|resolveSuggestMode
specifier|private
specifier|static
name|SuggestMode
name|resolveSuggestMode
parameter_list|(
name|String
name|suggestMode
parameter_list|)
block|{
name|suggestMode
operator|=
name|suggestMode
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"missing"
operator|.
name|equals
argument_list|(
name|suggestMode
argument_list|)
condition|)
block|{
return|return
name|SuggestMode
operator|.
name|SUGGEST_WHEN_NOT_IN_INDEX
return|;
block|}
elseif|else
if|if
condition|(
literal|"popular"
operator|.
name|equals
argument_list|(
name|suggestMode
argument_list|)
condition|)
block|{
return|return
name|SuggestMode
operator|.
name|SUGGEST_MORE_POPULAR
return|;
block|}
elseif|else
if|if
condition|(
literal|"always"
operator|.
name|equals
argument_list|(
name|suggestMode
argument_list|)
condition|)
block|{
return|return
name|SuggestMode
operator|.
name|SUGGEST_ALWAYS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal suggest mode "
operator|+
name|suggestMode
argument_list|)
throw|;
block|}
block|}
DECL|method|resolveDistance
specifier|private
specifier|static
name|StringDistance
name|resolveDistance
parameter_list|(
name|String
name|distanceVal
parameter_list|)
block|{
name|distanceVal
operator|=
name|distanceVal
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"internal"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
name|DirectSpellChecker
operator|.
name|INTERNAL_LEVENSHTEIN
return|;
block|}
elseif|else
if|if
condition|(
literal|"damerau_levenshtein"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
operator|||
literal|"damerauLevenshtein"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|LuceneLevenshteinDistance
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"levenstein"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|LevensteinDistance
argument_list|()
return|;
comment|// TODO Jaro and Winkler are 2 people - so apply same naming logic
comment|// as damerau_levenshtein
block|}
elseif|else
if|if
condition|(
literal|"jarowinkler"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|JaroWinklerDistance
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"ngram"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|NGramDistance
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal distance option "
operator|+
name|distanceVal
argument_list|)
throw|;
block|}
block|}
DECL|method|transferIfNotNull
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|transferIfNotNull
parameter_list|(
name|T
name|value
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"{ \"error\" : \""
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|"\"}"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|field
argument_list|,
name|preFilter
argument_list|,
name|postFilter
argument_list|,
name|suggestMode
argument_list|,
name|accuracy
argument_list|,
name|size
argument_list|,
name|sort
argument_list|,
name|stringDistance
argument_list|,
name|maxEdits
argument_list|,
name|maxInspections
argument_list|,
name|maxTermFreq
argument_list|,
name|prefixLength
argument_list|,
name|minWordLength
argument_list|,
name|minDocFreq
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DirectCandidateGeneratorBuilder
name|other
init|=
operator|(
name|DirectCandidateGeneratorBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|field
argument_list|,
name|other
operator|.
name|field
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|preFilter
argument_list|,
name|other
operator|.
name|preFilter
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|postFilter
argument_list|,
name|other
operator|.
name|postFilter
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|suggestMode
argument_list|,
name|other
operator|.
name|suggestMode
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|accuracy
argument_list|,
name|other
operator|.
name|accuracy
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|size
argument_list|,
name|other
operator|.
name|size
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|sort
argument_list|,
name|other
operator|.
name|sort
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|stringDistance
argument_list|,
name|other
operator|.
name|stringDistance
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|maxEdits
argument_list|,
name|other
operator|.
name|maxEdits
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|maxInspections
argument_list|,
name|other
operator|.
name|maxInspections
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|maxTermFreq
argument_list|,
name|other
operator|.
name|maxTermFreq
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|prefixLength
argument_list|,
name|other
operator|.
name|prefixLength
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minWordLength
argument_list|,
name|other
operator|.
name|minWordLength
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minDocFreq
argument_list|,
name|other
operator|.
name|minDocFreq
argument_list|)
return|;
block|}
block|}
end_class

end_unit

