begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ToXContentToBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Defines how to perform suggesting. This builders allows a number of global options to be specified and  * an arbitrary number of {@link org.elasticsearch.search.suggest.term.TermSuggestionBuilder} instances.  *<p>  * Suggesting works by suggesting terms that appear in the suggest text that are similar compared to the terms in  * provided text. These spelling suggestions are based on several options described in this class.  */
end_comment

begin_class
DECL|class|SuggestBuilder
specifier|public
class|class
name|SuggestBuilder
extends|extends
name|ToXContentToBytes
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|globalText
specifier|private
name|String
name|globalText
decl_stmt|;
DECL|field|suggestions
specifier|private
specifier|final
name|List
argument_list|<
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|SuggestBuilder
specifier|public
name|SuggestBuilder
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|SuggestBuilder
specifier|public
name|SuggestBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Sets the text to provide suggestions for. The suggest text is a required option that needs      * to be set either via this setter or via the {@link org.elasticsearch.search.suggest.SuggestionBuilder#text(String)} method.      *<p>      * The suggest text gets analyzed by the suggest analyzer or the suggest field search analyzer.      * For each analyzed token, suggested terms are suggested if possible.      */
DECL|method|setText
specifier|public
name|SuggestBuilder
name|setText
parameter_list|(
name|String
name|globalText
parameter_list|)
block|{
name|this
operator|.
name|globalText
operator|=
name|globalText
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds an {@link org.elasticsearch.search.suggest.term.TermSuggestionBuilder} instance under a user defined name.      * The order in which the<code>Suggestions</code> are added, is the same as in the response.      */
DECL|method|addSuggestion
specifier|public
name|SuggestBuilder
name|addSuggestion
parameter_list|(
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
name|suggestion
parameter_list|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns all suggestions with the defined names.      */
DECL|method|getSuggestion
specifier|public
name|List
argument_list|<
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSuggestion
parameter_list|()
block|{
return|return
name|suggestions
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|globalText
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
name|globalText
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|suggestions
control|)
block|{
name|builder
operator|=
name|suggestion
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

