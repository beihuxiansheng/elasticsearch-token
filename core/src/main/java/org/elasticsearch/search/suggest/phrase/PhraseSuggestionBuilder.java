begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.phrase
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|BytesRefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|CustomAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ShingleTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestionSearchContext
operator|.
name|SuggestionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestionContext
operator|.
name|DirectCandidateGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Defines the actual suggest command for phrase suggestions (<tt>phrase</tt>).  */
end_comment

begin_class
DECL|class|PhraseSuggestionBuilder
specifier|public
class|class
name|PhraseSuggestionBuilder
extends|extends
name|SuggestionBuilder
argument_list|<
name|PhraseSuggestionBuilder
argument_list|>
block|{
DECL|field|SUGGESTION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SUGGESTION_NAME
init|=
literal|"phrase"
decl_stmt|;
DECL|field|MAXERRORS_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|MAXERRORS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_errors"
argument_list|)
decl_stmt|;
DECL|field|RWE_LIKELIHOOD_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|RWE_LIKELIHOOD_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"real_word_error_likelihood"
argument_list|)
decl_stmt|;
DECL|field|SEPARATOR_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|SEPARATOR_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"separator"
argument_list|)
decl_stmt|;
DECL|field|CONFIDENCE_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|CONFIDENCE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"confidence"
argument_list|)
decl_stmt|;
DECL|field|GRAMSIZE_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|GRAMSIZE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"gram_size"
argument_list|)
decl_stmt|;
DECL|field|SMOOTHING_MODEL_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|SMOOTHING_MODEL_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"smoothing"
argument_list|)
decl_stmt|;
DECL|field|FORCE_UNIGRAM_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|FORCE_UNIGRAM_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"force_unigrams"
argument_list|)
decl_stmt|;
DECL|field|TOKEN_LIMIT_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|TOKEN_LIMIT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"token_limit"
argument_list|)
decl_stmt|;
DECL|field|HIGHLIGHT_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|HIGHLIGHT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"highlight"
argument_list|)
decl_stmt|;
DECL|field|PRE_TAG_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|PRE_TAG_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"pre_tag"
argument_list|)
decl_stmt|;
DECL|field|POST_TAG_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|POST_TAG_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"post_tag"
argument_list|)
decl_stmt|;
DECL|field|COLLATE_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|COLLATE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"collate"
argument_list|)
decl_stmt|;
DECL|field|COLLATE_QUERY_FIELD
specifier|protected
specifier|static
specifier|final
name|ParseField
name|COLLATE_QUERY_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
DECL|field|COLLATE_QUERY_PARAMS
specifier|protected
specifier|static
specifier|final
name|ParseField
name|COLLATE_QUERY_PARAMS
init|=
operator|new
name|ParseField
argument_list|(
literal|"params"
argument_list|)
decl_stmt|;
DECL|field|COLLATE_QUERY_PRUNE
specifier|protected
specifier|static
specifier|final
name|ParseField
name|COLLATE_QUERY_PRUNE
init|=
operator|new
name|ParseField
argument_list|(
literal|"prune"
argument_list|)
decl_stmt|;
DECL|field|maxErrors
specifier|private
name|float
name|maxErrors
init|=
name|PhraseSuggestionContext
operator|.
name|DEFAULT_MAX_ERRORS
decl_stmt|;
DECL|field|separator
specifier|private
name|String
name|separator
init|=
name|PhraseSuggestionContext
operator|.
name|DEFAULT_SEPARATOR
decl_stmt|;
DECL|field|realWordErrorLikelihood
specifier|private
name|float
name|realWordErrorLikelihood
init|=
name|PhraseSuggestionContext
operator|.
name|DEFAULT_RWE_ERRORLIKELIHOOD
decl_stmt|;
DECL|field|confidence
specifier|private
name|float
name|confidence
init|=
name|PhraseSuggestionContext
operator|.
name|DEFAULT_CONFIDENCE
decl_stmt|;
comment|// gramSize needs to be optional although there is a default, if unset parser try to detect and use shingle size
DECL|field|gramSize
specifier|private
name|Integer
name|gramSize
decl_stmt|;
DECL|field|forceUnigrams
specifier|private
name|boolean
name|forceUnigrams
init|=
name|PhraseSuggestionContext
operator|.
name|DEFAULT_REQUIRE_UNIGRAM
decl_stmt|;
DECL|field|tokenLimit
specifier|private
name|int
name|tokenLimit
init|=
name|NoisyChannelSpellChecker
operator|.
name|DEFAULT_TOKEN_LIMIT
decl_stmt|;
DECL|field|preTag
specifier|private
name|String
name|preTag
decl_stmt|;
DECL|field|postTag
specifier|private
name|String
name|postTag
decl_stmt|;
DECL|field|collateQuery
specifier|private
name|Script
name|collateQuery
decl_stmt|;
DECL|field|collateParams
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collateParams
decl_stmt|;
DECL|field|collatePrune
specifier|private
name|boolean
name|collatePrune
init|=
name|PhraseSuggestionContext
operator|.
name|DEFAULT_COLLATE_PRUNE
decl_stmt|;
DECL|field|model
specifier|private
name|SmoothingModel
name|model
decl_stmt|;
DECL|field|generators
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
argument_list|>
name|generators
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|PhraseSuggestionBuilder
specifier|public
name|PhraseSuggestionBuilder
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|/**      * internal copy constructor that copies over all class fields except for the field which is      * set to the one provided in the first argument      */
DECL|method|PhraseSuggestionBuilder
specifier|private
name|PhraseSuggestionBuilder
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|PhraseSuggestionBuilder
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|fieldname
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|maxErrors
operator|=
name|in
operator|.
name|maxErrors
expr_stmt|;
name|separator
operator|=
name|in
operator|.
name|separator
expr_stmt|;
name|realWordErrorLikelihood
operator|=
name|in
operator|.
name|realWordErrorLikelihood
expr_stmt|;
name|confidence
operator|=
name|in
operator|.
name|confidence
expr_stmt|;
name|gramSize
operator|=
name|in
operator|.
name|gramSize
expr_stmt|;
name|forceUnigrams
operator|=
name|in
operator|.
name|forceUnigrams
expr_stmt|;
name|tokenLimit
operator|=
name|in
operator|.
name|tokenLimit
expr_stmt|;
name|preTag
operator|=
name|in
operator|.
name|preTag
expr_stmt|;
name|postTag
operator|=
name|in
operator|.
name|postTag
expr_stmt|;
name|collateQuery
operator|=
name|in
operator|.
name|collateQuery
expr_stmt|;
name|collateParams
operator|=
name|in
operator|.
name|collateParams
expr_stmt|;
name|collatePrune
operator|=
name|in
operator|.
name|collatePrune
expr_stmt|;
name|model
operator|=
name|in
operator|.
name|model
expr_stmt|;
name|generators
operator|.
name|putAll
argument_list|(
name|in
operator|.
name|generators
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|PhraseSuggestionBuilder
specifier|public
name|PhraseSuggestionBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|maxErrors
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|realWordErrorLikelihood
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|confidence
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|gramSize
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|model
operator|=
name|in
operator|.
name|readOptionalNamedWriteable
argument_list|(
name|SmoothingModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|forceUnigrams
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|tokenLimit
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|preTag
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|postTag
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|separator
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|collateQuery
operator|=
operator|new
name|Script
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|collateParams
operator|=
name|in
operator|.
name|readMap
argument_list|()
expr_stmt|;
name|collatePrune
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
name|int
name|generatorsEntries
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|generatorsEntries
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|int
name|numberOfGenerators
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
name|generatorsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numberOfGenerators
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|g
init|=
literal|0
init|;
name|g
operator|<
name|numberOfGenerators
condition|;
name|g
operator|++
control|)
block|{
name|DirectCandidateGeneratorBuilder
name|generator
init|=
operator|new
name|DirectCandidateGeneratorBuilder
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|generatorsList
operator|.
name|add
argument_list|(
name|generator
argument_list|)
expr_stmt|;
block|}
name|generators
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|generatorsList
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|public
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeFloat
argument_list|(
name|maxErrors
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|realWordErrorLikelihood
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|confidence
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|gramSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalNamedWriteable
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|forceUnigrams
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|tokenLimit
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|preTag
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|postTag
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|collateQuery
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|collateQuery
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeMapWithConsistentOrder
argument_list|(
name|collateParams
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|collatePrune
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|generators
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
argument_list|>
name|entry
range|:
name|this
operator|.
name|generators
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
name|generatorsList
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|generatorsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CandidateGenerator
name|generator
range|:
name|generatorsList
control|)
block|{
name|generator
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Sets the gram size for the n-gram model used for this suggester. The      * default value is<tt>1</tt> corresponding to<tt>unigrams</tt>. Use      *<tt>2</tt> for<tt>bigrams</tt> and<tt>3</tt> for<tt>trigrams</tt>.      */
DECL|method|gramSize
specifier|public
name|PhraseSuggestionBuilder
name|gramSize
parameter_list|(
name|int
name|gramSize
parameter_list|)
block|{
if|if
condition|(
name|gramSize
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"gramSize must be>= 1"
argument_list|)
throw|;
block|}
name|this
operator|.
name|gramSize
operator|=
name|gramSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * get the {@link #gramSize(int)} parameter      */
DECL|method|gramSize
specifier|public
name|Integer
name|gramSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|gramSize
return|;
block|}
comment|/**      * Sets the maximum percentage of the terms that at most considered to be      * misspellings in order to form a correction. This method accepts a float      * value in the range [0..1) as a fraction of the actual query terms a      * number<tt>&gt;=1</tt> as an absolute number of query terms.      *      * The default is set to<tt>1.0</tt> which corresponds to that only      * corrections with at most 1 misspelled term are returned.      */
DECL|method|maxErrors
specifier|public
name|PhraseSuggestionBuilder
name|maxErrors
parameter_list|(
name|float
name|maxErrors
parameter_list|)
block|{
if|if
condition|(
name|maxErrors
operator|<=
literal|0.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"max_error must be> 0.0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxErrors
operator|=
name|maxErrors
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * get the maxErrors setting      */
DECL|method|maxErrors
specifier|public
name|Float
name|maxErrors
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxErrors
return|;
block|}
comment|/**      * Sets the separator that is used to separate terms in the bigram field. If      * not set the whitespace character is used as a separator.      */
DECL|method|separator
specifier|public
name|PhraseSuggestionBuilder
name|separator
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|separator
argument_list|,
literal|"separator cannot be set to null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * get the separator that is used to separate terms in the bigram field.      */
DECL|method|separator
specifier|public
name|String
name|separator
parameter_list|()
block|{
return|return
name|this
operator|.
name|separator
return|;
block|}
comment|/**      * Sets the likelihood of a term being a misspelled even if the term exists      * in the dictionary. The default it<tt>0.95</tt> corresponding to 5% or      * the real words are misspelled.      */
DECL|method|realWordErrorLikelihood
specifier|public
name|PhraseSuggestionBuilder
name|realWordErrorLikelihood
parameter_list|(
name|float
name|realWordErrorLikelihood
parameter_list|)
block|{
if|if
condition|(
name|realWordErrorLikelihood
operator|<=
literal|0.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"real_word_error_likelihood must be> 0.0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|realWordErrorLikelihood
operator|=
name|realWordErrorLikelihood
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * get the {@link #realWordErrorLikelihood(float)} parameter      */
DECL|method|realWordErrorLikelihood
specifier|public
name|Float
name|realWordErrorLikelihood
parameter_list|()
block|{
return|return
name|this
operator|.
name|realWordErrorLikelihood
return|;
block|}
comment|/**      * Sets the confidence level for this suggester. The confidence level      * defines a factor applied to the input phrases score which is used as a      * threshold for other suggest candidates. Only candidates that score higher      * than the threshold will be included in the result. For instance a      * confidence level of<tt>1.0</tt> will only return suggestions that score      * higher than the input phrase. If set to<tt>0.0</tt> the top N candidates      * are returned. The default is<tt>1.0</tt>      */
DECL|method|confidence
specifier|public
name|PhraseSuggestionBuilder
name|confidence
parameter_list|(
name|float
name|confidence
parameter_list|)
block|{
if|if
condition|(
name|confidence
operator|<
literal|0.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"confidence must be>= 0.0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|confidence
operator|=
name|confidence
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * get the {@link #confidence()} parameter      */
DECL|method|confidence
specifier|public
name|Float
name|confidence
parameter_list|()
block|{
return|return
name|this
operator|.
name|confidence
return|;
block|}
comment|/**      * Adds a {@link CandidateGenerator} to this suggester. The      * {@link CandidateGenerator} is used to draw candidates for each individual      * phrase term before the candidates are scored.      */
DECL|method|addCandidateGenerator
specifier|public
name|PhraseSuggestionBuilder
name|addCandidateGenerator
parameter_list|(
name|CandidateGenerator
name|generator
parameter_list|)
block|{
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
name|list
init|=
name|this
operator|.
name|generators
operator|.
name|get
argument_list|(
name|generator
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|generators
operator|.
name|put
argument_list|(
name|generator
operator|.
name|getType
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|generator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Clear the candidate generators.      */
DECL|method|clearCandidateGenerators
specifier|public
name|PhraseSuggestionBuilder
name|clearCandidateGenerators
parameter_list|()
block|{
name|this
operator|.
name|generators
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If set to<code>true</code> the phrase suggester will fail if the analyzer only      * produces ngrams. the default it<code>true</code>.      */
DECL|method|forceUnigrams
specifier|public
name|PhraseSuggestionBuilder
name|forceUnigrams
parameter_list|(
name|boolean
name|forceUnigrams
parameter_list|)
block|{
name|this
operator|.
name|forceUnigrams
operator|=
name|forceUnigrams
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * get the setting for {@link #forceUnigrams()}      */
DECL|method|forceUnigrams
specifier|public
name|Boolean
name|forceUnigrams
parameter_list|()
block|{
return|return
name|this
operator|.
name|forceUnigrams
return|;
block|}
comment|/**      * Sets an explicit smoothing model used for this suggester. The default is      * {@link StupidBackoff}.      */
DECL|method|smoothingModel
specifier|public
name|PhraseSuggestionBuilder
name|smoothingModel
parameter_list|(
name|SmoothingModel
name|model
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the {@link SmoothingModel}      */
DECL|method|smoothingModel
specifier|public
name|SmoothingModel
name|smoothingModel
parameter_list|()
block|{
return|return
name|this
operator|.
name|model
return|;
block|}
DECL|method|tokenLimit
specifier|public
name|PhraseSuggestionBuilder
name|tokenLimit
parameter_list|(
name|int
name|tokenLimit
parameter_list|)
block|{
if|if
condition|(
name|tokenLimit
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"token_limit must be>= 1"
argument_list|)
throw|;
block|}
name|this
operator|.
name|tokenLimit
operator|=
name|tokenLimit
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * get the {@link #tokenLimit(int)} parameter      */
DECL|method|tokenLimit
specifier|public
name|Integer
name|tokenLimit
parameter_list|()
block|{
return|return
name|this
operator|.
name|tokenLimit
return|;
block|}
comment|/**      * Setup highlighting for suggestions.  If this is called a highlight field      * is returned with suggestions wrapping changed tokens with preTag and postTag.      */
DECL|method|highlight
specifier|public
name|PhraseSuggestionBuilder
name|highlight
parameter_list|(
name|String
name|preTag
parameter_list|,
name|String
name|postTag
parameter_list|)
block|{
if|if
condition|(
operator|(
name|preTag
operator|==
literal|null
operator|)
operator|!=
operator|(
name|postTag
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Pre and post tag must both be null or both not be null."
argument_list|)
throw|;
block|}
name|this
operator|.
name|preTag
operator|=
name|preTag
expr_stmt|;
name|this
operator|.
name|postTag
operator|=
name|postTag
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * get the pre-tag for the highlighter set with {@link #highlight(String, String)}      */
DECL|method|preTag
specifier|public
name|String
name|preTag
parameter_list|()
block|{
return|return
name|this
operator|.
name|preTag
return|;
block|}
comment|/**      * get the post-tag for the highlighter set with {@link #highlight(String, String)}      */
DECL|method|postTag
specifier|public
name|String
name|postTag
parameter_list|()
block|{
return|return
name|this
operator|.
name|postTag
return|;
block|}
comment|/**      * Sets a query used for filtering out suggested phrases (collation).      */
DECL|method|collateQuery
specifier|public
name|PhraseSuggestionBuilder
name|collateQuery
parameter_list|(
name|String
name|collateQuery
parameter_list|)
block|{
name|this
operator|.
name|collateQuery
operator|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|"mustache"
argument_list|,
name|collateQuery
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a query used for filtering out suggested phrases (collation).      */
DECL|method|collateQuery
specifier|public
name|PhraseSuggestionBuilder
name|collateQuery
parameter_list|(
name|Script
name|collateQueryTemplate
parameter_list|)
block|{
name|this
operator|.
name|collateQuery
operator|=
name|collateQueryTemplate
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * gets the query used for filtering out suggested phrases (collation).      */
DECL|method|collateQuery
specifier|public
name|Script
name|collateQuery
parameter_list|()
block|{
return|return
name|this
operator|.
name|collateQuery
return|;
block|}
comment|/**      * Adds additional parameters for collate scripts. Previously added parameters on the      * same builder will be overwritten.      */
DECL|method|collateParams
specifier|public
name|PhraseSuggestionBuilder
name|collateParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collateParams
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|collateParams
argument_list|,
literal|"collate parameters cannot be null."
argument_list|)
expr_stmt|;
name|this
operator|.
name|collateParams
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|collateParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * gets additional params for collate script      */
DECL|method|collateParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collateParams
parameter_list|()
block|{
return|return
name|this
operator|.
name|collateParams
return|;
block|}
comment|/**      * Sets whether to prune suggestions after collation      */
DECL|method|collatePrune
specifier|public
name|PhraseSuggestionBuilder
name|collatePrune
parameter_list|(
name|boolean
name|collatePrune
parameter_list|)
block|{
name|this
operator|.
name|collatePrune
operator|=
name|collatePrune
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets whether to prune suggestions after collation      */
DECL|method|collatePrune
specifier|public
name|Boolean
name|collatePrune
parameter_list|()
block|{
return|return
name|this
operator|.
name|collatePrune
return|;
block|}
annotation|@
name|Override
DECL|method|innerToXContent
specifier|public
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|RWE_LIKELIHOOD_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|realWordErrorLikelihood
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|CONFIDENCE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|confidence
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SEPARATOR_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|separator
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MAXERRORS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxErrors
argument_list|)
expr_stmt|;
if|if
condition|(
name|gramSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|GRAMSIZE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|gramSize
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|FORCE_UNIGRAM_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|forceUnigrams
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|TOKEN_LIMIT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|tokenLimit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|generators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
argument_list|>
argument_list|>
name|entrySet
init|=
name|generators
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
argument_list|>
name|entry
range|:
name|entrySet
control|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CandidateGenerator
name|generator
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|generator
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|SMOOTHING_MODEL_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|preTag
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|HIGHLIGHT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|PRE_TAG_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|preTag
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|POST_TAG_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|postTag
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|collateQuery
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|COLLATE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|COLLATE_QUERY_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|collateQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|collateParams
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|COLLATE_QUERY_PARAMS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|collateParams
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|COLLATE_QUERY_PRUNE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|collatePrune
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|PhraseSuggestionBuilder
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|PhraseSuggestionBuilder
name|tmpSuggestion
init|=
operator|new
name|PhraseSuggestionBuilder
argument_list|(
literal|"_na_"
argument_list|)
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|String
name|fieldname
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|SuggestionBuilder
operator|.
name|ANALYZER_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tmpSuggestion
operator|.
name|analyzer
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SuggestionBuilder
operator|.
name|FIELDNAME_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|fieldname
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SuggestionBuilder
operator|.
name|SIZE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tmpSuggestion
operator|.
name|size
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SuggestionBuilder
operator|.
name|SHARDSIZE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tmpSuggestion
operator|.
name|shardSize
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|RWE_LIKELIHOOD_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tmpSuggestion
operator|.
name|realWordErrorLikelihood
argument_list|(
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|CONFIDENCE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tmpSuggestion
operator|.
name|confidence
argument_list|(
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|SEPARATOR_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tmpSuggestion
operator|.
name|separator
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|MAXERRORS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tmpSuggestion
operator|.
name|maxErrors
argument_list|(
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|GRAMSIZE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tmpSuggestion
operator|.
name|gramSize
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|FORCE_UNIGRAM_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tmpSuggestion
operator|.
name|forceUnigrams
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|TOKEN_LIMIT_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tmpSuggestion
operator|.
name|tokenLimit
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"suggester[phrase] doesn't support field ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|DirectCandidateGeneratorBuilder
operator|.
name|DIRECT_GENERATOR_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
comment|// for now we only have a single type of generators
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|==
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|tmpSuggestion
operator|.
name|addCandidateGenerator
argument_list|(
name|DirectCandidateGeneratorBuilder
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"suggester[phrase]  doesn't support array field ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|SMOOTHING_MODEL_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|ensureNoSmoothing
argument_list|(
name|tmpSuggestion
argument_list|)
expr_stmt|;
name|tmpSuggestion
operator|.
name|smoothingModel
argument_list|(
name|SmoothingModel
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|HIGHLIGHT_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|String
name|preTag
init|=
literal|null
decl_stmt|;
name|String
name|postTag
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|PRE_TAG_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|preTag
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|POST_TAG_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|postTag
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"suggester[phrase][highlight] doesn't support field ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
name|tmpSuggestion
operator|.
name|highlight
argument_list|(
name|preTag
argument_list|,
name|postTag
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|COLLATE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|COLLATE_QUERY_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|tmpSuggestion
operator|.
name|collateQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"suggester[phrase][collate] query already set, doesn't support additional ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Script
name|template
init|=
name|Script
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|Script
operator|.
name|DEFAULT_TEMPLATE_LANG
argument_list|)
decl_stmt|;
name|tmpSuggestion
operator|.
name|collateQuery
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|COLLATE_QUERY_PARAMS
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tmpSuggestion
operator|.
name|collateParams
argument_list|(
name|parser
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PhraseSuggestionBuilder
operator|.
name|COLLATE_QUERY_PRUNE
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|isBooleanValue
argument_list|()
condition|)
block|{
name|tmpSuggestion
operator|.
name|collatePrune
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"suggester[phrase][collate] prune must be either 'true' or 'false'"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"suggester[phrase][collate] doesn't support field ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"suggester[phrase]  doesn't support array field ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"suggester[phrase] doesn't support field ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|// now we should have field name, check and copy fields over to the suggestion builder we return
if|if
condition|(
name|fieldname
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"the required field option ["
operator|+
name|FIELDNAME_FIELD
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] is missing"
argument_list|)
throw|;
block|}
return|return
operator|new
name|PhraseSuggestionBuilder
argument_list|(
name|fieldname
argument_list|,
name|tmpSuggestion
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|SuggestionContext
name|build
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|PhraseSuggestionContext
name|suggestionContext
init|=
operator|new
name|PhraseSuggestionContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|context
operator|.
name|getMapperService
argument_list|()
decl_stmt|;
comment|// copy over common settings to each suggestion builder
name|populateCommonFields
argument_list|(
name|mapperService
argument_list|,
name|suggestionContext
argument_list|)
expr_stmt|;
name|suggestionContext
operator|.
name|setSeparator
argument_list|(
name|BytesRefs
operator|.
name|toBytesRef
argument_list|(
name|this
operator|.
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|suggestionContext
operator|.
name|setRealWordErrorLikelihood
argument_list|(
name|this
operator|.
name|realWordErrorLikelihood
argument_list|)
expr_stmt|;
name|suggestionContext
operator|.
name|setConfidence
argument_list|(
name|this
operator|.
name|confidence
argument_list|)
expr_stmt|;
name|suggestionContext
operator|.
name|setMaxErrors
argument_list|(
name|this
operator|.
name|maxErrors
argument_list|)
expr_stmt|;
name|suggestionContext
operator|.
name|setSeparator
argument_list|(
name|BytesRefs
operator|.
name|toBytesRef
argument_list|(
name|this
operator|.
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|suggestionContext
operator|.
name|setRequireUnigram
argument_list|(
name|this
operator|.
name|forceUnigrams
argument_list|)
expr_stmt|;
name|suggestionContext
operator|.
name|setTokenLimit
argument_list|(
name|this
operator|.
name|tokenLimit
argument_list|)
expr_stmt|;
name|suggestionContext
operator|.
name|setPreTag
argument_list|(
name|BytesRefs
operator|.
name|toBytesRef
argument_list|(
name|this
operator|.
name|preTag
argument_list|)
argument_list|)
expr_stmt|;
name|suggestionContext
operator|.
name|setPostTag
argument_list|(
name|BytesRefs
operator|.
name|toBytesRef
argument_list|(
name|this
operator|.
name|postTag
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|gramSize
operator|!=
literal|null
condition|)
block|{
name|suggestionContext
operator|.
name|setGramSize
argument_list|(
name|this
operator|.
name|gramSize
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
name|candidateGenerators
range|:
name|this
operator|.
name|generators
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|CandidateGenerator
name|candidateGenerator
range|:
name|candidateGenerators
control|)
block|{
name|suggestionContext
operator|.
name|addGenerator
argument_list|(
name|candidateGenerator
operator|.
name|build
argument_list|(
name|mapperService
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|model
operator|!=
literal|null
condition|)
block|{
name|suggestionContext
operator|.
name|setModel
argument_list|(
name|this
operator|.
name|model
operator|.
name|buildWordScorerFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|collateQuery
operator|!=
literal|null
condition|)
block|{
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|ExecutableScript
argument_list|>
name|compiledScript
init|=
name|context
operator|.
name|getLazyExecutableScript
argument_list|(
name|this
operator|.
name|collateQuery
argument_list|,
name|ScriptContext
operator|.
name|Standard
operator|.
name|SEARCH
argument_list|)
decl_stmt|;
name|suggestionContext
operator|.
name|setCollateQueryScript
argument_list|(
name|compiledScript
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|collateParams
operator|!=
literal|null
condition|)
block|{
name|suggestionContext
operator|.
name|setCollateScriptParams
argument_list|(
name|this
operator|.
name|collateParams
argument_list|)
expr_stmt|;
block|}
name|suggestionContext
operator|.
name|setCollatePrune
argument_list|(
name|this
operator|.
name|collatePrune
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|gramSize
operator|==
literal|null
operator|||
name|suggestionContext
operator|.
name|generators
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|ShingleTokenFilterFactory
operator|.
name|Factory
name|shingleFilterFactory
init|=
name|getShingleFilterFactory
argument_list|(
name|suggestionContext
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|gramSize
operator|==
literal|null
condition|)
block|{
comment|// try to detect the shingle size
if|if
condition|(
name|shingleFilterFactory
operator|!=
literal|null
condition|)
block|{
name|suggestionContext
operator|.
name|setGramSize
argument_list|(
name|shingleFilterFactory
operator|.
name|getMaxShingleSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestionContext
operator|.
name|getAnalyzer
argument_list|()
operator|==
literal|null
operator|&&
name|shingleFilterFactory
operator|.
name|getMinShingleSize
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|shingleFilterFactory
operator|.
name|getOutputUnigrams
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The default analyzer for field: ["
operator|+
name|suggestionContext
operator|.
name|getField
argument_list|()
operator|+
literal|"] doesn't emit unigrams. If this is intentional try to set the analyzer explicitly"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|suggestionContext
operator|.
name|generators
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|shingleFilterFactory
operator|!=
literal|null
operator|&&
name|shingleFilterFactory
operator|.
name|getMinShingleSize
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|shingleFilterFactory
operator|.
name|getOutputUnigrams
argument_list|()
operator|&&
name|suggestionContext
operator|.
name|getRequireUnigram
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The default candidate generator for phrase suggest can't operate on field: ["
operator|+
name|suggestionContext
operator|.
name|getField
argument_list|()
operator|+
literal|"] since it doesn't emit unigrams. "
operator|+
literal|"If this is intentional try to set the candidate generator field explicitly"
argument_list|)
throw|;
block|}
comment|// use a default generator on the same field
name|DirectCandidateGenerator
name|generator
init|=
operator|new
name|DirectCandidateGenerator
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setField
argument_list|(
name|suggestionContext
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|suggestionContext
operator|.
name|addGenerator
argument_list|(
name|generator
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|suggestionContext
return|;
block|}
DECL|method|getShingleFilterFactory
specifier|private
specifier|static
name|ShingleTokenFilterFactory
operator|.
name|Factory
name|getShingleFilterFactory
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
if|if
condition|(
name|analyzer
operator|instanceof
name|NamedAnalyzer
condition|)
block|{
name|analyzer
operator|=
operator|(
operator|(
name|NamedAnalyzer
operator|)
name|analyzer
operator|)
operator|.
name|analyzer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|analyzer
operator|instanceof
name|CustomAnalyzer
condition|)
block|{
specifier|final
name|CustomAnalyzer
name|a
init|=
operator|(
name|CustomAnalyzer
operator|)
name|analyzer
decl_stmt|;
specifier|final
name|TokenFilterFactory
index|[]
name|tokenFilters
init|=
name|a
operator|.
name|tokenFilters
argument_list|()
decl_stmt|;
for|for
control|(
name|TokenFilterFactory
name|tokenFilterFactory
range|:
name|tokenFilters
control|)
block|{
if|if
condition|(
name|tokenFilterFactory
operator|instanceof
name|ShingleTokenFilterFactory
condition|)
block|{
return|return
operator|(
operator|(
name|ShingleTokenFilterFactory
operator|)
name|tokenFilterFactory
operator|)
operator|.
name|getInnerFactory
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|tokenFilterFactory
operator|instanceof
name|ShingleTokenFilterFactory
operator|.
name|Factory
condition|)
block|{
return|return
operator|(
name|ShingleTokenFilterFactory
operator|.
name|Factory
operator|)
name|tokenFilterFactory
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|ensureNoSmoothing
specifier|private
specifier|static
name|void
name|ensureNoSmoothing
parameter_list|(
name|PhraseSuggestionBuilder
name|suggestion
parameter_list|)
block|{
if|if
condition|(
name|suggestion
operator|.
name|smoothingModel
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"only one smoothing model supported"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|SUGGESTION_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|PhraseSuggestionBuilder
name|other
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|maxErrors
argument_list|,
name|other
operator|.
name|maxErrors
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|separator
argument_list|,
name|other
operator|.
name|separator
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|realWordErrorLikelihood
argument_list|,
name|other
operator|.
name|realWordErrorLikelihood
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|confidence
argument_list|,
name|other
operator|.
name|confidence
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|generators
argument_list|,
name|other
operator|.
name|generators
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|gramSize
argument_list|,
name|other
operator|.
name|gramSize
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|model
argument_list|,
name|other
operator|.
name|model
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|forceUnigrams
argument_list|,
name|other
operator|.
name|forceUnigrams
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|tokenLimit
argument_list|,
name|other
operator|.
name|tokenLimit
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|preTag
argument_list|,
name|other
operator|.
name|preTag
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|postTag
argument_list|,
name|other
operator|.
name|postTag
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|collateQuery
argument_list|,
name|other
operator|.
name|collateQuery
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|collateParams
argument_list|,
name|other
operator|.
name|collateParams
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|collatePrune
argument_list|,
name|other
operator|.
name|collatePrune
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|maxErrors
argument_list|,
name|separator
argument_list|,
name|realWordErrorLikelihood
argument_list|,
name|confidence
argument_list|,
name|generators
argument_list|,
name|gramSize
argument_list|,
name|model
argument_list|,
name|forceUnigrams
argument_list|,
name|tokenLimit
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|,
name|collateQuery
argument_list|,
name|collateParams
argument_list|,
name|collatePrune
argument_list|)
return|;
block|}
comment|/**      * {@link CandidateGenerator} interface.      */
DECL|interface|CandidateGenerator
specifier|public
interface|interface
name|CandidateGenerator
extends|extends
name|Writeable
extends|,
name|ToXContent
block|{
DECL|method|getType
name|String
name|getType
parameter_list|()
function_decl|;
DECL|method|build
name|PhraseSuggestionContext
operator|.
name|DirectCandidateGenerator
name|build
parameter_list|(
name|MapperService
name|mapperService
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class

end_unit

