begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|search
operator|.
name|RestSearchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
operator|.
name|TermSuggestion
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
operator|.
name|constructorArg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
operator|.
name|optionalConstructorArg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|ensureExpectedToken
import|;
end_import

begin_comment
comment|/**  * Top level suggest result, containing the result for each suggestion.  */
end_comment

begin_class
DECL|class|Suggest
specifier|public
class|class
name|Suggest
implements|implements
name|Iterable
argument_list|<
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
argument_list|>
implements|,
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|NAME
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"suggest"
decl_stmt|;
DECL|field|COMPARATOR
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Option
argument_list|>
name|COMPARATOR
init|=
parameter_list|(
name|first
parameter_list|,
name|second
parameter_list|)
lambda|->
block|{
name|int
name|cmp
init|=
name|Float
operator|.
name|compare
argument_list|(
name|second
operator|.
name|getScore
argument_list|()
argument_list|,
name|first
operator|.
name|getScore
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
return|return
name|first
operator|.
name|getText
argument_list|()
operator|.
name|compareTo
argument_list|(
name|second
operator|.
name|getText
argument_list|()
argument_list|)
return|;
block|}
decl_stmt|;
DECL|field|suggestions
specifier|private
name|List
argument_list|<
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
argument_list|>
name|suggestions
decl_stmt|;
DECL|field|hasScoreDocs
specifier|private
name|boolean
name|hasScoreDocs
decl_stmt|;
DECL|field|suggestMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
argument_list|>
name|suggestMap
decl_stmt|;
DECL|method|Suggest
specifier|private
name|Suggest
parameter_list|()
block|{
name|this
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Suggest
specifier|public
name|Suggest
parameter_list|(
name|List
argument_list|<
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
argument_list|>
name|suggestions
parameter_list|)
block|{
comment|// we sort suggestions by their names to ensure iteration over suggestions are consistent
comment|// this is needed as we need to fill in suggestion docs in SearchPhaseController#sortDocs
comment|// in the same order as we enrich the suggestions with fetch results in SearchPhaseController#merge
name|suggestions
operator|.
name|sort
argument_list|(
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|suggestions
operator|=
name|suggestions
expr_stmt|;
name|this
operator|.
name|hasScoreDocs
operator|=
name|filter
argument_list|(
name|CompletionSuggestion
operator|.
name|class
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|CompletionSuggestion
operator|::
name|hasScoreDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|suggestions
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * The number of suggestions in this {@link Suggest} result      */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|suggestions
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getSuggestion
specifier|public
parameter_list|<
name|T
extends|extends
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
parameter_list|>
name|T
name|getSuggestion
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|suggestions
operator|.
name|isEmpty
argument_list|()
operator|||
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|suggestions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
call|(
name|T
call|)
argument_list|(
name|name
operator|.
name|equals
argument_list|(
name|suggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
condition|?
name|suggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|suggestMap
operator|==
literal|null
condition|)
block|{
name|suggestMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
name|item
range|:
name|suggestions
control|)
block|{
name|suggestMap
operator|.
name|put
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|T
operator|)
name|suggestMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Whether any suggestions had query hits      */
DECL|method|hasScoreDocs
specifier|public
name|boolean
name|hasScoreDocs
parameter_list|()
block|{
return|return
name|hasScoreDocs
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|suggestions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
comment|// TODO: remove these complicated generics
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
name|suggestion
decl_stmt|;
specifier|final
name|int
name|type
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|TermSuggestion
operator|.
name|TYPE
case|:
name|suggestion
operator|=
operator|new
name|TermSuggestion
argument_list|()
expr_stmt|;
break|break;
case|case
name|CompletionSuggestion
operator|.
name|TYPE
case|:
name|suggestion
operator|=
operator|new
name|CompletionSuggestion
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// CompletionSuggestion.TYPE
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Completion suggester 2.x is not supported anymore"
argument_list|)
throw|;
case|case
name|PhraseSuggestion
operator|.
name|TYPE
case|:
name|suggestion
operator|=
operator|new
name|PhraseSuggestion
argument_list|()
expr_stmt|;
break|break;
default|default:
name|suggestion
operator|=
operator|new
name|Suggestion
argument_list|()
expr_stmt|;
break|break;
block|}
name|suggestion
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
name|hasScoreDocs
operator|=
name|filter
argument_list|(
name|CompletionSuggestion
operator|.
name|class
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|CompletionSuggestion
operator|::
name|hasScoreDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|suggestions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Suggestion
argument_list|<
name|?
argument_list|>
name|command
range|:
name|suggestions
control|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|command
operator|.
name|getWriteableType
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
for|for
control|(
name|Suggestion
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|suggestions
control|)
block|{
name|suggestion
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * this parsing method assumes that the leading "suggest" field name has already been parsed by the caller      */
DECL|method|fromXContent
specifier|public
specifier|static
name|Suggest
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
name|Suggestion
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Suggest
argument_list|(
name|suggestions
argument_list|)
return|;
block|}
DECL|method|readSuggest
specifier|public
specifier|static
name|Suggest
name|readSuggest
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Suggest
name|result
init|=
operator|new
name|Suggest
argument_list|()
decl_stmt|;
name|result
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|reduce
specifier|public
specifier|static
name|List
argument_list|<
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
argument_list|>
name|reduce
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Suggest
operator|.
name|Suggestion
argument_list|>
argument_list|>
name|groupedSuggestions
parameter_list|)
block|{
name|List
argument_list|<
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
argument_list|>
name|reduced
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|groupedSuggestions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Suggestion
argument_list|>
argument_list|>
name|unmergedResults
range|:
name|groupedSuggestions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Suggestion
argument_list|>
name|value
init|=
name|unmergedResults
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Suggestion
argument_list|>
name|suggestionClass
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Suggestion
name|suggestion
range|:
name|value
control|)
block|{
if|if
condition|(
name|suggestionClass
operator|==
literal|null
condition|)
block|{
name|suggestionClass
operator|=
name|suggestion
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suggestionClass
operator|!=
name|suggestion
operator|.
name|getClass
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"detected mixed suggestion results, due to querying on old and new completion suggester,"
operator|+
literal|" query on a single completion suggester version"
argument_list|)
throw|;
block|}
block|}
name|Suggestion
name|reduce
init|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reduce
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|reduce
operator|.
name|trim
argument_list|()
expr_stmt|;
name|reduced
operator|.
name|add
argument_list|(
name|reduce
argument_list|)
expr_stmt|;
block|}
return|return
name|reduced
return|;
block|}
comment|/**      * @return only suggestions of type<code>suggestionType</code> contained in this {@link Suggest} instance      */
DECL|method|filter
specifier|public
parameter_list|<
name|T
extends|extends
name|Suggestion
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|filter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|suggestionType
parameter_list|)
block|{
return|return
name|suggestions
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|suggestion
lambda|->
name|suggestion
operator|.
name|getClass
argument_list|()
operator|==
name|suggestionType
argument_list|)
operator|.
name|map
argument_list|(
name|suggestion
lambda|->
operator|(
name|T
operator|)
name|suggestion
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * The suggestion responses corresponding with the suggestions in the request.      */
DECL|class|Suggestion
specifier|public
specifier|static
class|class
name|Suggestion
parameter_list|<
name|T
extends|extends
name|Suggestion
operator|.
name|Entry
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|T
argument_list|>
implements|,
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"suggestion"
decl_stmt|;
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|int
name|TYPE
init|=
literal|0
decl_stmt|;
DECL|field|name
specifier|protected
name|String
name|name
decl_stmt|;
DECL|field|size
specifier|protected
name|int
name|size
decl_stmt|;
DECL|field|entries
specifier|protected
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
DECL|method|Suggestion
specifier|protected
name|Suggestion
parameter_list|()
block|{         }
DECL|method|Suggestion
specifier|public
name|Suggestion
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
comment|// The suggested term size specified in request, only used for merging shard responses
block|}
DECL|method|addTerm
specifier|public
name|void
name|addTerm
parameter_list|(
name|T
name|entry
parameter_list|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**          * Returns a integer representing the type of the suggestion. This is used for          * internal serialization over the network.          */
DECL|method|getWriteableType
specifier|public
name|int
name|getWriteableType
parameter_list|()
block|{
comment|// TODO remove this in favor of NamedWriteable
return|return
name|TYPE
return|;
block|}
comment|/**          * Returns a string representing the type of the suggestion. This type is added to          * the suggestion name in the XContent response, so that it can later be used by          * REST clients to determine the internal type of the suggestion.          */
DECL|method|getType
specifier|protected
name|String
name|getType
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|entries
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**          * @return The entries for this suggestion.          */
DECL|method|getEntries
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
comment|/**          * @return The name of the suggestion as is defined in the request.          */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**          * @return The number of requested suggestion option size          */
DECL|method|getSize
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**          * Merges the result of another suggestion into this suggestion.          * For internal usage.          */
DECL|method|reduce
specifier|public
name|Suggestion
argument_list|<
name|T
argument_list|>
name|reduce
parameter_list|(
name|List
argument_list|<
name|Suggestion
argument_list|<
name|T
argument_list|>
argument_list|>
name|toReduce
parameter_list|)
block|{
if|if
condition|(
name|toReduce
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|toReduce
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toReduce
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Suggestion
argument_list|<
name|T
argument_list|>
name|leader
init|=
name|toReduce
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|entries
init|=
name|leader
operator|.
name|entries
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|entries
operator|.
name|size
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|Option
argument_list|>
name|sortComparator
init|=
name|sortComparator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|currentEntries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|Suggestion
argument_list|<
name|T
argument_list|>
name|suggestion
range|:
name|toReduce
control|)
block|{
if|if
condition|(
name|suggestion
operator|.
name|entries
operator|.
name|size
argument_list|()
operator|!=
name|size
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't merge suggest result, this might be caused by suggest calls "
operator|+
literal|"across multiple indices with different analysis chains. Suggest entries have different sizes actual ["
operator|+
name|suggestion
operator|.
name|entries
operator|.
name|size
argument_list|()
operator|+
literal|"] expected ["
operator|+
name|size
operator|+
literal|"]"
argument_list|)
throw|;
block|}
assert|assert
name|suggestion
operator|.
name|name
operator|.
name|equals
argument_list|(
name|leader
operator|.
name|name
argument_list|)
assert|;
name|currentEntries
operator|.
name|add
argument_list|(
name|suggestion
operator|.
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|T
name|entry
init|=
operator|(
name|T
operator|)
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|reduce
argument_list|(
name|currentEntries
argument_list|)
decl_stmt|;
name|entry
operator|.
name|sort
argument_list|(
name|sortComparator
argument_list|)
expr_stmt|;
name|entries
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|currentEntries
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|leader
return|;
block|}
DECL|method|sortComparator
specifier|protected
name|Comparator
argument_list|<
name|Option
argument_list|>
name|sortComparator
parameter_list|()
block|{
return|return
name|COMPARATOR
return|;
block|}
comment|/**          * Trims the number of options per suggest text term to the requested size.          * For internal usage.          */
DECL|method|trim
specifier|public
name|void
name|trim
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|entry
operator|.
name|trim
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|innerReadFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|entries
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|T
name|newEntry
init|=
name|newEntry
argument_list|()
decl_stmt|;
name|newEntry
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newEntry
specifier|protected
name|T
name|newEntry
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
operator|new
name|Entry
argument_list|()
return|;
block|}
DECL|method|innerReadFrom
specifier|protected
name|void
name|innerReadFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|innerWriteTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|entry
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|innerWriteTo
specifier|public
name|void
name|innerWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|params
operator|.
name|paramAsBoolean
argument_list|(
name|RestSearchAction
operator|.
name|TYPED_KEYS_PARAM
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// Concatenates the type and the name of the suggestion (ex: completion#foo)
name|builder
operator|.
name|startArray
argument_list|(
name|String
operator|.
name|join
argument_list|(
name|InternalAggregation
operator|.
name|TYPED_KEYS_DELIMITER
argument_list|,
name|getType
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|entry
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fromXContent
specifier|public
specifier|static
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|String
name|typeAndName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
comment|// we need to extract the type prefix from the name and throw error if it is not present
name|int
name|delimiterPos
init|=
name|typeAndName
operator|.
name|indexOf
argument_list|(
name|InternalAggregation
operator|.
name|TYPED_KEYS_DELIMITER
argument_list|)
decl_stmt|;
name|String
name|type
decl_stmt|;
name|String
name|name
decl_stmt|;
if|if
condition|(
name|delimiterPos
operator|>
literal|0
condition|)
block|{
name|type
operator|=
name|typeAndName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|delimiterPos
argument_list|)
expr_stmt|;
name|name
operator|=
name|typeAndName
operator|.
name|substring
argument_list|(
name|delimiterPos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Cannot parse suggestion response without type information. Set ["
operator|+
name|RestSearchAction
operator|.
name|TYPED_KEYS_PARAM
operator|+
literal|"] parameter on the request to ensure the type information is added to the response output"
argument_list|)
throw|;
block|}
return|return
name|parser
operator|.
name|namedObject
argument_list|(
name|Suggestion
operator|.
name|class
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|parseEntries
specifier|protected
specifier|static
parameter_list|<
name|E
extends|extends
name|Suggestion
operator|.
name|Entry
argument_list|<
name|?
argument_list|>
parameter_list|>
name|void
name|parseEntries
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|Suggestion
argument_list|<
name|E
argument_list|>
name|suggestion
parameter_list|,
name|CheckedFunction
argument_list|<
name|XContentParser
argument_list|,
name|E
argument_list|,
name|IOException
argument_list|>
name|entryParser
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|suggestion
operator|.
name|addTerm
argument_list|(
name|entryParser
operator|.
name|apply
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Represents a part from the suggest text with suggested options.          */
DECL|class|Entry
specifier|public
specifier|static
class|class
name|Entry
parameter_list|<
name|O
extends|extends
name|Entry
operator|.
name|Option
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|O
argument_list|>
implements|,
name|Streamable
implements|,
name|ToXContentObject
block|{
DECL|field|TEXT
specifier|private
specifier|static
specifier|final
name|String
name|TEXT
init|=
literal|"text"
decl_stmt|;
DECL|field|OFFSET
specifier|private
specifier|static
specifier|final
name|String
name|OFFSET
init|=
literal|"offset"
decl_stmt|;
DECL|field|LENGTH
specifier|private
specifier|static
specifier|final
name|String
name|LENGTH
init|=
literal|"length"
decl_stmt|;
DECL|field|OPTIONS
specifier|protected
specifier|static
specifier|final
name|String
name|OPTIONS
init|=
literal|"options"
decl_stmt|;
DECL|field|text
specifier|protected
name|Text
name|text
decl_stmt|;
DECL|field|offset
specifier|protected
name|int
name|offset
decl_stmt|;
DECL|field|length
specifier|protected
name|int
name|length
decl_stmt|;
DECL|field|options
specifier|protected
name|List
argument_list|<
name|O
argument_list|>
name|options
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
DECL|method|Entry
specifier|public
name|Entry
parameter_list|(
name|Text
name|text
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
DECL|method|Entry
specifier|protected
name|Entry
parameter_list|()
block|{             }
DECL|method|addOption
specifier|public
name|void
name|addOption
parameter_list|(
name|O
name|option
parameter_list|)
block|{
name|options
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
DECL|method|addOptions
specifier|protected
name|void
name|addOptions
parameter_list|(
name|List
argument_list|<
name|O
argument_list|>
name|options
parameter_list|)
block|{
for|for
control|(
name|O
name|option
range|:
name|options
control|)
block|{
name|addOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sort
specifier|protected
name|void
name|sort
parameter_list|(
name|Comparator
argument_list|<
name|O
argument_list|>
name|comparator
parameter_list|)
block|{
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|options
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
DECL|method|reduce
specifier|protected
parameter_list|<
name|T
extends|extends
name|Entry
argument_list|<
name|O
argument_list|>
parameter_list|>
name|Entry
argument_list|<
name|O
argument_list|>
name|reduce
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|toReduce
parameter_list|)
block|{
if|if
condition|(
name|toReduce
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|toReduce
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|final
name|Map
argument_list|<
name|O
argument_list|,
name|O
argument_list|>
name|entries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|O
argument_list|>
name|leader
init|=
name|toReduce
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|O
argument_list|>
name|entry
range|:
name|toReduce
control|)
block|{
if|if
condition|(
operator|!
name|leader
operator|.
name|text
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|text
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't merge suggest entries, this might be caused by suggest calls "
operator|+
literal|"across multiple indices with different analysis chains. Suggest entries have different text actual ["
operator|+
name|entry
operator|.
name|text
operator|+
literal|"] expected ["
operator|+
name|leader
operator|.
name|text
operator|+
literal|"]"
argument_list|)
throw|;
block|}
assert|assert
name|leader
operator|.
name|offset
operator|==
name|entry
operator|.
name|offset
assert|;
assert|assert
name|leader
operator|.
name|length
operator|==
name|entry
operator|.
name|length
assert|;
name|leader
operator|.
name|merge
argument_list|(
name|entry
argument_list|)
expr_stmt|;
for|for
control|(
name|O
name|option
range|:
name|entry
control|)
block|{
name|O
name|merger
init|=
name|entries
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|merger
operator|==
literal|null
condition|)
block|{
name|entries
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|merger
operator|.
name|mergeInto
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|leader
operator|.
name|options
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|O
name|option
range|:
name|entries
operator|.
name|keySet
argument_list|()
control|)
block|{
name|leader
operator|.
name|addOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|leader
return|;
block|}
comment|/**              * Merge any extra fields for this subtype.              */
DECL|method|merge
specifier|protected
name|void
name|merge
parameter_list|(
name|Entry
argument_list|<
name|O
argument_list|>
name|other
parameter_list|)
block|{             }
comment|/**              * @return the text (analyzed by suggest analyzer) originating from the suggest text. Usually this is a              *         single term.              */
DECL|method|getText
specifier|public
name|Text
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
comment|/**              * @return the start offset (not analyzed) for this entry in the suggest text.              */
DECL|method|getOffset
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**              * @return the length (not analyzed) for this entry in the suggest text.              */
DECL|method|getLength
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|O
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|options
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**              * @return The suggested options for this particular suggest entry. If there are no suggested terms then              *         an empty list is returned.              */
DECL|method|getOptions
specifier|public
name|List
argument_list|<
name|O
argument_list|>
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
DECL|method|trim
name|void
name|trim
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|int
name|optionsToRemove
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|options
operator|.
name|size
argument_list|()
operator|-
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|optionsToRemove
condition|;
name|i
operator|++
control|)
block|{
name|options
operator|.
name|remove
argument_list|(
name|options
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|length
operator|!=
name|entry
operator|.
name|length
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|offset
operator|!=
name|entry
operator|.
name|offset
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|text
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|text
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|text
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|offset
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|length
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|text
operator|=
name|in
operator|.
name|readText
argument_list|()
expr_stmt|;
name|offset
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|length
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|int
name|suggestedWords
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|options
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|suggestedWords
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|suggestedWords
condition|;
name|j
operator|++
control|)
block|{
name|O
name|newOption
init|=
name|newOption
argument_list|()
decl_stmt|;
name|newOption
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
name|newOption
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|newOption
specifier|protected
name|O
name|newOption
parameter_list|()
block|{
return|return
operator|(
name|O
operator|)
operator|new
name|Option
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|options
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|options
control|)
block|{
name|option
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|TEXT
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|OFFSET
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|LENGTH
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|OPTIONS
argument_list|)
expr_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|options
control|)
block|{
name|option
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|field|PARSER
specifier|private
specifier|static
name|ObjectParser
argument_list|<
name|Entry
argument_list|<
name|Option
argument_list|>
argument_list|,
name|Void
argument_list|>
name|PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"SuggestionEntryParser"
argument_list|,
literal|true
argument_list|,
name|Entry
operator|::
operator|new
argument_list|)
decl_stmt|;
static|static
block|{
name|declareCommonFields
argument_list|(
name|PARSER
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareObjectArray
argument_list|(
name|Entry
operator|::
name|addOptions
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|Option
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|)
argument_list|,
operator|new
name|ParseField
argument_list|(
name|OPTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|declareCommonFields
specifier|protected
specifier|static
name|void
name|declareCommonFields
parameter_list|(
name|ObjectParser
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|,
name|Void
argument_list|>
name|parser
parameter_list|)
block|{
name|parser
operator|.
name|declareString
argument_list|(
parameter_list|(
name|entry
parameter_list|,
name|text
parameter_list|)
lambda|->
name|entry
operator|.
name|text
operator|=
operator|new
name|Text
argument_list|(
name|text
argument_list|)
argument_list|,
operator|new
name|ParseField
argument_list|(
name|TEXT
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareInt
argument_list|(
parameter_list|(
name|entry
parameter_list|,
name|offset
parameter_list|)
lambda|->
name|entry
operator|.
name|offset
operator|=
name|offset
argument_list|,
operator|new
name|ParseField
argument_list|(
name|OFFSET
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareInt
argument_list|(
parameter_list|(
name|entry
parameter_list|,
name|length
parameter_list|)
lambda|->
name|entry
operator|.
name|length
operator|=
name|length
argument_list|,
operator|new
name|ParseField
argument_list|(
name|LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
block|{
return|return
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**              * Contains the suggested text with its document frequency and score.              */
DECL|class|Option
specifier|public
specifier|static
class|class
name|Option
implements|implements
name|Streamable
implements|,
name|ToXContentObject
block|{
DECL|field|TEXT
specifier|public
specifier|static
specifier|final
name|ParseField
name|TEXT
init|=
operator|new
name|ParseField
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
DECL|field|HIGHLIGHTED
specifier|public
specifier|static
specifier|final
name|ParseField
name|HIGHLIGHTED
init|=
operator|new
name|ParseField
argument_list|(
literal|"highlighted"
argument_list|)
decl_stmt|;
DECL|field|SCORE
specifier|public
specifier|static
specifier|final
name|ParseField
name|SCORE
init|=
operator|new
name|ParseField
argument_list|(
literal|"score"
argument_list|)
decl_stmt|;
DECL|field|COLLATE_MATCH
specifier|public
specifier|static
specifier|final
name|ParseField
name|COLLATE_MATCH
init|=
operator|new
name|ParseField
argument_list|(
literal|"collate_match"
argument_list|)
decl_stmt|;
DECL|field|text
specifier|private
name|Text
name|text
decl_stmt|;
DECL|field|highlighted
specifier|private
name|Text
name|highlighted
decl_stmt|;
DECL|field|score
specifier|private
name|float
name|score
decl_stmt|;
DECL|field|collateMatch
specifier|private
name|Boolean
name|collateMatch
decl_stmt|;
DECL|method|Option
specifier|public
name|Option
parameter_list|(
name|Text
name|text
parameter_list|,
name|Text
name|highlighted
parameter_list|,
name|float
name|score
parameter_list|,
name|Boolean
name|collateMatch
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|highlighted
operator|=
name|highlighted
expr_stmt|;
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
name|this
operator|.
name|collateMatch
operator|=
name|collateMatch
expr_stmt|;
block|}
DECL|method|Option
specifier|public
name|Option
parameter_list|(
name|Text
name|text
parameter_list|,
name|Text
name|highlighted
parameter_list|,
name|float
name|score
parameter_list|)
block|{
name|this
argument_list|(
name|text
argument_list|,
name|highlighted
argument_list|,
name|score
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Option
specifier|public
name|Option
parameter_list|(
name|Text
name|text
parameter_list|,
name|float
name|score
parameter_list|)
block|{
name|this
argument_list|(
name|text
argument_list|,
literal|null
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
DECL|method|Option
specifier|public
name|Option
parameter_list|()
block|{                 }
comment|/**                  * @return The actual suggested text.                  */
DECL|method|getText
specifier|public
name|Text
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
comment|/**                  * @return Copy of suggested text with changes from user supplied text highlighted.                  */
DECL|method|getHighlighted
specifier|public
name|Text
name|getHighlighted
parameter_list|()
block|{
return|return
name|highlighted
return|;
block|}
comment|/**                  * @return The score based on the edit distance difference between the suggested term and the                  *         term in the suggest text.                  */
DECL|method|getScore
specifier|public
name|float
name|getScore
parameter_list|()
block|{
return|return
name|score
return|;
block|}
comment|/**                  * @return true if collation has found a match for the entry.                  * if collate was not set, the value defaults to<code>true</code>                  */
DECL|method|collateMatch
specifier|public
name|boolean
name|collateMatch
parameter_list|()
block|{
return|return
operator|(
name|collateMatch
operator|!=
literal|null
operator|)
condition|?
name|collateMatch
else|:
literal|true
return|;
block|}
DECL|method|setScore
specifier|protected
name|void
name|setScore
parameter_list|(
name|float
name|score
parameter_list|)
block|{
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|text
operator|=
name|in
operator|.
name|readText
argument_list|()
expr_stmt|;
name|score
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|highlighted
operator|=
name|in
operator|.
name|readOptionalText
argument_list|()
expr_stmt|;
name|collateMatch
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|score
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalText
argument_list|(
name|highlighted
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|collateMatch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|protected
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|TEXT
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|highlighted
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|HIGHLIGHTED
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|highlighted
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|SCORE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|score
argument_list|)
expr_stmt|;
if|if
condition|(
name|collateMatch
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|COLLATE_MATCH
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|collateMatch
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|ConstructingObjectParser
argument_list|<
name|Option
argument_list|,
name|Void
argument_list|>
name|PARSER
init|=
operator|new
name|ConstructingObjectParser
argument_list|<>
argument_list|(
literal|"SuggestOptionParser"
argument_list|,
literal|true
argument_list|,
name|args
lambda|->
block|{
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
operator|(
name|String
operator|)
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|float
name|score
init|=
operator|(
name|Float
operator|)
name|args
index|[
literal|1
index|]
decl_stmt|;
name|String
name|highlighted
init|=
operator|(
name|String
operator|)
name|args
index|[
literal|2
index|]
decl_stmt|;
name|Text
name|highlightedText
init|=
name|highlighted
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Text
argument_list|(
name|highlighted
argument_list|)
decl_stmt|;
name|Boolean
name|collateMatch
init|=
operator|(
name|Boolean
operator|)
name|args
index|[
literal|3
index|]
decl_stmt|;
return|return
operator|new
name|Option
argument_list|(
name|text
argument_list|,
name|highlightedText
argument_list|,
name|score
argument_list|,
name|collateMatch
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareString
argument_list|(
name|constructorArg
argument_list|()
argument_list|,
name|TEXT
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareFloat
argument_list|(
name|constructorArg
argument_list|()
argument_list|,
name|SCORE
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|optionalConstructorArg
argument_list|()
argument_list|,
name|HIGHLIGHTED
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareBoolean
argument_list|(
name|optionalConstructorArg
argument_list|()
argument_list|,
name|COLLATE_MATCH
argument_list|)
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|Option
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
block|{
return|return
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|mergeInto
specifier|protected
name|void
name|mergeInto
parameter_list|(
name|Option
name|otherOption
parameter_list|)
block|{
name|score
operator|=
name|Math
operator|.
name|max
argument_list|(
name|score
argument_list|,
name|otherOption
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Option
name|that
init|=
operator|(
name|Option
operator|)
name|o
decl_stmt|;
return|return
name|text
operator|.
name|equals
argument_list|(
name|that
operator|.
name|text
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|text
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|"{ \"error\" : \""
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\"}"
return|;
block|}
block|}
block|}
end_class

end_unit

