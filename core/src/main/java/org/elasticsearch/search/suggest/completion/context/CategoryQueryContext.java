begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.completion.context
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|CategoryContextMapping
operator|.
name|CONTEXT_BOOST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|CategoryContextMapping
operator|.
name|CONTEXT_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|CategoryContextMapping
operator|.
name|CONTEXT_VALUE
import|;
end_import

begin_comment
comment|/**  * Defines the query context for {@link CategoryContextMapping}  */
end_comment

begin_class
DECL|class|CategoryQueryContext
specifier|public
specifier|final
class|class
name|CategoryQueryContext
implements|implements
name|ToXContent
block|{
DECL|field|context
specifier|public
name|CharSequence
name|context
decl_stmt|;
DECL|field|isPrefix
specifier|public
name|boolean
name|isPrefix
init|=
literal|false
decl_stmt|;
DECL|field|boost
specifier|public
name|int
name|boost
init|=
literal|1
decl_stmt|;
comment|/**      * Creates a query context with a provided context and a      * boost of 1      */
DECL|method|CategoryQueryContext
specifier|public
name|CategoryQueryContext
parameter_list|(
name|CharSequence
name|context
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a query context with a provided context and boost      */
DECL|method|CategoryQueryContext
specifier|public
name|CategoryQueryContext
parameter_list|(
name|CharSequence
name|context
parameter_list|,
name|int
name|boost
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|,
name|boost
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a query context with a provided context and boost      * Allows specifying whether the context should be treated as      * a prefix or not      */
DECL|method|CategoryQueryContext
specifier|public
name|CategoryQueryContext
parameter_list|(
name|CharSequence
name|context
parameter_list|,
name|int
name|boost
parameter_list|,
name|boolean
name|isPrefix
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
name|this
operator|.
name|isPrefix
operator|=
name|isPrefix
expr_stmt|;
block|}
DECL|method|CategoryQueryContext
specifier|private
name|CategoryQueryContext
parameter_list|()
block|{     }
DECL|method|setContext
name|void
name|setContext
parameter_list|(
name|CharSequence
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|setIsPrefix
name|void
name|setIsPrefix
parameter_list|(
name|boolean
name|isPrefix
parameter_list|)
block|{
name|this
operator|.
name|isPrefix
operator|=
name|isPrefix
expr_stmt|;
block|}
DECL|method|setBoost
name|void
name|setBoost
parameter_list|(
name|int
name|boost
parameter_list|)
block|{
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
DECL|field|CATEGORY_PARSER
specifier|private
specifier|static
name|ObjectParser
argument_list|<
name|CategoryQueryContext
argument_list|,
name|CategoryContextMapping
argument_list|>
name|CATEGORY_PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"category"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
static|static
block|{
name|CATEGORY_PARSER
operator|.
name|declareString
argument_list|(
name|CategoryQueryContext
operator|::
name|setContext
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"context"
argument_list|)
argument_list|)
expr_stmt|;
name|CATEGORY_PARSER
operator|.
name|declareInt
argument_list|(
name|CategoryQueryContext
operator|::
name|setBoost
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"boost"
argument_list|)
argument_list|)
expr_stmt|;
name|CATEGORY_PARSER
operator|.
name|declareBoolean
argument_list|(
name|CategoryQueryContext
operator|::
name|setIsPrefix
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"prefix"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|CategoryQueryContext
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|CategoryQueryContext
name|queryContext
init|=
operator|new
name|CategoryQueryContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|CATEGORY_PARSER
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|queryContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|queryContext
operator|.
name|setContext
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"category context must be an object or string"
argument_list|)
throw|;
block|}
return|return
name|queryContext
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|CONTEXT_VALUE
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|CONTEXT_BOOST
argument_list|,
name|boost
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|CONTEXT_PREFIX
argument_list|,
name|isPrefix
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

