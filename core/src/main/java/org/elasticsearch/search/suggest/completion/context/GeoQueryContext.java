begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.completion.context
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|GeoContextMapping
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Defines the query context for {@link GeoContextMapping}  */
end_comment

begin_class
DECL|class|GeoQueryContext
specifier|public
specifier|final
class|class
name|GeoQueryContext
implements|implements
name|ToXContent
block|{
DECL|field|geoPoint
specifier|public
name|GeoPoint
name|geoPoint
decl_stmt|;
DECL|field|boost
specifier|public
name|int
name|boost
init|=
literal|1
decl_stmt|;
DECL|field|precision
specifier|public
name|int
name|precision
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|neighbours
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|neighbours
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Creates a query context for a given geo point with a boost of 1      * and a precision of {@value GeoContextMapping#DEFAULT_PRECISION}      */
DECL|method|GeoQueryContext
specifier|public
name|GeoQueryContext
parameter_list|(
name|GeoPoint
name|geoPoint
parameter_list|)
block|{
name|this
argument_list|(
name|geoPoint
operator|.
name|geohash
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a query context for a given geo point with a      * provided boost      */
DECL|method|GeoQueryContext
specifier|public
name|GeoQueryContext
parameter_list|(
name|GeoPoint
name|geoPoint
parameter_list|,
name|int
name|boost
parameter_list|)
block|{
name|this
argument_list|(
name|geoPoint
operator|.
name|geohash
argument_list|()
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a query context with a given geo hash with a boost of 1      * and a precision of {@value GeoContextMapping#DEFAULT_PRECISION}      */
DECL|method|GeoQueryContext
specifier|public
name|GeoQueryContext
parameter_list|(
name|CharSequence
name|geoHash
parameter_list|)
block|{
name|this
argument_list|(
name|geoHash
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a query context for a given geo hash with a      * provided boost      */
DECL|method|GeoQueryContext
specifier|public
name|GeoQueryContext
parameter_list|(
name|CharSequence
name|geoHash
parameter_list|,
name|int
name|boost
parameter_list|)
block|{
name|this
argument_list|(
name|geoHash
argument_list|,
name|boost
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a query context for a geo point with      * a provided boost and enables generating neighbours      * at specified precisions      */
DECL|method|GeoQueryContext
specifier|public
name|GeoQueryContext
parameter_list|(
name|CharSequence
name|geoHash
parameter_list|,
name|int
name|boost
parameter_list|,
name|int
name|precision
parameter_list|,
name|Integer
modifier|...
name|neighbours
parameter_list|)
block|{
name|this
argument_list|(
name|GeoPoint
operator|.
name|fromGeohash
argument_list|(
name|geoHash
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|boost
argument_list|,
name|precision
argument_list|,
name|neighbours
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a query context for a geo hash with      * a provided boost and enables generating neighbours      * at specified precisions      */
DECL|method|GeoQueryContext
specifier|public
name|GeoQueryContext
parameter_list|(
name|GeoPoint
name|geoPoint
parameter_list|,
name|int
name|boost
parameter_list|,
name|int
name|precision
parameter_list|,
name|Integer
modifier|...
name|neighbours
parameter_list|)
block|{
name|this
operator|.
name|geoPoint
operator|=
name|geoPoint
expr_stmt|;
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|neighbours
argument_list|,
name|neighbours
argument_list|)
expr_stmt|;
block|}
DECL|method|GeoQueryContext
specifier|private
name|GeoQueryContext
parameter_list|()
block|{     }
DECL|method|setBoost
name|void
name|setBoost
parameter_list|(
name|int
name|boost
parameter_list|)
block|{
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
DECL|method|setPrecision
name|void
name|setPrecision
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
block|}
DECL|method|setNeighbours
name|void
name|setNeighbours
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|neighbours
parameter_list|)
block|{
name|this
operator|.
name|neighbours
operator|=
name|neighbours
expr_stmt|;
block|}
DECL|method|setGeoPoint
name|void
name|setGeoPoint
parameter_list|(
name|GeoPoint
name|geoPoint
parameter_list|)
block|{
name|this
operator|.
name|geoPoint
operator|=
name|geoPoint
expr_stmt|;
block|}
DECL|field|lat
specifier|private
name|double
name|lat
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
DECL|method|setLat
name|void
name|setLat
parameter_list|(
name|double
name|lat
parameter_list|)
block|{
name|this
operator|.
name|lat
operator|=
name|lat
expr_stmt|;
block|}
DECL|field|lon
specifier|private
name|double
name|lon
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
DECL|method|setLon
name|void
name|setLon
parameter_list|(
name|double
name|lon
parameter_list|)
block|{
name|this
operator|.
name|lon
operator|=
name|lon
expr_stmt|;
block|}
DECL|method|finish
name|void
name|finish
parameter_list|()
block|{
if|if
condition|(
name|geoPoint
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lat
argument_list|)
operator|==
literal|false
operator|&&
name|Double
operator|.
name|isNaN
argument_list|(
name|lon
argument_list|)
operator|==
literal|false
condition|)
block|{
name|geoPoint
operator|=
operator|new
name|GeoPoint
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"no geohash or geo point provided"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|GEO_CONTEXT_PARSER
specifier|private
specifier|static
name|ObjectParser
argument_list|<
name|GeoQueryContext
argument_list|,
name|GeoContextMapping
argument_list|>
name|GEO_CONTEXT_PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"geo"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
static|static
block|{
name|GEO_CONTEXT_PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|parser
parameter_list|,
name|geoQueryContext
parameter_list|,
name|geoContextMapping
parameter_list|)
lambda|->
name|geoQueryContext
operator|.
name|setGeoPoint
argument_list|(
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"context"
argument_list|)
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT
argument_list|)
expr_stmt|;
name|GEO_CONTEXT_PARSER
operator|.
name|declareInt
argument_list|(
name|GeoQueryContext
operator|::
name|setBoost
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"boost"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO : add string support for precision for GeoUtils.geoHashLevelsForPrecision()
name|GEO_CONTEXT_PARSER
operator|.
name|declareInt
argument_list|(
name|GeoQueryContext
operator|::
name|setPrecision
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"precision"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO : add string array support for precision for GeoUtils.geoHashLevelsForPrecision()
name|GEO_CONTEXT_PARSER
operator|.
name|declareIntArray
argument_list|(
name|GeoQueryContext
operator|::
name|setNeighbours
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"neighbours"
argument_list|)
argument_list|)
expr_stmt|;
name|GEO_CONTEXT_PARSER
operator|.
name|declareDouble
argument_list|(
name|GeoQueryContext
operator|::
name|setLat
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"lat"
argument_list|)
argument_list|)
expr_stmt|;
name|GEO_CONTEXT_PARSER
operator|.
name|declareDouble
argument_list|(
name|GeoQueryContext
operator|::
name|setLon
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"lon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|GeoQueryContext
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|GeoQueryContext
name|queryContext
init|=
operator|new
name|GeoQueryContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|GEO_CONTEXT_PARSER
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|queryContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|queryContext
operator|.
name|setGeoPoint
argument_list|(
name|GeoPoint
operator|.
name|fromGeohash
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"geo context must be an object or string"
argument_list|)
throw|;
block|}
name|queryContext
operator|.
name|finish
argument_list|()
expr_stmt|;
return|return
name|queryContext
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|CONTEXT_VALUE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|geoPoint
operator|.
name|getLat
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|geoPoint
operator|.
name|getLon
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|CONTEXT_BOOST
argument_list|,
name|boost
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|CONTEXT_NEIGHBOURS
argument_list|,
name|neighbours
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|CONTEXT_PRECISION
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

