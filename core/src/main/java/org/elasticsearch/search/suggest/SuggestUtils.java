begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|SuggestUtils
specifier|public
specifier|final
class|class
name|SuggestUtils
block|{
DECL|method|SuggestUtils
specifier|private
name|SuggestUtils
parameter_list|()
block|{
comment|// utils!!
block|}
DECL|class|TokenConsumer
specifier|public
specifier|abstract
specifier|static
class|class
name|TokenConsumer
block|{
DECL|field|charTermAttr
specifier|protected
name|CharTermAttribute
name|charTermAttr
decl_stmt|;
DECL|field|posIncAttr
specifier|protected
name|PositionIncrementAttribute
name|posIncAttr
decl_stmt|;
DECL|field|offsetAttr
specifier|protected
name|OffsetAttribute
name|offsetAttr
decl_stmt|;
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|TokenStream
name|stream
parameter_list|)
block|{
name|charTermAttr
operator|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|posIncAttr
operator|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|offsetAttr
operator|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|fillBytesRef
specifier|protected
name|BytesRef
name|fillBytesRef
parameter_list|(
name|BytesRefBuilder
name|spare
parameter_list|)
block|{
name|spare
operator|.
name|copyChars
argument_list|(
name|charTermAttr
argument_list|)
expr_stmt|;
return|return
name|spare
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|nextToken
specifier|public
specifier|abstract
name|void
name|nextToken
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|end
specifier|public
name|void
name|end
parameter_list|()
block|{}
block|}
DECL|class|Fields
specifier|public
specifier|static
class|class
name|Fields
block|{
DECL|field|STRING_DISTANCE
specifier|public
specifier|static
specifier|final
name|ParseField
name|STRING_DISTANCE
init|=
operator|new
name|ParseField
argument_list|(
literal|"string_distance"
argument_list|)
decl_stmt|;
DECL|field|SUGGEST_MODE
specifier|public
specifier|static
specifier|final
name|ParseField
name|SUGGEST_MODE
init|=
operator|new
name|ParseField
argument_list|(
literal|"suggest_mode"
argument_list|)
decl_stmt|;
DECL|field|MAX_EDITS
specifier|public
specifier|static
specifier|final
name|ParseField
name|MAX_EDITS
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_edits"
argument_list|)
decl_stmt|;
DECL|field|MAX_INSPECTIONS
specifier|public
specifier|static
specifier|final
name|ParseField
name|MAX_INSPECTIONS
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_inspections"
argument_list|)
decl_stmt|;
comment|// TODO some of these constants are the same as MLT constants and
comment|// could be moved to a shared class for consistency
DECL|field|MAX_TERM_FREQ
specifier|public
specifier|static
specifier|final
name|ParseField
name|MAX_TERM_FREQ
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_term_freq"
argument_list|)
decl_stmt|;
DECL|field|PREFIX_LENGTH
specifier|public
specifier|static
specifier|final
name|ParseField
name|PREFIX_LENGTH
init|=
operator|new
name|ParseField
argument_list|(
literal|"prefix_length"
argument_list|,
literal|"prefix_len"
argument_list|)
decl_stmt|;
DECL|field|MIN_WORD_LENGTH
specifier|public
specifier|static
specifier|final
name|ParseField
name|MIN_WORD_LENGTH
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_word_length"
argument_list|,
literal|"min_word_len"
argument_list|)
decl_stmt|;
DECL|field|MIN_DOC_FREQ
specifier|public
specifier|static
specifier|final
name|ParseField
name|MIN_DOC_FREQ
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_doc_freq"
argument_list|)
decl_stmt|;
DECL|field|SHARD_SIZE
specifier|public
specifier|static
specifier|final
name|ParseField
name|SHARD_SIZE
init|=
operator|new
name|ParseField
argument_list|(
literal|"shard_size"
argument_list|)
decl_stmt|;
DECL|field|ANALYZER
specifier|public
specifier|static
specifier|final
name|ParseField
name|ANALYZER
init|=
operator|new
name|ParseField
argument_list|(
literal|"analyzer"
argument_list|)
decl_stmt|;
DECL|field|FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
DECL|field|SIZE
specifier|public
specifier|static
specifier|final
name|ParseField
name|SIZE
init|=
operator|new
name|ParseField
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
DECL|field|SORT
specifier|public
specifier|static
specifier|final
name|ParseField
name|SORT
init|=
operator|new
name|ParseField
argument_list|(
literal|"sort"
argument_list|)
decl_stmt|;
DECL|field|ACCURACY
specifier|public
specifier|static
specifier|final
name|ParseField
name|ACCURACY
init|=
operator|new
name|ParseField
argument_list|(
literal|"accuracy"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

