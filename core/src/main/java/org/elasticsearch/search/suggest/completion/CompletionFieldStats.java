begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.completion
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectLongHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|CompletionTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|CompletionFieldStats
specifier|public
class|class
name|CompletionFieldStats
block|{
DECL|method|completionStats
specifier|public
specifier|static
name|CompletionStats
name|completionStats
parameter_list|(
name|IndexReader
name|indexReader
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|long
name|sizeInBytes
init|=
literal|0
decl_stmt|;
name|ObjectLongHashMap
argument_list|<
name|String
argument_list|>
name|completionFields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|completionFields
operator|=
operator|new
name|ObjectLongHashMap
argument_list|<>
argument_list|(
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LeafReaderContext
name|atomicReaderContext
range|:
name|indexReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|atomicReader
init|=
name|atomicReaderContext
operator|.
name|reader
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|fieldName
range|:
name|atomicReader
operator|.
name|fields
argument_list|()
control|)
block|{
name|Terms
name|terms
init|=
name|atomicReader
operator|.
name|fields
argument_list|()
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|instanceof
name|CompletionTerms
condition|)
block|{
comment|// TODO: currently we load up the suggester for reporting it's size
name|long
name|fstSize
init|=
operator|(
operator|(
name|CompletionTerms
operator|)
name|terms
operator|)
operator|.
name|suggester
argument_list|()
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|length
operator|>
literal|0
operator|&&
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|fields
argument_list|,
name|fieldName
argument_list|)
condition|)
block|{
name|completionFields
operator|.
name|addTo
argument_list|(
name|fieldName
argument_list|,
name|fstSize
argument_list|)
expr_stmt|;
block|}
name|sizeInBytes
operator|+=
name|fstSize
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{             }
block|}
return|return
operator|new
name|CompletionStats
argument_list|(
name|sizeInBytes
argument_list|,
name|completionFields
argument_list|)
return|;
block|}
block|}
end_class

end_unit

