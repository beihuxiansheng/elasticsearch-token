begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.completion
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|CompletionFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|RegexpFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestContextParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestUtils
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestionSearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Parses query options for {@link CompletionSuggester}  *  * Acceptable input:  * {  *     "field" : STRING  *     "size" : INT  *     "fuzzy" : BOOLEAN | FUZZY_OBJECT  *     "contexts" : QUERY_CONTEXTS  *     "regex" : REGEX_OBJECT  * }  *  * FUZZY_OBJECT : {  *     "edit_distance" : STRING | INT  *     "transpositions" : BOOLEAN  *     "min_length" : INT  *     "prefix_length" : INT  *     "unicode_aware" : BOOLEAN  *     "max_determinized_states" : INT  * }  *  * REGEX_OBJECT: {  *     "flags" : REGEX_FLAGS  *     "max_determinized_states" : INT  * }  *  * see {@link RegexpFlag} for REGEX_FLAGS  */
end_comment

begin_class
DECL|class|CompletionSuggestParser
specifier|public
class|class
name|CompletionSuggestParser
implements|implements
name|SuggestContextParser
block|{
DECL|field|TLP_PARSER
specifier|private
specifier|static
name|ObjectParser
argument_list|<
name|CompletionSuggestionContext
argument_list|,
name|ContextAndSuggest
argument_list|>
name|TLP_PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
name|CompletionSuggestionBuilder
operator|.
name|SUGGESTION_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
static|static
block|{
name|TLP_PARSER
operator|.
name|declareStringArray
argument_list|(
name|CompletionSuggestionContext
operator|::
name|setPayloadFields
argument_list|,
name|CompletionSuggestionBuilder
operator|.
name|PAYLOAD_FIELD
argument_list|)
expr_stmt|;
name|TLP_PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|parser
parameter_list|,
name|completionSuggestionContext
parameter_list|,
name|context
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_BOOLEAN
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|completionSuggestionContext
operator|.
name|setFuzzyOptions
argument_list|(
operator|new
name|FuzzyOptions
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|completionSuggestionContext
operator|.
name|setFuzzyOptions
argument_list|(
name|FuzzyOptions
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|FuzzyOptions
operator|.
name|FUZZY_OPTIONS
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT_OR_BOOLEAN
argument_list|)
expr_stmt|;
name|TLP_PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|parser
parameter_list|,
name|completionSuggestionContext
parameter_list|,
name|context
parameter_list|)
lambda|->
name|completionSuggestionContext
operator|.
name|setRegexOptions
argument_list|(
name|RegexOptions
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
argument_list|)
argument_list|,
name|RegexOptions
operator|.
name|REGEX_OPTIONS
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT
argument_list|)
expr_stmt|;
name|TLP_PARSER
operator|.
name|declareString
argument_list|(
name|SuggestionSearchContext
operator|.
name|SuggestionContext
operator|::
name|setField
argument_list|,
name|Fields
operator|.
name|FIELD
argument_list|)
expr_stmt|;
name|TLP_PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
name|String
name|analyzerName
init|=
name|p
operator|.
name|text
argument_list|()
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|c
operator|.
name|mapperService
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|analyzerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Analyzer ["
operator|+
name|analyzerName
operator|+
literal|"] doesn't exists"
argument_list|)
throw|;
block|}
name|v
operator|.
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
block|}
argument_list|,
name|Fields
operator|.
name|ANALYZER
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|TLP_PARSER
operator|.
name|declareInt
argument_list|(
name|SuggestionSearchContext
operator|.
name|SuggestionContext
operator|::
name|setSize
argument_list|,
name|Fields
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|TLP_PARSER
operator|.
name|declareInt
argument_list|(
name|SuggestionSearchContext
operator|.
name|SuggestionContext
operator|::
name|setShardSize
argument_list|,
name|Fields
operator|.
name|SHARD_SIZE
argument_list|)
expr_stmt|;
name|TLP_PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
comment|// Copy the current structure. We will parse, once the mapping is provided
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|p
operator|.
name|contentType
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|BytesReference
name|bytes
init|=
name|builder
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|c
operator|.
name|contextParser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|bytes
argument_list|)
operator|.
name|createParser
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|p
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
argument_list|,
name|CompletionSuggestionBuilder
operator|.
name|CONTEXTS_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT
argument_list|)
expr_stmt|;
comment|// context is deprecated
block|}
DECL|class|ContextAndSuggest
specifier|private
specifier|static
class|class
name|ContextAndSuggest
block|{
DECL|field|contextParser
name|XContentParser
name|contextParser
decl_stmt|;
DECL|field|mapperService
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|method|ContextAndSuggest
name|ContextAndSuggest
parameter_list|(
name|MapperService
name|mapperService
parameter_list|)
block|{
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
block|}
block|}
DECL|field|completionSuggester
specifier|private
specifier|final
name|CompletionSuggester
name|completionSuggester
decl_stmt|;
DECL|method|CompletionSuggestParser
specifier|public
name|CompletionSuggestParser
parameter_list|(
name|CompletionSuggester
name|completionSuggester
parameter_list|)
block|{
name|this
operator|.
name|completionSuggester
operator|=
name|completionSuggester
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|SuggestionSearchContext
operator|.
name|SuggestionContext
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|QueryShardContext
name|shardContext
parameter_list|)
throws|throws
name|IOException
block|{
name|MapperService
name|mapperService
init|=
name|shardContext
operator|.
name|getMapperService
argument_list|()
decl_stmt|;
specifier|final
name|CompletionSuggestionContext
name|suggestion
init|=
operator|new
name|CompletionSuggestionContext
argument_list|(
name|shardContext
argument_list|)
decl_stmt|;
specifier|final
name|ContextAndSuggest
name|contextAndSuggest
init|=
operator|new
name|ContextAndSuggest
argument_list|(
name|mapperService
argument_list|)
decl_stmt|;
name|TLP_PARSER
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|suggestion
argument_list|,
name|contextAndSuggest
argument_list|)
expr_stmt|;
specifier|final
name|XContentParser
name|contextParser
init|=
name|contextAndSuggest
operator|.
name|contextParser
decl_stmt|;
name|MappedFieldType
name|mappedFieldType
init|=
name|mapperService
operator|.
name|fullName
argument_list|(
name|suggestion
operator|.
name|getField
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappedFieldType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Field ["
operator|+
name|suggestion
operator|.
name|getField
argument_list|()
operator|+
literal|"] is not a completion suggest field"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|mappedFieldType
operator|instanceof
name|CompletionFieldMapper
operator|.
name|CompletionFieldType
condition|)
block|{
name|CompletionFieldMapper
operator|.
name|CompletionFieldType
name|type
init|=
operator|(
name|CompletionFieldMapper
operator|.
name|CompletionFieldType
operator|)
name|mappedFieldType
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|hasContextMappings
argument_list|()
operator|==
literal|false
operator|&&
name|contextParser
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"suggester ["
operator|+
name|type
operator|.
name|name
argument_list|()
operator|+
literal|"] doesn't expect any context"
argument_list|)
throw|;
block|}
name|suggestion
operator|.
name|setQueryContexts
argument_list|(
name|CompletionSuggestionBuilder
operator|.
name|parseQueryContexts
argument_list|(
name|contextParser
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|suggestion
operator|.
name|setFieldType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|suggestion
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field ["
operator|+
name|suggestion
operator|.
name|getField
argument_list|()
operator|+
literal|"] is not a completion suggest field"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

