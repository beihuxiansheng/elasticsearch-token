begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.completion
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|FuzzyCompletionQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|RegexpFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|CategoryQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|GeoQueryContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Defines a suggest command based on a prefix, typically to provide "auto-complete" functionality  * for users as they type search terms. The implementation of the completion service uses FSTs that  * are created at index-time and so must be defined in the mapping with the type "completion" before  * indexing.  */
end_comment

begin_class
DECL|class|CompletionSuggestionBuilder
specifier|public
class|class
name|CompletionSuggestionBuilder
extends|extends
name|SuggestBuilder
operator|.
name|SuggestionBuilder
argument_list|<
name|CompletionSuggestionBuilder
argument_list|>
block|{
DECL|field|SUGGESTION_NAME
specifier|final
specifier|static
name|String
name|SUGGESTION_NAME
init|=
literal|"completion"
decl_stmt|;
DECL|field|PAYLOAD_FIELD
specifier|static
specifier|final
name|ParseField
name|PAYLOAD_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"payload"
argument_list|)
decl_stmt|;
DECL|field|CONTEXTS_FIELD
specifier|static
specifier|final
name|ParseField
name|CONTEXTS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"contexts"
argument_list|,
literal|"context"
argument_list|)
decl_stmt|;
DECL|field|fuzzyOptionsBuilder
specifier|private
name|FuzzyOptionsBuilder
name|fuzzyOptionsBuilder
decl_stmt|;
DECL|field|regexOptionsBuilder
specifier|private
name|RegexOptionsBuilder
name|regexOptionsBuilder
decl_stmt|;
DECL|field|queryContexts
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ToXContent
argument_list|>
argument_list|>
name|queryContexts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|payloadFields
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|payloadFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|CompletionSuggestionBuilder
specifier|public
name|CompletionSuggestionBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|SUGGESTION_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * Options for fuzzy queries      */
DECL|class|FuzzyOptionsBuilder
specifier|public
specifier|static
class|class
name|FuzzyOptionsBuilder
implements|implements
name|ToXContent
block|{
DECL|field|FUZZY_OPTIONS
specifier|static
specifier|final
name|ParseField
name|FUZZY_OPTIONS
init|=
operator|new
name|ParseField
argument_list|(
literal|"fuzzy"
argument_list|)
decl_stmt|;
DECL|field|TRANSPOSITION_FIELD
specifier|static
specifier|final
name|ParseField
name|TRANSPOSITION_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"transpositions"
argument_list|)
decl_stmt|;
DECL|field|MIN_LENGTH_FIELD
specifier|static
specifier|final
name|ParseField
name|MIN_LENGTH_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_length"
argument_list|)
decl_stmt|;
DECL|field|PREFIX_LENGTH_FIELD
specifier|static
specifier|final
name|ParseField
name|PREFIX_LENGTH_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"prefix_length"
argument_list|)
decl_stmt|;
DECL|field|UNICODE_AWARE_FIELD
specifier|static
specifier|final
name|ParseField
name|UNICODE_AWARE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"unicode_aware"
argument_list|)
decl_stmt|;
DECL|field|MAX_DETERMINIZED_STATES_FIELD
specifier|static
specifier|final
name|ParseField
name|MAX_DETERMINIZED_STATES_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_determinized_states"
argument_list|)
decl_stmt|;
DECL|field|editDistance
specifier|private
name|int
name|editDistance
init|=
name|FuzzyCompletionQuery
operator|.
name|DEFAULT_MAX_EDITS
decl_stmt|;
DECL|field|transpositions
specifier|private
name|boolean
name|transpositions
init|=
name|FuzzyCompletionQuery
operator|.
name|DEFAULT_TRANSPOSITIONS
decl_stmt|;
DECL|field|fuzzyMinLength
specifier|private
name|int
name|fuzzyMinLength
init|=
name|FuzzyCompletionQuery
operator|.
name|DEFAULT_MIN_FUZZY_LENGTH
decl_stmt|;
DECL|field|fuzzyPrefixLength
specifier|private
name|int
name|fuzzyPrefixLength
init|=
name|FuzzyCompletionQuery
operator|.
name|DEFAULT_NON_FUZZY_PREFIX
decl_stmt|;
DECL|field|unicodeAware
specifier|private
name|boolean
name|unicodeAware
init|=
name|FuzzyCompletionQuery
operator|.
name|DEFAULT_UNICODE_AWARE
decl_stmt|;
DECL|field|maxDeterminizedStates
specifier|private
name|int
name|maxDeterminizedStates
init|=
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
decl_stmt|;
DECL|method|FuzzyOptionsBuilder
specifier|public
name|FuzzyOptionsBuilder
parameter_list|()
block|{         }
comment|/**          * Sets the level of fuzziness used to create suggestions using a {@link Fuzziness} instance.          * The default value is {@link Fuzziness#ONE} which allows for an "edit distance" of one.          */
DECL|method|setFuzziness
specifier|public
name|FuzzyOptionsBuilder
name|setFuzziness
parameter_list|(
name|int
name|editDistance
parameter_list|)
block|{
name|this
operator|.
name|editDistance
operator|=
name|editDistance
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the level of fuzziness used to create suggestions using a {@link Fuzziness} instance.          * The default value is {@link Fuzziness#ONE} which allows for an "edit distance" of one.          */
DECL|method|setFuzziness
specifier|public
name|FuzzyOptionsBuilder
name|setFuzziness
parameter_list|(
name|Fuzziness
name|fuzziness
parameter_list|)
block|{
name|this
operator|.
name|editDistance
operator|=
name|fuzziness
operator|.
name|asDistance
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if transpositions (swapping one character for another) counts as one character          * change or two.          * Defaults to true, meaning it uses the fuzzier option of counting transpositions as          * a single change.          */
DECL|method|setTranspositions
specifier|public
name|FuzzyOptionsBuilder
name|setTranspositions
parameter_list|(
name|boolean
name|transpositions
parameter_list|)
block|{
name|this
operator|.
name|transpositions
operator|=
name|transpositions
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the minimum length of input string before fuzzy suggestions are returned, defaulting          * to 3.          */
DECL|method|setFuzzyMinLength
specifier|public
name|FuzzyOptionsBuilder
name|setFuzzyMinLength
parameter_list|(
name|int
name|fuzzyMinLength
parameter_list|)
block|{
name|this
operator|.
name|fuzzyMinLength
operator|=
name|fuzzyMinLength
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the minimum length of the input, which is not checked for fuzzy alternatives, defaults to 1          */
DECL|method|setFuzzyPrefixLength
specifier|public
name|FuzzyOptionsBuilder
name|setFuzzyPrefixLength
parameter_list|(
name|int
name|fuzzyPrefixLength
parameter_list|)
block|{
name|this
operator|.
name|fuzzyPrefixLength
operator|=
name|fuzzyPrefixLength
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum automaton states allowed for the fuzzy expansion          */
DECL|method|setMaxDeterminizedStates
specifier|public
name|FuzzyOptionsBuilder
name|setMaxDeterminizedStates
parameter_list|(
name|int
name|maxDeterminizedStates
parameter_list|)
block|{
name|this
operator|.
name|maxDeterminizedStates
operator|=
name|maxDeterminizedStates
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to true if all measurements (like edit distance, transpositions and lengths) are in unicode          * code points (actual letters) instead of bytes. Default is false.          */
DECL|method|setUnicodeAware
specifier|public
name|FuzzyOptionsBuilder
name|setUnicodeAware
parameter_list|(
name|boolean
name|unicodeAware
parameter_list|)
block|{
name|this
operator|.
name|unicodeAware
operator|=
name|unicodeAware
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns the maximum number of edits          */
DECL|method|getEditDistance
name|int
name|getEditDistance
parameter_list|()
block|{
return|return
name|editDistance
return|;
block|}
comment|/**          * Returns if transpositions option is set          *          * if transpositions is set, then swapping one character for another counts as one edit instead of two.          */
DECL|method|isTranspositions
name|boolean
name|isTranspositions
parameter_list|()
block|{
return|return
name|transpositions
return|;
block|}
comment|/**          * Returns the length of input prefix after which edits are applied          */
DECL|method|getFuzzyMinLength
name|int
name|getFuzzyMinLength
parameter_list|()
block|{
return|return
name|fuzzyMinLength
return|;
block|}
comment|/**          * Returns the minimum length of the input prefix required to apply any edits          */
DECL|method|getFuzzyPrefixLength
name|int
name|getFuzzyPrefixLength
parameter_list|()
block|{
return|return
name|fuzzyPrefixLength
return|;
block|}
comment|/**          * Returns if all measurements (like edit distance, transpositions and lengths) are in unicode code          * points (actual letters) instead of bytes.          */
DECL|method|isUnicodeAware
name|boolean
name|isUnicodeAware
parameter_list|()
block|{
return|return
name|unicodeAware
return|;
block|}
comment|/**          * Returns the maximum automaton states allowed for fuzzy expansion          */
DECL|method|getMaxDeterminizedStates
name|int
name|getMaxDeterminizedStates
parameter_list|()
block|{
return|return
name|maxDeterminizedStates
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|FUZZY_OPTIONS
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fuzziness
operator|.
name|FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|editDistance
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|TRANSPOSITION_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|transpositions
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MIN_LENGTH_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fuzzyMinLength
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|PREFIX_LENGTH_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fuzzyPrefixLength
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|UNICODE_AWARE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|unicodeAware
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MAX_DETERMINIZED_STATES_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxDeterminizedStates
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
comment|/**      * Options for regular expression queries      */
DECL|class|RegexOptionsBuilder
specifier|public
specifier|static
class|class
name|RegexOptionsBuilder
implements|implements
name|ToXContent
block|{
DECL|field|REGEX_OPTIONS
specifier|static
specifier|final
name|ParseField
name|REGEX_OPTIONS
init|=
operator|new
name|ParseField
argument_list|(
literal|"regex"
argument_list|)
decl_stmt|;
DECL|field|FLAGS_VALUE
specifier|static
specifier|final
name|ParseField
name|FLAGS_VALUE
init|=
operator|new
name|ParseField
argument_list|(
literal|"flags"
argument_list|,
literal|"flags_value"
argument_list|)
decl_stmt|;
DECL|field|MAX_DETERMINIZED_STATES
specifier|static
specifier|final
name|ParseField
name|MAX_DETERMINIZED_STATES
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_determinized_states"
argument_list|)
decl_stmt|;
DECL|field|flagsValue
specifier|private
name|int
name|flagsValue
init|=
name|RegExp
operator|.
name|ALL
decl_stmt|;
DECL|field|maxDeterminizedStates
specifier|private
name|int
name|maxDeterminizedStates
init|=
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
decl_stmt|;
DECL|method|RegexOptionsBuilder
specifier|public
name|RegexOptionsBuilder
parameter_list|()
block|{         }
comment|/**          * Sets the regular expression syntax flags          * see {@link RegexpFlag}          */
DECL|method|setFlags
specifier|public
name|RegexOptionsBuilder
name|setFlags
parameter_list|(
name|String
name|flags
parameter_list|)
block|{
name|this
operator|.
name|flagsValue
operator|=
name|RegexpFlag
operator|.
name|resolveValue
argument_list|(
name|flags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum automaton states allowed for the regular expression expansion          */
DECL|method|setMaxDeterminizedStates
specifier|public
name|RegexOptionsBuilder
name|setMaxDeterminizedStates
parameter_list|(
name|int
name|maxDeterminizedStates
parameter_list|)
block|{
name|this
operator|.
name|maxDeterminizedStates
operator|=
name|maxDeterminizedStates
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getFlagsValue
name|int
name|getFlagsValue
parameter_list|()
block|{
return|return
name|flagsValue
return|;
block|}
DECL|method|getMaxDeterminizedStates
name|int
name|getMaxDeterminizedStates
parameter_list|()
block|{
return|return
name|maxDeterminizedStates
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|REGEX_OPTIONS
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|FLAGS_VALUE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|flagsValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MAX_DETERMINIZED_STATES
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxDeterminizedStates
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
comment|/**      * Sets the prefix to provide completions for.      * The prefix gets analyzed by the suggest analyzer.      */
DECL|method|prefix
specifier|public
name|CompletionSuggestionBuilder
name|prefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|super
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Same as {@link #prefix(String)} with fuzziness of<code>fuzziness</code>      */
DECL|method|prefix
specifier|public
name|CompletionSuggestionBuilder
name|prefix
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Fuzziness
name|fuzziness
parameter_list|)
block|{
name|super
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|this
operator|.
name|fuzzyOptionsBuilder
operator|=
operator|new
name|FuzzyOptionsBuilder
argument_list|()
operator|.
name|setFuzziness
argument_list|(
name|fuzziness
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Same as {@link #prefix(String)} with full fuzzy options      * see {@link FuzzyOptionsBuilder}      */
DECL|method|prefix
specifier|public
name|CompletionSuggestionBuilder
name|prefix
parameter_list|(
name|String
name|prefix
parameter_list|,
name|FuzzyOptionsBuilder
name|fuzzyOptionsBuilder
parameter_list|)
block|{
name|super
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|this
operator|.
name|fuzzyOptionsBuilder
operator|=
name|fuzzyOptionsBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a regular expression pattern for prefixes to provide completions for.      */
DECL|method|regex
specifier|public
name|CompletionSuggestionBuilder
name|regex
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
name|super
operator|.
name|setRegex
argument_list|(
name|regex
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Same as {@link #regex(String)} with full regular expression options      * see {@link RegexOptionsBuilder}      */
DECL|method|regex
specifier|public
name|CompletionSuggestionBuilder
name|regex
parameter_list|(
name|String
name|regex
parameter_list|,
name|RegexOptionsBuilder
name|regexOptionsBuilder
parameter_list|)
block|{
name|this
operator|.
name|regex
argument_list|(
name|regex
argument_list|)
expr_stmt|;
name|this
operator|.
name|regexOptionsBuilder
operator|=
name|regexOptionsBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the fields to be returned as suggestion payload.      * Note: Only doc values enabled fields are supported      */
DECL|method|payload
specifier|public
name|CompletionSuggestionBuilder
name|payload
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|payloadFields
argument_list|,
name|fields
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets query contexts for a category context      * @param name of the category context to execute on      * @param queryContexts a list of {@link CategoryQueryContext}      */
DECL|method|categoryContexts
specifier|public
name|CompletionSuggestionBuilder
name|categoryContexts
parameter_list|(
name|String
name|name
parameter_list|,
name|CategoryQueryContext
modifier|...
name|queryContexts
parameter_list|)
block|{
return|return
name|contexts
argument_list|(
name|name
argument_list|,
name|queryContexts
argument_list|)
return|;
block|}
comment|/**      * Sets query contexts for a geo context      * @param name of the geo context to execute on      * @param queryContexts a list of {@link GeoQueryContext}      */
DECL|method|geoContexts
specifier|public
name|CompletionSuggestionBuilder
name|geoContexts
parameter_list|(
name|String
name|name
parameter_list|,
name|GeoQueryContext
modifier|...
name|queryContexts
parameter_list|)
block|{
return|return
name|contexts
argument_list|(
name|name
argument_list|,
name|queryContexts
argument_list|)
return|;
block|}
DECL|method|contexts
specifier|private
name|CompletionSuggestionBuilder
name|contexts
parameter_list|(
name|String
name|name
parameter_list|,
name|ToXContent
modifier|...
name|queryContexts
parameter_list|)
block|{
name|List
argument_list|<
name|ToXContent
argument_list|>
name|contexts
init|=
name|this
operator|.
name|queryContexts
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|contexts
operator|==
literal|null
condition|)
block|{
name|contexts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryContexts
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|addAll
argument_list|(
name|contexts
argument_list|,
name|queryContexts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|innerToXContent
specifier|protected
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|payloadFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|PAYLOAD_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|payloadFields
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fuzzyOptionsBuilder
operator|!=
literal|null
condition|)
block|{
name|fuzzyOptionsBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regexOptionsBuilder
operator|!=
literal|null
condition|)
block|{
name|regexOptionsBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryContexts
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|CONTEXTS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ToXContent
argument_list|>
argument_list|>
name|entry
range|:
name|this
operator|.
name|queryContexts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ToXContent
name|queryContext
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|queryContext
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

