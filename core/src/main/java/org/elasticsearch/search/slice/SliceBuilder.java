begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.slice
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|slice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ToXContentToBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  *  A slice builder allowing to split a scroll in multiple partitions.  *  If the provided field is the "_uid" it uses a {@link org.elasticsearch.search.slice.TermsSliceQuery}  *  to do the slicing. The slicing is done at the shard level first and then each shard is splitted in multiple slices.  *  For instance if the number of shards is equal to 2 and the user requested 4 slices  *  then the slices 0 and 2 are assigned to the first shard and the slices 1 and 3 are assigned to the second shard.  *  This way the total number of bitsets that we need to build on each shard is bounded by the number of slices  *  (instead of {@code numShards*numSlices}).  *  Otherwise the provided field must be a numeric and doc_values must be enabled. In that case a  *  {@link org.elasticsearch.search.slice.DocValuesSliceQuery} is used to filter the results.  */
end_comment

begin_class
DECL|class|SliceBuilder
specifier|public
class|class
name|SliceBuilder
extends|extends
name|ToXContentToBytes
implements|implements
name|Writeable
block|{
DECL|field|FIELD_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FIELD_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
DECL|field|ID_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|ID_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
DECL|field|MAX_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MAX_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|ObjectParser
argument_list|<
name|SliceBuilder
argument_list|,
name|QueryParseContext
argument_list|>
name|PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"slice"
argument_list|,
name|SliceBuilder
operator|::
operator|new
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareString
argument_list|(
name|SliceBuilder
operator|::
name|setField
argument_list|,
name|FIELD_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|SliceBuilder
operator|::
name|setId
argument_list|,
name|ID_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|SliceBuilder
operator|::
name|setMax
argument_list|,
name|MAX_FIELD
argument_list|)
expr_stmt|;
block|}
comment|/** Name of field to slice against (_uid by default) */
DECL|field|field
specifier|private
name|String
name|field
init|=
name|UidFieldMapper
operator|.
name|NAME
decl_stmt|;
comment|/** The id of the slice */
DECL|field|id
specifier|private
name|int
name|id
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Max number of slices */
DECL|field|max
specifier|private
name|int
name|max
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|SliceBuilder
specifier|private
name|SliceBuilder
parameter_list|()
block|{}
DECL|method|SliceBuilder
specifier|public
name|SliceBuilder
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|this
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|id
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param field The name of the field      * @param id The id of the slice      * @param max The maximum number of slices      */
DECL|method|SliceBuilder
specifier|public
name|SliceBuilder
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|setField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|setMax
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
DECL|method|SliceBuilder
specifier|public
name|SliceBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|field
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
DECL|method|setField
specifier|private
name|SliceBuilder
name|setField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field name is null or empty"
argument_list|)
throw|;
block|}
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The name of the field to slice against      */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|this
operator|.
name|field
return|;
block|}
DECL|method|setId
specifier|private
name|SliceBuilder
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"id must be greater than or equal to 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|max
operator|!=
operator|-
literal|1
operator|&&
name|id
operator|>=
name|max
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"max must be greater than id"
argument_list|)
throw|;
block|}
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The id of the slice.      */
DECL|method|getId
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setMax
specifier|private
name|SliceBuilder
name|setMax
parameter_list|(
name|int
name|max
parameter_list|)
block|{
if|if
condition|(
name|max
operator|<=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"max must be greater than 1"
argument_list|)
throw|;
block|}
if|if
condition|(
name|id
operator|!=
operator|-
literal|1
operator|&&
name|id
operator|>=
name|max
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"max must be greater than id"
argument_list|)
throw|;
block|}
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The maximum number of slices.      */
DECL|method|getMax
specifier|public
name|int
name|getMax
parameter_list|()
block|{
return|return
name|max
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|innerToXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
name|void
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|FIELD_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|ID_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MAX_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|SliceBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|SliceBuilder
name|builder
init|=
name|PARSER
operator|.
name|parse
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|SliceBuilder
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|SliceBuilder
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SliceBuilder
name|o
init|=
operator|(
name|SliceBuilder
operator|)
name|other
decl_stmt|;
return|return
operator|(
operator|(
name|field
operator|==
literal|null
operator|&&
name|o
operator|.
name|field
operator|==
literal|null
operator|)
operator|||
name|field
operator|.
name|equals
argument_list|(
name|o
operator|.
name|field
argument_list|)
operator|)
operator|&&
name|id
operator|==
name|o
operator|.
name|id
operator|&&
name|o
operator|.
name|max
operator|==
name|max
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|this
operator|.
name|field
argument_list|,
name|this
operator|.
name|id
argument_list|,
name|this
operator|.
name|max
argument_list|)
return|;
block|}
DECL|method|toFilter
specifier|public
name|Query
name|toFilter
parameter_list|(
name|QueryShardContext
name|context
parameter_list|,
name|int
name|shardId
parameter_list|,
name|int
name|numShards
parameter_list|)
block|{
specifier|final
name|MappedFieldType
name|type
init|=
name|context
operator|.
name|fieldMapper
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field "
operator|+
name|field
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|boolean
name|useTermQuery
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|UidFieldMapper
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|useTermQuery
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|hasDocValues
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot load numeric doc values on "
operator|+
name|field
argument_list|)
throw|;
block|}
else|else
block|{
name|IndexFieldData
name|ifm
init|=
name|context
operator|.
name|getForField
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifm
operator|instanceof
name|IndexNumericFieldData
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot load numeric doc values on "
operator|+
name|field
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|numShards
operator|==
literal|1
condition|)
block|{
return|return
name|useTermQuery
condition|?
operator|new
name|TermsSliceQuery
argument_list|(
name|field
argument_list|,
name|id
argument_list|,
name|max
argument_list|)
else|:
operator|new
name|DocValuesSliceQuery
argument_list|(
name|field
argument_list|,
name|id
argument_list|,
name|max
argument_list|)
return|;
block|}
if|if
condition|(
name|max
operator|>=
name|numShards
condition|)
block|{
comment|// the number of slices is greater than the number of shards
comment|// in such case we can reduce the number of requested shards by slice
comment|// first we check if the slice is responsible of this shard
name|int
name|targetShard
init|=
name|id
operator|%
name|numShards
decl_stmt|;
if|if
condition|(
name|targetShard
operator|!=
name|shardId
condition|)
block|{
comment|// the shard is not part of this slice, we can skip it.
return|return
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"this shard is not part of the slice"
argument_list|)
return|;
block|}
comment|// compute the number of slices where this shard appears
name|int
name|numSlicesInShard
init|=
name|max
operator|/
name|numShards
decl_stmt|;
name|int
name|rest
init|=
name|max
operator|%
name|numShards
decl_stmt|;
if|if
condition|(
name|rest
operator|>
name|targetShard
condition|)
block|{
name|numSlicesInShard
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|numSlicesInShard
operator|==
literal|1
condition|)
block|{
comment|// this shard has only one slice so we must check all the documents
return|return
operator|new
name|MatchAllDocsQuery
argument_list|()
return|;
block|}
comment|// get the new slice id for this shard
name|int
name|shardSlice
init|=
name|id
operator|/
name|numShards
decl_stmt|;
return|return
name|useTermQuery
condition|?
operator|new
name|TermsSliceQuery
argument_list|(
name|field
argument_list|,
name|shardSlice
argument_list|,
name|numSlicesInShard
argument_list|)
else|:
operator|new
name|DocValuesSliceQuery
argument_list|(
name|field
argument_list|,
name|shardSlice
argument_list|,
name|numSlicesInShard
argument_list|)
return|;
block|}
comment|// the number of shards is greater than the number of slices
comment|// check if the shard is assigned to the slice
name|int
name|targetSlice
init|=
name|shardId
operator|%
name|max
decl_stmt|;
if|if
condition|(
name|id
operator|!=
name|targetSlice
condition|)
block|{
comment|// the shard is not part of this slice, we can skip it.
return|return
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"this shard is not part of the slice"
argument_list|)
return|;
block|}
return|return
operator|new
name|MatchAllDocsQuery
argument_list|()
return|;
block|}
block|}
end_class

end_unit

