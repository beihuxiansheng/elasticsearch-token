begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_comment
comment|/**  * This class is a base class for all search releated results. It contains the shard target it  * was executed against, a shard index used to reference the result on the coordinating node  * and a request ID that is used to reference the request context on the executing node. The  * request ID is particularly important since it is used to reference and maintain a context  * across search phases to ensure the same point in time snapshot is used for querying and  * fetching etc.  */
end_comment

begin_class
DECL|class|SearchPhaseResult
specifier|public
specifier|abstract
class|class
name|SearchPhaseResult
extends|extends
name|TransportResponse
implements|implements
name|Streamable
block|{
DECL|field|searchShardTarget
specifier|private
name|SearchShardTarget
name|searchShardTarget
decl_stmt|;
DECL|field|shardIndex
specifier|private
name|int
name|shardIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|requestId
specifier|protected
name|long
name|requestId
decl_stmt|;
comment|/**      * Returns the results request ID that is used to reference the search context on the executing      * node      */
DECL|method|getRequestId
specifier|public
name|long
name|getRequestId
parameter_list|()
block|{
return|return
name|requestId
return|;
block|}
comment|/**      * Returns the shard index in the context of the currently executing search request that is      * used for accounting on the coordinating node      */
DECL|method|getShardIndex
specifier|public
name|int
name|getShardIndex
parameter_list|()
block|{
assert|assert
name|shardIndex
operator|!=
operator|-
literal|1
operator|:
literal|"shardIndex is not set"
assert|;
return|return
name|shardIndex
return|;
block|}
DECL|method|getSearchShardTarget
specifier|public
name|SearchShardTarget
name|getSearchShardTarget
parameter_list|()
block|{
return|return
name|searchShardTarget
return|;
block|}
DECL|method|setSearchShardTarget
specifier|public
name|void
name|setSearchShardTarget
parameter_list|(
name|SearchShardTarget
name|shardTarget
parameter_list|)
block|{
name|this
operator|.
name|searchShardTarget
operator|=
name|shardTarget
expr_stmt|;
block|}
DECL|method|setShardIndex
specifier|public
name|void
name|setShardIndex
parameter_list|(
name|int
name|shardIndex
parameter_list|)
block|{
assert|assert
name|shardIndex
operator|>=
literal|0
operator|:
literal|"shardIndex must be>= 0 but was: "
operator|+
name|shardIndex
assert|;
name|this
operator|.
name|shardIndex
operator|=
name|shardIndex
expr_stmt|;
block|}
comment|/**      * Returns the query result iff it's included in this response otherwise<code>null</code>      */
DECL|method|queryResult
specifier|public
name|QuerySearchResult
name|queryResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Returns the fetch result iff it's included in this response otherwise<code>null</code>      */
DECL|method|fetchResult
specifier|public
name|FetchSearchResult
name|fetchResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

