begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.search.profile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
package|;
end_package

begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|aggregation
operator|.
name|AggregationProfileShardResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|aggregation
operator|.
name|AggregationProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|QueryProfileShardResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|QueryProfiler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A container class to hold all the profile results across all shards.  Internally  * holds a map of shard ID -&gt; Profiled results  */
end_comment

begin_class
DECL|class|SearchProfileShardResults
specifier|public
specifier|final
class|class
name|SearchProfileShardResults
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|shardResults
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ProfileShardResult
argument_list|>
name|shardResults
decl_stmt|;
DECL|method|SearchProfileShardResults
specifier|public
name|SearchProfileShardResults
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ProfileShardResult
argument_list|>
name|shardResults
parameter_list|)
block|{
name|this
operator|.
name|shardResults
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|shardResults
argument_list|)
expr_stmt|;
block|}
DECL|method|SearchProfileShardResults
specifier|public
name|SearchProfileShardResults
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|shardResults
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|ProfileShardResult
name|shardResult
init|=
operator|new
name|ProfileShardResult
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|shardResults
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|shardResult
argument_list|)
expr_stmt|;
block|}
name|shardResults
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|shardResults
argument_list|)
expr_stmt|;
block|}
DECL|method|getShardResults
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ProfileShardResult
argument_list|>
name|getShardResults
parameter_list|()
block|{
return|return
name|this
operator|.
name|shardResults
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|shardResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ProfileShardResult
argument_list|>
name|entry
range|:
name|shardResults
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"profile"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"shards"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ProfileShardResult
argument_list|>
name|entry
range|:
name|shardResults
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"searches"
argument_list|)
expr_stmt|;
for|for
control|(
name|QueryProfileShardResult
name|result
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getQueryProfileResults
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|result
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAggregationProfileResults
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Helper method to convert Profiler into InternalProfileShardResults, which      * can be serialized to other nodes, emitted as JSON, etc.      *      * @param profilers      *            The {@link Profilers} to convert into results      * @return A {@link ProfileShardResult} representing the results for this      *         shard      */
DECL|method|buildShardResults
specifier|public
specifier|static
name|ProfileShardResult
name|buildShardResults
parameter_list|(
name|Profilers
name|profilers
parameter_list|)
block|{
name|List
argument_list|<
name|QueryProfiler
argument_list|>
name|queryProfilers
init|=
name|profilers
operator|.
name|getQueryProfilers
argument_list|()
decl_stmt|;
name|AggregationProfiler
name|aggProfiler
init|=
name|profilers
operator|.
name|getAggregationProfiler
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryProfileShardResult
argument_list|>
name|queryResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|queryProfilers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|QueryProfiler
name|queryProfiler
range|:
name|queryProfilers
control|)
block|{
name|QueryProfileShardResult
name|result
init|=
operator|new
name|QueryProfileShardResult
argument_list|(
name|queryProfiler
operator|.
name|getTree
argument_list|()
argument_list|,
name|queryProfiler
operator|.
name|getRewriteTime
argument_list|()
argument_list|,
name|queryProfiler
operator|.
name|getCollector
argument_list|()
argument_list|)
decl_stmt|;
name|queryResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|AggregationProfileShardResult
name|aggResults
init|=
operator|new
name|AggregationProfileShardResult
argument_list|(
name|aggProfiler
operator|.
name|getTree
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ProfileShardResult
argument_list|(
name|queryResults
argument_list|,
name|aggResults
argument_list|)
return|;
block|}
block|}
end_class

end_unit

