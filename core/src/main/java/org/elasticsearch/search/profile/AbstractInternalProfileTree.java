begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|QueryProfileBreakdown
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AbstractInternalProfileTree
specifier|public
specifier|abstract
class|class
name|AbstractInternalProfileTree
parameter_list|<
name|PB
extends|extends
name|AbstractProfileBreakdown
parameter_list|<
name|?
parameter_list|>
parameter_list|,
name|E
parameter_list|>
block|{
DECL|field|timings
specifier|protected
name|ArrayList
argument_list|<
name|PB
argument_list|>
name|timings
decl_stmt|;
comment|/** Maps the Query to it's list of children.  This is basically the dependency tree */
DECL|field|tree
specifier|protected
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|tree
decl_stmt|;
comment|/** A list of the original queries, keyed by index position */
DECL|field|elements
specifier|protected
name|ArrayList
argument_list|<
name|E
argument_list|>
name|elements
decl_stmt|;
comment|/** A list of top-level "roots".  Each root can have its own tree of profiles */
DECL|field|roots
specifier|protected
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|roots
decl_stmt|;
comment|/** A temporary stack used to record where we are in the dependency tree. */
DECL|field|stack
specifier|protected
name|Deque
argument_list|<
name|Integer
argument_list|>
name|stack
decl_stmt|;
DECL|field|currentToken
specifier|private
name|int
name|currentToken
init|=
literal|0
decl_stmt|;
DECL|method|AbstractInternalProfileTree
specifier|public
name|AbstractInternalProfileTree
parameter_list|()
block|{
name|timings
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|stack
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|tree
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|elements
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|roots
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a {@link QueryProfileBreakdown} for a scoring query.  Scoring queries (e.g. those      * that are past the rewrite phase and are now being wrapped by createWeight() ) follow      * a recursive progression.  We can track the dependency tree by a simple stack      *      * The only hiccup is that the first scoring query will be identical to the last rewritten      * query, so we need to take special care to fix that      *      * @param query The scoring query we wish to profile      * @return      A ProfileBreakdown for this query      */
DECL|method|getProfileBreakdown
specifier|public
name|PB
name|getProfileBreakdown
parameter_list|(
name|E
name|query
parameter_list|)
block|{
name|int
name|token
init|=
name|currentToken
decl_stmt|;
name|boolean
name|stackEmpty
init|=
name|stack
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
comment|// If the stack is empty, we are a new root query
if|if
condition|(
name|stackEmpty
condition|)
block|{
comment|// We couldn't find a rewritten query to attach to, so just add it as a
comment|// top-level root. This is just a precaution: it really shouldn't happen.
comment|// We would only get here if a top-level query that never rewrites for some reason.
name|roots
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// Increment the token since we are adding a new node, but notably, do not
comment|// updateParent() because this was added as a root
name|currentToken
operator|+=
literal|1
expr_stmt|;
name|stack
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
name|addDependencyNode
argument_list|(
name|query
argument_list|,
name|token
argument_list|)
return|;
block|}
name|updateParent
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// Increment the token since we are adding a new node
name|currentToken
operator|+=
literal|1
expr_stmt|;
name|stack
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
name|addDependencyNode
argument_list|(
name|query
argument_list|,
name|token
argument_list|)
return|;
block|}
comment|/**      * Helper method to add a new node to the dependency tree.      *      * Initializes a new list in the dependency tree, saves the query and      * generates a new {@link QueryProfileBreakdown} to track the timings of      * this query      *      * @param element      *            The element to profile      * @param token      *            The assigned token for this element      * @return A ProfileBreakdown to profile this element      */
DECL|method|addDependencyNode
specifier|private
name|PB
name|addDependencyNode
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|token
parameter_list|)
block|{
comment|// Add a new slot in the dependency tree
name|tree
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// Save our query for lookup later
name|elements
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|PB
name|queryTimings
init|=
name|createProfileBreakdown
argument_list|()
decl_stmt|;
name|timings
operator|.
name|add
argument_list|(
name|token
argument_list|,
name|queryTimings
argument_list|)
expr_stmt|;
return|return
name|queryTimings
return|;
block|}
DECL|method|createProfileBreakdown
specifier|protected
specifier|abstract
name|PB
name|createProfileBreakdown
parameter_list|()
function_decl|;
comment|/**      * Removes the last (e.g. most recent) value on the stack      */
DECL|method|pollLast
specifier|public
name|void
name|pollLast
parameter_list|()
block|{
name|stack
operator|.
name|pollLast
argument_list|()
expr_stmt|;
block|}
comment|/**      * After the query has been run and profiled, we need to merge the flat timing map      * with the dependency graph to build a data structure that mirrors the original      * query tree      *      * @return a hierarchical representation of the profiled query tree      */
DECL|method|getTree
specifier|public
name|List
argument_list|<
name|ProfileResult
argument_list|>
name|getTree
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ProfileResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|root
range|:
name|roots
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|doGetTree
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**      * Recursive helper to finalize a node in the dependency tree      * @param token  The node we are currently finalizing      * @return       A hierarchical representation of the tree inclusive of children at this level      */
DECL|method|doGetTree
specifier|private
name|ProfileResult
name|doGetTree
parameter_list|(
name|int
name|token
parameter_list|)
block|{
name|E
name|element
init|=
name|elements
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|PB
name|breakdown
init|=
name|timings
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|timings
init|=
name|breakdown
operator|.
name|toTimingMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|children
init|=
name|tree
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ProfileResult
argument_list|>
name|childrenProfileResults
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
name|childrenProfileResults
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|child
range|:
name|children
control|)
block|{
name|ProfileResult
name|childNode
init|=
name|doGetTree
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|childrenProfileResults
operator|.
name|add
argument_list|(
name|childNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO this would be better done bottom-up instead of top-down to avoid
comment|// calculating the same times over and over...but worth the effort?
name|long
name|nodeTime
init|=
name|getNodeTime
argument_list|(
name|timings
argument_list|,
name|childrenProfileResults
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|getTypeFromElement
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|String
name|description
init|=
name|getDescriptionFromElement
argument_list|(
name|element
argument_list|)
decl_stmt|;
return|return
operator|new
name|ProfileResult
argument_list|(
name|type
argument_list|,
name|description
argument_list|,
name|timings
argument_list|,
name|childrenProfileResults
argument_list|,
name|nodeTime
argument_list|)
return|;
block|}
DECL|method|getTypeFromElement
specifier|protected
specifier|abstract
name|String
name|getTypeFromElement
parameter_list|(
name|E
name|element
parameter_list|)
function_decl|;
DECL|method|getDescriptionFromElement
specifier|protected
specifier|abstract
name|String
name|getDescriptionFromElement
parameter_list|(
name|E
name|element
parameter_list|)
function_decl|;
comment|/**      * Internal helper to add a child to the current parent node      *      * @param childToken The child to add to the current parent      */
DECL|method|updateParent
specifier|private
name|void
name|updateParent
parameter_list|(
name|int
name|childToken
parameter_list|)
block|{
name|Integer
name|parent
init|=
name|stack
operator|.
name|peekLast
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|parentNode
init|=
name|tree
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|parentNode
operator|.
name|add
argument_list|(
name|childToken
argument_list|)
expr_stmt|;
name|tree
operator|.
name|set
argument_list|(
name|parent
argument_list|,
name|parentNode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internal helper to calculate the time of a node, inclusive of children      *      * @param timings      *            A map of breakdown timing for the node      * @param children      *            All children profile results at this node      * @return The total time at this node, inclusive of children      */
DECL|method|getNodeTime
specifier|private
specifier|static
name|long
name|getNodeTime
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|timings
parameter_list|,
name|List
argument_list|<
name|ProfileResult
argument_list|>
name|children
parameter_list|)
block|{
name|long
name|nodeTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|time
range|:
name|timings
operator|.
name|values
argument_list|()
control|)
block|{
name|nodeTime
operator|+=
name|time
expr_stmt|;
block|}
comment|// Then add up our children
for|for
control|(
name|ProfileResult
name|child
range|:
name|children
control|)
block|{
name|nodeTime
operator|+=
name|getNodeTime
argument_list|(
name|child
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|,
name|child
operator|.
name|getProfiledChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeTime
return|;
block|}
block|}
end_class

end_unit

