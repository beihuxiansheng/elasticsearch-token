begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ContextIndexSearcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Wrapper around several {@link QueryProfiler}s that makes management easier. */
end_comment

begin_class
DECL|class|Profilers
specifier|public
specifier|final
class|class
name|Profilers
block|{
DECL|field|searcher
specifier|private
specifier|final
name|ContextIndexSearcher
name|searcher
decl_stmt|;
DECL|field|profilers
specifier|private
specifier|final
name|List
argument_list|<
name|QueryProfiler
argument_list|>
name|profilers
decl_stmt|;
comment|/** Sole constructor. This {@link Profilers} instance will initially wrap one {@link QueryProfiler}. */
DECL|method|Profilers
specifier|public
name|Profilers
parameter_list|(
name|ContextIndexSearcher
name|searcher
parameter_list|)
block|{
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|profilers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|addProfiler
argument_list|()
expr_stmt|;
block|}
comment|/** Switch to a new profile. */
DECL|method|addProfiler
specifier|public
name|QueryProfiler
name|addProfiler
parameter_list|()
block|{
name|QueryProfiler
name|profiler
init|=
operator|new
name|QueryProfiler
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|setProfiler
argument_list|(
name|profiler
argument_list|)
expr_stmt|;
name|profilers
operator|.
name|add
argument_list|(
name|profiler
argument_list|)
expr_stmt|;
return|return
name|profiler
return|;
block|}
comment|/** Get the current profiler. */
DECL|method|getCurrent
specifier|public
name|QueryProfiler
name|getCurrent
parameter_list|()
block|{
return|return
name|profilers
operator|.
name|get
argument_list|(
name|profilers
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** Return the list of all created {@link QueryProfiler}s so far. */
DECL|method|getProfilers
specifier|public
name|List
argument_list|<
name|QueryProfiler
argument_list|>
name|getProfilers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|profilers
argument_list|)
return|;
block|}
block|}
end_class

end_unit

