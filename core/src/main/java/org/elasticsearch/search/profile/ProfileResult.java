begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class is the internal representation of a profiled Query, corresponding  * to a single node in the query tree.  It is built after the query has finished executing  * and is merely a structured representation, rather than the entity that collects the timing  * profile (see InternalProfiler for that)  *  * Each InternalProfileResult has a List of InternalProfileResults, which will contain  * "children" queries if applicable  */
end_comment

begin_class
DECL|class|ProfileResult
specifier|final
class|class
name|ProfileResult
implements|implements
name|Writeable
argument_list|<
name|ProfileResult
argument_list|>
implements|,
name|ToXContent
block|{
DECL|field|QUERY_TYPE
specifier|private
specifier|static
specifier|final
name|ParseField
name|QUERY_TYPE
init|=
operator|new
name|ParseField
argument_list|(
literal|"query_type"
argument_list|)
decl_stmt|;
DECL|field|LUCENE_DESCRIPTION
specifier|private
specifier|static
specifier|final
name|ParseField
name|LUCENE_DESCRIPTION
init|=
operator|new
name|ParseField
argument_list|(
literal|"lucene"
argument_list|)
decl_stmt|;
DECL|field|NODE_TIME
specifier|private
specifier|static
specifier|final
name|ParseField
name|NODE_TIME
init|=
operator|new
name|ParseField
argument_list|(
literal|"time"
argument_list|)
decl_stmt|;
DECL|field|CHILDREN
specifier|private
specifier|static
specifier|final
name|ParseField
name|CHILDREN
init|=
operator|new
name|ParseField
argument_list|(
literal|"children"
argument_list|)
decl_stmt|;
DECL|field|BREAKDOWN
specifier|private
specifier|static
specifier|final
name|ParseField
name|BREAKDOWN
init|=
operator|new
name|ParseField
argument_list|(
literal|"breakdown"
argument_list|)
decl_stmt|;
DECL|field|queryType
specifier|private
specifier|final
name|String
name|queryType
decl_stmt|;
DECL|field|luceneDescription
specifier|private
specifier|final
name|String
name|luceneDescription
decl_stmt|;
DECL|field|timings
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|timings
decl_stmt|;
DECL|field|nodeTime
specifier|private
specifier|final
name|long
name|nodeTime
decl_stmt|;
DECL|field|children
specifier|private
specifier|final
name|List
argument_list|<
name|ProfileResult
argument_list|>
name|children
decl_stmt|;
DECL|method|ProfileResult
specifier|public
name|ProfileResult
parameter_list|(
name|String
name|queryType
parameter_list|,
name|String
name|luceneDescription
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|timings
parameter_list|,
name|List
argument_list|<
name|ProfileResult
argument_list|>
name|children
parameter_list|,
name|long
name|nodeTime
parameter_list|)
block|{
name|this
operator|.
name|queryType
operator|=
name|queryType
expr_stmt|;
name|this
operator|.
name|luceneDescription
operator|=
name|luceneDescription
expr_stmt|;
name|this
operator|.
name|timings
operator|=
name|timings
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
name|this
operator|.
name|nodeTime
operator|=
name|nodeTime
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|ProfileResult
specifier|public
name|ProfileResult
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|queryType
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|luceneDescription
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|timingsSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|timings
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|timingsSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timingsSize
condition|;
operator|++
name|i
control|)
block|{
name|timings
operator|.
name|put
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|new
name|ProfileResult
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|queryType
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|luceneDescription
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|nodeTime
argument_list|)
expr_stmt|;
comment|// not Vlong because can be negative
name|out
operator|.
name|writeVInt
argument_list|(
name|timings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|timings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ProfileResult
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Retrieve the lucene description of this query (e.g. the "explain" text)      */
DECL|method|getLuceneDescription
specifier|public
name|String
name|getLuceneDescription
parameter_list|()
block|{
return|return
name|luceneDescription
return|;
block|}
comment|/**      * Retrieve the name of the query (e.g. "TermQuery")      */
DECL|method|getQueryName
specifier|public
name|String
name|getQueryName
parameter_list|()
block|{
return|return
name|queryType
return|;
block|}
comment|/**      * Returns the timing breakdown for this particular query node      */
DECL|method|getTimeBreakdown
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getTimeBreakdown
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|timings
argument_list|)
return|;
block|}
comment|/**      * Returns the total time (inclusive of children) for this query node.      *      * @return  elapsed time in nanoseconds      */
DECL|method|getTime
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|nodeTime
return|;
block|}
comment|/**      * Returns a list of all profiled children queries      */
DECL|method|getProfiledChildren
specifier|public
name|List
argument_list|<
name|ProfileResult
argument_list|>
name|getProfiledChildren
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|children
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|=
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|QUERY_TYPE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|queryType
argument_list|)
operator|.
name|field
argument_list|(
name|LUCENE_DESCRIPTION
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|luceneDescription
argument_list|)
operator|.
name|field
argument_list|(
name|NODE_TIME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%.10gms"
argument_list|,
call|(
name|double
call|)
argument_list|(
name|getTime
argument_list|()
operator|/
literal|1000000.0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
name|BREAKDOWN
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|timings
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|startArray
argument_list|(
name|CHILDREN
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ProfileResult
name|child
range|:
name|children
control|)
block|{
name|builder
operator|=
name|child
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|=
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|=
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

