begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BulkScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Weight wrapper that will compute how much time it takes to build the  * {@link Scorer} and then return a {@link Scorer} that is wrapped in  * order to compute timings as well.  */
end_comment

begin_class
DECL|class|ProfileWeight
specifier|public
specifier|final
class|class
name|ProfileWeight
extends|extends
name|Weight
block|{
DECL|field|subQueryWeight
specifier|private
specifier|final
name|Weight
name|subQueryWeight
decl_stmt|;
DECL|field|profile
specifier|private
specifier|final
name|QueryProfileBreakdown
name|profile
decl_stmt|;
DECL|method|ProfileWeight
specifier|public
name|ProfileWeight
parameter_list|(
name|Query
name|query
parameter_list|,
name|Weight
name|subQueryWeight
parameter_list|,
name|QueryProfileBreakdown
name|profile
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|subQueryWeight
operator|=
name|subQueryWeight
expr_stmt|;
name|this
operator|.
name|profile
operator|=
name|profile
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|profile
operator|.
name|startTime
argument_list|(
name|QueryTimingType
operator|.
name|BUILD_SCORER
argument_list|)
expr_stmt|;
specifier|final
name|Scorer
name|subQueryScorer
decl_stmt|;
try|try
block|{
name|subQueryScorer
operator|=
name|subQueryWeight
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|profile
operator|.
name|stopAndRecordTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|subQueryScorer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ProfileScorer
argument_list|(
name|this
argument_list|,
name|subQueryScorer
argument_list|,
name|profile
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bulkScorer
specifier|public
name|BulkScorer
name|bulkScorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We use the default bulk scorer instead of the specialized one. The reason
comment|// is that Lucene's BulkScorers do everything at once: finding matches,
comment|// scoring them and calling the collector, so they make it impossible to
comment|// see where time is spent, which is the purpose of query profiling.
comment|// The default bulk scorer will pull a scorer and iterate over matches,
comment|// this might be a significantly different execution path for some queries
comment|// like disjunctions, but in general this is what is done anyway
return|return
name|super
operator|.
name|bulkScorer
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|subQueryWeight
operator|.
name|explain
argument_list|(
name|context
argument_list|,
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValueForNormalization
specifier|public
name|float
name|getValueForNormalization
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|subQueryWeight
operator|.
name|getValueForNormalization
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|normalize
specifier|public
name|void
name|normalize
parameter_list|(
name|float
name|norm
parameter_list|,
name|float
name|topLevelBoost
parameter_list|)
block|{
name|subQueryWeight
operator|.
name|normalize
argument_list|(
name|norm
argument_list|,
name|topLevelBoost
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractTerms
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|set
parameter_list|)
block|{
name|subQueryWeight
operator|.
name|extractTerms
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

