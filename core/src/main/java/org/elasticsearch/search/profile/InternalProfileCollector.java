begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class wraps a Lucene Collector and times the execution of:  * - setScorer()  * - collect()  * - doSetNextReader()  * - needsScores()  *  * InternalProfiler facilitates the linking of the the Collector graph  */
end_comment

begin_class
DECL|class|InternalProfileCollector
specifier|public
class|class
name|InternalProfileCollector
implements|implements
name|Collector
block|{
comment|/**      * A more friendly representation of the Collector's class name      */
DECL|field|collectorName
specifier|private
specifier|final
name|String
name|collectorName
decl_stmt|;
comment|/**      * A "hint" to help provide some context about this Collector      */
DECL|field|reason
specifier|private
specifier|final
name|String
name|reason
decl_stmt|;
comment|/** The wrapped collector */
DECL|field|collector
specifier|private
specifier|final
name|ProfileCollector
name|collector
decl_stmt|;
comment|/**      * A list of "embedded" children collectors      */
DECL|field|children
specifier|private
specifier|final
name|List
argument_list|<
name|InternalProfileCollector
argument_list|>
name|children
decl_stmt|;
DECL|method|InternalProfileCollector
specifier|public
name|InternalProfileCollector
parameter_list|(
name|Collector
name|collector
parameter_list|,
name|String
name|reason
parameter_list|,
name|List
argument_list|<
name|InternalProfileCollector
argument_list|>
name|children
parameter_list|)
block|{
name|this
operator|.
name|collector
operator|=
operator|new
name|ProfileCollector
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
name|this
operator|.
name|collectorName
operator|=
name|deriveCollectorName
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
block|}
comment|/**      * @return the profiled time for this collector (inclusive of children)      */
DECL|method|getTime
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|collector
operator|.
name|getTime
argument_list|()
return|;
block|}
comment|/**      * @return a human readable "hint" about what this collector was used for      */
DECL|method|getReason
specifier|public
name|String
name|getReason
parameter_list|()
block|{
return|return
name|this
operator|.
name|reason
return|;
block|}
comment|/**      * @return the lucene class name of the collector      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|collectorName
return|;
block|}
comment|/**      * Creates a human-friendly representation of the Collector name.      *      * InternalBucket Collectors use the aggregation name in their toString() method,      * which makes the profiled output a bit nicer.      *      * @param c The Collector to derive a name from      * @return  A (hopefully) prettier name      */
DECL|method|deriveCollectorName
specifier|private
name|String
name|deriveCollectorName
parameter_list|(
name|Collector
name|c
parameter_list|)
block|{
name|String
name|s
init|=
name|c
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
comment|// MutiCollector which wraps multiple BucketCollectors is generated
comment|// via an anonymous class, so this corrects the lack of a name by
comment|// asking the enclosingClass
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|s
operator|=
name|c
operator|.
name|getClass
argument_list|()
operator|.
name|getEnclosingClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
comment|// Aggregation collector toString()'s include the user-defined agg name
if|if
condition|(
name|reason
operator|.
name|equals
argument_list|(
name|CollectorResult
operator|.
name|REASON_AGGREGATION
argument_list|)
operator|||
name|reason
operator|.
name|equals
argument_list|(
name|CollectorResult
operator|.
name|REASON_AGGREGATION_GLOBAL
argument_list|)
condition|)
block|{
name|s
operator|+=
literal|": ["
operator|+
name|c
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|collector
operator|.
name|getLeafCollector
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
name|collector
operator|.
name|needsScores
argument_list|()
return|;
block|}
DECL|method|getCollectorTree
specifier|public
name|CollectorResult
name|getCollectorTree
parameter_list|()
block|{
return|return
name|InternalProfileCollector
operator|.
name|doGetCollectorTree
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|doGetCollectorTree
specifier|private
specifier|static
name|CollectorResult
name|doGetCollectorTree
parameter_list|(
name|InternalProfileCollector
name|collector
parameter_list|)
block|{
name|List
argument_list|<
name|CollectorResult
argument_list|>
name|childResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|collector
operator|.
name|children
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|InternalProfileCollector
name|child
range|:
name|collector
operator|.
name|children
control|)
block|{
name|CollectorResult
name|result
init|=
name|doGetCollectorTree
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|childResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CollectorResult
argument_list|(
name|collector
operator|.
name|getName
argument_list|()
argument_list|,
name|collector
operator|.
name|getReason
argument_list|()
argument_list|,
name|collector
operator|.
name|getTime
argument_list|()
argument_list|,
name|childResults
argument_list|)
return|;
block|}
block|}
end_class

end_unit

