begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|AbstractProfiler
specifier|public
class|class
name|AbstractProfiler
parameter_list|<
name|PB
extends|extends
name|AbstractProfileBreakdown
parameter_list|<
name|?
parameter_list|>
parameter_list|,
name|E
parameter_list|>
block|{
DECL|field|profileTree
specifier|protected
specifier|final
name|AbstractInternalProfileTree
argument_list|<
name|PB
argument_list|,
name|E
argument_list|>
name|profileTree
decl_stmt|;
DECL|method|AbstractProfiler
specifier|public
name|AbstractProfiler
parameter_list|(
name|AbstractInternalProfileTree
argument_list|<
name|PB
argument_list|,
name|E
argument_list|>
name|profileTree
parameter_list|)
block|{
name|this
operator|.
name|profileTree
operator|=
name|profileTree
expr_stmt|;
block|}
comment|/**      * Get the {@link AbstractProfileBreakdown} for the given element in the      * tree, potentially creating it if it did not exist.      */
DECL|method|getQueryBreakdown
specifier|public
name|PB
name|getQueryBreakdown
parameter_list|(
name|E
name|query
parameter_list|)
block|{
return|return
name|profileTree
operator|.
name|getProfileBreakdown
argument_list|(
name|query
argument_list|)
return|;
block|}
comment|/**      * Removes the last (e.g. most recent) element on the stack.      */
DECL|method|pollLastElement
specifier|public
name|void
name|pollLastElement
parameter_list|()
block|{
name|profileTree
operator|.
name|pollLast
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return a hierarchical representation of the profiled tree      */
DECL|method|getTree
specifier|public
name|List
argument_list|<
name|ProfileResult
argument_list|>
name|getTree
parameter_list|()
block|{
return|return
name|profileTree
operator|.
name|getTree
argument_list|()
return|;
block|}
block|}
end_class

end_unit

