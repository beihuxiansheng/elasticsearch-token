begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A record of timings for the various operations that may happen during query execution.  * A node's time may be composed of several internal attributes (rewriting, weighting,  * scoring, etc).  */
end_comment

begin_class
DECL|class|AbstractProfileBreakdown
specifier|public
specifier|abstract
class|class
name|AbstractProfileBreakdown
parameter_list|<
name|T
extends|extends
name|Enum
parameter_list|<
name|T
parameter_list|>
parameter_list|>
block|{
comment|/**      * The accumulated timings for this query node      */
DECL|field|timings
specifier|private
specifier|final
name|long
index|[]
name|timings
decl_stmt|;
comment|/** Scratch to store the current timing type. */
DECL|field|currentTimingType
specifier|private
name|T
name|currentTimingType
decl_stmt|;
comment|/**      * The temporary scratch space for holding start-times      */
DECL|field|scratch
specifier|private
name|long
name|scratch
decl_stmt|;
DECL|field|timingTypes
specifier|private
name|T
index|[]
name|timingTypes
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|AbstractProfileBreakdown
specifier|public
name|AbstractProfileBreakdown
parameter_list|(
name|T
index|[]
name|timingTypes
parameter_list|)
block|{
name|this
operator|.
name|timingTypes
operator|=
name|timingTypes
expr_stmt|;
name|timings
operator|=
operator|new
name|long
index|[
name|timingTypes
operator|.
name|length
index|]
expr_stmt|;
block|}
comment|/**      * Begin timing a query for a specific Timing context      * @param timing    The timing context being profiled      */
DECL|method|startTime
specifier|public
name|void
name|startTime
parameter_list|(
name|T
name|timing
parameter_list|)
block|{
assert|assert
name|currentTimingType
operator|==
literal|null
assert|;
assert|assert
name|scratch
operator|==
literal|0
assert|;
name|currentTimingType
operator|=
name|timing
expr_stmt|;
name|scratch
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
comment|/**      * Halt the timing process and save the elapsed time.      * startTime() must be called for a particular context prior to calling      * stopAndRecordTime(), otherwise the elapsed time will be negative and      * nonsensical      *      * @return          The elapsed time      */
DECL|method|stopAndRecordTime
specifier|public
name|long
name|stopAndRecordTime
parameter_list|()
block|{
name|long
name|time
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|scratch
argument_list|)
decl_stmt|;
name|timings
index|[
name|currentTimingType
operator|.
name|ordinal
argument_list|()
index|]
operator|+=
name|time
expr_stmt|;
name|currentTimingType
operator|=
literal|null
expr_stmt|;
name|scratch
operator|=
literal|0L
expr_stmt|;
return|return
name|time
return|;
block|}
comment|/** Convert this record to a map from timingType to times. */
DECL|method|toTimingMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|toTimingMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|timingType
range|:
name|timingTypes
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|timingType
operator|.
name|toString
argument_list|()
argument_list|,
name|timings
index|[
name|timingType
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**      * Add<code>other</code>'s timings into this breakdown      * @param other Another Breakdown to merge with this one      */
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|AbstractProfileBreakdown
argument_list|<
name|T
argument_list|>
name|other
parameter_list|)
block|{
assert|assert
operator|(
name|timings
operator|.
name|length
operator|==
name|other
operator|.
name|timings
operator|.
name|length
operator|)
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timings
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|timings
index|[
name|i
index|]
operator|+=
name|other
operator|.
name|timings
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

