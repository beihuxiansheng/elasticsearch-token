begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|AbstractProfiler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * This class acts as a thread-local storage for profiling a query.  It also  * builds a representation of the query tree which is built constructed  * "online" as the weights are wrapped by ContextIndexSearcher.  This allows us  * to know the relationship between nodes in tree without explicitly  * walking the tree or pre-wrapping everything  *  * A Profiler is associated with every Search, not per Search-Request. E.g. a  * request may execute two searches (query + global agg).  A Profiler just  * represents one of those  */
end_comment

begin_class
DECL|class|QueryProfiler
specifier|public
specifier|final
class|class
name|QueryProfiler
extends|extends
name|AbstractProfiler
argument_list|<
name|QueryProfileBreakdown
argument_list|,
name|Query
argument_list|>
block|{
comment|/**      * The root Collector used in the search      */
DECL|field|collector
specifier|private
name|InternalProfileCollector
name|collector
decl_stmt|;
DECL|method|QueryProfiler
specifier|public
name|QueryProfiler
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|InternalQueryProfileTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Set the collector that is associated with this profiler. */
DECL|method|setCollector
specifier|public
name|void
name|setCollector
parameter_list|(
name|InternalProfileCollector
name|collector
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|collector
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The collector can only be set once."
argument_list|)
throw|;
block|}
name|this
operator|.
name|collector
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
comment|/**      * Begin timing the rewrite phase of a request.  All rewrites are accumulated together into a      * single metric      */
DECL|method|startRewriteTime
specifier|public
name|void
name|startRewriteTime
parameter_list|()
block|{
operator|(
operator|(
name|InternalQueryProfileTree
operator|)
name|profileTree
operator|)
operator|.
name|startRewriteTime
argument_list|()
expr_stmt|;
block|}
comment|/**      * Stop recording the current rewrite and add it's time to the total tally, returning the      * cumulative time so far.      *      * @return cumulative rewrite time      */
DECL|method|stopAndAddRewriteTime
specifier|public
name|long
name|stopAndAddRewriteTime
parameter_list|()
block|{
return|return
operator|(
operator|(
name|InternalQueryProfileTree
operator|)
name|profileTree
operator|)
operator|.
name|stopAndAddRewriteTime
argument_list|()
return|;
block|}
comment|/**      * @return total time taken to rewrite all queries in this profile      */
DECL|method|getRewriteTime
specifier|public
name|long
name|getRewriteTime
parameter_list|()
block|{
return|return
operator|(
operator|(
name|InternalQueryProfileTree
operator|)
name|profileTree
operator|)
operator|.
name|getRewriteTime
argument_list|()
return|;
block|}
comment|/**      * Return the current root Collector for this search      */
DECL|method|getCollector
specifier|public
name|CollectorResult
name|getCollector
parameter_list|()
block|{
return|return
name|collector
operator|.
name|getCollectorTree
argument_list|()
return|;
block|}
block|}
end_class

end_unit

