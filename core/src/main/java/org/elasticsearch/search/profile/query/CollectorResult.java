begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|ensureExpectedToken
import|;
end_import

begin_comment
comment|/**  * Public interface and serialization container for profiled timings of the  * Collectors used in the search.  Children CollectorResult's may be  * embedded inside of a parent CollectorResult  */
end_comment

begin_class
DECL|class|CollectorResult
specifier|public
class|class
name|CollectorResult
implements|implements
name|ToXContentObject
implements|,
name|Writeable
block|{
DECL|field|REASON_SEARCH_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|REASON_SEARCH_COUNT
init|=
literal|"search_count"
decl_stmt|;
DECL|field|REASON_SEARCH_TOP_HITS
specifier|public
specifier|static
specifier|final
name|String
name|REASON_SEARCH_TOP_HITS
init|=
literal|"search_top_hits"
decl_stmt|;
DECL|field|REASON_SEARCH_TERMINATE_AFTER_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|REASON_SEARCH_TERMINATE_AFTER_COUNT
init|=
literal|"search_terminate_after_count"
decl_stmt|;
DECL|field|REASON_SEARCH_POST_FILTER
specifier|public
specifier|static
specifier|final
name|String
name|REASON_SEARCH_POST_FILTER
init|=
literal|"search_post_filter"
decl_stmt|;
DECL|field|REASON_SEARCH_MIN_SCORE
specifier|public
specifier|static
specifier|final
name|String
name|REASON_SEARCH_MIN_SCORE
init|=
literal|"search_min_score"
decl_stmt|;
DECL|field|REASON_SEARCH_MULTI
specifier|public
specifier|static
specifier|final
name|String
name|REASON_SEARCH_MULTI
init|=
literal|"search_multi"
decl_stmt|;
DECL|field|REASON_SEARCH_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|REASON_SEARCH_TIMEOUT
init|=
literal|"search_timeout"
decl_stmt|;
DECL|field|REASON_SEARCH_CANCELLED
specifier|public
specifier|static
specifier|final
name|String
name|REASON_SEARCH_CANCELLED
init|=
literal|"search_cancelled"
decl_stmt|;
DECL|field|REASON_AGGREGATION
specifier|public
specifier|static
specifier|final
name|String
name|REASON_AGGREGATION
init|=
literal|"aggregation"
decl_stmt|;
DECL|field|REASON_AGGREGATION_GLOBAL
specifier|public
specifier|static
specifier|final
name|String
name|REASON_AGGREGATION_GLOBAL
init|=
literal|"aggregation_global"
decl_stmt|;
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|ParseField
name|NAME
init|=
operator|new
name|ParseField
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
DECL|field|REASON
specifier|private
specifier|static
specifier|final
name|ParseField
name|REASON
init|=
operator|new
name|ParseField
argument_list|(
literal|"reason"
argument_list|)
decl_stmt|;
DECL|field|TIME
specifier|private
specifier|static
specifier|final
name|ParseField
name|TIME
init|=
operator|new
name|ParseField
argument_list|(
literal|"time"
argument_list|)
decl_stmt|;
DECL|field|TIME_NANOS
specifier|private
specifier|static
specifier|final
name|ParseField
name|TIME_NANOS
init|=
operator|new
name|ParseField
argument_list|(
literal|"time_in_nanos"
argument_list|)
decl_stmt|;
DECL|field|CHILDREN
specifier|private
specifier|static
specifier|final
name|ParseField
name|CHILDREN
init|=
operator|new
name|ParseField
argument_list|(
literal|"children"
argument_list|)
decl_stmt|;
comment|/**      * A more friendly representation of the Collector's class name      */
DECL|field|collectorName
specifier|private
specifier|final
name|String
name|collectorName
decl_stmt|;
comment|/**      * A "hint" to help provide some context about this Collector      */
DECL|field|reason
specifier|private
specifier|final
name|String
name|reason
decl_stmt|;
comment|/**      * The total elapsed time for this Collector      */
DECL|field|time
specifier|private
specifier|final
name|Long
name|time
decl_stmt|;
comment|/**      * A list of children collectors "embedded" inside this collector      */
DECL|field|children
specifier|private
name|List
argument_list|<
name|CollectorResult
argument_list|>
name|children
decl_stmt|;
DECL|method|CollectorResult
specifier|public
name|CollectorResult
parameter_list|(
name|String
name|collectorName
parameter_list|,
name|String
name|reason
parameter_list|,
name|Long
name|time
parameter_list|,
name|List
argument_list|<
name|CollectorResult
argument_list|>
name|children
parameter_list|)
block|{
name|this
operator|.
name|collectorName
operator|=
name|collectorName
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|CollectorResult
specifier|public
name|CollectorResult
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|collectorName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|CollectorResult
name|child
init|=
operator|new
name|CollectorResult
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|this
operator|.
name|children
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|collectorName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CollectorResult
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return the profiled time for this collector (inclusive of children)      */
DECL|method|getTime
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|time
return|;
block|}
comment|/**      * @return a human readable "hint" about what this collector was used for      */
DECL|method|getReason
specifier|public
name|String
name|getReason
parameter_list|()
block|{
return|return
name|this
operator|.
name|reason
return|;
block|}
comment|/**      * @return the lucene class name of the collector      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|collectorName
return|;
block|}
comment|/**      * @return a list of children collectors      */
DECL|method|getProfiledChildren
specifier|public
name|List
argument_list|<
name|CollectorResult
argument_list|>
name|getProfiledChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|=
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|NAME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|REASON
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|getReason
argument_list|()
argument_list|)
operator|.
name|timeValueField
argument_list|(
name|TIME_NANOS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|TIME
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|getTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|startArray
argument_list|(
name|CHILDREN
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CollectorResult
name|child
range|:
name|children
control|)
block|{
name|builder
operator|=
name|child
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|=
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|=
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|CollectorResult
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|token
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|,
name|reason
init|=
literal|null
decl_stmt|;
name|long
name|time
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|CollectorResult
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|NAME
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|name
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|REASON
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|reason
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TIME
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
comment|// we need to consume this value, but we use the raw nanosecond value
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TIME_NANOS
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|time
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|CHILDREN
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|children
operator|.
name|add
argument_list|(
name|CollectorResult
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CollectorResult
argument_list|(
name|name
argument_list|,
name|reason
argument_list|,
name|time
argument_list|,
name|children
argument_list|)
return|;
block|}
block|}
end_class

end_unit

