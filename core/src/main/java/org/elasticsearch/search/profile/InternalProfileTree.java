begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingDeque
import|;
end_import

begin_comment
comment|/**  * This class tracks the dependency tree for queries (scoring and rewriting) and  * generates {@link ProfileBreakdown} for each node in the tree.  It also finalizes the tree  * and returns a list of {@link ProfileResult} that can be serialized back to the client  */
end_comment

begin_class
DECL|class|InternalProfileTree
specifier|final
class|class
name|InternalProfileTree
block|{
DECL|field|timings
specifier|private
name|ArrayList
argument_list|<
name|ProfileBreakdown
argument_list|>
name|timings
decl_stmt|;
comment|/** Maps the Query to it's list of children.  This is basically the dependency tree */
DECL|field|tree
specifier|private
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|tree
decl_stmt|;
comment|/** A list of the original queries, keyed by index position */
DECL|field|queries
specifier|private
name|ArrayList
argument_list|<
name|Query
argument_list|>
name|queries
decl_stmt|;
comment|/** A list of top-level "roots".  Each root can have its own tree of profiles */
DECL|field|roots
specifier|private
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|roots
decl_stmt|;
comment|/** Rewrite time */
DECL|field|rewriteTime
specifier|private
name|long
name|rewriteTime
decl_stmt|;
DECL|field|rewriteScratch
specifier|private
name|long
name|rewriteScratch
decl_stmt|;
comment|/** A temporary stack used to record where we are in the dependency tree.  Only used by scoring queries */
DECL|field|stack
specifier|private
name|Deque
argument_list|<
name|Integer
argument_list|>
name|stack
decl_stmt|;
DECL|field|currentToken
specifier|private
name|int
name|currentToken
init|=
literal|0
decl_stmt|;
DECL|method|InternalProfileTree
specifier|public
name|InternalProfileTree
parameter_list|()
block|{
name|timings
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|stack
operator|=
operator|new
name|LinkedBlockingDeque
argument_list|<>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|tree
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|roots
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a {@link ProfileBreakdown} for a scoring query.  Scoring queries (e.g. those      * that are past the rewrite phase and are now being wrapped by createWeight() ) follow      * a recursive progression.  We can track the dependency tree by a simple stack      *      * The only hiccup is that the first scoring query will be identical to the last rewritten      * query, so we need to take special care to fix that      *      * @param query The scoring query we wish to profile      * @return      A ProfileBreakdown for this query      */
DECL|method|getQueryBreakdown
specifier|public
name|ProfileBreakdown
name|getQueryBreakdown
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|int
name|token
init|=
name|currentToken
decl_stmt|;
name|boolean
name|stackEmpty
init|=
name|stack
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
comment|// If the stack is empty, we are a new root query
if|if
condition|(
name|stackEmpty
condition|)
block|{
comment|// We couldn't find a rewritten query to attach to, so just add it as a
comment|// top-level root. This is just a precaution: it really shouldn't happen.
comment|// We would only get here if a top-level query that never rewrites for some reason.
name|roots
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// Increment the token since we are adding a new node, but notably, do not
comment|// updateParent() because this was added as a root
name|currentToken
operator|+=
literal|1
expr_stmt|;
name|stack
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
name|addDependencyNode
argument_list|(
name|query
argument_list|,
name|token
argument_list|)
return|;
block|}
name|updateParent
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// Increment the token since we are adding a new node
name|currentToken
operator|+=
literal|1
expr_stmt|;
name|stack
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
name|addDependencyNode
argument_list|(
name|query
argument_list|,
name|token
argument_list|)
return|;
block|}
comment|/**      * Begin timing a query for a specific Timing context      */
DECL|method|startRewriteTime
specifier|public
name|void
name|startRewriteTime
parameter_list|()
block|{
assert|assert
name|rewriteScratch
operator|==
literal|0
assert|;
name|rewriteScratch
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
comment|/**      * Halt the timing process and add the elapsed rewriting time.      * startRewriteTime() must be called for a particular context prior to calling      * stopAndAddRewriteTime(), otherwise the elapsed time will be negative and      * nonsensical      *      * @return          The elapsed time      */
DECL|method|stopAndAddRewriteTime
specifier|public
name|long
name|stopAndAddRewriteTime
parameter_list|()
block|{
name|long
name|time
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|rewriteScratch
argument_list|)
decl_stmt|;
name|rewriteTime
operator|+=
name|time
expr_stmt|;
name|rewriteScratch
operator|=
literal|0
expr_stmt|;
return|return
name|time
return|;
block|}
comment|/**      * Helper method to add a new node to the dependency tree.      *      * Initializes a new list in the dependency tree, saves the query and      * generates a new {@link ProfileBreakdown} to track the timings      * of this query      *      * @param query             The query to profile      * @param token             The assigned token for this query      * @return                  A ProfileBreakdown to profile this query      */
DECL|method|addDependencyNode
specifier|private
name|ProfileBreakdown
name|addDependencyNode
parameter_list|(
name|Query
name|query
parameter_list|,
name|int
name|token
parameter_list|)
block|{
comment|// Add a new slot in the dependency tree
name|tree
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// Save our query for lookup later
name|queries
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ProfileBreakdown
name|queryTimings
init|=
operator|new
name|ProfileBreakdown
argument_list|()
decl_stmt|;
name|timings
operator|.
name|add
argument_list|(
name|token
argument_list|,
name|queryTimings
argument_list|)
expr_stmt|;
return|return
name|queryTimings
return|;
block|}
comment|/**      * Removes the last (e.g. most recent) value on the stack      */
DECL|method|pollLast
specifier|public
name|void
name|pollLast
parameter_list|()
block|{
name|stack
operator|.
name|pollLast
argument_list|()
expr_stmt|;
block|}
comment|/**      * After the query has been run and profiled, we need to merge the flat timing map      * with the dependency graph to build a data structure that mirrors the original      * query tree      *      * @return a hierarchical representation of the profiled query tree      */
DECL|method|getQueryTree
specifier|public
name|List
argument_list|<
name|ProfileResult
argument_list|>
name|getQueryTree
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ProfileResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|root
range|:
name|roots
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|doGetQueryTree
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**      * Recursive helper to finalize a node in the dependency tree      * @param token  The node we are currently finalizing      * @return       A hierarchical representation of the tree inclusive of children at this level      */
DECL|method|doGetQueryTree
specifier|private
name|ProfileResult
name|doGetQueryTree
parameter_list|(
name|int
name|token
parameter_list|)
block|{
name|Query
name|query
init|=
name|queries
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|ProfileBreakdown
name|breakdown
init|=
name|timings
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|timings
init|=
name|breakdown
operator|.
name|toTimingMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|children
init|=
name|tree
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ProfileResult
argument_list|>
name|childrenProfileResults
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
name|childrenProfileResults
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|child
range|:
name|children
control|)
block|{
name|ProfileResult
name|childNode
init|=
name|doGetQueryTree
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|childrenProfileResults
operator|.
name|add
argument_list|(
name|childNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO this would be better done bottom-up instead of top-down to avoid
comment|// calculating the same times over and over...but worth the effort?
name|long
name|nodeTime
init|=
name|getNodeTime
argument_list|(
name|timings
argument_list|,
name|childrenProfileResults
argument_list|)
decl_stmt|;
name|String
name|queryDescription
init|=
name|query
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|luceneName
init|=
name|query
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|ProfileResult
argument_list|(
name|queryDescription
argument_list|,
name|luceneName
argument_list|,
name|timings
argument_list|,
name|childrenProfileResults
argument_list|,
name|nodeTime
argument_list|)
return|;
block|}
DECL|method|getRewriteTime
specifier|public
name|long
name|getRewriteTime
parameter_list|()
block|{
return|return
name|rewriteTime
return|;
block|}
comment|/**      * Internal helper to add a child to the current parent node      *      * @param childToken The child to add to the current parent      */
DECL|method|updateParent
specifier|private
name|void
name|updateParent
parameter_list|(
name|int
name|childToken
parameter_list|)
block|{
name|Integer
name|parent
init|=
name|stack
operator|.
name|peekLast
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|parentNode
init|=
name|tree
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|parentNode
operator|.
name|add
argument_list|(
name|childToken
argument_list|)
expr_stmt|;
name|tree
operator|.
name|set
argument_list|(
name|parent
argument_list|,
name|parentNode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internal helper to calculate the time of a node, inclusive of children      *      * @param timings   A map of breakdown timing for the node      * @param children  All children profile results at this node      * @return          The total time at this node, inclusive of children      */
DECL|method|getNodeTime
specifier|private
specifier|static
name|long
name|getNodeTime
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|timings
parameter_list|,
name|List
argument_list|<
name|ProfileResult
argument_list|>
name|children
parameter_list|)
block|{
name|long
name|nodeTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|time
range|:
name|timings
operator|.
name|values
argument_list|()
control|)
block|{
name|nodeTime
operator|+=
name|time
expr_stmt|;
block|}
comment|// Then add up our children
for|for
control|(
name|ProfileResult
name|child
range|:
name|children
control|)
block|{
name|nodeTime
operator|+=
name|getNodeTime
argument_list|(
name|child
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|,
name|child
operator|.
name|getProfiledChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeTime
return|;
block|}
block|}
end_class

end_unit

