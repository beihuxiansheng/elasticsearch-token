begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile.aggregation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|aggregation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|AbstractProfiler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AggregationProfiler
specifier|public
class|class
name|AggregationProfiler
extends|extends
name|AbstractProfiler
argument_list|<
name|AggregationProfileBreakdown
argument_list|,
name|Aggregator
argument_list|>
block|{
DECL|field|profileBrakdownLookup
specifier|private
specifier|final
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|AggregationProfileBreakdown
argument_list|>
name|profileBrakdownLookup
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|AggregationProfiler
specifier|public
name|AggregationProfiler
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|InternalAggregationProfileTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueryBreakdown
specifier|public
name|AggregationProfileBreakdown
name|getQueryBreakdown
parameter_list|(
name|Aggregator
name|agg
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|path
init|=
name|getAggregatorPath
argument_list|(
name|agg
argument_list|)
decl_stmt|;
name|AggregationProfileBreakdown
name|aggregationProfileBreakdown
init|=
name|profileBrakdownLookup
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggregationProfileBreakdown
operator|==
literal|null
condition|)
block|{
name|aggregationProfileBreakdown
operator|=
name|super
operator|.
name|getQueryBreakdown
argument_list|(
name|agg
argument_list|)
expr_stmt|;
name|profileBrakdownLookup
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|aggregationProfileBreakdown
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregationProfileBreakdown
return|;
block|}
DECL|method|getAggregatorPath
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAggregatorPath
parameter_list|(
name|Aggregator
name|agg
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|path
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|agg
operator|!=
literal|null
condition|)
block|{
name|path
operator|.
name|addFirst
argument_list|(
name|agg
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|agg
operator|=
name|agg
operator|.
name|parent
argument_list|()
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

