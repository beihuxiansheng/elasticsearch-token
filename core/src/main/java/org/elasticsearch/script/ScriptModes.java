begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SetOnce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Holds the boolean indicating the enabled mode for each of the different scripting languages available, each script source and each  * scripted operation.  */
end_comment

begin_class
DECL|class|ScriptModes
specifier|public
class|class
name|ScriptModes
block|{
DECL|field|SCRIPT_SETTINGS_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|SCRIPT_SETTINGS_PREFIX
init|=
literal|"script"
decl_stmt|;
DECL|field|ENGINE_SETTINGS_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|ENGINE_SETTINGS_PREFIX
init|=
literal|"script.engine"
decl_stmt|;
DECL|field|scriptEnabled
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|scriptEnabled
decl_stmt|;
DECL|field|TYPES_ALLOWED_SETTING
specifier|private
specifier|static
specifier|final
name|Setting
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|TYPES_ALLOWED_SETTING
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"script.types_allowed"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|CONTEXTS_ALLOWED_SETTING
specifier|private
specifier|static
specifier|final
name|Setting
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|CONTEXTS_ALLOWED_SETTING
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"script.contexts_allowed"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|typesAllowed
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|typesAllowed
decl_stmt|;
DECL|field|contextsAllowed
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|contextsAllowed
decl_stmt|;
DECL|method|ScriptModes
name|ScriptModes
parameter_list|(
name|ScriptContextRegistry
name|scriptContextRegistry
parameter_list|,
name|ScriptSettings
name|scriptSettings
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|scriptModes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|scriptModeSetting
range|:
name|scriptSettings
operator|.
name|getScriptLanguageSettings
argument_list|()
control|)
block|{
name|scriptModes
operator|.
name|put
argument_list|(
name|scriptModeSetting
operator|.
name|getKey
argument_list|()
argument_list|,
name|scriptModeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scriptEnabled
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|scriptModes
argument_list|)
expr_stmt|;
name|typesAllowed
operator|=
name|TYPES_ALLOWED_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|?
operator|new
name|HashSet
argument_list|<>
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|typesAllowed
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|settingType
range|:
name|TYPES_ALLOWED_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ScriptType
name|scriptType
range|:
name|ScriptType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|scriptType
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|settingType
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|typesAllowed
operator|.
name|add
argument_list|(
name|settingType
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown script type ["
operator|+
name|settingType
operator|+
literal|"] found in setting ["
operator|+
name|TYPES_ALLOWED_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
name|contextsAllowed
operator|=
name|CONTEXTS_ALLOWED_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|?
operator|new
name|HashSet
argument_list|<>
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|contextsAllowed
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|settingContext
range|:
name|CONTEXTS_ALLOWED_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
control|)
block|{
if|if
condition|(
name|scriptContextRegistry
operator|.
name|isSupportedContext
argument_list|(
name|settingContext
argument_list|)
condition|)
block|{
name|contextsAllowed
operator|.
name|add
argument_list|(
name|settingContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown script context ["
operator|+
name|settingContext
operator|+
literal|"] found in setting ["
operator|+
name|CONTEXTS_ALLOWED_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * Returns the script mode for a script of a certain written in a certain language,      * of a certain type and executing as part of a specific operation/api.      *      * @param lang the language that the script is written in      * @param scriptType the type of the script      * @param scriptContext the operation that requires the execution of the script      * @return whether scripts are enabled (true) or disabled (false)      */
DECL|method|getScriptEnabled
specifier|public
name|boolean
name|getScriptEnabled
parameter_list|(
name|String
name|lang
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|,
name|ScriptContext
name|scriptContext
parameter_list|)
block|{
if|if
condition|(
name|typesAllowed
operator|!=
literal|null
operator|&&
name|typesAllowed
operator|.
name|contains
argument_list|(
name|scriptType
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|scriptType
operator|.
name|getName
argument_list|()
operator|+
literal|"] scripts cannot be executed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|contextsAllowed
operator|!=
literal|null
operator|&&
name|contextsAllowed
operator|.
name|contains
argument_list|(
name|scriptContext
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|scriptContext
operator|.
name|getKey
argument_list|()
operator|+
literal|"] scripts cannot be executed"
argument_list|)
throw|;
block|}
name|Boolean
name|scriptMode
init|=
name|scriptEnabled
operator|.
name|get
argument_list|(
name|getKey
argument_list|(
name|lang
argument_list|,
name|scriptType
argument_list|,
name|scriptContext
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptMode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"script mode not found for lang ["
operator|+
name|lang
operator|+
literal|"], script_type ["
operator|+
name|scriptType
operator|+
literal|"], operation ["
operator|+
name|scriptContext
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|scriptMode
return|;
block|}
DECL|method|operationKey
specifier|static
name|String
name|operationKey
parameter_list|(
name|ScriptContext
name|scriptContext
parameter_list|)
block|{
return|return
name|SCRIPT_SETTINGS_PREFIX
operator|+
literal|"."
operator|+
name|scriptContext
operator|.
name|getKey
argument_list|()
return|;
block|}
DECL|method|sourceKey
specifier|static
name|String
name|sourceKey
parameter_list|(
name|ScriptType
name|scriptType
parameter_list|)
block|{
return|return
name|SCRIPT_SETTINGS_PREFIX
operator|+
literal|"."
operator|+
name|scriptType
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getGlobalKey
specifier|static
name|String
name|getGlobalKey
parameter_list|(
name|String
name|lang
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|)
block|{
return|return
name|ENGINE_SETTINGS_PREFIX
operator|+
literal|"."
operator|+
name|lang
operator|+
literal|"."
operator|+
name|scriptType
return|;
block|}
DECL|method|getKey
specifier|static
name|String
name|getKey
parameter_list|(
name|String
name|lang
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|,
name|ScriptContext
name|scriptContext
parameter_list|)
block|{
return|return
name|ENGINE_SETTINGS_PREFIX
operator|+
literal|"."
operator|+
name|lang
operator|+
literal|"."
operator|+
name|scriptType
operator|+
literal|"."
operator|+
name|scriptContext
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|//order settings by key before printing them out, for readability
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|scriptModesTreeMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|scriptModesTreeMap
operator|.
name|putAll
argument_list|(
name|scriptEnabled
argument_list|)
expr_stmt|;
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|stringScriptModeEntry
range|:
name|scriptModesTreeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|stringScriptModeEntry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|stringScriptModeEntry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

