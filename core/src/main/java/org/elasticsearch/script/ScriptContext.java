begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * The information necessary to compile and run a script.  *  * A {@link ScriptContext} contains the information related to a single use case and the interfaces  * and methods necessary for a {@link ScriptEngine} to implement.  *<p>  * There are at least two (and optionally a third) related classes which must be defined.  *<p>  * The<i>InstanceType</i> is a class which users of the script api call to execute a script. It  * may be stateful. Instances of  * the<i>InstanceType</i> may be executed multiple times by a caller with different arguments. This  * class must have an abstract method named {@code execute} which {@link ScriptEngine} implementations  * will define.  *<p>  * The<i>FactoryType</i> is a factory class returned by the {@link ScriptService} when compiling  * a script. This class must be stateless so it is cacheable by the {@link ScriptService}. It must  * have one of the following:  *<ul>  *<li>An abstract method named {@code newInstance} which returns an instance of<i>InstanceType</i></li>  *<li>An abstract method named {@code newFactory} which returns an instance of<i>StatefulFactoryType</i></li>  *</ul>  *<p>  * The<i>StatefulFactoryType</i> is an optional class which allows a stateful factory from the  * stateless factory type required by the {@link ScriptService}. If defined, the<i>StatefulFactoryType</i>  * must have a method named {@code newInstance} which returns an instance of<i>InstanceType</i>.  */
end_comment

begin_class
DECL|class|ScriptContext
specifier|public
specifier|final
class|class
name|ScriptContext
parameter_list|<
name|FactoryType
parameter_list|>
block|{
comment|/** A unique identifier for this context. */
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
comment|/** A factory class for constructing script or stateful factory instances. */
DECL|field|factoryClazz
specifier|public
specifier|final
name|Class
argument_list|<
name|FactoryType
argument_list|>
name|factoryClazz
decl_stmt|;
comment|/** A factory class for construct script instances. */
DECL|field|statefulFactoryClazz
specifier|public
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|statefulFactoryClazz
decl_stmt|;
comment|/** A class that is an instance of a script. */
DECL|field|instanceClazz
specifier|public
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|instanceClazz
decl_stmt|;
comment|/** Construct a context with the related instance and compiled classes. */
DECL|method|ScriptContext
specifier|public
name|ScriptContext
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|FactoryType
argument_list|>
name|factoryClazz
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|factoryClazz
operator|=
name|factoryClazz
expr_stmt|;
name|Method
name|newInstanceMethod
init|=
name|findMethod
argument_list|(
literal|"FactoryType"
argument_list|,
name|factoryClazz
argument_list|,
literal|"newInstance"
argument_list|)
decl_stmt|;
name|Method
name|newFactoryMethod
init|=
name|findMethod
argument_list|(
literal|"FactoryType"
argument_list|,
name|factoryClazz
argument_list|,
literal|"newFactory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|newFactoryMethod
operator|!=
literal|null
condition|)
block|{
assert|assert
name|newInstanceMethod
operator|==
literal|null
assert|;
name|statefulFactoryClazz
operator|=
name|newFactoryMethod
operator|.
name|getReturnType
argument_list|()
expr_stmt|;
name|newInstanceMethod
operator|=
name|findMethod
argument_list|(
literal|"StatefulFactoryType"
argument_list|,
name|statefulFactoryClazz
argument_list|,
literal|"newInstance"
argument_list|)
expr_stmt|;
if|if
condition|(
name|newInstanceMethod
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find method newInstance StatefulFactoryType class ["
operator|+
name|statefulFactoryClazz
operator|.
name|getName
argument_list|()
operator|+
literal|"] for script context ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|newInstanceMethod
operator|!=
literal|null
condition|)
block|{
assert|assert
name|newFactoryMethod
operator|==
literal|null
assert|;
name|statefulFactoryClazz
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find method newInstance or method newFactory on FactoryType class ["
operator|+
name|factoryClazz
operator|.
name|getName
argument_list|()
operator|+
literal|"] for script context ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|instanceClazz
operator|=
name|newInstanceMethod
operator|.
name|getReturnType
argument_list|()
expr_stmt|;
block|}
comment|/** Returns a method with the given name, or throws an exception if multiple are found. */
DECL|method|findMethod
specifier|private
name|Method
name|findMethod
parameter_list|(
name|String
name|type
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
name|Method
name|foundMethod
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
if|if
condition|(
name|foundMethod
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot have multiple "
operator|+
name|methodName
operator|+
literal|" methods on "
operator|+
name|type
operator|+
literal|" class ["
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"] for script context ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|foundMethod
operator|=
name|method
expr_stmt|;
block|}
block|}
return|return
name|foundMethod
return|;
block|}
block|}
end_class

end_unit

