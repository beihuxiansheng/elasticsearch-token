begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|AbstractDiffable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|DiffableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_class
DECL|class|ScriptMetaData
specifier|public
specifier|final
class|class
name|ScriptMetaData
implements|implements
name|MetaData
operator|.
name|Custom
block|{
DECL|field|TYPE
specifier|public
specifier|final
specifier|static
name|String
name|TYPE
init|=
literal|"stored_scripts"
decl_stmt|;
DECL|field|PROTO
specifier|public
specifier|final
specifier|static
name|ScriptMetaData
name|PROTO
init|=
operator|new
name|ScriptMetaData
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|scripts
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptAsBytes
argument_list|>
name|scripts
decl_stmt|;
DECL|method|ScriptMetaData
name|ScriptMetaData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptAsBytes
argument_list|>
name|scripts
parameter_list|)
block|{
name|this
operator|.
name|scripts
operator|=
name|scripts
expr_stmt|;
block|}
DECL|method|getScriptAsBytes
specifier|public
name|BytesReference
name|getScriptAsBytes
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|ScriptAsBytes
name|scriptAsBytes
init|=
name|scripts
operator|.
name|get
argument_list|(
name|toKey
argument_list|(
name|language
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptAsBytes
operator|!=
literal|null
condition|)
block|{
return|return
name|scriptAsBytes
operator|.
name|script
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getScript
specifier|public
name|String
name|getScript
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|BytesReference
name|scriptAsBytes
init|=
name|getScriptAsBytes
argument_list|(
name|language
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptAsBytes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Scripts can be stored via API in several ways:
comment|// 1) wrapped into a 'script' json object or field
comment|// 2) wrapped into a 'template' json object or field
comment|// 3) just as is
comment|// In order to fetch the actual script in consistent manner this parsing logic is needed:
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|scriptAsBytes
argument_list|)
init|;
name|XContentBuilder
name|builder
operator|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|parser
operator|.
name|currentName
argument_list|()
condition|)
block|{
case|case
literal|"script"
case|:
case|case
literal|"template"
case|:
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
return|return
name|parser
operator|.
name|text
argument_list|()
return|;
block|}
else|else
block|{
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
comment|// There is no enclosing 'script' or 'template' object so we just need to return the script as is...
comment|// because the parsers current location is already beyond the beginning we need to add a START_OBJECT:
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|fromXContent
specifier|public
name|ScriptMetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptAsBytes
argument_list|>
name|scripts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
init|;
name|token
operator|!=
name|Token
operator|.
name|END_OBJECT
condition|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
control|)
block|{
switch|switch
condition|(
name|token
condition|)
block|{
case|case
name|FIELD_NAME
case|:
name|key
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
break|break;
case|case
name|START_OBJECT
case|:
name|XContentBuilder
name|contentBuilder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|parser
operator|.
name|contentType
argument_list|()
operator|.
name|xContent
argument_list|()
argument_list|)
decl_stmt|;
name|contentBuilder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|ScriptAsBytes
argument_list|(
name|contentBuilder
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unexpected token ["
operator|+
name|token
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|ScriptMetaData
argument_list|(
name|scripts
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|context
specifier|public
name|EnumSet
argument_list|<
name|MetaData
operator|.
name|XContentContext
argument_list|>
name|context
parameter_list|()
block|{
return|return
name|MetaData
operator|.
name|API_AND_GATEWAY
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|ScriptMetaData
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptAsBytes
argument_list|>
name|scripts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|languageAndId
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|BytesReference
name|script
init|=
name|in
operator|.
name|readBytesReference
argument_list|()
decl_stmt|;
name|scripts
operator|.
name|put
argument_list|(
name|languageAndId
argument_list|,
operator|new
name|ScriptAsBytes
argument_list|(
name|script
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ScriptMetaData
argument_list|(
name|scripts
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ScriptAsBytes
argument_list|>
name|entry
range|:
name|scripts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|script
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|scripts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ScriptAsBytes
argument_list|>
name|entry
range|:
name|scripts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|diff
specifier|public
name|Diff
argument_list|<
name|MetaData
operator|.
name|Custom
argument_list|>
name|diff
parameter_list|(
name|MetaData
operator|.
name|Custom
name|before
parameter_list|)
block|{
return|return
operator|new
name|ScriptMetadataDiff
argument_list|(
operator|(
name|ScriptMetaData
operator|)
name|before
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readDiffFrom
specifier|public
name|Diff
argument_list|<
name|MetaData
operator|.
name|Custom
argument_list|>
name|readDiffFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScriptMetadataDiff
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ScriptMetaData
name|other
init|=
operator|(
name|ScriptMetaData
operator|)
name|o
decl_stmt|;
return|return
name|scripts
operator|.
name|equals
argument_list|(
name|other
operator|.
name|scripts
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|scripts
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ScriptMetaData{"
operator|+
literal|"scripts="
operator|+
name|scripts
operator|+
literal|'}'
return|;
block|}
DECL|method|toKey
specifier|static
name|String
name|toKey
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"stored script id can't contain: '#'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|language
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"stored script language can't contain: '#'"
argument_list|)
throw|;
block|}
return|return
name|language
operator|+
literal|"#"
operator|+
name|id
return|;
block|}
DECL|class|Builder
specifier|final
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|scripts
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptAsBytes
argument_list|>
name|scripts
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|ScriptMetaData
name|previous
parameter_list|)
block|{
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scripts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|previous
operator|.
name|scripts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|scripts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|storeScript
specifier|public
name|Builder
name|storeScript
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|id
parameter_list|,
name|BytesReference
name|script
parameter_list|)
block|{
name|scripts
operator|.
name|put
argument_list|(
name|toKey
argument_list|(
name|lang
argument_list|,
name|id
argument_list|)
argument_list|,
operator|new
name|ScriptAsBytes
argument_list|(
name|script
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|deleteScript
specifier|public
name|Builder
name|deleteScript
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|scripts
operator|.
name|remove
argument_list|(
name|toKey
argument_list|(
name|lang
argument_list|,
name|id
argument_list|)
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"Stored script with id [{}] for language [{}] does not exist"
argument_list|,
name|id
argument_list|,
name|lang
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|ScriptMetaData
name|build
parameter_list|()
block|{
return|return
operator|new
name|ScriptMetaData
argument_list|(
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|scripts
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|ScriptMetadataDiff
specifier|final
specifier|static
class|class
name|ScriptMetadataDiff
implements|implements
name|Diff
argument_list|<
name|MetaData
operator|.
name|Custom
argument_list|>
block|{
DECL|field|pipelines
specifier|final
name|Diff
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptAsBytes
argument_list|>
argument_list|>
name|pipelines
decl_stmt|;
DECL|method|ScriptMetadataDiff
name|ScriptMetadataDiff
parameter_list|(
name|ScriptMetaData
name|before
parameter_list|,
name|ScriptMetaData
name|after
parameter_list|)
block|{
name|this
operator|.
name|pipelines
operator|=
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
operator|.
name|scripts
argument_list|,
name|after
operator|.
name|scripts
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ScriptMetadataDiff
specifier|public
name|ScriptMetadataDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|pipelines
operator|=
name|DiffableUtils
operator|.
name|readJdkMapDiff
argument_list|(
name|in
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|,
operator|new
name|ScriptAsBytes
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|MetaData
operator|.
name|Custom
name|apply
parameter_list|(
name|MetaData
operator|.
name|Custom
name|part
parameter_list|)
block|{
return|return
operator|new
name|ScriptMetaData
argument_list|(
name|pipelines
operator|.
name|apply
argument_list|(
operator|(
operator|(
name|ScriptMetaData
operator|)
name|part
operator|)
operator|.
name|scripts
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|pipelines
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ScriptAsBytes
specifier|final
specifier|static
class|class
name|ScriptAsBytes
extends|extends
name|AbstractDiffable
argument_list|<
name|ScriptAsBytes
argument_list|>
block|{
DECL|method|ScriptAsBytes
specifier|public
name|ScriptAsBytes
parameter_list|(
name|BytesReference
name|script
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
DECL|field|script
specifier|private
specifier|final
name|BytesReference
name|script
decl_stmt|;
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|ScriptAsBytes
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScriptAsBytes
argument_list|(
name|in
operator|.
name|readBytesReference
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ScriptAsBytes
name|that
init|=
operator|(
name|ScriptAsBytes
operator|)
name|o
decl_stmt|;
return|return
name|script
operator|.
name|equals
argument_list|(
name|that
operator|.
name|script
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|script
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

