begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|DiffableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|NamedDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * {@link ScriptMetaData} is used to store user-defined scripts  * as part of the {@link ClusterState}.  Currently scripts can  * be stored as part of the new namespace for a stored script where  * only an id is used or as part of the deprecated namespace where  * both a language and an id are used.  */
end_comment

begin_class
DECL|class|ScriptMetaData
specifier|public
specifier|final
class|class
name|ScriptMetaData
implements|implements
name|MetaData
operator|.
name|Custom
implements|,
name|Writeable
implements|,
name|ToXContent
block|{
comment|/**      * A builder used to modify the currently stored scripts data held within      * the {@link ClusterState}.  Scripts can be added or deleted, then built      * to generate a new {@link Map} of scripts that will be used to update      * the current {@link ClusterState}.      */
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
DECL|field|scripts
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StoredScriptSource
argument_list|>
name|scripts
decl_stmt|;
comment|/**          * @param previous The current {@link ScriptMetaData} or {@code null} if there          *                 is no existing {@link ScriptMetaData}.          */
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|ScriptMetaData
name|previous
parameter_list|)
block|{
name|this
operator|.
name|scripts
operator|=
name|previous
operator|==
literal|null
condition|?
operator|new
name|HashMap
argument_list|<>
argument_list|()
else|:
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|previous
operator|.
name|scripts
argument_list|)
expr_stmt|;
block|}
comment|/**          * Add a new script to the existing stored scripts.  The script will be added under          * both the new namespace and the deprecated namespace, so that look ups under          * the deprecated namespace will continue to work.  Should a script already exist under          * the new namespace using a different language, it will be replaced and a deprecation          * warning will be issued.  The replaced script will still exist under the deprecated          * namespace and can continue to be looked up this way until it is deleted.          *<p>          * Take for example script 'A' with lang 'L0' and data 'D0'.  If we add script 'A' to the          * empty set, the scripts {@link Map} will be ["A" -- D0, "A#L0" -- D0].  If a script          * 'A' with lang 'L1' and data 'D1' is then added, the scripts {@link Map} will be          * ["A" -- D1, "A#L1" -- D1, "A#L0" -- D0].          * @param id The user-specified id to use for the look up.          * @param source The user-specified stored script data held in {@link StoredScriptSource}.          */
DECL|method|storeScript
specifier|public
name|Builder
name|storeScript
parameter_list|(
name|String
name|id
parameter_list|,
name|StoredScriptSource
name|source
parameter_list|)
block|{
name|StoredScriptSource
name|previous
init|=
name|scripts
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|scripts
operator|.
name|put
argument_list|(
name|source
operator|.
name|getLang
argument_list|()
operator|+
literal|"#"
operator|+
name|id
argument_list|,
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
operator|&&
name|previous
operator|.
name|getLang
argument_list|()
operator|.
name|equals
argument_list|(
name|source
operator|.
name|getLang
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|DEPRECATION_LOGGER
operator|.
name|deprecated
argument_list|(
literal|"stored script ["
operator|+
name|id
operator|+
literal|"] already exists using a different lang "
operator|+
literal|"["
operator|+
name|previous
operator|.
name|getLang
argument_list|()
operator|+
literal|"], the new namespace for stored scripts will only use (id) instead of (lang, id)"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Delete a script from the existing stored scripts.  The script will be removed from the          * new namespace if the script language matches the current script under the same id or          * if the script language is {@code null}.  The script will be removed from the deprecated          * namespace on any delete either using using the specified lang parameter or the language          * found from looking up the script in the new namespace.          *<p>          * Take for example a scripts {@link Map} with {"A" -- D1, "A#L1" -- D1, "A#L0" -- D0}.          * If a script is removed specified by an id 'A' and lang {@code null} then the scripts          * {@link Map} will be {"A#L0" -- D0}.  To remove the final script, the deprecated          * namespace must be used, so an id 'A' and lang 'L0' would need to be specified.          * @param id The user-specified id to use for the look up.          * @param lang The user-specified language to use for the look up if using the deprecated          *             namespace, otherwise {@code null}.          */
DECL|method|deleteScript
specifier|public
name|Builder
name|deleteScript
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
name|StoredScriptSource
name|source
init|=
name|scripts
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|lang
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"stored script ["
operator|+
name|id
operator|+
literal|"] does not exist and cannot be deleted"
argument_list|)
throw|;
block|}
name|lang
operator|=
name|source
operator|.
name|getLang
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lang
operator|.
name|equals
argument_list|(
name|source
operator|.
name|getLang
argument_list|()
argument_list|)
condition|)
block|{
name|scripts
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|source
operator|=
name|scripts
operator|.
name|get
argument_list|(
name|lang
operator|+
literal|"#"
operator|+
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"stored script ["
operator|+
name|id
operator|+
literal|"] using lang ["
operator|+
name|lang
operator|+
literal|"] does not exist and cannot be deleted"
argument_list|)
throw|;
block|}
name|scripts
operator|.
name|remove
argument_list|(
name|lang
operator|+
literal|"#"
operator|+
name|id
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * @return A {@link ScriptMetaData} with the updated {@link Map} of scripts.          */
DECL|method|build
specifier|public
name|ScriptMetaData
name|build
parameter_list|()
block|{
return|return
operator|new
name|ScriptMetaData
argument_list|(
name|scripts
argument_list|)
return|;
block|}
block|}
DECL|class|ScriptMetadataDiff
specifier|static
specifier|final
class|class
name|ScriptMetadataDiff
implements|implements
name|NamedDiff
argument_list|<
name|MetaData
operator|.
name|Custom
argument_list|>
block|{
DECL|field|pipelines
specifier|final
name|Diff
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|StoredScriptSource
argument_list|>
argument_list|>
name|pipelines
decl_stmt|;
DECL|method|ScriptMetadataDiff
name|ScriptMetadataDiff
parameter_list|(
name|ScriptMetaData
name|before
parameter_list|,
name|ScriptMetaData
name|after
parameter_list|)
block|{
name|this
operator|.
name|pipelines
operator|=
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
operator|.
name|scripts
argument_list|,
name|after
operator|.
name|scripts
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ScriptMetadataDiff
name|ScriptMetadataDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|pipelines
operator|=
name|DiffableUtils
operator|.
name|readJdkMapDiff
argument_list|(
name|in
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|,
name|StoredScriptSource
operator|::
operator|new
argument_list|,
name|StoredScriptSource
operator|::
name|readDiffFrom
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|MetaData
operator|.
name|Custom
name|apply
parameter_list|(
name|MetaData
operator|.
name|Custom
name|part
parameter_list|)
block|{
return|return
operator|new
name|ScriptMetaData
argument_list|(
name|pipelines
operator|.
name|apply
argument_list|(
operator|(
operator|(
name|ScriptMetaData
operator|)
name|part
operator|)
operator|.
name|scripts
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|pipelines
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convenience method to build and return a new      * {@link ScriptMetaData} adding the specified stored script.      */
DECL|method|putStoredScript
specifier|static
name|ScriptMetaData
name|putStoredScript
parameter_list|(
name|ScriptMetaData
name|previous
parameter_list|,
name|String
name|id
parameter_list|,
name|StoredScriptSource
name|source
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|previous
argument_list|)
decl_stmt|;
name|builder
operator|.
name|storeScript
argument_list|(
name|id
argument_list|,
name|source
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Convenience method to build and return a new      * {@link ScriptMetaData} deleting the specified stored script.      */
DECL|method|deleteStoredScript
specifier|static
name|ScriptMetaData
name|deleteStoredScript
parameter_list|(
name|ScriptMetaData
name|previous
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|ScriptMetaData
operator|.
name|Builder
argument_list|(
name|previous
argument_list|)
decl_stmt|;
name|builder
operator|.
name|deleteScript
argument_list|(
name|id
argument_list|,
name|lang
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Standard logger necessary for allocation of the deprecation logger.      */
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScriptMetaData
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Deprecation logger necessary for namespace changes related to stored scripts.      */
DECL|field|DEPRECATION_LOGGER
specifier|private
specifier|static
specifier|final
name|DeprecationLogger
name|DEPRECATION_LOGGER
init|=
operator|new
name|DeprecationLogger
argument_list|(
name|LOGGER
argument_list|)
decl_stmt|;
comment|/**      * The type of {@link ClusterState} data.      */
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"stored_scripts"
decl_stmt|;
comment|/**      * This will parse XContent into {@link ScriptMetaData}.      *      * The following format will be parsed for the new namespace:      *      * {@code      * {      *     "<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser)}>",      *     "<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser)}>",      *     ...      * }      * }      *      * The following format will be parsed for the deprecated namespace:      *      * {@code      * {      *     "<id>" : "<code>",      *     "<id>" : "<code>",      *     ...      * }      * }      *      * Note when using the deprecated namespace, the language will be pulled from      * the id and options will be set to an empty {@link Map}.      */
DECL|method|fromXContent
specifier|public
specifier|static
name|ScriptMetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|StoredScriptSource
argument_list|>
name|scripts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|id
init|=
literal|null
decl_stmt|;
name|StoredScriptSource
name|source
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|!=
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"unexpected token ["
operator|+
name|token
operator|+
literal|"], expected [{]"
argument_list|)
throw|;
block|}
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
switch|switch
condition|(
name|token
condition|)
block|{
case|case
name|FIELD_NAME
case|:
name|id
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
break|break;
case|case
name|VALUE_STRING
case|:
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"unexpected token ["
operator|+
name|token
operator|+
literal|"], expected [<id>,<code>, {]"
argument_list|)
throw|;
block|}
name|int
name|split
init|=
name|id
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal stored script id ["
operator|+
name|id
operator|+
literal|"], does not contain lang"
argument_list|)
throw|;
block|}
else|else
block|{
name|source
operator|=
operator|new
name|StoredScriptSource
argument_list|(
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scripts
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|id
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|START_OBJECT
case|:
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"unexpected token ["
operator|+
name|token
operator|+
literal|"], expected [<id>,<code>, {]"
argument_list|)
throw|;
block|}
name|source
operator|=
name|StoredScriptSource
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|source
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"unexpected token ["
operator|+
name|token
operator|+
literal|"], expected [<id>,<code>, {]"
argument_list|)
throw|;
block|}
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ScriptMetaData
argument_list|(
name|scripts
argument_list|)
return|;
block|}
DECL|method|readDiffFrom
specifier|public
specifier|static
name|NamedDiff
argument_list|<
name|MetaData
operator|.
name|Custom
argument_list|>
name|readDiffFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScriptMetadataDiff
argument_list|(
name|in
argument_list|)
return|;
block|}
DECL|field|scripts
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StoredScriptSource
argument_list|>
name|scripts
decl_stmt|;
comment|/**      * Standard constructor to create metadata to store scripts.      * @param scripts The currently stored scripts.  Must not be {@code null},      *                use and empty {@link Map} to specify there were no      *                previously stored scripts.      */
DECL|method|ScriptMetaData
name|ScriptMetaData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|StoredScriptSource
argument_list|>
name|scripts
parameter_list|)
block|{
name|this
operator|.
name|scripts
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|scripts
argument_list|)
expr_stmt|;
block|}
DECL|method|ScriptMetaData
specifier|public
name|ScriptMetaData
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|StoredScriptSource
argument_list|>
name|scripts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StoredScriptSource
name|source
decl_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
comment|// Prior to version 5.3 all scripts were stored using the deprecated namespace.
comment|// Split the id to find the language then use StoredScriptSource to parse the
comment|// expected BytesReference after which a new StoredScriptSource is created
comment|// with the appropriate language and options.
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_3_0
argument_list|)
condition|)
block|{
name|int
name|split
init|=
name|id
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal stored script id ["
operator|+
name|id
operator|+
literal|"], does not contain lang"
argument_list|)
throw|;
block|}
else|else
block|{
name|source
operator|=
operator|new
name|StoredScriptSource
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|StoredScriptSource
argument_list|(
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
argument_list|,
name|source
operator|.
name|getCode
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Version 5.3+ can just be parsed normally using StoredScriptSource.
block|}
else|else
block|{
name|source
operator|=
operator|new
name|StoredScriptSource
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|scripts
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scripts
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|scripts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Version 5.3+ will output the contents of the scripts' Map using
comment|// StoredScriptSource to stored the language, code, and options.
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_3_0
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|scripts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredScriptSource
argument_list|>
name|entry
range|:
name|scripts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// Prior to Version 5.3, stored scripts can only be read using the deprecated
comment|// namespace.  Scripts using the deprecated namespace are first isolated in a
comment|// temporary Map, then written out.  Since all scripts will be stored using the
comment|// deprecated namespace, no scripts will be lost.
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|StoredScriptSource
argument_list|>
name|filtered
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredScriptSource
argument_list|>
name|entry
range|:
name|scripts
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|filtered
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|filtered
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredScriptSource
argument_list|>
name|entry
range|:
name|filtered
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will write XContent from {@link ScriptMetaData}.  The following format will be written:      *      * {@code      * {      *     "<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",      *     "<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",      *     ...      * }      * }      */
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredScriptSource
argument_list|>
name|entry
range|:
name|scripts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|diff
specifier|public
name|Diff
argument_list|<
name|MetaData
operator|.
name|Custom
argument_list|>
name|diff
parameter_list|(
name|MetaData
operator|.
name|Custom
name|before
parameter_list|)
block|{
return|return
operator|new
name|ScriptMetadataDiff
argument_list|(
operator|(
name|ScriptMetaData
operator|)
name|before
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|context
specifier|public
name|EnumSet
argument_list|<
name|MetaData
operator|.
name|XContentContext
argument_list|>
name|context
parameter_list|()
block|{
return|return
name|MetaData
operator|.
name|ALL_CONTEXTS
return|;
block|}
comment|/**      * Retrieves a stored script from the new namespace if lang is {@code null}.      * Otherwise, returns a stored script from the deprecated namespace.  Either      * way an id is required.      */
DECL|method|getStoredScript
name|StoredScriptSource
name|getStoredScript
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
if|if
condition|(
name|lang
operator|==
literal|null
condition|)
block|{
return|return
name|scripts
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|scripts
operator|.
name|get
argument_list|(
name|lang
operator|+
literal|"#"
operator|+
name|id
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ScriptMetaData
name|that
init|=
operator|(
name|ScriptMetaData
operator|)
name|o
decl_stmt|;
return|return
name|scripts
operator|.
name|equals
argument_list|(
name|that
operator|.
name|scripts
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|scripts
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ScriptMetaData{"
operator|+
literal|"scripts="
operator|+
name|scripts
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

