begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
DECL|class|ScriptSettings
specifier|public
class|class
name|ScriptSettings
block|{
DECL|field|LEGACY_DEFAULT_LANG
specifier|static
specifier|final
name|String
name|LEGACY_DEFAULT_LANG
init|=
literal|"groovy"
decl_stmt|;
comment|/**      * The default script language to use for scripts that are stored in documents that have no script lang set explicitly.      * This setting is legacy setting and only applies for indices created on ES versions prior to version 5.0      *      * This constant will be removed in the next major release.      */
annotation|@
name|Deprecated
DECL|field|LEGACY_SCRIPT_SETTING
specifier|public
specifier|static
specifier|final
name|String
name|LEGACY_SCRIPT_SETTING
init|=
literal|"script.legacy.default_lang"
decl_stmt|;
DECL|field|SCRIPT_TYPE_SETTING_MAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|ScriptType
argument_list|,
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|SCRIPT_TYPE_SETTING_MAP
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|ScriptType
argument_list|,
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|scriptTypeSettingMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScriptType
name|scriptType
range|:
name|ScriptType
operator|.
name|values
argument_list|()
control|)
block|{
name|scriptTypeSettingMap
operator|.
name|put
argument_list|(
name|scriptType
argument_list|,
name|Setting
operator|.
name|boolSetting
argument_list|(
name|ScriptModes
operator|.
name|sourceKey
argument_list|(
name|scriptType
argument_list|)
argument_list|,
name|scriptType
operator|.
name|getDefaultScriptEnabled
argument_list|()
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SCRIPT_TYPE_SETTING_MAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|scriptTypeSettingMap
argument_list|)
expr_stmt|;
block|}
DECL|field|scriptContextSettingMap
specifier|private
specifier|final
name|Map
argument_list|<
name|ScriptContext
argument_list|,
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|scriptContextSettingMap
decl_stmt|;
DECL|field|scriptLanguageSettings
specifier|private
specifier|final
name|List
argument_list|<
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|scriptLanguageSettings
decl_stmt|;
DECL|field|defaultLegacyScriptLanguageSetting
specifier|private
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|defaultLegacyScriptLanguageSetting
decl_stmt|;
DECL|method|ScriptSettings
specifier|public
name|ScriptSettings
parameter_list|(
name|ScriptEngineRegistry
name|scriptEngineRegistry
parameter_list|,
name|ScriptContextRegistry
name|scriptContextRegistry
parameter_list|)
block|{
name|Map
argument_list|<
name|ScriptContext
argument_list|,
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|scriptContextSettingMap
init|=
name|contextSettings
argument_list|(
name|scriptContextRegistry
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptContextSettingMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|scriptContextSettingMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|scriptLanguageSettings
init|=
name|languageSettings
argument_list|(
name|SCRIPT_TYPE_SETTING_MAP
argument_list|,
name|scriptContextSettingMap
argument_list|,
name|scriptEngineRegistry
argument_list|,
name|scriptContextRegistry
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptLanguageSettings
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|scriptLanguageSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultLegacyScriptLanguageSetting
operator|=
operator|new
name|Setting
argument_list|<>
argument_list|(
name|LEGACY_SCRIPT_SETTING
argument_list|,
name|LEGACY_DEFAULT_LANG
argument_list|,
name|setting
lambda|->
block|{
if|if
condition|(
operator|!
name|LEGACY_DEFAULT_LANG
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
operator|&&
operator|!
name|scriptEngineRegistry
operator|.
name|getRegisteredLanguages
argument_list|()
operator|.
name|containsKey
argument_list|(
name|setting
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unregistered default language ["
operator|+
name|setting
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|setting
return|;
block|}
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
expr_stmt|;
block|}
DECL|method|contextSettings
specifier|private
specifier|static
name|Map
argument_list|<
name|ScriptContext
argument_list|,
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|contextSettings
parameter_list|(
name|ScriptContextRegistry
name|scriptContextRegistry
parameter_list|)
block|{
name|Map
argument_list|<
name|ScriptContext
argument_list|,
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|scriptContextSettingMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScriptContext
name|scriptContext
range|:
name|scriptContextRegistry
operator|.
name|scriptContexts
argument_list|()
control|)
block|{
name|scriptContextSettingMap
operator|.
name|put
argument_list|(
name|scriptContext
argument_list|,
name|Setting
operator|.
name|boolSetting
argument_list|(
name|ScriptModes
operator|.
name|operationKey
argument_list|(
name|scriptContext
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scriptContextSettingMap
return|;
block|}
DECL|method|languageSettings
specifier|private
specifier|static
name|List
argument_list|<
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|languageSettings
parameter_list|(
name|Map
argument_list|<
name|ScriptType
argument_list|,
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|scriptTypeSettingMap
parameter_list|,
name|Map
argument_list|<
name|ScriptContext
argument_list|,
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|scriptContextSettingMap
parameter_list|,
name|ScriptEngineRegistry
name|scriptEngineRegistry
parameter_list|,
name|ScriptContextRegistry
name|scriptContextRegistry
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|scriptModeSettings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
name|scriptEngineService
range|:
name|scriptEngineRegistry
operator|.
name|getRegisteredScriptEngineServices
argument_list|()
control|)
block|{
if|if
condition|(
name|scriptEngineService
operator|==
name|NativeScriptEngineService
operator|.
name|class
condition|)
block|{
comment|// native scripts are always enabled, and their settings can not be changed
continue|continue;
block|}
specifier|final
name|String
name|language
init|=
name|scriptEngineRegistry
operator|.
name|getLanguage
argument_list|(
name|scriptEngineService
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ScriptType
name|scriptType
range|:
name|ScriptType
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Top level, like "script.engine.groovy.inline"
specifier|final
name|boolean
name|defaultNonFileScriptMode
init|=
name|scriptEngineRegistry
operator|.
name|getDefaultInlineScriptEnableds
argument_list|()
operator|.
name|get
argument_list|(
name|language
argument_list|)
decl_stmt|;
name|boolean
name|defaultLangAndType
init|=
name|defaultNonFileScriptMode
decl_stmt|;
comment|// Files are treated differently because they are never default-deny
if|if
condition|(
name|ScriptType
operator|.
name|FILE
operator|==
name|scriptType
condition|)
block|{
name|defaultLangAndType
operator|=
name|ScriptType
operator|.
name|FILE
operator|.
name|getDefaultScriptEnabled
argument_list|()
expr_stmt|;
block|}
specifier|final
name|boolean
name|defaultIfNothingSet
init|=
name|defaultLangAndType
decl_stmt|;
name|Function
argument_list|<
name|Settings
argument_list|,
name|String
argument_list|>
name|defaultLangAndTypeFn
init|=
name|settings
lambda|->
block|{
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|globalTypeSetting
init|=
name|scriptTypeSettingMap
operator|.
name|get
argument_list|(
name|scriptType
argument_list|)
decl_stmt|;
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|langAndTypeSetting
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
name|ScriptModes
operator|.
name|getGlobalKey
argument_list|(
name|language
argument_list|,
name|scriptType
argument_list|)
argument_list|,
name|defaultIfNothingSet
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
if|if
condition|(
name|langAndTypeSetting
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
comment|// fine-grained e.g. script.engine.groovy.inline
return|return
name|langAndTypeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|globalTypeSetting
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
comment|// global type - script.inline
return|return
name|globalTypeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|toString
argument_list|(
name|defaultIfNothingSet
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// Setting for something like "script.engine.groovy.inline"
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|langAndTypeSetting
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
name|ScriptModes
operator|.
name|getGlobalKey
argument_list|(
name|language
argument_list|,
name|scriptType
argument_list|)
argument_list|,
name|defaultLangAndTypeFn
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|scriptModeSettings
operator|.
name|add
argument_list|(
name|langAndTypeSetting
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptContext
name|scriptContext
range|:
name|scriptContextRegistry
operator|.
name|scriptContexts
argument_list|()
control|)
block|{
specifier|final
name|String
name|langAndTypeAndContextName
init|=
name|ScriptModes
operator|.
name|getKey
argument_list|(
name|language
argument_list|,
name|scriptType
argument_list|,
name|scriptContext
argument_list|)
decl_stmt|;
comment|// A function that, given a setting, will return what the default should be. Since the fine-grained script settings
comment|// read from a bunch of different places this is implemented in this way.
name|Function
argument_list|<
name|Settings
argument_list|,
name|String
argument_list|>
name|defaultSettingFn
init|=
name|settings
lambda|->
block|{
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|globalOpSetting
init|=
name|scriptContextSettingMap
operator|.
name|get
argument_list|(
name|scriptContext
argument_list|)
decl_stmt|;
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|globalTypeSetting
init|=
name|scriptTypeSettingMap
operator|.
name|get
argument_list|(
name|scriptType
argument_list|)
decl_stmt|;
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|langAndTypeAndContextSetting
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
name|langAndTypeAndContextName
argument_list|,
name|defaultIfNothingSet
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
comment|// fallback logic for script mode settings
if|if
condition|(
name|langAndTypeAndContextSetting
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
comment|// like: "script.engine.groovy.inline.aggs: true"
return|return
name|langAndTypeAndContextSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|langAndTypeSetting
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
comment|// like: "script.engine.groovy.inline: true"
return|return
name|langAndTypeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|globalOpSetting
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
comment|// like: "script.aggs: true"
return|return
name|globalOpSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|globalTypeSetting
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
comment|// like: "script.inline: true"
return|return
name|globalTypeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
comment|// Nothing is set!
return|return
name|Boolean
operator|.
name|toString
argument_list|(
name|defaultIfNothingSet
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// The actual setting for finest grained script settings
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|setting
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
name|langAndTypeAndContextName
argument_list|,
name|defaultSettingFn
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|scriptModeSettings
operator|.
name|add
argument_list|(
name|setting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|scriptModeSettings
return|;
block|}
DECL|method|getSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSettings
parameter_list|()
block|{
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|settings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|settings
operator|.
name|addAll
argument_list|(
name|SCRIPT_TYPE_SETTING_MAP
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addAll
argument_list|(
name|scriptContextSettingMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addAll
argument_list|(
name|scriptLanguageSettings
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|defaultLegacyScriptLanguageSetting
argument_list|)
expr_stmt|;
return|return
name|settings
return|;
block|}
DECL|method|getScriptLanguageSettings
specifier|public
name|Iterable
argument_list|<
name|Setting
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|getScriptLanguageSettings
parameter_list|()
block|{
return|return
name|scriptLanguageSettings
return|;
block|}
DECL|method|getDefaultLegacyScriptLanguageSetting
specifier|public
name|Setting
argument_list|<
name|String
argument_list|>
name|getDefaultLegacyScriptLanguageSetting
parameter_list|()
block|{
return|return
name|defaultLegacyScriptLanguageSetting
return|;
block|}
DECL|method|getLegacyDefaultLang
specifier|public
specifier|static
name|String
name|getLegacyDefaultLang
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|settings
operator|.
name|get
argument_list|(
name|LEGACY_SCRIPT_SETTING
argument_list|,
name|ScriptSettings
operator|.
name|LEGACY_DEFAULT_LANG
argument_list|)
return|;
block|}
block|}
end_class

end_unit

