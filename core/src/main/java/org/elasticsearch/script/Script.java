begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|support
operator|.
name|LoggerMessageFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Script holds all the parameters necessary to compile or find in cache and then execute a script.  */
end_comment

begin_class
DECL|class|Script
specifier|public
class|class
name|Script
implements|implements
name|ToXContent
implements|,
name|Streamable
block|{
DECL|field|DEFAULT_TYPE
specifier|public
specifier|static
specifier|final
name|ScriptType
name|DEFAULT_TYPE
init|=
name|ScriptType
operator|.
name|INLINE
decl_stmt|;
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|ScriptParser
name|PARSER
init|=
operator|new
name|ScriptParser
argument_list|()
decl_stmt|;
DECL|field|script
specifier|private
name|String
name|script
decl_stmt|;
DECL|field|type
specifier|private
annotation|@
name|Nullable
name|ScriptType
name|type
decl_stmt|;
DECL|field|lang
specifier|private
annotation|@
name|Nullable
name|String
name|lang
decl_stmt|;
DECL|field|params
specifier|private
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
comment|/**      * For Serialization      */
DECL|method|Script
name|Script
parameter_list|()
block|{     }
comment|/**      * Constructor for simple inline script. The script will have no lang or      * params set.      *      * @param script      *            The inline script to execute.      */
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|String
name|script
parameter_list|)
block|{
name|this
argument_list|(
name|script
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * For sub-classes to use to override the default language      */
DECL|method|Script
specifier|protected
name|Script
parameter_list|(
name|String
name|script
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
name|this
argument_list|(
name|script
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|lang
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for Script.      *       * @param script      *            The cache key of the script to be compiled/executed. For      *            inline scripts this is the actual script source code. For      *            indexed scripts this is the id used in the request. For on      *            file scripts this is the file name.      * @param type      *            The type of script -- dynamic, indexed, or file.      * @param lang      *            The language of the script to be compiled/executed.      * @param params      *            The map of parameters the script will be executed with.      */
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|String
name|script
parameter_list|,
name|ScriptType
name|type
parameter_list|,
annotation|@
name|Nullable
name|String
name|lang
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parameter script (String) must not be null in Script."
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parameter type (ScriptType) must not be null in Script."
argument_list|)
throw|;
block|}
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
name|this
operator|.
name|params
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|params
expr_stmt|;
block|}
comment|/**      * Method for getting the script.      * @return The cache key of the script to be compiled/executed.  For dynamic scripts this is the actual      *         script source code.  For indexed scripts this is the id used in the request.  For on disk scripts      *         this is the file name.      */
DECL|method|getScript
specifier|public
name|String
name|getScript
parameter_list|()
block|{
return|return
name|script
return|;
block|}
comment|/**      * Method for getting the type.      *       * @return The type of script -- inline, indexed, or file.      */
DECL|method|getType
specifier|public
name|ScriptType
name|getType
parameter_list|()
block|{
return|return
name|type
operator|==
literal|null
condition|?
name|DEFAULT_TYPE
else|:
name|type
return|;
block|}
comment|/**      * Method for getting language.      *       * @return The language of the script to be compiled/executed.      */
DECL|method|getLang
specifier|public
name|String
name|getLang
parameter_list|()
block|{
return|return
name|lang
return|;
block|}
comment|/**      * Method for getting the parameters.      *       * @return The map of parameters the script will be executed with.      */
DECL|method|getParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
specifier|final
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|script
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|type
operator|=
name|ScriptType
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|lang
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|params
operator|=
name|in
operator|.
name|readMap
argument_list|()
expr_stmt|;
block|}
name|doReadFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|doReadFrom
specifier|protected
name|void
name|doReadFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// For sub-classes to Override
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
specifier|final
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|boolean
name|hasType
init|=
name|type
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasType
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasType
condition|)
block|{
name|ScriptType
operator|.
name|writeTo
argument_list|(
name|type
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalString
argument_list|(
name|lang
argument_list|)
expr_stmt|;
name|boolean
name|hasParams
init|=
name|params
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasParams
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasParams
condition|)
block|{
name|out
operator|.
name|writeMap
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|doWriteTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// For sub-classes to Override
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
specifier|final
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|builderParams
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
name|builder
operator|.
name|value
argument_list|(
name|script
argument_list|)
return|;
block|}
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|scriptFieldToXContent
argument_list|(
name|script
argument_list|,
name|type
argument_list|,
name|builder
argument_list|,
name|builderParams
argument_list|)
expr_stmt|;
if|if
condition|(
name|lang
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ScriptField
operator|.
name|LANG
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|lang
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ScriptField
operator|.
name|PARAMS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|scriptFieldToXContent
specifier|protected
name|XContentBuilder
name|scriptFieldToXContent
parameter_list|(
name|String
name|script
parameter_list|,
name|ScriptType
name|type
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|builderParams
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|type
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|script
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|readScript
specifier|public
specifier|static
name|Script
name|readScript
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Script
name|script
init|=
operator|new
name|Script
argument_list|()
decl_stmt|;
name|script
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|script
return|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|Script
name|parse
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|boolean
name|removeMatchedEntries
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|)
block|{
return|return
name|PARSER
operator|.
name|parse
argument_list|(
name|config
argument_list|,
name|removeMatchedEntries
argument_list|,
name|parseFieldMatcher
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|Script
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|parseFieldMatcher
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|lang
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|lang
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|params
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|script
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|script
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|type
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|type
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Script
name|other
init|=
operator|(
name|Script
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|lang
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|lang
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lang
operator|.
name|equals
argument_list|(
name|other
operator|.
name|lang
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|params
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|params
operator|.
name|equals
argument_list|(
name|other
operator|.
name|params
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|script
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|script
operator|.
name|equals
argument_list|(
name|other
operator|.
name|script
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|type
operator|!=
name|other
operator|.
name|type
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[script: "
operator|+
name|script
operator|+
literal|", type: "
operator|+
name|type
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|", lang: "
operator|+
name|lang
operator|+
literal|", params: "
operator|+
name|params
operator|+
literal|"]"
return|;
block|}
DECL|class|ScriptParser
specifier|private
specifier|static
class|class
name|ScriptParser
extends|extends
name|AbstractScriptParser
argument_list|<
name|Script
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createSimpleScript
specifier|protected
name|Script
name|createSimpleScript
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
return|return
operator|new
name|Script
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ScriptParseException
argument_list|(
literal|"expected a string value for field [{}], but found [{}]"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createScript
specifier|protected
name|Script
name|createScript
parameter_list|(
name|String
name|script
parameter_list|,
name|ScriptType
name|type
parameter_list|,
name|String
name|lang
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
return|return
operator|new
name|Script
argument_list|(
name|script
argument_list|,
name|type
argument_list|,
name|lang
argument_list|,
name|params
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseInlineScript
specifier|protected
name|String
name|parseInlineScript
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parser
operator|.
name|text
argument_list|()
return|;
block|}
block|}
DECL|interface|ScriptField
specifier|public
interface|interface
name|ScriptField
block|{
DECL|field|SCRIPT
name|ParseField
name|SCRIPT
init|=
operator|new
name|ParseField
argument_list|(
literal|"script"
argument_list|)
decl_stmt|;
DECL|field|LANG
name|ParseField
name|LANG
init|=
operator|new
name|ParseField
argument_list|(
literal|"lang"
argument_list|)
decl_stmt|;
DECL|field|PARAMS
name|ParseField
name|PARAMS
init|=
operator|new
name|ParseField
argument_list|(
literal|"params"
argument_list|)
decl_stmt|;
block|}
DECL|class|ScriptParseException
specifier|public
specifier|static
class|class
name|ScriptParseException
extends|extends
name|ElasticsearchException
block|{
DECL|method|ScriptParseException
specifier|public
name|ScriptParseException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|LoggerMessageFormat
operator|.
name|format
argument_list|(
name|msg
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ScriptParseException
specifier|public
name|ScriptParseException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

