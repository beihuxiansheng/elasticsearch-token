begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * {@link Script} represents used-defined input that can be used to  * compile and execute a script from the {@link ScriptService}  * based on the {@link ScriptType}.  *  * There are three types of scripts specified by {@link ScriptType}.  *  * The following describes the expected parameters for each type of script:  *  *<ul>  *<li> {@link ScriptType#INLINE}  *<ul>  *<li> {@link Script#lang}     - specifies the language, defaults to {@link Script#DEFAULT_SCRIPT_LANG}  *<li> {@link Script#idOrCode} - specifies the code to be compiled, must not be {@code null}  *<li> {@link Script#options}  - specifies the compiler options for this script; must not be {@code null},  *                                use an empty {@link Map} to specify no options  *<li> {@link Script#params}   - {@link Map} of user-defined parameters; must not be {@code null},  *                                use an empty {@link Map} to specify no params  *</ul>  *<li> {@link ScriptType#STORED}  *<ul>  *<li> {@link Script#lang}     - the language will be specified when storing the script, so this should  *                                be {@code null}; however, this can be specified to look up a stored  *                                script as part of the deprecated API  *<li> {@link Script#idOrCode} - specifies the id of the stored script to be looked up, must not be {@code null}  *<li> {@link Script#options}  - compiler options will be specified when a stored script is stored,  *                                so they have no meaning here and must be {@code null}  *<li> {@link Script#params}   - {@link Map} of user-defined parameters; must not be {@code null},  *                                use an empty {@link Map} to specify no params  *</ul>  *<li> {@link ScriptType#FILE}  *<ul>  *<li> {@link Script#lang}     - specifies the language for look up, defaults to {@link Script#DEFAULT_SCRIPT_LANG}  *<li> {@link Script#idOrCode} - specifies the id of the file script to be looked up, must not be {@code null}  *<li> {@link Script#options}  - compiler options will be specified when a file script is loaded,  *                                so they have no meaning here and must be {@code null}  *<li> {@link Script#params}   - {@link Map} of user-defined parameters; must not be {@code null},  *                                use an empty {@link Map} to specify no params  *</ul>  *</ul>  */
end_comment

begin_class
DECL|class|Script
specifier|public
specifier|final
class|class
name|Script
implements|implements
name|ToXContentObject
implements|,
name|Writeable
block|{
comment|/**      * Standard logger necessary for allocation of the deprecation logger.      */
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScriptMetaData
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Deprecation logger necessary for namespace changes related to stored scripts.      */
DECL|field|DEPRECATION_LOGGER
specifier|private
specifier|static
specifier|final
name|DeprecationLogger
name|DEPRECATION_LOGGER
init|=
operator|new
name|DeprecationLogger
argument_list|(
name|LOGGER
argument_list|)
decl_stmt|;
comment|/**      * The name of the of the default scripting language.      */
DECL|field|DEFAULT_SCRIPT_LANG
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SCRIPT_LANG
init|=
literal|"painless"
decl_stmt|;
comment|/**      * The name of the default template language.      */
DECL|field|DEFAULT_TEMPLATE_LANG
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TEMPLATE_LANG
init|=
literal|"mustache"
decl_stmt|;
comment|/**      * The default {@link ScriptType}.      */
DECL|field|DEFAULT_SCRIPT_TYPE
specifier|public
specifier|static
specifier|final
name|ScriptType
name|DEFAULT_SCRIPT_TYPE
init|=
name|ScriptType
operator|.
name|INLINE
decl_stmt|;
comment|/**      * Compiler option for {@link XContentType} used for templates.      */
DECL|field|CONTENT_TYPE_OPTION
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE_OPTION
init|=
literal|"content_type"
decl_stmt|;
comment|/**      * Standard {@link ParseField} for outer level of script queries.      */
DECL|field|SCRIPT_PARSE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|SCRIPT_PARSE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"script"
argument_list|)
decl_stmt|;
comment|/**      * Standard {@link ParseField} for lang on the inner level.      */
DECL|field|LANG_PARSE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|LANG_PARSE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"lang"
argument_list|)
decl_stmt|;
comment|/**      * Standard {@link ParseField} for options on the inner level.      */
DECL|field|OPTIONS_PARSE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|OPTIONS_PARSE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"options"
argument_list|)
decl_stmt|;
comment|/**      * Standard {@link ParseField} for params on the inner level.      */
DECL|field|PARAMS_PARSE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PARAMS_PARSE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"params"
argument_list|)
decl_stmt|;
comment|/**      * Helper class used by {@link ObjectParser} to store mutable {@link Script} variables and then      * construct an immutable {@link Script} object based on parsed XContent.      */
DECL|class|Builder
specifier|private
specifier|static
specifier|final
class|class
name|Builder
block|{
DECL|field|type
specifier|private
name|ScriptType
name|type
decl_stmt|;
DECL|field|lang
specifier|private
name|String
name|lang
decl_stmt|;
DECL|field|idOrCode
specifier|private
name|String
name|idOrCode
decl_stmt|;
DECL|field|options
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
decl_stmt|;
DECL|field|params
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
DECL|method|Builder
specifier|private
name|Builder
parameter_list|()
block|{
comment|// This cannot default to an empty map because options are potentially added at multiple points.
name|this
operator|.
name|options
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
comment|/**          * Since inline scripts can accept code rather than just an id, they must also be able          * to handle template parsing, hence the need for custom parsing code.  Templates can          * consist of either an {@link String} or a JSON object.  If a JSON object is discovered          * then the content type option must also be saved as a compiler option.          */
DECL|method|setInline
specifier|private
name|void
name|setInline
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|throwOnlyOneOfType
argument_list|()
expr_stmt|;
block|}
name|type
operator|=
name|ScriptType
operator|.
name|INLINE
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
comment|//this is really for search templates, that need to be converted to json format
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|idOrCode
operator|=
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
operator|.
name|string
argument_list|()
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
name|CONTENT_TYPE_OPTION
argument_list|,
name|XContentType
operator|.
name|JSON
operator|.
name|mediaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|idOrCode
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
comment|/**          * Set both the id and the type of the stored script.          */
DECL|method|setStored
specifier|private
name|void
name|setStored
parameter_list|(
name|String
name|idOrCode
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|throwOnlyOneOfType
argument_list|()
expr_stmt|;
block|}
name|type
operator|=
name|ScriptType
operator|.
name|STORED
expr_stmt|;
name|this
operator|.
name|idOrCode
operator|=
name|idOrCode
expr_stmt|;
block|}
comment|/**          * Set both the id and the type of the file script.          */
DECL|method|setFile
specifier|private
name|void
name|setFile
parameter_list|(
name|String
name|idOrCode
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|throwOnlyOneOfType
argument_list|()
expr_stmt|;
block|}
name|type
operator|=
name|ScriptType
operator|.
name|FILE
expr_stmt|;
name|this
operator|.
name|idOrCode
operator|=
name|idOrCode
expr_stmt|;
block|}
comment|/**          * Helper method to throw an exception if more than one type of {@link Script} is specified.          */
DECL|method|throwOnlyOneOfType
specifier|private
name|void
name|throwOnlyOneOfType
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must only use one of ["
operator|+
name|ScriptType
operator|.
name|INLINE
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|" + , "
operator|+
name|ScriptType
operator|.
name|STORED
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|" + , "
operator|+
name|ScriptType
operator|.
name|FILE
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"]"
operator|+
literal|" when specifying a script"
argument_list|)
throw|;
block|}
DECL|method|setLang
specifier|private
name|void
name|setLang
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
block|}
comment|/**          * Options may have already been added if an inline template was specified.          * Appends the user-defined compiler options with the internal compiler options.          */
DECL|method|setOptions
specifier|private
name|void
name|setOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|.
name|putAll
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
DECL|method|setParams
specifier|private
name|void
name|setParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
comment|/**          * Validates the parameters and creates an {@link Script}.          * @param defaultLang The default lang is not a compile-time constant and must be provided          *                    at run-time this way in case a legacy default language is used from          *                    previously stored queries.          */
DECL|method|build
specifier|private
name|Script
name|build
parameter_list|(
name|String
name|defaultLang
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must specify either code for an ["
operator|+
name|ScriptType
operator|.
name|INLINE
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] script "
operator|+
literal|"or an id for a ["
operator|+
name|ScriptType
operator|.
name|STORED
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] script "
operator|+
literal|"or ["
operator|+
name|ScriptType
operator|.
name|FILE
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] script"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
name|ScriptType
operator|.
name|INLINE
condition|)
block|{
if|if
condition|(
name|lang
operator|==
literal|null
condition|)
block|{
name|lang
operator|=
name|defaultLang
expr_stmt|;
block|}
if|if
condition|(
name|idOrCode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must specify<id> for an ["
operator|+
name|ScriptType
operator|.
name|INLINE
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] script"
argument_list|)
throw|;
block|}
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|||
name|options
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|options
operator|.
name|get
argument_list|(
name|CONTENT_TYPE_OPTION
argument_list|)
operator|==
literal|null
condition|)
block|{
name|options
operator|.
name|remove
argument_list|(
name|CONTENT_TYPE_OPTION
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal compiler options ["
operator|+
name|options
operator|+
literal|"] specified"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|ScriptType
operator|.
name|STORED
condition|)
block|{
comment|// Only issue this deprecation warning if we aren't using a template.  Templates during
comment|// this deprecation phase must always specify the default template language or they would
comment|// possibly pick up a script in a different language as defined by the user under the new
comment|// namespace unintentionally.
if|if
condition|(
name|lang
operator|!=
literal|null
operator|&&
name|lang
operator|.
name|equals
argument_list|(
name|DEFAULT_TEMPLATE_LANG
argument_list|)
operator|==
literal|false
condition|)
block|{
name|DEPRECATION_LOGGER
operator|.
name|deprecated
argument_list|(
literal|"specifying the field ["
operator|+
name|LANG_PARSE_FIELD
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] "
operator|+
literal|"for executing "
operator|+
name|ScriptType
operator|.
name|STORED
operator|+
literal|" scripts is deprecated; use only the field "
operator|+
literal|"["
operator|+
name|ScriptType
operator|.
name|STORED
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] to specify an<id>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idOrCode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must specify<code> for an ["
operator|+
name|ScriptType
operator|.
name|STORED
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] script"
argument_list|)
throw|;
block|}
if|if
condition|(
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|options
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field ["
operator|+
name|OPTIONS_PARSE_FIELD
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] "
operator|+
literal|"cannot be specified using a ["
operator|+
name|ScriptType
operator|.
name|STORED
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] script"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|ScriptType
operator|.
name|FILE
condition|)
block|{
if|if
condition|(
name|lang
operator|==
literal|null
condition|)
block|{
name|lang
operator|=
name|defaultLang
expr_stmt|;
block|}
if|if
condition|(
name|idOrCode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must specify<code> for an ["
operator|+
name|ScriptType
operator|.
name|FILE
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] script"
argument_list|)
throw|;
block|}
if|if
condition|(
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|options
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field ["
operator|+
name|OPTIONS_PARSE_FIELD
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] "
operator|+
literal|"cannot be specified using a ["
operator|+
name|ScriptType
operator|.
name|FILE
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] script"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|Script
argument_list|(
name|type
argument_list|,
name|lang
argument_list|,
name|idOrCode
argument_list|,
name|options
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|ObjectParser
argument_list|<
name|Builder
argument_list|,
name|Void
argument_list|>
name|PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"script"
argument_list|,
name|Builder
operator|::
operator|new
argument_list|)
decl_stmt|;
static|static
block|{
comment|// Defines the fields necessary to parse a Script as XContent using an ObjectParser.
name|PARSER
operator|.
name|declareField
argument_list|(
name|Builder
operator|::
name|setInline
argument_list|,
name|parser
lambda|->
name|parser
argument_list|,
name|ScriptType
operator|.
name|INLINE
operator|.
name|getParseField
argument_list|()
argument_list|,
name|ValueType
operator|.
name|OBJECT_OR_STRING
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|Builder
operator|::
name|setStored
argument_list|,
name|ScriptType
operator|.
name|STORED
operator|.
name|getParseField
argument_list|()
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|Builder
operator|::
name|setFile
argument_list|,
name|ScriptType
operator|.
name|FILE
operator|.
name|getParseField
argument_list|()
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|Builder
operator|::
name|setLang
argument_list|,
name|LANG_PARSE_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
name|Builder
operator|::
name|setOptions
argument_list|,
name|XContentParser
operator|::
name|mapStrings
argument_list|,
name|OPTIONS_PARSE_FIELD
argument_list|,
name|ValueType
operator|.
name|OBJECT
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
name|Builder
operator|::
name|setParams
argument_list|,
name|XContentParser
operator|::
name|map
argument_list|,
name|PARAMS_PARSE_FIELD
argument_list|,
name|ValueType
operator|.
name|OBJECT
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convenience method to call {@link Script#parse(XContentParser, String)}      * using the default scripting language.      */
DECL|method|parse
specifier|public
specifier|static
name|Script
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parse
argument_list|(
name|parser
argument_list|,
name|DEFAULT_SCRIPT_LANG
argument_list|)
return|;
block|}
comment|/**      * This will parse XContent into a {@link Script}.  The following formats can be parsed:      *      * The simple format defaults to an {@link ScriptType#INLINE} with no compiler options or user-defined params:      *      * Example:      * {@code      * "return Math.log(doc.popularity) * 100;"      * }      *      * The complex format where {@link ScriptType} and idOrCode are required while lang, options and params are not required.      *      * {@code      * {      *     "<type (inline, stored, file)>" : "<idOrCode>",      *     "lang" : "<lang>",      *     "options" : {      *         "option0" : "<option0>",      *         "option1" : "<option1>",      *         ...      *     },      *     "params" : {      *         "param0" : "<param0>",      *         "param1" : "<param1>",      *         ...      *     }      * }      * }      *      * Example:      * {@code      * {      *     "inline" : "return Math.log(doc.popularity) * params.multiplier",      *     "lang" : "painless",      *     "params" : {      *         "multiplier" : 100.0      *     }      * }      * }      *      * This also handles templates in a special way.  If a complexly formatted query is specified as another complex      * JSON object the query is assumed to be a template, and the format will be preserved.      *      * {@code      * {      *     "inline" : { "query" : ... },      *     "lang" : "<lang>",      *     "options" : {      *         "option0" : "<option0>",      *         "option1" : "<option1>",      *         ...      *     },      *     "params" : {      *         "param0" : "<param0>",      *         "param1" : "<param1>",      *         ...      *     }      * }      * }      *      * @param parser       The {@link XContentParser} to be used.      * @param defaultLang  The default language to use if no language is specified.  The default language isn't necessarily      *                     the one defined by {@link Script#DEFAULT_SCRIPT_LANG} due to backwards compatibility requirements      *                     related to stored queries using previously default languages.      *      * @return             The parsed {@link Script}.      */
DECL|method|parse
specifier|public
specifier|static
name|Script
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|String
name|defaultLang
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|defaultLang
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
return|return
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|defaultLang
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
return|return
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
operator|.
name|build
argument_list|(
name|defaultLang
argument_list|)
return|;
block|}
DECL|field|type
specifier|private
specifier|final
name|ScriptType
name|type
decl_stmt|;
DECL|field|lang
specifier|private
specifier|final
name|String
name|lang
decl_stmt|;
DECL|field|idOrCode
specifier|private
specifier|final
name|String
name|idOrCode
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
decl_stmt|;
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
comment|/**      * Constructor for simple script using the default language and default type.      * @param idOrCode The id or code to use dependent on the default script type.      */
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|String
name|idOrCode
parameter_list|)
block|{
name|this
argument_list|(
name|DEFAULT_SCRIPT_TYPE
argument_list|,
name|DEFAULT_SCRIPT_LANG
argument_list|,
name|idOrCode
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for a script that does not need to use compiler options.      * @param type     The {@link ScriptType}.      * @param lang     The language for this {@link Script} if the {@link ScriptType} is {@link ScriptType#INLINE} or      *                 {@link ScriptType#FILE}.  For {@link ScriptType#STORED} scripts this should be null, but can      *                 be specified to access scripts stored as part of the stored scripts deprecated API.      * @param idOrCode The id for this {@link Script} if the {@link ScriptType} is {@link ScriptType#FILE} or {@link ScriptType#STORED}.      *                 The code for this {@link Script} if the {@link ScriptType} is {@link ScriptType#INLINE}.      * @param params   The user-defined params to be bound for script execution.      */
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|ScriptType
name|type
parameter_list|,
name|String
name|lang
parameter_list|,
name|String
name|idOrCode
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|lang
argument_list|,
name|idOrCode
argument_list|,
name|type
operator|==
name|ScriptType
operator|.
name|INLINE
condition|?
name|Collections
operator|.
name|emptyMap
argument_list|()
else|:
literal|null
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for a script that requires the use of compiler options.      * @param type     The {@link ScriptType}.      * @param lang     The language for this {@link Script} if the {@link ScriptType} is {@link ScriptType#INLINE} or      *                 {@link ScriptType#FILE}.  For {@link ScriptType#STORED} scripts this should be null, but can      *                 be specified to access scripts stored as part of the stored scripts deprecated API.      * @param idOrCode The id for this {@link Script} if the {@link ScriptType} is {@link ScriptType#FILE} or {@link ScriptType#STORED}.      *                 The code for this {@link Script} if the {@link ScriptType} is {@link ScriptType#INLINE}.      * @param options  The map of compiler options for this {@link Script} if the {@link ScriptType}      *                 is {@link ScriptType#INLINE}, {@code null} otherwise.      * @param params   The user-defined params to be bound for script execution.      */
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|ScriptType
name|type
parameter_list|,
name|String
name|lang
parameter_list|,
name|String
name|idOrCode
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|idOrCode
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|idOrCode
argument_list|)
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|ScriptType
operator|.
name|INLINE
condition|)
block|{
name|this
operator|.
name|lang
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|lang
argument_list|)
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|ScriptType
operator|.
name|STORED
condition|)
block|{
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"options must be null for ["
operator|+
name|ScriptType
operator|.
name|STORED
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] scripts"
argument_list|)
throw|;
block|}
name|this
operator|.
name|options
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|ScriptType
operator|.
name|FILE
condition|)
block|{
name|this
operator|.
name|lang
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|lang
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"options must be null for ["
operator|+
name|ScriptType
operator|.
name|FILE
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] scripts"
argument_list|)
throw|;
block|}
name|this
operator|.
name|options
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown script type ["
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a {@link Script} read from an input stream.      */
DECL|method|Script
specifier|public
name|Script
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Version 5.3 allows lang to be an optional parameter for stored scripts and expects
comment|// options to be null for stored and file scripts.
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_3_0_UNRELEASED
argument_list|)
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|ScriptType
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|lang
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|this
operator|.
name|idOrCode
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
call|)
argument_list|(
name|Map
argument_list|)
name|in
operator|.
name|readMap
argument_list|()
decl_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|in
operator|.
name|readMap
argument_list|()
expr_stmt|;
comment|// Version 5.1 to 5.3 (exclusive) requires all Script members to be non-null and supports the potential
comment|// for more options than just XContentType.  Reorders the read in contents to be in
comment|// same order as the constructor.
block|}
elseif|else
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_1_1_UNRELEASED
argument_list|)
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|ScriptType
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|lang
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|idOrCode
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
call|)
argument_list|(
name|Map
argument_list|)
name|in
operator|.
name|readMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|type
operator|!=
name|ScriptType
operator|.
name|INLINE
operator|&&
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|options
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
name|this
operator|.
name|params
operator|=
name|in
operator|.
name|readMap
argument_list|()
expr_stmt|;
comment|// Prior to version 5.1 the script members are read in certain cases as optional and given
comment|// default values when necessary.  Also the only option supported is for XContentType.
block|}
else|else
block|{
name|this
operator|.
name|idOrCode
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|ScriptType
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|type
operator|=
name|DEFAULT_SCRIPT_TYPE
expr_stmt|;
block|}
name|String
name|lang
init|=
name|in
operator|.
name|readOptionalString
argument_list|()
decl_stmt|;
if|if
condition|(
name|lang
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|lang
operator|=
name|DEFAULT_SCRIPT_LANG
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|in
operator|.
name|readMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|params
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|this
operator|.
name|options
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|XContentType
name|contentType
init|=
name|XContentType
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|this
operator|.
name|options
operator|.
name|put
argument_list|(
name|CONTENT_TYPE_OPTION
argument_list|,
name|contentType
operator|.
name|mediaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|ScriptType
operator|.
name|INLINE
condition|)
block|{
name|options
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|options
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Version 5.3+ allows lang to be an optional parameter for stored scripts and expects
comment|// options to be null for stored and file scripts.
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_3_0_UNRELEASED
argument_list|)
condition|)
block|{
name|type
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|lang
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|idOrCode
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
name|Map
argument_list|)
name|this
operator|.
name|options
decl_stmt|;
name|out
operator|.
name|writeMap
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeMap
argument_list|(
name|params
argument_list|)
expr_stmt|;
comment|// Version 5.1 to 5.3 (exclusive) requires all Script members to be non-null and supports the potential
comment|// for more options than just XContentType.  Reorders the written out contents to be in
comment|// same order as the constructor.
block|}
elseif|else
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_1_1_UNRELEASED
argument_list|)
condition|)
block|{
name|type
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|lang
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeString
argument_list|(
name|lang
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeString
argument_list|(
name|idOrCode
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
name|Map
argument_list|)
name|this
operator|.
name|options
decl_stmt|;
if|if
condition|(
name|options
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeMap
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeMap
argument_list|(
name|params
argument_list|)
expr_stmt|;
comment|// Prior to version 5.1 the Script members were possibly written as optional or null, though there is no case where a null
comment|// value wasn't equivalent to it's default value when actually compiling/executing a script.  Meaning, there are no
comment|// backwards compatibility issues, and now there's enforced consistency.  Also the only supported compiler
comment|// option was XContentType.
block|}
else|else
block|{
name|out
operator|.
name|writeString
argument_list|(
name|idOrCode
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|lang
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|writeMap
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeMap
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|!=
literal|null
operator|&&
name|options
operator|.
name|containsKey
argument_list|(
name|CONTENT_TYPE_OPTION
argument_list|)
condition|)
block|{
name|XContentType
name|contentType
init|=
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|options
operator|.
name|get
argument_list|(
name|CONTENT_TYPE_OPTION
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|contentType
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will build scripts into the following XContent structure:      *      * {@code      * {      *     "<type (inline, stored, file)>" : "<idOrCode>",      *     "lang" : "<lang>",      *     "options" : {      *         "option0" : "<option0>",      *         "option1" : "<option1>",      *         ...      *     },      *     "params" : {      *         "param0" : "<param0>",      *         "param1" : "<param1>",      *         ...      *     }      * }      * }      *      * Example:      * {@code      * {      *     "inline" : "return Math.log(doc.popularity) * params.multiplier;",      *     "lang" : "painless",      *     "params" : {      *         "multiplier" : 100.0      *     }      * }      * }      *      * Note that lang, options, and params will only be included if there have been any specified.      *      * This also handles templates in a special way.  If the {@link Script#CONTENT_TYPE_OPTION} option      * is provided and the {@link ScriptType#INLINE} is specified then the template will be preserved as a raw field.      *      * {@code      * {      *     "inline" : { "query" : ... },      *     "lang" : "<lang>",      *     "options" : {      *         "option0" : "<option0>",      *         "option1" : "<option1>",      *         ...      *     },      *     "params" : {      *         "param0" : "<param0>",      *         "param1" : "<param1>",      *         ...      *     }      * }      * }      */
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|builderParams
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|String
name|contentType
init|=
name|options
operator|==
literal|null
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
name|CONTENT_TYPE_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|ScriptType
operator|.
name|INLINE
operator|&&
name|contentType
operator|!=
literal|null
operator|&&
name|builder
operator|.
name|contentType
argument_list|()
operator|.
name|mediaType
argument_list|()
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
name|type
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|idOrCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|type
operator|.
name|getParseField
argument_list|()
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|idOrCode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lang
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|LANG_PARSE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|lang
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|!=
literal|null
operator|&&
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|OPTIONS_PARSE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|PARAMS_PARSE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * @return The {@link ScriptType} for this {@link Script}.      */
DECL|method|getType
specifier|public
name|ScriptType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * @return The language for this {@link Script} if the {@link ScriptType} is {@link ScriptType#INLINE} or      *         {@link ScriptType#FILE}.  For {@link ScriptType#STORED} scripts this should be null, but can      *         be specified to access scripts stored as part of the stored scripts deprecated API.      */
DECL|method|getLang
specifier|public
name|String
name|getLang
parameter_list|()
block|{
return|return
name|lang
return|;
block|}
comment|/**      * @return The id for this {@link Script} if the {@link ScriptType} is {@link ScriptType#FILE} or {@link ScriptType#STORED}.      *         The code for this {@link Script} if the {@link ScriptType} is {@link ScriptType#INLINE}.      */
DECL|method|getIdOrCode
specifier|public
name|String
name|getIdOrCode
parameter_list|()
block|{
return|return
name|idOrCode
return|;
block|}
comment|/**      * @return The map of compiler options for this {@link Script} if the {@link ScriptType}      *         is {@link ScriptType#INLINE}, {@code null} otherwise.      */
DECL|method|getOptions
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
comment|/**      * @return The map of user-defined params for this {@link Script}.      */
DECL|method|getParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Script
name|script
init|=
operator|(
name|Script
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|script
operator|.
name|type
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|lang
operator|!=
literal|null
condition|?
operator|!
name|lang
operator|.
name|equals
argument_list|(
name|script
operator|.
name|lang
argument_list|)
else|:
name|script
operator|.
name|lang
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|idOrCode
operator|.
name|equals
argument_list|(
name|script
operator|.
name|idOrCode
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|?
operator|!
name|options
operator|.
name|equals
argument_list|(
name|script
operator|.
name|options
argument_list|)
else|:
name|script
operator|.
name|options
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|params
operator|.
name|equals
argument_list|(
name|script
operator|.
name|params
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|type
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|lang
operator|!=
literal|null
condition|?
name|lang
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|idOrCode
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|options
operator|!=
literal|null
condition|?
name|options
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|params
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Script{"
operator|+
literal|"type="
operator|+
name|type
operator|+
literal|", lang='"
operator|+
name|lang
operator|+
literal|'\''
operator|+
literal|", idOrCode='"
operator|+
name|idOrCode
operator|+
literal|'\''
operator|+
literal|", options="
operator|+
name|options
operator|+
literal|", params="
operator|+
name|params
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

