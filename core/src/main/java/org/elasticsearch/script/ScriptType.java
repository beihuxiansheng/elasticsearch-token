begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * ScriptType represents the way a script is stored and retrieved from the {@link ScriptService}.  * It's also used to by {@link ScriptSettings} and {@link ScriptModes} to determine whether or not  * a {@link Script} is allowed to be executed based on both default and user-defined settings.  */
end_comment

begin_enum
DECL|enum|ScriptType
specifier|public
enum|enum
name|ScriptType
implements|implements
name|Writeable
block|{
comment|/**      * INLINE scripts are specified in numerous queries and compiled on-the-fly.      * They will be cached based on the lang and code of the script.      * They are turned off by default because most languages are insecure      * (Groovy and others), but can be overridden by the specific {@link ScriptEngine}      * if the language is naturally secure (Painless, Mustache, and Expressions).      */
DECL|enum constant|INLINE
name|INLINE
argument_list|(
literal|0
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"inline"
argument_list|)
argument_list|,
literal|false
argument_list|)
block|,
comment|/**      * STORED scripts are saved as part of the {@link org.elasticsearch.cluster.ClusterState}      * based on user requests.  They will be cached when they are first used in a query.      * They are turned off by default because most languages are insecure      * (Groovy and others), but can be overridden by the specific {@link ScriptEngine}      * if the language is naturally secure (Painless, Mustache, and Expressions).      */
DECL|enum constant|STORED
name|STORED
argument_list|(
literal|1
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"stored"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|false
argument_list|)
block|;
comment|/**      * Reads an int from the input stream and converts it to a {@link ScriptType}.      * @return The ScriptType read from the stream. Throws an {@link IllegalStateException}      * if no ScriptType is found based on the id.      */
DECL|method|readFrom
specifier|public
specifier|static
name|ScriptType
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|id
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|STORED
operator|.
name|id
operator|==
name|id
condition|)
block|{
return|return
name|STORED
return|;
block|}
elseif|else
if|if
condition|(
name|INLINE
operator|.
name|id
operator|==
name|id
condition|)
block|{
return|return
name|INLINE
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error reading ScriptType id ["
operator|+
name|id
operator|+
literal|"] from stream, expected one of ["
operator|+
name|STORED
operator|.
name|id
operator|+
literal|" ["
operator|+
name|STORED
operator|.
name|parseField
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"], "
operator|+
name|INLINE
operator|.
name|id
operator|+
literal|" ["
operator|+
name|INLINE
operator|.
name|parseField
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"]]"
argument_list|)
throw|;
block|}
block|}
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|parseField
specifier|private
specifier|final
name|ParseField
name|parseField
decl_stmt|;
DECL|field|defaultEnabled
specifier|private
specifier|final
name|boolean
name|defaultEnabled
decl_stmt|;
comment|/**      * Standard constructor.      * @param id A unique identifier for a type that can be read/written to a stream.      * @param parseField Specifies the name used to parse input from queries.      * @param defaultEnabled Whether or not a {@link ScriptType} can be run by default.      */
DECL|method|ScriptType
name|ScriptType
parameter_list|(
name|int
name|id
parameter_list|,
name|ParseField
name|parseField
parameter_list|,
name|boolean
name|defaultEnabled
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|parseField
operator|=
name|parseField
expr_stmt|;
name|this
operator|.
name|defaultEnabled
operator|=
name|defaultEnabled
expr_stmt|;
block|}
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return The unique id for this {@link ScriptType}.      */
DECL|method|getId
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * @return The unique name for this {@link ScriptType} based on the {@link ParseField}.      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|parseField
operator|.
name|getPreferredName
argument_list|()
return|;
block|}
comment|/**      * @return Specifies the name used to parse input from queries.      */
DECL|method|getParseField
specifier|public
name|ParseField
name|getParseField
parameter_list|()
block|{
return|return
name|parseField
return|;
block|}
comment|/**      * @return Whether or not a {@link ScriptType} can be run by default.  Note      * this can be potentially overridden by any {@link ScriptEngine}.      */
DECL|method|isDefaultEnabled
specifier|public
name|boolean
name|isDefaultEnabled
parameter_list|()
block|{
return|return
name|defaultEnabled
return|;
block|}
comment|/**      * @return The same as calling {@link #getName()}.      */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
end_enum

end_unit

