begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
operator|.
name|Params
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
operator|.
name|ScriptParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ScriptParameterParser
specifier|public
class|class
name|ScriptParameterParser
block|{
DECL|field|FILE_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|FILE_SUFFIX
init|=
literal|"_file"
decl_stmt|;
DECL|field|INDEXED_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|INDEXED_SUFFIX
init|=
literal|"_id"
decl_stmt|;
DECL|field|parameterValues
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptParameterValue
argument_list|>
name|parameterValues
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|inlineParameters
specifier|private
name|Set
argument_list|<
name|ParseField
argument_list|>
name|inlineParameters
decl_stmt|;
DECL|field|fileParameters
specifier|private
name|Set
argument_list|<
name|ParseField
argument_list|>
name|fileParameters
decl_stmt|;
DECL|field|indexedParameters
specifier|private
name|Set
argument_list|<
name|ParseField
argument_list|>
name|indexedParameters
decl_stmt|;
DECL|field|lang
specifier|private
name|String
name|lang
init|=
literal|null
decl_stmt|;
DECL|method|ScriptParameterParser
specifier|public
name|ScriptParameterParser
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ScriptParameterParser
specifier|public
name|ScriptParameterParser
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|parameterNames
parameter_list|)
block|{
if|if
condition|(
name|parameterNames
operator|==
literal|null
operator|||
name|parameterNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|inlineParameters
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INLINE
argument_list|)
expr_stmt|;
name|fileParameters
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_FILE
argument_list|)
expr_stmt|;
name|indexedParameters
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_ID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inlineParameters
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|fileParameters
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|indexedParameters
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|parameterName
range|:
name|parameterNames
control|)
block|{
if|if
condition|(
name|ScriptService
operator|.
name|SCRIPT_LANG
operator|.
name|match
argument_list|(
name|parameterName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"lang is reserved and cannot be used as a parameter name"
argument_list|)
throw|;
block|}
name|inlineParameters
operator|.
name|add
argument_list|(
operator|new
name|ParseField
argument_list|(
name|parameterName
argument_list|)
argument_list|)
expr_stmt|;
name|fileParameters
operator|.
name|add
argument_list|(
operator|new
name|ParseField
argument_list|(
name|parameterName
operator|+
name|FILE_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|indexedParameters
operator|.
name|add
argument_list|(
operator|new
name|ParseField
argument_list|(
name|parameterName
operator|+
name|INDEXED_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|token
specifier|public
name|boolean
name|token
parameter_list|(
name|String
name|currentFieldName
parameter_list|,
name|XContentParser
operator|.
name|Token
name|token
parameter_list|,
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
if|if
condition|(
name|ScriptService
operator|.
name|SCRIPT_LANG
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|lang
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
for|for
control|(
name|ParseField
name|parameter
range|:
name|inlineParameters
control|)
block|{
if|if
condition|(
name|parameter
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|String
name|coreParameterName
init|=
name|parameter
operator|.
name|getPreferredName
argument_list|()
decl_stmt|;
name|putParameterValue
argument_list|(
name|coreParameterName
argument_list|,
name|parser
operator|.
name|textOrNull
argument_list|()
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|ParseField
name|parameter
range|:
name|fileParameters
control|)
block|{
if|if
condition|(
name|parameter
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|String
name|coreParameterName
init|=
name|parameter
operator|.
name|getPreferredName
argument_list|()
operator|.
name|replace
argument_list|(
name|FILE_SUFFIX
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|putParameterValue
argument_list|(
name|coreParameterName
argument_list|,
name|parser
operator|.
name|textOrNull
argument_list|()
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|ParseField
name|parameter
range|:
name|indexedParameters
control|)
block|{
if|if
condition|(
name|parameter
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|String
name|coreParameterName
init|=
name|parameter
operator|.
name|getPreferredName
argument_list|()
operator|.
name|replace
argument_list|(
name|INDEXED_SUFFIX
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|putParameterValue
argument_list|(
name|coreParameterName
argument_list|,
name|parser
operator|.
name|textOrNull
argument_list|()
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|parseConfig
specifier|public
name|void
name|parseConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|boolean
name|removeMatchedEntries
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|itr
init|=
name|config
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|parameterName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|parameterValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|ScriptService
operator|.
name|SCRIPT_LANG
operator|.
name|match
argument_list|(
name|parameterName
argument_list|)
condition|)
block|{
if|if
condition|(
name|parameterValue
operator|instanceof
name|String
operator|||
name|parameterValue
operator|==
literal|null
condition|)
block|{
name|lang
operator|=
operator|(
name|String
operator|)
name|parameterValue
expr_stmt|;
if|if
condition|(
name|removeMatchedEntries
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ScriptParseException
argument_list|(
literal|"Value must be of type String: ["
operator|+
name|parameterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
for|for
control|(
name|ParseField
name|parameter
range|:
name|inlineParameters
control|)
block|{
if|if
condition|(
name|parameter
operator|.
name|match
argument_list|(
name|parameterName
argument_list|)
condition|)
block|{
name|String
name|coreParameterName
init|=
name|parameter
operator|.
name|getPreferredName
argument_list|()
decl_stmt|;
name|String
name|stringValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parameterValue
operator|instanceof
name|String
condition|)
block|{
name|stringValue
operator|=
operator|(
name|String
operator|)
name|parameterValue
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ScriptParseException
argument_list|(
literal|"Value must be of type String: ["
operator|+
name|parameterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|putParameterValue
argument_list|(
name|coreParameterName
argument_list|,
name|stringValue
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeMatchedEntries
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ParseField
name|parameter
range|:
name|fileParameters
control|)
block|{
if|if
condition|(
name|parameter
operator|.
name|match
argument_list|(
name|parameterName
argument_list|)
condition|)
block|{
name|String
name|coreParameterName
init|=
name|parameter
operator|.
name|getPreferredName
argument_list|()
operator|.
name|replace
argument_list|(
name|FILE_SUFFIX
argument_list|,
literal|""
argument_list|)
decl_stmt|;
empty_stmt|;
name|String
name|stringValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parameterValue
operator|instanceof
name|String
condition|)
block|{
name|stringValue
operator|=
operator|(
name|String
operator|)
name|parameterValue
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ScriptParseException
argument_list|(
literal|"Value must be of type String: ["
operator|+
name|parameterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|putParameterValue
argument_list|(
name|coreParameterName
argument_list|,
name|stringValue
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeMatchedEntries
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ParseField
name|parameter
range|:
name|indexedParameters
control|)
block|{
if|if
condition|(
name|parameter
operator|.
name|match
argument_list|(
name|parameterName
argument_list|)
condition|)
block|{
name|String
name|coreParameterName
init|=
name|parameter
operator|.
name|getPreferredName
argument_list|()
operator|.
name|replace
argument_list|(
name|INDEXED_SUFFIX
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|stringValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parameterValue
operator|instanceof
name|String
condition|)
block|{
name|stringValue
operator|=
operator|(
name|String
operator|)
name|parameterValue
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ScriptParseException
argument_list|(
literal|"Value must be of type String: ["
operator|+
name|parameterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|putParameterValue
argument_list|(
name|coreParameterName
argument_list|,
name|stringValue
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeMatchedEntries
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|putParameterValue
specifier|private
name|void
name|putParameterValue
parameter_list|(
name|String
name|coreParameterName
parameter_list|,
name|String
name|script
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|)
block|{
if|if
condition|(
name|parameterValues
operator|.
name|get
argument_list|(
name|coreParameterName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|parameterValues
operator|.
name|put
argument_list|(
name|coreParameterName
argument_list|,
operator|new
name|ScriptParameterValue
argument_list|(
name|script
argument_list|,
name|scriptType
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ScriptParseException
argument_list|(
literal|"Only one of ["
operator|+
name|coreParameterName
operator|+
literal|", "
operator|+
name|coreParameterName
operator|+
name|FILE_SUFFIX
operator|+
literal|", "
operator|+
name|coreParameterName
operator|+
name|INDEXED_SUFFIX
operator|+
literal|"] is allowed."
argument_list|)
throw|;
block|}
block|}
DECL|method|parseParams
specifier|public
name|void
name|parseParams
parameter_list|(
name|Params
name|params
parameter_list|)
block|{
name|lang
operator|=
name|params
operator|.
name|param
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_LANG
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ParseField
name|parameter
range|:
name|inlineParameters
control|)
block|{
name|String
name|value
init|=
name|params
operator|.
name|param
argument_list|(
name|parameter
operator|.
name|getPreferredName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|coreParameterName
init|=
name|parameter
operator|.
name|getPreferredName
argument_list|()
decl_stmt|;
name|putParameterValue
argument_list|(
name|coreParameterName
argument_list|,
name|value
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ParseField
name|parameter
range|:
name|fileParameters
control|)
block|{
name|String
name|value
init|=
name|params
operator|.
name|param
argument_list|(
name|parameter
operator|.
name|getPreferredName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|coreParameterName
init|=
name|parameter
operator|.
name|getPreferredName
argument_list|()
operator|.
name|replace
argument_list|(
name|FILE_SUFFIX
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|putParameterValue
argument_list|(
name|coreParameterName
argument_list|,
name|value
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ParseField
name|parameter
range|:
name|indexedParameters
control|)
block|{
name|String
name|value
init|=
name|params
operator|.
name|param
argument_list|(
name|parameter
operator|.
name|getPreferredName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|coreParameterName
init|=
name|parameter
operator|.
name|getPreferredName
argument_list|()
operator|.
name|replace
argument_list|(
name|INDEXED_SUFFIX
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|putParameterValue
argument_list|(
name|coreParameterName
argument_list|,
name|value
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getDefaultScriptParameterValue
specifier|public
name|ScriptParameterValue
name|getDefaultScriptParameterValue
parameter_list|()
block|{
return|return
name|getScriptParameterValue
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INLINE
operator|.
name|getPreferredName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getScriptParameterValue
specifier|public
name|ScriptParameterValue
name|getScriptParameterValue
parameter_list|(
name|String
name|parameterName
parameter_list|)
block|{
return|return
name|parameterValues
operator|.
name|get
argument_list|(
name|parameterName
argument_list|)
return|;
block|}
DECL|method|lang
specifier|public
name|String
name|lang
parameter_list|()
block|{
return|return
name|lang
return|;
block|}
DECL|class|ScriptParameterValue
specifier|public
specifier|static
class|class
name|ScriptParameterValue
block|{
DECL|field|script
specifier|private
name|String
name|script
decl_stmt|;
DECL|field|scriptType
specifier|private
name|ScriptType
name|scriptType
decl_stmt|;
DECL|method|ScriptParameterValue
specifier|public
name|ScriptParameterValue
parameter_list|(
name|String
name|script
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|this
operator|.
name|scriptType
operator|=
name|scriptType
expr_stmt|;
block|}
DECL|method|script
specifier|public
name|String
name|script
parameter_list|()
block|{
return|return
name|script
return|;
block|}
DECL|method|scriptType
specifier|public
name|ScriptType
name|scriptType
parameter_list|()
block|{
return|return
name|scriptType
return|;
block|}
block|}
block|}
end_class

end_unit

