begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
operator|.
name|DeleteStoredScriptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
operator|.
name|DeleteStoredScriptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
operator|.
name|GetStoredScriptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
operator|.
name|PutStoredScriptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
operator|.
name|PutStoredScriptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|AckedClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreakingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|template
operator|.
name|CompiledTemplate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
DECL|class|ScriptService
specifier|public
class|class
name|ScriptService
extends|extends
name|AbstractComponent
implements|implements
name|Closeable
implements|,
name|ClusterStateListener
block|{
DECL|field|DISABLE_DYNAMIC_SCRIPTING_SETTING
specifier|static
specifier|final
name|String
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
init|=
literal|"script.disable_dynamic"
decl_stmt|;
DECL|field|SCRIPT_CACHE_SIZE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SCRIPT_CACHE_SIZE_SETTING
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"script.cache.max_size"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_CACHE_EXPIRE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|SCRIPT_CACHE_EXPIRE_SETTING
init|=
name|Setting
operator|.
name|positiveTimeSetting
argument_list|(
literal|"script.cache.expire"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_MAX_SIZE_IN_BYTES
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SCRIPT_MAX_SIZE_IN_BYTES
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"script.max_size_in_bytes"
argument_list|,
literal|65535
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_MAX_COMPILATIONS_PER_MINUTE
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SCRIPT_MAX_COMPILATIONS_PER_MINUTE
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"script.max_compilations_per_minute"
argument_list|,
literal|15
argument_list|,
literal|0
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|ALLOW_NONE
specifier|public
specifier|static
specifier|final
name|String
name|ALLOW_NONE
init|=
literal|"none"
decl_stmt|;
DECL|field|TYPES_ALLOWED_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|TYPES_ALLOWED_SETTING
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"script.allowed_types"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|CONTEXTS_ALLOWED_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|CONTEXTS_ALLOWED_SETTING
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"script.allowed_contexts"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|typesAllowed
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|typesAllowed
decl_stmt|;
DECL|field|contextsAllowed
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|contextsAllowed
decl_stmt|;
DECL|field|engines
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngine
argument_list|>
name|engines
decl_stmt|;
DECL|field|contexts
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptContext
argument_list|<
name|?
argument_list|>
argument_list|>
name|contexts
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
name|cache
decl_stmt|;
DECL|field|scriptMetrics
specifier|private
specifier|final
name|ScriptMetrics
name|scriptMetrics
init|=
operator|new
name|ScriptMetrics
argument_list|()
decl_stmt|;
DECL|field|clusterState
specifier|private
name|ClusterState
name|clusterState
decl_stmt|;
DECL|field|totalCompilesPerMinute
specifier|private
name|int
name|totalCompilesPerMinute
decl_stmt|;
DECL|field|lastInlineCompileTime
specifier|private
name|long
name|lastInlineCompileTime
decl_stmt|;
DECL|field|scriptsPerMinCounter
specifier|private
name|double
name|scriptsPerMinCounter
decl_stmt|;
DECL|field|compilesAllowedPerNano
specifier|private
name|double
name|compilesAllowedPerNano
decl_stmt|;
DECL|method|ScriptService
specifier|public
name|ScriptService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngine
argument_list|>
name|engines
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptContext
argument_list|<
name|?
argument_list|>
argument_list|>
name|contexts
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|engines
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|engines
argument_list|)
expr_stmt|;
name|this
operator|.
name|contexts
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|contexts
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
operator|+
literal|" is not a supported setting, replace with fine-grained script settings. \n"
operator|+
literal|"Dynamic scripts can be enabled for all languages and all operations not using `script.disable_dynamic: false` in elasticsearch.yml"
argument_list|)
throw|;
block|}
name|this
operator|.
name|typesAllowed
operator|=
name|TYPES_ALLOWED_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|?
operator|new
name|HashSet
argument_list|<>
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|typesAllowed
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|typesAllowedList
init|=
name|TYPES_ALLOWED_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|typesAllowedList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must specify at least one script type or none for setting ["
operator|+
name|TYPES_ALLOWED_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|settingType
range|:
name|typesAllowedList
control|)
block|{
if|if
condition|(
name|ALLOW_NONE
operator|.
name|equals
argument_list|(
name|settingType
argument_list|)
condition|)
block|{
if|if
condition|(
name|typesAllowedList
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot specify both ["
operator|+
name|ALLOW_NONE
operator|+
literal|"]"
operator|+
literal|" and other script types for setting ["
operator|+
name|TYPES_ALLOWED_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ScriptType
name|scriptType
range|:
name|ScriptType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|scriptType
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|settingType
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|typesAllowed
operator|.
name|add
argument_list|(
name|settingType
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown script type ["
operator|+
name|settingType
operator|+
literal|"] found in setting ["
operator|+
name|TYPES_ALLOWED_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
name|this
operator|.
name|contextsAllowed
operator|=
name|CONTEXTS_ALLOWED_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|?
operator|new
name|HashSet
argument_list|<>
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|contextsAllowed
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|contextsAllowedList
init|=
name|CONTEXTS_ALLOWED_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|contextsAllowedList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must specify at least one script context or none for setting ["
operator|+
name|CONTEXTS_ALLOWED_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|settingContext
range|:
name|contextsAllowedList
control|)
block|{
if|if
condition|(
name|ALLOW_NONE
operator|.
name|equals
argument_list|(
name|settingContext
argument_list|)
condition|)
block|{
if|if
condition|(
name|contextsAllowedList
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot specify both ["
operator|+
name|ALLOW_NONE
operator|+
literal|"]"
operator|+
literal|" and other script contexts for setting ["
operator|+
name|CONTEXTS_ALLOWED_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|contexts
operator|.
name|containsKey
argument_list|(
name|settingContext
argument_list|)
condition|)
block|{
name|this
operator|.
name|contextsAllowed
operator|.
name|add
argument_list|(
name|settingContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown script context ["
operator|+
name|settingContext
operator|+
literal|"] found in setting ["
operator|+
name|CONTEXTS_ALLOWED_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
name|int
name|cacheMaxSize
init|=
name|SCRIPT_CACHE_SIZE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|CacheBuilder
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
name|cacheBuilder
init|=
name|CacheBuilder
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|cacheMaxSize
operator|>=
literal|0
condition|)
block|{
name|cacheBuilder
operator|.
name|setMaximumWeight
argument_list|(
name|cacheMaxSize
argument_list|)
expr_stmt|;
block|}
name|TimeValue
name|cacheExpire
init|=
name|SCRIPT_CACHE_EXPIRE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheExpire
operator|.
name|getNanos
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|cacheBuilder
operator|.
name|setExpireAfterAccess
argument_list|(
name|cacheExpire
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"using script cache with max_size [{}], expire [{}]"
argument_list|,
name|cacheMaxSize
argument_list|,
name|cacheExpire
argument_list|)
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cacheBuilder
operator|.
name|removalListener
argument_list|(
operator|new
name|ScriptCacheRemovalListener
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastInlineCompileTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|setMaxCompilationsPerMinute
argument_list|(
name|SCRIPT_MAX_COMPILATIONS_PER_MINUTE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|registerClusterSettingsListeners
name|void
name|registerClusterSettingsListeners
parameter_list|(
name|ClusterSettings
name|clusterSettings
parameter_list|)
block|{
name|clusterSettings
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|SCRIPT_MAX_COMPILATIONS_PER_MINUTE
argument_list|,
name|this
operator|::
name|setMaxCompilationsPerMinute
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|engines
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getEngine
specifier|private
name|ScriptEngine
name|getEngine
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
name|ScriptEngine
name|scriptEngine
init|=
name|engines
operator|.
name|get
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptEngine
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"script_lang not supported ["
operator|+
name|lang
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|scriptEngine
return|;
block|}
DECL|method|setMaxCompilationsPerMinute
name|void
name|setMaxCompilationsPerMinute
parameter_list|(
name|Integer
name|newMaxPerMinute
parameter_list|)
block|{
name|this
operator|.
name|totalCompilesPerMinute
operator|=
name|newMaxPerMinute
expr_stmt|;
comment|// Reset the counter to allow new compilations
name|this
operator|.
name|scriptsPerMinCounter
operator|=
name|totalCompilesPerMinute
expr_stmt|;
name|this
operator|.
name|compilesAllowedPerNano
operator|=
operator|(
operator|(
name|double
operator|)
name|totalCompilesPerMinute
operator|)
operator|/
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|1
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
block|}
comment|/**      * Compiles a script using the given context.      *      * @return a compiled script which may be used to construct instances of a script for the given context      */
DECL|method|compile
specifier|public
parameter_list|<
name|CompiledType
parameter_list|>
name|CompiledType
name|compile
parameter_list|(
name|Script
name|script
parameter_list|,
name|ScriptContext
argument_list|<
name|CompiledType
argument_list|>
name|context
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|ScriptType
name|type
init|=
name|script
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|lang
init|=
name|script
operator|.
name|getLang
argument_list|()
decl_stmt|;
name|String
name|idOrCode
init|=
name|script
operator|.
name|getIdOrCode
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
name|script
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|idOrCode
decl_stmt|;
comment|// lang may be null when looking up a stored script, so we must get the
comment|// source to retrieve the lang before checking if the context is supported
if|if
condition|(
name|type
operator|==
name|ScriptType
operator|.
name|STORED
condition|)
block|{
comment|// search template requests can possibly pass in the entire path instead
comment|// of just an id for looking up a stored script, so we parse the path and
comment|// check for appropriate errors
name|String
index|[]
name|path
init|=
name|id
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|length
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|lang
operator|!=
literal|null
operator|&&
name|lang
operator|.
name|equals
argument_list|(
name|path
index|[
literal|1
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"conflicting script languages, found ["
operator|+
name|path
index|[
literal|1
index|]
operator|+
literal|"] but expected ["
operator|+
name|lang
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|id
operator|=
name|path
index|[
literal|2
index|]
expr_stmt|;
name|deprecationLogger
operator|.
name|deprecated
argument_list|(
literal|"use of</lang/id> ["
operator|+
name|idOrCode
operator|+
literal|"] for looking up"
operator|+
literal|" stored scripts/templates has been deprecated, use only<id> ["
operator|+
name|id
operator|+
literal|"] instead"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal stored script format ["
operator|+
name|id
operator|+
literal|"] use only<id>"
argument_list|)
throw|;
block|}
comment|// a stored script must be pulled from the cluster state every time in case
comment|// the script has been updated since the last compilation
name|StoredScriptSource
name|source
init|=
name|getScriptFromClusterState
argument_list|(
name|id
argument_list|,
name|lang
argument_list|)
decl_stmt|;
name|lang
operator|=
name|source
operator|.
name|getLang
argument_list|()
expr_stmt|;
name|idOrCode
operator|=
name|source
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|options
operator|=
name|source
operator|.
name|getOptions
argument_list|()
expr_stmt|;
block|}
comment|// TODO: fix this through some API or something, that's wrong
comment|// special exception to prevent expressions from compiling as update or mapping scripts
name|boolean
name|expression
init|=
literal|"expression"
operator|.
name|equals
argument_list|(
name|script
operator|.
name|getLang
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|notSupported
init|=
name|context
operator|.
name|name
operator|.
name|equals
argument_list|(
name|ScriptContext
operator|.
name|UPDATE
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|expression
operator|&&
name|notSupported
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"scripts of type ["
operator|+
name|script
operator|.
name|getType
argument_list|()
operator|+
literal|"],"
operator|+
literal|" operation ["
operator|+
name|context
operator|.
name|name
operator|+
literal|"] and lang ["
operator|+
name|lang
operator|+
literal|"] are not supported"
argument_list|)
throw|;
block|}
name|ScriptEngine
name|scriptEngine
init|=
name|getEngine
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTypeEnabled
argument_list|(
name|type
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot execute ["
operator|+
name|type
operator|+
literal|"] scripts"
argument_list|)
throw|;
block|}
if|if
condition|(
name|contexts
operator|.
name|containsKey
argument_list|(
name|context
operator|.
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"script context ["
operator|+
name|context
operator|.
name|name
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isContextEnabled
argument_list|(
name|context
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot execute scripts using ["
operator|+
name|context
operator|.
name|name
operator|+
literal|"] context"
argument_list|)
throw|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"compiling lang: [{}] type: [{}] script: {}"
argument_list|,
name|lang
argument_list|,
name|type
argument_list|,
name|idOrCode
argument_list|)
expr_stmt|;
block|}
name|CacheKey
name|cacheKey
init|=
operator|new
name|CacheKey
argument_list|(
name|lang
argument_list|,
name|idOrCode
argument_list|,
name|context
operator|.
name|name
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Object
name|compiledScript
init|=
name|cache
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiledScript
operator|!=
literal|null
condition|)
block|{
return|return
name|context
operator|.
name|compiledClazz
operator|.
name|cast
argument_list|(
name|compiledScript
argument_list|)
return|;
block|}
comment|// Synchronize so we don't compile scripts many times during multiple shards all compiling a script
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Retrieve it again in case it has been put by a different thread
name|compiledScript
operator|=
name|cache
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiledScript
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// Either an un-cached inline script or indexed script
comment|// If the script type is inline the name will be the same as the code for identification in exceptions
comment|// but give the script engine the chance to be better, give it separate name + source code
comment|// for the inline case, then its anonymous: null.
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"compiling script, type: [{}], lang: [{}], options: [{}]"
argument_list|,
name|type
argument_list|,
name|lang
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|// Check whether too many compilations have happened
name|checkCompilationLimit
argument_list|()
expr_stmt|;
name|Object
name|engineCompiled
init|=
name|scriptEngine
operator|.
name|compile
argument_list|(
name|id
argument_list|,
name|idOrCode
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|instanceClazz
operator|==
name|ExecutableScript
operator|.
name|class
condition|)
block|{
name|compiledScript
operator|=
operator|(
name|ExecutableScript
operator|.
name|Compiled
operator|)
name|params
lambda|->
name|scriptEngine
operator|.
name|executable
argument_list|(
name|engineCompiled
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|instanceClazz
operator|==
name|SearchScript
operator|.
name|class
condition|)
block|{
name|compiledScript
operator|=
call|(
name|SearchScript
operator|.
name|Compiled
call|)
argument_list|(
name|params
argument_list|,
name|lookup
argument_list|)
operator|->
name|scriptEngine
operator|.
name|search
argument_list|(
name|engineCompiled
argument_list|,
name|lookup
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Script context ["
operator|+
name|context
operator|.
name|name
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ScriptException
name|good
parameter_list|)
block|{
comment|// TODO: remove this try-catch completely, when all script engines have good exceptions!
throw|throw
name|good
throw|;
comment|// its already good
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|GeneralScriptException
argument_list|(
literal|"Failed to compile "
operator|+
name|type
operator|+
literal|" script ["
operator|+
name|id
operator|+
literal|"] using lang ["
operator|+
name|lang
operator|+
literal|"]"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
comment|// Since the cache key is the script content itself we don't need to
comment|// invalidate/check the cache if an indexed script changes.
name|scriptMetrics
operator|.
name|onCompilation
argument_list|()
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|cacheKey
argument_list|,
name|compiledScript
argument_list|)
expr_stmt|;
block|}
return|return
name|context
operator|.
name|compiledClazz
operator|.
name|cast
argument_list|(
name|compiledScript
argument_list|)
return|;
block|}
block|}
comment|/** Compiles a template. Note this will be moved to a separate TemplateService in the future. */
DECL|method|compileTemplate
specifier|public
name|CompiledTemplate
name|compileTemplate
parameter_list|(
name|Script
name|script
parameter_list|,
name|ScriptContext
argument_list|<
name|ExecutableScript
operator|.
name|Compiled
argument_list|>
name|scriptContext
parameter_list|)
block|{
name|ExecutableScript
operator|.
name|Compiled
name|compiledScript
init|=
name|compile
argument_list|(
name|script
argument_list|,
name|scriptContext
argument_list|)
decl_stmt|;
return|return
name|params
lambda|->
operator|(
name|String
operator|)
name|compiledScript
operator|.
name|newInstance
argument_list|(
name|params
argument_list|)
operator|.
name|run
argument_list|()
return|;
block|}
comment|/**      * Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so.      * This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket      *      * It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that      * elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not      * enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity      * is discarded - there can never be more water in the bucket than the size of the bucket.      */
DECL|method|checkCompilationLimit
name|void
name|checkCompilationLimit
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|timePassed
init|=
name|now
operator|-
name|lastInlineCompileTime
decl_stmt|;
name|lastInlineCompileTime
operator|=
name|now
expr_stmt|;
name|scriptsPerMinCounter
operator|+=
operator|(
name|timePassed
operator|)
operator|*
name|compilesAllowedPerNano
expr_stmt|;
comment|// It's been over the time limit anyway, readjust the bucket to be level
if|if
condition|(
name|scriptsPerMinCounter
operator|>
name|totalCompilesPerMinute
condition|)
block|{
name|scriptsPerMinCounter
operator|=
name|totalCompilesPerMinute
expr_stmt|;
block|}
comment|// If there is enough tokens in the bucket, allow the request and decrease the tokens by 1
if|if
condition|(
name|scriptsPerMinCounter
operator|>=
literal|1
condition|)
block|{
name|scriptsPerMinCounter
operator|-=
literal|1.0
expr_stmt|;
block|}
else|else
block|{
comment|// Otherwise reject the request
throw|throw
operator|new
name|CircuitBreakingException
argument_list|(
literal|"[script] Too many dynamic script compilations within one minute, max: ["
operator|+
name|totalCompilesPerMinute
operator|+
literal|"/min]; please use on-disk, indexed, or scripts with parameters instead; "
operator|+
literal|"this limit can be changed by the ["
operator|+
name|SCRIPT_MAX_COMPILATIONS_PER_MINUTE
operator|.
name|getKey
argument_list|()
operator|+
literal|"] setting"
argument_list|)
throw|;
block|}
block|}
DECL|method|isLangSupported
specifier|public
name|boolean
name|isLangSupported
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|lang
argument_list|)
expr_stmt|;
return|return
name|engines
operator|.
name|containsKey
argument_list|(
name|lang
argument_list|)
return|;
block|}
DECL|method|isTypeEnabled
specifier|public
name|boolean
name|isTypeEnabled
parameter_list|(
name|ScriptType
name|scriptType
parameter_list|)
block|{
return|return
name|typesAllowed
operator|==
literal|null
operator|||
name|typesAllowed
operator|.
name|contains
argument_list|(
name|scriptType
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isContextEnabled
specifier|public
name|boolean
name|isContextEnabled
parameter_list|(
name|ScriptContext
name|scriptContext
parameter_list|)
block|{
return|return
name|contextsAllowed
operator|==
literal|null
operator|||
name|contextsAllowed
operator|.
name|contains
argument_list|(
name|scriptContext
operator|.
name|name
argument_list|)
return|;
block|}
DECL|method|isAnyContextEnabled
specifier|public
name|boolean
name|isAnyContextEnabled
parameter_list|()
block|{
return|return
name|contextsAllowed
operator|==
literal|null
operator|||
name|contextsAllowed
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
return|;
block|}
DECL|method|getScriptFromClusterState
name|StoredScriptSource
name|getScriptFromClusterState
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
if|if
condition|(
name|lang
operator|!=
literal|null
operator|&&
name|isLangSupported
argument_list|(
name|lang
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unable to get stored script with unsupported lang ["
operator|+
name|lang
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|ScriptMetaData
name|scriptMetadata
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|custom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptMetadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"unable to find script ["
operator|+
name|id
operator|+
literal|"]"
operator|+
operator|(
name|lang
operator|==
literal|null
condition|?
literal|""
else|:
literal|" using lang ["
operator|+
name|lang
operator|+
literal|"]"
operator|)
operator|+
literal|" in cluster state"
argument_list|)
throw|;
block|}
name|StoredScriptSource
name|source
init|=
name|scriptMetadata
operator|.
name|getStoredScript
argument_list|(
name|id
argument_list|,
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"unable to find script ["
operator|+
name|id
operator|+
literal|"]"
operator|+
operator|(
name|lang
operator|==
literal|null
condition|?
literal|""
else|:
literal|" using lang ["
operator|+
name|lang
operator|+
literal|"]"
operator|)
operator|+
literal|" in cluster state"
argument_list|)
throw|;
block|}
return|return
name|source
return|;
block|}
DECL|method|putStoredScript
specifier|public
name|void
name|putStoredScript
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|,
name|PutStoredScriptRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|PutStoredScriptResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|int
name|max
init|=
name|SCRIPT_MAX_SIZE_IN_BYTES
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|content
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|max
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"exceeded max allowed stored script size in bytes ["
operator|+
name|max
operator|+
literal|"] with size ["
operator|+
name|request
operator|.
name|content
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|"] for script ["
operator|+
name|request
operator|.
name|id
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|StoredScriptSource
name|source
init|=
name|StoredScriptSource
operator|.
name|parse
argument_list|(
name|request
operator|.
name|lang
argument_list|()
argument_list|,
name|request
operator|.
name|content
argument_list|()
argument_list|,
name|request
operator|.
name|xContentType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLangSupported
argument_list|(
name|source
operator|.
name|getLang
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unable to put stored script with unsupported lang ["
operator|+
name|source
operator|.
name|getLang
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
try|try
block|{
name|ScriptEngine
name|scriptEngine
init|=
name|getEngine
argument_list|(
name|source
operator|.
name|getLang
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTypeEnabled
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot put ["
operator|+
name|ScriptType
operator|.
name|STORED
operator|+
literal|"] script, ["
operator|+
name|ScriptType
operator|.
name|STORED
operator|+
literal|"] scripts are not enabled"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|isAnyContextEnabled
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot put ["
operator|+
name|ScriptType
operator|.
name|STORED
operator|+
literal|"] script, no script contexts are enabled"
argument_list|)
throw|;
block|}
else|else
block|{
name|Object
name|compiled
init|=
name|scriptEngine
operator|.
name|compile
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|source
operator|.
name|getCode
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to parse/compile stored script ["
operator|+
name|request
operator|.
name|id
argument_list|()
operator|+
literal|"]"
operator|+
operator|(
name|source
operator|.
name|getCode
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" using code ["
operator|+
name|source
operator|.
name|getCode
argument_list|()
operator|+
literal|"]"
operator|)
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ScriptException
name|good
parameter_list|)
block|{
throw|throw
name|good
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to parse/compile stored script ["
operator|+
name|request
operator|.
name|id
argument_list|()
operator|+
literal|"]"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"put-script-"
operator|+
name|request
operator|.
name|id
argument_list|()
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|<
name|PutStoredScriptResponse
argument_list|>
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|PutStoredScriptResponse
name|newResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
return|return
operator|new
name|PutStoredScriptResponse
argument_list|(
name|acknowledged
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|ScriptMetaData
name|smd
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|custom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|putStoredScript
argument_list|(
name|smd
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|MetaData
operator|.
name|Builder
name|mdb
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|getMetaData
argument_list|()
argument_list|)
operator|.
name|putCustom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|,
name|smd
argument_list|)
decl_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdb
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteStoredScript
specifier|public
name|void
name|deleteStoredScript
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|,
name|DeleteStoredScriptRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|DeleteStoredScriptResponse
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|lang
argument_list|()
operator|!=
literal|null
operator|&&
name|isLangSupported
argument_list|(
name|request
operator|.
name|lang
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unable to delete stored script with unsupported lang ["
operator|+
name|request
operator|.
name|lang
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"delete-script-"
operator|+
name|request
operator|.
name|id
argument_list|()
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|<
name|DeleteStoredScriptResponse
argument_list|>
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|DeleteStoredScriptResponse
name|newResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
return|return
operator|new
name|DeleteStoredScriptResponse
argument_list|(
name|acknowledged
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|ScriptMetaData
name|smd
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|custom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|deleteStoredScript
argument_list|(
name|smd
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|lang
argument_list|()
argument_list|)
expr_stmt|;
name|MetaData
operator|.
name|Builder
name|mdb
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|getMetaData
argument_list|()
argument_list|)
operator|.
name|putCustom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|,
name|smd
argument_list|)
decl_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdb
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getStoredScript
specifier|public
name|StoredScriptSource
name|getStoredScript
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|GetStoredScriptRequest
name|request
parameter_list|)
block|{
name|ScriptMetaData
name|scriptMetadata
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|custom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptMetadata
operator|!=
literal|null
condition|)
block|{
return|return
name|scriptMetadata
operator|.
name|getStoredScript
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|lang
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|stats
specifier|public
name|ScriptStats
name|stats
parameter_list|()
block|{
return|return
name|scriptMetrics
operator|.
name|stats
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|clusterState
operator|=
name|event
operator|.
name|state
argument_list|()
expr_stmt|;
block|}
comment|/**      * A small listener for the script cache that calls each      * {@code ScriptEngine}'s {@code scriptRemoved} method when the      * script has been removed from the cache      */
DECL|class|ScriptCacheRemovalListener
specifier|private
class|class
name|ScriptCacheRemovalListener
implements|implements
name|RemovalListener
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
block|{
annotation|@
name|Override
DECL|method|onRemoval
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|CacheKey
argument_list|,
name|Object
argument_list|>
name|notification
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removed {} from cache, reason: {}"
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|,
name|notification
operator|.
name|getRemovalReason
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scriptMetrics
operator|.
name|onCacheEviction
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CacheKey
specifier|private
specifier|static
specifier|final
class|class
name|CacheKey
block|{
DECL|field|lang
specifier|final
name|String
name|lang
decl_stmt|;
DECL|field|idOrCode
specifier|final
name|String
name|idOrCode
decl_stmt|;
DECL|field|context
specifier|final
name|String
name|context
decl_stmt|;
DECL|field|options
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
decl_stmt|;
DECL|method|CacheKey
specifier|private
name|CacheKey
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|idOrCode
parameter_list|,
name|String
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
name|this
operator|.
name|idOrCode
operator|=
name|idOrCode
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|CacheKey
name|cacheKey
init|=
operator|(
name|CacheKey
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|lang
argument_list|,
name|cacheKey
operator|.
name|lang
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|idOrCode
argument_list|,
name|cacheKey
operator|.
name|idOrCode
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|context
argument_list|,
name|cacheKey
operator|.
name|context
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|options
argument_list|,
name|cacheKey
operator|.
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|lang
argument_list|,
name|idOrCode
argument_list|,
name|context
argument_list|,
name|options
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

