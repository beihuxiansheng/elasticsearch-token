begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
operator|.
name|DeleteStoredScriptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
operator|.
name|DeleteStoredScriptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
operator|.
name|GetStoredScriptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
operator|.
name|PutStoredScriptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
operator|.
name|PutStoredScriptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|AckedClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreakingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|LoggerMessageFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|FileChangesListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|FileWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|ResourceWatcherService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_class
DECL|class|ScriptService
specifier|public
class|class
name|ScriptService
extends|extends
name|AbstractComponent
implements|implements
name|Closeable
implements|,
name|ClusterStateListener
block|{
DECL|field|DISABLE_DYNAMIC_SCRIPTING_SETTING
specifier|static
specifier|final
name|String
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
init|=
literal|"script.disable_dynamic"
decl_stmt|;
DECL|field|SCRIPT_CACHE_SIZE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SCRIPT_CACHE_SIZE_SETTING
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"script.cache.max_size"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_CACHE_EXPIRE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|SCRIPT_CACHE_EXPIRE_SETTING
init|=
name|Setting
operator|.
name|positiveTimeSetting
argument_list|(
literal|"script.cache.expire"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_AUTO_RELOAD_ENABLED_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|SCRIPT_AUTO_RELOAD_ENABLED_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"script.auto_reload_enabled"
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_MAX_SIZE_IN_BYTES
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SCRIPT_MAX_SIZE_IN_BYTES
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"script.max_size_in_bytes"
argument_list|,
literal|65535
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|SCRIPT_MAX_COMPILATIONS_PER_MINUTE
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SCRIPT_MAX_COMPILATIONS_PER_MINUTE
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"script.max_compilations_per_minute"
argument_list|,
literal|15
argument_list|,
literal|0
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|scriptEngines
specifier|private
specifier|final
name|Collection
argument_list|<
name|ScriptEngineService
argument_list|>
name|scriptEngines
decl_stmt|;
DECL|field|scriptEnginesByLang
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|scriptEnginesByLang
decl_stmt|;
DECL|field|scriptEnginesByExt
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|scriptEnginesByExt
decl_stmt|;
DECL|field|staticCache
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|CacheKey
argument_list|,
name|CompiledScript
argument_list|>
name|staticCache
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|CacheKey
argument_list|,
name|CompiledScript
argument_list|>
name|cache
decl_stmt|;
DECL|field|scriptsDirectory
specifier|private
specifier|final
name|Path
name|scriptsDirectory
decl_stmt|;
DECL|field|scriptModes
specifier|private
specifier|final
name|ScriptModes
name|scriptModes
decl_stmt|;
DECL|field|scriptContextRegistry
specifier|private
specifier|final
name|ScriptContextRegistry
name|scriptContextRegistry
decl_stmt|;
DECL|field|scriptMetrics
specifier|private
specifier|final
name|ScriptMetrics
name|scriptMetrics
init|=
operator|new
name|ScriptMetrics
argument_list|()
decl_stmt|;
DECL|field|clusterState
specifier|private
name|ClusterState
name|clusterState
decl_stmt|;
DECL|field|totalCompilesPerMinute
specifier|private
name|int
name|totalCompilesPerMinute
decl_stmt|;
DECL|field|lastInlineCompileTime
specifier|private
name|long
name|lastInlineCompileTime
decl_stmt|;
DECL|field|scriptsPerMinCounter
specifier|private
name|double
name|scriptsPerMinCounter
decl_stmt|;
DECL|field|compilesAllowedPerNano
specifier|private
name|double
name|compilesAllowedPerNano
decl_stmt|;
DECL|method|ScriptService
specifier|public
name|ScriptService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|,
name|ResourceWatcherService
name|resourceWatcherService
parameter_list|,
name|ScriptEngineRegistry
name|scriptEngineRegistry
parameter_list|,
name|ScriptContextRegistry
name|scriptContextRegistry
parameter_list|,
name|ScriptSettings
name|scriptSettings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scriptEngineRegistry
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scriptContextRegistry
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scriptSettings
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
operator|+
literal|" is not a supported setting, replace with fine-grained script settings. \n"
operator|+
literal|"Dynamic scripts can be enabled for all languages and all operations by replacing `script.disable_dynamic: false` with `script.inline: true` and `script.stored: true` in elasticsearch.yml"
argument_list|)
throw|;
block|}
name|this
operator|.
name|scriptEngines
operator|=
name|scriptEngineRegistry
operator|.
name|getRegisteredLanguages
argument_list|()
operator|.
name|values
argument_list|()
expr_stmt|;
name|this
operator|.
name|scriptContextRegistry
operator|=
name|scriptContextRegistry
expr_stmt|;
name|int
name|cacheMaxSize
init|=
name|SCRIPT_CACHE_SIZE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|CacheBuilder
argument_list|<
name|CacheKey
argument_list|,
name|CompiledScript
argument_list|>
name|cacheBuilder
init|=
name|CacheBuilder
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|cacheMaxSize
operator|>=
literal|0
condition|)
block|{
name|cacheBuilder
operator|.
name|setMaximumWeight
argument_list|(
name|cacheMaxSize
argument_list|)
expr_stmt|;
block|}
name|TimeValue
name|cacheExpire
init|=
name|SCRIPT_CACHE_EXPIRE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheExpire
operator|.
name|getNanos
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|cacheBuilder
operator|.
name|setExpireAfterAccess
argument_list|(
name|cacheExpire
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"using script cache with max_size [{}], expire [{}]"
argument_list|,
name|cacheMaxSize
argument_list|,
name|cacheExpire
argument_list|)
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cacheBuilder
operator|.
name|removalListener
argument_list|(
operator|new
name|ScriptCacheRemovalListener
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|enginesByLangBuilder
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|enginesByExtBuilder
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScriptEngineService
name|scriptEngine
range|:
name|scriptEngines
control|)
block|{
name|String
name|language
init|=
name|scriptEngineRegistry
operator|.
name|getLanguage
argument_list|(
name|scriptEngine
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|enginesByLangBuilder
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|scriptEngine
argument_list|)
expr_stmt|;
name|enginesByExtBuilder
operator|.
name|put
argument_list|(
name|scriptEngine
operator|.
name|getExtension
argument_list|()
argument_list|,
name|scriptEngine
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scriptEnginesByLang
operator|=
name|unmodifiableMap
argument_list|(
name|enginesByLangBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptEnginesByExt
operator|=
name|unmodifiableMap
argument_list|(
name|enginesByExtBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptSettings
argument_list|,
name|settings
argument_list|)
expr_stmt|;
comment|// add file watcher for static scripts
name|scriptsDirectory
operator|=
name|env
operator|.
name|scriptsFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Using scripts directory [{}] "
argument_list|,
name|scriptsDirectory
argument_list|)
expr_stmt|;
block|}
name|FileWatcher
name|fileWatcher
init|=
operator|new
name|FileWatcher
argument_list|(
name|scriptsDirectory
argument_list|)
decl_stmt|;
name|fileWatcher
operator|.
name|addListener
argument_list|(
operator|new
name|ScriptChangesListener
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SCRIPT_AUTO_RELOAD_ENABLED_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
comment|// automatic reload is enabled - register scripts
name|resourceWatcherService
operator|.
name|add
argument_list|(
name|fileWatcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// automatic reload is disable just load scripts once
name|fileWatcher
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|lastInlineCompileTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|setMaxCompilationsPerMinute
argument_list|(
name|SCRIPT_MAX_COMPILATIONS_PER_MINUTE
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|registerClusterSettingsListeners
name|void
name|registerClusterSettingsListeners
parameter_list|(
name|ClusterSettings
name|clusterSettings
parameter_list|)
block|{
name|clusterSettings
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|SCRIPT_MAX_COMPILATIONS_PER_MINUTE
argument_list|,
name|this
operator|::
name|setMaxCompilationsPerMinute
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|scriptEngines
argument_list|)
expr_stmt|;
block|}
DECL|method|getScriptEngineServiceForLang
specifier|private
name|ScriptEngineService
name|getScriptEngineServiceForLang
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
name|ScriptEngineService
name|scriptEngineService
init|=
name|scriptEnginesByLang
operator|.
name|get
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptEngineService
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"script_lang not supported ["
operator|+
name|lang
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|scriptEngineService
return|;
block|}
DECL|method|getScriptEngineServiceForFileExt
specifier|private
name|ScriptEngineService
name|getScriptEngineServiceForFileExt
parameter_list|(
name|String
name|fileExtension
parameter_list|)
block|{
name|ScriptEngineService
name|scriptEngineService
init|=
name|scriptEnginesByExt
operator|.
name|get
argument_list|(
name|fileExtension
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptEngineService
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"script file extension not supported ["
operator|+
name|fileExtension
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|scriptEngineService
return|;
block|}
DECL|method|setMaxCompilationsPerMinute
name|void
name|setMaxCompilationsPerMinute
parameter_list|(
name|Integer
name|newMaxPerMinute
parameter_list|)
block|{
name|this
operator|.
name|totalCompilesPerMinute
operator|=
name|newMaxPerMinute
expr_stmt|;
comment|// Reset the counter to allow new compilations
name|this
operator|.
name|scriptsPerMinCounter
operator|=
name|totalCompilesPerMinute
expr_stmt|;
name|this
operator|.
name|compilesAllowedPerNano
operator|=
operator|(
operator|(
name|double
operator|)
name|totalCompilesPerMinute
operator|)
operator|/
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|1
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
block|}
comment|/**      * Checks if a script can be executed and compiles it if needed, or returns the previously compiled and cached script.      */
DECL|method|compile
specifier|public
name|CompiledScript
name|compile
parameter_list|(
name|Script
name|script
parameter_list|,
name|ScriptContext
name|scriptContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parameter script (Script) must not be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|scriptContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parameter scriptContext (ScriptContext) must not be null."
argument_list|)
throw|;
block|}
name|String
name|lang
init|=
name|script
operator|.
name|getLang
argument_list|()
decl_stmt|;
name|ScriptEngineService
name|scriptEngineService
init|=
name|getScriptEngineServiceForLang
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|canExecuteScript
argument_list|(
name|lang
argument_list|,
name|script
operator|.
name|getType
argument_list|()
argument_list|,
name|scriptContext
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"scripts of type ["
operator|+
name|script
operator|.
name|getType
argument_list|()
operator|+
literal|"], operation ["
operator|+
name|scriptContext
operator|.
name|getKey
argument_list|()
operator|+
literal|"] and lang ["
operator|+
name|lang
operator|+
literal|"] are disabled"
argument_list|)
throw|;
block|}
comment|// TODO: fix this through some API or something, that's wrong
comment|// special exception to prevent expressions from compiling as update or mapping scripts
name|boolean
name|expression
init|=
literal|"expression"
operator|.
name|equals
argument_list|(
name|script
operator|.
name|getLang
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|notSupported
init|=
name|scriptContext
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ScriptContext
operator|.
name|Standard
operator|.
name|UPDATE
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expression
operator|&&
name|notSupported
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"scripts of type ["
operator|+
name|script
operator|.
name|getType
argument_list|()
operator|+
literal|"],"
operator|+
literal|" operation ["
operator|+
name|scriptContext
operator|.
name|getKey
argument_list|()
operator|+
literal|"] and lang ["
operator|+
name|lang
operator|+
literal|"] are not supported"
argument_list|)
throw|;
block|}
return|return
name|compileInternal
argument_list|(
name|script
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/**      * Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so.      * This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket      *      * It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that      * elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not      * enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity      * is discarded - there can never be more water in the bucket than the size of the bucket.      */
DECL|method|checkCompilationLimit
name|void
name|checkCompilationLimit
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|timePassed
init|=
name|now
operator|-
name|lastInlineCompileTime
decl_stmt|;
name|lastInlineCompileTime
operator|=
name|now
expr_stmt|;
name|scriptsPerMinCounter
operator|+=
operator|(
name|timePassed
operator|)
operator|*
name|compilesAllowedPerNano
expr_stmt|;
comment|// It's been over the time limit anyway, readjust the bucket to be level
if|if
condition|(
name|scriptsPerMinCounter
operator|>
name|totalCompilesPerMinute
condition|)
block|{
name|scriptsPerMinCounter
operator|=
name|totalCompilesPerMinute
expr_stmt|;
block|}
comment|// If there is enough tokens in the bucket, allow the request and decrease the tokens by 1
if|if
condition|(
name|scriptsPerMinCounter
operator|>=
literal|1
condition|)
block|{
name|scriptsPerMinCounter
operator|-=
literal|1.0
expr_stmt|;
block|}
else|else
block|{
comment|// Otherwise reject the request
throw|throw
operator|new
name|CircuitBreakingException
argument_list|(
literal|"[script] Too many dynamic script compilations within one minute, max: ["
operator|+
name|totalCompilesPerMinute
operator|+
literal|"/min]; please use on-disk, indexed, or scripts with parameters instead; "
operator|+
literal|"this limit can be changed by the ["
operator|+
name|SCRIPT_MAX_COMPILATIONS_PER_MINUTE
operator|.
name|getKey
argument_list|()
operator|+
literal|"] setting"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Compiles a script straight-away, or returns the previously compiled and cached script,      * without checking if it can be executed based on settings.      */
DECL|method|compileInternal
name|CompiledScript
name|compileInternal
parameter_list|(
name|Script
name|script
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parameter script (Script) must not be null."
argument_list|)
throw|;
block|}
name|String
name|lang
init|=
name|script
operator|.
name|getLang
argument_list|()
decl_stmt|;
name|ScriptType
name|type
init|=
name|script
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|//script.getIdOrCode() could return either a name or code for a script,
comment|//but we check for a file script name first and an indexed script name second
name|String
name|name
init|=
name|script
operator|.
name|getIdOrCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Compiling lang: [{}] type: [{}] script: {}"
argument_list|,
name|lang
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|ScriptEngineService
name|scriptEngineService
init|=
name|getScriptEngineServiceForLang
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|ScriptType
operator|.
name|FILE
condition|)
block|{
name|CacheKey
name|cacheKey
init|=
operator|new
name|CacheKey
argument_list|(
name|scriptEngineService
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
decl_stmt|;
comment|//On disk scripts will be loaded into the staticCache by the listener
name|CompiledScript
name|compiledScript
init|=
name|staticCache
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiledScript
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to find on disk file script ["
operator|+
name|name
operator|+
literal|"] using lang ["
operator|+
name|lang
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|compiledScript
return|;
block|}
comment|//script.getIdOrCode() will be code if the script type is inline
name|String
name|code
init|=
name|script
operator|.
name|getIdOrCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|ScriptType
operator|.
name|STORED
condition|)
block|{
comment|//The look up for an indexed script must be done every time in case
comment|//the script has been updated in the index since the last look up.
specifier|final
name|IndexedScript
name|indexedScript
init|=
operator|new
name|IndexedScript
argument_list|(
name|lang
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|name
operator|=
name|indexedScript
operator|.
name|id
expr_stmt|;
name|code
operator|=
name|getScriptFromClusterState
argument_list|(
name|indexedScript
operator|.
name|lang
argument_list|,
name|indexedScript
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
name|CacheKey
name|cacheKey
init|=
operator|new
name|CacheKey
argument_list|(
name|scriptEngineService
argument_list|,
name|type
operator|==
name|ScriptType
operator|.
name|INLINE
condition|?
literal|null
else|:
name|name
argument_list|,
name|code
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|CompiledScript
name|compiledScript
init|=
name|cache
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiledScript
operator|!=
literal|null
condition|)
block|{
return|return
name|compiledScript
return|;
block|}
comment|// Synchronize so we don't compile scripts many times during multiple shards all compiling a script
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Retrieve it again in case it has been put by a different thread
name|compiledScript
operator|=
name|cache
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiledScript
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// Either an un-cached inline script or indexed script
comment|// If the script type is inline the name will be the same as the code for identification in exceptions
comment|// but give the script engine the chance to be better, give it separate name + source code
comment|// for the inline case, then its anonymous: null.
name|String
name|actualName
init|=
operator|(
name|type
operator|==
name|ScriptType
operator|.
name|INLINE
operator|)
condition|?
literal|null
else|:
name|name
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"compiling script, type: [{}], lang: [{}], params: [{}]"
argument_list|,
name|type
argument_list|,
name|lang
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|// Check whether too many compilations have happened
name|checkCompilationLimit
argument_list|()
expr_stmt|;
name|compiledScript
operator|=
operator|new
name|CompiledScript
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
name|lang
argument_list|,
name|scriptEngineService
operator|.
name|compile
argument_list|(
name|actualName
argument_list|,
name|code
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ScriptException
name|good
parameter_list|)
block|{
comment|// TODO: remove this try-catch completely, when all script engines have good exceptions!
throw|throw
name|good
throw|;
comment|// its already good
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|GeneralScriptException
argument_list|(
literal|"Failed to compile "
operator|+
name|type
operator|+
literal|" script ["
operator|+
name|name
operator|+
literal|"] using lang ["
operator|+
name|lang
operator|+
literal|"]"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
comment|// Since the cache key is the script content itself we don't need to
comment|// invalidate/check the cache if an indexed script changes.
name|scriptMetrics
operator|.
name|onCompilation
argument_list|()
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|cacheKey
argument_list|,
name|compiledScript
argument_list|)
expr_stmt|;
block|}
return|return
name|compiledScript
return|;
block|}
block|}
DECL|method|validateScriptLanguage
specifier|private
name|String
name|validateScriptLanguage
parameter_list|(
name|String
name|scriptLang
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scriptLang
argument_list|)
expr_stmt|;
if|if
condition|(
name|scriptEnginesByLang
operator|.
name|containsKey
argument_list|(
name|scriptLang
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"script_lang not supported ["
operator|+
name|scriptLang
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|scriptLang
return|;
block|}
DECL|method|getScriptFromClusterState
name|String
name|getScriptFromClusterState
parameter_list|(
name|String
name|scriptLang
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|scriptLang
operator|=
name|validateScriptLanguage
argument_list|(
name|scriptLang
argument_list|)
expr_stmt|;
name|ScriptMetaData
name|scriptMetadata
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|custom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptMetadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"Unable to find script ["
operator|+
name|scriptLang
operator|+
literal|"/"
operator|+
name|id
operator|+
literal|"] in cluster state"
argument_list|)
throw|;
block|}
name|String
name|script
init|=
name|scriptMetadata
operator|.
name|getScript
argument_list|(
name|scriptLang
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"Unable to find script ["
operator|+
name|scriptLang
operator|+
literal|"/"
operator|+
name|id
operator|+
literal|"] in cluster state"
argument_list|)
throw|;
block|}
return|return
name|script
return|;
block|}
DECL|method|validateStoredScript
name|void
name|validateStoredScript
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|scriptLang
parameter_list|,
name|BytesReference
name|scriptBytes
parameter_list|)
block|{
name|validateScriptSize
argument_list|(
name|id
argument_list|,
name|scriptBytes
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|script
init|=
name|ScriptMetaData
operator|.
name|parseStoredScript
argument_list|(
name|scriptBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|scriptBytes
argument_list|)
condition|)
block|{
comment|//Just try and compile it
try|try
block|{
name|ScriptEngineService
name|scriptEngineService
init|=
name|getScriptEngineServiceForLang
argument_list|(
name|scriptLang
argument_list|)
decl_stmt|;
comment|//we don't know yet what the script will be used for, but if all of the operations for this lang with
comment|//indexed scripts are disabled, it makes no sense to even compile it.
if|if
condition|(
name|isAnyScriptContextEnabled
argument_list|(
name|scriptLang
argument_list|,
name|ScriptType
operator|.
name|STORED
argument_list|)
condition|)
block|{
name|Object
name|compiled
init|=
name|scriptEngineService
operator|.
name|compile
argument_list|(
name|id
argument_list|,
name|script
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parse ["
operator|+
name|script
operator|+
literal|"] lang ["
operator|+
name|scriptLang
operator|+
literal|"] (ScriptService.compile returned null)"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"skipping compile of script [{}], lang [{}] as all scripted operations are disabled for indexed scripts"
argument_list|,
name|script
argument_list|,
name|scriptLang
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ScriptException
name|good
parameter_list|)
block|{
comment|// TODO: remove this when all script engines have good exceptions!
throw|throw
name|good
throw|;
comment|// its already good!
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parse ["
operator|+
name|script
operator|+
literal|"] lang ["
operator|+
name|scriptLang
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to find script in : "
operator|+
name|scriptBytes
operator|.
name|utf8ToString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|storeScript
specifier|public
name|void
name|storeScript
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|,
name|PutStoredScriptRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|PutStoredScriptResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|String
name|scriptLang
init|=
name|validateScriptLanguage
argument_list|(
name|request
operator|.
name|scriptLang
argument_list|()
argument_list|)
decl_stmt|;
comment|//verify that the script compiles
name|validateStoredScript
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|scriptLang
argument_list|,
name|request
operator|.
name|script
argument_list|()
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"put-script-"
operator|+
name|request
operator|.
name|id
argument_list|()
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|<
name|PutStoredScriptResponse
argument_list|>
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|PutStoredScriptResponse
name|newResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
return|return
operator|new
name|PutStoredScriptResponse
argument_list|(
name|acknowledged
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|innerStoreScript
argument_list|(
name|currentState
argument_list|,
name|scriptLang
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|innerStoreScript
specifier|static
name|ClusterState
name|innerStoreScript
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|String
name|validatedScriptLang
parameter_list|,
name|PutStoredScriptRequest
name|request
parameter_list|)
block|{
name|ScriptMetaData
name|scriptMetadata
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|custom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|ScriptMetaData
operator|.
name|Builder
name|scriptMetadataBuilder
init|=
operator|new
name|ScriptMetaData
operator|.
name|Builder
argument_list|(
name|scriptMetadata
argument_list|)
decl_stmt|;
name|scriptMetadataBuilder
operator|.
name|storeScript
argument_list|(
name|validatedScriptLang
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|script
argument_list|()
argument_list|)
expr_stmt|;
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|getMetaData
argument_list|()
argument_list|)
operator|.
name|putCustom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|,
name|scriptMetadataBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaDataBuilder
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|deleteStoredScript
specifier|public
name|void
name|deleteStoredScript
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|,
name|DeleteStoredScriptRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|DeleteStoredScriptResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|String
name|scriptLang
init|=
name|validateScriptLanguage
argument_list|(
name|request
operator|.
name|scriptLang
argument_list|()
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"delete-script-"
operator|+
name|request
operator|.
name|id
argument_list|()
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|<
name|DeleteStoredScriptResponse
argument_list|>
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|DeleteStoredScriptResponse
name|newResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
return|return
operator|new
name|DeleteStoredScriptResponse
argument_list|(
name|acknowledged
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|innerDeleteScript
argument_list|(
name|currentState
argument_list|,
name|scriptLang
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|innerDeleteScript
specifier|static
name|ClusterState
name|innerDeleteScript
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|String
name|validatedLang
parameter_list|,
name|DeleteStoredScriptRequest
name|request
parameter_list|)
block|{
name|ScriptMetaData
name|scriptMetadata
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|custom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|ScriptMetaData
operator|.
name|Builder
name|scriptMetadataBuilder
init|=
operator|new
name|ScriptMetaData
operator|.
name|Builder
argument_list|(
name|scriptMetadata
argument_list|)
decl_stmt|;
name|scriptMetadataBuilder
operator|.
name|deleteScript
argument_list|(
name|validatedLang
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|getMetaData
argument_list|()
argument_list|)
operator|.
name|putCustom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|,
name|scriptMetadataBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaDataBuilder
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getStoredScript
specifier|public
name|String
name|getStoredScript
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|GetStoredScriptRequest
name|request
parameter_list|)
block|{
name|ScriptMetaData
name|scriptMetadata
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|custom
argument_list|(
name|ScriptMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptMetadata
operator|!=
literal|null
condition|)
block|{
return|return
name|scriptMetadata
operator|.
name|getScript
argument_list|(
name|request
operator|.
name|lang
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Compiles (or retrieves from cache) and executes the provided script      */
DECL|method|executable
specifier|public
name|ExecutableScript
name|executable
parameter_list|(
name|Script
name|script
parameter_list|,
name|ScriptContext
name|scriptContext
parameter_list|)
block|{
return|return
name|executable
argument_list|(
name|compile
argument_list|(
name|script
argument_list|,
name|scriptContext
argument_list|,
name|script
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|script
operator|.
name|getParams
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Executes a previously compiled script provided as an argument      */
DECL|method|executable
specifier|public
name|ExecutableScript
name|executable
parameter_list|(
name|CompiledScript
name|compiledScript
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
return|return
name|getScriptEngineServiceForLang
argument_list|(
name|compiledScript
operator|.
name|lang
argument_list|()
argument_list|)
operator|.
name|executable
argument_list|(
name|compiledScript
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/**      * Compiles (or retrieves from cache) and executes the provided search script      */
DECL|method|search
specifier|public
name|SearchScript
name|search
parameter_list|(
name|SearchLookup
name|lookup
parameter_list|,
name|Script
name|script
parameter_list|,
name|ScriptContext
name|scriptContext
parameter_list|)
block|{
name|CompiledScript
name|compiledScript
init|=
name|compile
argument_list|(
name|script
argument_list|,
name|scriptContext
argument_list|,
name|script
operator|.
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|search
argument_list|(
name|lookup
argument_list|,
name|compiledScript
argument_list|,
name|script
operator|.
name|getParams
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Binds provided parameters to a compiled script returning a      * {@link SearchScript} ready for execution      */
DECL|method|search
specifier|public
name|SearchScript
name|search
parameter_list|(
name|SearchLookup
name|lookup
parameter_list|,
name|CompiledScript
name|compiledScript
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
return|return
name|getScriptEngineServiceForLang
argument_list|(
name|compiledScript
operator|.
name|lang
argument_list|()
argument_list|)
operator|.
name|search
argument_list|(
name|compiledScript
argument_list|,
name|lookup
argument_list|,
name|params
argument_list|)
return|;
block|}
DECL|method|isAnyScriptContextEnabled
specifier|private
name|boolean
name|isAnyScriptContextEnabled
parameter_list|(
name|String
name|lang
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|)
block|{
for|for
control|(
name|ScriptContext
name|scriptContext
range|:
name|scriptContextRegistry
operator|.
name|scriptContexts
argument_list|()
control|)
block|{
if|if
condition|(
name|canExecuteScript
argument_list|(
name|lang
argument_list|,
name|scriptType
argument_list|,
name|scriptContext
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|canExecuteScript
specifier|private
name|boolean
name|canExecuteScript
parameter_list|(
name|String
name|lang
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|,
name|ScriptContext
name|scriptContext
parameter_list|)
block|{
assert|assert
name|lang
operator|!=
literal|null
assert|;
if|if
condition|(
name|scriptContextRegistry
operator|.
name|isSupportedContext
argument_list|(
name|scriptContext
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"script context ["
operator|+
name|scriptContext
operator|.
name|getKey
argument_list|()
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
return|return
name|scriptModes
operator|.
name|getScriptEnabled
argument_list|(
name|lang
argument_list|,
name|scriptType
argument_list|,
name|scriptContext
argument_list|)
return|;
block|}
DECL|method|stats
specifier|public
name|ScriptStats
name|stats
parameter_list|()
block|{
return|return
name|scriptMetrics
operator|.
name|stats
argument_list|()
return|;
block|}
DECL|method|validateScriptSize
specifier|private
name|void
name|validateScriptSize
parameter_list|(
name|String
name|identifier
parameter_list|,
name|int
name|scriptSizeInBytes
parameter_list|)
block|{
name|int
name|allowedScriptSizeInBytes
init|=
name|SCRIPT_MAX_SIZE_IN_BYTES
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptSizeInBytes
operator|>
name|allowedScriptSizeInBytes
condition|)
block|{
name|String
name|message
init|=
name|LoggerMessageFormat
operator|.
name|format
argument_list|(
literal|"Limit of script size in bytes [{}] has been exceeded for script [{}] with size [{}]"
argument_list|,
name|allowedScriptSizeInBytes
argument_list|,
name|identifier
argument_list|,
name|scriptSizeInBytes
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|clusterState
operator|=
name|event
operator|.
name|state
argument_list|()
expr_stmt|;
block|}
comment|/**      * A small listener for the script cache that calls each      * {@code ScriptEngineService}'s {@code scriptRemoved} method when the      * script has been removed from the cache      */
DECL|class|ScriptCacheRemovalListener
specifier|private
class|class
name|ScriptCacheRemovalListener
implements|implements
name|RemovalListener
argument_list|<
name|CacheKey
argument_list|,
name|CompiledScript
argument_list|>
block|{
annotation|@
name|Override
DECL|method|onRemoval
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|CacheKey
argument_list|,
name|CompiledScript
argument_list|>
name|notification
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removed {} from cache, reason: {}"
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|,
name|notification
operator|.
name|getRemovalReason
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scriptMetrics
operator|.
name|onCacheEviction
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ScriptChangesListener
specifier|private
class|class
name|ScriptChangesListener
implements|implements
name|FileChangesListener
block|{
DECL|method|getScriptNameExt
specifier|private
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getScriptNameExt
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|Path
name|scriptPath
init|=
name|scriptsDirectory
operator|.
name|relativize
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|int
name|extIndex
init|=
name|scriptPath
operator|.
name|toString
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|extIndex
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|ext
init|=
name|scriptPath
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|extIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|scriptName
init|=
name|scriptPath
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|extIndex
argument_list|)
operator|.
name|replace
argument_list|(
name|scriptPath
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getSeparator
argument_list|()
argument_list|,
literal|"_"
argument_list|)
decl_stmt|;
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|scriptName
argument_list|,
name|ext
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onFileInit
specifier|public
name|void
name|onFileInit
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|scriptNameExt
init|=
name|getScriptNameExt
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptNameExt
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Skipped script with invalid extension : [{}]"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Loading script file : [{}]"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|ScriptEngineService
name|engineService
init|=
name|getScriptEngineServiceForFileExt
argument_list|(
name|scriptNameExt
operator|.
name|v2
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|engineService
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"No script engine found for [{}]"
argument_list|,
name|scriptNameExt
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|//we don't know yet what the script will be used for, but if all of the operations for this lang
comment|// with file scripts are disabled, it makes no sense to even compile it and cache it.
if|if
condition|(
name|isAnyScriptContextEnabled
argument_list|(
name|engineService
operator|.
name|getType
argument_list|()
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"compiling script file [{}]"
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStreamReader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|String
name|script
init|=
name|Streams
operator|.
name|copyToString
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|scriptNameExt
operator|.
name|v1
argument_list|()
decl_stmt|;
name|CacheKey
name|cacheKey
init|=
operator|new
name|CacheKey
argument_list|(
name|engineService
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
comment|// pass the actual file name to the compiler (for script engines that care about this)
name|Object
name|executable
init|=
name|engineService
operator|.
name|compile
argument_list|(
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|script
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|CompiledScript
name|compiledScript
init|=
operator|new
name|CompiledScript
argument_list|(
name|ScriptType
operator|.
name|FILE
argument_list|,
name|name
argument_list|,
name|engineService
operator|.
name|getType
argument_list|()
argument_list|,
name|executable
argument_list|)
decl_stmt|;
name|staticCache
operator|.
name|put
argument_list|(
name|cacheKey
argument_list|,
name|compiledScript
argument_list|)
expr_stmt|;
name|scriptMetrics
operator|.
name|onCompilation
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"skipping compile of script file [{}] as all scripted operations are disabled for file scripts"
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ScriptException
name|e
parameter_list|)
block|{
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
init|)
block|{
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|ElasticsearchException
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to load/compile script [{}]: {}"
argument_list|,
name|scriptNameExt
operator|.
name|v1
argument_list|()
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to log an appropriate warning after failing to load/compile script [{}]"
argument_list|,
name|scriptNameExt
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|/* Log at the whole exception at the debug level as well just in case the stack trace is important. That way you can                      * turn on the stack trace if you need it. */
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to load/compile script [{}]. full exception:"
argument_list|,
name|scriptNameExt
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to load/compile script [{}]"
argument_list|,
name|scriptNameExt
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onFileCreated
specifier|public
name|void
name|onFileCreated
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|onFileInit
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFileDeleted
specifier|public
name|void
name|onFileDeleted
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|scriptNameExt
init|=
name|getScriptNameExt
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptNameExt
operator|!=
literal|null
condition|)
block|{
name|ScriptEngineService
name|engineService
init|=
name|getScriptEngineServiceForFileExt
argument_list|(
name|scriptNameExt
operator|.
name|v2
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|engineService
operator|!=
literal|null
assert|;
name|logger
operator|.
name|info
argument_list|(
literal|"removing script file [{}]"
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|staticCache
operator|.
name|remove
argument_list|(
operator|new
name|CacheKey
argument_list|(
name|engineService
argument_list|,
name|scriptNameExt
operator|.
name|v1
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFileChanged
specifier|public
name|void
name|onFileChanged
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|onFileInit
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CacheKey
specifier|private
specifier|static
specifier|final
class|class
name|CacheKey
block|{
DECL|field|lang
specifier|final
name|String
name|lang
decl_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|code
specifier|final
name|String
name|code
decl_stmt|;
DECL|field|params
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
DECL|method|CacheKey
specifier|private
name|CacheKey
parameter_list|(
specifier|final
name|ScriptEngineService
name|service
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|code
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|lang
operator|=
name|service
operator|.
name|getType
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|CacheKey
name|cacheKey
init|=
operator|(
name|CacheKey
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|lang
operator|.
name|equals
argument_list|(
name|cacheKey
operator|.
name|lang
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|?
operator|!
name|name
operator|.
name|equals
argument_list|(
name|cacheKey
operator|.
name|name
argument_list|)
else|:
name|cacheKey
operator|.
name|name
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|code
operator|!=
literal|null
condition|?
operator|!
name|code
operator|.
name|equals
argument_list|(
name|cacheKey
operator|.
name|code
argument_list|)
else|:
name|cacheKey
operator|.
name|code
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|params
operator|.
name|equals
argument_list|(
name|cacheKey
operator|.
name|params
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|lang
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|name
operator|!=
literal|null
condition|?
name|name
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|code
operator|!=
literal|null
condition|?
name|code
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|params
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|IndexedScript
specifier|private
specifier|static
class|class
name|IndexedScript
block|{
DECL|field|lang
specifier|private
specifier|final
name|String
name|lang
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|IndexedScript
name|IndexedScript
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|)
block|{
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
specifier|final
name|String
index|[]
name|parts
init|=
name|script
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|this
operator|.
name|id
operator|=
name|script
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal index script format ["
operator|+
name|script
operator|+
literal|"]"
operator|+
literal|" should be /lang/id"
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|parts
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|this
operator|.
name|lang
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Conflicting script language, found ["
operator|+
name|parts
index|[
literal|1
index|]
operator|+
literal|"] expected + ["
operator|+
name|this
operator|.
name|lang
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|id
operator|=
name|parts
index|[
literal|2
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

