begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|ScriptEngineRegistry
specifier|public
class|class
name|ScriptEngineRegistry
block|{
DECL|field|registeredScriptEngineServices
specifier|private
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|registeredScriptEngineServices
decl_stmt|;
DECL|field|registeredLanguages
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
argument_list|>
name|registeredLanguages
decl_stmt|;
DECL|field|defaultInlineScriptModes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptMode
argument_list|>
name|defaultInlineScriptModes
decl_stmt|;
DECL|method|ScriptEngineRegistry
specifier|public
name|ScriptEngineRegistry
parameter_list|(
name|Iterable
argument_list|<
name|ScriptEngineRegistration
argument_list|>
name|registrations
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|registrations
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|registeredScriptEngineServices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
argument_list|>
name|registeredLanguages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptMode
argument_list|>
name|inlineScriptModes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScriptEngineRegistration
name|registration
range|:
name|registrations
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|languages
init|=
name|registeredScriptEngineServices
operator|.
name|putIfAbsent
argument_list|(
name|registration
operator|.
name|getScriptEngineService
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|registration
operator|.
name|getScriptEngineLanguages
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|languages
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"script engine service ["
operator|+
name|registration
operator|.
name|getScriptEngineService
argument_list|()
operator|+
literal|"] already registered for languages ["
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|languages
argument_list|)
operator|+
literal|"]"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|language
range|:
name|registration
operator|.
name|getScriptEngineLanguages
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
name|scriptEngineServiceClazz
init|=
name|registeredLanguages
operator|.
name|putIfAbsent
argument_list|(
name|language
argument_list|,
name|registration
operator|.
name|getScriptEngineService
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptEngineServiceClazz
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"scripting language ["
operator|+
name|language
operator|+
literal|"] already registered for script engine service ["
operator|+
name|scriptEngineServiceClazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|inlineScriptModes
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|registration
operator|.
name|getDefaultInlineScriptMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|registeredScriptEngineServices
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|registeredScriptEngineServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|registeredLanguages
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|registeredLanguages
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultInlineScriptModes
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|inlineScriptModes
argument_list|)
expr_stmt|;
block|}
DECL|method|getRegisteredScriptEngineServices
name|Iterable
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
argument_list|>
name|getRegisteredScriptEngineServices
parameter_list|()
block|{
return|return
name|registeredScriptEngineServices
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getLanguages
name|List
argument_list|<
name|String
argument_list|>
name|getLanguages
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
name|scriptEngineService
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scriptEngineService
argument_list|)
expr_stmt|;
return|return
name|registeredScriptEngineServices
operator|.
name|get
argument_list|(
name|scriptEngineService
argument_list|)
return|;
block|}
DECL|method|getRegisteredLanguages
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
argument_list|>
name|getRegisteredLanguages
parameter_list|()
block|{
return|return
name|registeredLanguages
return|;
block|}
DECL|method|getDefaultInlineScriptModes
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptMode
argument_list|>
name|getDefaultInlineScriptModes
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultInlineScriptModes
return|;
block|}
DECL|class|ScriptEngineRegistration
specifier|public
specifier|static
class|class
name|ScriptEngineRegistration
block|{
DECL|field|scriptEngineService
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
name|scriptEngineService
decl_stmt|;
DECL|field|scriptEngineLanguages
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|scriptEngineLanguages
decl_stmt|;
DECL|field|defaultInlineScriptMode
specifier|private
specifier|final
name|ScriptMode
name|defaultInlineScriptMode
decl_stmt|;
DECL|method|ScriptEngineRegistration
specifier|public
name|ScriptEngineRegistration
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
name|scriptEngineService
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|scriptEngineLanguages
parameter_list|)
block|{
comment|// Default to "off/disabled" if not specified
name|this
argument_list|(
name|scriptEngineService
argument_list|,
name|scriptEngineLanguages
argument_list|,
name|ScriptMode
operator|.
name|OFF
argument_list|)
expr_stmt|;
block|}
DECL|method|ScriptEngineRegistration
specifier|public
name|ScriptEngineRegistration
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
name|scriptEngineService
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|scriptEngineLanguages
parameter_list|,
name|ScriptMode
name|defaultInlineScriptMode
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scriptEngineService
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scriptEngineLanguages
argument_list|)
expr_stmt|;
if|if
condition|(
name|scriptEngineLanguages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"languages for script engine service ["
operator|+
name|scriptEngineService
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"] should be non-empty"
argument_list|)
throw|;
block|}
name|this
operator|.
name|scriptEngineService
operator|=
name|scriptEngineService
expr_stmt|;
name|this
operator|.
name|scriptEngineLanguages
operator|=
name|scriptEngineLanguages
expr_stmt|;
name|this
operator|.
name|defaultInlineScriptMode
operator|=
name|defaultInlineScriptMode
expr_stmt|;
block|}
DECL|method|getScriptEngineService
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
name|getScriptEngineService
parameter_list|()
block|{
return|return
name|scriptEngineService
return|;
block|}
DECL|method|getScriptEngineLanguages
name|List
argument_list|<
name|String
argument_list|>
name|getScriptEngineLanguages
parameter_list|()
block|{
return|return
name|scriptEngineLanguages
return|;
block|}
DECL|method|getDefaultInlineScriptMode
name|ScriptMode
name|getDefaultInlineScriptMode
parameter_list|()
block|{
return|return
name|defaultInlineScriptMode
return|;
block|}
block|}
block|}
end_class

end_unit

