begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_class
DECL|class|ScriptEngineRegistry
specifier|public
class|class
name|ScriptEngineRegistry
block|{
DECL|field|registeredScriptEngineServices
specifier|private
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
argument_list|,
name|String
argument_list|>
name|registeredScriptEngineServices
decl_stmt|;
DECL|field|registeredLanguages
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|registeredLanguages
decl_stmt|;
DECL|field|defaultInlineScriptEnableds
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|defaultInlineScriptEnableds
decl_stmt|;
DECL|method|ScriptEngineRegistry
specifier|public
name|ScriptEngineRegistry
parameter_list|(
name|Iterable
argument_list|<
name|ScriptEngineService
argument_list|>
name|registrations
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|registrations
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
argument_list|,
name|String
argument_list|>
name|registeredScriptEngineServices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|registeredLanguages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|inlineScriptEnableds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScriptEngineService
name|service
range|:
name|registrations
control|)
block|{
name|String
name|oldLanguage
init|=
name|registeredScriptEngineServices
operator|.
name|putIfAbsent
argument_list|(
name|service
operator|.
name|getClass
argument_list|()
argument_list|,
name|service
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldLanguage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"script engine service ["
operator|+
name|service
operator|.
name|getClass
argument_list|()
operator|+
literal|"] already registered for language ["
operator|+
name|oldLanguage
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|String
name|language
init|=
name|service
operator|.
name|getType
argument_list|()
decl_stmt|;
name|ScriptEngineService
name|scriptEngineService
init|=
name|registeredLanguages
operator|.
name|putIfAbsent
argument_list|(
name|language
argument_list|,
name|service
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptEngineService
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"scripting language ["
operator|+
name|language
operator|+
literal|"] already registered for script engine service ["
operator|+
name|scriptEngineService
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|inlineScriptEnableds
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|service
operator|.
name|isInlineScriptEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|registeredScriptEngineServices
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|registeredScriptEngineServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|registeredLanguages
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|registeredLanguages
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultInlineScriptEnableds
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|inlineScriptEnableds
argument_list|)
expr_stmt|;
block|}
DECL|method|getRegisteredScriptEngineServices
name|Iterable
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
argument_list|>
name|getRegisteredScriptEngineServices
parameter_list|()
block|{
return|return
name|registeredScriptEngineServices
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getLanguage
name|String
name|getLanguage
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ScriptEngineService
argument_list|>
name|scriptEngineService
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scriptEngineService
argument_list|)
expr_stmt|;
return|return
name|registeredScriptEngineServices
operator|.
name|get
argument_list|(
name|scriptEngineService
argument_list|)
return|;
block|}
DECL|method|getRegisteredLanguages
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|getRegisteredLanguages
parameter_list|()
block|{
return|return
name|registeredLanguages
return|;
block|}
DECL|method|getDefaultInlineScriptEnableds
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|getDefaultInlineScriptEnableds
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultInlineScriptEnableds
return|;
block|}
block|}
end_class

end_unit

