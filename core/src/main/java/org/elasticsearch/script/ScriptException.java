begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_comment
comment|/**  * Exception from a scripting engine.  *<p>  * A ScriptException has the following components:  *<ul>  *<li>{@code message}: A short and simple summary of what happened, such as "compile error".  *<li>{@code cause}: The underlying cause of the exception.  *<li>{@code scriptStack}: An implementation-specific "stacktrace" for the error in the script.  *<li>{@code script}: Identifier for which script failed.  *<li>{@code lang}: Scripting engine language, such as "painless"  *</ul>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|ScriptException
specifier|public
class|class
name|ScriptException
extends|extends
name|ElasticsearchException
block|{
DECL|field|scriptStack
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|scriptStack
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|String
name|script
decl_stmt|;
DECL|field|lang
specifier|private
specifier|final
name|String
name|lang
decl_stmt|;
comment|/**      * Create a new ScriptException.      * @param message A short and simple summary of what happened, such as "compile error".       *                Must not be {@code null}.       * @param cause The underlying cause of the exception. Must not be {@code null}.      * @param scriptStack An implementation-specific "stacktrace" for the error in the script.      *                Must not be {@code null}, but can be empty (though this should be avoided if possible).      * @param script Identifier for which script failed. Must not be {@code null}.      * @param lang Scripting engine language, such as "painless". Must not be {@code null}.      * @throws NullPointerException if any parameters are {@code null}.      */
DECL|method|ScriptException
specifier|public
name|ScriptException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|scriptStack
parameter_list|,
name|String
name|script
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
name|super
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|message
argument_list|)
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|cause
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptStack
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scriptStack
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|this
operator|.
name|lang
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|lang
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deserializes a ScriptException from a {@code StreamInput}      */
DECL|method|ScriptException
specifier|public
name|ScriptException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|scriptStack
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|in
operator|.
name|readStringArray
argument_list|()
argument_list|)
expr_stmt|;
name|script
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|lang
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|scriptStack
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|lang
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|innerToXContent
specifier|protected
name|void
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"script_stack"
argument_list|,
name|scriptStack
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"script"
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
name|lang
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the stacktrace for the error in the script.      * @return a read-only list of frames, which may be empty.      */
DECL|method|getScriptStack
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getScriptStack
parameter_list|()
block|{
return|return
name|scriptStack
return|;
block|}
comment|/**      * Returns the identifier for which script.      * @return script's name or source text that identifies the script.      */
DECL|method|getScript
specifier|public
name|String
name|getScript
parameter_list|()
block|{
return|return
name|script
return|;
block|}
comment|/**      * Returns the language of the script.      * @return the {@code lang} parameter of the scripting engine.      */
DECL|method|getLang
specifier|public
name|String
name|getLang
parameter_list|()
block|{
return|return
name|lang
return|;
block|}
comment|/**       * Returns a JSON version of this exception for debugging.      */
DECL|method|toJsonString
specifier|public
name|String
name|toJsonString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|json
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|json
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|json
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|json
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|json
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

