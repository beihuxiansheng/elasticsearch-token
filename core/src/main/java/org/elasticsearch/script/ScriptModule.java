begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ScriptPlugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * An {@link org.elasticsearch.common.inject.Module} which manages {@link ScriptEngineService}s, as well  * as named script  */
end_comment

begin_class
DECL|class|ScriptModule
specifier|public
class|class
name|ScriptModule
extends|extends
name|AbstractModule
block|{
DECL|field|scriptContextRegistry
specifier|protected
specifier|final
name|ScriptContextRegistry
name|scriptContextRegistry
decl_stmt|;
DECL|field|scriptEngineRegistry
specifier|protected
specifier|final
name|ScriptEngineRegistry
name|scriptEngineRegistry
decl_stmt|;
DECL|field|scriptSettings
specifier|protected
specifier|final
name|ScriptSettings
name|scriptSettings
decl_stmt|;
DECL|method|ScriptModule
specifier|public
name|ScriptModule
parameter_list|(
name|ScriptEngineService
modifier|...
name|services
parameter_list|)
block|{
name|this
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|services
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ScriptModule
specifier|public
name|ScriptModule
parameter_list|(
name|List
argument_list|<
name|ScriptEngineService
argument_list|>
name|scriptEngineServices
parameter_list|,
name|List
argument_list|<
name|ScriptContext
operator|.
name|Plugin
argument_list|>
name|customScriptContexts
parameter_list|)
block|{
name|this
operator|.
name|scriptContextRegistry
operator|=
operator|new
name|ScriptContextRegistry
argument_list|(
name|customScriptContexts
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptEngineRegistry
operator|=
operator|new
name|ScriptEngineRegistry
argument_list|(
name|scriptEngineServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptSettings
operator|=
operator|new
name|ScriptSettings
argument_list|(
name|scriptEngineRegistry
argument_list|,
name|scriptContextRegistry
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is called after all modules have been processed but before we actually validate all settings. This allows the      * script extensions to add all their settings.      */
DECL|method|getSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSettings
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|settings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|scriptSettings
operator|.
name|getScriptTypeSettings
argument_list|()
operator|.
name|forEach
argument_list|(
name|settings
operator|::
name|add
argument_list|)
expr_stmt|;
name|scriptSettings
operator|.
name|getScriptContextSettings
argument_list|()
operator|.
name|forEach
argument_list|(
name|settings
operator|::
name|add
argument_list|)
expr_stmt|;
name|scriptSettings
operator|.
name|getScriptLanguageSettings
argument_list|()
operator|.
name|forEach
argument_list|(
name|settings
operator|::
name|add
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|scriptSettings
operator|.
name|getDefaultScriptLanguageSetting
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|settings
return|;
block|}
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|ScriptSettings
name|scriptSettings
init|=
operator|new
name|ScriptSettings
argument_list|(
name|scriptEngineRegistry
argument_list|,
name|scriptContextRegistry
argument_list|)
decl_stmt|;
name|bind
argument_list|(
name|ScriptContextRegistry
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|scriptContextRegistry
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ScriptEngineRegistry
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|scriptEngineRegistry
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ScriptSettings
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|scriptSettings
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ScriptService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
DECL|method|create
specifier|public
specifier|static
name|ScriptModule
name|create
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|List
argument_list|<
name|ScriptPlugin
argument_list|>
name|scriptPlugins
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NativeScriptFactory
argument_list|>
name|factoryMap
init|=
name|scriptPlugins
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getNativeScripts
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|NativeScriptFactory
operator|::
name|getName
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|NativeScriptEngineService
name|nativeScriptEngineService
init|=
operator|new
name|NativeScriptEngineService
argument_list|(
name|settings
argument_list|,
name|factoryMap
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ScriptEngineService
argument_list|>
name|scriptEngineServices
init|=
name|scriptPlugins
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getScriptEngineService
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|scriptEngineServices
operator|.
name|add
argument_list|(
name|nativeScriptEngineService
argument_list|)
expr_stmt|;
return|return
operator|new
name|ScriptModule
argument_list|(
name|scriptEngineServices
argument_list|,
name|scriptPlugins
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getCustomScriptContexts
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

