begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ScriptPlugin
import|;
end_import

begin_comment
comment|/**  * Manages building {@link ScriptService}.  */
end_comment

begin_class
DECL|class|ScriptModule
specifier|public
class|class
name|ScriptModule
block|{
DECL|field|CORE_CONTEXTS
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptContext
argument_list|<
name|?
argument_list|>
argument_list|>
name|CORE_CONTEXTS
decl_stmt|;
static|static
block|{
name|CORE_CONTEXTS
operator|=
name|Stream
operator|.
name|of
argument_list|(
name|SearchScript
operator|.
name|CONTEXT
argument_list|,
name|SearchScript
operator|.
name|AGGS_CONTEXT
argument_list|,
name|ExecutableScript
operator|.
name|CONTEXT
argument_list|,
name|ExecutableScript
operator|.
name|AGGS_CONTEXT
argument_list|,
name|ExecutableScript
operator|.
name|UPDATE_CONTEXT
argument_list|,
name|ExecutableScript
operator|.
name|INGEST_CONTEXT
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|c
lambda|->
name|c
operator|.
name|name
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|method|ScriptModule
specifier|public
name|ScriptModule
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|List
argument_list|<
name|ScriptPlugin
argument_list|>
name|scriptPlugins
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngine
argument_list|>
name|engines
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptContext
argument_list|<
name|?
argument_list|>
argument_list|>
name|contexts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|CORE_CONTEXTS
argument_list|)
decl_stmt|;
for|for
control|(
name|ScriptPlugin
name|plugin
range|:
name|scriptPlugins
control|)
block|{
for|for
control|(
name|ScriptContext
name|context
range|:
name|plugin
operator|.
name|getContexts
argument_list|()
control|)
block|{
name|ScriptContext
name|oldContext
init|=
name|contexts
operator|.
name|put
argument_list|(
name|context
operator|.
name|name
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldContext
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Context name ["
operator|+
name|context
operator|.
name|name
operator|+
literal|"] defined twice"
argument_list|)
throw|;
block|}
block|}
name|ScriptEngine
name|engine
init|=
name|plugin
operator|.
name|getScriptEngine
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|engine
operator|!=
literal|null
condition|)
block|{
name|ScriptEngine
name|existing
init|=
name|engines
operator|.
name|put
argument_list|(
name|engine
operator|.
name|getType
argument_list|()
argument_list|,
name|engine
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"scripting language ["
operator|+
name|engine
operator|.
name|getType
argument_list|()
operator|+
literal|"] defined for engine ["
operator|+
name|existing
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] and ["
operator|+
name|engine
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|scriptService
operator|=
operator|new
name|ScriptService
argument_list|(
name|settings
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|engines
argument_list|)
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|contexts
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Service responsible for managing scripts.      */
DECL|method|getScriptService
specifier|public
name|ScriptService
name|getScriptService
parameter_list|()
block|{
return|return
name|scriptService
return|;
block|}
comment|/**      * Allow the script service to register any settings update handlers on the cluster settings      */
DECL|method|registerClusterSettingsListeners
specifier|public
name|void
name|registerClusterSettingsListeners
parameter_list|(
name|ClusterSettings
name|clusterSettings
parameter_list|)
block|{
name|scriptService
operator|.
name|registerClusterSettingsListeners
argument_list|(
name|clusterSettings
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

