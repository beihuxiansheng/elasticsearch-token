begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ScriptPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|ResourceWatcherService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Manages building {@link ScriptService} and {@link ScriptSettings} from a list of plugins.  */
end_comment

begin_class
DECL|class|ScriptModule
specifier|public
class|class
name|ScriptModule
block|{
DECL|field|scriptSettings
specifier|private
specifier|final
name|ScriptSettings
name|scriptSettings
decl_stmt|;
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
comment|/**      * Build from {@linkplain ScriptPlugin}s. Convenient for normal use but not great for tests. See      * {@link ScriptModule#ScriptModule(Settings, Environment, ResourceWatcherService, List, List)} for easier use in tests.      */
DECL|method|create
specifier|public
specifier|static
name|ScriptModule
name|create
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|ResourceWatcherService
name|resourceWatcherService
parameter_list|,
name|List
argument_list|<
name|ScriptPlugin
argument_list|>
name|scriptPlugins
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NativeScriptFactory
argument_list|>
name|factoryMap
init|=
name|scriptPlugins
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getNativeScripts
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|NativeScriptFactory
operator|::
name|getName
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|NativeScriptEngineService
name|nativeScriptEngineService
init|=
operator|new
name|NativeScriptEngineService
argument_list|(
name|settings
argument_list|,
name|factoryMap
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ScriptEngineService
argument_list|>
name|scriptEngineServices
init|=
name|scriptPlugins
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getScriptEngineService
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|scriptEngineServices
operator|.
name|add
argument_list|(
name|nativeScriptEngineService
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ScriptContext
operator|.
name|Plugin
argument_list|>
name|plugins
init|=
name|scriptPlugins
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getCustomScriptContexts
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScriptModule
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|resourceWatcherService
argument_list|,
name|scriptEngineServices
argument_list|,
name|plugins
argument_list|)
return|;
block|}
comment|/**      * Build {@linkplain ScriptEngineService} and {@linkplain ScriptContext.Plugin}.      */
DECL|method|ScriptModule
specifier|public
name|ScriptModule
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|ResourceWatcherService
name|resourceWatcherService
parameter_list|,
name|List
argument_list|<
name|ScriptEngineService
argument_list|>
name|scriptEngineServices
parameter_list|,
name|List
argument_list|<
name|ScriptContext
operator|.
name|Plugin
argument_list|>
name|customScriptContexts
parameter_list|)
block|{
name|ScriptContextRegistry
name|scriptContextRegistry
init|=
operator|new
name|ScriptContextRegistry
argument_list|(
name|customScriptContexts
argument_list|)
decl_stmt|;
name|ScriptEngineRegistry
name|scriptEngineRegistry
init|=
operator|new
name|ScriptEngineRegistry
argument_list|(
name|scriptEngineServices
argument_list|)
decl_stmt|;
name|scriptSettings
operator|=
operator|new
name|ScriptSettings
argument_list|(
name|scriptEngineRegistry
argument_list|,
name|scriptContextRegistry
argument_list|)
expr_stmt|;
try|try
block|{
name|scriptService
operator|=
operator|new
name|ScriptService
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|resourceWatcherService
argument_list|,
name|scriptEngineRegistry
argument_list|,
name|scriptContextRegistry
argument_list|,
name|scriptSettings
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't setup ScriptService"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Extra settings for scripts.      */
DECL|method|getSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSettings
parameter_list|()
block|{
return|return
name|scriptSettings
operator|.
name|getSettings
argument_list|()
return|;
block|}
comment|/**      * Service responsible for managing scripts.      */
DECL|method|getScriptService
specifier|public
name|ScriptService
name|getScriptService
parameter_list|()
block|{
return|return
name|scriptService
return|;
block|}
block|}
end_class

end_unit

