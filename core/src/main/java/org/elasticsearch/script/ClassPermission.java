begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|BasicPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Checked by scripting engines to allow loading a java class.  *<p>  * Examples:  *<p>  * Allow permission to {@code java.util.List}  *<pre>permission org.elasticsearch.script.ClassPermission "java.util.List";</pre>  * Allow permission to classes underneath {@code java.util} (and its subpackages such as {@code java.util.zip})  *<pre>permission org.elasticsearch.script.ClassPermission "java.util.*";</pre>  * Allow permission to standard predefined list of basic classes (see list below)  *<pre>permission org.elasticsearch.script.ClassPermission "&lt;&lt;STANDARD&gt;&gt;";</pre>  * Allow permission to all classes  *<pre>permission org.elasticsearch.script.ClassPermission "*";</pre>  *<p>  * Set of classes (allowed by special value<code>&lt;&lt;STANDARD&gt;&gt;</code>):  *<ul>  *<li>{@link java.lang.Boolean}</li>  *<li>{@link java.lang.Byte}</li>  *<li>{@link java.lang.Character}</li>  *<li>{@link java.lang.Double}</li>  *<li>{@link java.lang.Integer}</li>  *<li>{@link java.lang.Long}</li>  *<li>{@link java.lang.Math}</li>  *<li>{@link java.lang.Object}</li>  *<li>{@link java.lang.Short}</li>  *<li>{@link java.lang.String}</li>  *<li>{@link java.math.BigDecimal}</li>  *<li>{@link java.util.ArrayList}</li>  *<li>{@link java.util.Arrays}</li>  *<li>{@link java.util.Date}</li>  *<li>{@link java.util.HashMap}</li>  *<li>{@link java.util.HashSet}</li>  *<li>{@link java.util.Iterator}</li>  *<li>{@link java.util.List}</li>  *<li>{@link java.util.Map}</li>  *<li>{@link java.util.Set}</li>  *<li>{@link java.util.UUID}</li>  *<li>{@link org.joda.time.DateTime}</li>  *<li>{@link org.joda.time.DateTimeUtils}</li>  *<li>{@link org.joda.time.DateTimeZone}</li>  *<li>{@link org.joda.time.Instant}</li>  *</ul>  */
end_comment

begin_class
DECL|class|ClassPermission
specifier|public
specifier|final
class|class
name|ClassPermission
extends|extends
name|BasicPermission
block|{
DECL|field|STANDARD
specifier|public
specifier|static
specifier|final
name|String
name|STANDARD
init|=
literal|"<<STANDARD>>"
decl_stmt|;
comment|/** Typical set of classes for scripting: basic data types, math, dates, and simple collections */
comment|// this is the list from the old grovy sandbox impl (+ some things like String, Iterator, etc that were missing)
DECL|field|STANDARD_CLASSES
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|STANDARD_CLASSES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
comment|// jdk classes
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Byte
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Character
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Short
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|math
operator|.
name|BigDecimal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|util
operator|.
name|ArrayList
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|util
operator|.
name|Date
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|util
operator|.
name|HashMap
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|util
operator|.
name|HashSet
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|util
operator|.
name|Iterator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|util
operator|.
name|List
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|util
operator|.
name|Set
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|java
operator|.
name|util
operator|.
name|UUID
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
comment|// joda-time
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Instant
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Creates a new ClassPermission object.      *      * @param name class to grant permission to      */
DECL|method|ClassPermission
specifier|public
name|ClassPermission
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new ClassPermission object.      * This constructor exists for use by the {@code Policy} object to instantiate new Permission objects.      *      * @param name class to grant permission to      * @param actions ignored      */
DECL|method|ClassPermission
specifier|public
name|ClassPermission
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|actions
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|implies
specifier|public
name|boolean
name|implies
parameter_list|(
name|Permission
name|p
parameter_list|)
block|{
comment|// check for a special value of STANDARD to imply the basic set
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getClass
argument_list|()
operator|==
name|getClass
argument_list|()
condition|)
block|{
name|ClassPermission
name|other
init|=
operator|(
name|ClassPermission
operator|)
name|p
decl_stmt|;
if|if
condition|(
name|STANDARD
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
operator|&&
name|STANDARD_CLASSES
operator|.
name|contains
argument_list|(
name|other
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|super
operator|.
name|implies
argument_list|(
name|p
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newPermissionCollection
specifier|public
name|PermissionCollection
name|newPermissionCollection
parameter_list|()
block|{
comment|// BasicPermissionCollection only handles wildcards, we expand<<STANDARD>> here
name|PermissionCollection
name|impl
init|=
name|super
operator|.
name|newPermissionCollection
argument_list|()
decl_stmt|;
return|return
operator|new
name|PermissionCollection
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
name|permission
operator|instanceof
name|ClassPermission
operator|&&
name|STANDARD
operator|.
name|equals
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|clazz
range|:
name|STANDARD_CLASSES
control|)
block|{
name|impl
operator|.
name|add
argument_list|(
operator|new
name|ClassPermission
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|impl
operator|.
name|add
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|implies
parameter_list|(
name|Permission
name|permission
parameter_list|)
block|{
return|return
name|impl
operator|.
name|implies
argument_list|(
name|permission
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|Permission
argument_list|>
name|elements
parameter_list|()
block|{
return|return
name|impl
operator|.
name|elements
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

