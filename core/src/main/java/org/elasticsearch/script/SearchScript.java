begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|ScorerAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|LeafDocLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|LeafSearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A generic script used for per document use cases.  *  * Using a {@link SearchScript} works as follows:  *<ol>  *<li>Construct a {@link Factory} using {@link ScriptService#compile(Script, ScriptContext)}</li>  *<li>Construct a {@link LeafFactory} for a an index using {@link Factory#newFactory(Map, SearchLookup)}</li>  *<li>Construct a {@link SearchScript} for a Lucene segment using {@link LeafFactory#newInstance(LeafReaderContext)}</li>  *<li>Call {@link #setDocument(int)} to indicate which document in the segment the script should be run for next</li>  *<li>Call one of the {@code run} methods: {@link #run()}, {@link #runAsDouble()}, or {@link #runAsLong()}</li>  *</ol>  */
end_comment

begin_class
DECL|class|SearchScript
specifier|public
specifier|abstract
class|class
name|SearchScript
implements|implements
name|ScorerAware
implements|,
name|ExecutableScript
block|{
comment|/** The generic runtime parameters for the script. */
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
comment|/** A lookup for the index this script will operate on. */
DECL|field|lookup
specifier|private
specifier|final
name|SearchLookup
name|lookup
decl_stmt|;
comment|/** A leaf lookup for the bound segment this script will operate on. */
DECL|field|leafContext
specifier|private
specifier|final
name|LeafReaderContext
name|leafContext
decl_stmt|;
comment|/** A leaf lookup for the bound segment this script will operate on. */
DECL|field|leafLookup
specifier|private
specifier|final
name|LeafSearchLookup
name|leafLookup
decl_stmt|;
comment|/** A scorer that will return the score for the current document when the script is run. */
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|method|SearchScript
specifier|public
name|SearchScript
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
name|SearchLookup
name|lookup
parameter_list|,
name|LeafReaderContext
name|leafContext
parameter_list|)
block|{
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|lookup
operator|=
name|lookup
expr_stmt|;
name|this
operator|.
name|leafContext
operator|=
name|leafContext
expr_stmt|;
comment|// TODO: remove leniency when painless does not implement SearchScript for executable script cases
name|this
operator|.
name|leafLookup
operator|=
name|leafContext
operator|==
literal|null
condition|?
literal|null
else|:
name|lookup
operator|.
name|getLeafSearchLookup
argument_list|(
name|leafContext
argument_list|)
expr_stmt|;
block|}
comment|/** Return the parameters for this script. */
DECL|method|getParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|params
return|;
block|}
comment|/** The leaf lookup for the Lucene segment this script was created for. */
DECL|method|getLeafLookup
specifier|protected
specifier|final
name|LeafSearchLookup
name|getLeafLookup
parameter_list|()
block|{
return|return
name|leafLookup
return|;
block|}
comment|/** The leaf context for the Lucene segment this script was created for. */
DECL|method|getLeafContext
specifier|protected
specifier|final
name|LeafReaderContext
name|getLeafContext
parameter_list|()
block|{
return|return
name|leafContext
return|;
block|}
comment|/** The doc lookup for the Lucene segment this script was created for. */
DECL|method|getDoc
specifier|public
specifier|final
name|LeafDocLookup
name|getDoc
parameter_list|()
block|{
comment|// TODO: remove leniency when painless does not implement SearchScript for executable script cases
return|return
name|leafLookup
operator|==
literal|null
condition|?
literal|null
else|:
name|leafLookup
operator|.
name|doc
argument_list|()
return|;
block|}
comment|/** Set the current document to run the script on next. */
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docid
parameter_list|)
block|{
comment|// TODO: remove leniency when painless does not implement SearchScript for executable script cases
if|if
condition|(
name|leafLookup
operator|!=
literal|null
condition|)
block|{
name|leafLookup
operator|.
name|setDocument
argument_list|(
name|docid
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
comment|/** Return the score of the current document. */
DECL|method|getScore
specifier|public
name|double
name|getScore
parameter_list|()
block|{
comment|// TODO: remove leniency when painless does not implement SearchScript for executable script cases
if|if
condition|(
name|scorer
operator|==
literal|null
condition|)
block|{
return|return
literal|0.0d
return|;
block|}
try|try
block|{
return|return
name|scorer
operator|.
name|score
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"couldn't lookup score"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Sets per-document aggregation {@code _value}.      *<p>      * The default implementation just calls {@code setNextVar("_value", value)} but      * some engines might want to handle this differently for better performance.      *<p>      * @param value per-document value, typically a String, Long, or Double      */
DECL|method|setNextAggregationValue
specifier|public
name|void
name|setNextAggregationValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|setNextVar
argument_list|(
literal|"_value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextVar
specifier|public
name|void
name|setNextVar
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{}
comment|/** Return the result as a long. This is used by aggregation scripts over long fields. */
DECL|method|runAsLong
specifier|public
name|long
name|runAsLong
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"runAsLong is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
name|runAsDouble
argument_list|()
return|;
block|}
comment|/** Return the result as a double. This is the main use case of search script, used for document scoring. */
DECL|method|runAsDouble
specifier|public
specifier|abstract
name|double
name|runAsDouble
parameter_list|()
function_decl|;
comment|/** A factory to construct {@link SearchScript} instances. */
DECL|interface|LeafFactory
specifier|public
interface|interface
name|LeafFactory
block|{
DECL|method|newInstance
name|SearchScript
name|newInstance
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Indicates if document scores may be needed by this {@link SearchScript}.          *          * @return {@code true} if scores are needed.          */
DECL|method|needsScores
name|boolean
name|needsScores
parameter_list|()
function_decl|;
block|}
comment|/** A factory to construct stateful {@link SearchScript} factories for a specific index. */
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|newFactory
name|LeafFactory
name|newFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
name|SearchLookup
name|lookup
parameter_list|)
function_decl|;
block|}
comment|/** The context used to compile {@link SearchScript} factories. */
DECL|field|CONTEXT
specifier|public
specifier|static
specifier|final
name|ScriptContext
argument_list|<
name|Factory
argument_list|>
name|CONTEXT
init|=
operator|new
name|ScriptContext
argument_list|<>
argument_list|(
literal|"search"
argument_list|,
name|Factory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: remove aggs context when it has its own interface
DECL|field|AGGS_CONTEXT
specifier|public
specifier|static
specifier|final
name|ScriptContext
argument_list|<
name|Factory
argument_list|>
name|AGGS_CONTEXT
init|=
operator|new
name|ScriptContext
argument_list|<>
argument_list|(
literal|"aggs"
argument_list|,
name|Factory
operator|.
name|class
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

