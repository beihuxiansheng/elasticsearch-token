begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|PortsRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_class
DECL|class|HttpTransportSettings
specifier|public
specifier|final
class|class
name|HttpTransportSettings
block|{
DECL|field|SETTING_CORS_ENABLED
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|SETTING_CORS_ENABLED
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"http.cors.enabled"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_CORS_ALLOW_ORIGIN
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|SETTING_CORS_ALLOW_ORIGIN
init|=
operator|new
name|Setting
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"http.cors.allow-origin"
argument_list|,
literal|""
argument_list|,
parameter_list|(
name|value
parameter_list|)
lambda|->
name|value
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_CORS_MAX_AGE
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SETTING_CORS_MAX_AGE
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"http.cors.max-age"
argument_list|,
literal|1728000
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_CORS_ALLOW_METHODS
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|SETTING_CORS_ALLOW_METHODS
init|=
operator|new
name|Setting
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"http.cors.allow-methods"
argument_list|,
literal|"OPTIONS, HEAD, GET, POST, PUT, DELETE"
argument_list|,
parameter_list|(
name|value
parameter_list|)
lambda|->
name|value
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_CORS_ALLOW_HEADERS
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|SETTING_CORS_ALLOW_HEADERS
init|=
operator|new
name|Setting
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"http.cors.allow-headers"
argument_list|,
literal|"X-Requested-With, Content-Type, Content-Length"
argument_list|,
parameter_list|(
name|value
parameter_list|)
lambda|->
name|value
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_CORS_ALLOW_CREDENTIALS
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|SETTING_CORS_ALLOW_CREDENTIALS
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"http.cors.allow-credentials"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_PIPELINING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|SETTING_PIPELINING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"http.pipelining"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_PIPELINING_MAX_EVENTS
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SETTING_PIPELINING_MAX_EVENTS
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"http.pipelining.max_events"
argument_list|,
literal|10000
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_COMPRESSION
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|SETTING_HTTP_COMPRESSION
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"http.compression"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_COMPRESSION_LEVEL
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SETTING_HTTP_COMPRESSION_LEVEL
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"http.compression_level"
argument_list|,
literal|6
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_PORT
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|PortsRange
argument_list|>
name|SETTING_HTTP_PORT
init|=
operator|new
name|Setting
argument_list|<
name|PortsRange
argument_list|>
argument_list|(
literal|"http.port"
argument_list|,
literal|"9200-9300"
argument_list|,
name|PortsRange
operator|::
operator|new
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_PUBLISH_PORT
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|SETTING_HTTP_PUBLISH_PORT
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"http.publish_port"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_DETAILED_ERRORS_ENABLED
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|SETTING_HTTP_DETAILED_ERRORS_ENABLED
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"http.detailed_errors.enabled"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_MAX_CONTENT_LENGTH
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|SETTING_HTTP_MAX_CONTENT_LENGTH
init|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"http.max_content_length"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|100
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_MAX_CHUNK_SIZE
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|SETTING_HTTP_MAX_CHUNK_SIZE
init|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"http.max_chunk_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|8
argument_list|,
name|ByteSizeUnit
operator|.
name|KB
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_MAX_HEADER_SIZE
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|SETTING_HTTP_MAX_HEADER_SIZE
init|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"http.max_header_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|8
argument_list|,
name|ByteSizeUnit
operator|.
name|KB
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|field|SETTING_HTTP_MAX_INITIAL_LINE_LENGTH
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|SETTING_HTTP_MAX_INITIAL_LINE_LENGTH
init|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"http.max_initial_line_length"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|4
argument_list|,
name|ByteSizeUnit
operator|.
name|KB
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
comment|// don't reset cookies by default, since I don't think we really need to
comment|// note, parsing cookies was fixed in netty 3.5.1 regarding stack allocation, but still, currently, we don't need cookies
DECL|field|SETTING_HTTP_RESET_COOKIES
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|SETTING_HTTP_RESET_COOKIES
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"http.reset_cookies"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Scope
operator|.
name|CLUSTER
argument_list|)
decl_stmt|;
DECL|method|HttpTransportSettings
specifier|private
name|HttpTransportSettings
parameter_list|()
block|{     }
block|}
end_class

end_unit

