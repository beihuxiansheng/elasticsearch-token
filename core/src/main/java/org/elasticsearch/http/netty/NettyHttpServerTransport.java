begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http.netty
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Booleans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|NettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|OpenChannelsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty
operator|.
name|pipelining
operator|.
name|HttpPipeliningHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BindTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|oio
operator|.
name|OioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpChunkAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpContentCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequestDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|ReadTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
operator|.
name|TcpSettings
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
operator|.
name|daemonThreadFactory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|NettyHttpServerTransport
specifier|public
class|class
name|NettyHttpServerTransport
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|HttpServerTransport
argument_list|>
implements|implements
name|HttpServerTransport
block|{
static|static
block|{
name|NettyUtils
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
DECL|field|SETTING_CORS_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_CORS_ENABLED
init|=
literal|"http.cors.enabled"
decl_stmt|;
DECL|field|SETTING_CORS_ALLOW_ORIGIN
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_CORS_ALLOW_ORIGIN
init|=
literal|"http.cors.allow-origin"
decl_stmt|;
DECL|field|SETTING_CORS_MAX_AGE
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_CORS_MAX_AGE
init|=
literal|"http.cors.max-age"
decl_stmt|;
DECL|field|SETTING_CORS_ALLOW_METHODS
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_CORS_ALLOW_METHODS
init|=
literal|"http.cors.allow-methods"
decl_stmt|;
DECL|field|SETTING_CORS_ALLOW_HEADERS
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_CORS_ALLOW_HEADERS
init|=
literal|"http.cors.allow-headers"
decl_stmt|;
DECL|field|SETTING_CORS_ALLOW_CREDENTIALS
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_CORS_ALLOW_CREDENTIALS
init|=
literal|"http.cors.allow-credentials"
decl_stmt|;
DECL|field|SETTING_PIPELINING
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_PIPELINING
init|=
literal|"http.pipelining"
decl_stmt|;
DECL|field|SETTING_PIPELINING_MAX_EVENTS
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_PIPELINING_MAX_EVENTS
init|=
literal|"http.pipelining.max_events"
decl_stmt|;
DECL|field|SETTING_HTTP_COMPRESSION
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_HTTP_COMPRESSION
init|=
literal|"http.compression"
decl_stmt|;
DECL|field|SETTING_HTTP_COMPRESSION_LEVEL
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_HTTP_COMPRESSION_LEVEL
init|=
literal|"http.compression_level"
decl_stmt|;
DECL|field|SETTING_HTTP_DETAILED_ERRORS_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_HTTP_DETAILED_ERRORS_ENABLED
init|=
literal|"http.detailed_errors.enabled"
decl_stmt|;
DECL|field|DEFAULT_SETTING_PIPELINING
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SETTING_PIPELINING
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_SETTING_PIPELINING_MAX_EVENTS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SETTING_PIPELINING_MAX_EVENTS
init|=
literal|10000
decl_stmt|;
DECL|field|networkService
specifier|protected
specifier|final
name|NetworkService
name|networkService
decl_stmt|;
DECL|field|bigArrays
specifier|protected
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|maxContentLength
specifier|protected
specifier|final
name|ByteSizeValue
name|maxContentLength
decl_stmt|;
DECL|field|maxInitialLineLength
specifier|protected
specifier|final
name|ByteSizeValue
name|maxInitialLineLength
decl_stmt|;
DECL|field|maxHeaderSize
specifier|protected
specifier|final
name|ByteSizeValue
name|maxHeaderSize
decl_stmt|;
DECL|field|maxChunkSize
specifier|protected
specifier|final
name|ByteSizeValue
name|maxChunkSize
decl_stmt|;
DECL|field|workerCount
specifier|protected
specifier|final
name|int
name|workerCount
decl_stmt|;
DECL|field|blockingServer
specifier|protected
specifier|final
name|boolean
name|blockingServer
decl_stmt|;
DECL|field|pipelining
specifier|protected
specifier|final
name|boolean
name|pipelining
decl_stmt|;
DECL|field|pipeliningMaxEvents
specifier|protected
specifier|final
name|int
name|pipeliningMaxEvents
decl_stmt|;
DECL|field|compression
specifier|protected
specifier|final
name|boolean
name|compression
decl_stmt|;
DECL|field|compressionLevel
specifier|protected
specifier|final
name|int
name|compressionLevel
decl_stmt|;
DECL|field|resetCookies
specifier|protected
specifier|final
name|boolean
name|resetCookies
decl_stmt|;
DECL|field|port
specifier|protected
specifier|final
name|String
name|port
decl_stmt|;
DECL|field|bindHost
specifier|protected
specifier|final
name|String
name|bindHost
decl_stmt|;
DECL|field|publishHost
specifier|protected
specifier|final
name|String
name|publishHost
decl_stmt|;
DECL|field|detailedErrorsEnabled
specifier|protected
specifier|final
name|boolean
name|detailedErrorsEnabled
decl_stmt|;
DECL|field|publishPort
specifier|protected
name|int
name|publishPort
decl_stmt|;
DECL|field|tcpNoDelay
specifier|protected
specifier|final
name|String
name|tcpNoDelay
decl_stmt|;
DECL|field|tcpKeepAlive
specifier|protected
specifier|final
name|String
name|tcpKeepAlive
decl_stmt|;
DECL|field|reuseAddress
specifier|protected
specifier|final
name|boolean
name|reuseAddress
decl_stmt|;
DECL|field|tcpSendBufferSize
specifier|protected
specifier|final
name|ByteSizeValue
name|tcpSendBufferSize
decl_stmt|;
DECL|field|tcpReceiveBufferSize
specifier|protected
specifier|final
name|ByteSizeValue
name|tcpReceiveBufferSize
decl_stmt|;
DECL|field|receiveBufferSizePredictorFactory
specifier|protected
specifier|final
name|ReceiveBufferSizePredictorFactory
name|receiveBufferSizePredictorFactory
decl_stmt|;
DECL|field|maxCumulationBufferCapacity
specifier|protected
specifier|final
name|ByteSizeValue
name|maxCumulationBufferCapacity
decl_stmt|;
DECL|field|maxCompositeBufferComponents
specifier|protected
specifier|final
name|int
name|maxCompositeBufferComponents
decl_stmt|;
DECL|field|serverBootstrap
specifier|protected
specifier|volatile
name|ServerBootstrap
name|serverBootstrap
decl_stmt|;
DECL|field|boundAddress
specifier|protected
specifier|volatile
name|BoundTransportAddress
name|boundAddress
decl_stmt|;
DECL|field|serverChannels
specifier|protected
specifier|volatile
name|List
argument_list|<
name|Channel
argument_list|>
name|serverChannels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// package private for testing
DECL|field|serverOpenChannels
name|OpenChannelsHandler
name|serverOpenChannels
decl_stmt|;
DECL|field|httpServerAdapter
specifier|protected
specifier|volatile
name|HttpServerAdapter
name|httpServerAdapter
decl_stmt|;
annotation|@
name|Inject
DECL|method|NettyHttpServerTransport
specifier|public
name|NettyHttpServerTransport
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|NetworkService
name|networkService
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|networkService
operator|=
name|networkService
expr_stmt|;
name|this
operator|.
name|bigArrays
operator|=
name|bigArrays
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"netty.epollBugWorkaround"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.jboss.netty.epollBugWorkaround"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|ByteSizeValue
name|maxContentLength
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.netty.max_content_length"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.max_content_length"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|100
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|maxChunkSize
operator|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.netty.max_chunk_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.max_chunk_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|8
argument_list|,
name|ByteSizeUnit
operator|.
name|KB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxHeaderSize
operator|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.netty.max_header_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.max_header_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|8
argument_list|,
name|ByteSizeUnit
operator|.
name|KB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxInitialLineLength
operator|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.netty.max_initial_line_length"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.max_initial_line_length"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|4
argument_list|,
name|ByteSizeUnit
operator|.
name|KB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't reset cookies by default, since I don't think we really need to
comment|// note, parsing cookies was fixed in netty 3.5.1 regarding stack allocation, but still, currently, we don't need cookies
name|this
operator|.
name|resetCookies
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"http.netty.reset_cookies"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"http.reset_cookies"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxCumulationBufferCapacity
operator|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.netty.max_cumulation_buffer_capacity"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxCompositeBufferComponents
operator|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"http.netty.max_composite_buffer_components"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|workerCount
operator|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"http.netty.worker_count"
argument_list|,
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|settings
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockingServer
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"http.netty.http.blocking_server"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_BLOCKING_SERVER
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_BLOCKING
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|settings
operator|.
name|get
argument_list|(
literal|"http.netty.port"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"http.port"
argument_list|,
literal|"9200-9300"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|bindHost
operator|=
name|settings
operator|.
name|get
argument_list|(
literal|"http.netty.bind_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"http.bind_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"http.host"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|publishHost
operator|=
name|settings
operator|.
name|get
argument_list|(
literal|"http.netty.publish_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"http.publish_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"http.host"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|publishPort
operator|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"http.netty.publish_port"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"http.publish_port"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpNoDelay
operator|=
name|settings
operator|.
name|get
argument_list|(
literal|"http.netty.tcp_no_delay"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|TCP_NO_DELAY
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpKeepAlive
operator|=
name|settings
operator|.
name|get
argument_list|(
literal|"http.netty.tcp_keep_alive"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|TCP_KEEP_ALIVE
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|reuseAddress
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"http.netty.reuse_address"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_REUSE_ADDRESS
argument_list|,
name|NetworkUtils
operator|.
name|defaultReuseAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpSendBufferSize
operator|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.netty.tcp_send_buffer_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|TCP_SEND_BUFFER_SIZE
argument_list|,
name|TCP_DEFAULT_SEND_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpReceiveBufferSize
operator|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.netty.tcp_receive_buffer_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|TCP_RECEIVE_BUFFER_SIZE
argument_list|,
name|TCP_DEFAULT_RECEIVE_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|detailedErrorsEnabled
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|SETTING_HTTP_DETAILED_ERRORS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|defaultReceiverPredictor
init|=
literal|512
operator|*
literal|1024
decl_stmt|;
if|if
condition|(
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getDirectMemoryMax
argument_list|()
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// we can guess a better default...
name|long
name|l
init|=
call|(
name|long
call|)
argument_list|(
operator|(
literal|0.3
operator|*
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getDirectMemoryMax
argument_list|()
operator|.
name|bytes
argument_list|()
operator|)
operator|/
name|workerCount
argument_list|)
decl_stmt|;
name|defaultReceiverPredictor
operator|=
name|Math
operator|.
name|min
argument_list|(
name|defaultReceiverPredictor
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|l
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// See AdaptiveReceiveBufferSizePredictor#DEFAULT_XXX for default values in netty..., we can use higher ones for us, even fixed one
name|ByteSizeValue
name|receivePredictorMin
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.netty.receive_predictor_min"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.netty.receive_predictor_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|defaultReceiverPredictor
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ByteSizeValue
name|receivePredictorMax
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.netty.receive_predictor_max"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"http.netty.receive_predictor_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|defaultReceiverPredictor
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
operator|==
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
condition|)
block|{
name|receiveBufferSizePredictorFactory
operator|=
operator|new
name|FixedReceiveBufferSizePredictorFactory
argument_list|(
operator|(
name|int
operator|)
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|receiveBufferSizePredictorFactory
operator|=
operator|new
name|AdaptiveReceiveBufferSizePredictorFactory
argument_list|(
operator|(
name|int
operator|)
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|compression
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|SETTING_HTTP_COMPRESSION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|compressionLevel
operator|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_HTTP_COMPRESSION_LEVEL
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|this
operator|.
name|pipelining
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|SETTING_PIPELINING
argument_list|,
name|DEFAULT_SETTING_PIPELINING
argument_list|)
expr_stmt|;
name|this
operator|.
name|pipeliningMaxEvents
operator|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_PIPELINING_MAX_EVENTS
argument_list|,
name|DEFAULT_SETTING_PIPELINING_MAX_EVENTS
argument_list|)
expr_stmt|;
comment|// validate max content length
if|if
condition|(
name|maxContentLength
operator|.
name|bytes
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"maxContentLength["
operator|+
name|maxContentLength
operator|+
literal|"] set to high value, resetting it to [100mb]"
argument_list|)
expr_stmt|;
name|maxContentLength
operator|=
operator|new
name|ByteSizeValue
argument_list|(
literal|100
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|maxContentLength
operator|=
name|maxContentLength
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using max_chunk_size[{}], max_header_size[{}], max_initial_line_length[{}], max_content_length[{}], receive_predictor[{}->{}], pipelining[{}], pipelining_max_events[{}]"
argument_list|,
name|maxChunkSize
argument_list|,
name|maxHeaderSize
argument_list|,
name|maxInitialLineLength
argument_list|,
name|this
operator|.
name|maxContentLength
argument_list|,
name|receivePredictorMin
argument_list|,
name|receivePredictorMax
argument_list|,
name|pipelining
argument_list|,
name|pipeliningMaxEvents
argument_list|)
expr_stmt|;
block|}
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|this
operator|.
name|settings
return|;
block|}
annotation|@
name|Override
DECL|method|httpServerAdapter
specifier|public
name|void
name|httpServerAdapter
parameter_list|(
name|HttpServerAdapter
name|httpServerAdapter
parameter_list|)
block|{
name|this
operator|.
name|httpServerAdapter
operator|=
name|httpServerAdapter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|this
operator|.
name|serverOpenChannels
operator|=
operator|new
name|OpenChannelsHandler
argument_list|(
name|logger
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockingServer
condition|)
block|{
name|serverBootstrap
operator|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|OioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"http_server_boss"
argument_list|)
argument_list|)
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"http_server_worker"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverBootstrap
operator|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"http_server_boss"
argument_list|)
argument_list|)
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"http_server_worker"
argument_list|)
argument_list|)
argument_list|,
name|workerCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serverBootstrap
operator|.
name|setPipelineFactory
argument_list|(
name|configureServerChannelPipelineFactory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"default"
operator|.
name|equals
argument_list|(
name|tcpNoDelay
argument_list|)
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.tcpNoDelay"
argument_list|,
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|tcpNoDelay
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"default"
operator|.
name|equals
argument_list|(
name|tcpKeepAlive
argument_list|)
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.keepAlive"
argument_list|,
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|tcpKeepAlive
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpSendBufferSize
operator|!=
literal|null
operator|&&
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.sendBufferSize"
argument_list|,
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpReceiveBufferSize
operator|!=
literal|null
operator|&&
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.receiveBufferSize"
argument_list|,
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"receiveBufferSizePredictorFactory"
argument_list|,
name|receiveBufferSizePredictorFactory
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.receiveBufferSizePredictorFactory"
argument_list|,
name|receiveBufferSizePredictorFactory
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
comment|// Bind and start to accept incoming connections.
name|InetAddress
name|hostAddresses
index|[]
decl_stmt|;
try|try
block|{
name|hostAddresses
operator|=
name|networkService
operator|.
name|resolveBindHostAddress
argument_list|(
name|bindHost
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BindHttpException
argument_list|(
literal|"Failed to resolve host ["
operator|+
name|bindHost
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|InetSocketTransportAddress
argument_list|>
name|boundAddresses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|hostAddresses
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|InetAddress
name|address
range|:
name|hostAddresses
control|)
block|{
name|boundAddresses
operator|.
name|add
argument_list|(
name|bindAddress
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|InetSocketTransportAddress
name|boundAddress
init|=
name|boundAddresses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|publishAddress
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|publishPort
condition|)
block|{
name|publishPort
operator|=
name|boundAddress
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|publishAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|networkService
operator|.
name|resolvePublishHostAddress
argument_list|(
name|publishHost
argument_list|)
argument_list|,
name|publishPort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BindTransportException
argument_list|(
literal|"Failed to resolve publish address"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|boundAddress
operator|=
operator|new
name|BoundTransportAddress
argument_list|(
name|boundAddresses
operator|.
name|toArray
argument_list|(
operator|new
name|TransportAddress
index|[
name|boundAddresses
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
operator|new
name|InetSocketTransportAddress
argument_list|(
name|publishAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|bindAddress
specifier|private
name|InetSocketTransportAddress
name|bindAddress
parameter_list|(
specifier|final
name|InetAddress
name|hostAddress
parameter_list|)
block|{
name|PortsRange
name|portsRange
init|=
operator|new
name|PortsRange
argument_list|(
name|port
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|boundSocket
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|portsRange
operator|.
name|iterate
argument_list|(
operator|new
name|PortsRange
operator|.
name|PortCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onPortNumber
parameter_list|(
name|int
name|portNumber
parameter_list|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|serverChannels
init|)
block|{
name|Channel
name|channel
init|=
name|serverBootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|hostAddress
argument_list|,
name|portNumber
argument_list|)
argument_list|)
decl_stmt|;
name|serverChannels
operator|.
name|add
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|boundSocket
operator|.
name|set
argument_list|(
operator|(
name|InetSocketAddress
operator|)
name|channel
operator|.
name|getLocalAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|BindHttpException
argument_list|(
literal|"Failed to bind to ["
operator|+
name|port
operator|+
literal|"]"
argument_list|,
name|lastException
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Bound http to address {{}}"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
name|boundSocket
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InetSocketTransportAddress
argument_list|(
name|boundSocket
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
synchronized|synchronized
init|(
name|serverChannels
init|)
block|{
if|if
condition|(
name|serverChannels
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Channel
name|channel
range|:
name|serverChannels
control|)
block|{
name|channel
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
name|serverChannels
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|serverOpenChannels
operator|!=
literal|null
condition|)
block|{
name|serverOpenChannels
operator|.
name|close
argument_list|()
expr_stmt|;
name|serverOpenChannels
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|serverBootstrap
operator|!=
literal|null
condition|)
block|{
name|serverBootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
name|serverBootstrap
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|boundAddress
specifier|public
name|BoundTransportAddress
name|boundAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|boundAddress
return|;
block|}
annotation|@
name|Override
DECL|method|info
specifier|public
name|HttpInfo
name|info
parameter_list|()
block|{
name|BoundTransportAddress
name|boundTransportAddress
init|=
name|boundAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|boundTransportAddress
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|HttpInfo
argument_list|(
name|boundTransportAddress
argument_list|,
name|maxContentLength
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|stats
specifier|public
name|HttpStats
name|stats
parameter_list|()
block|{
name|OpenChannelsHandler
name|channels
init|=
name|serverOpenChannels
decl_stmt|;
return|return
operator|new
name|HttpStats
argument_list|(
name|channels
operator|==
literal|null
condition|?
literal|0
else|:
name|channels
operator|.
name|numberOfOpenChannels
argument_list|()
argument_list|,
name|channels
operator|==
literal|null
condition|?
literal|0
else|:
name|channels
operator|.
name|totalChannels
argument_list|()
argument_list|)
return|;
block|}
DECL|method|dispatchRequest
specifier|protected
name|void
name|dispatchRequest
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpChannel
name|channel
parameter_list|)
block|{
name|httpServerAdapter
operator|.
name|dispatchRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
DECL|method|exceptionCaught
specifier|protected
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ReadTimeoutException
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Connection timeout [{}]"
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
comment|// ignore
return|return;
block|}
if|if
condition|(
operator|!
name|NetworkExceptionHelper
operator|.
name|isCloseConnectionException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Caught exception while handling client http traffic, closing connection {}"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Caught exception while handling client http traffic, closing connection {}"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|configureServerChannelPipelineFactory
specifier|public
name|ChannelPipelineFactory
name|configureServerChannelPipelineFactory
parameter_list|()
block|{
return|return
operator|new
name|HttpChannelPipelineFactory
argument_list|(
name|this
argument_list|,
name|detailedErrorsEnabled
argument_list|)
return|;
block|}
DECL|class|HttpChannelPipelineFactory
specifier|protected
specifier|static
class|class
name|HttpChannelPipelineFactory
implements|implements
name|ChannelPipelineFactory
block|{
DECL|field|transport
specifier|protected
specifier|final
name|NettyHttpServerTransport
name|transport
decl_stmt|;
DECL|field|requestHandler
specifier|protected
specifier|final
name|HttpRequestHandler
name|requestHandler
decl_stmt|;
DECL|method|HttpChannelPipelineFactory
specifier|public
name|HttpChannelPipelineFactory
parameter_list|(
name|NettyHttpServerTransport
name|transport
parameter_list|,
name|boolean
name|detailedErrorsEnabled
parameter_list|)
block|{
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
name|this
operator|.
name|requestHandler
operator|=
operator|new
name|HttpRequestHandler
argument_list|(
name|transport
argument_list|,
name|detailedErrorsEnabled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPipeline
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|pipeline
init|=
name|Channels
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"openChannels"
argument_list|,
name|transport
operator|.
name|serverOpenChannels
argument_list|)
expr_stmt|;
name|HttpRequestDecoder
name|requestDecoder
init|=
operator|new
name|HttpRequestDecoder
argument_list|(
operator|(
name|int
operator|)
name|transport
operator|.
name|maxInitialLineLength
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|transport
operator|.
name|maxHeaderSize
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|transport
operator|.
name|maxChunkSize
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transport
operator|.
name|maxCumulationBufferCapacity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|transport
operator|.
name|maxCumulationBufferCapacity
operator|.
name|bytes
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|requestDecoder
operator|.
name|setMaxCumulationBufferCapacity
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requestDecoder
operator|.
name|setMaxCumulationBufferCapacity
argument_list|(
operator|(
name|int
operator|)
name|transport
operator|.
name|maxCumulationBufferCapacity
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|transport
operator|.
name|maxCompositeBufferComponents
operator|!=
operator|-
literal|1
condition|)
block|{
name|requestDecoder
operator|.
name|setMaxCumulationBufferComponents
argument_list|(
name|transport
operator|.
name|maxCompositeBufferComponents
argument_list|)
expr_stmt|;
block|}
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"decoder"
argument_list|,
name|requestDecoder
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"decoder_compress"
argument_list|,
operator|new
name|ESHttpContentDecompressor
argument_list|(
name|transport
operator|.
name|compression
argument_list|)
argument_list|)
expr_stmt|;
name|HttpChunkAggregator
name|httpChunkAggregator
init|=
operator|new
name|HttpChunkAggregator
argument_list|(
operator|(
name|int
operator|)
name|transport
operator|.
name|maxContentLength
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transport
operator|.
name|maxCompositeBufferComponents
operator|!=
operator|-
literal|1
condition|)
block|{
name|httpChunkAggregator
operator|.
name|setMaxCumulationBufferComponents
argument_list|(
name|transport
operator|.
name|maxCompositeBufferComponents
argument_list|)
expr_stmt|;
block|}
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"aggregator"
argument_list|,
name|httpChunkAggregator
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"encoder"
argument_list|,
operator|new
name|ESHttpResponseEncoder
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|transport
operator|.
name|compression
condition|)
block|{
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"encoder_compress"
argument_list|,
operator|new
name|HttpContentCompressor
argument_list|(
name|transport
operator|.
name|compressionLevel
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transport
operator|.
name|pipelining
condition|)
block|{
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"pipelining"
argument_list|,
operator|new
name|HttpPipeliningHandler
argument_list|(
name|transport
operator|.
name|pipeliningMaxEvents
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"handler"
argument_list|,
name|requestHandler
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
block|}
block|}
end_class

end_unit

