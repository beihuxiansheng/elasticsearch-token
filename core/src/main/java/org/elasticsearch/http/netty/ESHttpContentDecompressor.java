begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http.netty
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|embedder
operator|.
name|DecoderEmbedder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpContentDecompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_class
DECL|class|ESHttpContentDecompressor
specifier|public
class|class
name|ESHttpContentDecompressor
extends|extends
name|HttpContentDecompressor
block|{
DECL|field|compression
specifier|private
specifier|final
name|boolean
name|compression
decl_stmt|;
DECL|method|ESHttpContentDecompressor
specifier|public
name|ESHttpContentDecompressor
parameter_list|(
name|boolean
name|compression
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newContentDecoder
specifier|protected
name|DecoderEmbedder
argument_list|<
name|ChannelBuffer
argument_list|>
name|newContentDecoder
parameter_list|(
name|String
name|contentEncoding
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|compression
condition|)
block|{
comment|// compression is enabled so handle the request according to the headers (compressed and uncompressed)
return|return
name|super
operator|.
name|newContentDecoder
argument_list|(
name|contentEncoding
argument_list|)
return|;
block|}
else|else
block|{
comment|// if compression is disabled only allow "identity" (uncompressed) requests
if|if
condition|(
name|HttpHeaders
operator|.
name|Values
operator|.
name|IDENTITY
operator|.
name|equals
argument_list|(
name|contentEncoding
argument_list|)
condition|)
block|{
comment|// nothing to handle here
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|TransportException
argument_list|(
literal|"Support for compressed content is disabled. You can enable it with http.compression=true"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

