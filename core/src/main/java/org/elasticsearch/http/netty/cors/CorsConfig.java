begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http.netty.cors
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty
operator|.
name|cors
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Configuration for Cross-Origin Resource Sharing (CORS).  *  * This class was lifted from the Netty project:  *  https://github.com/netty/netty  */
end_comment

begin_class
DECL|class|CorsConfig
specifier|public
specifier|final
class|class
name|CorsConfig
block|{
DECL|field|origins
specifier|private
specifier|final
name|Optional
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|origins
decl_stmt|;
DECL|field|pattern
specifier|private
specifier|final
name|Optional
argument_list|<
name|Pattern
argument_list|>
name|pattern
decl_stmt|;
DECL|field|anyOrigin
specifier|private
specifier|final
name|boolean
name|anyOrigin
decl_stmt|;
DECL|field|enabled
specifier|private
specifier|final
name|boolean
name|enabled
decl_stmt|;
DECL|field|allowCredentials
specifier|private
specifier|final
name|boolean
name|allowCredentials
decl_stmt|;
DECL|field|maxAge
specifier|private
specifier|final
name|long
name|maxAge
decl_stmt|;
DECL|field|allowedRequestMethods
specifier|private
specifier|final
name|Set
argument_list|<
name|HttpMethod
argument_list|>
name|allowedRequestMethods
decl_stmt|;
DECL|field|allowedRequestHeaders
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|allowedRequestHeaders
decl_stmt|;
DECL|field|allowNullOrigin
specifier|private
specifier|final
name|boolean
name|allowNullOrigin
decl_stmt|;
DECL|field|preflightHeaders
specifier|private
specifier|final
name|Map
argument_list|<
name|CharSequence
argument_list|,
name|Callable
argument_list|<
name|?
argument_list|>
argument_list|>
name|preflightHeaders
decl_stmt|;
DECL|field|shortCircuit
specifier|private
specifier|final
name|boolean
name|shortCircuit
decl_stmt|;
DECL|method|CorsConfig
name|CorsConfig
parameter_list|(
specifier|final
name|CorsConfigBuilder
name|builder
parameter_list|)
block|{
name|origins
operator|=
name|builder
operator|.
name|origins
operator|.
name|map
argument_list|(
name|s
lambda|->
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|pattern
operator|=
name|builder
operator|.
name|pattern
expr_stmt|;
name|anyOrigin
operator|=
name|builder
operator|.
name|anyOrigin
expr_stmt|;
name|enabled
operator|=
name|builder
operator|.
name|enabled
expr_stmt|;
name|allowCredentials
operator|=
name|builder
operator|.
name|allowCredentials
expr_stmt|;
name|maxAge
operator|=
name|builder
operator|.
name|maxAge
expr_stmt|;
name|allowedRequestMethods
operator|=
name|builder
operator|.
name|requestMethods
expr_stmt|;
name|allowedRequestHeaders
operator|=
name|builder
operator|.
name|requestHeaders
expr_stmt|;
name|allowNullOrigin
operator|=
name|builder
operator|.
name|allowNullOrigin
expr_stmt|;
name|preflightHeaders
operator|=
name|builder
operator|.
name|preflightHeaders
expr_stmt|;
name|shortCircuit
operator|=
name|builder
operator|.
name|shortCircuit
expr_stmt|;
block|}
comment|/**      * Determines if support for CORS is enabled.      *      * @return {@code true} if support for CORS is enabled, false otherwise.      */
DECL|method|isCorsSupportEnabled
specifier|public
name|boolean
name|isCorsSupportEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
comment|/**      * Determines whether a wildcard origin, '*', is supported.      *      * @return {@code boolean} true if any origin is allowed.      */
DECL|method|isAnyOriginSupported
specifier|public
name|boolean
name|isAnyOriginSupported
parameter_list|()
block|{
return|return
name|anyOrigin
return|;
block|}
comment|/**      * Returns the set of allowed origins.      *      * @return {@code Set} the allowed origins.      */
DECL|method|origins
specifier|public
name|Optional
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|origins
parameter_list|()
block|{
return|return
name|origins
return|;
block|}
comment|/**      * Returns whether the input origin is allowed by this configuration.      *      * @return {@code true} if the origin is allowed, otherwise {@code false}      */
DECL|method|isOriginAllowed
specifier|public
name|boolean
name|isOriginAllowed
parameter_list|(
specifier|final
name|String
name|origin
parameter_list|)
block|{
if|if
condition|(
name|origins
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|origins
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
name|origin
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|pattern
operator|.
name|get
argument_list|()
operator|.
name|matcher
argument_list|(
name|origin
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Web browsers may set the 'Origin' request header to 'null' if a resource is loaded      * from the local file system.      *      * If isNullOriginAllowed is true then the server will response with the wildcard for the      * the CORS response header 'Access-Control-Allow-Origin'.      *      * @return {@code true} if a 'null' origin should be supported.      */
DECL|method|isNullOriginAllowed
specifier|public
name|boolean
name|isNullOriginAllowed
parameter_list|()
block|{
return|return
name|allowNullOrigin
return|;
block|}
comment|/**      * Determines if cookies are supported for CORS requests.      *      * By default cookies are not included in CORS requests but if isCredentialsAllowed returns      * true cookies will be added to CORS requests. Setting this value to true will set the      * CORS 'Access-Control-Allow-Credentials' response header to true.      *      * Please note that cookie support needs to be enabled on the client side as well.      * The client needs to opt-in to send cookies by calling:      *<pre>      * xhr.withCredentials = true;      *</pre>      * The default value for 'withCredentials' is false in which case no cookies are sent.      * Settning this to true will included cookies in cross origin requests.      *      * @return {@code true} if cookies are supported.      */
DECL|method|isCredentialsAllowed
specifier|public
name|boolean
name|isCredentialsAllowed
parameter_list|()
block|{
return|return
name|allowCredentials
return|;
block|}
comment|/**      * Gets the maxAge setting.      *      * When making a preflight request the client has to perform two request with can be inefficient.      * This setting will set the CORS 'Access-Control-Max-Age' response header and enables the      * caching of the preflight response for the specified time. During this time no preflight      * request will be made.      *      * @return {@code long} the time in seconds that a preflight request may be cached.      */
DECL|method|maxAge
specifier|public
name|long
name|maxAge
parameter_list|()
block|{
return|return
name|maxAge
return|;
block|}
comment|/**      * Returns the allowed set of Request Methods. The Http methods that should be returned in the      * CORS 'Access-Control-Request-Method' response header.      *      * @return {@code Set} of {@link HttpMethod}s that represent the allowed Request Methods.      */
DECL|method|allowedRequestMethods
specifier|public
name|Set
argument_list|<
name|HttpMethod
argument_list|>
name|allowedRequestMethods
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|allowedRequestMethods
argument_list|)
return|;
block|}
comment|/**      * Returns the allowed set of Request Headers.      *      * The header names returned from this method will be used to set the CORS      * 'Access-Control-Allow-Headers' response header.      *      * @return {@code Set<String>} of strings that represent the allowed Request Headers.      */
DECL|method|allowedRequestHeaders
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|allowedRequestHeaders
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|allowedRequestHeaders
argument_list|)
return|;
block|}
comment|/**      * Returns HTTP response headers that should be added to a CORS preflight response.      *      * @return {@link HttpHeaders} the HTTP response headers to be added.      */
DECL|method|preflightResponseHeaders
specifier|public
name|HttpHeaders
name|preflightResponseHeaders
parameter_list|()
block|{
if|if
condition|(
name|preflightHeaders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|HttpHeaders
operator|.
name|EMPTY_HEADERS
return|;
block|}
specifier|final
name|HttpHeaders
name|preflightHeaders
init|=
operator|new
name|DefaultHttpHeaders
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CharSequence
argument_list|,
name|Callable
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|this
operator|.
name|preflightHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Object
name|value
init|=
name|getValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Iterable
condition|)
block|{
name|preflightHeaders
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|preflightHeaders
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|preflightHeaders
return|;
block|}
comment|/**      * Determines whether a CORS request should be rejected if it's invalid before being      * further processing.      *      * CORS headers are set after a request is processed. This may not always be desired      * and this setting will check that the Origin is valid and if it is not valid no      * further processing will take place, and a error will be returned to the calling client.      *      * @return {@code true} if a CORS request should short-curcuit upon receiving an invalid Origin header.      */
DECL|method|isShortCircuit
specifier|public
name|boolean
name|isShortCircuit
parameter_list|()
block|{
return|return
name|shortCircuit
return|;
block|}
DECL|method|getValue
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getValue
parameter_list|(
specifier|final
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
block|{
try|try
block|{
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not generate value for callable ["
operator|+
name|callable
operator|+
literal|']'
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CorsConfig[enabled="
operator|+
name|enabled
operator|+
literal|", origins="
operator|+
name|origins
operator|+
literal|", anyOrigin="
operator|+
name|anyOrigin
operator|+
literal|", isCredentialsAllowed="
operator|+
name|allowCredentials
operator|+
literal|", maxAge="
operator|+
name|maxAge
operator|+
literal|", allowedRequestMethods="
operator|+
name|allowedRequestMethods
operator|+
literal|", allowedRequestHeaders="
operator|+
name|allowedRequestHeaders
operator|+
literal|", preflightHeaders="
operator|+
name|preflightHeaders
operator|+
literal|']'
return|;
block|}
block|}
end_class

end_unit

