begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Build
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|GenericAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|InternalClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|MasterNodeChangePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|NodeConnectionsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|index
operator|.
name|MappingUpdatedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaDataIndexUpgradeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommandRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|Lifecycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|LifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModulesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|BoundTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|NoneDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|UnicastHostsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|UnicastZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|MetaStateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|HierarchyCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|cluster
operator|.
name|IndicesClusterStateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|query
operator|.
name|IndicesQueriesRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|PeerRecoverySourceService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|PeerRecoveryTargetService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|store
operator|.
name|IndicesStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|ttl
operator|.
name|IndicesTTLService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|MonitorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|service
operator|.
name|NodeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ActionPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|AnalysisPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ClusterPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|DiscoveryPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|IngestPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|MapperPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|MetaDataUpgrader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|NetworkPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|PluginsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|RepositoryPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ScriptPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|SearchPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoriesModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchExtRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchRequestParsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotShardsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskResultsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ExecutorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tribe
operator|.
name|TribeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|ResourceWatcherService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryModule
operator|.
name|DISCOVERY_HOSTS_PROVIDER_SETTING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryModule
operator|.
name|DISCOVERY_TYPE_SETTING
import|;
end_import

begin_comment
comment|/**  * A node represent a node within a cluster (<tt>cluster.name</tt>). The {@link #client()} can be used  * in order to use a {@link Client} to perform actions/operations against the cluster.  */
end_comment

begin_class
DECL|class|Node
specifier|public
class|class
name|Node
implements|implements
name|Closeable
block|{
DECL|field|WRITE_PORTS_FIELD_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|WRITE_PORTS_FIELD_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"node.portsfile"
argument_list|,
literal|false
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|NODE_DATA_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|NODE_DATA_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"node.data"
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|NODE_MASTER_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|NODE_MASTER_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"node.master"
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|NODE_INGEST_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|NODE_INGEST_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"node.ingest"
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
comment|/**     * controls whether the node is allowed to persist things like metadata to disk     * Note that this does not control whether the node stores actual indices (see     * {@link #NODE_DATA_SETTING}). However, if this is false, {@link #NODE_DATA_SETTING}     * and {@link #NODE_MASTER_SETTING} must also be false.     *     */
DECL|field|NODE_LOCAL_STORAGE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|NODE_LOCAL_STORAGE_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"node.local_storage"
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|NODE_NAME_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|NODE_NAME_SETTING
init|=
name|Setting
operator|.
name|simpleString
argument_list|(
literal|"node.name"
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|NODE_ATTRIBUTES
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Settings
argument_list|>
name|NODE_ATTRIBUTES
init|=
name|Setting
operator|.
name|groupSetting
argument_list|(
literal|"node.attr."
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|BREAKER_TYPE_KEY
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|BREAKER_TYPE_KEY
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"indices.breaker.type"
argument_list|,
literal|"hierarchy"
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
block|{
switch|switch
condition|(
name|s
condition|)
block|{
case|case
literal|"hierarchy"
case|:
case|case
literal|"none"
case|:
return|return
name|s
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"indices.breaker.type must be one of [hierarchy, none] but was: "
operator|+
name|s
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
comment|/**      * Adds a default node name to the given setting, if it doesn't already exist      * @return the given setting if node name is already set, or a new copy with a default node name set.      */
DECL|method|addNodeNameIfNeeded
specifier|public
specifier|static
specifier|final
name|Settings
name|addNodeNameIfNeeded
parameter_list|(
name|Settings
name|settings
parameter_list|,
specifier|final
name|String
name|nodeId
parameter_list|)
block|{
if|if
condition|(
name|NODE_NAME_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
return|return
name|settings
return|;
block|}
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|NODE_NAME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|nodeId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|field|CLIENT_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|CLIENT_TYPE
init|=
literal|"node"
decl_stmt|;
DECL|field|lifecycle
specifier|private
specifier|final
name|Lifecycle
name|lifecycle
init|=
operator|new
name|Lifecycle
argument_list|()
decl_stmt|;
DECL|field|injector
specifier|private
specifier|final
name|Injector
name|injector
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
DECL|field|nodeEnvironment
specifier|private
specifier|final
name|NodeEnvironment
name|nodeEnvironment
decl_stmt|;
DECL|field|pluginsService
specifier|private
specifier|final
name|PluginsService
name|pluginsService
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|NodeClient
name|client
decl_stmt|;
DECL|field|pluginLifecycleComponents
specifier|private
specifier|final
name|Collection
argument_list|<
name|LifecycleComponent
argument_list|>
name|pluginLifecycleComponents
decl_stmt|;
comment|/**      * Constructs a node with the given settings.      *      * @param preparedSettings Base settings to configure the node with      */
DECL|method|Node
specifier|public
name|Node
parameter_list|(
name|Settings
name|preparedSettings
parameter_list|)
block|{
name|this
argument_list|(
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|preparedSettings
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|Node
specifier|public
name|Node
parameter_list|(
name|Environment
name|environment
parameter_list|)
block|{
name|this
argument_list|(
name|environment
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Node
specifier|protected
name|Node
parameter_list|(
specifier|final
name|Environment
name|environment
parameter_list|,
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|classpathPlugins
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Closeable
argument_list|>
name|resourcesToClose
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// register everything we need to release in the case of an error
name|boolean
name|success
init|=
literal|false
decl_stmt|;
block|{
comment|// use temp logger just to say we are starting. we can't use it later on because the node name might not be set
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|Node
operator|.
name|class
argument_list|,
name|NODE_NAME_SETTING
operator|.
name|get
argument_list|(
name|environment
operator|.
name|settings
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"initializing ..."
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Settings
name|tmpSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|environment
operator|.
name|settings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Client
operator|.
name|CLIENT_TYPE_SETTING_S
operator|.
name|getKey
argument_list|()
argument_list|,
name|CLIENT_TYPE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|tmpSettings
operator|=
name|TribeService
operator|.
name|processSettings
argument_list|(
name|tmpSettings
argument_list|)
expr_stmt|;
comment|// create the node environment as soon as possible, to recover the node id and enable logging
try|try
block|{
name|nodeEnvironment
operator|=
operator|new
name|NodeEnvironment
argument_list|(
name|tmpSettings
argument_list|,
name|environment
argument_list|)
expr_stmt|;
name|resourcesToClose
operator|.
name|add
argument_list|(
name|nodeEnvironment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to created node environment"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|hadPredefinedNodeName
init|=
name|NODE_NAME_SETTING
operator|.
name|exists
argument_list|(
name|tmpSettings
argument_list|)
decl_stmt|;
name|tmpSettings
operator|=
name|addNodeNameIfNeeded
argument_list|(
name|tmpSettings
argument_list|,
name|nodeEnvironment
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|Node
operator|.
name|class
argument_list|,
name|tmpSettings
argument_list|)
decl_stmt|;
if|if
condition|(
name|hadPredefinedNodeName
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"node name [{}] derived from node ID; set [{}] to override"
argument_list|,
name|NODE_NAME_SETTING
operator|.
name|get
argument_list|(
name|tmpSettings
argument_list|)
argument_list|,
name|NODE_NAME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|JvmInfo
name|jvmInfo
init|=
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"version[{}], pid[{}], build[{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]"
argument_list|,
name|displayVersion
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
name|Build
operator|.
name|CURRENT
operator|.
name|isSnapshot
argument_list|()
argument_list|)
argument_list|,
name|jvmInfo
operator|.
name|pid
argument_list|()
argument_list|,
name|Build
operator|.
name|CURRENT
operator|.
name|shortHash
argument_list|()
argument_list|,
name|Build
operator|.
name|CURRENT
operator|.
name|date
argument_list|()
argument_list|,
name|Constants
operator|.
name|OS_NAME
argument_list|,
name|Constants
operator|.
name|OS_VERSION
argument_list|,
name|Constants
operator|.
name|OS_ARCH
argument_list|,
name|Constants
operator|.
name|JVM_VENDOR
argument_list|,
name|Constants
operator|.
name|JVM_NAME
argument_list|,
name|Constants
operator|.
name|JAVA_VERSION
argument_list|,
name|Constants
operator|.
name|JVM_VERSION
argument_list|)
expr_stmt|;
name|warnIfPreRelease
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
name|Build
operator|.
name|CURRENT
operator|.
name|isSnapshot
argument_list|()
argument_list|,
name|logger
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"using config [{}], data [{}], logs [{}], plugins [{}]"
argument_list|,
name|environment
operator|.
name|configFile
argument_list|()
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|environment
operator|.
name|dataFiles
argument_list|()
argument_list|)
argument_list|,
name|environment
operator|.
name|logsFile
argument_list|()
argument_list|,
name|environment
operator|.
name|pluginsFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|pluginsService
operator|=
operator|new
name|PluginsService
argument_list|(
name|tmpSettings
argument_list|,
name|environment
operator|.
name|modulesFile
argument_list|()
argument_list|,
name|environment
operator|.
name|pluginsFile
argument_list|()
argument_list|,
name|classpathPlugins
argument_list|)
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|pluginsService
operator|.
name|updatedSettings
argument_list|()
expr_stmt|;
comment|// create the environment based on the finalized (processed) view of the settings
comment|// this is just to makes sure that people get the same settings, no matter where they ask them from
name|this
operator|.
name|environment
operator|=
operator|new
name|Environment
argument_list|(
name|this
operator|.
name|settings
argument_list|)
expr_stmt|;
name|Environment
operator|.
name|assertEquivalent
argument_list|(
name|environment
argument_list|,
name|this
operator|.
name|environment
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ExecutorBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|executorBuilders
init|=
name|pluginsService
operator|.
name|getExecutorBuilders
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|ThreadPool
name|threadPool
init|=
operator|new
name|ThreadPool
argument_list|(
name|settings
argument_list|,
name|executorBuilders
operator|.
name|toArray
argument_list|(
operator|new
name|ExecutorBuilder
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|resourcesToClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// adds the context to the DeprecationLogger so that it does not need to be injected everywhere
name|DeprecationLogger
operator|.
name|setThreadContext
argument_list|(
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
expr_stmt|;
name|resourcesToClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|DeprecationLogger
operator|.
name|removeThreadContext
argument_list|(
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|additionalSettings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|additionalSettingsFilter
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|additionalSettings
operator|.
name|addAll
argument_list|(
name|pluginsService
operator|.
name|getPluginSettings
argument_list|()
argument_list|)
expr_stmt|;
name|additionalSettingsFilter
operator|.
name|addAll
argument_list|(
name|pluginsService
operator|.
name|getPluginSettingsFilter
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ExecutorBuilder
argument_list|<
name|?
argument_list|>
name|builder
range|:
name|threadPool
operator|.
name|builders
argument_list|()
control|)
block|{
name|additionalSettings
operator|.
name|addAll
argument_list|(
name|builder
operator|.
name|getRegisteredSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|client
operator|=
operator|new
name|NodeClient
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
specifier|final
name|ResourceWatcherService
name|resourceWatcherService
init|=
operator|new
name|ResourceWatcherService
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
specifier|final
name|ScriptModule
name|scriptModule
init|=
name|ScriptModule
operator|.
name|create
argument_list|(
name|settings
argument_list|,
name|this
operator|.
name|environment
argument_list|,
name|resourceWatcherService
argument_list|,
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|ScriptPlugin
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|AnalysisModule
name|analysisModule
init|=
operator|new
name|AnalysisModule
argument_list|(
name|this
operator|.
name|environment
argument_list|,
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|AnalysisPlugin
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|additionalSettings
operator|.
name|addAll
argument_list|(
name|scriptModule
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
comment|// this is as early as we can validate settings at this point. we already pass them to ScriptModule as well as ThreadPool
comment|// so we might be late here already
specifier|final
name|SettingsModule
name|settingsModule
init|=
operator|new
name|SettingsModule
argument_list|(
name|this
operator|.
name|settings
argument_list|,
name|additionalSettings
argument_list|,
name|additionalSettingsFilter
argument_list|)
decl_stmt|;
name|scriptModule
operator|.
name|registerClusterSettingsListeners
argument_list|(
name|settingsModule
operator|.
name|getClusterSettings
argument_list|()
argument_list|)
expr_stmt|;
name|resourcesToClose
operator|.
name|add
argument_list|(
name|resourceWatcherService
argument_list|)
expr_stmt|;
specifier|final
name|NetworkService
name|networkService
init|=
operator|new
name|NetworkService
argument_list|(
name|settings
argument_list|,
name|getCustomNameResolvers
argument_list|(
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|DiscoveryPlugin
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ClusterService
name|clusterService
init|=
operator|new
name|ClusterService
argument_list|(
name|settings
argument_list|,
name|settingsModule
operator|.
name|getClusterSettings
argument_list|()
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|add
argument_list|(
name|scriptModule
operator|.
name|getScriptService
argument_list|()
argument_list|)
expr_stmt|;
name|resourcesToClose
operator|.
name|add
argument_list|(
name|clusterService
argument_list|)
expr_stmt|;
specifier|final
name|TribeService
name|tribeService
init|=
operator|new
name|TribeService
argument_list|(
name|settings
argument_list|,
name|clusterService
argument_list|,
name|nodeEnvironment
operator|.
name|nodeId
argument_list|()
argument_list|,
name|s
lambda|->
name|newTribeClientNode
argument_list|(
name|s
argument_list|,
name|classpathPlugins
argument_list|)
argument_list|)
decl_stmt|;
name|resourcesToClose
operator|.
name|add
argument_list|(
name|tribeService
argument_list|)
expr_stmt|;
specifier|final
name|IngestService
name|ingestService
init|=
operator|new
name|IngestService
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|this
operator|.
name|environment
argument_list|,
name|scriptModule
operator|.
name|getScriptService
argument_list|()
argument_list|,
name|analysisModule
operator|.
name|getAnalysisRegistry
argument_list|()
argument_list|,
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|IngestPlugin
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ClusterInfoService
name|clusterInfoService
init|=
name|newClusterInfoService
argument_list|(
name|settings
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|,
name|client
argument_list|)
decl_stmt|;
name|ModulesBuilder
name|modules
init|=
operator|new
name|ModulesBuilder
argument_list|()
decl_stmt|;
comment|// plugin modules must be added here, before others or we can get crazy injection errors...
for|for
control|(
name|Module
name|pluginModule
range|:
name|pluginsService
operator|.
name|createGuiceModules
argument_list|()
control|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|pluginModule
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MonitorService
name|monitorService
init|=
operator|new
name|MonitorService
argument_list|(
name|settings
argument_list|,
name|nodeEnvironment
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|NodeModule
argument_list|(
name|this
argument_list|,
name|monitorService
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterModule
name|clusterModule
init|=
operator|new
name|ClusterModule
argument_list|(
name|settings
argument_list|,
name|clusterService
argument_list|,
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|ClusterPlugin
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|modules
operator|.
name|add
argument_list|(
name|clusterModule
argument_list|)
expr_stmt|;
name|IndicesModule
name|indicesModule
init|=
operator|new
name|IndicesModule
argument_list|(
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|MapperPlugin
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|modules
operator|.
name|add
argument_list|(
name|indicesModule
argument_list|)
expr_stmt|;
name|SearchModule
name|searchModule
init|=
operator|new
name|SearchModule
argument_list|(
name|settings
argument_list|,
literal|false
argument_list|,
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|SearchPlugin
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ActionModule
name|actionModule
init|=
operator|new
name|ActionModule
argument_list|(
name|DiscoveryNode
operator|.
name|isIngestNode
argument_list|(
name|settings
argument_list|)
argument_list|,
literal|false
argument_list|,
name|settings
argument_list|,
name|clusterModule
operator|.
name|getIndexNameExpressionResolver
argument_list|()
argument_list|,
name|settingsModule
operator|.
name|getClusterSettings
argument_list|()
argument_list|,
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|ActionPlugin
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|modules
operator|.
name|add
argument_list|(
name|actionModule
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|GatewayModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|RepositoriesModule
argument_list|(
name|this
operator|.
name|environment
argument_list|,
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|RepositoryPlugin
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CircuitBreakerService
name|circuitBreakerService
init|=
name|createCircuitBreakerService
argument_list|(
name|settingsModule
operator|.
name|getSettings
argument_list|()
argument_list|,
name|settingsModule
operator|.
name|getClusterSettings
argument_list|()
argument_list|)
decl_stmt|;
name|resourcesToClose
operator|.
name|add
argument_list|(
name|circuitBreakerService
argument_list|)
expr_stmt|;
name|BigArrays
name|bigArrays
init|=
name|createBigArrays
argument_list|(
name|settings
argument_list|,
name|circuitBreakerService
argument_list|)
decl_stmt|;
name|resourcesToClose
operator|.
name|add
argument_list|(
name|bigArrays
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
name|settingsModule
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|>
name|namedWriteables
init|=
name|Stream
operator|.
name|of
argument_list|(
name|NetworkModule
operator|.
name|getNamedWriteables
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
name|indicesModule
operator|.
name|getNamedWriteables
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
name|searchModule
operator|.
name|getNamedWriteables
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|Plugin
operator|.
name|class
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getNamedWriteables
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|NamedWriteableRegistry
name|namedWriteableRegistry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|namedWriteables
argument_list|)
decl_stmt|;
specifier|final
name|MetaStateService
name|metaStateService
init|=
operator|new
name|MetaStateService
argument_list|(
name|settings
argument_list|,
name|nodeEnvironment
argument_list|)
decl_stmt|;
specifier|final
name|IndicesService
name|indicesService
init|=
operator|new
name|IndicesService
argument_list|(
name|settings
argument_list|,
name|pluginsService
argument_list|,
name|nodeEnvironment
argument_list|,
name|settingsModule
operator|.
name|getClusterSettings
argument_list|()
argument_list|,
name|analysisModule
operator|.
name|getAnalysisRegistry
argument_list|()
argument_list|,
name|searchModule
operator|.
name|getQueryParserRegistry
argument_list|()
argument_list|,
name|clusterModule
operator|.
name|getIndexNameExpressionResolver
argument_list|()
argument_list|,
name|indicesModule
operator|.
name|getMapperRegistry
argument_list|()
argument_list|,
name|namedWriteableRegistry
argument_list|,
name|threadPool
argument_list|,
name|settingsModule
operator|.
name|getIndexScopedSettings
argument_list|()
argument_list|,
name|circuitBreakerService
argument_list|,
name|bigArrays
argument_list|,
name|scriptModule
operator|.
name|getScriptService
argument_list|()
argument_list|,
name|clusterService
argument_list|,
name|client
argument_list|,
name|metaStateService
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|pluginComponents
init|=
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|Plugin
operator|.
name|class
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|p
lambda|->
name|p
operator|.
name|createComponents
argument_list|(
name|client
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|,
name|resourceWatcherService
argument_list|,
name|scriptModule
operator|.
name|getScriptService
argument_list|()
argument_list|,
name|searchModule
operator|.
name|getSearchRequestParsers
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|UnaryOperator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|MetaData
operator|.
name|Custom
argument_list|>
argument_list|>
argument_list|>
name|customMetaDataUpgraders
init|=
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|Plugin
operator|.
name|class
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Plugin
operator|::
name|getCustomMetaDataUpgrader
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|NetworkModule
name|networkModule
init|=
operator|new
name|NetworkModule
argument_list|(
name|settings
argument_list|,
literal|false
argument_list|,
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|NetworkPlugin
operator|.
name|class
argument_list|)
argument_list|,
name|threadPool
argument_list|,
name|bigArrays
argument_list|,
name|circuitBreakerService
argument_list|,
name|namedWriteableRegistry
argument_list|,
name|networkService
argument_list|)
decl_stmt|;
specifier|final
name|MetaDataUpgrader
name|metaDataUpgrader
init|=
operator|new
name|MetaDataUpgrader
argument_list|(
name|customMetaDataUpgraders
argument_list|)
decl_stmt|;
specifier|final
name|Transport
name|transport
init|=
name|networkModule
operator|.
name|getTransportSupplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|TransportService
name|transportService
init|=
name|newTransportService
argument_list|(
name|settings
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|,
name|networkModule
operator|.
name|getTransportInterceptor
argument_list|()
argument_list|,
name|settingsModule
operator|.
name|getClusterSettings
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Consumer
argument_list|<
name|Binder
argument_list|>
name|httpBind
decl_stmt|;
if|if
condition|(
name|networkModule
operator|.
name|isHttpEnabled
argument_list|()
condition|)
block|{
name|HttpServerTransport
name|httpServerTransport
init|=
name|networkModule
operator|.
name|getHttpServerTransportSupplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|HttpServer
name|httpServer
init|=
operator|new
name|HttpServer
argument_list|(
name|settings
argument_list|,
name|httpServerTransport
argument_list|,
name|actionModule
operator|.
name|getRestController
argument_list|()
argument_list|,
name|client
argument_list|,
name|circuitBreakerService
argument_list|)
decl_stmt|;
name|httpBind
operator|=
name|b
lambda|->
block|{
name|b
operator|.
name|bind
argument_list|(
name|HttpServer
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|httpServer
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|HttpServerTransport
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|httpServerTransport
argument_list|)
expr_stmt|;
block|}
expr_stmt|;
block|}
else|else
block|{
name|httpBind
operator|=
name|b
lambda|->
block|{
name|b
operator|.
name|bind
argument_list|(
name|HttpServer
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
expr_stmt|;
block|}
specifier|final
name|DiscoveryModule
name|discoveryModule
init|=
operator|new
name|DiscoveryModule
argument_list|(
name|this
operator|.
name|settings
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|networkService
argument_list|,
name|clusterService
argument_list|,
name|hostsProvider
lambda|->
name|newZenPing
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|hostsProvider
argument_list|)
argument_list|,
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|DiscoveryPlugin
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|pluginsService
operator|.
name|processModules
argument_list|(
name|modules
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
name|b
lambda|->
block|{
name|b
operator|.
name|bind
argument_list|(
name|IndicesQueriesRegistry
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|searchModule
operator|.
name|getQueryParserRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|SearchRequestParsers
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|searchModule
operator|.
name|getSearchRequestParsers
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|SearchExtRegistry
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|searchModule
operator|.
name|getSearchExtRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|PluginsService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|pluginsService
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|Client
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|NodeClient
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|Environment
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|this
operator|.
name|environment
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|nodeEnvironment
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|TribeService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|tribeService
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|ResourceWatcherService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|resourceWatcherService
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|CircuitBreakerService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|circuitBreakerService
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|BigArrays
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|bigArrays
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|ScriptService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|scriptModule
operator|.
name|getScriptService
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|AnalysisRegistry
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|analysisModule
operator|.
name|getAnalysisRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|IngestService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|ingestService
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|NamedWriteableRegistry
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|namedWriteableRegistry
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|MetaDataUpgrader
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|metaDataUpgrader
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|MetaStateService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|metaStateService
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|indicesService
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|SearchService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|newSearchService
argument_list|(
name|clusterService
argument_list|,
name|indicesService
argument_list|,
name|threadPool
argument_list|,
name|scriptModule
operator|.
name|getScriptService
argument_list|()
argument_list|,
name|bigArrays
argument_list|,
name|searchModule
operator|.
name|getFetchPhase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|Transport
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|NetworkService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|networkService
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|AllocationCommandRegistry
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|NetworkModule
operator|.
name|getAllocationCommandRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|UpdateHelper
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|UpdateHelper
argument_list|(
name|settings
argument_list|,
name|scriptModule
operator|.
name|getScriptService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|MetaDataIndexUpgradeService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|MetaDataIndexUpgradeService
argument_list|(
name|settings
argument_list|,
name|indicesModule
operator|.
name|getMapperRegistry
argument_list|()
argument_list|,
name|settingsModule
operator|.
name|getIndexScopedSettings
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|ClusterInfoService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|clusterInfoService
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|Discovery
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|discoveryModule
operator|.
name|getDiscovery
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|RecoverySettings
name|recoverySettings
init|=
operator|new
name|RecoverySettings
argument_list|(
name|settings
argument_list|,
name|settingsModule
operator|.
name|getClusterSettings
argument_list|()
argument_list|)
decl_stmt|;
name|processRecoverySettings
argument_list|(
name|settingsModule
operator|.
name|getClusterSettings
argument_list|()
argument_list|,
name|recoverySettings
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|PeerRecoverySourceService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|PeerRecoverySourceService
argument_list|(
name|settings
argument_list|,
name|transportService
argument_list|,
name|indicesService
argument_list|,
name|recoverySettings
argument_list|,
name|clusterService
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|PeerRecoveryTargetService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|PeerRecoveryTargetService
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|recoverySettings
argument_list|,
name|clusterService
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|httpBind
operator|.
name|accept
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|pluginComponents
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|b
operator|.
name|bind
argument_list|(
operator|(
name|Class
operator|)
name|p
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|toInstance
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|injector
operator|=
name|modules
operator|.
name|createInjector
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|LifecycleComponent
argument_list|>
name|pluginLifecycleComponents
init|=
name|pluginComponents
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|instanceof
name|LifecycleComponent
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
operator|(
name|LifecycleComponent
operator|)
name|p
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|pluginLifecycleComponents
operator|.
name|addAll
argument_list|(
name|pluginsService
operator|.
name|getGuiceServiceClasses
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|injector
operator|::
name|getInstance
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resourcesToClose
operator|.
name|addAll
argument_list|(
name|pluginLifecycleComponents
argument_list|)
expr_stmt|;
name|this
operator|.
name|pluginLifecycleComponents
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|pluginLifecycleComponents
argument_list|)
expr_stmt|;
name|client
operator|.
name|initialize
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
operator|new
name|Key
argument_list|<
name|Map
argument_list|<
name|GenericAction
argument_list|,
name|TransportAction
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"initialized"
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to bind service"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|resourcesToClose
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// visible for testing
DECL|method|warnIfPreRelease
specifier|static
name|void
name|warnIfPreRelease
parameter_list|(
specifier|final
name|Version
name|version
parameter_list|,
specifier|final
name|boolean
name|isSnapshot
parameter_list|,
specifier|final
name|Logger
name|logger
parameter_list|)
block|{
if|if
condition|(
operator|!
name|version
operator|.
name|isRelease
argument_list|()
operator|||
name|isSnapshot
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"version [{}] is a pre-release version of Elasticsearch and is not suitable for production"
argument_list|,
name|displayVersion
argument_list|(
name|version
argument_list|,
name|isSnapshot
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|displayVersion
specifier|private
specifier|static
name|String
name|displayVersion
parameter_list|(
specifier|final
name|Version
name|version
parameter_list|,
specifier|final
name|boolean
name|isSnapshot
parameter_list|)
block|{
return|return
name|version
operator|+
operator|(
name|isSnapshot
condition|?
literal|"-SNAPSHOT"
else|:
literal|""
operator|)
return|;
block|}
DECL|method|newTransportService
specifier|protected
name|TransportService
name|newTransportService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Transport
name|transport
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportInterceptor
name|interceptor
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|)
block|{
return|return
operator|new
name|TransportService
argument_list|(
name|settings
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|,
name|interceptor
argument_list|,
name|clusterSettings
argument_list|)
return|;
block|}
DECL|method|processRecoverySettings
specifier|protected
name|void
name|processRecoverySettings
parameter_list|(
name|ClusterSettings
name|clusterSettings
parameter_list|,
name|RecoverySettings
name|recoverySettings
parameter_list|)
block|{
comment|// Noop in production, overridden by tests
block|}
comment|/**      * The settings that were used to create the node.      */
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|this
operator|.
name|settings
return|;
block|}
comment|/**      * A client that can be used to execute actions (operations) against the cluster.      */
DECL|method|client
specifier|public
name|Client
name|client
parameter_list|()
block|{
return|return
name|client
return|;
block|}
comment|/**      * Returns the environment of the node      */
DECL|method|getEnvironment
specifier|public
name|Environment
name|getEnvironment
parameter_list|()
block|{
return|return
name|environment
return|;
block|}
comment|/**      * Returns the {@link NodeEnvironment} instance of this node      */
DECL|method|getNodeEnvironment
specifier|public
name|NodeEnvironment
name|getNodeEnvironment
parameter_list|()
block|{
return|return
name|nodeEnvironment
return|;
block|}
comment|/**      * Start the node. If the node is already started, this method is no-op.      */
DECL|method|start
specifier|public
name|Node
name|start
parameter_list|()
throws|throws
name|NodeValidationException
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|moveToStarted
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|Node
operator|.
name|class
argument_list|,
name|NODE_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"starting ..."
argument_list|)
expr_stmt|;
comment|// hack around dependency injection problem (for now...)
name|injector
operator|.
name|getInstance
argument_list|(
name|Discovery
operator|.
name|class
argument_list|)
operator|.
name|setAllocationService
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|AllocationService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|pluginLifecycleComponents
operator|.
name|forEach
argument_list|(
name|LifecycleComponent
operator|::
name|start
argument_list|)
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|MappingUpdatedAction
operator|.
name|class
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesClusterStateService
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesTTLService
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|SnapshotsService
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|SnapshotShardsService
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|RoutingService
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|SearchService
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|MonitorService
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|RestController
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ClusterService
name|clusterService
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NodeConnectionsService
name|nodeConnectionsService
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|NodeConnectionsService
operator|.
name|class
argument_list|)
decl_stmt|;
name|nodeConnectionsService
operator|.
name|start
argument_list|()
expr_stmt|;
name|clusterService
operator|.
name|setNodeConnectionsService
argument_list|(
name|nodeConnectionsService
argument_list|)
expr_stmt|;
comment|// TODO hack around circular dependencies problems
name|injector
operator|.
name|getInstance
argument_list|(
name|GatewayAllocator
operator|.
name|class
argument_list|)
operator|.
name|setReallocation
argument_list|(
name|clusterService
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|RoutingService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|ResourceWatcherService
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|GatewayService
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Discovery
name|discovery
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|Discovery
operator|.
name|class
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|addInitialStateBlock
argument_list|(
name|discovery
operator|.
name|getDiscoverySettings
argument_list|()
operator|.
name|getNoMasterBlock
argument_list|()
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|setClusterStatePublisher
argument_list|(
name|discovery
operator|::
name|publish
argument_list|)
expr_stmt|;
comment|// start before the cluster service since it adds/removes initial Cluster state blocks
specifier|final
name|TribeService
name|tribeService
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|TribeService
operator|.
name|class
argument_list|)
decl_stmt|;
name|tribeService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Start the transport service now so the publish address will be added to the local disco node in ClusterService
name|TransportService
name|transportService
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|getTaskManager
argument_list|()
operator|.
name|setTaskResultsService
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|TaskResultsService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|validateNodeBeforeAcceptingRequests
argument_list|(
name|settings
argument_list|,
name|transportService
operator|.
name|boundAddress
argument_list|()
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|localNode
init|=
name|DiscoveryNode
operator|.
name|createLocal
argument_list|(
name|settings
argument_list|,
name|transportService
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|)
operator|.
name|nodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO: need to find a cleaner way to start/construct a service with some initial parameters,
comment|// playing nice with the life cycle interfaces
name|clusterService
operator|.
name|setLocalNode
argument_list|(
name|localNode
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|setLocalNode
argument_list|(
name|localNode
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|add
argument_list|(
name|transportService
operator|.
name|getTaskManager
argument_list|()
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start after cluster service so the local disco is known
name|discovery
operator|.
name|start
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
name|discovery
operator|.
name|startInitialJoin
argument_list|()
expr_stmt|;
comment|// tribe nodes don't have a master so we shouldn't register an observer
if|if
condition|(
name|DiscoverySettings
operator|.
name|INITIAL_STATE_TIMEOUT_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|millis
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|ThreadPool
name|thread
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClusterStateObserver
name|observer
init|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
literal|null
argument_list|,
name|logger
argument_list|,
name|thread
operator|.
name|getThreadContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|observer
operator|.
name|observedState
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
operator|==
literal|null
condition|)
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"timed out while waiting for initial discovery state - timeout: {}"
argument_list|,
name|DiscoverySettings
operator|.
name|INITIAL_STATE_TIMEOUT_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|MasterNodeChangePredicate
operator|.
name|INSTANCE
argument_list|,
name|DiscoverySettings
operator|.
name|INITIAL_STATE_TIMEOUT_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchTimeoutException
argument_list|(
literal|"Interrupted while waiting for initial discovery state"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|NetworkModule
operator|.
name|HTTP_ENABLED
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServer
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// start nodes now, after the http server, because it may take some time
name|tribeService
operator|.
name|startNodes
argument_list|()
expr_stmt|;
if|if
condition|(
name|WRITE_PORTS_FIELD_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
if|if
condition|(
name|NetworkModule
operator|.
name|HTTP_ENABLED
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|HttpServerTransport
name|http
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServerTransport
operator|.
name|class
argument_list|)
decl_stmt|;
name|writePortsFile
argument_list|(
literal|"http"
argument_list|,
name|http
operator|.
name|boundAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TransportService
name|transport
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
decl_stmt|;
name|writePortsFile
argument_list|(
literal|"transport"
argument_list|,
name|transport
operator|.
name|boundAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"started"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|stop
specifier|private
name|Node
name|stop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|moveToStopped
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|Node
operator|.
name|class
argument_list|,
name|NODE_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"stopping ..."
argument_list|)
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|TribeService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|ResourceWatcherService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|NetworkModule
operator|.
name|HTTP_ENABLED
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServer
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|injector
operator|.
name|getInstance
argument_list|(
name|SnapshotsService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|SnapshotShardsService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// stop any changes happening as a result of cluster state changes
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesClusterStateService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// we close indices first, so operations won't be allowed on it
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesTTLService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|RoutingService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|Discovery
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|NodeConnectionsService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|MonitorService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|GatewayService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|SearchService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|RestController
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|pluginLifecycleComponents
operator|.
name|forEach
argument_list|(
name|LifecycleComponent
operator|::
name|stop
argument_list|)
expr_stmt|;
comment|// we should stop this last since it waits for resources to get released
comment|// if we had scroll searchers etc or recovery going on we wait for to finish.
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"stopped"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// During concurrent close() calls we want to make sure that all of them return after the node has completed it's shutdown cycle.
comment|// If not, the hook that is added in Bootstrap#setup() will be useless: close() might not be executed, in case another (for example api) call
comment|// to close() has already set some lifecycles to stopped. In this case the process will be terminated even if the first call to close() has not finished yet.
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|moveToClosed
argument_list|()
condition|)
block|{
return|return;
block|}
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|Node
operator|.
name|class
argument_list|,
name|NODE_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"closing ..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Closeable
argument_list|>
name|toClose
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|(
literal|"node_close"
argument_list|)
decl_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|start
argument_list|(
literal|"tribe"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|TribeService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"node_service"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|NodeService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"http"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|NetworkModule
operator|.
name|HTTP_ENABLED
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"snapshot_service"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|SnapshotsService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|SnapshotShardsService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"client"
argument_list|)
argument_list|)
expr_stmt|;
name|Releasables
operator|.
name|close
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|Client
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"indices_cluster"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesClusterStateService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"indices"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesTTLService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// close filter/fielddata caches after indices
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesStore
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"routing"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|RoutingService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"cluster"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"node_connections_service"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|NodeConnectionsService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"discovery"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|Discovery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"monitor"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|MonitorService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"gateway"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|GatewayService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"search"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|SearchService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"rest"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|RestController
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"transport"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|LifecycleComponent
name|plugin
range|:
name|pluginLifecycleComponents
control|)
block|{
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"plugin("
operator|+
name|plugin
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
name|toClose
operator|.
name|addAll
argument_list|(
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|Closeable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"script"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|ScriptService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"thread_pool"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO this should really use ThreadPool.terminate()
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|injector
operator|.
name|getInstance
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
operator|.
name|shutdown
argument_list|()
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|injector
operator|.
name|getInstance
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|start
argument_list|(
literal|"thread_pool_force_shutdown"
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|injector
operator|.
name|getInstance
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
operator|.
name|shutdownNow
argument_list|()
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|stopWatch
operator|.
name|stop
argument_list|()
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|BigArrays
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Close times for each service:\n{}"
argument_list|,
name|stopWatch
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|toClose
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"closed"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|log4jShutdownEnabled
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"es.log4j.shutdownEnabled"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|shutdownEnabled
decl_stmt|;
switch|switch
condition|(
name|log4jShutdownEnabled
condition|)
block|{
case|case
literal|"true"
case|:
name|shutdownEnabled
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|"false"
case|:
name|shutdownEnabled
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid value for [es.log4j.shutdownEnabled], was ["
operator|+
name|log4jShutdownEnabled
operator|+
literal|"] but must be [true] or [false]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|shutdownEnabled
condition|)
block|{
name|LoggerContext
name|context
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Configurator
operator|.
name|shutdown
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns<tt>true</tt> if the node is closed.      */
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|lifecycle
operator|.
name|closed
argument_list|()
return|;
block|}
DECL|method|injector
specifier|public
name|Injector
name|injector
parameter_list|()
block|{
return|return
name|this
operator|.
name|injector
return|;
block|}
comment|/**      * Hook for validating the node after network      * services are started but before the cluster service is started      * and before the network service starts accepting incoming network      * requests.      *      * @param settings              the fully-resolved settings      * @param boundTransportAddress the network addresses the node is      *                              bound and publishing to      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|validateNodeBeforeAcceptingRequests
specifier|protected
name|void
name|validateNodeBeforeAcceptingRequests
parameter_list|(
specifier|final
name|Settings
name|settings
parameter_list|,
specifier|final
name|BoundTransportAddress
name|boundTransportAddress
parameter_list|)
throws|throws
name|NodeValidationException
block|{     }
comment|/** Writes a file to the logs dir containing the ports for the given transport type */
DECL|method|writePortsFile
specifier|private
name|void
name|writePortsFile
parameter_list|(
name|String
name|type
parameter_list|,
name|BoundTransportAddress
name|boundAddress
parameter_list|)
block|{
name|Path
name|tmpPortsFile
init|=
name|environment
operator|.
name|logsFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|type
operator|+
literal|".ports.tmp"
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|writer
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|tmpPortsFile
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|TransportAddress
name|address
range|:
name|boundAddress
operator|.
name|boundAddresses
argument_list|()
control|)
block|{
name|InetAddress
name|inetAddress
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|address
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|inetAddress
operator|instanceof
name|Inet6Address
operator|&&
name|inetAddress
operator|.
name|isLinkLocalAddress
argument_list|()
condition|)
block|{
comment|// no link local, just causes problems
continue|continue;
block|}
name|writer
operator|.
name|write
argument_list|(
name|NetworkAddress
operator|.
name|format
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|inetAddress
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to write ports file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Path
name|portsFile
init|=
name|environment
operator|.
name|logsFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|type
operator|+
literal|".ports"
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|tmpPortsFile
argument_list|,
name|portsFile
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to rename ports file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * The {@link PluginsService} used to build this node's components.      */
DECL|method|getPluginsService
specifier|protected
name|PluginsService
name|getPluginsService
parameter_list|()
block|{
return|return
name|pluginsService
return|;
block|}
comment|/**      * Creates a new {@link CircuitBreakerService} based on the settings provided.      * @see #BREAKER_TYPE_KEY      */
DECL|method|createCircuitBreakerService
specifier|public
specifier|static
name|CircuitBreakerService
name|createCircuitBreakerService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|)
block|{
name|String
name|type
init|=
name|BREAKER_TYPE_KEY
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"hierarchy"
argument_list|)
condition|)
block|{
return|return
operator|new
name|HierarchyCircuitBreakerService
argument_list|(
name|settings
argument_list|,
name|clusterSettings
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"none"
argument_list|)
condition|)
block|{
return|return
operator|new
name|NoneCircuitBreakerService
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown circuit breaker type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a new {@link BigArrays} instance used for this node.      * This method can be overwritten by subclasses to change their {@link BigArrays} implementation for instance for testing      */
DECL|method|createBigArrays
name|BigArrays
name|createBigArrays
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|CircuitBreakerService
name|circuitBreakerService
parameter_list|)
block|{
return|return
operator|new
name|BigArrays
argument_list|(
name|settings
argument_list|,
name|circuitBreakerService
argument_list|)
return|;
block|}
comment|/**      * Creates a new the SearchService. This method can be overwritten by tests to inject mock implementations.      */
DECL|method|newSearchService
specifier|protected
name|SearchService
name|newSearchService
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|FetchPhase
name|fetchPhase
parameter_list|)
block|{
return|return
operator|new
name|SearchService
argument_list|(
name|clusterService
argument_list|,
name|indicesService
argument_list|,
name|threadPool
argument_list|,
name|scriptService
argument_list|,
name|bigArrays
argument_list|,
name|fetchPhase
argument_list|)
return|;
block|}
comment|/**      * Get Custom Name Resolvers list based on a Discovery Plugins list      * @param discoveryPlugins Discovery plugins list      */
DECL|method|getCustomNameResolvers
specifier|private
name|List
argument_list|<
name|NetworkService
operator|.
name|CustomNameResolver
argument_list|>
name|getCustomNameResolvers
parameter_list|(
name|List
argument_list|<
name|DiscoveryPlugin
argument_list|>
name|discoveryPlugins
parameter_list|)
block|{
name|List
argument_list|<
name|NetworkService
operator|.
name|CustomNameResolver
argument_list|>
name|customNameResolvers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DiscoveryPlugin
name|discoveryPlugin
range|:
name|discoveryPlugins
control|)
block|{
name|NetworkService
operator|.
name|CustomNameResolver
name|customNameResolver
init|=
name|discoveryPlugin
operator|.
name|getCustomNameResolver
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|customNameResolver
operator|!=
literal|null
condition|)
block|{
name|customNameResolvers
operator|.
name|add
argument_list|(
name|customNameResolver
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|customNameResolvers
return|;
block|}
comment|/** Create a new ZenPing instance for use in zen discovery. */
DECL|method|newZenPing
specifier|protected
name|ZenPing
name|newZenPing
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|UnicastHostsProvider
name|hostsProvider
parameter_list|)
block|{
return|return
operator|new
name|UnicastZenPing
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|hostsProvider
argument_list|)
return|;
block|}
comment|/** Constructs an internal node used as a client into a cluster fronted by this tribe node. */
DECL|method|newTribeClientNode
specifier|protected
name|Node
name|newTribeClientNode
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|classpathPlugins
parameter_list|)
block|{
return|return
operator|new
name|Node
argument_list|(
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|,
name|classpathPlugins
argument_list|)
return|;
block|}
comment|/** Constructs a ClusterInfoService which may be mocked for tests. */
DECL|method|newClusterInfoService
specifier|protected
name|ClusterInfoService
name|newClusterInfoService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|NodeClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|InternalClusterInfoService
argument_list|(
name|settings
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|,
name|client
argument_list|)
return|;
block|}
block|}
end_class

end_unit

