begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliToolConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliToolConfig
operator|.
name|Builder
operator|.
name|cmd
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliToolConfig
operator|.
name|Builder
operator|.
name|option
import|;
end_import

begin_comment
comment|/**  * A cli tool for adding, removing and listing plugins for elasticsearch.  */
end_comment

begin_class
DECL|class|PluginCli
specifier|public
class|class
name|PluginCli
extends|extends
name|CliTool
block|{
comment|// commands
DECL|field|LIST_CMD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|LIST_CMD_NAME
init|=
literal|"list"
decl_stmt|;
DECL|field|INSTALL_CMD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|INSTALL_CMD_NAME
init|=
literal|"install"
decl_stmt|;
DECL|field|REMOVE_CMD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|REMOVE_CMD_NAME
init|=
literal|"remove"
decl_stmt|;
comment|// usage config
DECL|field|LIST_CMD
specifier|private
specifier|static
specifier|final
name|CliToolConfig
operator|.
name|Cmd
name|LIST_CMD
init|=
name|cmd
argument_list|(
name|LIST_CMD_NAME
argument_list|,
name|ListPluginsCommand
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|INSTALL_CMD
specifier|private
specifier|static
specifier|final
name|CliToolConfig
operator|.
name|Cmd
name|INSTALL_CMD
init|=
name|cmd
argument_list|(
name|INSTALL_CMD_NAME
argument_list|,
name|InstallPluginCommand
operator|.
name|class
argument_list|)
operator|.
name|options
argument_list|(
name|option
argument_list|(
literal|"b"
argument_list|,
literal|"batch"
argument_list|)
operator|.
name|required
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|REMOVE_CMD
specifier|private
specifier|static
specifier|final
name|CliToolConfig
operator|.
name|Cmd
name|REMOVE_CMD
init|=
name|cmd
argument_list|(
name|REMOVE_CMD_NAME
argument_list|,
name|RemovePluginCommand
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|CONFIG
specifier|static
specifier|final
name|CliToolConfig
name|CONFIG
init|=
name|CliToolConfig
operator|.
name|config
argument_list|(
literal|"plugin"
argument_list|,
name|PluginCli
operator|.
name|class
argument_list|)
operator|.
name|cmds
argument_list|(
name|LIST_CMD
argument_list|,
name|INSTALL_CMD
argument_list|,
name|REMOVE_CMD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
comment|// initialize default for es.logger.level because we will not read the logging.yml
name|String
name|loggerLevel
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"es.logger.level"
argument_list|,
literal|"INFO"
argument_list|)
decl_stmt|;
comment|// Set the appender for all potential log files to terminal so that other components that use the logger print out the
comment|// same terminal.
comment|// The reason for this is that the plugin cli cannot be configured with a file appender because when the plugin command is
comment|// executed there is no way of knowing where the logfiles should be placed. For example, if elasticsearch
comment|// is run as service then the logs should be at /var/log/elasticsearch but when started from the tar they should be at es.home/logs.
comment|// Therefore we print to Terminal.
name|Environment
name|env
init|=
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"appender.terminal.type"
argument_list|,
literal|"terminal"
argument_list|)
operator|.
name|put
argument_list|(
literal|"rootLogger"
argument_list|,
literal|"${es.logger.level}, terminal"
argument_list|)
operator|.
name|put
argument_list|(
literal|"es.logger.level"
argument_list|,
name|loggerLevel
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Terminal
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
comment|// configure but do not read the logging conf file
name|LogConfigurator
operator|.
name|configure
argument_list|(
name|env
operator|.
name|settings
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|status
init|=
operator|new
name|PluginCli
argument_list|(
name|Terminal
operator|.
name|DEFAULT
argument_list|)
operator|.
name|execute
argument_list|(
name|args
argument_list|)
operator|.
name|status
argument_list|()
decl_stmt|;
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"Allowed to exit explicitly from #main()"
argument_list|)
DECL|method|exit
specifier|private
specifier|static
name|void
name|exit
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|PluginCli
name|PluginCli
parameter_list|(
name|Terminal
name|terminal
parameter_list|)
block|{
name|super
argument_list|(
name|CONFIG
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|protected
name|Command
name|parse
parameter_list|(
name|String
name|cmdName
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|cmdName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
condition|)
block|{
case|case
name|LIST_CMD_NAME
case|:
return|return
operator|new
name|ListPluginsCommand
argument_list|(
name|terminal
argument_list|)
return|;
case|case
name|INSTALL_CMD_NAME
case|:
return|return
name|parseInstallPluginCommand
argument_list|(
name|cli
argument_list|)
return|;
case|case
name|REMOVE_CMD_NAME
case|:
return|return
name|parseRemovePluginCommand
argument_list|(
name|cli
argument_list|)
return|;
default|default:
assert|assert
literal|false
operator|:
literal|"can't get here as cmd name is validated before this method is called"
assert|;
return|return
name|exitCmd
argument_list|(
name|ExitStatus
operator|.
name|USAGE
argument_list|)
return|;
block|}
block|}
DECL|method|parseInstallPluginCommand
specifier|private
name|Command
name|parseInstallPluginCommand
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
block|{
name|String
index|[]
name|args
init|=
name|cli
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
return|return
name|exitCmd
argument_list|(
name|ExitStatus
operator|.
name|USAGE
argument_list|,
name|terminal
argument_list|,
literal|"Must supply a single plugin id argument"
argument_list|)
return|;
block|}
name|boolean
name|batch
init|=
name|System
operator|.
name|console
argument_list|()
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"b"
argument_list|)
condition|)
block|{
name|batch
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|new
name|InstallPluginCommand
argument_list|(
name|terminal
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|,
name|batch
argument_list|)
return|;
block|}
DECL|method|parseRemovePluginCommand
specifier|private
name|Command
name|parseRemovePluginCommand
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
block|{
name|String
index|[]
name|args
init|=
name|cli
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
return|return
name|exitCmd
argument_list|(
name|ExitStatus
operator|.
name|USAGE
argument_list|,
name|terminal
argument_list|,
literal|"Must supply a single plugin name argument"
argument_list|)
return|;
block|}
return|return
operator|new
name|RemovePluginCommand
argument_list|(
name|terminal
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

