begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
operator|.
name|JarHell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
DECL|class|PluginInfo
specifier|public
class|class
name|PluginInfo
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|ES_PLUGIN_PROPERTIES
specifier|public
specifier|static
specifier|final
name|String
name|ES_PLUGIN_PROPERTIES
init|=
literal|"plugin-descriptor.properties"
decl_stmt|;
DECL|field|ES_PLUGIN_POLICY
specifier|public
specifier|static
specifier|final
name|String
name|ES_PLUGIN_POLICY
init|=
literal|"plugin-security.policy"
decl_stmt|;
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|NAME
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"description"
decl_stmt|;
DECL|field|URL
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"url"
decl_stmt|;
DECL|field|VERSION
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"version"
decl_stmt|;
DECL|field|CLASSNAME
specifier|static
specifier|final
name|String
name|CLASSNAME
init|=
literal|"classname"
decl_stmt|;
block|}
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|description
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|String
name|version
decl_stmt|;
DECL|field|classname
specifier|private
specifier|final
name|String
name|classname
decl_stmt|;
comment|/**      * Information about plugins      *      * @param name        Its name      * @param description Its description      * @param version     Version number      */
DECL|method|PluginInfo
name|PluginInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|classname
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|classname
operator|=
name|classname
expr_stmt|;
block|}
DECL|method|PluginInfo
specifier|public
name|PluginInfo
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|classname
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|classname
argument_list|)
expr_stmt|;
block|}
comment|/** reads (and validates) plugin metadata descriptor file */
DECL|method|readFromProperties
specifier|public
specifier|static
name|PluginInfo
name|readFromProperties
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|descriptor
init|=
name|dir
operator|.
name|resolve
argument_list|(
name|ES_PLUGIN_PROPERTIES
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|descriptor
argument_list|)
init|)
block|{
name|props
operator|.
name|load
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property [name] is missing in ["
operator|+
name|descriptor
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|String
name|description
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
if|if
condition|(
name|description
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property [description] is missing for plugin ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|String
name|version
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property [version] is missing for plugin ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|String
name|esVersionString
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"elasticsearch.version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|esVersionString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property [elasticsearch.version] is missing for plugin ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Version
name|esVersion
init|=
name|Version
operator|.
name|fromString
argument_list|(
name|esVersionString
argument_list|)
decl_stmt|;
if|if
condition|(
name|esVersion
operator|.
name|equals
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Plugin ["
operator|+
name|name
operator|+
literal|"] is incompatible with Elasticsearch ["
operator|+
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
operator|+
literal|"]. Was designed for version ["
operator|+
name|esVersionString
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|String
name|javaVersionString
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaVersionString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property [java.version] is missing for plugin ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|JarHell
operator|.
name|checkVersionFormat
argument_list|(
name|javaVersionString
argument_list|)
expr_stmt|;
name|JarHell
operator|.
name|checkJavaVersion
argument_list|(
name|name
argument_list|,
name|javaVersionString
argument_list|)
expr_stmt|;
name|String
name|classname
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"classname"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classname
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property [classname] is missing for plugin ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
operator|new
name|PluginInfo
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|version
argument_list|,
name|classname
argument_list|)
return|;
block|}
comment|/**      * @return Plugin's name      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return Plugin's description if any      */
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
comment|/**      * @return plugin's classname      */
DECL|method|getClassname
specifier|public
name|String
name|getClassname
parameter_list|()
block|{
return|return
name|classname
return|;
block|}
comment|/**      * @return Version number for the plugin      */
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|CLASSNAME
argument_list|,
name|classname
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|PluginInfo
name|that
init|=
operator|(
name|PluginInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|?
operator|!
name|version
operator|.
name|equals
argument_list|(
name|that
operator|.
name|version
argument_list|)
else|:
name|that
operator|.
name|version
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|information
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"- Plugin information:\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Name: "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Description: "
argument_list|)
operator|.
name|append
argument_list|(
name|description
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Version: "
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|" * Classname: "
argument_list|)
operator|.
name|append
argument_list|(
name|classname
argument_list|)
decl_stmt|;
return|return
name|information
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

