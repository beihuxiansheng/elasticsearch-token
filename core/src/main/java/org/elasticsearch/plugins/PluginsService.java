begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|PluginsAndModules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
operator|.
name|JarHell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|LifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexModule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
operator|.
name|isAccessibleDirectory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PluginsService
specifier|public
class|class
name|PluginsService
extends|extends
name|AbstractComponent
block|{
comment|/**      * We keep around a list of plugins and modules      */
DECL|field|plugins
specifier|private
specifier|final
name|List
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|plugins
decl_stmt|;
DECL|field|info
specifier|private
specifier|final
name|PluginsAndModules
name|info
decl_stmt|;
DECL|field|MANDATORY_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|MANDATORY_SETTING
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"plugin.mandatory"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|onModuleReferences
specifier|private
specifier|final
name|Map
argument_list|<
name|Plugin
argument_list|,
name|List
argument_list|<
name|OnModuleReference
argument_list|>
argument_list|>
name|onModuleReferences
decl_stmt|;
DECL|class|OnModuleReference
specifier|static
class|class
name|OnModuleReference
block|{
DECL|field|moduleClass
specifier|public
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|moduleClass
decl_stmt|;
DECL|field|onModuleMethod
specifier|public
specifier|final
name|Method
name|onModuleMethod
decl_stmt|;
DECL|method|OnModuleReference
name|OnModuleReference
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|moduleClass
parameter_list|,
name|Method
name|onModuleMethod
parameter_list|)
block|{
name|this
operator|.
name|moduleClass
operator|=
name|moduleClass
expr_stmt|;
name|this
operator|.
name|onModuleMethod
operator|=
name|onModuleMethod
expr_stmt|;
block|}
block|}
comment|/**      * Constructs a new PluginService      * @param settings The settings of the system      * @param modulesDirectory The directory modules exist in, or null if modules should not be loaded from the filesystem      * @param pluginsDirectory The directory plugins exist in, or null if plugins should not be loaded from the filesystem      * @param classpathPlugins Plugins that exist in the classpath which should be loaded      */
DECL|method|PluginsService
specifier|public
name|PluginsService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Path
name|modulesDirectory
parameter_list|,
name|Path
name|pluginsDirectory
parameter_list|,
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|classpathPlugins
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|PluginsAndModules
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|pluginsLoaded
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// first we load plugins that are on the classpath. this is for tests and transport clients
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
name|pluginClass
range|:
name|classpathPlugins
control|)
block|{
name|Plugin
name|plugin
init|=
name|loadPlugin
argument_list|(
name|pluginClass
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|PluginInfo
name|pluginInfo
init|=
operator|new
name|PluginInfo
argument_list|(
name|plugin
operator|.
name|name
argument_list|()
argument_list|,
name|plugin
operator|.
name|description
argument_list|()
argument_list|,
literal|"NA"
argument_list|,
name|pluginClass
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"plugin loaded from classpath [{}]"
argument_list|,
name|pluginInfo
argument_list|)
expr_stmt|;
block|}
name|pluginsLoaded
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|pluginInfo
argument_list|,
name|plugin
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|addPlugin
argument_list|(
name|pluginInfo
argument_list|)
expr_stmt|;
block|}
comment|// load modules
if|if
condition|(
name|modulesDirectory
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
name|getModuleBundles
argument_list|(
name|modulesDirectory
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|loaded
init|=
name|loadBundles
argument_list|(
name|bundles
argument_list|)
decl_stmt|;
name|pluginsLoaded
operator|.
name|addAll
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|module
range|:
name|loaded
control|)
block|{
name|info
operator|.
name|addModule
argument_list|(
name|module
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to initialize modules"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// now, find all the ones that are in plugins/
if|if
condition|(
name|pluginsDirectory
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
name|getPluginBundles
argument_list|(
name|pluginsDirectory
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|loaded
init|=
name|loadBundles
argument_list|(
name|bundles
argument_list|)
decl_stmt|;
name|pluginsLoaded
operator|.
name|addAll
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|loaded
control|)
block|{
name|info
operator|.
name|addPlugin
argument_list|(
name|plugin
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to initialize plugins"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
name|plugins
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|pluginsLoaded
argument_list|)
expr_stmt|;
comment|// We need to build a List of plugins for checking mandatory plugins
name|Set
argument_list|<
name|String
argument_list|>
name|pluginsNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|tuple
range|:
name|plugins
control|)
block|{
name|pluginsNames
operator|.
name|add
argument_list|(
name|tuple
operator|.
name|v1
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Checking expected plugins
name|List
argument_list|<
name|String
argument_list|>
name|mandatoryPlugins
init|=
name|MANDATORY_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|mandatoryPlugins
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|missingPlugins
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mandatoryPlugin
range|:
name|mandatoryPlugins
control|)
block|{
if|if
condition|(
operator|!
name|pluginsNames
operator|.
name|contains
argument_list|(
name|mandatoryPlugin
argument_list|)
operator|&&
operator|!
name|missingPlugins
operator|.
name|contains
argument_list|(
name|mandatoryPlugin
argument_list|)
condition|)
block|{
name|missingPlugins
operator|.
name|add
argument_list|(
name|mandatoryPlugin
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|missingPlugins
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Missing mandatory plugins ["
operator|+
name|Strings
operator|.
name|collectionToDelimitedString
argument_list|(
name|missingPlugins
argument_list|,
literal|", "
argument_list|)
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|// we don't log jars in lib/ we really shouldn't log modules,
comment|// but for now: just be transparent so we can debug any potential issues
name|Set
argument_list|<
name|String
argument_list|>
name|moduleNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|jvmPluginNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PluginInfo
name|moduleInfo
range|:
name|info
operator|.
name|getModuleInfos
argument_list|()
control|)
block|{
name|moduleNames
operator|.
name|add
argument_list|(
name|moduleInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PluginInfo
name|pluginInfo
range|:
name|info
operator|.
name|getPluginInfos
argument_list|()
control|)
block|{
name|jvmPluginNames
operator|.
name|add
argument_list|(
name|pluginInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"modules {}, plugins {}"
argument_list|,
name|moduleNames
argument_list|,
name|jvmPluginNames
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Plugin
argument_list|,
name|List
argument_list|<
name|OnModuleReference
argument_list|>
argument_list|>
name|onModuleReferences
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|pluginEntry
range|:
name|plugins
control|)
block|{
name|Plugin
name|plugin
init|=
name|pluginEntry
operator|.
name|v2
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OnModuleReference
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|plugin
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"onModule"
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// this is a deprecated final method, so all Plugin subclasses have it
if|if
condition|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|IndexModule
operator|.
name|class
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|||
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Plugin: {} implementing onModule with no parameters or more than one parameter"
argument_list|,
name|plugin
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Class
name|moduleClass
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|Module
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|moduleClass
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Plugin: {} implementing onModule by the type is not of Module type {}"
argument_list|,
name|plugin
operator|.
name|name
argument_list|()
argument_list|,
name|moduleClass
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|list
operator|.
name|add
argument_list|(
operator|new
name|OnModuleReference
argument_list|(
name|moduleClass
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|onModuleReferences
operator|.
name|put
argument_list|(
name|plugin
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|onModuleReferences
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|onModuleReferences
argument_list|)
expr_stmt|;
block|}
DECL|method|plugins
specifier|private
name|List
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|plugins
parameter_list|()
block|{
return|return
name|plugins
return|;
block|}
DECL|method|processModules
specifier|public
name|void
name|processModules
parameter_list|(
name|Iterable
argument_list|<
name|Module
argument_list|>
name|modules
parameter_list|)
block|{
for|for
control|(
name|Module
name|module
range|:
name|modules
control|)
block|{
name|processModule
argument_list|(
name|module
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processModule
specifier|public
name|void
name|processModule
parameter_list|(
name|Module
name|module
parameter_list|)
block|{
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
argument_list|()
control|)
block|{
comment|// see if there are onModule references
name|List
argument_list|<
name|OnModuleReference
argument_list|>
name|references
init|=
name|onModuleReferences
operator|.
name|get
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|OnModuleReference
name|reference
range|:
name|references
control|)
block|{
if|if
condition|(
name|reference
operator|.
name|moduleClass
operator|.
name|isAssignableFrom
argument_list|(
name|module
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|reference
operator|.
name|onModuleMethod
operator|.
name|invoke
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"plugin {}, failed to invoke custom onModule method"
argument_list|,
name|e
argument_list|,
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to invoke onModule"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"plugin {}, failed to invoke custom onModule method"
argument_list|,
name|e
argument_list|,
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|updatedSettings
specifier|public
name|Settings
name|updatedSettings
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|foundSettings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|Settings
name|settings
init|=
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|additionalSettings
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|setting
range|:
name|settings
operator|.
name|getAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|oldPlugin
init|=
name|foundSettings
operator|.
name|put
argument_list|(
name|setting
argument_list|,
name|plugin
operator|.
name|v1
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldPlugin
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot have additional setting ["
operator|+
name|setting
operator|+
literal|"] "
operator|+
literal|"in plugin ["
operator|+
name|plugin
operator|.
name|v1
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"], already added in plugin ["
operator|+
name|oldPlugin
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|put
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|put
argument_list|(
name|this
operator|.
name|settings
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|nodeModules
specifier|public
name|Collection
argument_list|<
name|Module
argument_list|>
name|nodeModules
parameter_list|()
block|{
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|modules
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|nodeModules
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
DECL|method|nodeServices
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|LifecycleComponent
argument_list|>
argument_list|>
name|nodeServices
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|LifecycleComponent
argument_list|>
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|services
operator|.
name|addAll
argument_list|(
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|nodeServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|services
return|;
block|}
DECL|method|onIndexModule
specifier|public
name|void
name|onIndexModule
parameter_list|(
name|IndexModule
name|indexModule
parameter_list|)
block|{
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
name|plugin
operator|.
name|v2
argument_list|()
operator|.
name|onIndexModule
argument_list|(
name|indexModule
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get information about plugins and modules      */
DECL|method|info
specifier|public
name|PluginsAndModules
name|info
parameter_list|()
block|{
return|return
name|info
return|;
block|}
comment|// a "bundle" is a group of plugins in a single classloader
comment|// really should be 1-1, but we are not so fortunate
DECL|class|Bundle
specifier|static
class|class
name|Bundle
block|{
DECL|field|plugins
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|plugins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|urls
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
block|}
comment|// similar in impl to getPluginBundles, but DO NOT try to make them share code.
comment|// we don't need to inherit all the leniency, and things are different enough.
DECL|method|getModuleBundles
specifier|static
name|List
argument_list|<
name|Bundle
argument_list|>
name|getModuleBundles
parameter_list|(
name|Path
name|modulesDirectory
parameter_list|)
throws|throws
name|IOException
block|{
comment|// damn leniency
if|if
condition|(
name|Files
operator|.
name|notExists
argument_list|(
name|modulesDirectory
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|modulesDirectory
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|module
range|:
name|stream
control|)
block|{
if|if
condition|(
name|FileSystemUtils
operator|.
name|isHidden
argument_list|(
name|module
argument_list|)
condition|)
block|{
continue|continue;
comment|// skip over .DS_Store etc
block|}
name|PluginInfo
name|info
init|=
name|PluginInfo
operator|.
name|readFromProperties
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
init|=
operator|new
name|Bundle
argument_list|()
decl_stmt|;
name|bundle
operator|.
name|plugins
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// gather urls for jar files
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|jarStream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|module
argument_list|,
literal|"*.jar"
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|jar
range|:
name|jarStream
control|)
block|{
comment|// normalize with toRealPath to get symlinks out of our hair
name|bundle
operator|.
name|urls
operator|.
name|add
argument_list|(
name|jar
operator|.
name|toRealPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|bundles
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bundles
return|;
block|}
DECL|method|getPluginBundles
specifier|static
name|List
argument_list|<
name|Bundle
argument_list|>
name|getPluginBundles
parameter_list|(
name|Path
name|pluginsDirectory
parameter_list|)
throws|throws
name|IOException
block|{
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|PluginsService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: remove this leniency, but tests bogusly rely on it
if|if
condition|(
operator|!
name|isAccessibleDirectory
argument_list|(
name|pluginsDirectory
argument_list|,
name|logger
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|pluginsDirectory
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|plugin
range|:
name|stream
control|)
block|{
if|if
condition|(
name|FileSystemUtils
operator|.
name|isHidden
argument_list|(
name|plugin
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"--- skip hidden plugin file[{}]"
argument_list|,
name|plugin
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"--- adding plugin [{}]"
argument_list|,
name|plugin
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|PluginInfo
name|info
decl_stmt|;
try|try
block|{
name|info
operator|=
name|PluginInfo
operator|.
name|readFromProperties
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not load plugin descriptor for existing plugin ["
operator|+
name|plugin
operator|.
name|getFileName
argument_list|()
operator|+
literal|"]. Was the plugin built before 2.0?"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|jarStream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|plugin
argument_list|,
literal|"*.jar"
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|jar
range|:
name|jarStream
control|)
block|{
comment|// normalize with toRealPath to get symlinks out of our hair
name|urls
operator|.
name|add
argument_list|(
name|jar
operator|.
name|toRealPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Bundle
name|bundle
init|=
operator|new
name|Bundle
argument_list|()
decl_stmt|;
name|bundles
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|plugins
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|urls
operator|.
name|addAll
argument_list|(
name|urls
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bundles
return|;
block|}
DECL|method|loadBundles
specifier|private
name|List
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|loadBundles
parameter_list|(
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
block|{
name|List
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|plugins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
comment|// jar-hell check the bundle against the parent classloader
comment|// pluginmanager does it, but we do it again, in case lusers mess with jar files manually
try|try
block|{
specifier|final
name|List
argument_list|<
name|URL
argument_list|>
name|jars
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|jars
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|JarHell
operator|.
name|parseClassPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jars
operator|.
name|addAll
argument_list|(
name|bundle
operator|.
name|urls
argument_list|)
expr_stmt|;
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"failed to load bundle "
operator|+
name|bundle
operator|.
name|urls
operator|+
literal|" due to jar hell"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// create a child to load the plugins in this bundle
name|ClassLoader
name|loader
init|=
name|URLClassLoader
operator|.
name|newInstance
argument_list|(
name|bundle
operator|.
name|urls
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PluginInfo
name|pluginInfo
range|:
name|bundle
operator|.
name|plugins
control|)
block|{
comment|// reload lucene SPI with any new services from the plugin
name|reloadLuceneSPI
argument_list|(
name|loader
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
name|pluginClass
init|=
name|loadPluginClass
argument_list|(
name|pluginInfo
operator|.
name|getClassname
argument_list|()
argument_list|,
name|loader
argument_list|)
decl_stmt|;
specifier|final
name|Plugin
name|plugin
init|=
name|loadPlugin
argument_list|(
name|pluginClass
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|plugins
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|pluginInfo
argument_list|,
name|plugin
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|plugins
argument_list|)
return|;
block|}
comment|/**      * Reloads all Lucene SPI implementations using the new classloader.      * This method must be called after the new classloader has been created to      * register the services for use.      */
DECL|method|reloadLuceneSPI
specifier|static
name|void
name|reloadLuceneSPI
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
block|{
comment|// do NOT change the order of these method calls!
comment|// Codecs:
name|PostingsFormat
operator|.
name|reloadPostingsFormats
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|DocValuesFormat
operator|.
name|reloadDocValuesFormats
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|Codec
operator|.
name|reloadCodecs
argument_list|(
name|loader
argument_list|)
expr_stmt|;
comment|// Analysis:
name|CharFilterFactory
operator|.
name|reloadCharFilters
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|TokenFilterFactory
operator|.
name|reloadTokenFilters
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|TokenizerFactory
operator|.
name|reloadTokenizers
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
DECL|method|loadPluginClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
name|loadPluginClass
parameter_list|(
name|String
name|className
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
try|try
block|{
return|return
name|loader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Plugin
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Could not find plugin class ["
operator|+
name|className
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|loadPlugin
specifier|private
name|Plugin
name|loadPlugin
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
name|pluginClass
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
try|try
block|{
try|try
block|{
return|return
name|pluginClass
operator|.
name|getConstructor
argument_list|(
name|Settings
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|settings
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
try|try
block|{
return|return
name|pluginClass
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"No constructor for ["
operator|+
name|pluginClass
operator|+
literal|"]. A plugin class must "
operator|+
literal|"have either an empty default constructor or a single argument constructor accepting a "
operator|+
literal|"Settings instance"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Failed to load plugin class ["
operator|+
name|pluginClass
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

