begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|LifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchRequestParsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ExecutorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|ResourceWatcherService
import|;
end_import

begin_comment
comment|/**  * An extension point allowing to plug in custom functionality.  *<p>  * Implement any of these interfaces to extend Elasticsearch:  *<ul>  *<li>{@link ActionPlugin}  *<li>{@link AnalysisPlugin}  *<li>{@link MapperPlugin}  *<li>{@link ScriptPlugin}  *<li>{@link SearchPlugin}  *</ul>  */
end_comment

begin_class
DECL|class|Plugin
specifier|public
specifier|abstract
class|class
name|Plugin
block|{
comment|/**      * Node level guice modules.      */
DECL|method|createGuiceModules
specifier|public
name|Collection
argument_list|<
name|Module
argument_list|>
name|createGuiceModules
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Node level services that will be automatically started/stopped/closed. This classes must be constructed      * by injection with guice.      */
DECL|method|getGuiceServiceClasses
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|LifecycleComponent
argument_list|>
argument_list|>
name|getGuiceServiceClasses
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Returns components added by this plugin.      *      * Any components returned that implement {@link LifecycleComponent} will have their lifecycle managed.      * Note: To aid in the migration away from guice, all objects returned as components will be bound in guice      * to themselves.      *      * @param client A client to make requests to the system      * @param clusterService A service to allow watching and updating cluster state      * @param threadPool A service to allow retrieving an executor to run an async action      * @param resourceWatcherService A service to watch for changes to node local files      * @param scriptService A service to allow running scripts on the local node      * @param searchRequestParsers Parsers for search requests which may be used to templatize search requests      */
DECL|method|createComponents
specifier|public
name|Collection
argument_list|<
name|Object
argument_list|>
name|createComponents
parameter_list|(
name|Client
name|client
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ResourceWatcherService
name|resourceWatcherService
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|SearchRequestParsers
name|searchRequestParsers
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Additional node settings loaded by the plugin. Note that settings that are explicit in the nodes settings can't be      * overwritten with the additional settings. These settings added if they don't exist.      */
DECL|method|additionalSettings
specifier|public
name|Settings
name|additionalSettings
parameter_list|()
block|{
return|return
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
return|;
block|}
comment|/**      * Returns parsers for {@link NamedWriteable} this plugin will use over the transport protocol.      * @see NamedWriteableRegistry      */
DECL|method|getNamedWriteables
specifier|public
name|List
argument_list|<
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|>
name|getNamedWriteables
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Called before a new index is created on a node. The given module can be used to register index-level      * extensions.      */
DECL|method|onIndexModule
specifier|public
name|void
name|onIndexModule
parameter_list|(
name|IndexModule
name|indexModule
parameter_list|)
block|{}
comment|/**      * Returns a list of additional {@link Setting} definitions for this plugin.      */
DECL|method|getSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSettings
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Returns a list of additional settings filter for this plugin      */
DECL|method|getSettingsFilter
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSettingsFilter
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Old-style guice index level extension point.      *      * @deprecated use #onIndexModule instead      */
annotation|@
name|Deprecated
DECL|method|onModule
specifier|public
specifier|final
name|void
name|onModule
parameter_list|(
name|IndexModule
name|indexModule
parameter_list|)
block|{}
comment|/**      * Old-style guice settings extension point.      *      * @deprecated use #getSettings and #getSettingsFilter instead      */
annotation|@
name|Deprecated
DECL|method|onModule
specifier|public
specifier|final
name|void
name|onModule
parameter_list|(
name|SettingsModule
name|settingsModule
parameter_list|)
block|{}
comment|/**      * Old-style guice scripting extension point.      *      * @deprecated implement {@link ScriptPlugin} instead      */
annotation|@
name|Deprecated
DECL|method|onModule
specifier|public
specifier|final
name|void
name|onModule
parameter_list|(
name|ScriptModule
name|module
parameter_list|)
block|{}
comment|/**      * Old-style analysis extension point.      *      * @deprecated implement {@link AnalysisPlugin} instead      */
annotation|@
name|Deprecated
DECL|method|onModule
specifier|public
specifier|final
name|void
name|onModule
parameter_list|(
name|AnalysisModule
name|module
parameter_list|)
block|{}
comment|/**      * Old-style action extension point.      *      * @deprecated implement {@link ActionPlugin} instead      */
annotation|@
name|Deprecated
DECL|method|onModule
specifier|public
specifier|final
name|void
name|onModule
parameter_list|(
name|ActionModule
name|module
parameter_list|)
block|{}
comment|/**      * Provides the list of this plugin's custom thread pools, empty if      * none.      *      * @param settings the current settings      * @return executors builders for this plugin's custom thread pools      */
DECL|method|getExecutorBuilders
specifier|public
name|List
argument_list|<
name|ExecutorBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|getExecutorBuilders
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

