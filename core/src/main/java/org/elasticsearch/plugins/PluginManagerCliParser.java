begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliToolConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|PluginManager
operator|.
name|OutputMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliToolConfig
operator|.
name|Builder
operator|.
name|cmd
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliToolConfig
operator|.
name|Builder
operator|.
name|option
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|EMPTY
import|;
end_import

begin_class
DECL|class|PluginManagerCliParser
specifier|public
class|class
name|PluginManagerCliParser
extends|extends
name|CliTool
block|{
comment|// By default timeout is 0 which means no timeout
DECL|field|DEFAULT_TIMEOUT
specifier|public
specifier|static
specifier|final
name|TimeValue
name|DEFAULT_TIMEOUT
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|CONFIG
specifier|private
specifier|static
specifier|final
name|CliToolConfig
name|CONFIG
init|=
name|CliToolConfig
operator|.
name|config
argument_list|(
literal|"plugin"
argument_list|,
name|PluginManagerCliParser
operator|.
name|class
argument_list|)
operator|.
name|cmds
argument_list|(
name|ListPlugins
operator|.
name|CMD
argument_list|,
name|Install
operator|.
name|CMD
argument_list|,
name|Remove
operator|.
name|CMD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Tuple
argument_list|<
name|Settings
argument_list|,
name|Environment
argument_list|>
name|initialSettings
init|=
name|InternalSettingsPreparer
operator|.
name|prepareSettings
argument_list|(
name|EMPTY
argument_list|,
literal|true
argument_list|,
name|Terminal
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|LogConfigurator
operator|.
name|configure
argument_list|(
name|initialSettings
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|status
init|=
operator|new
name|PluginManagerCliParser
argument_list|()
operator|.
name|execute
argument_list|(
name|args
argument_list|)
operator|.
name|status
argument_list|()
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|PluginManagerCliParser
specifier|public
name|PluginManagerCliParser
parameter_list|()
block|{
name|super
argument_list|(
name|CONFIG
argument_list|)
expr_stmt|;
block|}
DECL|method|PluginManagerCliParser
specifier|public
name|PluginManagerCliParser
parameter_list|(
name|Terminal
name|terminal
parameter_list|)
block|{
name|super
argument_list|(
name|CONFIG
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|protected
name|Command
name|parse
parameter_list|(
name|String
name|cmdName
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|cmdName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
condition|)
block|{
case|case
name|Install
operator|.
name|NAME
case|:
return|return
name|Install
operator|.
name|parse
argument_list|(
name|terminal
argument_list|,
name|cli
argument_list|)
return|;
case|case
name|ListPlugins
operator|.
name|NAME
case|:
return|return
name|ListPlugins
operator|.
name|parse
argument_list|(
name|terminal
argument_list|,
name|cli
argument_list|)
return|;
case|case
name|Remove
operator|.
name|NAME
case|:
return|return
name|Remove
operator|.
name|parse
argument_list|(
name|terminal
argument_list|,
name|cli
argument_list|)
return|;
default|default:
assert|assert
literal|false
operator|:
literal|"can't get here as cmd name is validated before this method is called"
assert|;
return|return
name|exitCmd
argument_list|(
name|ExitStatus
operator|.
name|USAGE
argument_list|)
return|;
block|}
block|}
comment|/**      * List all installed plugins      */
DECL|class|ListPlugins
specifier|static
class|class
name|ListPlugins
extends|extends
name|CliTool
operator|.
name|Command
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"list"
decl_stmt|;
DECL|field|CMD
specifier|private
specifier|static
specifier|final
name|CliToolConfig
operator|.
name|Cmd
name|CMD
init|=
name|cmd
argument_list|(
name|NAME
argument_list|,
name|ListPlugins
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|outputMode
specifier|private
specifier|final
name|OutputMode
name|outputMode
decl_stmt|;
DECL|method|parse
specifier|public
specifier|static
name|Command
name|parse
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
block|{
name|OutputMode
name|outputMode
init|=
name|OutputMode
operator|.
name|DEFAULT
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
name|outputMode
operator|=
name|OutputMode
operator|.
name|SILENT
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"v"
argument_list|)
condition|)
block|{
name|outputMode
operator|=
name|OutputMode
operator|.
name|VERBOSE
expr_stmt|;
block|}
return|return
operator|new
name|ListPlugins
argument_list|(
name|terminal
argument_list|,
name|outputMode
argument_list|)
return|;
block|}
DECL|method|ListPlugins
name|ListPlugins
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OutputMode
name|outputMode
parameter_list|)
block|{
name|super
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputMode
operator|=
name|outputMode
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|PluginManager
name|pluginManager
init|=
operator|new
name|PluginManager
argument_list|(
name|env
argument_list|,
literal|null
argument_list|,
name|outputMode
argument_list|,
name|DEFAULT_TIMEOUT
argument_list|)
decl_stmt|;
name|pluginManager
operator|.
name|listInstalledPlugins
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
return|return
name|ExitStatus
operator|.
name|OK
return|;
block|}
block|}
comment|/**      * Remove a plugin      */
DECL|class|Remove
specifier|static
class|class
name|Remove
extends|extends
name|CliTool
operator|.
name|Command
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"remove"
decl_stmt|;
DECL|field|CMD
specifier|private
specifier|static
specifier|final
name|CliToolConfig
operator|.
name|Cmd
name|CMD
init|=
name|cmd
argument_list|(
name|NAME
argument_list|,
name|Remove
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|parse
specifier|public
specifier|static
name|Command
name|parse
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
block|{
name|String
index|[]
name|args
init|=
name|cli
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|exitCmd
argument_list|(
name|ExitStatus
operator|.
name|USAGE
argument_list|,
name|terminal
argument_list|,
literal|"plugin name is missing (type -h for help)"
argument_list|)
return|;
block|}
name|OutputMode
name|outputMode
init|=
name|OutputMode
operator|.
name|DEFAULT
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
name|outputMode
operator|=
name|OutputMode
operator|.
name|SILENT
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"v"
argument_list|)
condition|)
block|{
name|outputMode
operator|=
name|OutputMode
operator|.
name|VERBOSE
expr_stmt|;
block|}
return|return
operator|new
name|Remove
argument_list|(
name|terminal
argument_list|,
name|outputMode
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|field|outputMode
specifier|private
name|OutputMode
name|outputMode
decl_stmt|;
DECL|field|pluginName
specifier|final
name|String
name|pluginName
decl_stmt|;
DECL|method|Remove
name|Remove
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OutputMode
name|outputMode
parameter_list|,
name|String
name|pluginToRemove
parameter_list|)
block|{
name|super
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputMode
operator|=
name|outputMode
expr_stmt|;
name|this
operator|.
name|pluginName
operator|=
name|pluginToRemove
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|PluginManager
name|pluginManager
init|=
operator|new
name|PluginManager
argument_list|(
name|env
argument_list|,
literal|null
argument_list|,
name|outputMode
argument_list|,
name|DEFAULT_TIMEOUT
argument_list|)
decl_stmt|;
name|terminal
operator|.
name|println
argument_list|(
literal|"-> Removing "
operator|+
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|pluginName
argument_list|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|pluginManager
operator|.
name|removePlugin
argument_list|(
name|pluginName
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
return|return
name|ExitStatus
operator|.
name|OK
return|;
block|}
block|}
comment|/**      * Installs a plugin      */
DECL|class|Install
specifier|static
class|class
name|Install
extends|extends
name|Command
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"install"
decl_stmt|;
DECL|field|CMD
specifier|private
specifier|static
specifier|final
name|CliToolConfig
operator|.
name|Cmd
name|CMD
init|=
name|cmd
argument_list|(
name|NAME
argument_list|,
name|Install
operator|.
name|class
argument_list|)
operator|.
name|options
argument_list|(
name|option
argument_list|(
literal|"t"
argument_list|,
literal|"timeout"
argument_list|)
operator|.
name|required
argument_list|(
literal|false
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|parse
specifier|static
name|Command
name|parse
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
block|{
name|String
index|[]
name|args
init|=
name|cli
operator|.
name|getArgs
argument_list|()
decl_stmt|;
comment|// install [plugin-name/url]
if|if
condition|(
operator|(
name|args
operator|==
literal|null
operator|)
operator|||
operator|(
name|args
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
return|return
name|exitCmd
argument_list|(
name|ExitStatus
operator|.
name|USAGE
argument_list|,
name|terminal
argument_list|,
literal|"plugin name or url is missing (type -h for help)"
argument_list|)
return|;
block|}
name|String
name|name
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|URL
name|optionalPluginUrl
init|=
literal|null
decl_stmt|;
comment|// try parsing cli argument as URL
try|try
block|{
name|optionalPluginUrl
operator|=
operator|new
name|URL
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// we tried to parse the cli argument as url and failed
comment|// continue treating it as a symbolic plugin name like `analysis-icu` etc.
block|}
name|TimeValue
name|timeout
init|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"t"
argument_list|)
argument_list|,
name|DEFAULT_TIMEOUT
argument_list|,
literal|"cli"
argument_list|)
decl_stmt|;
name|OutputMode
name|outputMode
init|=
name|OutputMode
operator|.
name|DEFAULT
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
name|outputMode
operator|=
name|OutputMode
operator|.
name|SILENT
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"v"
argument_list|)
condition|)
block|{
name|outputMode
operator|=
name|OutputMode
operator|.
name|VERBOSE
expr_stmt|;
block|}
return|return
operator|new
name|Install
argument_list|(
name|terminal
argument_list|,
name|name
argument_list|,
name|outputMode
argument_list|,
name|optionalPluginUrl
argument_list|,
name|timeout
argument_list|)
return|;
block|}
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|outputMode
specifier|private
name|OutputMode
name|outputMode
decl_stmt|;
DECL|field|url
specifier|final
name|URL
name|url
decl_stmt|;
DECL|field|timeout
specifier|final
name|TimeValue
name|timeout
decl_stmt|;
DECL|method|Install
name|Install
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|String
name|name
parameter_list|,
name|OutputMode
name|outputMode
parameter_list|,
name|URL
name|url
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
block|{
name|super
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|outputMode
operator|=
name|outputMode
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|PluginManager
name|pluginManager
init|=
operator|new
name|PluginManager
argument_list|(
name|env
argument_list|,
name|url
argument_list|,
name|outputMode
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|terminal
operator|.
name|println
argument_list|(
literal|"-> Installing "
operator|+
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|name
argument_list|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|terminal
operator|.
name|println
argument_list|(
literal|"-> Installing from "
operator|+
name|url
operator|+
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|pluginManager
operator|.
name|downloadAndExtract
argument_list|(
name|name
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
return|return
name|ExitStatus
operator|.
name|OK
return|;
block|}
block|}
block|}
end_class

end_unit

