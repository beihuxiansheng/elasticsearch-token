begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * An input stream that allows to add a listener to monitor progress  * The listener is triggered whenever a full percent is increased  * The listener is never triggered twice on the same percentage  * The listener will always return 99 percent, if the expectedTotalSize is exceeded, until it is finished  *  * Only used by the InstallPluginCommand, thus package private here  */
end_comment

begin_class
DECL|class|ProgressInputStream
specifier|abstract
class|class
name|ProgressInputStream
extends|extends
name|FilterInputStream
block|{
DECL|field|expectedTotalSize
specifier|private
specifier|final
name|int
name|expectedTotalSize
decl_stmt|;
DECL|field|currentPercent
specifier|private
name|int
name|currentPercent
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|method|ProgressInputStream
name|ProgressInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|int
name|expectedTotalSize
parameter_list|)
block|{
name|super
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|this
operator|.
name|expectedTotalSize
operator|=
name|expectedTotalSize
expr_stmt|;
name|this
operator|.
name|currentPercent
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|checkProgress
argument_list|(
name|read
operator|==
operator|-
literal|1
condition|?
operator|-
literal|1
else|:
literal|1
argument_list|)
expr_stmt|;
return|return
name|read
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|byteCount
init|=
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|checkProgress
argument_list|(
name|byteCount
argument_list|)
expr_stmt|;
return|return
name|byteCount
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|checkProgress
name|void
name|checkProgress
parameter_list|(
name|int
name|byteCount
parameter_list|)
block|{
comment|// are we done?
if|if
condition|(
name|byteCount
operator|==
operator|-
literal|1
condition|)
block|{
name|currentPercent
operator|=
literal|100
expr_stmt|;
name|onProgress
argument_list|(
name|currentPercent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|count
operator|+=
name|byteCount
expr_stmt|;
comment|// rounding up to 100% would mean we say we are done, before we are...
comment|// this also catches issues, when expectedTotalSize was guessed wrong
name|int
name|percent
init|=
name|Math
operator|.
name|min
argument_list|(
literal|99
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
literal|100.0
operator|*
name|count
operator|/
name|expectedTotalSize
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|percent
operator|>
name|currentPercent
condition|)
block|{
name|currentPercent
operator|=
name|percent
expr_stmt|;
name|onProgress
argument_list|(
name|percent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|onProgress
specifier|public
name|void
name|onProgress
parameter_list|(
name|int
name|percent
parameter_list|)
block|{}
block|}
end_class

end_unit

