begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Encapsulates platform-dependent methods for handling native components of plugins.  */
end_comment

begin_class
DECL|class|Platforms
specifier|public
class|class
name|Platforms
block|{
DECL|field|PROGRAM_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PROGRAM_NAME
init|=
name|Constants
operator|.
name|WINDOWS
condition|?
literal|"controller.exe"
else|:
literal|"controller"
decl_stmt|;
DECL|field|PLATFORM_NAME
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_NAME
init|=
name|Platforms
operator|.
name|platformName
argument_list|(
name|Constants
operator|.
name|OS_NAME
argument_list|,
name|Constants
operator|.
name|OS_ARCH
argument_list|)
decl_stmt|;
DECL|method|Platforms
specifier|private
name|Platforms
parameter_list|()
block|{}
comment|/**      * The path to the native controller for a plugin with native components.      */
DECL|method|nativeControllerPath
specifier|public
specifier|static
name|Path
name|nativeControllerPath
parameter_list|(
name|Path
name|plugin
parameter_list|)
block|{
return|return
name|plugin
operator|.
name|resolve
argument_list|(
literal|"platform"
argument_list|)
operator|.
name|resolve
argument_list|(
name|PLATFORM_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
name|PROGRAM_NAME
argument_list|)
return|;
block|}
comment|/**      * Return the platform name based on the OS name and      * - darwin-x86_64      * - linux-x86-64      * - windows-x86_64      * For *nix platforms this is more-or-less `uname -s`-`uname -m` converted to lower case.      * However, for consistency between different operating systems on the same architecture      * "amd64" is replaced with "x86_64" and "i386" with "x86".      * For Windows it's "windows-" followed by either "x86" or "x86_64".      */
DECL|method|platformName
specifier|public
specifier|static
name|String
name|platformName
parameter_list|(
specifier|final
name|String
name|osName
parameter_list|,
specifier|final
name|String
name|osArch
parameter_list|)
block|{
specifier|final
name|String
name|lowerCaseOs
init|=
name|osName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|String
name|normalizedOs
decl_stmt|;
if|if
condition|(
name|lowerCaseOs
operator|.
name|startsWith
argument_list|(
literal|"windows"
argument_list|)
condition|)
block|{
name|normalizedOs
operator|=
literal|"windows"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lowerCaseOs
operator|.
name|equals
argument_list|(
literal|"mac os x"
argument_list|)
condition|)
block|{
name|normalizedOs
operator|=
literal|"darwin"
expr_stmt|;
block|}
else|else
block|{
name|normalizedOs
operator|=
name|lowerCaseOs
expr_stmt|;
block|}
specifier|final
name|String
name|lowerCaseArch
init|=
name|osArch
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|String
name|normalizedArch
decl_stmt|;
if|if
condition|(
name|lowerCaseArch
operator|.
name|equals
argument_list|(
literal|"amd64"
argument_list|)
condition|)
block|{
name|normalizedArch
operator|=
literal|"x86_64"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lowerCaseArch
operator|.
name|equals
argument_list|(
literal|"i386"
argument_list|)
condition|)
block|{
name|normalizedArch
operator|=
literal|"x86"
expr_stmt|;
block|}
else|else
block|{
name|normalizedArch
operator|=
name|lowerCaseArch
expr_stmt|;
block|}
return|return
name|normalizedOs
operator|+
literal|"-"
operator|+
name|normalizedArch
return|;
block|}
block|}
end_class

end_unit

