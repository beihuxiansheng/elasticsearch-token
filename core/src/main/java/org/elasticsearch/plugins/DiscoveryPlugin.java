begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalyzerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|CharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
operator|.
name|AnalysisProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_comment
comment|/**  * An additional extension point for {@link Plugin}s that extends Elasticsearch's discovery functionality. To add an additional  * {@link NetworkService.CustomNameResolver} just implement the interface and implement the {@link #getCustomNameResolver(Settings)} method:  *  *<pre>{@code  * public class MyDiscoveryPlugin extends Plugin implements DiscoveryPlugin {  *&#64;Override  *     public NetworkService.CustomNameResolver getCustomNameResolver(Settings settings) {  *         return new YourCustomNameResolverInstance(settings);  *     }  * }  * }</pre>  */
end_comment

begin_interface
DECL|interface|DiscoveryPlugin
specifier|public
interface|interface
name|DiscoveryPlugin
block|{
comment|/**      * Override to add additional {@link NetworkService.CustomNameResolver}s.      */
DECL|method|getCustomNameResolver
specifier|default
name|NetworkService
operator|.
name|CustomNameResolver
name|getCustomNameResolver
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Generate Custom Name Resolvers list based on a Discovery Plugins list      * @param discoveryPlugins Discovery plugins list      */
DECL|method|generateCustomNameResolvers
specifier|static
name|List
argument_list|<
name|NetworkService
operator|.
name|CustomNameResolver
argument_list|>
name|generateCustomNameResolvers
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|List
argument_list|<
name|DiscoveryPlugin
argument_list|>
name|discoveryPlugins
parameter_list|)
block|{
name|List
argument_list|<
name|NetworkService
operator|.
name|CustomNameResolver
argument_list|>
name|customNameResolvers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DiscoveryPlugin
name|discoveryPlugin
range|:
name|discoveryPlugins
control|)
block|{
name|NetworkService
operator|.
name|CustomNameResolver
name|customNameResolver
init|=
name|discoveryPlugin
operator|.
name|getCustomNameResolver
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|customNameResolver
operator|!=
literal|null
condition|)
block|{
name|customNameResolvers
operator|.
name|add
argument_list|(
name|customNameResolver
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|customNameResolvers
return|;
block|}
block|}
end_interface

end_unit

