begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|FromXContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * Snapshot metadata file format used before v2.0  */
end_comment

begin_class
DECL|class|LegacyBlobStoreFormat
specifier|public
class|class
name|LegacyBlobStoreFormat
parameter_list|<
name|T
extends|extends
name|ToXContent
parameter_list|>
extends|extends
name|BlobStoreFormat
argument_list|<
name|T
argument_list|>
block|{
comment|/**      * @param blobNameFormat format of the blobname in {@link String#format} format      * @param reader the prototype object that can deserialize objects with type T      */
DECL|method|LegacyBlobStoreFormat
specifier|public
name|LegacyBlobStoreFormat
parameter_list|(
name|String
name|blobNameFormat
parameter_list|,
name|FromXContentBuilder
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|)
block|{
name|super
argument_list|(
name|blobNameFormat
argument_list|,
name|reader
argument_list|,
name|parseFieldMatcher
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads and parses the blob with given name.      *      * If required the checksum of the blob will be verified.      *      * @param blobContainer blob container      * @param blobName blob name      * @return parsed blob object      * @throws IOException      */
DECL|method|readBlob
specifier|public
name|T
name|readBlob
parameter_list|(
name|BlobContainer
name|blobContainer
parameter_list|,
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|inputStream
init|=
name|blobContainer
operator|.
name|readBlob
argument_list|(
name|blobName
argument_list|)
init|)
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
name|inputStream
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return
name|read
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

