begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RateLimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|NotXContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|OutputStreamStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|metrics
operator|.
name|CounterMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|blobstore
operator|.
name|BlobStoreIndexShardRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|blobstore
operator|.
name|BlobStoreIndexShardRepository
operator|.
name|RateLimiterListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositorySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryVerificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotShardFailure
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * BlobStore - based implementation of Snapshot Repository  *<p>  * This repository works with any {@link BlobStore} implementation. The blobStore should be initialized in the derived  * class before {@link #doStart()} is called.  *<p>  * BlobStoreRepository maintains the following structure in the blob store  *<pre>  * {@code  *   STORE_ROOT  *   |- index             - list of all snapshot name as JSON array  *   |- snapshot-20131010 - JSON serialized Snapshot for snapshot "20131010"  *   |- meta-20131010.dat - JSON serialized MetaData for snapshot "20131010" (includes only global metadata)  *   |- snapshot-20131011 - JSON serialized Snapshot for snapshot "20131011"  *   |- meta-20131011.dat - JSON serialized MetaData for snapshot "20131011"  *   .....  *   |- indices/ - data for all indices  *      |- foo/ - data for index "foo"  *      |  |- meta-20131010.dat - JSON Serialized IndexMetaData for index "foo"  *      |  |- 0/ - data for shard "0" of index "foo"  *      |  |  |- __1 \  *      |  |  |- __2 |  *      |  |  |- __3 |- files from different segments see snapshot-* for their mappings to real segment files  *      |  |  |- __4 |  *      |  |  |- __5 /  *      |  |  .....  *      |  |  |- snap-20131010.dat - JSON serialized BlobStoreIndexShardSnapshot for snapshot "20131010"  *      |  |  |- snap-20131011.dat - JSON serialized BlobStoreIndexShardSnapshot for snapshot "20131011"  *      |  |  |- list-123 - JSON serialized BlobStoreIndexShardSnapshot for snapshot "20131011"  *      |  |  *      |  |- 1/ - data for shard "1" of index "foo"  *      |  |  |- __1  *      |  |  .....  *      |  |  *      |  |-2/  *      |  ......  *      |  *      |- bar/ - data for index bar  *      ......  * }  *</pre>  */
end_comment

begin_class
DECL|class|BlobStoreRepository
specifier|public
specifier|abstract
class|class
name|BlobStoreRepository
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|Repository
argument_list|>
implements|implements
name|Repository
implements|,
name|RateLimiterListener
block|{
DECL|field|snapshotsBlobContainer
specifier|private
name|BlobContainer
name|snapshotsBlobContainer
decl_stmt|;
DECL|field|repositoryName
specifier|protected
specifier|final
name|String
name|repositoryName
decl_stmt|;
DECL|field|LEGACY_SNAPSHOT_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LEGACY_SNAPSHOT_PREFIX
init|=
literal|"snapshot-"
decl_stmt|;
DECL|field|SNAPSHOT_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_PREFIX
init|=
literal|"snap-"
decl_stmt|;
DECL|field|SNAPSHOT_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_SUFFIX
init|=
literal|".dat"
decl_stmt|;
DECL|field|COMMON_SNAPSHOT_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|COMMON_SNAPSHOT_PREFIX
init|=
literal|"snap"
decl_stmt|;
DECL|field|SNAPSHOT_CODEC
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_CODEC
init|=
literal|"snapshot"
decl_stmt|;
DECL|field|SNAPSHOTS_FILE
specifier|static
specifier|final
name|String
name|SNAPSHOTS_FILE
init|=
literal|"index"
decl_stmt|;
comment|// package private for unit testing
DECL|field|TESTS_FILE
specifier|private
specifier|static
specifier|final
name|String
name|TESTS_FILE
init|=
literal|"tests-"
decl_stmt|;
DECL|field|METADATA_NAME_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|METADATA_NAME_FORMAT
init|=
literal|"meta-%s.dat"
decl_stmt|;
DECL|field|LEGACY_METADATA_NAME_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|LEGACY_METADATA_NAME_FORMAT
init|=
literal|"metadata-%s"
decl_stmt|;
DECL|field|METADATA_CODEC
specifier|private
specifier|static
specifier|final
name|String
name|METADATA_CODEC
init|=
literal|"metadata"
decl_stmt|;
DECL|field|INDEX_METADATA_CODEC
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_METADATA_CODEC
init|=
literal|"index-metadata"
decl_stmt|;
DECL|field|SNAPSHOT_NAME_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_NAME_FORMAT
init|=
name|SNAPSHOT_PREFIX
operator|+
literal|"%s"
operator|+
name|SNAPSHOT_SUFFIX
decl_stmt|;
DECL|field|LEGACY_SNAPSHOT_NAME_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|LEGACY_SNAPSHOT_NAME_FORMAT
init|=
name|LEGACY_SNAPSHOT_PREFIX
operator|+
literal|"%s"
decl_stmt|;
DECL|field|indexShardRepository
specifier|private
specifier|final
name|BlobStoreIndexShardRepository
name|indexShardRepository
decl_stmt|;
DECL|field|snapshotRateLimiter
specifier|private
specifier|final
name|RateLimiter
name|snapshotRateLimiter
decl_stmt|;
DECL|field|restoreRateLimiter
specifier|private
specifier|final
name|RateLimiter
name|restoreRateLimiter
decl_stmt|;
DECL|field|snapshotRateLimitingTimeInNanos
specifier|private
specifier|final
name|CounterMetric
name|snapshotRateLimitingTimeInNanos
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
DECL|field|restoreRateLimitingTimeInNanos
specifier|private
specifier|final
name|CounterMetric
name|restoreRateLimitingTimeInNanos
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
DECL|field|globalMetaDataFormat
specifier|private
name|ChecksumBlobStoreFormat
argument_list|<
name|MetaData
argument_list|>
name|globalMetaDataFormat
decl_stmt|;
DECL|field|globalMetaDataLegacyFormat
specifier|private
name|LegacyBlobStoreFormat
argument_list|<
name|MetaData
argument_list|>
name|globalMetaDataLegacyFormat
decl_stmt|;
DECL|field|indexMetaDataFormat
specifier|private
name|ChecksumBlobStoreFormat
argument_list|<
name|IndexMetaData
argument_list|>
name|indexMetaDataFormat
decl_stmt|;
DECL|field|indexMetaDataLegacyFormat
specifier|private
name|LegacyBlobStoreFormat
argument_list|<
name|IndexMetaData
argument_list|>
name|indexMetaDataLegacyFormat
decl_stmt|;
DECL|field|snapshotFormat
specifier|private
name|ChecksumBlobStoreFormat
argument_list|<
name|SnapshotInfo
argument_list|>
name|snapshotFormat
decl_stmt|;
DECL|field|snapshotLegacyFormat
specifier|private
name|LegacyBlobStoreFormat
argument_list|<
name|SnapshotInfo
argument_list|>
name|snapshotLegacyFormat
decl_stmt|;
DECL|field|readOnly
specifier|private
specifier|final
name|boolean
name|readOnly
decl_stmt|;
comment|/**      * Constructs new BlobStoreRepository      *      * @param repositoryName       repository name      * @param repositorySettings   repository settings      * @param indexShardRepository an instance of IndexShardRepository      */
DECL|method|BlobStoreRepository
specifier|protected
name|BlobStoreRepository
parameter_list|(
name|String
name|repositoryName
parameter_list|,
name|RepositorySettings
name|repositorySettings
parameter_list|,
name|IndexShardRepository
name|indexShardRepository
parameter_list|)
block|{
name|super
argument_list|(
name|repositorySettings
operator|.
name|globalSettings
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|repositoryName
operator|=
name|repositoryName
expr_stmt|;
name|this
operator|.
name|indexShardRepository
operator|=
operator|(
name|BlobStoreIndexShardRepository
operator|)
name|indexShardRepository
expr_stmt|;
name|snapshotRateLimiter
operator|=
name|getRateLimiter
argument_list|(
name|repositorySettings
argument_list|,
literal|"max_snapshot_bytes_per_sec"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|40
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
name|restoreRateLimiter
operator|=
name|getRateLimiter
argument_list|(
name|repositorySettings
argument_list|,
literal|"max_restore_bytes_per_sec"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|40
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
name|readOnly
operator|=
name|repositorySettings
operator|.
name|settings
argument_list|()
operator|.
name|getAsBoolean
argument_list|(
literal|"readonly"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|this
operator|.
name|snapshotsBlobContainer
operator|=
name|blobStore
argument_list|()
operator|.
name|blobContainer
argument_list|(
name|basePath
argument_list|()
argument_list|)
expr_stmt|;
name|indexShardRepository
operator|.
name|initialize
argument_list|(
name|blobStore
argument_list|()
argument_list|,
name|basePath
argument_list|()
argument_list|,
name|chunkSize
argument_list|()
argument_list|,
name|snapshotRateLimiter
argument_list|,
name|restoreRateLimiter
argument_list|,
name|this
argument_list|,
name|isCompress
argument_list|()
argument_list|)
expr_stmt|;
name|ParseFieldMatcher
name|parseFieldMatcher
init|=
operator|new
name|ParseFieldMatcher
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|globalMetaDataFormat
operator|=
operator|new
name|ChecksumBlobStoreFormat
argument_list|<>
argument_list|(
name|METADATA_CODEC
argument_list|,
name|METADATA_NAME_FORMAT
argument_list|,
name|MetaData
operator|.
name|PROTO
argument_list|,
name|parseFieldMatcher
argument_list|,
name|isCompress
argument_list|()
argument_list|)
expr_stmt|;
name|globalMetaDataLegacyFormat
operator|=
operator|new
name|LegacyBlobStoreFormat
argument_list|<>
argument_list|(
name|LEGACY_METADATA_NAME_FORMAT
argument_list|,
name|MetaData
operator|.
name|PROTO
argument_list|,
name|parseFieldMatcher
argument_list|)
expr_stmt|;
name|indexMetaDataFormat
operator|=
operator|new
name|ChecksumBlobStoreFormat
argument_list|<>
argument_list|(
name|INDEX_METADATA_CODEC
argument_list|,
name|METADATA_NAME_FORMAT
argument_list|,
name|IndexMetaData
operator|.
name|PROTO
argument_list|,
name|parseFieldMatcher
argument_list|,
name|isCompress
argument_list|()
argument_list|)
expr_stmt|;
name|indexMetaDataLegacyFormat
operator|=
operator|new
name|LegacyBlobStoreFormat
argument_list|<>
argument_list|(
name|LEGACY_SNAPSHOT_NAME_FORMAT
argument_list|,
name|IndexMetaData
operator|.
name|PROTO
argument_list|,
name|parseFieldMatcher
argument_list|)
expr_stmt|;
name|snapshotFormat
operator|=
operator|new
name|ChecksumBlobStoreFormat
argument_list|<>
argument_list|(
name|SNAPSHOT_CODEC
argument_list|,
name|SNAPSHOT_NAME_FORMAT
argument_list|,
name|SnapshotInfo
operator|.
name|PROTO
argument_list|,
name|parseFieldMatcher
argument_list|,
name|isCompress
argument_list|()
argument_list|)
expr_stmt|;
name|snapshotLegacyFormat
operator|=
operator|new
name|LegacyBlobStoreFormat
argument_list|<>
argument_list|(
name|LEGACY_SNAPSHOT_NAME_FORMAT
argument_list|,
name|SnapshotInfo
operator|.
name|PROTO
argument_list|,
name|parseFieldMatcher
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{     }
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{
try|try
block|{
name|blobStore
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cannot close blob store"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns initialized and ready to use BlobStore      *<p>      * This method is first called in the {@link #doStart()} method.      *      * @return blob store      */
DECL|method|blobStore
specifier|protected
specifier|abstract
name|BlobStore
name|blobStore
parameter_list|()
function_decl|;
comment|/**      * Returns base path of the repository      */
DECL|method|basePath
specifier|protected
specifier|abstract
name|BlobPath
name|basePath
parameter_list|()
function_decl|;
comment|/**      * Returns true if metadata and snapshot files should be compressed      *      * @return true if compression is needed      */
DECL|method|isCompress
specifier|protected
name|boolean
name|isCompress
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Returns data file chunk size.      *<p>      * This method should return null if no chunking is needed.      *      * @return chunk size      */
DECL|method|chunkSize
specifier|protected
name|ByteSizeValue
name|chunkSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|initializeSnapshot
specifier|public
name|void
name|initializeSnapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
block|{
if|if
condition|(
name|readOnly
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|this
operator|.
name|repositoryName
argument_list|,
literal|"cannot create snapshot in a readonly repository"
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|String
name|snapshotName
init|=
name|snapshotId
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// check if the snapshot name already exists in the repository
if|if
condition|(
name|snapshots
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|s
lambda|->
name|s
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshotName
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
argument_list|new
name|SnapshotCreationException
argument_list|(
name|repositoryName
argument_list|,
name|snapshotId
argument_list|,
literal|"snapshot with the same name already exists"
argument_list|)
block|;             }
if|if
condition|(
name|snapshotFormat
operator|.
name|exists
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|blobId
argument_list|(
name|snapshotId
argument_list|)
argument_list|)
operator|||
name|snapshotLegacyFormat
operator|.
name|exists
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|snapshotName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
name|repositoryName
argument_list|,
name|snapshotId
argument_list|,
literal|"snapshot with such name already exists"
argument_list|)
throw|;
block|}
comment|// Write Global MetaData
name|globalMetaDataFormat
operator|.
name|write
argument_list|(
name|metaData
argument_list|,
name|snapshotsBlobContainer
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|BlobPath
name|indexPath
init|=
name|basePath
argument_list|()
operator|.
name|add
argument_list|(
literal|"indices"
argument_list|)
operator|.
name|add
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|BlobContainer
name|indexMetaDataBlobContainer
init|=
name|blobStore
argument_list|()
operator|.
name|blobContainer
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
name|indexMetaDataFormat
operator|.
name|write
argument_list|(
name|indexMetaData
argument_list|,
name|indexMetaDataBlobContainer
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
name|repositoryName
argument_list|,
name|snapshotId
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|deleteSnapshot
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
if|if
condition|(
name|readOnly
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|this
operator|.
name|repositoryName
argument_list|,
literal|"cannot delete snapshot from a readonly repository"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|indices
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|SnapshotInfo
name|snapshot
init|=
literal|null
decl_stmt|;
try|try
block|{
name|snapshot
operator|=
name|readSnapshot
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
name|indices
operator|=
name|snapshot
operator|.
name|indices
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotMissingException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
decl||
name|SnapshotException
decl||
name|ElasticsearchParseException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cannot read snapshot file [{}]"
argument_list|,
name|ex
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
name|MetaData
name|metaData
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|snapshot
operator|!=
literal|null
condition|)
block|{
name|metaData
operator|=
name|readSnapshotMetaData
argument_list|(
name|snapshotId
argument_list|,
name|snapshot
operator|.
name|version
argument_list|()
argument_list|,
name|indices
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metaData
operator|=
name|readSnapshotMetaData
argument_list|(
name|snapshotId
argument_list|,
literal|null
argument_list|,
name|indices
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SnapshotException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cannot read metadata for snapshot [{}]"
argument_list|,
name|ex
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|String
name|snapshotName
init|=
name|snapshotId
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Delete snapshot file first so we wouldn't end up with partially deleted snapshot that looks OK
if|if
condition|(
name|snapshot
operator|!=
literal|null
condition|)
block|{
name|snapshotFormat
argument_list|(
name|snapshot
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|blobId
argument_list|(
name|snapshotId
argument_list|)
argument_list|)
expr_stmt|;
name|globalMetaDataFormat
argument_list|(
name|snapshot
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We don't know which version was the snapshot created with - try deleting both current and legacy formats
name|snapshotFormat
operator|.
name|delete
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|blobId
argument_list|(
name|snapshotId
argument_list|)
argument_list|)
expr_stmt|;
name|snapshotLegacyFormat
operator|.
name|delete
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|globalMetaDataLegacyFormat
operator|.
name|delete
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|globalMetaDataFormat
operator|.
name|delete
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
comment|// Delete snapshot from the snapshot list
name|List
argument_list|<
name|SnapshotId
argument_list|>
name|snapshotIds
init|=
name|snapshots
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|id
lambda|->
name|snapshotId
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|==
literal|false
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|writeSnapshotList
argument_list|(
name|snapshotIds
argument_list|)
expr_stmt|;
comment|// Now delete all indices
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|BlobPath
name|indexPath
init|=
name|basePath
argument_list|()
operator|.
name|add
argument_list|(
literal|"indices"
argument_list|)
operator|.
name|add
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|BlobContainer
name|indexMetaDataBlobContainer
init|=
name|blobStore
argument_list|()
operator|.
name|blobContainer
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
try|try
block|{
name|indexMetaDataFormat
argument_list|(
name|snapshot
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|indexMetaDataBlobContainer
argument_list|,
name|snapshotId
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to delete metadata for index [{}]"
argument_list|,
name|ex
argument_list|,
name|snapshotId
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metaData
operator|!=
literal|null
condition|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|shardId
init|=
literal|0
init|;
name|shardId
operator|<
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|shardId
operator|++
control|)
block|{
try|try
block|{
name|indexShardRepository
operator|.
name|delete
argument_list|(
name|snapshotId
argument_list|,
name|snapshot
operator|.
name|version
argument_list|()
argument_list|,
operator|new
name|ShardId
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|,
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to delete shard data for shard [{}][{}]"
argument_list|,
name|ex
argument_list|,
name|snapshotId
argument_list|,
name|index
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|this
operator|.
name|repositoryName
argument_list|,
literal|"failed to update snapshot in repository"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|finalizeSnapshot
specifier|public
name|SnapshotInfo
name|finalizeSnapshot
parameter_list|(
specifier|final
name|SnapshotId
name|snapshotId
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|,
specifier|final
name|long
name|startTime
parameter_list|,
specifier|final
name|String
name|failure
parameter_list|,
specifier|final
name|int
name|totalShards
parameter_list|,
specifier|final
name|List
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|shardFailures
parameter_list|)
block|{
try|try
block|{
name|SnapshotInfo
name|blobStoreSnapshot
init|=
operator|new
name|SnapshotInfo
argument_list|(
name|snapshotId
argument_list|,
name|indices
argument_list|,
name|startTime
argument_list|,
name|failure
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|totalShards
argument_list|,
name|shardFailures
argument_list|)
decl_stmt|;
name|snapshotFormat
operator|.
name|write
argument_list|(
name|blobStoreSnapshot
argument_list|,
name|snapshotsBlobContainer
argument_list|,
name|blobId
argument_list|(
name|snapshotId
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SnapshotId
argument_list|>
name|snapshotIds
init|=
name|snapshots
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|snapshotIds
operator|.
name|contains
argument_list|(
name|snapshotId
argument_list|)
condition|)
block|{
name|snapshotIds
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|snapshotIds
argument_list|)
expr_stmt|;
name|snapshotIds
operator|.
name|add
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
name|snapshotIds
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|snapshotIds
argument_list|)
expr_stmt|;
block|}
name|writeSnapshotList
argument_list|(
name|snapshotIds
argument_list|)
expr_stmt|;
return|return
name|blobStoreSnapshot
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|this
operator|.
name|repositoryName
argument_list|,
literal|"failed to update snapshot in repository"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|snapshots
specifier|public
name|List
argument_list|<
name|SnapshotId
argument_list|>
name|snapshots
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|SnapshotId
argument_list|>
name|snapshots
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
decl_stmt|;
try|try
block|{
name|blobs
operator|=
name|snapshotsBlobContainer
operator|.
name|listBlobsByPrefix
argument_list|(
name|COMMON_SNAPSHOT_PREFIX
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{
comment|// Fall back in case listBlobsByPrefix isn't supported by the blob store
return|return
name|readSnapshotList
argument_list|()
return|;
block|}
name|int
name|prefixLength
init|=
name|SNAPSHOT_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|suffixLength
init|=
name|SNAPSHOT_SUFFIX
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|legacyPrefixLength
init|=
name|LEGACY_SNAPSHOT_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|BlobMetaData
name|md
range|:
name|blobs
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|blobName
init|=
name|md
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
name|String
name|uuid
decl_stmt|;
if|if
condition|(
name|blobName
operator|.
name|startsWith
argument_list|(
name|SNAPSHOT_PREFIX
argument_list|)
operator|&&
name|blobName
operator|.
name|length
argument_list|()
operator|>
name|legacyPrefixLength
condition|)
block|{
specifier|final
name|String
name|str
init|=
name|blobName
operator|.
name|substring
argument_list|(
name|prefixLength
argument_list|,
name|blobName
operator|.
name|length
argument_list|()
operator|-
name|suffixLength
argument_list|)
decl_stmt|;
comment|// TODO: this will go away once we make the snapshot file writes atomic and
comment|// use it as the source of truth for the snapshots list instead of listing blobs
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|parseNameUUIDFromBlobName
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|name
operator|=
name|pair
operator|.
name|v1
argument_list|()
expr_stmt|;
name|uuid
operator|=
name|pair
operator|.
name|v2
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blobName
operator|.
name|startsWith
argument_list|(
name|LEGACY_SNAPSHOT_PREFIX
argument_list|)
operator|&&
name|blobName
operator|.
name|length
argument_list|()
operator|>
name|suffixLength
operator|+
name|prefixLength
condition|)
block|{
name|name
operator|=
name|blobName
operator|.
name|substring
argument_list|(
name|legacyPrefixLength
argument_list|)
expr_stmt|;
name|uuid
operator|=
name|SnapshotId
operator|.
name|UNASSIGNED_UUID
expr_stmt|;
block|}
else|else
block|{
comment|// not sure what it was - ignore
continue|continue;
block|}
name|snapshots
operator|.
name|add
argument_list|(
operator|new
name|SnapshotId
argument_list|(
name|name
argument_list|,
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|snapshots
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|repositoryName
argument_list|,
literal|"failed to list snapshots in repository"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|readSnapshotMetaData
specifier|public
name|MetaData
name|readSnapshotMetaData
parameter_list|(
name|SnapshotInfo
name|snapshot
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readSnapshotMetaData
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|,
name|snapshot
operator|.
name|version
argument_list|()
argument_list|,
name|indices
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readSnapshot
specifier|public
name|SnapshotInfo
name|readSnapshot
parameter_list|(
specifier|final
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
try|try
block|{
return|return
name|snapshotFormat
operator|.
name|read
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|blobId
argument_list|(
name|snapshotId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
comment|// File is missing - let's try legacy format instead
try|try
block|{
return|return
name|snapshotLegacyFormat
operator|.
name|read
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|snapshotId
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex1
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotMissingException
argument_list|(
name|repositoryName
argument_list|,
name|snapshotId
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|NotXContentException
name|ex1
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
name|repositoryName
argument_list|,
name|snapshotId
argument_list|,
literal|"failed to get snapshots"
argument_list|,
name|ex1
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|NotXContentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
name|repositoryName
argument_list|,
name|snapshotId
argument_list|,
literal|"failed to get snapshots"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|readSnapshotMetaData
specifier|private
name|MetaData
name|readSnapshotMetaData
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|Version
name|snapshotVersion
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|,
name|boolean
name|ignoreIndexErrors
parameter_list|)
throws|throws
name|IOException
block|{
name|MetaData
name|metaData
decl_stmt|;
if|if
condition|(
name|snapshotVersion
operator|==
literal|null
condition|)
block|{
comment|// When we delete corrupted snapshots we might not know which version we are dealing with
comment|// We can try detecting the version based on the metadata file format
assert|assert
name|ignoreIndexErrors
assert|;
if|if
condition|(
name|globalMetaDataFormat
operator|.
name|exists
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|snapshotId
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|snapshotVersion
operator|=
name|Version
operator|.
name|CURRENT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|globalMetaDataLegacyFormat
operator|.
name|exists
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|snapshotId
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
name|repositoryName
argument_list|,
name|snapshotId
argument_list|,
literal|"snapshot is too old"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SnapshotMissingException
argument_list|(
name|repositoryName
argument_list|,
name|snapshotId
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|metaData
operator|=
name|globalMetaDataFormat
argument_list|(
name|snapshotVersion
argument_list|)
operator|.
name|read
argument_list|(
name|snapshotsBlobContainer
argument_list|,
name|snapshotId
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotMissingException
argument_list|(
name|repositoryName
argument_list|,
name|snapshotId
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
name|repositoryName
argument_list|,
name|snapshotId
argument_list|,
literal|"failed to get snapshots"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|BlobPath
name|indexPath
init|=
name|basePath
argument_list|()
operator|.
name|add
argument_list|(
literal|"indices"
argument_list|)
operator|.
name|add
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|BlobContainer
name|indexMetaDataBlobContainer
init|=
name|blobStore
argument_list|()
operator|.
name|blobContainer
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
try|try
block|{
name|metaDataBuilder
operator|.
name|put
argument_list|(
name|indexMetaDataFormat
argument_list|(
name|snapshotVersion
argument_list|)
operator|.
name|read
argument_list|(
name|indexMetaDataBlobContainer
argument_list|,
name|snapshotId
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
decl||
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ignoreIndexErrors
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] [{}] failed to read metadata for index"
argument_list|,
name|ex
argument_list|,
name|snapshotId
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
return|return
name|metaDataBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Configures RateLimiter based on repository and global settings      *      * @param repositorySettings repository settings      * @param setting            setting to use to configure rate limiter      * @param defaultRate        default limiting rate      * @return rate limiter or null of no throttling is needed      */
DECL|method|getRateLimiter
specifier|private
name|RateLimiter
name|getRateLimiter
parameter_list|(
name|RepositorySettings
name|repositorySettings
parameter_list|,
name|String
name|setting
parameter_list|,
name|ByteSizeValue
name|defaultRate
parameter_list|)
block|{
name|ByteSizeValue
name|maxSnapshotBytesPerSec
init|=
name|repositorySettings
operator|.
name|settings
argument_list|()
operator|.
name|getAsBytesSize
argument_list|(
name|setting
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|setting
argument_list|,
name|defaultRate
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxSnapshotBytesPerSec
operator|.
name|bytes
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|RateLimiter
operator|.
name|SimpleRateLimiter
argument_list|(
name|maxSnapshotBytesPerSec
operator|.
name|mbFrac
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns appropriate global metadata format based on the provided version of the snapshot      */
DECL|method|globalMetaDataFormat
specifier|private
name|BlobStoreFormat
argument_list|<
name|MetaData
argument_list|>
name|globalMetaDataFormat
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
if|if
condition|(
name|legacyMetaData
argument_list|(
name|version
argument_list|)
condition|)
block|{
return|return
name|globalMetaDataLegacyFormat
return|;
block|}
else|else
block|{
return|return
name|globalMetaDataFormat
return|;
block|}
block|}
comment|/**      * Returns appropriate snapshot format based on the provided version of the snapshot      */
DECL|method|snapshotFormat
specifier|private
name|BlobStoreFormat
argument_list|<
name|SnapshotInfo
argument_list|>
name|snapshotFormat
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
if|if
condition|(
name|legacyMetaData
argument_list|(
name|version
argument_list|)
condition|)
block|{
return|return
name|snapshotLegacyFormat
return|;
block|}
else|else
block|{
return|return
name|snapshotFormat
return|;
block|}
block|}
comment|/**      * In v2.0.0 we changed the metadata file format      * @return true if legacy version should be used false otherwise      */
DECL|method|legacyMetaData
specifier|public
specifier|static
name|boolean
name|legacyMetaData
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
return|return
name|version
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|)
return|;
block|}
comment|/**      * Returns appropriate index metadata format based on the provided version of the snapshot      */
DECL|method|indexMetaDataFormat
specifier|private
name|BlobStoreFormat
argument_list|<
name|IndexMetaData
argument_list|>
name|indexMetaDataFormat
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
if|if
condition|(
name|legacyMetaData
argument_list|(
name|version
argument_list|)
condition|)
block|{
return|return
name|indexMetaDataLegacyFormat
return|;
block|}
else|else
block|{
return|return
name|indexMetaDataFormat
return|;
block|}
block|}
DECL|field|SNAPSHOTS
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOTS
init|=
literal|"snapshots"
decl_stmt|;
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|UUID
specifier|private
specifier|static
specifier|final
name|String
name|UUID
init|=
literal|"uuid"
decl_stmt|;
comment|/**      * Writes snapshot index file      *<p>      * This file can be used by read-only repositories that are unable to list files in the repository      *      * @param snapshots list of snapshot ids      * @throws IOException I/O errors      */
DECL|method|writeSnapshotList
specifier|protected
name|void
name|writeSnapshotList
parameter_list|(
name|List
argument_list|<
name|SnapshotId
argument_list|>
name|snapshots
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesReference
name|bRef
decl_stmt|;
try|try
init|(
name|BytesStreamOutput
name|bStream
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
try|try
init|(
name|StreamOutput
name|stream
init|=
operator|new
name|OutputStreamStreamOutput
argument_list|(
name|bStream
argument_list|)
init|)
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|SNAPSHOTS
argument_list|)
expr_stmt|;
for|for
control|(
name|SnapshotId
name|snapshot
range|:
name|snapshots
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|NAME
argument_list|,
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|UUID
argument_list|,
name|snapshot
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|bRef
operator|=
name|bStream
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|snapshotsBlobContainer
operator|.
name|blobExists
argument_list|(
name|SNAPSHOTS_FILE
argument_list|)
condition|)
block|{
name|snapshotsBlobContainer
operator|.
name|deleteBlob
argument_list|(
name|SNAPSHOTS_FILE
argument_list|)
expr_stmt|;
block|}
name|snapshotsBlobContainer
operator|.
name|writeBlob
argument_list|(
name|SNAPSHOTS_FILE
argument_list|,
name|bRef
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads snapshot index file      *<p>      * This file can be used by read-only repositories that are unable to list files in the repository      *      * @return list of snapshots in the repository      * @throws IOException I/O errors      */
DECL|method|readSnapshotList
specifier|protected
name|List
argument_list|<
name|SnapshotId
argument_list|>
name|readSnapshotList
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|blob
init|=
name|snapshotsBlobContainer
operator|.
name|readBlob
argument_list|(
name|SNAPSHOTS_FILE
argument_list|)
init|)
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
name|blob
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|SnapshotId
argument_list|>
name|snapshots
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|String
name|currentFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
if|if
condition|(
name|SNAPSHOTS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
comment|// the new format from 5.0 which contains the snapshot name and uuid
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|uuid
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|NAME
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|name
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UUID
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|uuid
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
block|}
name|snapshots
operator|.
name|add
argument_list|(
operator|new
name|SnapshotId
argument_list|(
name|name
argument_list|,
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// the old format pre 5.0 that only contains the snapshot name, use the name as the uuid too
else|else
block|{
name|name
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
name|snapshots
operator|.
name|add
argument_list|(
operator|new
name|SnapshotId
argument_list|(
name|name
argument_list|,
name|SnapshotId
operator|.
name|UNASSIGNED_UUID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|snapshots
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|onRestorePause
specifier|public
name|void
name|onRestorePause
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
name|restoreRateLimitingTimeInNanos
operator|.
name|inc
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSnapshotPause
specifier|public
name|void
name|onSnapshotPause
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
name|snapshotRateLimitingTimeInNanos
operator|.
name|inc
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|snapshotThrottleTimeInNanos
specifier|public
name|long
name|snapshotThrottleTimeInNanos
parameter_list|()
block|{
return|return
name|snapshotRateLimitingTimeInNanos
operator|.
name|count
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|restoreThrottleTimeInNanos
specifier|public
name|long
name|restoreThrottleTimeInNanos
parameter_list|()
block|{
return|return
name|restoreRateLimitingTimeInNanos
operator|.
name|count
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|startVerification
specifier|public
name|String
name|startVerification
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|readOnly
argument_list|()
condition|)
block|{
comment|// It's readonly - so there is not much we can do here to verify it
return|return
literal|null
return|;
block|}
else|else
block|{
name|String
name|seed
init|=
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
name|byte
index|[]
name|testBytes
init|=
name|Strings
operator|.
name|toUTF8Bytes
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|BlobContainer
name|testContainer
init|=
name|blobStore
argument_list|()
operator|.
name|blobContainer
argument_list|(
name|basePath
argument_list|()
operator|.
name|add
argument_list|(
name|testBlobPrefix
argument_list|(
name|seed
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|blobName
init|=
literal|"master.dat"
decl_stmt|;
name|testContainer
operator|.
name|writeBlob
argument_list|(
name|blobName
operator|+
literal|"-temp"
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|testBytes
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that move is supported
name|testContainer
operator|.
name|move
argument_list|(
name|blobName
operator|+
literal|"-temp"
argument_list|,
name|blobName
argument_list|)
expr_stmt|;
return|return
name|seed
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryVerificationException
argument_list|(
name|repositoryName
argument_list|,
literal|"path "
operator|+
name|basePath
argument_list|()
operator|+
literal|" is not accessible on master node"
argument_list|,
name|exp
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|endVerification
specifier|public
name|void
name|endVerification
parameter_list|(
name|String
name|seed
parameter_list|)
block|{
if|if
condition|(
name|readOnly
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"shouldn't be called"
argument_list|)
throw|;
block|}
try|try
block|{
name|blobStore
argument_list|()
operator|.
name|delete
argument_list|(
name|basePath
argument_list|()
operator|.
name|add
argument_list|(
name|testBlobPrefix
argument_list|(
name|seed
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryVerificationException
argument_list|(
name|repositoryName
argument_list|,
literal|"cannot delete test data at "
operator|+
name|basePath
argument_list|()
argument_list|,
name|exp
argument_list|)
throw|;
block|}
block|}
DECL|method|testBlobPrefix
specifier|public
specifier|static
name|String
name|testBlobPrefix
parameter_list|(
name|String
name|seed
parameter_list|)
block|{
return|return
name|TESTS_FILE
operator|+
name|seed
return|;
block|}
annotation|@
name|Override
DECL|method|readOnly
specifier|public
name|boolean
name|readOnly
parameter_list|()
block|{
return|return
name|readOnly
return|;
block|}
comment|// package private, only use for testing
DECL|method|blobContainer
name|BlobContainer
name|blobContainer
parameter_list|()
block|{
return|return
name|snapshotsBlobContainer
return|;
block|}
comment|// TODO: this will go away once readSnapshotsList uses the index file instead of listing blobs
comment|// to know which snapshots are part of a repository.  See #18156
comment|// Package private for testing.
DECL|method|parseNameUUIDFromBlobName
specifier|static
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseNameUUIDFromBlobName
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|String
name|uuid
decl_stmt|;
specifier|final
name|int
name|sizeOfUUID
init|=
literal|22
decl_stmt|;
comment|// uuid is 22 chars in length
comment|// unreliable, but highly unlikely to have a snapshot name with a dash followed by 22 characters,
comment|// and this will go away before a release (see #18156).
comment|//norelease
if|if
condition|(
name|str
operator|.
name|length
argument_list|()
operator|>
name|sizeOfUUID
operator|+
literal|1
operator|&&
name|str
operator|.
name|charAt
argument_list|(
name|str
operator|.
name|length
argument_list|()
operator|-
name|sizeOfUUID
operator|-
literal|1
argument_list|)
operator|==
literal|'-'
condition|)
block|{
comment|// new naming convention, snapshot blob id has name and uuid
specifier|final
name|int
name|idx
init|=
name|str
operator|.
name|length
argument_list|()
operator|-
name|sizeOfUUID
operator|-
literal|1
decl_stmt|;
name|name
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|uuid
operator|=
name|str
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// old naming convention, before snapshots had UUIDs
name|name
operator|=
name|str
expr_stmt|;
name|uuid
operator|=
name|SnapshotId
operator|.
name|UNASSIGNED_UUID
expr_stmt|;
block|}
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
name|name
argument_list|,
name|uuid
argument_list|)
return|;
block|}
comment|// Package private for testing
DECL|method|blobId
specifier|static
name|String
name|blobId
parameter_list|(
specifier|final
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
specifier|final
name|String
name|uuid
init|=
name|snapshotId
operator|.
name|getUUID
argument_list|()
decl_stmt|;
if|if
condition|(
name|uuid
operator|.
name|equals
argument_list|(
name|SnapshotId
operator|.
name|UNASSIGNED_UUID
argument_list|)
condition|)
block|{
comment|// the old snapshot blob naming
return|return
name|snapshotId
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
name|snapshotId
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|uuid
return|;
block|}
block|}
end_class

end_unit

