begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|AckedClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateApplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ack
operator|.
name|ClusterStateUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ack
operator|.
name|ClusterStateUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|RepositoriesMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|RepositoryMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|RestoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Service responsible for maintaining and providing access to snapshot repositories on nodes.  */
end_comment

begin_class
DECL|class|RepositoriesService
specifier|public
class|class
name|RepositoriesService
extends|extends
name|AbstractComponent
implements|implements
name|ClusterStateApplier
block|{
DECL|field|typesRegistry
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Repository
operator|.
name|Factory
argument_list|>
name|typesRegistry
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|verifyAction
specifier|private
specifier|final
name|VerifyNodeRepositoryAction
name|verifyAction
decl_stmt|;
DECL|field|repositories
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
name|repositories
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|RepositoriesService
specifier|public
name|RepositoriesService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Repository
operator|.
name|Factory
argument_list|>
name|typesRegistry
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|typesRegistry
operator|=
name|typesRegistry
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
comment|// Doesn't make sense to maintain repositories on non-master and non-data nodes
comment|// Nothing happens there anyway
if|if
condition|(
name|DiscoveryNode
operator|.
name|isDataNode
argument_list|(
name|settings
argument_list|)
operator|||
name|DiscoveryNode
operator|.
name|isMasterNode
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|clusterService
operator|.
name|addStateApplier
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|verifyAction
operator|=
operator|new
name|VerifyNodeRepositoryAction
argument_list|(
name|settings
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Registers new repository in the cluster      *<p>      * This method can be only called on the master node. It tries to create a new repository on the master      * and if it was successful it adds new repository to cluster metadata.      *      * @param request  register repository request      * @param listener register repository listener      */
DECL|method|registerRepository
specifier|public
name|void
name|registerRepository
parameter_list|(
specifier|final
name|RegisterRepositoryRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|RepositoryMetaData
name|newRepositoryMetaData
init|=
operator|new
name|RepositoryMetaData
argument_list|(
name|request
operator|.
name|name
argument_list|,
name|request
operator|.
name|type
argument_list|,
name|request
operator|.
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
name|registrationListener
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|verify
condition|)
block|{
name|registrationListener
operator|=
operator|new
name|VerifyingRegisterRepositoryListener
argument_list|(
name|request
operator|.
name|name
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|registrationListener
operator|=
name|listener
expr_stmt|;
block|}
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
name|request
operator|.
name|cause
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
argument_list|(
name|request
argument_list|,
name|registrationListener
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClusterStateUpdateResponse
name|newResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
return|return
operator|new
name|ClusterStateUpdateResponse
argument_list|(
name|acknowledged
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureRepositoryNotInUse
argument_list|(
name|currentState
argument_list|,
name|request
operator|.
name|name
argument_list|)
expr_stmt|;
comment|// Trying to create the new repository on master to make sure it works
if|if
condition|(
operator|!
name|registerRepository
argument_list|(
name|newRepositoryMetaData
argument_list|)
condition|)
block|{
comment|// The new repository has the same settings as the old one - ignore
return|return
name|currentState
return|;
block|}
name|MetaData
name|metaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
name|RepositoriesMetaData
name|repositories
init|=
name|metaData
operator|.
name|custom
argument_list|(
name|RepositoriesMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositories
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"put repository [{}]"
argument_list|,
name|request
operator|.
name|name
argument_list|)
expr_stmt|;
name|repositories
operator|=
operator|new
name|RepositoriesMetaData
argument_list|(
operator|new
name|RepositoryMetaData
argument_list|(
name|request
operator|.
name|name
argument_list|,
name|request
operator|.
name|type
argument_list|,
name|request
operator|.
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|RepositoryMetaData
argument_list|>
name|repositoriesMetaData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|repositories
operator|.
name|repositories
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|RepositoryMetaData
name|repositoryMetaData
range|:
name|repositories
operator|.
name|repositories
argument_list|()
control|)
block|{
if|if
condition|(
name|repositoryMetaData
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|newRepositoryMetaData
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|repositoriesMetaData
operator|.
name|add
argument_list|(
name|newRepositoryMetaData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repositoriesMetaData
operator|.
name|add
argument_list|(
name|repositoryMetaData
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"put repository [{}]"
argument_list|,
name|request
operator|.
name|name
argument_list|)
expr_stmt|;
name|repositoriesMetaData
operator|.
name|add
argument_list|(
operator|new
name|RepositoryMetaData
argument_list|(
name|request
operator|.
name|name
argument_list|,
name|request
operator|.
name|type
argument_list|,
name|request
operator|.
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"update repository [{}]"
argument_list|,
name|request
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|repositories
operator|=
operator|new
name|RepositoriesMetaData
argument_list|(
name|repositoriesMetaData
operator|.
name|toArray
argument_list|(
operator|new
name|RepositoryMetaData
index|[
name|repositoriesMetaData
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mdBuilder
operator|.
name|putCustom
argument_list|(
name|RepositoriesMetaData
operator|.
name|TYPE
argument_list|,
name|repositories
argument_list|)
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to create repository [{}]"
argument_list|,
name|request
operator|.
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|source
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mustAck
parameter_list|(
name|DiscoveryNode
name|discoveryNode
parameter_list|)
block|{
return|return
name|discoveryNode
operator|.
name|isMasterNode
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Unregisters repository in the cluster      *<p>      * This method can be only called on the master node. It removes repository information from cluster metadata.      *      * @param request  unregister repository request      * @param listener unregister repository listener      */
DECL|method|unregisterRepository
specifier|public
name|void
name|unregisterRepository
parameter_list|(
specifier|final
name|UnregisterRepositoryRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
name|request
operator|.
name|cause
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClusterStateUpdateResponse
name|newResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
return|return
operator|new
name|ClusterStateUpdateResponse
argument_list|(
name|acknowledged
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|ensureRepositoryNotInUse
argument_list|(
name|currentState
argument_list|,
name|request
operator|.
name|name
argument_list|)
expr_stmt|;
name|MetaData
name|metaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
name|RepositoriesMetaData
name|repositories
init|=
name|metaData
operator|.
name|custom
argument_list|(
name|RepositoriesMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositories
operator|!=
literal|null
operator|&&
name|repositories
operator|.
name|repositories
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|RepositoryMetaData
argument_list|>
name|repositoriesMetaData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|repositories
operator|.
name|repositories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RepositoryMetaData
name|repositoryMetaData
range|:
name|repositories
operator|.
name|repositories
argument_list|()
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|request
operator|.
name|name
argument_list|,
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"delete repository [{}]"
argument_list|,
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|repositoriesMetaData
operator|.
name|add
argument_list|(
name|repositoryMetaData
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|repositories
operator|=
operator|new
name|RepositoriesMetaData
argument_list|(
name|repositoriesMetaData
operator|.
name|toArray
argument_list|(
operator|new
name|RepositoryMetaData
index|[
name|repositoriesMetaData
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|mdBuilder
operator|.
name|putCustom
argument_list|(
name|RepositoriesMetaData
operator|.
name|TYPE
argument_list|,
name|repositories
argument_list|)
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|Regex
operator|.
name|isMatchAllPattern
argument_list|(
name|request
operator|.
name|name
argument_list|)
condition|)
block|{
comment|// we use a wildcard so we don't barf if it's not present.
return|return
name|currentState
return|;
block|}
throw|throw
operator|new
name|RepositoryMissingException
argument_list|(
name|request
operator|.
name|name
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mustAck
parameter_list|(
name|DiscoveryNode
name|discoveryNode
parameter_list|)
block|{
comment|// Since operation occurs only on masters, it's enough that only master-eligible nodes acked
return|return
name|discoveryNode
operator|.
name|isMasterNode
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRepository
specifier|public
name|void
name|verifyRepository
parameter_list|(
specifier|final
name|String
name|repositoryName
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|VerifyResponse
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|Repository
name|repository
init|=
name|repository
argument_list|(
name|repositoryName
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|verificationToken
init|=
name|repository
operator|.
name|startVerification
argument_list|()
decl_stmt|;
if|if
condition|(
name|verificationToken
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|verifyAction
operator|.
name|verify
argument_list|(
name|repositoryName
argument_list|,
name|verificationToken
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|VerifyResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|VerifyResponse
name|verifyResponse
parameter_list|)
block|{
try|try
block|{
name|repository
operator|.
name|endVerification
argument_list|(
name|verificationToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] failed to finish repository verification"
argument_list|,
name|repositoryName
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|listener
operator|.
name|onResponse
argument_list|(
name|verifyResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|repository
operator|.
name|endVerification
argument_list|(
name|verificationToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|inner
parameter_list|)
block|{
name|inner
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] failed to finish repository verification"
argument_list|,
name|repositoryName
argument_list|)
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|VerifyResponse
argument_list|(
operator|new
name|DiscoveryNode
index|[
literal|0
index|]
argument_list|,
operator|new
name|VerificationFailure
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of      * repositories accordingly.      *      * @param event cluster changed event      */
annotation|@
name|Override
DECL|method|applyClusterState
specifier|public
name|void
name|applyClusterState
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|RepositoriesMetaData
name|oldMetaData
init|=
name|event
operator|.
name|previousState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|custom
argument_list|(
name|RepositoriesMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|RepositoriesMetaData
name|newMetaData
init|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|custom
argument_list|(
name|RepositoriesMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
comment|// Check if repositories got changed
if|if
condition|(
operator|(
name|oldMetaData
operator|==
literal|null
operator|&&
name|newMetaData
operator|==
literal|null
operator|)
operator|||
operator|(
name|oldMetaData
operator|!=
literal|null
operator|&&
name|oldMetaData
operator|.
name|equals
argument_list|(
name|newMetaData
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"processing new index repositories for state version [{}]"
argument_list|,
name|event
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
name|survivors
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// First, remove repositories that are no longer there
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
name|entry
range|:
name|repositories
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|newMetaData
operator|==
literal|null
operator|||
name|newMetaData
operator|.
name|repository
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"unregistering repository [{}]"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|closeRepository
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|survivors
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
name|builder
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|newMetaData
operator|!=
literal|null
condition|)
block|{
comment|// Now go through all repositories and update existing or create missing
for|for
control|(
name|RepositoryMetaData
name|repositoryMetaData
range|:
name|newMetaData
operator|.
name|repositories
argument_list|()
control|)
block|{
name|Repository
name|repository
init|=
name|survivors
operator|.
name|get
argument_list|(
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|!=
literal|null
condition|)
block|{
comment|// Found previous version of this repository
name|RepositoryMetaData
name|previousMetadata
init|=
name|repository
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousMetadata
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|repositoryMetaData
operator|.
name|type
argument_list|()
argument_list|)
operator|==
literal|false
operator|||
name|previousMetadata
operator|.
name|settings
argument_list|()
operator|.
name|equals
argument_list|(
name|repositoryMetaData
operator|.
name|settings
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// Previous version is different from the version in settings
name|logger
operator|.
name|debug
argument_list|(
literal|"updating repository [{}]"
argument_list|,
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|closeRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|repository
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|repository
operator|=
name|createRepository
argument_list|(
name|repositoryMetaData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ex
parameter_list|)
block|{
comment|// TODO: this catch is bogus, it means the old repo is already closed,
comment|// but we have nothing to replace it
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to change repository [{}]"
argument_list|,
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|repository
operator|=
name|createRepository
argument_list|(
name|repositoryMetaData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to create repository [{}]"
argument_list|,
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|repository
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"registering repository [{}]"
argument_list|,
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|repositories
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failure updating cluster state "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns registered repository      *<p>      * This method is called only on the master node      *      * @param repositoryName repository name      * @return registered repository      * @throws RepositoryMissingException if repository with such name isn't registered      */
DECL|method|repository
specifier|public
name|Repository
name|repository
parameter_list|(
name|String
name|repositoryName
parameter_list|)
block|{
name|Repository
name|repository
init|=
name|repositories
operator|.
name|get
argument_list|(
name|repositoryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|!=
literal|null
condition|)
block|{
return|return
name|repository
return|;
block|}
throw|throw
operator|new
name|RepositoryMissingException
argument_list|(
name|repositoryName
argument_list|)
throw|;
block|}
comment|/**      * Creates a new repository and adds it to the list of registered repositories.      *<p>      * If a repository with the same name but different types or settings already exists, it will be closed and      * replaced with the new repository. If a repository with the same name exists but it has the same type and settings      * the new repository is ignored.      *      * @param repositoryMetaData new repository metadata      * @return {@code true} if new repository was added or {@code false} if it was ignored      */
DECL|method|registerRepository
specifier|private
name|boolean
name|registerRepository
parameter_list|(
name|RepositoryMetaData
name|repositoryMetaData
parameter_list|)
throws|throws
name|IOException
block|{
name|Repository
name|previous
init|=
name|repositories
operator|.
name|get
argument_list|(
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|RepositoryMetaData
name|previousMetadata
init|=
name|previous
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|previousMetadata
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|repositoryMetaData
operator|.
name|type
argument_list|()
argument_list|)
operator|&&
name|previousMetadata
operator|.
name|settings
argument_list|()
operator|.
name|equals
argument_list|(
name|repositoryMetaData
operator|.
name|settings
argument_list|()
argument_list|)
condition|)
block|{
comment|// Previous version is the same as this one - ignore it
return|return
literal|false
return|;
block|}
block|}
name|Repository
name|newRepo
init|=
name|createRepository
argument_list|(
name|repositoryMetaData
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|closeRepository
argument_list|(
name|previous
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
name|newRepositories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|repositories
argument_list|)
decl_stmt|;
name|newRepositories
operator|.
name|put
argument_list|(
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|,
name|newRepo
argument_list|)
expr_stmt|;
name|repositories
operator|=
name|newRepositories
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** Closes the given repository. */
DECL|method|closeRepository
specifier|private
name|void
name|closeRepository
parameter_list|(
name|Repository
name|repository
parameter_list|)
throws|throws
name|IOException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"closing repository [{}][{}]"
argument_list|,
name|repository
operator|.
name|getMetadata
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|repository
operator|.
name|getMetadata
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|repository
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates repository holder      */
DECL|method|createRepository
specifier|private
name|Repository
name|createRepository
parameter_list|(
name|RepositoryMetaData
name|repositoryMetaData
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"creating repository [{}][{}]"
argument_list|,
name|repositoryMetaData
operator|.
name|type
argument_list|()
argument_list|,
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|Repository
operator|.
name|Factory
name|factory
init|=
name|typesRegistry
operator|.
name|get
argument_list|(
name|repositoryMetaData
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|,
literal|"repository type ["
operator|+
name|repositoryMetaData
operator|.
name|type
argument_list|()
operator|+
literal|"] does not exist"
argument_list|)
throw|;
block|}
try|try
block|{
name|Repository
name|repository
init|=
name|factory
operator|.
name|create
argument_list|(
name|repositoryMetaData
argument_list|)
decl_stmt|;
name|repository
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|repository
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to create repository [{}][{}]"
argument_list|,
name|repositoryMetaData
operator|.
name|type
argument_list|()
argument_list|,
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|repositoryMetaData
operator|.
name|name
argument_list|()
argument_list|,
literal|"failed to create repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureRepositoryNotInUse
specifier|private
name|void
name|ensureRepositoryNotInUse
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|repository
parameter_list|)
block|{
if|if
condition|(
name|SnapshotsService
operator|.
name|isRepositoryInUse
argument_list|(
name|clusterState
argument_list|,
name|repository
argument_list|)
operator|||
name|RestoreService
operator|.
name|isRepositoryInUse
argument_list|(
name|clusterState
argument_list|,
name|repository
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"trying to modify or unregister repository that is currently used "
argument_list|)
throw|;
block|}
block|}
DECL|class|VerifyingRegisterRepositoryListener
specifier|private
class|class
name|VerifyingRegisterRepositoryListener
implements|implements
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
name|listener
decl_stmt|;
DECL|method|VerifyingRegisterRepositoryListener
name|VerifyingRegisterRepositoryListener
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
specifier|final
name|ClusterStateUpdateResponse
name|clusterStateUpdateResponse
parameter_list|)
block|{
if|if
condition|(
name|clusterStateUpdateResponse
operator|.
name|isAcknowledged
argument_list|()
condition|)
block|{
comment|// The response was acknowledged - all nodes should know about the new repository, let's verify them
name|verifyRepository
argument_list|(
name|name
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|VerifyResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|VerifyResponse
name|verifyResponse
parameter_list|)
block|{
if|if
condition|(
name|verifyResponse
operator|.
name|failed
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|RepositoryVerificationException
argument_list|(
name|name
argument_list|,
name|verifyResponse
operator|.
name|failureDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|clusterStateUpdateResponse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|clusterStateUpdateResponse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Register repository request      */
DECL|class|RegisterRepositoryRequest
specifier|public
specifier|static
class|class
name|RegisterRepositoryRequest
extends|extends
name|ClusterStateUpdateRequest
argument_list|<
name|RegisterRepositoryRequest
argument_list|>
block|{
DECL|field|cause
specifier|final
name|String
name|cause
decl_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|verify
specifier|final
name|boolean
name|verify
decl_stmt|;
DECL|field|settings
name|Settings
name|settings
init|=
name|Settings
operator|.
name|EMPTY
decl_stmt|;
comment|/**          * Constructs new register repository request          *          * @param cause repository registration cause          * @param name  repository name          * @param type  repository type          * @param verify verify repository after creation          */
DECL|method|RegisterRepositoryRequest
specifier|public
name|RegisterRepositoryRequest
parameter_list|(
name|String
name|cause
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|boolean
name|verify
parameter_list|)
block|{
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|verify
operator|=
name|verify
expr_stmt|;
block|}
comment|/**          * Sets repository settings          *          * @param settings repository settings          * @return this request          */
DECL|method|settings
specifier|public
name|RegisterRepositoryRequest
name|settings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Unregister repository request      */
DECL|class|UnregisterRepositoryRequest
specifier|public
specifier|static
class|class
name|UnregisterRepositoryRequest
extends|extends
name|ClusterStateUpdateRequest
argument_list|<
name|UnregisterRepositoryRequest
argument_list|>
block|{
DECL|field|cause
specifier|final
name|String
name|cause
decl_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
comment|/**          * Creates a new unregister repository request          *          * @param cause repository unregistration cause          * @param name  repository name          */
DECL|method|UnregisterRepositoryRequest
specifier|public
name|UnregisterRepositoryRequest
parameter_list|(
name|String
name|cause
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
comment|/**      * Verify repository request      */
DECL|class|VerifyResponse
specifier|public
specifier|static
class|class
name|VerifyResponse
block|{
DECL|field|failures
specifier|private
name|VerificationFailure
index|[]
name|failures
decl_stmt|;
DECL|field|nodes
specifier|private
name|DiscoveryNode
index|[]
name|nodes
decl_stmt|;
DECL|method|VerifyResponse
specifier|public
name|VerifyResponse
parameter_list|(
name|DiscoveryNode
index|[]
name|nodes
parameter_list|,
name|VerificationFailure
index|[]
name|failures
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
name|this
operator|.
name|failures
operator|=
name|failures
expr_stmt|;
block|}
DECL|method|failures
specifier|public
name|VerificationFailure
index|[]
name|failures
parameter_list|()
block|{
return|return
name|failures
return|;
block|}
DECL|method|nodes
specifier|public
name|DiscoveryNode
index|[]
name|nodes
parameter_list|()
block|{
return|return
name|nodes
return|;
block|}
DECL|method|failed
specifier|public
name|boolean
name|failed
parameter_list|()
block|{
return|return
name|failures
operator|.
name|length
operator|>
literal|0
return|;
block|}
DECL|method|failureDescription
specifier|public
name|String
name|failureDescription
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|failures
argument_list|)
operator|.
name|map
argument_list|(
name|failure
lambda|->
name|failure
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|,
literal|"["
argument_list|,
literal|"]"
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

