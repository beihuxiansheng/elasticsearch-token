begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.tasks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Task id that consists of node id and id of the task on the node  */
end_comment

begin_class
DECL|class|TaskId
specifier|public
specifier|final
class|class
name|TaskId
implements|implements
name|Writeable
block|{
DECL|field|EMPTY_TASK_ID
specifier|public
specifier|static
specifier|final
name|TaskId
name|EMPTY_TASK_ID
init|=
operator|new
name|TaskId
argument_list|()
decl_stmt|;
DECL|field|nodeId
specifier|private
specifier|final
name|String
name|nodeId
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|long
name|id
decl_stmt|;
DECL|method|TaskId
specifier|public
name|TaskId
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|long
name|id
parameter_list|)
block|{
if|if
condition|(
name|nodeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"0 length nodeIds are reserved for EMPTY_TASK_ID and are otherwise invalid."
argument_list|)
throw|;
block|}
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * Builds {@link #EMPTY_TASK_ID}.      */
DECL|method|TaskId
specifier|private
name|TaskId
parameter_list|()
block|{
name|nodeId
operator|=
literal|""
expr_stmt|;
name|id
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|TaskId
specifier|public
name|TaskId
parameter_list|(
name|String
name|taskId
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|taskId
argument_list|)
operator|&&
literal|"unset"
operator|.
name|equals
argument_list|(
name|taskId
argument_list|)
operator|==
literal|false
condition|)
block|{
name|String
index|[]
name|s
init|=
name|Strings
operator|.
name|split
argument_list|(
name|taskId
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"malformed task id "
operator|+
name|taskId
argument_list|)
throw|;
block|}
name|this
operator|.
name|nodeId
operator|=
name|s
index|[
literal|0
index|]
expr_stmt|;
try|try
block|{
name|this
operator|.
name|id
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"malformed task id "
operator|+
name|taskId
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|nodeId
operator|=
literal|""
expr_stmt|;
name|id
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
block|}
comment|/**      * Read a {@linkplain TaskId} from a stream. {@linkplain TaskId} has this rather than the usual constructor that takes a      * {@linkplain StreamInput} so we can return the {@link #EMPTY_TASK_ID} without allocating.      */
DECL|method|readFromStream
specifier|public
specifier|static
name|TaskId
name|readFromStream
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|nodeId
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|/*              * The only TaskId allowed to have the empty string as its nodeId is the EMPTY_TASK_ID and there is only ever one of it and it              * never writes its taskId to save bytes on the wire because it is by far the most common TaskId.              */
return|return
name|EMPTY_TASK_ID
return|;
block|}
return|return
operator|new
name|TaskId
argument_list|(
name|nodeId
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Shortcut the EMPTY_TASK_ID, the only TaskId allowed to have the empty string as its nodeId.
return|return;
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|getNodeId
specifier|public
name|String
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
DECL|method|getId
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|isSet
specifier|public
name|boolean
name|isSet
parameter_list|()
block|{
return|return
name|id
operator|!=
operator|-
literal|1L
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|isSet
argument_list|()
condition|)
block|{
return|return
name|nodeId
operator|+
literal|":"
operator|+
name|id
return|;
block|}
else|else
block|{
return|return
literal|"unset"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TaskId
name|taskId
init|=
operator|(
name|TaskId
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|id
operator|!=
name|taskId
operator|.
name|id
condition|)
return|return
literal|false
return|;
return|return
name|nodeId
operator|.
name|equals
argument_list|(
name|taskId
operator|.
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|nodeId
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|id
operator|^
operator|(
name|id
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

