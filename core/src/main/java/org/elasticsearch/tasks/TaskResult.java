begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.tasks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Represents the result or failure of a running task  */
end_comment

begin_class
DECL|class|TaskResult
specifier|public
class|class
name|TaskResult
block|{
DECL|field|result
specifier|private
specifier|final
name|BytesReference
name|result
decl_stmt|;
DECL|field|taskId
specifier|private
specifier|final
name|TaskId
name|taskId
decl_stmt|;
DECL|method|TaskResult
specifier|public
name|TaskResult
parameter_list|(
name|TaskInfo
name|taskInfo
parameter_list|,
name|Throwable
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|ToXContent
operator|.
name|Params
name|params
init|=
name|ToXContent
operator|.
name|EMPTY_PARAMS
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"task"
argument_list|)
expr_stmt|;
block|{
name|taskInfo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
block|{
name|ElasticsearchException
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|result
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|taskId
operator|=
name|taskInfo
operator|.
name|getTaskId
argument_list|()
expr_stmt|;
block|}
DECL|method|TaskResult
specifier|public
name|TaskResult
parameter_list|(
name|TaskInfo
name|taskInfo
parameter_list|,
name|ToXContent
name|toXContent
parameter_list|)
throws|throws
name|IOException
block|{
name|ToXContent
operator|.
name|Params
name|params
init|=
name|ToXContent
operator|.
name|EMPTY_PARAMS
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"task"
argument_list|)
expr_stmt|;
block|{
name|taskInfo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
block|{
name|toXContent
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|result
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|taskId
operator|=
name|taskInfo
operator|.
name|getTaskId
argument_list|()
expr_stmt|;
block|}
DECL|method|getTaskId
specifier|public
name|TaskId
name|getTaskId
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
DECL|method|getResult
specifier|public
name|BytesReference
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

