begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.tasks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * A task that can be canceled  */
end_comment

begin_class
DECL|class|CancellableTask
specifier|public
class|class
name|CancellableTask
extends|extends
name|Task
block|{
DECL|field|reason
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|reason
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|CancellableTask
specifier|public
name|CancellableTask
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
name|action
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
DECL|method|CancellableTask
specifier|public
name|CancellableTask
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|description
parameter_list|,
name|TaskId
name|parentTaskId
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
name|action
argument_list|,
name|description
argument_list|,
name|parentTaskId
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is called by the task manager when this task is cancelled.      */
DECL|method|cancel
specifier|final
name|void
name|cancel
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
assert|assert
name|reason
operator|!=
literal|null
assert|;
name|this
operator|.
name|reason
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns true if this task should be automatically cancelled if the coordinating node that      * requested this task left the cluster.      */
DECL|method|cancelOnParentLeaving
specifier|public
name|boolean
name|cancelOnParentLeaving
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|isCancelled
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|reason
operator|.
name|get
argument_list|()
operator|!=
literal|null
return|;
block|}
comment|/**      * The reason the task was cancelled or null if it hasn't been cancelled.      */
annotation|@
name|Nullable
DECL|method|getReasonCancelled
specifier|public
name|String
name|getReasonCancelled
parameter_list|()
block|{
return|return
name|reason
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

