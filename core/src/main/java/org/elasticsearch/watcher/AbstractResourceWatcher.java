begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.watcher
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|/**  * Abstract resource watcher framework, which handles adding and removing listeners  * and calling resource observer.  */
end_comment

begin_class
DECL|class|AbstractResourceWatcher
specifier|public
specifier|abstract
class|class
name|AbstractResourceWatcher
parameter_list|<
name|Listener
parameter_list|>
implements|implements
name|ResourceWatcher
block|{
DECL|field|listeners
specifier|private
specifier|final
name|List
argument_list|<
name|Listener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|initialized
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|doInit
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|checkAndNotify
specifier|public
name|void
name|checkAndNotify
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|doCheckAndNotify
argument_list|()
expr_stmt|;
block|}
comment|/**      * Registers new listener      */
DECL|method|addListener
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Unregisters a listener      */
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a list of listeners      */
DECL|method|listeners
specifier|protected
name|List
argument_list|<
name|Listener
argument_list|>
name|listeners
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
comment|/**      * Will be called once on initialization      */
DECL|method|doInit
specifier|protected
specifier|abstract
name|void
name|doInit
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Will be called periodically      *<p/>      * Implementing watcher should check resource and notify all {@link #listeners()}.      */
DECL|method|doCheckAndNotify
specifier|protected
specifier|abstract
name|void
name|doCheckAndNotify
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

