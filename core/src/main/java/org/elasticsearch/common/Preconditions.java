begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
DECL|class|Preconditions
specifier|public
class|class
name|Preconditions
block|{
DECL|method|Preconditions
specifier|private
name|Preconditions
parameter_list|()
block|{     }
DECL|method|checkArgument
specifier|public
specifier|static
name|void
name|checkArgument
parameter_list|(
name|boolean
name|expression
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expression
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
DECL|method|checkArgument
specifier|public
specifier|static
name|void
name|checkArgument
parameter_list|(
name|boolean
name|expression
parameter_list|,
annotation|@
name|Nullable
name|Object
name|errorMessage
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expression
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|checkArgument
specifier|public
specifier|static
name|void
name|checkArgument
parameter_list|(
name|boolean
name|expression
parameter_list|,
annotation|@
name|Nullable
name|String
name|errorMessageTemplate
parameter_list|,
annotation|@
name|Nullable
name|Object
modifier|...
name|errorMessageArgs
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expression
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|format
argument_list|(
name|errorMessageTemplate
argument_list|,
name|errorMessageArgs
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|format
specifier|private
specifier|static
name|String
name|format
parameter_list|(
annotation|@
name|Nullable
name|String
name|errorMessageTemplate
parameter_list|,
annotation|@
name|Nullable
name|Object
modifier|...
name|errorMessageArgs
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|errorMessageTemplate
argument_list|,
name|errorMessageArgs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

