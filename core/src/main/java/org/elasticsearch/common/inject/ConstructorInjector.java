begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2006 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|ConstructionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|Errors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|ErrorsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|InternalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionPoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_comment
comment|/**  * Creates instances using an injectable constructor. After construction, all injectable fields and  * methods are injected.  *  * @author crazybob@google.com (Bob Lee)  */
end_comment

begin_class
DECL|class|ConstructorInjector
class|class
name|ConstructorInjector
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|injectableMembers
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|InjectionPoint
argument_list|>
name|injectableMembers
decl_stmt|;
DECL|field|parameterInjectors
specifier|private
specifier|final
name|SingleParameterInjector
argument_list|<
name|?
argument_list|>
index|[]
name|parameterInjectors
decl_stmt|;
DECL|field|constructionProxy
specifier|private
specifier|final
name|ConstructionProxy
argument_list|<
name|T
argument_list|>
name|constructionProxy
decl_stmt|;
DECL|field|membersInjector
specifier|private
specifier|final
name|MembersInjectorImpl
argument_list|<
name|T
argument_list|>
name|membersInjector
decl_stmt|;
DECL|method|ConstructorInjector
name|ConstructorInjector
parameter_list|(
name|ImmutableSet
argument_list|<
name|InjectionPoint
argument_list|>
name|injectableMembers
parameter_list|,
name|ConstructionProxy
argument_list|<
name|T
argument_list|>
name|constructionProxy
parameter_list|,
name|SingleParameterInjector
argument_list|<
name|?
argument_list|>
index|[]
name|parameterInjectors
parameter_list|,
name|MembersInjectorImpl
argument_list|<
name|T
argument_list|>
name|membersInjector
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|this
operator|.
name|injectableMembers
operator|=
name|injectableMembers
expr_stmt|;
name|this
operator|.
name|constructionProxy
operator|=
name|constructionProxy
expr_stmt|;
name|this
operator|.
name|parameterInjectors
operator|=
name|parameterInjectors
expr_stmt|;
name|this
operator|.
name|membersInjector
operator|=
name|membersInjector
expr_stmt|;
block|}
DECL|method|getInjectableMembers
specifier|public
name|ImmutableSet
argument_list|<
name|InjectionPoint
argument_list|>
name|getInjectableMembers
parameter_list|()
block|{
return|return
name|injectableMembers
return|;
block|}
DECL|method|getConstructionProxy
name|ConstructionProxy
argument_list|<
name|T
argument_list|>
name|getConstructionProxy
parameter_list|()
block|{
return|return
name|constructionProxy
return|;
block|}
comment|/**      * Construct an instance. Returns {@code Object} instead of {@code T} because      * it may return a proxy.      */
DECL|method|construct
name|Object
name|construct
parameter_list|(
name|Errors
name|errors
parameter_list|,
name|InternalContext
name|context
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|expectedType
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|ConstructionContext
argument_list|<
name|T
argument_list|>
name|constructionContext
init|=
name|context
operator|.
name|getConstructionContext
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// We have a circular reference between constructors. Return a proxy.
if|if
condition|(
name|constructionContext
operator|.
name|isConstructing
argument_list|()
condition|)
block|{
comment|// TODO (crazybob): if we can't proxy this object, can we proxy the other object?
return|return
name|constructionContext
operator|.
name|createProxy
argument_list|(
name|errors
argument_list|,
name|expectedType
argument_list|)
return|;
block|}
comment|// If we're re-entering this factory while injecting fields or methods,
comment|// return the same instance. This prevents infinite loops.
name|T
name|t
init|=
name|constructionContext
operator|.
name|getCurrentReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
return|return
name|t
return|;
block|}
try|try
block|{
comment|// First time through...
name|constructionContext
operator|.
name|startConstruction
argument_list|()
expr_stmt|;
try|try
block|{
name|Object
index|[]
name|parameters
init|=
name|SingleParameterInjector
operator|.
name|getAll
argument_list|(
name|errors
argument_list|,
name|context
argument_list|,
name|parameterInjectors
argument_list|)
decl_stmt|;
name|t
operator|=
name|constructionProxy
operator|.
name|newInstance
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|constructionContext
operator|.
name|setProxyDelegates
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|constructionContext
operator|.
name|finishConstruction
argument_list|()
expr_stmt|;
block|}
comment|// Store reference. If an injector re-enters this factory, they'll get the same reference.
name|constructionContext
operator|.
name|setCurrentReference
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|membersInjector
operator|.
name|injectMembers
argument_list|(
name|t
argument_list|,
name|errors
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|membersInjector
operator|.
name|notifyListeners
argument_list|(
name|t
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|userException
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|userException
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|?
name|userException
operator|.
name|getCause
argument_list|()
else|:
name|userException
decl_stmt|;
throw|throw
name|errors
operator|.
name|withSource
argument_list|(
name|constructionProxy
operator|.
name|getInjectionPoint
argument_list|()
argument_list|)
operator|.
name|errorInjectingConstructor
argument_list|(
name|cause
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
finally|finally
block|{
name|constructionContext
operator|.
name|removeCurrentReference
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

