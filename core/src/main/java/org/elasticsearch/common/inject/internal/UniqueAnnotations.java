begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|BindingAnnotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
operator|.
name|RUNTIME
import|;
end_import

begin_comment
comment|/**  * @author jessewilson@google.com (Jesse Wilson)  */
end_comment

begin_class
DECL|class|UniqueAnnotations
specifier|public
class|class
name|UniqueAnnotations
block|{
DECL|method|UniqueAnnotations
specifier|private
name|UniqueAnnotations
parameter_list|()
block|{     }
DECL|field|nextUniqueValue
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|nextUniqueValue
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/**      * Returns an annotation instance that is not equal to any other annotation      * instances, for use in creating distinct {@link org.elasticsearch.common.inject.Key}s.      */
DECL|method|create
specifier|public
specifier|static
name|Annotation
name|create
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|nextUniqueValue
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
return|;
block|}
DECL|method|create
specifier|static
name|Annotation
name|create
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|Internal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
name|Internal
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"@"
operator|+
name|Internal
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"(value="
operator|+
name|value
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Internal
operator|&&
operator|(
operator|(
name|Internal
operator|)
name|o
operator|)
operator|.
name|value
argument_list|()
operator|==
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
literal|127
operator|*
literal|"value"
operator|.
name|hashCode
argument_list|()
operator|)
operator|^
name|value
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Retention
argument_list|(
name|RUNTIME
argument_list|)
annotation|@
name|BindingAnnotation
DECL|interface|Internal
annotation_defn|@interface
name|Internal
block|{
DECL|method|value
name|int
name|value
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

