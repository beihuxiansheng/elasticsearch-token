begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2006 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Classes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|Annotations
operator|.
name|findScopeAnnotation
import|;
end_import

begin_comment
comment|/**  * Default {@link Injector} implementation.  *  * @author crazybob@google.com (Bob Lee)  * @see InjectorBuilder  */
end_comment

begin_class
DECL|class|InjectorImpl
class|class
name|InjectorImpl
implements|implements
name|Injector
implements|,
name|Lookups
block|{
DECL|field|state
specifier|final
name|State
name|state
decl_stmt|;
DECL|field|parent
specifier|final
name|InjectorImpl
name|parent
decl_stmt|;
DECL|field|readOnly
name|boolean
name|readOnly
decl_stmt|;
DECL|field|bindingsMultimap
name|BindingsMultimap
name|bindingsMultimap
init|=
operator|new
name|BindingsMultimap
argument_list|()
decl_stmt|;
DECL|field|initializer
specifier|final
name|Initializer
name|initializer
decl_stmt|;
comment|/**      * Just-in-time binding cache. Guarded by state.lock()      */
DECL|field|jitBindings
name|Map
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|BindingImpl
argument_list|<
name|?
argument_list|>
argument_list|>
name|jitBindings
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|lookups
name|Lookups
name|lookups
init|=
operator|new
name|DeferredLookups
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|method|InjectorImpl
name|InjectorImpl
parameter_list|(
annotation|@
name|Nullable
name|InjectorImpl
name|parent
parameter_list|,
name|State
name|state
parameter_list|,
name|Initializer
name|initializer
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|initializer
operator|=
name|initializer
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|localContext
operator|=
name|parent
operator|.
name|localContext
expr_stmt|;
block|}
else|else
block|{
name|localContext
operator|=
operator|new
name|ThreadLocal
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Object
index|[]
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Object
index|[
literal|1
index|]
return|;
block|}
block|}
expr_stmt|;
block|}
block|}
comment|/**      * Indexes bindings by type.      */
DECL|method|index
name|void
name|index
parameter_list|()
block|{
for|for
control|(
name|Binding
argument_list|<
name|?
argument_list|>
name|binding
range|:
name|state
operator|.
name|getExplicitBindingsThisLevel
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|index
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|index
parameter_list|<
name|T
parameter_list|>
name|void
name|index
parameter_list|(
name|Binding
argument_list|<
name|T
argument_list|>
name|binding
parameter_list|)
block|{
name|bindingsMultimap
operator|.
name|put
argument_list|(
name|binding
operator|.
name|getKey
argument_list|()
operator|.
name|getTypeLiteral
argument_list|()
argument_list|,
name|binding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|findBindingsByType
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Binding
argument_list|<
name|T
argument_list|>
argument_list|>
name|findBindingsByType
parameter_list|(
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|bindingsMultimap
operator|.
name|getAll
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Returns the binding for {@code key}      */
annotation|@
name|Override
DECL|method|getBinding
specifier|public
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|getBinding
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|)
block|{
name|Errors
name|errors
init|=
operator|new
name|Errors
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|result
init|=
name|getBindingOrThrow
argument_list|(
name|key
argument_list|,
name|errors
argument_list|)
decl_stmt|;
name|errors
operator|.
name|throwConfigurationExceptionIfErrorsExist
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|errors
operator|.
name|merge
argument_list|(
name|e
operator|.
name|getErrors
argument_list|()
argument_list|)
operator|.
name|getMessages
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Gets a binding implementation.  First, it check to see if the parent has a binding.  If the      * parent has a binding and the binding is scoped, it will use that binding.  Otherwise, this      * checks for an explicit binding. If no explicit binding is found, it looks for a just-in-time      * binding.      */
DECL|method|getBindingOrThrow
specifier|public
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|getBindingOrThrow
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
comment|// Check explicit bindings, i.e. bindings created by modules.
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|binding
init|=
name|state
operator|.
name|getExplicitBinding
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|binding
operator|!=
literal|null
condition|)
block|{
return|return
name|binding
return|;
block|}
comment|// Look for an on-demand binding.
return|return
name|getJustInTimeBinding
argument_list|(
name|key
argument_list|,
name|errors
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBinding
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Binding
argument_list|<
name|T
argument_list|>
name|getBinding
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getBinding
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getParent
specifier|public
name|Injector
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
annotation|@
name|Override
DECL|method|createChildInjector
specifier|public
name|Injector
name|createChildInjector
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|modules
parameter_list|)
block|{
return|return
operator|new
name|InjectorBuilder
argument_list|()
operator|.
name|parentInjector
argument_list|(
name|this
argument_list|)
operator|.
name|addModules
argument_list|(
name|modules
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createChildInjector
specifier|public
name|Injector
name|createChildInjector
parameter_list|(
name|Module
modifier|...
name|modules
parameter_list|)
block|{
return|return
name|createChildInjector
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|modules
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a just-in-time binding for {@code key}, creating it if necessary.      *      * @throws ErrorsException if the binding could not be created.      */
DECL|method|getJustInTimeBinding
specifier|private
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|getJustInTimeBinding
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
synchronized|synchronized
init|(
name|state
operator|.
name|lock
argument_list|()
init|)
block|{
comment|// first try to find a JIT binding that we've already created
for|for
control|(
name|InjectorImpl
name|injector
init|=
name|this
init|;
name|injector
operator|!=
literal|null
condition|;
name|injector
operator|=
name|injector
operator|.
name|parent
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// we only store bindings that match their key
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|binding
init|=
operator|(
name|BindingImpl
argument_list|<
name|T
argument_list|>
operator|)
name|injector
operator|.
name|jitBindings
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|binding
operator|!=
literal|null
condition|)
block|{
return|return
name|binding
return|;
block|}
block|}
return|return
name|createJustInTimeBindingRecursive
argument_list|(
name|key
argument_list|,
name|errors
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns true if the key type is Provider (but not a subclass of Provider).      */
DECL|method|isProvider
specifier|static
name|boolean
name|isProvider
parameter_list|(
name|Key
argument_list|<
name|?
argument_list|>
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|getRawType
argument_list|()
operator|.
name|equals
argument_list|(
name|Provider
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Returns true if the key type is MembersInjector (but not a subclass of MembersInjector).      */
DECL|method|isMembersInjector
specifier|static
name|boolean
name|isMembersInjector
parameter_list|(
name|Key
argument_list|<
name|?
argument_list|>
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|getRawType
argument_list|()
operator|.
name|equals
argument_list|(
name|MembersInjector
operator|.
name|class
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|hasAnnotationType
argument_list|()
return|;
block|}
DECL|method|createMembersInjectorBinding
specifier|private
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|MembersInjector
argument_list|<
name|T
argument_list|>
argument_list|>
name|createMembersInjectorBinding
parameter_list|(
name|Key
argument_list|<
name|MembersInjector
argument_list|<
name|T
argument_list|>
argument_list|>
name|key
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|Type
name|membersInjectorType
init|=
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|membersInjectorType
operator|instanceof
name|ParameterizedType
operator|)
condition|)
block|{
throw|throw
name|errors
operator|.
name|cannotInjectRawMembersInjector
argument_list|()
operator|.
name|toException
argument_list|()
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// safe because T came from Key<MembersInjector<T>>
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|instanceType
init|=
operator|(
name|TypeLiteral
argument_list|<
name|T
argument_list|>
operator|)
name|TypeLiteral
operator|.
name|get
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|membersInjectorType
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|MembersInjector
argument_list|<
name|T
argument_list|>
name|membersInjector
init|=
name|membersInjectorStore
operator|.
name|get
argument_list|(
name|instanceType
argument_list|,
name|errors
argument_list|)
decl_stmt|;
name|InternalFactory
argument_list|<
name|MembersInjector
argument_list|<
name|T
argument_list|>
argument_list|>
name|factory
init|=
operator|new
name|ConstantFactory
argument_list|<>
argument_list|(
name|Initializables
operator|.
name|of
argument_list|(
name|membersInjector
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|InstanceBindingImpl
argument_list|<>
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|SourceProvider
operator|.
name|UNKNOWN_SOURCE
argument_list|,
name|factory
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|InjectionPoint
operator|>
name|of
argument_list|()
argument_list|,
name|membersInjector
argument_list|)
return|;
block|}
comment|/**      * Creates a synthetic binding to {@code Provider<T>}, i.e. a binding to the provider from      * {@code Binding<T>}.      */
DECL|method|createProviderBinding
specifier|private
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|>
name|createProviderBinding
parameter_list|(
name|Key
argument_list|<
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|>
name|key
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|Type
name|providerType
init|=
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// If the Provider has no type parameter (raw Provider)...
if|if
condition|(
operator|!
operator|(
name|providerType
operator|instanceof
name|ParameterizedType
operator|)
condition|)
block|{
throw|throw
name|errors
operator|.
name|cannotInjectRawProvider
argument_list|()
operator|.
name|toException
argument_list|()
throw|;
block|}
name|Type
name|entryType
init|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|providerType
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// safe because T came from Key<Provider<T>>
name|Key
argument_list|<
name|T
argument_list|>
name|providedKey
init|=
operator|(
name|Key
argument_list|<
name|T
argument_list|>
operator|)
name|key
operator|.
name|ofType
argument_list|(
name|entryType
argument_list|)
decl_stmt|;
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|delegate
init|=
name|getBindingOrThrow
argument_list|(
name|providedKey
argument_list|,
name|errors
argument_list|)
decl_stmt|;
return|return
operator|new
name|ProviderBindingImpl
argument_list|<>
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|delegate
argument_list|)
return|;
block|}
DECL|class|ProviderBindingImpl
specifier|static
class|class
name|ProviderBindingImpl
parameter_list|<
name|T
parameter_list|>
extends|extends
name|BindingImpl
argument_list|<
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|>
implements|implements
name|ProviderBinding
argument_list|<
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
DECL|field|providedBinding
specifier|final
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|providedBinding
decl_stmt|;
DECL|method|ProviderBindingImpl
name|ProviderBindingImpl
parameter_list|(
name|InjectorImpl
name|injector
parameter_list|,
name|Key
argument_list|<
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|>
name|key
parameter_list|,
name|Binding
argument_list|<
name|T
argument_list|>
name|providedBinding
parameter_list|)
block|{
name|super
argument_list|(
name|injector
argument_list|,
name|key
argument_list|,
name|providedBinding
operator|.
name|getSource
argument_list|()
argument_list|,
name|createInternalFactory
argument_list|(
name|providedBinding
argument_list|)
argument_list|,
name|Scoping
operator|.
name|UNSCOPED
argument_list|)
expr_stmt|;
name|this
operator|.
name|providedBinding
operator|=
operator|(
name|BindingImpl
argument_list|<
name|T
argument_list|>
operator|)
name|providedBinding
expr_stmt|;
block|}
DECL|method|createInternalFactory
specifier|static
parameter_list|<
name|T
parameter_list|>
name|InternalFactory
argument_list|<
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|>
name|createInternalFactory
parameter_list|(
name|Binding
argument_list|<
name|T
argument_list|>
name|providedBinding
parameter_list|)
block|{
specifier|final
name|Provider
argument_list|<
name|T
argument_list|>
name|provider
init|=
name|providedBinding
operator|.
name|getProvider
argument_list|()
decl_stmt|;
return|return
operator|new
name|InternalFactory
argument_list|<
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Provider
argument_list|<
name|T
argument_list|>
name|get
parameter_list|(
name|Errors
name|errors
parameter_list|,
name|InternalContext
name|context
parameter_list|,
name|Dependency
name|dependency
parameter_list|)
block|{
return|return
name|provider
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getProvidedKey
specifier|public
name|Key
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getProvidedKey
parameter_list|()
block|{
return|return
name|providedBinding
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|acceptTargetVisitor
specifier|public
parameter_list|<
name|V
parameter_list|>
name|V
name|acceptTargetVisitor
parameter_list|(
name|BindingTargetVisitor
argument_list|<
name|?
super|super
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|,
name|V
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|applyTo
specifier|public
name|void
name|applyTo
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This element represents a synthetic binding."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|ToStringBuilder
argument_list|(
name|ProviderKeyBinding
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
name|getKey
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"providedKey"
argument_list|,
name|getProvidedKey
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Converts a constant string binding to the required type.      *      * @return the binding if it could be resolved, or null if the binding doesn't exist      * @throws org.elasticsearch.common.inject.internal.ErrorsException      *          if there was an error resolving the binding      */
DECL|method|convertConstantStringBinding
specifier|private
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|convertConstantStringBinding
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
comment|// Find a constant string binding.
name|Key
argument_list|<
name|String
argument_list|>
name|stringKey
init|=
name|key
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingImpl
argument_list|<
name|String
argument_list|>
name|stringBinding
init|=
name|state
operator|.
name|getExplicitBinding
argument_list|(
name|stringKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|stringBinding
operator|==
literal|null
operator|||
operator|!
name|stringBinding
operator|.
name|isConstant
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|stringValue
init|=
name|stringBinding
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Object
name|source
init|=
name|stringBinding
operator|.
name|getSource
argument_list|()
decl_stmt|;
comment|// Find a matching type converter.
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|type
init|=
name|key
operator|.
name|getTypeLiteral
argument_list|()
decl_stmt|;
name|MatcherAndConverter
name|matchingConverter
init|=
name|state
operator|.
name|getConverter
argument_list|(
name|stringValue
argument_list|,
name|type
argument_list|,
name|errors
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchingConverter
operator|==
literal|null
condition|)
block|{
comment|// No converter can handle the given type.
return|return
literal|null
return|;
block|}
comment|// Try to convert the string. A failed conversion results in an error.
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// This cast is safe because we double check below.
name|T
name|converted
init|=
operator|(
name|T
operator|)
name|matchingConverter
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convert
argument_list|(
name|stringValue
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|converted
operator|==
literal|null
condition|)
block|{
throw|throw
name|errors
operator|.
name|converterReturnedNull
argument_list|(
name|stringValue
argument_list|,
name|source
argument_list|,
name|type
argument_list|,
name|matchingConverter
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|type
operator|.
name|getRawType
argument_list|()
operator|.
name|isInstance
argument_list|(
name|converted
argument_list|)
condition|)
block|{
throw|throw
name|errors
operator|.
name|conversionTypeError
argument_list|(
name|stringValue
argument_list|,
name|source
argument_list|,
name|type
argument_list|,
name|matchingConverter
argument_list|,
name|converted
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
return|return
operator|new
name|ConvertedConstantBindingImpl
argument_list|<>
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|converted
argument_list|,
name|stringBinding
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|errors
operator|.
name|conversionError
argument_list|(
name|stringValue
argument_list|,
name|source
argument_list|,
name|type
argument_list|,
name|matchingConverter
argument_list|,
name|e
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
block|}
DECL|class|ConvertedConstantBindingImpl
specifier|private
specifier|static
class|class
name|ConvertedConstantBindingImpl
parameter_list|<
name|T
parameter_list|>
extends|extends
name|BindingImpl
argument_list|<
name|T
argument_list|>
implements|implements
name|ConvertedConstantBinding
argument_list|<
name|T
argument_list|>
block|{
DECL|field|value
specifier|final
name|T
name|value
decl_stmt|;
DECL|field|provider
specifier|final
name|Provider
argument_list|<
name|T
argument_list|>
name|provider
decl_stmt|;
DECL|field|originalBinding
specifier|final
name|Binding
argument_list|<
name|String
argument_list|>
name|originalBinding
decl_stmt|;
DECL|method|ConvertedConstantBindingImpl
name|ConvertedConstantBindingImpl
parameter_list|(
name|Injector
name|injector
parameter_list|,
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|T
name|value
parameter_list|,
name|Binding
argument_list|<
name|String
argument_list|>
name|originalBinding
parameter_list|)
block|{
name|super
argument_list|(
name|injector
argument_list|,
name|key
argument_list|,
name|originalBinding
operator|.
name|getSource
argument_list|()
argument_list|,
operator|new
name|ConstantFactory
argument_list|<>
argument_list|(
name|Initializables
operator|.
name|of
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|,
name|Scoping
operator|.
name|UNSCOPED
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|provider
operator|=
name|Providers
operator|.
name|of
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|originalBinding
operator|=
name|originalBinding
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProvider
specifier|public
name|Provider
argument_list|<
name|T
argument_list|>
name|getProvider
parameter_list|()
block|{
return|return
name|provider
return|;
block|}
annotation|@
name|Override
DECL|method|acceptTargetVisitor
specifier|public
parameter_list|<
name|V
parameter_list|>
name|V
name|acceptTargetVisitor
parameter_list|(
name|BindingTargetVisitor
argument_list|<
name|?
super|super
name|T
argument_list|,
name|V
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|T
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|getSourceKey
specifier|public
name|Key
argument_list|<
name|String
argument_list|>
name|getSourceKey
parameter_list|()
block|{
return|return
name|originalBinding
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDependencies
specifier|public
name|Set
argument_list|<
name|Dependency
argument_list|<
name|?
argument_list|>
argument_list|>
name|getDependencies
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
expr|<
name|Dependency
argument_list|<
name|?
argument_list|>
operator|>
name|of
argument_list|(
name|Dependency
operator|.
name|get
argument_list|(
name|getSourceKey
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|applyTo
specifier|public
name|void
name|applyTo
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This element represents a synthetic binding."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|ToStringBuilder
argument_list|(
name|ConvertedConstantBinding
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
name|getKey
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"sourceKey"
argument_list|,
name|getSourceKey
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|initializeBinding
parameter_list|<
name|T
parameter_list|>
name|void
name|initializeBinding
parameter_list|(
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|binding
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
comment|// Put the partially constructed binding in the map a little early. This enables us to handle
comment|// circular dependencies. Example: FooImpl -> BarImpl -> FooImpl.
comment|// Note: We don't need to synchronize on state.lock() during injector creation.
comment|// TODO: for the above example, remove the binding for BarImpl if the binding for FooImpl fails
if|if
condition|(
name|binding
operator|instanceof
name|ConstructorBindingImpl
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|Key
argument_list|<
name|T
argument_list|>
name|key
init|=
name|binding
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|jitBindings
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|binding
argument_list|)
expr_stmt|;
name|boolean
name|successful
init|=
literal|false
decl_stmt|;
try|try
block|{
operator|(
operator|(
name|ConstructorBindingImpl
operator|)
name|binding
operator|)
operator|.
name|initialize
argument_list|(
name|this
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|successful
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|successful
condition|)
block|{
name|jitBindings
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|/**      * Creates a binding for an injectable type with the given scope. Looks for a scope on the type if      * none is specified.      */
end_comment

begin_function
DECL|method|createUnitializedBinding
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|createUnitializedBinding
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Scoping
name|scoping
parameter_list|,
name|Object
name|source
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
init|=
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|getRawType
argument_list|()
decl_stmt|;
comment|// Don't try to inject arrays, or enums.
if|if
condition|(
name|rawType
operator|.
name|isArray
argument_list|()
operator|||
name|rawType
operator|.
name|isEnum
argument_list|()
condition|)
block|{
throw|throw
name|errors
operator|.
name|missingImplementation
argument_list|(
name|key
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
comment|// Handle TypeLiteral<T> by binding the inner type
if|if
condition|(
name|rawType
operator|==
name|TypeLiteral
operator|.
name|class
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// we have to fudge the inner type as Object
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|binding
init|=
operator|(
name|BindingImpl
argument_list|<
name|T
argument_list|>
operator|)
name|createTypeLiteralBinding
argument_list|(
operator|(
name|Key
argument_list|<
name|TypeLiteral
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|key
argument_list|,
name|errors
argument_list|)
decl_stmt|;
return|return
name|binding
return|;
block|}
comment|// Handle @ImplementedBy
name|ImplementedBy
name|implementedBy
init|=
name|rawType
operator|.
name|getAnnotation
argument_list|(
name|ImplementedBy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementedBy
operator|!=
literal|null
condition|)
block|{
name|Annotations
operator|.
name|checkForMisplacedScopeAnnotations
argument_list|(
name|rawType
argument_list|,
name|source
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|createImplementedByBinding
argument_list|(
name|key
argument_list|,
name|scoping
argument_list|,
name|implementedBy
argument_list|,
name|errors
argument_list|)
return|;
block|}
comment|// Handle @ProvidedBy.
name|ProvidedBy
name|providedBy
init|=
name|rawType
operator|.
name|getAnnotation
argument_list|(
name|ProvidedBy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|providedBy
operator|!=
literal|null
condition|)
block|{
name|Annotations
operator|.
name|checkForMisplacedScopeAnnotations
argument_list|(
name|rawType
argument_list|,
name|source
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|createProvidedByBinding
argument_list|(
name|key
argument_list|,
name|scoping
argument_list|,
name|providedBy
argument_list|,
name|errors
argument_list|)
return|;
block|}
comment|// We can't inject abstract classes.
comment|// TODO: Method interceptors could actually enable us to implement
comment|// abstract types. Should we remove this restriction?
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|rawType
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
name|errors
operator|.
name|missingImplementation
argument_list|(
name|key
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
comment|// Error: Inner class.
if|if
condition|(
name|Classes
operator|.
name|isInnerClass
argument_list|(
name|rawType
argument_list|)
condition|)
block|{
throw|throw
name|errors
operator|.
name|cannotInjectInnerClass
argument_list|(
name|rawType
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|scoping
operator|.
name|isExplicitlyScoped
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|scopeAnnotation
init|=
name|findScopeAnnotation
argument_list|(
name|errors
argument_list|,
name|rawType
argument_list|)
decl_stmt|;
if|if
condition|(
name|scopeAnnotation
operator|!=
literal|null
condition|)
block|{
name|scoping
operator|=
name|Scopes
operator|.
name|makeInjectable
argument_list|(
name|Scoping
operator|.
name|forAnnotation
argument_list|(
name|scopeAnnotation
argument_list|)
argument_list|,
name|this
argument_list|,
name|errors
operator|.
name|withSource
argument_list|(
name|rawType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ConstructorBindingImpl
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|source
argument_list|,
name|scoping
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Converts a binding for a {@code Key<TypeLiteral<T>>} to the value {@code TypeLiteral<T>}. It's      * a bit awkward because we have to pull out the inner type in the type literal.      */
end_comment

begin_function
DECL|method|createTypeLiteralBinding
specifier|private
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|TypeLiteral
argument_list|<
name|T
argument_list|>
argument_list|>
name|createTypeLiteralBinding
parameter_list|(
name|Key
argument_list|<
name|TypeLiteral
argument_list|<
name|T
argument_list|>
argument_list|>
name|key
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|Type
name|typeLiteralType
init|=
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|typeLiteralType
operator|instanceof
name|ParameterizedType
operator|)
condition|)
block|{
throw|throw
name|errors
operator|.
name|cannotInjectRawTypeLiteral
argument_list|()
operator|.
name|toException
argument_list|()
throw|;
block|}
name|ParameterizedType
name|parameterizedType
init|=
operator|(
name|ParameterizedType
operator|)
name|typeLiteralType
decl_stmt|;
name|Type
name|innerType
init|=
name|parameterizedType
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// this is unforunate. We don't support building TypeLiterals for type variable like 'T'. If
comment|// this proves problematic, we can probably fix TypeLiteral to support type variables
if|if
condition|(
operator|!
operator|(
name|innerType
operator|instanceof
name|Class
operator|)
operator|&&
operator|!
operator|(
name|innerType
operator|instanceof
name|GenericArrayType
operator|)
operator|&&
operator|!
operator|(
name|innerType
operator|instanceof
name|ParameterizedType
operator|)
condition|)
block|{
throw|throw
name|errors
operator|.
name|cannotInjectTypeLiteralOf
argument_list|(
name|innerType
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// by definition, innerType == T, so this is safe
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|value
init|=
operator|(
name|TypeLiteral
argument_list|<
name|T
argument_list|>
operator|)
name|TypeLiteral
operator|.
name|get
argument_list|(
name|innerType
argument_list|)
decl_stmt|;
name|InternalFactory
argument_list|<
name|TypeLiteral
argument_list|<
name|T
argument_list|>
argument_list|>
name|factory
init|=
operator|new
name|ConstantFactory
argument_list|<>
argument_list|(
name|Initializables
operator|.
name|of
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|InstanceBindingImpl
argument_list|<>
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|SourceProvider
operator|.
name|UNKNOWN_SOURCE
argument_list|,
name|factory
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|InjectionPoint
operator|>
name|of
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Creates a binding for a type annotated with @ProvidedBy.      */
end_comment

begin_function
DECL|method|createProvidedByBinding
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|createProvidedByBinding
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Scoping
name|scoping
parameter_list|,
name|ProvidedBy
name|providedBy
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
init|=
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|getRawType
argument_list|()
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Provider
argument_list|<
name|?
argument_list|>
argument_list|>
name|providerType
init|=
name|providedBy
operator|.
name|value
argument_list|()
decl_stmt|;
comment|// Make sure it's not the same type. TODO: Can we check for deeper loops?
if|if
condition|(
name|providerType
operator|==
name|rawType
condition|)
block|{
throw|throw
name|errors
operator|.
name|recursiveProviderType
argument_list|()
operator|.
name|toException
argument_list|()
throw|;
block|}
comment|// Assume the provider provides an appropriate type. We double check at runtime.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Key
argument_list|<
name|?
extends|extends
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|>
name|providerKey
init|=
operator|(
name|Key
argument_list|<
name|?
extends|extends
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|>
operator|)
name|Key
operator|.
name|get
argument_list|(
name|providerType
argument_list|)
decl_stmt|;
specifier|final
name|BindingImpl
argument_list|<
name|?
extends|extends
name|Provider
argument_list|<
name|?
argument_list|>
argument_list|>
name|providerBinding
init|=
name|getBindingOrThrow
argument_list|(
name|providerKey
argument_list|,
name|errors
argument_list|)
decl_stmt|;
name|InternalFactory
argument_list|<
name|T
argument_list|>
name|internalFactory
init|=
operator|new
name|InternalFactory
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|(
name|Errors
name|errors
parameter_list|,
name|InternalContext
name|context
parameter_list|,
name|Dependency
name|dependency
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|errors
operator|=
name|errors
operator|.
name|withSource
argument_list|(
name|providerKey
argument_list|)
expr_stmt|;
name|Provider
argument_list|<
name|?
argument_list|>
name|provider
init|=
name|providerBinding
operator|.
name|getInternalFactory
argument_list|()
operator|.
name|get
argument_list|(
name|errors
argument_list|,
name|context
argument_list|,
name|dependency
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|o
init|=
name|provider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|!
name|rawType
operator|.
name|isInstance
argument_list|(
name|o
argument_list|)
condition|)
block|{
throw|throw
name|errors
operator|.
name|subtypeNotProvided
argument_list|(
name|providerType
argument_list|,
name|rawType
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// protected by isInstance() check above
name|T
name|t
init|=
operator|(
name|T
operator|)
name|o
decl_stmt|;
return|return
name|t
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|errors
operator|.
name|errorInProvider
argument_list|(
name|e
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
block|}
block|}
decl_stmt|;
return|return
operator|new
name|LinkedProviderBindingImpl
argument_list|<>
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|rawType
comment|/* source */
argument_list|,
name|Scopes
operator|.
expr|<
name|T
operator|>
name|scope
argument_list|(
name|key
argument_list|,
name|this
argument_list|,
name|internalFactory
argument_list|,
name|scoping
argument_list|)
argument_list|,
name|scoping
argument_list|,
name|providerKey
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Creates a binding for a type annotated with @ImplementedBy.      */
end_comment

begin_function
DECL|method|createImplementedByBinding
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|createImplementedByBinding
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Scoping
name|scoping
parameter_list|,
name|ImplementedBy
name|implementedBy
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
init|=
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|getRawType
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|implementationType
init|=
name|implementedBy
operator|.
name|value
argument_list|()
decl_stmt|;
comment|// Make sure it's not the same type. TODO: Can we check for deeper cycles?
if|if
condition|(
name|implementationType
operator|==
name|rawType
condition|)
block|{
throw|throw
name|errors
operator|.
name|recursiveImplementationType
argument_list|()
operator|.
name|toException
argument_list|()
throw|;
block|}
comment|// Make sure implementationType extends type.
if|if
condition|(
operator|!
name|rawType
operator|.
name|isAssignableFrom
argument_list|(
name|implementationType
argument_list|)
condition|)
block|{
throw|throw
name|errors
operator|.
name|notASubtype
argument_list|(
name|implementationType
argument_list|,
name|rawType
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// After the preceding check, this cast is safe.
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|subclass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|implementationType
decl_stmt|;
comment|// Look up the target binding.
specifier|final
name|Key
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|targetKey
init|=
name|Key
operator|.
name|get
argument_list|(
name|subclass
argument_list|)
decl_stmt|;
specifier|final
name|BindingImpl
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|targetBinding
init|=
name|getBindingOrThrow
argument_list|(
name|targetKey
argument_list|,
name|errors
argument_list|)
decl_stmt|;
name|InternalFactory
argument_list|<
name|T
argument_list|>
name|internalFactory
init|=
operator|new
name|InternalFactory
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|(
name|Errors
name|errors
parameter_list|,
name|InternalContext
name|context
parameter_list|,
name|Dependency
argument_list|<
name|?
argument_list|>
name|dependency
parameter_list|)
throws|throws
name|ErrorsException
block|{
return|return
name|targetBinding
operator|.
name|getInternalFactory
argument_list|()
operator|.
name|get
argument_list|(
name|errors
operator|.
name|withSource
argument_list|(
name|targetKey
argument_list|)
argument_list|,
name|context
argument_list|,
name|dependency
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|LinkedBindingImpl
argument_list|<>
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|rawType
comment|/* source */
argument_list|,
name|Scopes
operator|.
expr|<
name|T
operator|>
name|scope
argument_list|(
name|key
argument_list|,
name|this
argument_list|,
name|internalFactory
argument_list|,
name|scoping
argument_list|)
argument_list|,
name|scoping
argument_list|,
name|targetKey
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Attempts to create a just-in-time binding for {@code key} in the root injector, falling back to      * other ancestor injectors until this injector is tried.      */
end_comment

begin_function
DECL|method|createJustInTimeBindingRecursive
specifier|private
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|createJustInTimeBindingRecursive
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
comment|// ask the parent to create the JIT binding
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|readOnly
comment|/* ES: don't check on parent if its read only, its already created all the bindings it can*/
condition|)
block|{
try|try
block|{
return|return
name|parent
operator|.
name|createJustInTimeBindingRecursive
argument_list|(
name|key
argument_list|,
operator|new
name|Errors
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|ignored
parameter_list|)
block|{             }
block|}
if|if
condition|(
name|state
operator|.
name|isBlacklisted
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
name|errors
operator|.
name|childBindingAlreadySet
argument_list|(
name|key
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|binding
init|=
name|createJustInTimeBinding
argument_list|(
name|key
argument_list|,
name|errors
argument_list|)
decl_stmt|;
name|state
operator|.
name|parent
argument_list|()
operator|.
name|blacklist
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|jitBindings
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|binding
return|;
block|}
end_function

begin_comment
comment|/**      * Returns a new just-in-time binding created by resolving {@code key}. The strategies used to      * create just-in-time bindings are:      *<ol>      *<li>Internalizing Providers. If the requested binding is for {@code Provider<T>}, we delegate      * to the binding for {@code T}.      *<li>Converting constants.      *<li>ImplementedBy and ProvidedBy annotations. Only for unannotated keys.      *<li>The constructor of the raw type. Only for unannotated keys.      *</ol>      *      * @throws org.elasticsearch.common.inject.internal.ErrorsException      *          if the binding cannot be created.      */
end_comment

begin_function
DECL|method|createJustInTimeBinding
parameter_list|<
name|T
parameter_list|>
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|createJustInTimeBinding
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
if|if
condition|(
name|state
operator|.
name|isBlacklisted
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
name|errors
operator|.
name|childBindingAlreadySet
argument_list|(
name|key
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
comment|// Handle cases where T is a Provider<?>.
if|if
condition|(
name|isProvider
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// These casts are safe. We know T extends Provider<X> and that given Key<Provider<X>>,
comment|// createProviderBinding() will return BindingImpl<Provider<X>>.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|BindingImpl
name|binding
init|=
name|createProviderBinding
argument_list|(
operator|(
name|Key
operator|)
name|key
argument_list|,
name|errors
argument_list|)
decl_stmt|;
return|return
name|binding
return|;
block|}
comment|// Handle cases where T is a MembersInjector<?>
if|if
condition|(
name|isMembersInjector
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// These casts are safe. T extends MembersInjector<X> and that given Key<MembersInjector<X>>,
comment|// createMembersInjectorBinding() will return BindingImpl<MembersInjector<X>>.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|BindingImpl
name|binding
init|=
name|createMembersInjectorBinding
argument_list|(
operator|(
name|Key
operator|)
name|key
argument_list|,
name|errors
argument_list|)
decl_stmt|;
return|return
name|binding
return|;
block|}
comment|// Try to convert a constant string binding to the requested type.
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|convertedBinding
init|=
name|convertConstantStringBinding
argument_list|(
name|key
argument_list|,
name|errors
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertedBinding
operator|!=
literal|null
condition|)
block|{
return|return
name|convertedBinding
return|;
block|}
comment|// If the key has an annotation...
if|if
condition|(
name|key
operator|.
name|hasAnnotationType
argument_list|()
condition|)
block|{
comment|// Look for a binding without annotation attributes or return null.
if|if
condition|(
name|key
operator|.
name|hasAttributes
argument_list|()
condition|)
block|{
try|try
block|{
name|Errors
name|ignored
init|=
operator|new
name|Errors
argument_list|()
decl_stmt|;
return|return
name|getBindingOrThrow
argument_list|(
name|key
operator|.
name|withoutAttributes
argument_list|()
argument_list|,
name|ignored
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|ignored
parameter_list|)
block|{
comment|// throw with a more appropriate message below
block|}
block|}
throw|throw
name|errors
operator|.
name|missingImplementation
argument_list|(
name|key
argument_list|)
operator|.
name|toException
argument_list|()
throw|;
block|}
name|Object
name|source
init|=
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|getRawType
argument_list|()
decl_stmt|;
name|BindingImpl
argument_list|<
name|T
argument_list|>
name|binding
init|=
name|createUnitializedBinding
argument_list|(
name|key
argument_list|,
name|Scoping
operator|.
name|UNSCOPED
argument_list|,
name|source
argument_list|,
name|errors
argument_list|)
decl_stmt|;
name|initializeBinding
argument_list|(
name|binding
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|binding
return|;
block|}
end_function

begin_function
DECL|method|getInternalFactory
parameter_list|<
name|T
parameter_list|>
name|InternalFactory
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getInternalFactory
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
return|return
name|getBindingOrThrow
argument_list|(
name|key
argument_list|,
name|errors
argument_list|)
operator|.
name|getInternalFactory
argument_list|()
return|;
block|}
end_function

begin_comment
comment|// not test-covered
end_comment

begin_function
annotation|@
name|Override
DECL|method|getBindings
specifier|public
name|Map
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
name|getBindings
parameter_list|()
block|{
return|return
name|state
operator|.
name|getExplicitBindingsThisLevel
argument_list|()
return|;
block|}
end_function

begin_class
DECL|class|BindingsMultimap
specifier|private
specifier|static
class|class
name|BindingsMultimap
block|{
DECL|field|multimap
specifier|final
name|Map
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|,
name|List
argument_list|<
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|multimap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|put
parameter_list|<
name|T
parameter_list|>
name|void
name|put
parameter_list|(
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Binding
argument_list|<
name|T
argument_list|>
name|binding
parameter_list|)
block|{
name|List
argument_list|<
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
name|bindingsForType
init|=
name|multimap
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindingsForType
operator|==
literal|null
condition|)
block|{
name|bindingsForType
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|bindingsForType
argument_list|)
expr_stmt|;
block|}
name|bindingsForType
operator|.
name|add
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// safe because we only put matching entries into the map
DECL|method|getAll
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Binding
argument_list|<
name|T
argument_list|>
argument_list|>
name|getAll
parameter_list|(
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|Binding
argument_list|<
name|?
argument_list|>
argument_list|>
name|bindings
init|=
name|multimap
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|bindings
operator|!=
literal|null
condition|?
name|Collections
operator|.
expr|<
name|Binding
argument_list|<
name|T
argument_list|>
operator|>
name|unmodifiableList
argument_list|(
operator|(
name|List
operator|)
name|multimap
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|Binding
argument_list|<
name|T
argument_list|>
operator|>
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|/**      * Returns parameter injectors, or {@code null} if there are no parameters.      */
end_comment

begin_function
DECL|method|getParametersInjectors
name|SingleParameterInjector
argument_list|<
name|?
argument_list|>
index|[]
name|getParametersInjectors
parameter_list|(
name|List
argument_list|<
name|Dependency
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
if|if
condition|(
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|numErrorsBefore
init|=
name|errors
operator|.
name|size
argument_list|()
decl_stmt|;
name|SingleParameterInjector
argument_list|<
name|?
argument_list|>
index|[]
name|result
init|=
operator|new
name|SingleParameterInjector
argument_list|<
name|?
argument_list|>
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Dependency
argument_list|<
name|?
argument_list|>
name|parameter
range|:
name|parameters
control|)
block|{
try|try
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
name|createParameterInjector
argument_list|(
name|parameter
argument_list|,
name|errors
operator|.
name|withSource
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|rethrownBelow
parameter_list|)
block|{
comment|// rethrown below
block|}
block|}
name|errors
operator|.
name|throwIfNewErrors
argument_list|(
name|numErrorsBefore
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
DECL|method|createParameterInjector
parameter_list|<
name|T
parameter_list|>
name|SingleParameterInjector
argument_list|<
name|T
argument_list|>
name|createParameterInjector
parameter_list|(
specifier|final
name|Dependency
argument_list|<
name|T
argument_list|>
name|dependency
parameter_list|,
specifier|final
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|InternalFactory
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|factory
init|=
name|getInternalFactory
argument_list|(
name|dependency
operator|.
name|getKey
argument_list|()
argument_list|,
name|errors
argument_list|)
decl_stmt|;
return|return
operator|new
name|SingleParameterInjector
argument_list|<>
argument_list|(
name|dependency
argument_list|,
name|factory
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Invokes a method.      */
end_comment

begin_interface
DECL|interface|MethodInvoker
interface|interface
name|MethodInvoker
block|{
DECL|method|invoke
name|Object
name|invoke
parameter_list|(
name|Object
name|target
parameter_list|,
name|Object
modifier|...
name|parameters
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvocationTargetException
function_decl|;
block|}
end_interface

begin_comment
comment|/**      * Cached constructor injectors for each type      */
end_comment

begin_decl_stmt
DECL|field|constructors
name|ConstructorInjectorStore
name|constructors
init|=
operator|new
name|ConstructorInjectorStore
argument_list|(
name|this
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**      * Cached field and method injectors for each type.      */
end_comment

begin_decl_stmt
DECL|field|membersInjectorStore
name|MembersInjectorStore
name|membersInjectorStore
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// the members injector type is consistent with instance's type
DECL|method|injectMembers
specifier|public
name|void
name|injectMembers
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
name|MembersInjector
name|membersInjector
init|=
name|getMembersInjector
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|membersInjector
operator|.
name|injectMembers
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getMembersInjector
specifier|public
parameter_list|<
name|T
parameter_list|>
name|MembersInjector
argument_list|<
name|T
argument_list|>
name|getMembersInjector
parameter_list|(
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|typeLiteral
parameter_list|)
block|{
name|Errors
name|errors
init|=
operator|new
name|Errors
argument_list|(
name|typeLiteral
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|membersInjectorStore
operator|.
name|get
argument_list|(
name|typeLiteral
argument_list|,
name|errors
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|errors
operator|.
name|merge
argument_list|(
name|e
operator|.
name|getErrors
argument_list|()
argument_list|)
operator|.
name|getMessages
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getMembersInjector
specifier|public
parameter_list|<
name|T
parameter_list|>
name|MembersInjector
argument_list|<
name|T
argument_list|>
name|getMembersInjector
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getMembersInjector
argument_list|(
name|TypeLiteral
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getProvider
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Provider
argument_list|<
name|T
argument_list|>
name|getProvider
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getProvider
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getProviderOrThrow
parameter_list|<
name|T
parameter_list|>
name|Provider
argument_list|<
name|T
argument_list|>
name|getProviderOrThrow
parameter_list|(
specifier|final
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
specifier|final
name|InternalFactory
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|factory
init|=
name|getInternalFactory
argument_list|(
name|key
argument_list|,
name|errors
argument_list|)
decl_stmt|;
comment|// ES: optimize for a common case of read only instance getting from the parent...
if|if
condition|(
name|factory
operator|instanceof
name|InternalFactory
operator|.
name|Instance
condition|)
block|{
return|return
operator|new
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|()
block|{
try|try
block|{
return|return
call|(
name|T
call|)
argument_list|(
operator|(
name|InternalFactory
operator|.
name|Instance
operator|)
name|factory
argument_list|)
operator|.
name|get
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// should never happen...
assert|assert
literal|false
assert|;
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|final
name|Dependency
argument_list|<
name|T
argument_list|>
name|dependency
init|=
name|Dependency
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|new
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|()
block|{
specifier|final
name|Errors
name|errors
init|=
operator|new
name|Errors
argument_list|(
name|dependency
argument_list|)
decl_stmt|;
try|try
block|{
name|T
name|t
init|=
name|callInContext
argument_list|(
operator|new
name|ContextualCallable
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|call
parameter_list|(
name|InternalContext
name|context
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|context
operator|.
name|setDependency
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|factory
operator|.
name|get
argument_list|(
name|errors
argument_list|,
name|context
argument_list|,
name|dependency
argument_list|)
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|setDependency
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|errors
operator|.
name|throwIfNewErrors
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
name|errors
operator|.
name|merge
argument_list|(
name|e
operator|.
name|getErrors
argument_list|()
argument_list|)
operator|.
name|getMessages
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|factory
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getProvider
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Provider
argument_list|<
name|T
argument_list|>
name|getProvider
parameter_list|(
specifier|final
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|)
block|{
name|Errors
name|errors
init|=
operator|new
name|Errors
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|Provider
argument_list|<
name|T
argument_list|>
name|result
init|=
name|getProviderOrThrow
argument_list|(
name|key
argument_list|,
name|errors
argument_list|)
decl_stmt|;
name|errors
operator|.
name|throwIfNewErrors
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|errors
operator|.
name|merge
argument_list|(
name|e
operator|.
name|getErrors
argument_list|()
argument_list|)
operator|.
name|getMessages
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getInstance
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|)
block|{
return|return
name|getProvider
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getInstance
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getProvider
argument_list|(
name|type
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
DECL|field|localContext
specifier|final
name|ThreadLocal
argument_list|<
name|Object
index|[]
argument_list|>
name|localContext
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**      * Looks up thread local context. Creates (and removes) a new context if necessary.      */
end_comment

begin_function
DECL|method|callInContext
parameter_list|<
name|T
parameter_list|>
name|T
name|callInContext
parameter_list|(
name|ContextualCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|Object
index|[]
name|reference
init|=
name|localContext
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|reference
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|reference
index|[
literal|0
index|]
operator|=
operator|new
name|InternalContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|callable
operator|.
name|call
argument_list|(
operator|(
name|InternalContext
operator|)
name|reference
index|[
literal|0
index|]
argument_list|)
return|;
block|}
finally|finally
block|{
comment|// Only clear the context if this call created it.
name|reference
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Someone else will clean up this context.
return|return
name|callable
operator|.
name|call
argument_list|(
operator|(
name|InternalContext
operator|)
name|reference
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|ToStringBuilder
argument_list|(
name|Injector
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
literal|"bindings"
argument_list|,
name|state
operator|.
name|getExplicitBindingsThisLevel
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_comment
comment|// ES_GUICE: clear caches
end_comment

begin_function
DECL|method|clearCache
specifier|public
name|void
name|clearCache
parameter_list|()
block|{
name|state
operator|.
name|clearBlacklisted
argument_list|()
expr_stmt|;
name|constructors
operator|=
operator|new
name|ConstructorInjectorStore
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|membersInjectorStore
operator|=
operator|new
name|MembersInjectorStore
argument_list|(
name|this
argument_list|,
name|state
operator|.
name|getTypeListenerBindings
argument_list|()
argument_list|)
expr_stmt|;
name|jitBindings
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|// ES_GUICE: make all registered bindings act as eager singletons
end_comment

begin_function
DECL|method|readOnlyAllSingletons
specifier|public
name|void
name|readOnlyAllSingletons
parameter_list|()
block|{
name|readOnly
operator|=
literal|true
expr_stmt|;
name|state
operator|.
name|makeAllBindingsToEagerSingletons
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|bindingsMultimap
operator|=
operator|new
name|BindingsMultimap
argument_list|()
expr_stmt|;
comment|// reindex the bindings
name|index
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

