begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Provides
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|util
operator|.
name|Modules
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Member
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Creates bindings to methods annotated with {@literal @}{@link Provides}. Use the scope and  * binding annotations on the provider method to configure the binding.  *  * @author crazybob@google.com (Bob Lee)  * @author jessewilson@google.com (Jesse Wilson)  */
end_comment

begin_class
DECL|class|ProviderMethodsModule
specifier|public
specifier|final
class|class
name|ProviderMethodsModule
implements|implements
name|Module
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Object
name|delegate
decl_stmt|;
DECL|field|typeLiteral
specifier|private
specifier|final
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|typeLiteral
decl_stmt|;
DECL|method|ProviderMethodsModule
specifier|private
name|ProviderMethodsModule
parameter_list|(
name|Object
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|delegate
argument_list|,
literal|"delegate"
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeLiteral
operator|=
name|TypeLiteral
operator|.
name|get
argument_list|(
name|this
operator|.
name|delegate
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a module which creates bindings for provider methods from the given module.      */
DECL|method|forModule
specifier|public
specifier|static
name|Module
name|forModule
parameter_list|(
name|Module
name|module
parameter_list|)
block|{
return|return
name|forObject
argument_list|(
name|module
argument_list|)
return|;
block|}
comment|/**      * Returns a module which creates bindings for provider methods from the given object.      * This is useful notably for<a href="http://code.google.com/p/google-gin/">GIN</a>      */
DECL|method|forObject
specifier|public
specifier|static
name|Module
name|forObject
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
comment|// avoid infinite recursion, since installing a module always installs itself
if|if
condition|(
name|object
operator|instanceof
name|ProviderMethodsModule
condition|)
block|{
return|return
name|Modules
operator|.
name|EMPTY_MODULE
return|;
block|}
return|return
operator|new
name|ProviderMethodsModule
argument_list|(
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|configure
specifier|public
specifier|synchronized
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
for|for
control|(
name|ProviderMethod
argument_list|<
name|?
argument_list|>
name|providerMethod
range|:
name|getProviderMethods
argument_list|(
name|binder
argument_list|)
control|)
block|{
name|providerMethod
operator|.
name|configure
argument_list|(
name|binder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getProviderMethods
specifier|public
name|List
argument_list|<
name|ProviderMethod
argument_list|<
name|?
argument_list|>
argument_list|>
name|getProviderMethods
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|List
argument_list|<
name|ProviderMethod
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|delegate
operator|.
name|getClass
argument_list|()
init|;
name|c
operator|!=
name|Object
operator|.
name|class
condition|;
name|c
operator|=
name|c
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
for|for
control|(
name|Method
name|method
range|:
name|c
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getAnnotation
argument_list|(
name|Provides
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|createProviderMethod
argument_list|(
name|binder
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|createProviderMethod
parameter_list|<
name|T
parameter_list|>
name|ProviderMethod
argument_list|<
name|T
argument_list|>
name|createProviderMethod
parameter_list|(
name|Binder
name|binder
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|)
block|{
name|binder
operator|=
name|binder
operator|.
name|withSource
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|Errors
name|errors
init|=
operator|new
name|Errors
argument_list|(
name|method
argument_list|)
decl_stmt|;
comment|// prepare the parameter providers
name|List
argument_list|<
name|Dependency
argument_list|<
name|?
argument_list|>
argument_list|>
name|dependencies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Provider
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameterProviders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameterTypes
init|=
name|typeLiteral
operator|.
name|getParameterTypes
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|Annotation
index|[]
index|[]
name|parameterAnnotations
init|=
name|method
operator|.
name|getParameterAnnotations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Key
argument_list|<
name|?
argument_list|>
name|key
init|=
name|getKey
argument_list|(
name|errors
argument_list|,
name|parameterTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|method
argument_list|,
name|parameterAnnotations
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dependencies
operator|.
name|add
argument_list|(
name|Dependency
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|parameterProviders
operator|.
name|add
argument_list|(
name|binder
operator|.
name|getProvider
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Define T as the method's return type.
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|returnType
init|=
operator|(
name|TypeLiteral
argument_list|<
name|T
argument_list|>
operator|)
name|typeLiteral
operator|.
name|getReturnType
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|T
argument_list|>
name|key
init|=
name|getKey
argument_list|(
name|errors
argument_list|,
name|returnType
argument_list|,
name|method
argument_list|,
name|method
operator|.
name|getAnnotations
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|scopeAnnotation
init|=
name|Annotations
operator|.
name|findScopeAnnotation
argument_list|(
name|errors
argument_list|,
name|method
operator|.
name|getAnnotations
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Message
name|message
range|:
name|errors
operator|.
name|getMessages
argument_list|()
control|)
block|{
name|binder
operator|.
name|addError
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ProviderMethod
argument_list|<>
argument_list|(
name|key
argument_list|,
name|method
argument_list|,
name|delegate
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|dependencies
argument_list|)
argument_list|,
name|parameterProviders
argument_list|,
name|scopeAnnotation
argument_list|)
return|;
block|}
DECL|method|getKey
parameter_list|<
name|T
parameter_list|>
name|Key
argument_list|<
name|T
argument_list|>
name|getKey
parameter_list|(
name|Errors
name|errors
parameter_list|,
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Member
name|member
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|)
block|{
name|Annotation
name|bindingAnnotation
init|=
name|Annotations
operator|.
name|findBindingAnnotation
argument_list|(
name|errors
argument_list|,
name|member
argument_list|,
name|annotations
argument_list|)
decl_stmt|;
return|return
name|bindingAnnotation
operator|==
literal|null
condition|?
name|Key
operator|.
name|get
argument_list|(
name|type
argument_list|)
else|:
name|Key
operator|.
name|get
argument_list|(
name|type
argument_list|,
name|bindingAnnotation
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|ProviderMethodsModule
operator|&&
operator|(
operator|(
name|ProviderMethodsModule
operator|)
name|o
operator|)
operator|.
name|delegate
operator|==
name|delegate
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

