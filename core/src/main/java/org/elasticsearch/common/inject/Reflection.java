begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_comment
comment|/**  * Abstraction for Java's reflection APIs. This interface exists to provide a single place where  * runtime reflection can be substituted for another mechanism such as CGLib or compile-time code  * generation.  *  * @author jessewilson@google.com (Jesse Wilson)  */
end_comment

begin_class
DECL|class|Reflection
class|class
name|Reflection
block|{
comment|/**      * A placeholder. This enables us to continue processing and gather more      * errors but blows up if you actually try to use it.      */
DECL|class|InvalidConstructor
specifier|static
class|class
name|InvalidConstructor
block|{
DECL|method|InvalidConstructor
name|InvalidConstructor
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|invalidConstructor
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Constructor
argument_list|<
name|T
argument_list|>
name|invalidConstructor
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|Constructor
argument_list|<
name|T
argument_list|>
operator|)
name|InvalidConstructor
operator|.
name|class
operator|.
name|getDeclaredConstructor
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

