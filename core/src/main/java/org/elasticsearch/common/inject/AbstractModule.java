begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|binder
operator|.
name|AnnotatedBindingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|binder
operator|.
name|AnnotatedConstantBindingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|binder
operator|.
name|LinkedBindingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|matcher
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|TypeListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A support class for {@link Module}s which reduces repetition and results in  * a more readable configuration. Simply extend this class, implement {@link  * #configure()}, and call the inherited methods which mirror those found in  * {@link Binder}. For example:  *<pre>  * public class MyModule extends AbstractModule {  *   protected void configure() {  *     bind(Service.class).to(ServiceImpl.class).in(Singleton.class);  *     bind(CreditCardPaymentService.class);  *     bind(PaymentService.class).to(CreditCardPaymentService.class);  *     bindConstant().annotatedWith(Names.named("port")).to(8080);  *   }  * }  *</pre>  *  * @author crazybob@google.com (Bob Lee)  */
end_comment

begin_class
DECL|class|AbstractModule
specifier|public
specifier|abstract
class|class
name|AbstractModule
implements|implements
name|Module
block|{
DECL|field|binder
name|Binder
name|binder
decl_stmt|;
annotation|@
name|Override
DECL|method|configure
specifier|public
specifier|final
specifier|synchronized
name|void
name|configure
parameter_list|(
name|Binder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|binder
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Re-entry is not allowed."
argument_list|)
throw|;
block|}
name|this
operator|.
name|binder
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|builder
argument_list|,
literal|"builder"
argument_list|)
expr_stmt|;
try|try
block|{
name|configure
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|binder
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Configures a {@link Binder} via the exposed methods.      */
DECL|method|configure
specifier|protected
specifier|abstract
name|void
name|configure
parameter_list|()
function_decl|;
comment|/**      * Gets direct access to the underlying {@code Binder}.      */
DECL|method|binder
specifier|protected
name|Binder
name|binder
parameter_list|()
block|{
return|return
name|binder
return|;
block|}
comment|/**      * @see Binder#bindScope(Class, Scope)      */
DECL|method|bindScope
specifier|protected
name|void
name|bindScope
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|scopeAnnotation
parameter_list|,
name|Scope
name|scope
parameter_list|)
block|{
name|binder
operator|.
name|bindScope
argument_list|(
name|scopeAnnotation
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see Binder#bind(Key)      */
DECL|method|bind
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|LinkedBindingBuilder
argument_list|<
name|T
argument_list|>
name|bind
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|)
block|{
return|return
name|binder
operator|.
name|bind
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * @see Binder#bind(TypeLiteral)      */
DECL|method|bind
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|AnnotatedBindingBuilder
argument_list|<
name|T
argument_list|>
name|bind
parameter_list|(
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|typeLiteral
parameter_list|)
block|{
return|return
name|binder
operator|.
name|bind
argument_list|(
name|typeLiteral
argument_list|)
return|;
block|}
comment|/**      * @see Binder#bind(Class)      */
DECL|method|bind
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|AnnotatedBindingBuilder
argument_list|<
name|T
argument_list|>
name|bind
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|binder
operator|.
name|bind
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/**      * @see Binder#bindConstant()      */
DECL|method|bindConstant
specifier|protected
name|AnnotatedConstantBindingBuilder
name|bindConstant
parameter_list|()
block|{
return|return
name|binder
operator|.
name|bindConstant
argument_list|()
return|;
block|}
comment|/**      * @see Binder#install(Module)      */
DECL|method|install
specifier|protected
name|void
name|install
parameter_list|(
name|Module
name|module
parameter_list|)
block|{
name|binder
operator|.
name|install
argument_list|(
name|module
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see Binder#addError(String, Object[])      */
DECL|method|addError
specifier|protected
name|void
name|addError
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|binder
operator|.
name|addError
argument_list|(
name|message
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see Binder#addError(Throwable)      */
DECL|method|addError
specifier|protected
name|void
name|addError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|binder
operator|.
name|addError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see Binder#addError(Message)      * @since 2.0      */
DECL|method|addError
specifier|protected
name|void
name|addError
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|binder
operator|.
name|addError
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see Binder#requestInjection(Object)      * @since 2.0      */
DECL|method|requestInjection
specifier|protected
name|void
name|requestInjection
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
name|binder
operator|.
name|requestInjection
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see Binder#requestStaticInjection(Class[])      */
DECL|method|requestStaticInjection
specifier|protected
name|void
name|requestStaticInjection
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|types
parameter_list|)
block|{
name|binder
operator|.
name|requestStaticInjection
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a dependency from this module to {@code key}. When the injector is      * created, Guice will report an error if {@code key} cannot be injected.      * Note that this requirement may be satisfied by implicit binding, such as      * a public no-arguments constructor.      *      * @since 2.0      */
DECL|method|requireBinding
specifier|protected
name|void
name|requireBinding
parameter_list|(
name|Key
argument_list|<
name|?
argument_list|>
name|key
parameter_list|)
block|{
name|binder
operator|.
name|getProvider
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a dependency from this module to {@code type}. When the injector is      * created, Guice will report an error if {@code type} cannot be injected.      * Note that this requirement may be satisfied by implicit binding, such as      * a public no-arguments constructor.      *      * @since 2.0      */
DECL|method|requireBinding
specifier|protected
name|void
name|requireBinding
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|binder
operator|.
name|getProvider
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see Binder#getProvider(Key)      * @since 2.0      */
DECL|method|getProvider
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|Provider
argument_list|<
name|T
argument_list|>
name|getProvider
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|)
block|{
return|return
name|binder
operator|.
name|getProvider
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * @see Binder#getProvider(Class)      * @since 2.0      */
DECL|method|getProvider
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|Provider
argument_list|<
name|T
argument_list|>
name|getProvider
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|binder
operator|.
name|getProvider
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * @see Binder#convertToTypes      * @since 2.0      */
DECL|method|convertToTypes
specifier|protected
name|void
name|convertToTypes
parameter_list|(
name|Matcher
argument_list|<
name|?
super|super
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|>
name|typeMatcher
parameter_list|,
name|TypeConverter
name|converter
parameter_list|)
block|{
name|binder
operator|.
name|convertToTypes
argument_list|(
name|typeMatcher
argument_list|,
name|converter
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see Binder#currentStage()      * @since 2.0      */
DECL|method|currentStage
specifier|protected
name|Stage
name|currentStage
parameter_list|()
block|{
return|return
name|binder
operator|.
name|currentStage
argument_list|()
return|;
block|}
comment|/**      * @see Binder#getMembersInjector(Class)      * @since 2.0      */
DECL|method|getMembersInjector
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|MembersInjector
argument_list|<
name|T
argument_list|>
name|getMembersInjector
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|binder
operator|.
name|getMembersInjector
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * @see Binder#getMembersInjector(TypeLiteral)      * @since 2.0      */
DECL|method|getMembersInjector
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|MembersInjector
argument_list|<
name|T
argument_list|>
name|getMembersInjector
parameter_list|(
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|binder
operator|.
name|getMembersInjector
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * @see Binder#bindListener(org.elasticsearch.common.inject.matcher.Matcher,      *      org.elasticsearch.common.inject.spi.TypeListener)      * @since 2.0      */
DECL|method|bindListener
specifier|protected
name|void
name|bindListener
parameter_list|(
name|Matcher
argument_list|<
name|?
super|super
name|TypeLiteral
argument_list|<
name|?
argument_list|>
argument_list|>
name|typeMatcher
parameter_list|,
name|TypeListener
name|listener
parameter_list|)
block|{
name|binder
operator|.
name|bindListener
argument_list|(
name|typeMatcher
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

