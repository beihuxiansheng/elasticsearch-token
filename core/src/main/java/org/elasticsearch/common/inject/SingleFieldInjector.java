begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|Errors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|ErrorsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|InternalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|InternalFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionPoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_comment
comment|/**  * Sets an injectable field.  */
end_comment

begin_class
DECL|class|SingleFieldInjector
class|class
name|SingleFieldInjector
implements|implements
name|SingleMemberInjector
block|{
DECL|field|field
specifier|final
name|Field
name|field
decl_stmt|;
DECL|field|injectionPoint
specifier|final
name|InjectionPoint
name|injectionPoint
decl_stmt|;
DECL|field|dependency
specifier|final
name|Dependency
argument_list|<
name|?
argument_list|>
name|dependency
decl_stmt|;
DECL|field|factory
specifier|final
name|InternalFactory
argument_list|<
name|?
argument_list|>
name|factory
decl_stmt|;
DECL|method|SingleFieldInjector
specifier|public
name|SingleFieldInjector
parameter_list|(
name|InjectorImpl
name|injector
parameter_list|,
name|InjectionPoint
name|injectionPoint
parameter_list|,
name|Errors
name|errors
parameter_list|)
throws|throws
name|ErrorsException
block|{
name|this
operator|.
name|injectionPoint
operator|=
name|injectionPoint
expr_stmt|;
name|this
operator|.
name|field
operator|=
operator|(
name|Field
operator|)
name|injectionPoint
operator|.
name|getMember
argument_list|()
expr_stmt|;
name|this
operator|.
name|dependency
operator|=
name|injectionPoint
operator|.
name|getDependencies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|factory
operator|=
name|injector
operator|.
name|getInternalFactory
argument_list|(
name|dependency
operator|.
name|getKey
argument_list|()
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInjectionPoint
specifier|public
name|InjectionPoint
name|getInjectionPoint
parameter_list|()
block|{
return|return
name|injectionPoint
return|;
block|}
annotation|@
name|Override
DECL|method|inject
specifier|public
name|void
name|inject
parameter_list|(
name|Errors
name|errors
parameter_list|,
name|InternalContext
name|context
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
name|errors
operator|=
name|errors
operator|.
name|withSource
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
name|context
operator|.
name|setDependency
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|value
init|=
name|factory
operator|.
name|get
argument_list|(
name|errors
argument_list|,
name|context
argument_list|,
name|dependency
argument_list|)
decl_stmt|;
name|field
operator|.
name|set
argument_list|(
name|o
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ErrorsException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|withSource
argument_list|(
name|injectionPoint
argument_list|)
operator|.
name|merge
argument_list|(
name|e
operator|.
name|getErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
comment|// a security manager is blocking us, we're hosed
block|}
finally|finally
block|{
name|context
operator|.
name|setDependency
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

