begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableSet
import|;
end_import

begin_comment
comment|/**  * Provides access to the calling line of code.  *  * @author crazybob@google.com (Bob Lee)  */
end_comment

begin_class
DECL|class|SourceProvider
specifier|public
class|class
name|SourceProvider
block|{
comment|/**      * Indicates that the source is unknown.      */
DECL|field|UNKNOWN_SOURCE
specifier|public
specifier|static
specifier|final
name|Object
name|UNKNOWN_SOURCE
init|=
literal|"[unknown source]"
decl_stmt|;
DECL|field|classNamesToSkip
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|classNamesToSkip
decl_stmt|;
DECL|method|SourceProvider
specifier|public
name|SourceProvider
parameter_list|()
block|{
name|this
operator|.
name|classNamesToSkip
operator|=
name|singleton
argument_list|(
name|SourceProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|DEFAULT_INSTANCE
specifier|public
specifier|static
specifier|final
name|SourceProvider
name|DEFAULT_INSTANCE
init|=
operator|new
name|SourceProvider
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|SourceProvider
specifier|private
name|SourceProvider
parameter_list|(
name|SourceProvider
name|copy
parameter_list|,
name|Class
index|[]
name|moreClassesToSkip
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|classNamesToSkip
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|copy
operator|.
name|classNamesToSkip
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
name|toSkip
range|:
name|moreClassesToSkip
control|)
block|{
name|classNamesToSkip
operator|.
name|add
argument_list|(
name|toSkip
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|classNamesToSkip
operator|=
name|unmodifiableSet
argument_list|(
name|classNamesToSkip
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a new instance that also skips {@code moreClassesToSkip}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|plusSkippedClasses
specifier|public
name|SourceProvider
name|plusSkippedClasses
parameter_list|(
name|Class
modifier|...
name|moreClassesToSkip
parameter_list|)
block|{
return|return
operator|new
name|SourceProvider
argument_list|(
name|this
argument_list|,
name|moreClassesToSkip
argument_list|)
return|;
block|}
comment|/**      * Returns the calling line of code. The selected line is the nearest to the top of the stack that      * is not skipped.      */
DECL|method|get
specifier|public
name|StackTraceElement
name|get
parameter_list|()
block|{
for|for
control|(
specifier|final
name|StackTraceElement
name|element
range|:
operator|new
name|Throwable
argument_list|()
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
name|String
name|className
init|=
name|element
operator|.
name|getClassName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|classNamesToSkip
operator|.
name|contains
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|element
return|;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

