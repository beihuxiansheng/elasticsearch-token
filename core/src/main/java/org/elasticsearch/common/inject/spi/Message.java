begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2006 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject.spi
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|Errors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|SourceProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * An error message and the context in which it occurred. Messages are usually created internally by  * Guice and its extensions. Messages can be created explicitly in a module using {@link  * org.elasticsearch.common.inject.Binder#addError(Throwable) addError()} statements:  *<pre>  *     try {  *       bindPropertiesFromFile();  *     } catch (IOException e) {  *       addError(e);  *     }</pre>  *  * @author crazybob@google.com (Bob Lee)  */
end_comment

begin_class
DECL|class|Message
specifier|public
specifier|final
class|class
name|Message
implements|implements
name|Serializable
implements|,
name|Element
block|{
DECL|field|message
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
DECL|field|cause
specifier|private
specifier|final
name|Throwable
name|cause
decl_stmt|;
DECL|field|sources
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|sources
decl_stmt|;
comment|/**      * @since 2.0      */
DECL|method|Message
specifier|public
name|Message
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|sources
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|this
operator|.
name|sources
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|sources
argument_list|)
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|checkNotNull
argument_list|(
name|message
argument_list|,
literal|"message"
argument_list|)
expr_stmt|;
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
block|}
DECL|method|Message
specifier|public
name|Message
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|source
argument_list|)
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Message
specifier|public
name|Message
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
name|sources
operator|.
name|isEmpty
argument_list|()
condition|?
name|SourceProvider
operator|.
name|UNKNOWN_SOURCE
operator|.
name|toString
argument_list|()
else|:
name|Errors
operator|.
name|convert
argument_list|(
name|sources
operator|.
name|get
argument_list|(
name|sources
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @since 2.0      */
DECL|method|getSources
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getSources
parameter_list|()
block|{
return|return
name|sources
return|;
block|}
comment|/**      * Gets the error message text.      */
DECL|method|getMessage
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
comment|/**      * @since 2.0      */
annotation|@
name|Override
DECL|method|acceptVisitor
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|acceptVisitor
parameter_list|(
name|ElementVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Returns the throwable that caused this message, or {@code null} if this      * message was not caused by a throwable.      *      * @since 2.0      */
DECL|method|getCause
specifier|public
name|Throwable
name|getCause
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|message
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|message
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Message
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Message
name|e
init|=
operator|(
name|Message
operator|)
name|o
decl_stmt|;
return|return
name|message
operator|.
name|equals
argument_list|(
name|e
operator|.
name|message
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|cause
argument_list|,
name|e
operator|.
name|cause
argument_list|)
operator|&&
name|sources
operator|.
name|equals
argument_list|(
name|e
operator|.
name|sources
argument_list|)
return|;
block|}
comment|/**      * @since 2.0      */
annotation|@
name|Override
DECL|method|applyTo
specifier|public
name|void
name|applyTo
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|withSource
argument_list|(
name|getSource
argument_list|()
argument_list|)
operator|.
name|addError
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * When serialized, we eagerly convert sources to strings. This hurts our formatting, but it      * guarantees that the receiving end will be able to read the message.      */
DECL|method|writeReplace
specifier|private
name|Object
name|writeReplace
parameter_list|()
throws|throws
name|ObjectStreamException
block|{
name|Object
index|[]
name|sourcesAsStrings
init|=
name|sources
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourcesAsStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sourcesAsStrings
index|[
name|i
index|]
operator|=
name|Errors
operator|.
name|convert
argument_list|(
name|sourcesAsStrings
index|[
name|i
index|]
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Message
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|sourcesAsStrings
argument_list|)
argument_list|,
name|message
argument_list|,
name|cause
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

