begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.inject.multibindings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|multibindings
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|binder
operator|.
name|LinkedBindingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|Errors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|HasDependencies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|spi
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|util
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * An API to bind multiple values separately, only to later inject them as a  * complete collection. Multibinder is intended for use in your application's  * module:  *<pre><code>  * public class SnacksModule extends AbstractModule {  *   protected void configure() {  *     Multibinder&lt;Snack&gt; multibinder  *         = Multibinder.newSetBinder(binder(), Snack.class);  *     multibinder.addBinding().toInstance(new Twix());  *     multibinder.addBinding().toProvider(SnickersProvider.class);  *     multibinder.addBinding().to(Skittles.class);  *   }  * }</code></pre>  *<p/>  *<p>With this binding, a {@link Set}{@code<Snack>} can now be injected:  *<pre><code>  * class SnackMachine {  *   {@literal @}Inject  *   public SnackMachine(Set&lt;Snack&gt; snacks) { ... }  * }</code></pre>  *<p/>  *<p>Create multibindings from different modules is supported. For example, it  * is okay to have both {@code CandyModule} and {@code ChipsModule} to both  * create their own {@code Multibinder<Snack>}, and to each contribute bindings  * to the set of snacks. When that set is injected, it will contain elements  * from both modules.  *<p/>  *<p>Elements are resolved at set injection time. If an element is bound to a  * provider, that provider's get method will be called each time the set is  * injected (unless the binding is also scoped).  *<p/>  *<p>Annotations are be used to create different sets of the same element  * type. Each distinct annotation gets its own independent collection of  * elements.  *<p/>  *<p><strong>Elements must be distinct.</strong> If multiple bound elements  * have the same value, set injection will fail.  *<p/>  *<p><strong>Elements must be non-null.</strong> If any set element is null,  * set injection will fail.  *  * @author jessewilson@google.com (Jesse Wilson)  */
end_comment

begin_class
DECL|class|Multibinder
specifier|public
specifier|abstract
class|class
name|Multibinder
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|Multibinder
specifier|private
name|Multibinder
parameter_list|()
block|{     }
comment|/**      * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is      * itself bound with no binding annotation.      */
DECL|method|newSetBinder
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Multibinder
argument_list|<
name|T
argument_list|>
name|newSetBinder
parameter_list|(
name|Binder
name|binder
parameter_list|,
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|binder
operator|=
name|binder
operator|.
name|skipSources
argument_list|(
name|RealMultibinder
operator|.
name|class
argument_list|,
name|Multibinder
operator|.
name|class
argument_list|)
expr_stmt|;
name|RealMultibinder
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|RealMultibinder
argument_list|<>
argument_list|(
name|binder
argument_list|,
name|type
argument_list|,
literal|""
argument_list|,
name|Key
operator|.
name|get
argument_list|(
name|Multibinder
operator|.
expr|<
name|T
operator|>
name|setOf
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|binder
operator|.
name|install
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is      * itself bound with no binding annotation.      */
DECL|method|newSetBinder
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Multibinder
argument_list|<
name|T
argument_list|>
name|newSetBinder
parameter_list|(
name|Binder
name|binder
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|newSetBinder
argument_list|(
name|binder
argument_list|,
name|TypeLiteral
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is      * itself bound with {@code annotation}.      */
DECL|method|newSetBinder
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Multibinder
argument_list|<
name|T
argument_list|>
name|newSetBinder
parameter_list|(
name|Binder
name|binder
parameter_list|,
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Annotation
name|annotation
parameter_list|)
block|{
name|binder
operator|=
name|binder
operator|.
name|skipSources
argument_list|(
name|RealMultibinder
operator|.
name|class
argument_list|,
name|Multibinder
operator|.
name|class
argument_list|)
expr_stmt|;
name|RealMultibinder
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|RealMultibinder
argument_list|<>
argument_list|(
name|binder
argument_list|,
name|type
argument_list|,
name|annotation
operator|.
name|toString
argument_list|()
argument_list|,
name|Key
operator|.
name|get
argument_list|(
name|Multibinder
operator|.
expr|<
name|T
operator|>
name|setOf
argument_list|(
name|type
argument_list|)
argument_list|,
name|annotation
argument_list|)
argument_list|)
decl_stmt|;
name|binder
operator|.
name|install
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is      * itself bound with {@code annotation}.      */
DECL|method|newSetBinder
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Multibinder
argument_list|<
name|T
argument_list|>
name|newSetBinder
parameter_list|(
name|Binder
name|binder
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Annotation
name|annotation
parameter_list|)
block|{
return|return
name|newSetBinder
argument_list|(
name|binder
argument_list|,
name|TypeLiteral
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|,
name|annotation
argument_list|)
return|;
block|}
comment|/**      * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is      * itself bound with {@code annotationType}.      */
DECL|method|newSetBinder
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Multibinder
argument_list|<
name|T
argument_list|>
name|newSetBinder
parameter_list|(
name|Binder
name|binder
parameter_list|,
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|)
block|{
name|binder
operator|=
name|binder
operator|.
name|skipSources
argument_list|(
name|RealMultibinder
operator|.
name|class
argument_list|,
name|Multibinder
operator|.
name|class
argument_list|)
expr_stmt|;
name|RealMultibinder
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|RealMultibinder
argument_list|<>
argument_list|(
name|binder
argument_list|,
name|type
argument_list|,
literal|"@"
operator|+
name|annotationType
operator|.
name|getName
argument_list|()
argument_list|,
name|Key
operator|.
name|get
argument_list|(
name|Multibinder
operator|.
expr|<
name|T
operator|>
name|setOf
argument_list|(
name|type
argument_list|)
argument_list|,
name|annotationType
argument_list|)
argument_list|)
decl_stmt|;
name|binder
operator|.
name|install
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is      * itself bound with {@code annotationType}.      */
DECL|method|newSetBinder
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Multibinder
argument_list|<
name|T
argument_list|>
name|newSetBinder
parameter_list|(
name|Binder
name|binder
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|)
block|{
return|return
name|newSetBinder
argument_list|(
name|binder
argument_list|,
name|TypeLiteral
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|,
name|annotationType
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// wrapping a T in a Set safely returns a Set<T>
DECL|method|setOf
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|TypeLiteral
argument_list|<
name|Set
argument_list|<
name|T
argument_list|>
argument_list|>
name|setOf
parameter_list|(
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|elementType
parameter_list|)
block|{
name|Type
name|type
init|=
name|Types
operator|.
name|setOf
argument_list|(
name|elementType
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|TypeLiteral
argument_list|<
name|Set
argument_list|<
name|T
argument_list|>
argument_list|>
operator|)
name|TypeLiteral
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Returns a binding builder used to add a new element in the set. Each      * bound element must have a distinct value. Bound providers will be      * evaluated each time the set is injected.      *<p/>      *<p>It is an error to call this method without also calling one of the      * {@code to} methods on the returned binding builder.      *<p/>      *<p>Scoping elements independently is supported. Use the {@code in} method      * to specify a binding scope.      */
DECL|method|addBinding
specifier|public
specifier|abstract
name|LinkedBindingBuilder
argument_list|<
name|T
argument_list|>
name|addBinding
parameter_list|()
function_decl|;
comment|/**      * The actual multibinder plays several roles:      *<p/>      *<p>As a Multibinder, it acts as a factory for LinkedBindingBuilders for      * each of the set's elements. Each binding is given an annotation that      * identifies it as a part of this set.      *<p/>      *<p>As a Module, it installs the binding to the set itself. As a module,      * this implements equals() and hashcode() in order to trick Guice into      * executing its configure() method only once. That makes it so that      * multiple multibinders can be created for the same target collection, but      * only one is bound. Since the list of bindings is retrieved from the      * injector itself (and not the multibinder), each multibinder has access to      * all contributions from all multibinders.      *<p/>      *<p>As a Provider, this constructs the set instances.      *<p/>      *<p>We use a subclass to hide 'implements Module, Provider' from the public      * API.      */
DECL|class|RealMultibinder
specifier|static
specifier|final
class|class
name|RealMultibinder
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Multibinder
argument_list|<
name|T
argument_list|>
implements|implements
name|Module
implements|,
name|Provider
argument_list|<
name|Set
argument_list|<
name|T
argument_list|>
argument_list|>
implements|,
name|HasDependencies
block|{
DECL|field|elementType
specifier|private
specifier|final
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|elementType
decl_stmt|;
DECL|field|setName
specifier|private
specifier|final
name|String
name|setName
decl_stmt|;
DECL|field|setKey
specifier|private
specifier|final
name|Key
argument_list|<
name|Set
argument_list|<
name|T
argument_list|>
argument_list|>
name|setKey
decl_stmt|;
comment|/* the target injector's binder. non-null until initialization, null afterwards */
DECL|field|binder
specifier|private
name|Binder
name|binder
decl_stmt|;
comment|/* a provider for each element in the set. null until initialization, non-null afterwards */
DECL|field|providers
specifier|private
name|List
argument_list|<
name|Provider
argument_list|<
name|T
argument_list|>
argument_list|>
name|providers
decl_stmt|;
DECL|field|dependencies
specifier|private
name|Set
argument_list|<
name|Dependency
argument_list|<
name|?
argument_list|>
argument_list|>
name|dependencies
decl_stmt|;
DECL|method|RealMultibinder
specifier|private
name|RealMultibinder
parameter_list|(
name|Binder
name|binder
parameter_list|,
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|elementType
parameter_list|,
name|String
name|setName
parameter_list|,
name|Key
argument_list|<
name|Set
argument_list|<
name|T
argument_list|>
argument_list|>
name|setKey
parameter_list|)
block|{
name|this
operator|.
name|binder
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|binder
argument_list|,
literal|"binder"
argument_list|)
expr_stmt|;
name|this
operator|.
name|elementType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|elementType
argument_list|,
literal|"elementType"
argument_list|)
expr_stmt|;
name|this
operator|.
name|setName
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|setName
argument_list|,
literal|"setName"
argument_list|)
expr_stmt|;
name|this
operator|.
name|setKey
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|setKey
argument_list|,
literal|"setKey"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|configure
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|checkConfiguration
argument_list|(
operator|!
name|isInitialized
argument_list|()
argument_list|,
literal|"Multibinder was already initialized"
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|setKey
argument_list|)
operator|.
name|toProvider
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addBinding
specifier|public
name|LinkedBindingBuilder
argument_list|<
name|T
argument_list|>
name|addBinding
parameter_list|()
block|{
name|checkConfiguration
argument_list|(
operator|!
name|isInitialized
argument_list|()
argument_list|,
literal|"Multibinder was already initialized"
argument_list|)
expr_stmt|;
return|return
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|elementType
argument_list|,
operator|new
name|RealElement
argument_list|(
name|setName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Invoked by Guice at Injector-creation time to prepare providers for each          * element in this set. At this time the set's size is known, but its          * contents are only evaluated when get() is invoked.          */
annotation|@
name|Inject
DECL|method|initialize
name|void
name|initialize
parameter_list|(
name|Injector
name|injector
parameter_list|)
block|{
name|providers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Dependency
argument_list|<
name|?
argument_list|>
argument_list|>
name|dependencies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Binding
argument_list|<
name|?
argument_list|>
name|entry
range|:
name|injector
operator|.
name|findBindingsByType
argument_list|(
name|elementType
argument_list|)
control|)
block|{
if|if
condition|(
name|keyMatches
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// protected by findBindingsByType()
name|Binding
argument_list|<
name|T
argument_list|>
name|binding
init|=
operator|(
name|Binding
argument_list|<
name|T
argument_list|>
operator|)
name|entry
decl_stmt|;
name|providers
operator|.
name|add
argument_list|(
name|binding
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|dependencies
operator|.
name|add
argument_list|(
name|Dependency
operator|.
name|get
argument_list|(
name|binding
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|dependencies
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|this
operator|.
name|binder
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|keyMatches
specifier|private
name|boolean
name|keyMatches
parameter_list|(
name|Key
argument_list|<
name|?
argument_list|>
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|getTypeLiteral
argument_list|()
operator|.
name|equals
argument_list|(
name|elementType
argument_list|)
operator|&&
name|key
operator|.
name|getAnnotation
argument_list|()
operator|instanceof
name|Element
operator|&&
operator|(
operator|(
name|Element
operator|)
name|key
operator|.
name|getAnnotation
argument_list|()
operator|)
operator|.
name|setName
argument_list|()
operator|.
name|equals
argument_list|(
name|setName
argument_list|)
return|;
block|}
DECL|method|isInitialized
specifier|private
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|binder
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Set
argument_list|<
name|T
argument_list|>
name|get
parameter_list|()
block|{
name|checkConfiguration
argument_list|(
name|isInitialized
argument_list|()
argument_list|,
literal|"Multibinder is not initialized"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Provider
argument_list|<
name|T
argument_list|>
name|provider
range|:
name|providers
control|)
block|{
specifier|final
name|T
name|newValue
init|=
name|provider
operator|.
name|get
argument_list|()
decl_stmt|;
name|checkConfiguration
argument_list|(
name|newValue
operator|!=
literal|null
argument_list|,
literal|"Set injection failed due to null element"
argument_list|)
expr_stmt|;
name|checkConfiguration
argument_list|(
name|result
operator|.
name|add
argument_list|(
name|newValue
argument_list|)
argument_list|,
literal|"Set injection failed due to duplicated element \"%s\""
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|result
argument_list|)
return|;
block|}
DECL|method|getSetName
name|String
name|getSetName
parameter_list|()
block|{
return|return
name|setName
return|;
block|}
DECL|method|getSetKey
name|Key
argument_list|<
name|Set
argument_list|<
name|T
argument_list|>
argument_list|>
name|getSetKey
parameter_list|()
block|{
return|return
name|setKey
return|;
block|}
annotation|@
name|Override
DECL|method|getDependencies
specifier|public
name|Set
argument_list|<
name|Dependency
argument_list|<
name|?
argument_list|>
argument_list|>
name|getDependencies
parameter_list|()
block|{
return|return
name|dependencies
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|RealMultibinder
operator|&&
operator|(
operator|(
name|RealMultibinder
argument_list|<
name|?
argument_list|>
operator|)
name|o
operator|)
operator|.
name|setKey
operator|.
name|equals
argument_list|(
name|setKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|setKey
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|setName
argument_list|)
operator|.
name|append
argument_list|(
name|setName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|" "
else|:
literal|""
argument_list|)
operator|.
name|append
argument_list|(
literal|"Multibinder<"
argument_list|)
operator|.
name|append
argument_list|(
name|elementType
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|checkConfiguration
specifier|static
name|void
name|checkConfiguration
parameter_list|(
name|boolean
name|condition
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|condition
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|Message
argument_list|(
name|Errors
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|checkNotNull
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|checkNotNull
parameter_list|(
name|T
name|reference
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
return|return
name|reference
return|;
block|}
name|NullPointerException
name|npe
init|=
operator|new
name|NullPointerException
argument_list|(
name|name
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|Message
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|npe
operator|.
name|toString
argument_list|()
argument_list|,
name|npe
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

