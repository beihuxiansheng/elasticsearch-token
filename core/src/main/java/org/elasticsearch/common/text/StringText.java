begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.text
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_comment
comment|/**  * A {@link String} only representation of the text. Will always convert to bytes on the fly.  */
end_comment

begin_class
DECL|class|StringText
specifier|public
class|class
name|StringText
implements|implements
name|Text
block|{
DECL|field|EMPTY_ARRAY
specifier|public
specifier|static
specifier|final
name|Text
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|Text
index|[
literal|0
index|]
decl_stmt|;
DECL|method|convertFromStringArray
specifier|public
specifier|static
name|Text
index|[]
name|convertFromStringArray
parameter_list|(
name|String
index|[]
name|strings
parameter_list|)
block|{
if|if
condition|(
name|strings
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_ARRAY
return|;
block|}
name|Text
index|[]
name|texts
init|=
operator|new
name|Text
index|[
name|strings
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|texts
index|[
name|i
index|]
operator|=
operator|new
name|StringText
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|texts
return|;
block|}
DECL|field|text
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
DECL|field|hash
specifier|private
name|int
name|hash
decl_stmt|;
DECL|method|StringText
specifier|public
name|StringText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasBytes
specifier|public
name|boolean
name|hasBytes
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|bytes
specifier|public
name|BytesReference
name|bytes
parameter_list|()
block|{
return|return
operator|new
name|BytesArray
argument_list|(
name|text
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hasString
specifier|public
name|boolean
name|hasString
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|string
specifier|public
name|String
name|string
parameter_list|()
block|{
return|return
name|text
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|string
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// we use bytes here so we can be consistent with other text implementations
if|if
condition|(
name|hash
operator|==
literal|0
condition|)
block|{
name|hash
operator|=
name|bytes
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
comment|// we use bytes here so we can be consistent with other text implementations
return|return
name|bytes
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|obj
operator|)
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Text
name|text
parameter_list|)
block|{
return|return
name|UTF8SortedAsUnicodeComparator
operator|.
name|utf8SortedAsUnicodeSortOrder
operator|.
name|compare
argument_list|(
name|bytes
argument_list|()
argument_list|,
name|text
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

