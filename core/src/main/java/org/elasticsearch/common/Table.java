begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_class
DECL|class|Table
specifier|public
class|class
name|Table
block|{
DECL|field|headers
specifier|private
name|List
argument_list|<
name|Cell
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|rows
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|map
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|headerMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Cell
argument_list|>
name|headerMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|currentCells
specifier|private
name|List
argument_list|<
name|Cell
argument_list|>
name|currentCells
decl_stmt|;
DECL|field|inHeaders
specifier|private
name|boolean
name|inHeaders
init|=
literal|false
decl_stmt|;
DECL|field|withTime
specifier|private
name|boolean
name|withTime
init|=
literal|false
decl_stmt|;
DECL|field|EPOCH
specifier|public
specifier|static
specifier|final
name|String
name|EPOCH
init|=
literal|"epoch"
decl_stmt|;
DECL|field|TIMESTAMP
specifier|public
specifier|static
specifier|final
name|String
name|TIMESTAMP
init|=
literal|"timestamp"
decl_stmt|;
DECL|method|startHeaders
specifier|public
name|Table
name|startHeaders
parameter_list|()
block|{
name|inHeaders
operator|=
literal|true
expr_stmt|;
name|currentCells
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startHeadersWithTimestamp
specifier|public
name|Table
name|startHeadersWithTimestamp
parameter_list|()
block|{
name|startHeaders
argument_list|()
expr_stmt|;
name|this
operator|.
name|withTime
operator|=
literal|true
expr_stmt|;
name|addCell
argument_list|(
literal|"epoch"
argument_list|,
literal|"alias:t,time;desc:seconds since 1970-01-01 00:00:00"
argument_list|)
expr_stmt|;
name|addCell
argument_list|(
literal|"timestamp"
argument_list|,
literal|"alias:ts,hms,hhmmss;desc:time in HH:MM:SS"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|endHeaders
specifier|public
name|Table
name|endHeaders
parameter_list|()
block|{
if|if
condition|(
name|currentCells
operator|==
literal|null
operator|||
name|currentCells
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no headers added..."
argument_list|)
throw|;
block|}
name|inHeaders
operator|=
literal|false
expr_stmt|;
name|headers
operator|=
name|currentCells
expr_stmt|;
name|currentCells
operator|=
literal|null
expr_stmt|;
comment|/* Create associative structure for columns that          * contain the same cells as the rows:          *          *     header1 => [Cell, Cell, ...]          *     header2 => [Cell, Cell, ...]          *     header3 => [Cell, Cell, ...]          *          * Also populate map to look up headers by name.          *          */
for|for
control|(
name|Cell
name|header
range|:
name|headers
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|header
operator|.
name|value
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|headerMap
operator|.
name|put
argument_list|(
name|header
operator|.
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|field|dateFormat
specifier|private
name|DateTimeFormatter
name|dateFormat
init|=
name|DateTimeFormat
operator|.
name|forPattern
argument_list|(
literal|"HH:mm:ss"
argument_list|)
decl_stmt|;
DECL|method|startRow
specifier|public
name|Table
name|startRow
parameter_list|()
block|{
if|if
condition|(
name|headers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no headers added..."
argument_list|)
throw|;
block|}
name|currentCells
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|headers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|withTime
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|addCell
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
name|time
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|addCell
argument_list|(
name|dateFormat
operator|.
name|print
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|endRow
specifier|public
name|Table
name|endRow
parameter_list|(
name|boolean
name|check
parameter_list|)
block|{
if|if
condition|(
name|currentCells
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no row started..."
argument_list|)
throw|;
block|}
if|if
condition|(
name|check
operator|&&
operator|(
name|currentCells
operator|.
name|size
argument_list|()
operator|!=
name|headers
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"mismatch on number of cells "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|currentCells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|" in a row compared to header "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|headers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|currentCells
argument_list|)
expr_stmt|;
name|currentCells
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|endRow
specifier|public
name|Table
name|endRow
parameter_list|()
block|{
name|endRow
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addCell
specifier|public
name|Table
name|addCell
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|addCell
argument_list|(
name|value
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|addCell
specifier|public
name|Table
name|addCell
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|currentCells
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no block started..."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|inHeaders
condition|)
block|{
if|if
condition|(
name|currentCells
operator|.
name|size
argument_list|()
operator|==
name|headers
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't add more cells to a row than the header"
argument_list|)
throw|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mAttr
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|inHeaders
condition|)
block|{
name|mAttr
operator|=
name|emptyMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// get the attributes of the header cell we are going to add to
name|mAttr
operator|=
name|headers
operator|.
name|get
argument_list|(
name|currentCells
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|attr
expr_stmt|;
block|}
block|}
else|else
block|{
name|mAttr
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|inHeaders
condition|)
block|{
comment|// get the attributes of the header cell we are going to add
name|mAttr
operator|.
name|putAll
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|currentCells
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|attr
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|sAttrs
init|=
name|attributes
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|sAttr
range|:
name|sAttrs
control|)
block|{
if|if
condition|(
name|sAttr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|int
name|idx
init|=
name|sAttr
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|mAttr
operator|.
name|put
argument_list|(
name|sAttr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|,
name|sAttr
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Cell
name|cell
init|=
operator|new
name|Cell
argument_list|(
name|value
argument_list|,
name|mAttr
argument_list|)
decl_stmt|;
name|int
name|cellIndex
init|=
name|currentCells
operator|.
name|size
argument_list|()
decl_stmt|;
name|currentCells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
comment|// If we're in a value row, also populate the named column.
if|if
condition|(
operator|!
name|inHeaders
condition|)
block|{
name|String
name|hdr
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|cellIndex
argument_list|)
operator|.
name|value
decl_stmt|;
name|map
operator|.
name|get
argument_list|(
name|hdr
argument_list|)
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getHeaders
specifier|public
name|List
argument_list|<
name|Cell
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|this
operator|.
name|headers
return|;
block|}
DECL|method|getRows
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|getRows
parameter_list|()
block|{
return|return
name|rows
return|;
block|}
DECL|method|getAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|getAsMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|map
return|;
block|}
DECL|method|getHeaderMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Cell
argument_list|>
name|getHeaderMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|headerMap
return|;
block|}
DECL|method|findHeaderByName
specifier|public
name|Cell
name|findHeaderByName
parameter_list|(
name|String
name|header
parameter_list|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|headers
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|value
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|header
argument_list|)
condition|)
block|{
return|return
name|cell
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getAliasMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAliasMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headerAliasMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|headerCell
init|=
name|headers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|headerName
init|=
name|headerCell
operator|.
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|headerCell
operator|.
name|attr
operator|.
name|containsKey
argument_list|(
literal|"alias"
argument_list|)
condition|)
block|{
name|String
index|[]
name|aliases
init|=
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
name|headerCell
operator|.
name|attr
operator|.
name|get
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliases
control|)
block|{
name|headerAliasMap
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|headerName
argument_list|)
expr_stmt|;
block|}
block|}
name|headerAliasMap
operator|.
name|put
argument_list|(
name|headerName
argument_list|,
name|headerName
argument_list|)
expr_stmt|;
block|}
return|return
name|headerAliasMap
return|;
block|}
DECL|class|Cell
specifier|public
specifier|static
class|class
name|Cell
block|{
DECL|field|value
specifier|public
specifier|final
name|Object
name|value
decl_stmt|;
DECL|field|attr
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attr
decl_stmt|;
DECL|method|Cell
specifier|public
name|Cell
parameter_list|(
name|Object
name|value
parameter_list|,
name|Cell
name|other
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|attr
operator|=
name|other
operator|.
name|attr
expr_stmt|;
block|}
DECL|method|Cell
specifier|public
name|Cell
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|attr
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|Cell
specifier|public
name|Cell
parameter_list|(
name|Object
name|value
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attr
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|attr
operator|=
name|attr
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

