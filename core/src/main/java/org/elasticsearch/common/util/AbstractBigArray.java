begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
operator|.
name|PageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|recycler
operator|.
name|Recycler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/** Common implementation for array lists that slice data into fixed-size blocks. */
end_comment

begin_class
DECL|class|AbstractBigArray
specifier|abstract
class|class
name|AbstractBigArray
extends|extends
name|AbstractArray
block|{
DECL|field|recycler
specifier|private
specifier|final
name|PageCacheRecycler
name|recycler
decl_stmt|;
DECL|field|cache
specifier|private
name|Recycler
operator|.
name|V
argument_list|<
name|?
argument_list|>
index|[]
name|cache
decl_stmt|;
DECL|field|pageShift
specifier|private
specifier|final
name|int
name|pageShift
decl_stmt|;
DECL|field|pageMask
specifier|private
specifier|final
name|int
name|pageMask
decl_stmt|;
DECL|field|size
specifier|protected
name|long
name|size
decl_stmt|;
DECL|method|AbstractBigArray
specifier|protected
name|AbstractBigArray
parameter_list|(
name|int
name|pageSize
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|boolean
name|clearOnResize
parameter_list|)
block|{
name|super
argument_list|(
name|bigArrays
argument_list|,
name|clearOnResize
argument_list|)
expr_stmt|;
name|this
operator|.
name|recycler
operator|=
name|bigArrays
operator|.
name|recycler
expr_stmt|;
if|if
condition|(
name|pageSize
operator|<
literal|128
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"pageSize must be>= 128"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|pageSize
operator|&
operator|(
name|pageSize
operator|-
literal|1
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"pageSize must be a power of two"
argument_list|)
throw|;
block|}
name|this
operator|.
name|pageShift
operator|=
name|Integer
operator|.
name|numberOfTrailingZeros
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|pageMask
operator|=
name|pageSize
operator|-
literal|1
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|recycler
operator|!=
literal|null
condition|)
block|{
name|cache
operator|=
operator|new
name|Recycler
operator|.
name|V
argument_list|<
name|?
argument_list|>
index|[
literal|16
index|]
expr_stmt|;
block|}
else|else
block|{
name|cache
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|numPages
specifier|final
name|int
name|numPages
parameter_list|(
name|long
name|capacity
parameter_list|)
block|{
specifier|final
name|long
name|numPages
init|=
operator|(
name|capacity
operator|+
name|pageMask
operator|)
operator|>>>
name|pageShift
decl_stmt|;
if|if
condition|(
name|numPages
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"pageSize="
operator|+
operator|(
name|pageMask
operator|+
literal|1
operator|)
operator|+
literal|" is too small for such as capacity: "
operator|+
name|capacity
argument_list|)
throw|;
block|}
return|return
operator|(
name|int
operator|)
name|numPages
return|;
block|}
DECL|method|pageSize
specifier|final
name|int
name|pageSize
parameter_list|()
block|{
return|return
name|pageMask
operator|+
literal|1
return|;
block|}
DECL|method|pageIndex
specifier|final
name|int
name|pageIndex
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|index
operator|>>>
name|pageShift
argument_list|)
return|;
block|}
DECL|method|indexInPage
specifier|final
name|int
name|indexInPage
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|index
operator|&
name|pageMask
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
specifier|final
name|long
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|resize
specifier|public
specifier|abstract
name|void
name|resize
parameter_list|(
name|long
name|newSize
parameter_list|)
function_decl|;
DECL|method|numBytesPerElement
specifier|protected
specifier|abstract
name|int
name|numBytesPerElement
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
specifier|final
name|long
name|ramBytesUsed
parameter_list|()
block|{
comment|// rough approximate, we only take into account the size of the values, not the overhead of the array objects
return|return
operator|(
operator|(
name|long
operator|)
name|pageIndex
argument_list|(
name|size
operator|-
literal|1
argument_list|)
operator|+
literal|1
operator|)
operator|*
name|pageSize
argument_list|()
operator|*
name|numBytesPerElement
argument_list|()
return|;
block|}
DECL|method|grow
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|grow
parameter_list|(
name|T
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
specifier|final
name|int
name|newLen
init|=
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|minSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
decl_stmt|;
name|array
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|array
argument_list|,
name|newLen
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
DECL|method|registerNewPage
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|registerNewPage
parameter_list|(
name|Recycler
operator|.
name|V
argument_list|<
name|T
argument_list|>
name|v
parameter_list|,
name|int
name|page
parameter_list|,
name|int
name|expectedSize
parameter_list|)
block|{
name|cache
operator|=
name|grow
argument_list|(
name|cache
argument_list|,
name|page
operator|+
literal|1
argument_list|)
expr_stmt|;
assert|assert
name|cache
index|[
name|page
index|]
operator|==
literal|null
assert|;
name|cache
index|[
name|page
index|]
operator|=
name|v
expr_stmt|;
assert|assert
name|Array
operator|.
name|getLength
argument_list|(
name|v
operator|.
name|v
argument_list|()
argument_list|)
operator|==
name|expectedSize
assert|;
return|return
name|v
operator|.
name|v
argument_list|()
return|;
block|}
DECL|method|newBytePage
specifier|protected
specifier|final
name|byte
index|[]
name|newBytePage
parameter_list|(
name|int
name|page
parameter_list|)
block|{
if|if
condition|(
name|recycler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|byte
index|[]
argument_list|>
name|v
init|=
name|recycler
operator|.
name|bytePage
argument_list|(
name|clearOnResize
argument_list|)
decl_stmt|;
return|return
name|registerNewPage
argument_list|(
name|v
argument_list|,
name|page
argument_list|,
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|byte
index|[
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
index|]
return|;
block|}
block|}
DECL|method|newIntPage
specifier|protected
specifier|final
name|int
index|[]
name|newIntPage
parameter_list|(
name|int
name|page
parameter_list|)
block|{
if|if
condition|(
name|recycler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|int
index|[]
argument_list|>
name|v
init|=
name|recycler
operator|.
name|intPage
argument_list|(
name|clearOnResize
argument_list|)
decl_stmt|;
return|return
name|registerNewPage
argument_list|(
name|v
argument_list|,
name|page
argument_list|,
name|BigArrays
operator|.
name|INT_PAGE_SIZE
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|int
index|[
name|BigArrays
operator|.
name|INT_PAGE_SIZE
index|]
return|;
block|}
block|}
DECL|method|newLongPage
specifier|protected
specifier|final
name|long
index|[]
name|newLongPage
parameter_list|(
name|int
name|page
parameter_list|)
block|{
if|if
condition|(
name|recycler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|long
index|[]
argument_list|>
name|v
init|=
name|recycler
operator|.
name|longPage
argument_list|(
name|clearOnResize
argument_list|)
decl_stmt|;
return|return
name|registerNewPage
argument_list|(
name|v
argument_list|,
name|page
argument_list|,
name|BigArrays
operator|.
name|LONG_PAGE_SIZE
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|long
index|[
name|BigArrays
operator|.
name|LONG_PAGE_SIZE
index|]
return|;
block|}
block|}
DECL|method|newObjectPage
specifier|protected
specifier|final
name|Object
index|[]
name|newObjectPage
parameter_list|(
name|int
name|page
parameter_list|)
block|{
if|if
condition|(
name|recycler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|Object
index|[]
argument_list|>
name|v
init|=
name|recycler
operator|.
name|objectPage
argument_list|()
decl_stmt|;
return|return
name|registerNewPage
argument_list|(
name|v
argument_list|,
name|page
argument_list|,
name|BigArrays
operator|.
name|OBJECT_PAGE_SIZE
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Object
index|[
name|BigArrays
operator|.
name|OBJECT_PAGE_SIZE
index|]
return|;
block|}
block|}
DECL|method|releasePage
specifier|protected
specifier|final
name|void
name|releasePage
parameter_list|(
name|int
name|page
parameter_list|)
block|{
if|if
condition|(
name|recycler
operator|!=
literal|null
condition|)
block|{
name|cache
index|[
name|page
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
index|[
name|page
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
specifier|final
name|void
name|doClose
parameter_list|()
block|{
if|if
condition|(
name|recycler
operator|!=
literal|null
condition|)
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|cache
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

