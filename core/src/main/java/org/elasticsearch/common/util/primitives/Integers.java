begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.primitives
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|primitives
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|Integers
specifier|public
class|class
name|Integers
block|{
comment|/**      * Tries to parse the given String to an int      *      * @param value the String to try to parse to an int      * @return the parsed value as an int or null if the String can not be parsed to an int      */
DECL|method|tryParse
specifier|public
specifier|static
name|Integer
name|tryParse
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|boolean
name|negative
init|=
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
decl_stmt|;
name|int
name|index
init|=
name|negative
condition|?
literal|1
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|index
operator|==
name|value
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|int
name|digit
init|=
name|digit
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
name|index
operator|++
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|digit
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// so we can accumulate to Integer.MIN_VALUE
name|int
name|accumulator
init|=
operator|-
name|digit
decl_stmt|;
for|for
control|(
name|int
name|cap
init|=
name|Integer
operator|.
name|MIN_VALUE
operator|/
literal|10
init|;
name|index
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|accumulator
operator|-=
name|digit
control|)
block|{
name|digit
operator|=
name|digit
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
name|index
operator|++
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|digit
operator|==
operator|-
literal|1
operator|||
name|accumulator
operator|<
name|cap
condition|)
block|{
comment|// non-digit or will overflow
return|return
literal|null
return|;
block|}
name|accumulator
operator|*=
literal|10
expr_stmt|;
if|if
condition|(
name|accumulator
operator|<
name|Integer
operator|.
name|MIN_VALUE
operator|+
name|digit
condition|)
block|{
comment|// will overflow
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|negative
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|accumulator
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|accumulator
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
comment|// overflow
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
name|accumulator
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// non-digit encountered
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
DECL|method|digit
specifier|private
specifier|static
name|int
name|digit
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|?
name|c
operator|-
literal|'0'
else|:
operator|-
literal|1
return|;
block|}
DECL|method|toArray
specifier|public
specifier|static
name|int
index|[]
name|toArray
parameter_list|(
name|Collection
argument_list|<
name|Integer
argument_list|>
name|ints
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ints
argument_list|)
expr_stmt|;
return|return
name|ints
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|s
lambda|->
name|s
argument_list|)
operator|.
name|toArray
argument_list|()
return|;
block|}
DECL|method|checkedCast
specifier|public
specifier|static
name|int
name|checkedCast
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|int
name|cast
init|=
operator|(
name|int
operator|)
name|value
decl_stmt|;
if|if
condition|(
operator|(
name|long
operator|)
name|cast
operator|!=
name|value
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|cast
return|;
block|}
block|}
end_class

end_unit

