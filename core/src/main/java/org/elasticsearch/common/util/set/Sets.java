begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.set
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BinaryOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
DECL|class|Sets
specifier|public
specifier|final
class|class
name|Sets
block|{
DECL|method|Sets
specifier|private
name|Sets
parameter_list|()
block|{     }
DECL|method|newHashSet
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|HashSet
argument_list|<
name|T
argument_list|>
name|newHashSet
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|T
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
DECL|method|newHashSet
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|HashSet
argument_list|<
name|T
argument_list|>
name|newHashSet
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|iterable
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|iterable
argument_list|)
expr_stmt|;
return|return
name|iterable
operator|instanceof
name|Collection
condition|?
operator|new
name|HashSet
argument_list|<>
argument_list|(
operator|(
name|Collection
operator|)
name|iterable
argument_list|)
else|:
name|newHashSet
argument_list|(
name|iterable
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
DECL|method|newHashSet
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|HashSet
argument_list|<
name|T
argument_list|>
name|newHashSet
parameter_list|(
name|T
modifier|...
name|elements
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|T
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|set
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
DECL|method|newConcurrentHashSet
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|newConcurrentHashSet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
DECL|method|haveEmptyIntersection
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|haveEmptyIntersection
parameter_list|(
name|Set
argument_list|<
name|T
argument_list|>
name|left
parameter_list|,
name|Set
argument_list|<
name|T
argument_list|>
name|right
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
operator|!
name|left
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|k
lambda|->
name|right
operator|.
name|contains
argument_list|(
name|k
argument_list|)
argument_list|)
return|;
block|}
DECL|method|difference
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|difference
parameter_list|(
name|Set
argument_list|<
name|T
argument_list|>
name|left
parameter_list|,
name|Set
argument_list|<
name|T
argument_list|>
name|right
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
name|left
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|k
lambda|->
operator|!
name|right
operator|.
name|contains
argument_list|(
name|k
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|sortedDifference
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SortedSet
argument_list|<
name|T
argument_list|>
name|sortedDifference
parameter_list|(
name|Set
argument_list|<
name|T
argument_list|>
name|left
parameter_list|,
name|Set
argument_list|<
name|T
argument_list|>
name|right
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
name|left
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|k
lambda|->
operator|!
name|right
operator|.
name|contains
argument_list|(
name|k
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
operator|new
name|SortedSetCollector
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
DECL|class|SortedSetCollector
specifier|private
specifier|static
class|class
name|SortedSetCollector
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Collector
argument_list|<
name|T
argument_list|,
name|SortedSet
argument_list|<
name|T
argument_list|>
argument_list|,
name|SortedSet
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|supplier
specifier|public
name|Supplier
argument_list|<
name|SortedSet
argument_list|<
name|T
argument_list|>
argument_list|>
name|supplier
parameter_list|()
block|{
return|return
name|TreeSet
operator|::
operator|new
return|;
block|}
annotation|@
name|Override
DECL|method|accumulator
specifier|public
name|BiConsumer
argument_list|<
name|SortedSet
argument_list|<
name|T
argument_list|>
argument_list|,
name|T
argument_list|>
name|accumulator
parameter_list|()
block|{
return|return
parameter_list|(
name|s
parameter_list|,
name|e
parameter_list|)
lambda|->
name|s
operator|.
name|add
argument_list|(
name|e
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|combiner
specifier|public
name|BinaryOperator
argument_list|<
name|SortedSet
argument_list|<
name|T
argument_list|>
argument_list|>
name|combiner
parameter_list|()
block|{
return|return
parameter_list|(
name|s
parameter_list|,
name|t
parameter_list|)
lambda|->
block|{
name|s
operator|.
name|addAll
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|finisher
specifier|public
name|Function
argument_list|<
name|SortedSet
argument_list|<
name|T
argument_list|>
argument_list|,
name|SortedSet
argument_list|<
name|T
argument_list|>
argument_list|>
name|finisher
parameter_list|()
block|{
return|return
name|Function
operator|.
name|identity
argument_list|()
return|;
block|}
DECL|field|CHARACTERISTICS
specifier|static
specifier|final
name|Set
argument_list|<
name|Characteristics
argument_list|>
name|CHARACTERISTICS
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Collector
operator|.
name|Characteristics
operator|.
name|IDENTITY_FINISH
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|characteristics
specifier|public
name|Set
argument_list|<
name|Characteristics
argument_list|>
name|characteristics
parameter_list|()
block|{
return|return
name|CHARACTERISTICS
return|;
block|}
block|}
DECL|method|union
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|union
parameter_list|(
name|Set
argument_list|<
name|T
argument_list|>
name|left
parameter_list|,
name|Set
argument_list|<
name|T
argument_list|>
name|right
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|union
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|union
operator|.
name|addAll
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
name|union
return|;
block|}
block|}
end_class

end_unit

