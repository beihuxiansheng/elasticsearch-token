begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_comment
comment|/**  * URI Pattern matcher  *  * The pattern is URI in which authority, path, query and fragment can be replace with simple pattern.  *  * For example: foobar://*.local/some_path/*?*#* will match all uris with schema foobar in local domain  * with any port, with path that starts some_path and with any query and fragment.  */
end_comment

begin_class
DECL|class|URIPattern
specifier|public
class|class
name|URIPattern
block|{
DECL|field|uriPattern
specifier|private
specifier|final
name|URI
name|uriPattern
decl_stmt|;
comment|/**      * Constructs uri pattern      */
DECL|method|URIPattern
specifier|public
name|URIPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
try|try
block|{
name|uriPattern
operator|=
operator|new
name|URI
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot parse URI pattern ["
operator|+
name|pattern
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns true if the given uri matches the pattern      */
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
return|return
name|matchNormalized
argument_list|(
name|uri
operator|.
name|normalize
argument_list|()
argument_list|)
return|;
block|}
DECL|method|match
specifier|public
specifier|static
name|boolean
name|match
parameter_list|(
name|URIPattern
index|[]
name|patterns
parameter_list|,
name|URI
name|uri
parameter_list|)
block|{
name|URI
name|normalized
init|=
name|uri
operator|.
name|normalize
argument_list|()
decl_stmt|;
for|for
control|(
name|URIPattern
name|pattern
range|:
name|patterns
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|matchNormalized
argument_list|(
name|normalized
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|matchNormalized
specifier|private
name|boolean
name|matchNormalized
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uriPattern
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
comment|// This url only has scheme, scheme-specific part and fragment
return|return
name|uri
operator|.
name|isOpaque
argument_list|()
operator|&&
name|match
argument_list|(
name|uriPattern
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|&&
name|match
argument_list|(
name|uriPattern
operator|.
name|getSchemeSpecificPart
argument_list|()
argument_list|,
name|uri
operator|.
name|getSchemeSpecificPart
argument_list|()
argument_list|)
operator|&&
name|match
argument_list|(
name|uriPattern
operator|.
name|getFragment
argument_list|()
argument_list|,
name|uri
operator|.
name|getFragment
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|match
argument_list|(
name|uriPattern
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|&&
name|match
argument_list|(
name|uriPattern
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
operator|&&
name|match
argument_list|(
name|uriPattern
operator|.
name|getQuery
argument_list|()
argument_list|,
name|uri
operator|.
name|getQuery
argument_list|()
argument_list|)
operator|&&
name|match
argument_list|(
name|uriPattern
operator|.
name|getPath
argument_list|()
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
operator|&&
name|match
argument_list|(
name|uriPattern
operator|.
name|getFragment
argument_list|()
argument_list|,
name|uri
operator|.
name|getFragment
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|match
specifier|private
name|boolean
name|match
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// If the pattern is empty or matches anything - it's a match
if|if
condition|(
name|pattern
operator|==
literal|null
operator|||
name|Regex
operator|.
name|isMatchAllPattern
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|uriPattern
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

