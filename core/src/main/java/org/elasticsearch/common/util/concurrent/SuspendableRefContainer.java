begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Container that represents a resource with reference counting capabilities. Provides operations to suspend acquisition of new references.  * This is useful for resource management when resources are intermittently unavailable.  *  * Assumes less than Integer.MAX_VALUE references are concurrently being held at one point in time.  */
end_comment

begin_class
DECL|class|SuspendableRefContainer
specifier|public
specifier|final
class|class
name|SuspendableRefContainer
block|{
DECL|field|TOTAL_PERMITS
specifier|private
specifier|static
specifier|final
name|int
name|TOTAL_PERMITS
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|semaphore
specifier|private
specifier|final
name|Semaphore
name|semaphore
decl_stmt|;
DECL|method|SuspendableRefContainer
specifier|public
name|SuspendableRefContainer
parameter_list|()
block|{
comment|// fair semaphore to ensure that blockAcquisition() does not starve under thread contention
name|this
operator|.
name|semaphore
operator|=
operator|new
name|Semaphore
argument_list|(
name|TOTAL_PERMITS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tries acquiring a reference. Returns reference holder if reference acquisition is not blocked at the time of invocation (see      * {@link #blockAcquisition()}). Returns null if reference acquisition is blocked at the time of invocation.      *      * @return reference holder if reference acquisition is not blocked, null otherwise      * @throws InterruptedException if the current thread is interrupted      */
DECL|method|tryAcquire
specifier|public
name|Releasable
name|tryAcquire
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|semaphore
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
comment|// the untimed tryAcquire methods do not honor the fairness setting
return|return
name|idempotentRelease
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Acquires a reference. Blocks if reference acquisition is blocked at the time of invocation.      *      * @return reference holder      * @throws InterruptedException if the current thread is interrupted      */
DECL|method|acquire
specifier|public
name|Releasable
name|acquire
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
return|return
name|idempotentRelease
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**      * Acquires a reference. Blocks if reference acquisition is blocked at the time of invocation.      *      * @return reference holder      */
DECL|method|acquireUninterruptibly
specifier|public
name|Releasable
name|acquireUninterruptibly
parameter_list|()
block|{
name|semaphore
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
return|return
name|idempotentRelease
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**      * Disables reference acquisition and waits until all existing references are released.      * When released, reference acquisition is enabled again.      * This guarantees that between successful acquisition and release, no one is holding a reference.      *      * @return references holder to all references      */
DECL|method|blockAcquisition
specifier|public
name|Releasable
name|blockAcquisition
parameter_list|()
block|{
name|semaphore
operator|.
name|acquireUninterruptibly
argument_list|(
name|TOTAL_PERMITS
argument_list|)
expr_stmt|;
return|return
name|idempotentRelease
argument_list|(
name|TOTAL_PERMITS
argument_list|)
return|;
block|}
comment|/**      * Helper method that ensures permits are only released once      *      * @return reference holder      */
DECL|method|idempotentRelease
specifier|private
name|Releasable
name|idempotentRelease
parameter_list|(
name|int
name|permits
parameter_list|)
block|{
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
return|return
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|semaphore
operator|.
name|release
argument_list|(
name|permits
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the number of references currently being held.      */
DECL|method|activeRefs
specifier|public
name|int
name|activeRefs
parameter_list|()
block|{
name|int
name|availablePermits
init|=
name|semaphore
operator|.
name|availablePermits
argument_list|()
decl_stmt|;
if|if
condition|(
name|availablePermits
operator|==
literal|0
condition|)
block|{
comment|// when blockAcquisition is holding all permits
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|TOTAL_PERMITS
operator|-
name|availablePermits
return|;
block|}
block|}
block|}
end_class

end_unit

