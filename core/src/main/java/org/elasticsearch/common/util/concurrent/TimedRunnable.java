begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_comment
comment|/**  * A class used to wrap a {@code Runnable} that allows capturing the time the task since creation  * through execution.  */
end_comment

begin_class
DECL|class|TimedRunnable
class|class
name|TimedRunnable
implements|implements
name|Runnable
block|{
DECL|field|original
specifier|private
specifier|final
name|Runnable
name|original
decl_stmt|;
DECL|field|creationTimeNanos
specifier|private
specifier|final
name|long
name|creationTimeNanos
decl_stmt|;
DECL|field|finishTimeNanos
specifier|private
name|long
name|finishTimeNanos
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|TimedRunnable
name|TimedRunnable
parameter_list|(
name|Runnable
name|original
parameter_list|)
block|{
name|this
operator|.
name|original
operator|=
name|original
expr_stmt|;
name|this
operator|.
name|creationTimeNanos
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|original
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|finishTimeNanos
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Return the time since this task was created until it finished running.      * If the task is still running or has not yet been run, returns -1.      */
DECL|method|getTotalNanos
name|long
name|getTotalNanos
parameter_list|()
block|{
if|if
condition|(
name|finishTimeNanos
operator|==
operator|-
literal|1
condition|)
block|{
comment|// There must have been an exception thrown, the total time is unknown (-1)
return|return
operator|-
literal|1
return|;
block|}
return|return
name|finishTimeNanos
operator|-
name|creationTimeNanos
return|;
block|}
block|}
end_class

end_unit

