begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|EsRejectedExecutionException
specifier|public
class|class
name|EsRejectedExecutionException
extends|extends
name|ElasticsearchException
block|{
DECL|field|isExecutorShutdown
specifier|private
specifier|final
name|boolean
name|isExecutorShutdown
decl_stmt|;
DECL|method|EsRejectedExecutionException
specifier|public
name|EsRejectedExecutionException
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|isExecutorShutdown
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|this
operator|.
name|isExecutorShutdown
operator|=
name|isExecutorShutdown
expr_stmt|;
block|}
DECL|method|EsRejectedExecutionException
specifier|public
name|EsRejectedExecutionException
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|this
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|EsRejectedExecutionException
specifier|public
name|EsRejectedExecutionException
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|isExecutorShutdown
parameter_list|)
block|{
name|this
argument_list|(
name|message
argument_list|,
name|isExecutorShutdown
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|EsRejectedExecutionException
specifier|public
name|EsRejectedExecutionException
parameter_list|()
block|{
name|super
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|isExecutorShutdown
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|EsRejectedExecutionException
specifier|public
name|EsRejectedExecutionException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|isExecutorShutdown
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
return|return
name|RestStatus
operator|.
name|TOO_MANY_REQUESTS
return|;
block|}
DECL|method|EsRejectedExecutionException
specifier|public
name|EsRejectedExecutionException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|isExecutorShutdown
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isExecutorShutdown
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if the thread pool that rejected the execution was terminated      * shortly after the rejection. Its possible that this returns false and the      * thread pool has since been terminated but if this returns false then the      * termination wasn't a factor in this rejection. Conversely if this returns      * true the shutdown was probably a factor in this rejection but might have      * been triggered just after the action rejection.      */
DECL|method|isExecutorShutdown
specifier|public
name|boolean
name|isExecutorShutdown
parameter_list|()
block|{
return|return
name|isExecutorShutdown
return|;
block|}
block|}
end_class

end_unit

