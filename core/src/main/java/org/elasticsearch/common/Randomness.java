begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_comment
comment|/**  * Provides factory methods for producing reproducible sources of  * randomness. Reproducible sources of randomness contribute to  * reproducible tests. When running the Elasticsearch test suite, the  * test runner will establish a global random seed accessible via the  * system property "tests.seed". By seeding a random number generator  * with this global seed, we ensure that instances of Random produced  * with this class produce reproducible sources of randomness under  * when running under the Elasticsearch test suite. Alternatively,  * a reproducible source of randomness can be produced by providing a  * setting a reproducible seed. When running the Elasticsearch server  * process, non-reproducible sources of randomness are provided (unless  * a setting is provided for a module that exposes a seed setting (e.g.,  * DiscoveryService#DISCOVERY_SEED_SETTING)).  */
end_comment

begin_class
DECL|class|Randomness
specifier|public
specifier|final
class|class
name|Randomness
block|{
DECL|field|currentMethod
specifier|private
specifier|static
specifier|final
name|Method
name|currentMethod
decl_stmt|;
DECL|field|getRandomMethod
specifier|private
specifier|static
specifier|final
name|Method
name|getRandomMethod
decl_stmt|;
static|static
block|{
name|Method
name|maybeCurrentMethod
decl_stmt|;
name|Method
name|maybeGetRandomMethod
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.carrotsearch.randomizedtesting.RandomizedContext"
argument_list|)
decl_stmt|;
name|maybeCurrentMethod
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"current"
argument_list|)
expr_stmt|;
name|maybeGetRandomMethod
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getRandom"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|maybeCurrentMethod
operator|=
literal|null
expr_stmt|;
name|maybeGetRandomMethod
operator|=
literal|null
expr_stmt|;
block|}
name|currentMethod
operator|=
name|maybeCurrentMethod
expr_stmt|;
name|getRandomMethod
operator|=
name|maybeGetRandomMethod
expr_stmt|;
block|}
DECL|method|Randomness
specifier|private
name|Randomness
parameter_list|()
block|{}
comment|/**      * Provides a reproducible source of randomness seeded by a long      * seed in the settings with the key setting.      *      * @param settings the settings containing the seed      * @param setting  the setting to access the seed      * @return a reproducible source of randomness      */
DECL|method|get
specifier|public
specifier|static
name|Random
name|get
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Setting
argument_list|<
name|Long
argument_list|>
name|setting
parameter_list|)
block|{
if|if
condition|(
name|setting
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
return|return
operator|new
name|Random
argument_list|(
name|setting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|get
argument_list|()
return|;
block|}
block|}
comment|/**      * Provides a source of randomness that is reproducible when      * running under the Elasticsearch test suite, and otherwise      * produces a non-reproducible source of randomness. Reproducible      * sources of randomness are created when the system property      * "tests.seed" is set and the security policy allows reading this      * system property. Otherwise, non-reproducible sources of      * randomness are created.      *      * @return a source of randomness      * @throws IllegalStateException if running tests but was not able      *                               to acquire an instance of Random from      *                               RandomizedContext or tests are      *                               running but tests.seed is not set      */
DECL|method|get
specifier|public
specifier|static
name|Random
name|get
parameter_list|()
block|{
if|if
condition|(
name|currentMethod
operator|!=
literal|null
operator|&&
name|getRandomMethod
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Object
name|randomizedContext
init|=
name|currentMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
operator|(
name|Random
operator|)
name|getRandomMethod
operator|.
name|invoke
argument_list|(
name|randomizedContext
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ReflectiveOperationException
name|e
parameter_list|)
block|{
comment|// unexpected, bail
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"running tests but failed to invoke RandomizedContext#getRandom"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|getWithoutSeed
argument_list|()
return|;
block|}
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"ThreadLocalRandom is okay when not running tests"
argument_list|)
DECL|method|getWithoutSeed
specifier|private
specifier|static
name|Random
name|getWithoutSeed
parameter_list|()
block|{
assert|assert
name|currentMethod
operator|==
literal|null
operator|&&
name|getRandomMethod
operator|==
literal|null
operator|:
literal|"running under tests but tried to create non-reproducible random"
assert|;
return|return
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
return|;
block|}
DECL|method|shuffle
specifier|public
specifier|static
name|void
name|shuffle
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|list
argument_list|,
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

