begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * Implements exponentially weighted moving averages (commonly abbreviated EWMA) for a single value.  * This class is safe to share between threads.  */
end_comment

begin_class
DECL|class|ExponentiallyWeightedMovingAverage
specifier|public
class|class
name|ExponentiallyWeightedMovingAverage
block|{
DECL|field|alpha
specifier|private
specifier|final
name|double
name|alpha
decl_stmt|;
DECL|field|averageBits
specifier|private
specifier|final
name|AtomicLong
name|averageBits
decl_stmt|;
comment|/**      * Create a new EWMA with a given {@code alpha} and {@code initialAvg}. A smaller alpha means      * that new data points will have less weight, where a high alpha means older data points will      * have a lower influence.      */
DECL|method|ExponentiallyWeightedMovingAverage
specifier|public
name|ExponentiallyWeightedMovingAverage
parameter_list|(
name|double
name|alpha
parameter_list|,
name|double
name|initialAvg
parameter_list|)
block|{
if|if
condition|(
name|alpha
argument_list|<
literal|0
operator|||
name|alpha
argument_list|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"alpha must be greater or equal to 0 and less than or equal to 1"
argument_list|)
throw|;
block|}
name|this
operator|.
name|alpha
operator|=
name|alpha
expr_stmt|;
name|this
operator|.
name|averageBits
operator|=
operator|new
name|AtomicLong
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|initialAvg
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getAverage
specifier|public
name|double
name|getAverage
parameter_list|()
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|this
operator|.
name|averageBits
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|addValue
specifier|public
name|void
name|addValue
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
name|boolean
name|successful
init|=
literal|false
decl_stmt|;
do|do
block|{
specifier|final
name|long
name|currentBits
init|=
name|this
operator|.
name|averageBits
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|double
name|currentAvg
init|=
name|getAverage
argument_list|()
decl_stmt|;
specifier|final
name|double
name|newAvg
init|=
operator|(
name|alpha
operator|*
name|newValue
operator|)
operator|+
operator|(
operator|(
literal|1
operator|-
name|alpha
operator|)
operator|*
name|currentAvg
operator|)
decl_stmt|;
specifier|final
name|long
name|newBits
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|newAvg
argument_list|)
decl_stmt|;
name|successful
operator|=
name|averageBits
operator|.
name|compareAndSet
argument_list|(
name|currentBits
argument_list|,
name|newBits
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|successful
operator|==
literal|false
condition|)
do|;
block|}
block|}
end_class

end_unit

