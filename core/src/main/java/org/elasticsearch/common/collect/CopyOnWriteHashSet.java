begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.collect
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ForwardingSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * {@link Set} implementation based on {@link CopyOnWriteHashMap}.  * Null values are not supported.  */
end_comment

begin_class
DECL|class|CopyOnWriteHashSet
specifier|public
class|class
name|CopyOnWriteHashSet
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ForwardingSet
argument_list|<
name|T
argument_list|>
block|{
comment|/**      * Return a copy of the provided set.      */
DECL|method|copyOf
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|CopyOnWriteHashSet
argument_list|<
name|T
argument_list|>
name|copyOf
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|set
parameter_list|)
block|{
if|if
condition|(
name|set
operator|instanceof
name|CopyOnWriteHashSet
condition|)
block|{
comment|// no need to copy in that case
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|CopyOnWriteHashSet
argument_list|<
name|T
argument_list|>
name|cowSet
init|=
operator|(
name|CopyOnWriteHashSet
argument_list|<
name|T
argument_list|>
operator|)
name|set
decl_stmt|;
return|return
name|cowSet
return|;
block|}
else|else
block|{
return|return
operator|new
name|CopyOnWriteHashSet
argument_list|<
name|T
argument_list|>
argument_list|()
operator|.
name|copyAndAddAll
argument_list|(
name|set
argument_list|)
return|;
block|}
block|}
DECL|field|map
specifier|private
specifier|final
name|CopyOnWriteHashMap
argument_list|<
name|T
argument_list|,
name|Boolean
argument_list|>
name|map
decl_stmt|;
comment|/** Create a new empty set. */
DECL|method|CopyOnWriteHashSet
specifier|public
name|CopyOnWriteHashSet
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|CopyOnWriteHashMap
argument_list|<
name|T
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|CopyOnWriteHashSet
specifier|private
name|CopyOnWriteHashSet
parameter_list|(
name|CopyOnWriteHashMap
argument_list|<
name|T
argument_list|,
name|Boolean
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate
specifier|protected
name|Set
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|map
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Copy the current set and return a copy that contains or replaces<code>entry</code>.      */
DECL|method|copyAndAdd
specifier|public
name|CopyOnWriteHashSet
argument_list|<
name|T
argument_list|>
name|copyAndAdd
parameter_list|(
name|T
name|entry
parameter_list|)
block|{
return|return
operator|new
name|CopyOnWriteHashSet
argument_list|<>
argument_list|(
name|map
operator|.
name|copyAndPut
argument_list|(
name|entry
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Copy the current set and return a copy that is the union of the current      * set and<code>entries</code>, potentially replacing existing entries in      * case of equality.      */
DECL|method|copyAndAddAll
specifier|public
name|CopyOnWriteHashSet
argument_list|<
name|T
argument_list|>
name|copyAndAddAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|entries
parameter_list|)
block|{
specifier|final
name|Collection
argument_list|<
name|Entry
argument_list|<
name|T
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|asMapEntries
init|=
name|Collections2
operator|.
name|transform
argument_list|(
name|entries
argument_list|,
operator|new
name|Function
argument_list|<
name|T
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|T
argument_list|,
name|Boolean
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|T
argument_list|,
name|Boolean
argument_list|>
name|apply
parameter_list|(
name|T
name|input
parameter_list|)
block|{
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|input
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|CopyOnWriteHashMap
argument_list|<
name|T
argument_list|,
name|Boolean
argument_list|>
name|updated
init|=
name|this
operator|.
name|map
operator|.
name|copyAndPutAll
argument_list|(
name|asMapEntries
argument_list|)
decl_stmt|;
return|return
operator|new
name|CopyOnWriteHashSet
argument_list|<>
argument_list|(
name|updated
argument_list|)
return|;
block|}
comment|/**      * Copy the current set and return a copy that removes<code>entry</code>      * if it exists.      */
DECL|method|copyAndRemove
specifier|public
name|CopyOnWriteHashSet
argument_list|<
name|T
argument_list|>
name|copyAndRemove
parameter_list|(
name|Object
name|entry
parameter_list|)
block|{
specifier|final
name|CopyOnWriteHashMap
argument_list|<
name|T
argument_list|,
name|Boolean
argument_list|>
name|updated
init|=
name|map
operator|.
name|copyAndRemove
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
operator|==
name|map
condition|)
block|{
return|return
name|this
return|;
block|}
else|else
block|{
return|return
operator|new
name|CopyOnWriteHashSet
argument_list|<>
argument_list|(
name|updated
argument_list|)
return|;
block|}
block|}
comment|/**      * Copy the current set and return a copy that is the difference of the current      * set and<code>entries</code>.      */
DECL|method|copyAndRemoveAll
specifier|public
name|CopyOnWriteHashSet
argument_list|<
name|T
argument_list|>
name|copyAndRemoveAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|entries
parameter_list|)
block|{
name|CopyOnWriteHashMap
argument_list|<
name|T
argument_list|,
name|Boolean
argument_list|>
name|updated
init|=
name|this
operator|.
name|map
operator|.
name|copyAndRemoveAll
argument_list|(
name|entries
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
operator|==
name|map
condition|)
block|{
return|return
name|this
return|;
block|}
else|else
block|{
return|return
operator|new
name|CopyOnWriteHashSet
argument_list|<>
argument_list|(
name|updated
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

