begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.collect
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_class
DECL|class|Iterators
specifier|public
class|class
name|Iterators
block|{
DECL|method|concat
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|T
argument_list|>
name|concat
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
modifier|...
name|iterators
parameter_list|)
block|{
if|if
condition|(
name|iterators
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"iterators"
argument_list|)
throw|;
block|}
comment|// explicit generic type argument needed for type inference
return|return
operator|new
name|ConcatenatedIterator
argument_list|<
name|T
argument_list|>
argument_list|(
name|iterators
argument_list|)
return|;
block|}
DECL|class|ConcatenatedIterator
specifier|static
class|class
name|ConcatenatedIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|iterators
specifier|private
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
index|[]
name|iterators
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|method|ConcatenatedIterator
specifier|public
name|ConcatenatedIterator
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
modifier|...
name|iterators
parameter_list|)
block|{
if|if
condition|(
name|iterators
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"iterators"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iterators
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"iterators["
operator|+
name|i
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|iterators
operator|=
name|iterators
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|boolean
name|hasNext
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|iterators
operator|.
name|length
operator|&&
operator|!
operator|(
name|hasNext
operator|=
name|iterators
index|[
name|index
index|]
operator|.
name|hasNext
argument_list|()
operator|)
condition|)
block|{
name|index
operator|++
expr_stmt|;
block|}
return|return
name|hasNext
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|iterators
index|[
name|index
index|]
operator|.
name|next
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

