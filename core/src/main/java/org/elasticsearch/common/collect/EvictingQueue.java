begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.collect
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_class
DECL|class|EvictingQueue
specifier|public
class|class
name|EvictingQueue
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Queue
argument_list|<
name|T
argument_list|>
block|{
DECL|field|maximumSize
specifier|private
specifier|final
name|int
name|maximumSize
decl_stmt|;
DECL|field|queue
specifier|private
specifier|final
name|ArrayDeque
argument_list|<
name|T
argument_list|>
name|queue
decl_stmt|;
DECL|method|EvictingQueue
specifier|public
name|EvictingQueue
parameter_list|(
name|int
name|maximumSize
parameter_list|)
block|{
if|if
condition|(
name|maximumSize
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maximumSize< 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|maximumSize
operator|=
name|maximumSize
expr_stmt|;
name|this
operator|.
name|queue
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
name|maximumSize
argument_list|)
expr_stmt|;
block|}
DECL|method|remainingCapacity
specifier|public
name|int
name|remainingCapacity
parameter_list|()
block|{
return|return
name|this
operator|.
name|maximumSize
operator|-
name|this
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|T
name|t
parameter_list|)
block|{
if|if
condition|(
name|maximumSize
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|==
name|maximumSize
condition|)
block|{
name|queue
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|offer
specifier|public
name|boolean
name|offer
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|t
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|T
name|remove
parameter_list|()
block|{
return|return
name|queue
operator|.
name|remove
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|poll
specifier|public
name|T
name|poll
parameter_list|()
block|{
return|return
name|queue
operator|.
name|poll
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|element
specifier|public
name|T
name|element
parameter_list|()
block|{
return|return
name|queue
operator|.
name|element
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|peek
specifier|public
name|T
name|peek
parameter_list|()
block|{
return|return
name|queue
operator|.
name|peek
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|queue
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|queue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|queue
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|queue
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toArray
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|queue
operator|.
name|toArray
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toArray
specifier|public
parameter_list|<
name|T1
parameter_list|>
name|T1
index|[]
name|toArray
parameter_list|(
name|T1
index|[]
name|a
parameter_list|)
block|{
return|return
name|queue
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|queue
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsAll
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|queue
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addAll
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|c
parameter_list|)
block|{
name|boolean
name|modified
init|=
literal|false
decl_stmt|;
for|for
control|(
name|T
name|e
range|:
name|c
control|)
if|if
condition|(
name|add
argument_list|(
name|e
argument_list|)
condition|)
name|modified
operator|=
literal|true
expr_stmt|;
return|return
name|modified
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|queue
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|queue
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

