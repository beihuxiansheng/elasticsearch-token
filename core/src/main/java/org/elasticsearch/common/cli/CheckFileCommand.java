begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.cli
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributeView
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A helper command that checks if configured paths have been changed when running a CLI command.  * It is only executed in case of specified paths by the command and if the paths underlying filesystem  * supports posix permissions.  *  * If this is the case, a warn message is issued whenever an owner, a group or the file permissions is changed by  * the command being executed and not configured back to its prior state, which should be the task of the command  * being executed.  *  */
end_comment

begin_class
DECL|class|CheckFileCommand
specifier|public
specifier|abstract
class|class
name|CheckFileCommand
extends|extends
name|CliTool
operator|.
name|Command
block|{
DECL|method|CheckFileCommand
specifier|public
name|CheckFileCommand
parameter_list|(
name|Terminal
name|terminal
parameter_list|)
block|{
name|super
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
block|}
comment|/**      * abstract method, which should implement the same logic as CliTool.Command.execute(), but is wrapped      */
DECL|method|doExecute
specifier|public
specifier|abstract
name|CliTool
operator|.
name|ExitStatus
name|doExecute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Returns the array of paths, that should be checked if the permissions, user or groups have changed      * before and after execution of the command      *      */
DECL|method|pathsForPermissionsCheck
specifier|protected
specifier|abstract
name|Path
index|[]
name|pathsForPermissionsCheck
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
function_decl|;
annotation|@
name|Override
DECL|method|execute
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
index|[]
name|paths
init|=
name|pathsForPermissionsCheck
argument_list|(
name|settings
argument_list|,
name|env
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|==
literal|null
operator|||
name|paths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|doExecute
argument_list|(
name|settings
argument_list|,
name|env
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|Path
argument_list|,
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
argument_list|>
name|permissions
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|paths
operator|.
name|length
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
name|owners
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|paths
operator|.
name|length
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|paths
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|!=
literal|null
operator|&&
name|paths
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
try|try
block|{
name|boolean
name|supportsPosixPermissions
init|=
name|Environment
operator|.
name|getFileStore
argument_list|(
name|path
argument_list|)
operator|.
name|supportsFileAttributeView
argument_list|(
name|PosixFileAttributeView
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|supportsPosixPermissions
condition|)
block|{
name|PosixFileAttributes
name|attributes
init|=
name|Files
operator|.
name|readAttributes
argument_list|(
name|path
argument_list|,
name|PosixFileAttributes
operator|.
name|class
argument_list|)
decl_stmt|;
name|permissions
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|attributes
operator|.
name|permissions
argument_list|()
argument_list|)
expr_stmt|;
name|owners
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|attributes
operator|.
name|owner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|attributes
operator|.
name|group
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// silently swallow if not supported, no need to log things
block|}
block|}
block|}
name|CliTool
operator|.
name|ExitStatus
name|status
init|=
name|doExecute
argument_list|(
name|settings
argument_list|,
name|env
argument_list|)
decl_stmt|;
comment|// check if permissions differ
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
argument_list|>
name|entry
range|:
name|permissions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|permissionsBeforeWrite
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|permissionsAfterWrite
init|=
name|Files
operator|.
name|getPosixFilePermissions
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|permissionsBeforeWrite
operator|.
name|equals
argument_list|(
name|permissionsAfterWrite
argument_list|)
condition|)
block|{
name|terminal
operator|.
name|printWarn
argument_list|(
literal|"The file permissions of [%s] have changed from [%s] to [%s]"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|PosixFilePermissions
operator|.
name|toString
argument_list|(
name|permissionsBeforeWrite
argument_list|)
argument_list|,
name|PosixFilePermissions
operator|.
name|toString
argument_list|(
name|permissionsAfterWrite
argument_list|)
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|printWarn
argument_list|(
literal|"Please ensure that the user account running Elasticsearch has read access to this file!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check if owner differs
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|owners
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|ownerBeforeWrite
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|ownerAfterWrite
init|=
name|Files
operator|.
name|getOwner
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ownerAfterWrite
operator|.
name|equals
argument_list|(
name|ownerBeforeWrite
argument_list|)
condition|)
block|{
name|terminal
operator|.
name|printWarn
argument_list|(
literal|"WARN: Owner of file [%s] used to be [%s], but now is [%s]"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ownerBeforeWrite
argument_list|,
name|ownerAfterWrite
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check if group differs
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|groups
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|groupBeforeWrite
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|groupAfterWrite
init|=
name|Files
operator|.
name|readAttributes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|PosixFileAttributes
operator|.
name|class
argument_list|)
operator|.
name|group
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|groupAfterWrite
operator|.
name|equals
argument_list|(
name|groupBeforeWrite
argument_list|)
condition|)
block|{
name|terminal
operator|.
name|printWarn
argument_list|(
literal|"WARN: Group of file [%s] used to be [%s], but now is [%s]"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|groupBeforeWrite
argument_list|,
name|groupAfterWrite
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
block|}
end_class

end_unit

