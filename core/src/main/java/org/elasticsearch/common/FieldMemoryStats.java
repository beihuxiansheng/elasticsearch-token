begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectLongHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectLongCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A reusable class to encode<tt>field -&gt; memory size</tt> mappings  */
end_comment

begin_class
DECL|class|FieldMemoryStats
specifier|public
specifier|final
class|class
name|FieldMemoryStats
implements|implements
name|Writeable
implements|,
name|Iterable
argument_list|<
name|ObjectLongCursor
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
DECL|field|stats
specifier|private
specifier|final
name|ObjectLongHashMap
argument_list|<
name|String
argument_list|>
name|stats
decl_stmt|;
comment|/**      * Creates a new FieldMemoryStats instance      */
DECL|method|FieldMemoryStats
specifier|public
name|FieldMemoryStats
parameter_list|(
name|ObjectLongHashMap
argument_list|<
name|String
argument_list|>
name|stats
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|stats
argument_list|,
literal|"status must be non-null"
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|stats
operator|.
name|containsKey
argument_list|(
literal|null
argument_list|)
assert|;
block|}
comment|/**      * Creates a new FieldMemoryStats instance from a stream      */
DECL|method|FieldMemoryStats
specifier|public
name|FieldMemoryStats
parameter_list|(
name|StreamInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|stats
operator|=
operator|new
name|ObjectLongHashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|stats
operator|.
name|put
argument_list|(
name|input
operator|.
name|readString
argument_list|()
argument_list|,
name|input
operator|.
name|readVLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds / merges the given field memory stats into this stats instance      */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|FieldMemoryStats
name|fieldMemoryStats
parameter_list|)
block|{
for|for
control|(
name|ObjectLongCursor
argument_list|<
name|String
argument_list|>
name|entry
range|:
name|fieldMemoryStats
operator|.
name|stats
control|)
block|{
name|stats
operator|.
name|addTo
argument_list|(
name|entry
operator|.
name|key
argument_list|,
name|entry
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|stats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectLongCursor
argument_list|<
name|String
argument_list|>
name|entry
range|:
name|stats
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|key
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|entry
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Generates x-content into the given builder for each of the fields in this stats instance      * @param builder the builder to generated on      * @param key the top level key for this stats object      * @param rawKey the raw byte key for each of the fields byte sizes      * @param readableKey the readable key for each of the fields byte sizes      */
DECL|method|toXContent
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|rawKey
parameter_list|,
name|String
name|readableKey
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectLongCursor
argument_list|<
name|String
argument_list|>
name|entry
range|:
name|stats
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|entry
operator|.
name|key
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|rawKey
argument_list|,
name|readableKey
argument_list|,
name|entry
operator|.
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a deep copy of this stats instance      */
DECL|method|copy
specifier|public
name|FieldMemoryStats
name|copy
parameter_list|()
block|{
return|return
operator|new
name|FieldMemoryStats
argument_list|(
name|stats
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|FieldMemoryStats
name|that
init|=
operator|(
name|FieldMemoryStats
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|stats
argument_list|,
name|that
operator|.
name|stats
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|stats
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|ObjectLongCursor
argument_list|<
name|String
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|stats
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Returns the fields value in bytes or<code>0</code> if it's not present in the stats      */
DECL|method|get
specifier|public
name|long
name|get
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|stats
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> iff the given field is in the stats      */
DECL|method|containsField
specifier|public
name|boolean
name|containsField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|stats
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
end_class

end_unit

