begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.hash
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * This MessageDigests class provides convenience methods for obtaining  * thread local {@link MessageDigest} instances for MD5, SHA-1, and  * SHA-256 message digests.  */
end_comment

begin_class
DECL|class|MessageDigests
specifier|public
specifier|final
class|class
name|MessageDigests
block|{
DECL|method|createThreadLocalMessageDigest
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|MessageDigest
argument_list|>
name|createThreadLocalMessageDigest
parameter_list|(
name|String
name|digest
parameter_list|)
block|{
return|return
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
return|return
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|digest
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected exception creating MessageDigest instance for ["
operator|+
name|digest
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|field|MD5_DIGEST
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|MessageDigest
argument_list|>
name|MD5_DIGEST
init|=
name|createThreadLocalMessageDigest
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
DECL|field|SHA_1_DIGEST
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|MessageDigest
argument_list|>
name|SHA_1_DIGEST
init|=
name|createThreadLocalMessageDigest
argument_list|(
literal|"SHA-1"
argument_list|)
decl_stmt|;
DECL|field|SHA_256_DIGEST
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|MessageDigest
argument_list|>
name|SHA_256_DIGEST
init|=
name|createThreadLocalMessageDigest
argument_list|(
literal|"SHA-256"
argument_list|)
decl_stmt|;
comment|/**      * Returns a {@link MessageDigest} instance for MD5 digests; note      * that the instance returned is thread local and must not be      * shared amongst threads.      *      * @return a thread local {@link MessageDigest} instance that      * provides MD5 message digest functionality.      */
DECL|method|md5
specifier|public
specifier|static
name|MessageDigest
name|md5
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|MD5_DIGEST
argument_list|)
return|;
block|}
comment|/**      * Returns a {@link MessageDigest} instance for SHA-1 digests; note      * that the instance returned is thread local and must not be      * shared amongst threads.      *      * @return a thread local {@link MessageDigest} instance that      * provides SHA-1 message digest functionality.      */
DECL|method|sha1
specifier|public
specifier|static
name|MessageDigest
name|sha1
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|SHA_1_DIGEST
argument_list|)
return|;
block|}
comment|/**      * Returns a {@link MessageDigest} instance for SHA-256 digests;      * note that the instance returned is thread local and must not be      * shared amongst threads.      *      * @return a thread local {@link MessageDigest} instance that      * provides SHA-256 message digest functionality.      */
DECL|method|sha256
specifier|public
specifier|static
name|MessageDigest
name|sha256
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|SHA_256_DIGEST
argument_list|)
return|;
block|}
DECL|method|get
specifier|private
specifier|static
name|MessageDigest
name|get
parameter_list|(
name|ThreadLocal
argument_list|<
name|MessageDigest
argument_list|>
name|messageDigest
parameter_list|)
block|{
name|MessageDigest
name|instance
init|=
name|messageDigest
operator|.
name|get
argument_list|()
decl_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
DECL|field|HEX_DIGITS
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|HEX_DIGITS
init|=
literal|"0123456789abcdef"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
comment|/**      * Format a byte array as a hex string.      *      * @param bytes the input to be represented as hex.      * @return a hex representation of the input as a String.      */
DECL|method|toHexString
specifier|public
specifier|static
name|String
name|toHexString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|2
operator|*
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
name|bytes
index|[
name|i
index|]
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|HEX_DIGITS
index|[
name|b
operator|>>
literal|4
operator|&
literal|0xf
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|HEX_DIGITS
index|[
name|b
operator|&
literal|0xf
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

