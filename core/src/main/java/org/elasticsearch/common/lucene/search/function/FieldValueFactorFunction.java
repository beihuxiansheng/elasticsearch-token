begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search.function
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A function_score function that multiplies the score with the value of a  * field from the document, optionally multiplying the field by a factor first,  * and applying a modification (log, ln, sqrt, square, etc) afterwards.  */
end_comment

begin_class
DECL|class|FieldValueFactorFunction
specifier|public
class|class
name|FieldValueFactorFunction
extends|extends
name|ScoreFunction
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|boostFactor
specifier|private
specifier|final
name|float
name|boostFactor
decl_stmt|;
DECL|field|modifier
specifier|private
specifier|final
name|Modifier
name|modifier
decl_stmt|;
comment|/**      * Value used if the document is missing the field.      */
DECL|field|missing
specifier|private
specifier|final
name|Double
name|missing
decl_stmt|;
DECL|field|indexFieldData
specifier|private
specifier|final
name|IndexNumericFieldData
name|indexFieldData
decl_stmt|;
DECL|method|FieldValueFactorFunction
specifier|public
name|FieldValueFactorFunction
parameter_list|(
name|String
name|field
parameter_list|,
name|float
name|boostFactor
parameter_list|,
name|Modifier
name|modifierType
parameter_list|,
name|Double
name|missing
parameter_list|,
name|IndexNumericFieldData
name|indexFieldData
parameter_list|)
block|{
name|super
argument_list|(
name|CombineFunction
operator|.
name|MULTIPLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|boostFactor
operator|=
name|boostFactor
expr_stmt|;
name|this
operator|.
name|modifier
operator|=
name|modifierType
expr_stmt|;
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
name|this
operator|.
name|missing
operator|=
name|missing
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeafScoreFunction
specifier|public
name|LeafScoreFunction
name|getLeafScoreFunction
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
block|{
specifier|final
name|SortedNumericDoubleValues
name|values
decl_stmt|;
if|if
condition|(
name|indexFieldData
operator|==
literal|null
condition|)
block|{
name|values
operator|=
name|FieldData
operator|.
name|emptySortedNumericDoubles
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|=
name|this
operator|.
name|indexFieldData
operator|.
name|load
argument_list|(
name|ctx
argument_list|)
operator|.
name|getDoubleValues
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|LeafScoreFunction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|score
parameter_list|(
name|int
name|docId
parameter_list|,
name|float
name|subQueryScore
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numValues
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
name|double
name|value
decl_stmt|;
if|if
condition|(
name|numValues
operator|>
literal|0
condition|)
block|{
name|value
operator|=
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|missing
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|missing
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Missing value for field ["
operator|+
name|field
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|double
name|val
init|=
name|value
operator|*
name|boostFactor
decl_stmt|;
name|double
name|result
init|=
name|modifier
operator|.
name|apply
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|result
argument_list|)
operator|||
name|Double
operator|.
name|isInfinite
argument_list|(
name|result
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Result of field modification ["
operator|+
name|modifier
operator|.
name|toString
argument_list|()
operator|+
literal|"("
operator|+
name|val
operator|+
literal|")] must be a number"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Explanation
name|explainScore
parameter_list|(
name|int
name|docId
parameter_list|,
name|Explanation
name|subQueryScore
parameter_list|)
block|{
name|String
name|modifierStr
init|=
name|modifier
operator|!=
literal|null
condition|?
name|modifier
operator|.
name|toString
argument_list|()
else|:
literal|""
decl_stmt|;
name|String
name|defaultStr
init|=
name|missing
operator|!=
literal|null
condition|?
literal|"?:"
operator|+
name|missing
else|:
literal|""
decl_stmt|;
name|double
name|score
init|=
name|score
argument_list|(
name|docId
argument_list|,
name|subQueryScore
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|CombineFunction
operator|.
name|toFloat
argument_list|(
name|score
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"field value function: %s(doc['%s'].value%s * factor=%s)"
argument_list|,
name|modifierStr
argument_list|,
name|field
argument_list|,
name|defaultStr
argument_list|,
name|boostFactor
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|ScoreFunction
name|other
parameter_list|)
block|{
name|FieldValueFactorFunction
name|fieldValueFactorFunction
init|=
operator|(
name|FieldValueFactorFunction
operator|)
name|other
decl_stmt|;
return|return
name|this
operator|.
name|boostFactor
operator|==
name|fieldValueFactorFunction
operator|.
name|boostFactor
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|field
argument_list|,
name|fieldValueFactorFunction
operator|.
name|field
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|modifier
argument_list|,
name|fieldValueFactorFunction
operator|.
name|modifier
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|boostFactor
argument_list|,
name|field
argument_list|,
name|modifier
argument_list|)
return|;
block|}
comment|/**      * The Type class encapsulates the modification types that can be applied      * to the score/value product.      */
DECL|enum|Modifier
specifier|public
enum|enum
name|Modifier
implements|implements
name|Writeable
argument_list|<
name|Modifier
argument_list|>
block|{
DECL|enum constant|NONE
name|NONE
block|{
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|n
parameter_list|)
block|{
return|return
name|n
return|;
block|}
block|}
block|,
DECL|enum constant|LOG
name|LOG
block|{
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|n
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log10
argument_list|(
name|n
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|LOG1P
name|LOG1P
block|{
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|n
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log10
argument_list|(
name|n
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|LOG2P
name|LOG2P
block|{
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|n
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log10
argument_list|(
name|n
operator|+
literal|2
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|LN
name|LN
block|{
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|n
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log
argument_list|(
name|n
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|LN1P
name|LN1P
block|{
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|n
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log1p
argument_list|(
name|n
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|LN2P
name|LN2P
block|{
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|n
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log1p
argument_list|(
name|n
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|SQUARE
name|SQUARE
block|{
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|n
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|n
argument_list|,
literal|2
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|SQRT
name|SQRT
block|{
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|n
parameter_list|)
block|{
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|n
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|RECIPROCAL
name|RECIPROCAL
block|{
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|n
parameter_list|)
block|{
return|return
literal|1.0
operator|/
name|n
return|;
block|}
block|}
block|;
DECL|method|apply
specifier|public
specifier|abstract
name|double
name|apply
parameter_list|(
name|double
name|n
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readFromStream
specifier|public
specifier|static
name|Modifier
name|readFromStream
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ordinal
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordinal
operator|<
literal|0
operator|||
name|ordinal
operator|>=
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown Modifier ordinal ["
operator|+
name|ordinal
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|values
argument_list|()
index|[
name|ordinal
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
DECL|method|fromString
specifier|public
specifier|static
name|Modifier
name|fromString
parameter_list|(
name|String
name|modifier
parameter_list|)
block|{
return|return
name|valueOf
argument_list|(
name|modifier
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

