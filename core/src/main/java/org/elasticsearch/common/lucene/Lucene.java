begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|KeywordAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LatLonDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooNewException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooOldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SimpleCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TimeLimitingCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TwoPhaseIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|CollapseTopFieldDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|iterable
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalyzerScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|Lucene
specifier|public
class|class
name|Lucene
block|{
DECL|field|LATEST_DOC_VALUES_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|LATEST_DOC_VALUES_FORMAT
init|=
literal|"Lucene54"
decl_stmt|;
DECL|field|LATEST_POSTINGS_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|LATEST_POSTINGS_FORMAT
init|=
literal|"Lucene50"
decl_stmt|;
DECL|field|LATEST_CODEC
specifier|public
specifier|static
specifier|final
name|String
name|LATEST_CODEC
init|=
literal|"Lucene62"
decl_stmt|;
static|static
block|{
name|Deprecated
name|annotation
init|=
name|PostingsFormat
operator|.
name|forName
argument_list|(
name|LATEST_POSTINGS_FORMAT
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|annotation
operator|==
literal|null
operator|:
literal|"PostingsFromat "
operator|+
name|LATEST_POSTINGS_FORMAT
operator|+
literal|" is deprecated"
assert|;
name|annotation
operator|=
name|DocValuesFormat
operator|.
name|forName
argument_list|(
name|LATEST_DOC_VALUES_FORMAT
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
assert|assert
name|annotation
operator|==
literal|null
operator|:
literal|"DocValuesFormat "
operator|+
name|LATEST_DOC_VALUES_FORMAT
operator|+
literal|" is deprecated"
assert|;
block|}
DECL|field|STANDARD_ANALYZER
specifier|public
specifier|static
specifier|final
name|NamedAnalyzer
name|STANDARD_ANALYZER
init|=
operator|new
name|NamedAnalyzer
argument_list|(
literal|"_standard"
argument_list|,
name|AnalyzerScope
operator|.
name|GLOBAL
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|KEYWORD_ANALYZER
specifier|public
specifier|static
specifier|final
name|NamedAnalyzer
name|KEYWORD_ANALYZER
init|=
operator|new
name|NamedAnalyzer
argument_list|(
literal|"_keyword"
argument_list|,
name|AnalyzerScope
operator|.
name|GLOBAL
argument_list|,
operator|new
name|KeywordAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|EMPTY_SCORE_DOCS
specifier|public
specifier|static
specifier|final
name|ScoreDoc
index|[]
name|EMPTY_SCORE_DOCS
init|=
operator|new
name|ScoreDoc
index|[
literal|0
index|]
decl_stmt|;
DECL|field|EMPTY_TOP_DOCS
specifier|public
specifier|static
specifier|final
name|TopDocs
name|EMPTY_TOP_DOCS
init|=
operator|new
name|TopDocs
argument_list|(
literal|0
argument_list|,
name|EMPTY_SCORE_DOCS
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
DECL|method|parseVersion
specifier|public
specifier|static
name|Version
name|parseVersion
parameter_list|(
annotation|@
name|Nullable
name|String
name|version
parameter_list|,
name|Version
name|defaultVersion
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
return|return
name|defaultVersion
return|;
block|}
try|try
block|{
return|return
name|Version
operator|.
name|parse
argument_list|(
name|version
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"no version match {}, default to {}"
argument_list|,
name|version
argument_list|,
name|defaultVersion
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|defaultVersion
return|;
block|}
block|}
comment|/**      * Reads the segments infos, failing if it fails to load      */
DECL|method|readSegmentInfos
specifier|public
specifier|static
name|SegmentInfos
name|readSegmentInfos
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|SegmentInfos
operator|.
name|readLatestCommit
argument_list|(
name|directory
argument_list|)
return|;
block|}
comment|/**      * Returns an iterable that allows to iterate over all files in this segments info      */
DECL|method|files
specifier|public
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|files
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|infos
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SegmentCommitInfo
name|info
range|:
name|infos
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|info
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Iterables
operator|.
name|flatten
argument_list|(
name|list
argument_list|)
return|;
block|}
comment|/**      * Returns the number of documents in the index referenced by this {@link SegmentInfos}      */
DECL|method|getNumDocs
specifier|public
specifier|static
name|int
name|getNumDocs
parameter_list|(
name|SegmentInfos
name|info
parameter_list|)
block|{
name|int
name|numDocs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SegmentCommitInfo
name|si
range|:
name|info
control|)
block|{
name|numDocs
operator|+=
name|si
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
operator|-
name|si
operator|.
name|getDelCount
argument_list|()
expr_stmt|;
block|}
return|return
name|numDocs
return|;
block|}
comment|/**      * Reads the segments infos from the given commit, failing if it fails to load      */
DECL|method|readSegmentInfos
specifier|public
specifier|static
name|SegmentInfos
name|readSegmentInfos
parameter_list|(
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Using commit.getSegmentsFileName() does NOT work here, have to
comment|// manually create the segment filename
name|String
name|filename
init|=
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
literal|""
argument_list|,
name|commit
operator|.
name|getGeneration
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|SegmentInfos
operator|.
name|readCommit
argument_list|(
name|commit
operator|.
name|getDirectory
argument_list|()
argument_list|,
name|filename
argument_list|)
return|;
block|}
comment|/**      * Reads the segments infos from the given segments file name, failing if it fails to load      */
DECL|method|readSegmentInfos
specifier|private
specifier|static
name|SegmentInfos
name|readSegmentInfos
parameter_list|(
name|String
name|segmentsFileName
parameter_list|,
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|SegmentInfos
operator|.
name|readCommit
argument_list|(
name|directory
argument_list|,
name|segmentsFileName
argument_list|)
return|;
block|}
comment|/**      * This method removes all files from the given directory that are not referenced by the given segments file.      * This method will open an IndexWriter and relies on index file deleter to remove all unreferenced files. Segment files      * that are newer than the given segments file are removed forcefully to prevent problems with IndexWriter opening a potentially      * broken commit point / leftover.      *<b>Note:</b> this method will fail if there is another IndexWriter open on the given directory. This method will also acquire      * a write lock from the directory while pruning unused files. This method expects an existing index in the given directory that has      * the given segments file.      */
DECL|method|pruneUnreferencedFiles
specifier|public
specifier|static
name|SegmentInfos
name|pruneUnreferencedFiles
parameter_list|(
name|String
name|segmentsFileName
parameter_list|,
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SegmentInfos
name|si
init|=
name|readSegmentInfos
argument_list|(
name|segmentsFileName
argument_list|,
name|directory
argument_list|)
decl_stmt|;
try|try
init|(
name|Lock
name|writeLock
init|=
name|directory
operator|.
name|obtainLock
argument_list|(
name|IndexWriter
operator|.
name|WRITE_LOCK_NAME
argument_list|)
init|)
block|{
name|int
name|foundSegmentFiles
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|file
range|:
name|directory
operator|.
name|listAll
argument_list|()
control|)
block|{
comment|/**                  * we could also use a deletion policy here but in the case of snapshot and restore                  * sometimes we restore an index and override files that were referenced by a "future"                  * commit. If such a commit is opened by the IW it would likely throw a corrupted index exception                  * since checksums don's match anymore. that's why we prune the name here directly.                  * We also want the caller to know if we were not able to remove a segments_N file.                  */
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
operator|||
name|file
operator|.
name|equals
argument_list|(
name|IndexFileNames
operator|.
name|OLD_SEGMENTS_GEN
argument_list|)
condition|)
block|{
name|foundSegmentFiles
operator|++
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|directory
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// remove all segment_N files except of the one we wanna keep
block|}
block|}
block|}
assert|assert
name|SegmentInfos
operator|.
name|getLastCommitSegmentsFileName
argument_list|(
name|directory
argument_list|)
operator|.
name|equals
argument_list|(
name|segmentsFileName
argument_list|)
assert|;
if|if
condition|(
name|foundSegmentFiles
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no commit found in the directory"
argument_list|)
throw|;
block|}
block|}
specifier|final
name|CommitPoint
name|cp
init|=
operator|new
name|CommitPoint
argument_list|(
name|si
argument_list|,
name|directory
argument_list|)
decl_stmt|;
try|try
init|(
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|)
operator|.
name|setIndexCommit
argument_list|(
name|cp
argument_list|)
operator|.
name|setCommitOnClose
argument_list|(
literal|false
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
init|)
block|{
comment|// do nothing and close this will kick of IndexFileDeleter which will remove all pending files
block|}
return|return
name|si
return|;
block|}
comment|/**      * This method removes all lucene files from the given directory. It will first try to delete all commit points / segments      * files to ensure broken commits or corrupted indices will not be opened in the future. If any of the segment files can't be deleted      * this operation fails.      */
DECL|method|cleanLuceneIndex
specifier|public
specifier|static
name|void
name|cleanLuceneIndex
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Lock
name|writeLock
init|=
name|directory
operator|.
name|obtainLock
argument_list|(
name|IndexWriter
operator|.
name|WRITE_LOCK_NAME
argument_list|)
init|)
block|{
for|for
control|(
specifier|final
name|String
name|file
range|:
name|directory
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
operator|||
name|file
operator|.
name|equals
argument_list|(
name|IndexFileNames
operator|.
name|OLD_SEGMENTS_GEN
argument_list|)
condition|)
block|{
name|directory
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// remove all segment_N files
block|}
block|}
block|}
try|try
init|(
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
comment|// no merges
operator|.
name|setCommitOnClose
argument_list|(
literal|false
argument_list|)
comment|// no commits
operator|.
name|setOpenMode
argument_list|(
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
init|)
comment|// force creation - don't append...
block|{
comment|// do nothing and close this will kick of IndexFileDeleter which will remove all pending files
block|}
block|}
DECL|method|checkSegmentInfoIntegrity
specifier|public
specifier|static
name|void
name|checkSegmentInfoIntegrity
parameter_list|(
specifier|final
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|SegmentInfos
operator|.
name|FindSegmentsFile
argument_list|(
name|directory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|doBody
parameter_list|(
name|String
name|segmentFileName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|IndexInput
name|input
init|=
name|directory
operator|.
name|openInput
argument_list|(
name|segmentFileName
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**      * Wraps<code>delegate</code> with count based early termination collector with a threshold of<code>maxCountHits</code>      */
DECL|method|wrapCountBasedEarlyTerminatingCollector
specifier|public
specifier|static
specifier|final
name|EarlyTerminatingCollector
name|wrapCountBasedEarlyTerminatingCollector
parameter_list|(
specifier|final
name|Collector
name|delegate
parameter_list|,
name|int
name|maxCountHits
parameter_list|)
block|{
return|return
operator|new
name|EarlyTerminatingCollector
argument_list|(
name|delegate
argument_list|,
name|maxCountHits
argument_list|)
return|;
block|}
comment|/**      * Wraps<code>delegate</code> with a time limited collector with a timeout of<code>timeoutInMillis</code>      */
DECL|method|wrapTimeLimitingCollector
specifier|public
specifier|static
specifier|final
name|TimeLimitingCollector
name|wrapTimeLimitingCollector
parameter_list|(
specifier|final
name|Collector
name|delegate
parameter_list|,
specifier|final
name|Counter
name|counter
parameter_list|,
name|long
name|timeoutInMillis
parameter_list|)
block|{
return|return
operator|new
name|TimeLimitingCollector
argument_list|(
name|delegate
argument_list|,
name|counter
argument_list|,
name|timeoutInMillis
argument_list|)
return|;
block|}
comment|/**      * Check whether there is one or more documents matching the provided query.      */
DECL|method|exists
specifier|public
specifier|static
name|boolean
name|exists
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Weight
name|weight
init|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// the scorer API should be more efficient at stopping after the first
comment|// match than the bulk scorer API
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
specifier|final
name|Scorer
name|scorer
init|=
name|weight
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
specifier|final
name|Bits
name|liveDocs
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
specifier|final
name|DocIdSetIterator
name|iterator
init|=
name|scorer
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|iterator
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|iterator
operator|.
name|nextDoc
argument_list|()
control|)
block|{
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|readTopDocs
specifier|public
specifier|static
name|TopDocs
name|readTopDocs
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|type
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|0
condition|)
block|{
name|int
name|totalHits
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|float
name|maxScore
init|=
name|in
operator|.
name|readFloat
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
operator|new
name|ScoreDoc
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|scoreDocs
index|[
name|i
index|]
operator|=
operator|new
name|ScoreDoc
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TopDocs
argument_list|(
name|totalHits
argument_list|,
name|scoreDocs
argument_list|,
name|maxScore
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|1
condition|)
block|{
name|int
name|totalHits
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|float
name|maxScore
init|=
name|in
operator|.
name|readFloat
argument_list|()
decl_stmt|;
name|SortField
index|[]
name|fields
init|=
operator|new
name|SortField
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
name|readSortField
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|FieldDoc
index|[]
name|fieldDocs
init|=
operator|new
name|FieldDoc
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fieldDocs
index|[
name|i
index|]
operator|=
name|readFieldDoc
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TopFieldDocs
argument_list|(
name|totalHits
argument_list|,
name|fieldDocs
argument_list|,
name|fields
argument_list|,
name|maxScore
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|2
condition|)
block|{
name|int
name|totalHits
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|float
name|maxScore
init|=
name|in
operator|.
name|readFloat
argument_list|()
decl_stmt|;
name|String
name|field
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|SortField
index|[]
name|fields
init|=
operator|new
name|SortField
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
name|readSortField
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|Object
index|[]
name|collapseValues
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
name|FieldDoc
index|[]
name|fieldDocs
init|=
operator|new
name|FieldDoc
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fieldDocs
index|[
name|i
index|]
operator|=
name|readFieldDoc
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|collapseValues
index|[
name|i
index|]
operator|=
name|readSortValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CollapseTopFieldDocs
argument_list|(
name|field
argument_list|,
name|totalHits
argument_list|,
name|fieldDocs
argument_list|,
name|fields
argument_list|,
name|collapseValues
argument_list|,
name|maxScore
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
DECL|method|readFieldDoc
specifier|public
specifier|static
name|FieldDoc
name|readFieldDoc
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Comparable
index|[]
name|cFields
init|=
operator|new
name|Comparable
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cFields
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|byte
name|type
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|0
condition|)
block|{
name|cFields
index|[
name|j
index|]
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|1
condition|)
block|{
name|cFields
index|[
name|j
index|]
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|2
condition|)
block|{
name|cFields
index|[
name|j
index|]
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|3
condition|)
block|{
name|cFields
index|[
name|j
index|]
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|4
condition|)
block|{
name|cFields
index|[
name|j
index|]
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|5
condition|)
block|{
name|cFields
index|[
name|j
index|]
operator|=
name|in
operator|.
name|readDouble
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|6
condition|)
block|{
name|cFields
index|[
name|j
index|]
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|7
condition|)
block|{
name|cFields
index|[
name|j
index|]
operator|=
name|in
operator|.
name|readShort
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|8
condition|)
block|{
name|cFields
index|[
name|j
index|]
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|9
condition|)
block|{
name|cFields
index|[
name|j
index|]
operator|=
name|in
operator|.
name|readBytesRef
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't match type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|FieldDoc
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|in
operator|.
name|readFloat
argument_list|()
argument_list|,
name|cFields
argument_list|)
return|;
block|}
DECL|method|readSortValue
specifier|private
specifier|static
name|Comparable
name|readSortValue
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|type
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|1
condition|)
block|{
return|return
name|in
operator|.
name|readString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|2
condition|)
block|{
return|return
name|in
operator|.
name|readInt
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|3
condition|)
block|{
return|return
name|in
operator|.
name|readLong
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|4
condition|)
block|{
return|return
name|in
operator|.
name|readFloat
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|5
condition|)
block|{
return|return
name|in
operator|.
name|readDouble
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|6
condition|)
block|{
return|return
name|in
operator|.
name|readByte
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|7
condition|)
block|{
return|return
name|in
operator|.
name|readShort
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|8
condition|)
block|{
return|return
name|in
operator|.
name|readBoolean
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|9
condition|)
block|{
return|return
name|in
operator|.
name|readBytesRef
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't match type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|readScoreDoc
specifier|public
specifier|static
name|ScoreDoc
name|readScoreDoc
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScoreDoc
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
return|;
block|}
DECL|field|GEO_DISTANCE_SORT_TYPE_CLASS
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|GEO_DISTANCE_SORT_TYPE_CLASS
init|=
name|LatLonDocValuesField
operator|.
name|newDistanceSort
argument_list|(
literal|"some_geo_field"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
decl_stmt|;
DECL|method|writeTopDocs
specifier|public
specifier|static
name|void
name|writeTopDocs
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|TopDocs
name|topDocs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|topDocs
operator|instanceof
name|CollapseTopFieldDocs
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
expr_stmt|;
name|CollapseTopFieldDocs
name|collapseDocs
init|=
operator|(
name|CollapseTopFieldDocs
operator|)
name|topDocs
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|topDocs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|collapseDocs
operator|.
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|collapseDocs
operator|.
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|SortField
name|sortField
range|:
name|collapseDocs
operator|.
name|fields
control|)
block|{
name|writeSortField
argument_list|(
name|out
argument_list|,
name|sortField
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|doc
init|=
name|collapseDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
name|writeFieldDoc
argument_list|(
name|out
argument_list|,
operator|(
name|FieldDoc
operator|)
name|doc
argument_list|)
expr_stmt|;
name|writeSortValue
argument_list|(
name|out
argument_list|,
name|collapseDocs
operator|.
name|collapseValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|topDocs
operator|instanceof
name|TopFieldDocs
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|TopFieldDocs
name|topFieldDocs
init|=
operator|(
name|TopFieldDocs
operator|)
name|topDocs
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|topDocs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|topFieldDocs
operator|.
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|SortField
name|sortField
range|:
name|topFieldDocs
operator|.
name|fields
control|)
block|{
name|writeSortField
argument_list|(
name|out
argument_list|,
name|sortField
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|topFieldDocs
operator|.
name|scoreDocs
control|)
block|{
name|writeFieldDoc
argument_list|(
name|out
argument_list|,
operator|(
name|FieldDoc
operator|)
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|topDocs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|topDocs
operator|.
name|scoreDocs
control|)
block|{
name|writeScoreDoc
argument_list|(
name|out
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeMissingValue
specifier|private
specifier|static
name|void
name|writeMissingValue
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|Object
name|missingValue
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|missingValue
operator|==
name|SortField
operator|.
name|STRING_FIRST
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|missingValue
operator|==
name|SortField
operator|.
name|STRING_LAST
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|missingValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readMissingValue
specifier|private
specifier|static
name|Object
name|readMissingValue
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
name|id
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|0
case|:
return|return
name|in
operator|.
name|readGenericValue
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|SortField
operator|.
name|STRING_FIRST
return|;
case|case
literal|2
case|:
return|return
name|SortField
operator|.
name|STRING_LAST
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown missing value id: "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
DECL|method|writeSortValue
specifier|private
specifier|static
name|void
name|writeSortValue
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|Object
name|field
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Class
name|type
init|=
name|field
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
operator|(
name|String
operator|)
name|field
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
operator|(
name|Integer
operator|)
name|field
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Long
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
operator|(
name|Long
operator|)
name|field
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Float
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
operator|(
name|Float
operator|)
name|field
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Double
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|5
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
operator|(
name|Double
operator|)
name|field
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Byte
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|6
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|Byte
operator|)
name|field
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Short
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|7
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
operator|(
name|Short
operator|)
name|field
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Boolean
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
operator|(
name|Boolean
operator|)
name|field
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|BytesRef
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|9
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytesRef
argument_list|(
operator|(
name|BytesRef
operator|)
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't handle sort field value of type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|writeFieldDoc
specifier|public
specifier|static
name|void
name|writeFieldDoc
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|FieldDoc
name|fieldDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|fieldDoc
operator|.
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|field
range|:
name|fieldDoc
operator|.
name|fields
control|)
block|{
name|writeSortValue
argument_list|(
name|out
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|fieldDoc
operator|.
name|doc
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|fieldDoc
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
DECL|method|writeScoreDoc
specifier|public
specifier|static
name|void
name|writeScoreDoc
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|ScoreDoc
name|scoreDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|scoreDoc
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|ScoreDoc
operator|.
name|class
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This method can only be used to serialize a ScoreDoc, not a "
operator|+
name|scoreDoc
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|scoreDoc
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE 4 UPGRADE: We might want to maintain our own ordinal, instead of Lucene's ordinal
DECL|method|readSortType
specifier|public
specifier|static
name|SortField
operator|.
name|Type
name|readSortType
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|SortField
operator|.
name|Type
operator|.
name|values
argument_list|()
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
return|;
block|}
DECL|method|readSortField
specifier|public
specifier|static
name|SortField
name|readSortField
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|field
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|field
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
name|SortField
operator|.
name|Type
name|sortType
init|=
name|readSortType
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Object
name|missingValue
init|=
name|readMissingValue
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|boolean
name|reverse
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
name|SortField
name|sortField
init|=
operator|new
name|SortField
argument_list|(
name|field
argument_list|,
name|sortType
argument_list|,
name|reverse
argument_list|)
decl_stmt|;
if|if
condition|(
name|missingValue
operator|!=
literal|null
condition|)
block|{
name|sortField
operator|.
name|setMissingValue
argument_list|(
name|missingValue
argument_list|)
expr_stmt|;
block|}
return|return
name|sortField
return|;
block|}
DECL|method|writeSortType
specifier|public
specifier|static
name|void
name|writeSortType
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|SortField
operator|.
name|Type
name|sortType
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|sortType
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSortField
specifier|public
specifier|static
name|void
name|writeSortField
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|SortField
name|sortField
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sortField
operator|.
name|getClass
argument_list|()
operator|==
name|GEO_DISTANCE_SORT_TYPE_CLASS
condition|)
block|{
comment|// for geo sorting, we replace the SortField with a SortField that assumes a double field.
comment|// this works since the SortField is only used for merging top docs
name|SortField
name|newSortField
init|=
operator|new
name|SortField
argument_list|(
name|sortField
operator|.
name|getField
argument_list|()
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|newSortField
operator|.
name|setMissingValue
argument_list|(
name|sortField
operator|.
name|getMissingValue
argument_list|()
argument_list|)
expr_stmt|;
name|sortField
operator|=
name|newSortField
expr_stmt|;
block|}
if|if
condition|(
name|sortField
operator|.
name|getClass
argument_list|()
operator|!=
name|SortField
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot serialize SortField impl ["
operator|+
name|sortField
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sortField
operator|.
name|getField
argument_list|()
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|sortField
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortField
operator|.
name|getComparatorSource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|IndexFieldData
operator|.
name|XFieldComparatorSource
name|comparatorSource
init|=
operator|(
name|IndexFieldData
operator|.
name|XFieldComparatorSource
operator|)
name|sortField
operator|.
name|getComparatorSource
argument_list|()
decl_stmt|;
name|writeSortType
argument_list|(
name|out
argument_list|,
name|comparatorSource
operator|.
name|reducedType
argument_list|()
argument_list|)
expr_stmt|;
name|writeMissingValue
argument_list|(
name|out
argument_list|,
name|comparatorSource
operator|.
name|missingValue
argument_list|(
name|sortField
operator|.
name|getReverse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeSortType
argument_list|(
name|out
argument_list|,
name|sortField
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|writeMissingValue
argument_list|(
name|out
argument_list|,
name|sortField
operator|.
name|getMissingValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|sortField
operator|.
name|getReverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readExplanation
specifier|public
specifier|static
name|Explanation
name|readExplanation
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|match
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
name|String
name|description
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
specifier|final
name|Explanation
index|[]
name|subExplanations
init|=
operator|new
name|Explanation
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subExplanations
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|subExplanations
index|[
name|i
index|]
operator|=
name|readExplanation
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
block|{
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|in
operator|.
name|readFloat
argument_list|()
argument_list|,
name|description
argument_list|,
name|subExplanations
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Explanation
operator|.
name|noMatch
argument_list|(
name|description
argument_list|,
name|subExplanations
argument_list|)
return|;
block|}
block|}
DECL|method|writeExplanation
specifier|public
specifier|static
name|void
name|writeExplanation
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|Explanation
name|explanation
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|explanation
operator|.
name|isMatch
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|explanation
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Explanation
index|[]
name|subExplanations
init|=
name|explanation
operator|.
name|getDetails
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|subExplanations
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Explanation
name|subExp
range|:
name|subExplanations
control|)
block|{
name|writeExplanation
argument_list|(
name|out
argument_list|,
name|subExp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|explanation
operator|.
name|isMatch
argument_list|()
condition|)
block|{
name|out
operator|.
name|writeFloat
argument_list|(
name|explanation
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This exception is thrown when {@link org.elasticsearch.common.lucene.Lucene.EarlyTerminatingCollector}      * reaches early termination      * */
DECL|class|EarlyTerminationException
specifier|public
specifier|static
specifier|final
class|class
name|EarlyTerminationException
extends|extends
name|ElasticsearchException
block|{
DECL|method|EarlyTerminationException
specifier|public
name|EarlyTerminationException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|EarlyTerminationException
specifier|public
name|EarlyTerminationException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A collector that terminates early by throwing {@link org.elasticsearch.common.lucene.Lucene.EarlyTerminationException}      * when count of matched documents has reached<code>maxCountHits</code>      */
DECL|class|EarlyTerminatingCollector
specifier|public
specifier|static
specifier|final
class|class
name|EarlyTerminatingCollector
extends|extends
name|SimpleCollector
block|{
DECL|field|maxCountHits
specifier|private
specifier|final
name|int
name|maxCountHits
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|Collector
name|delegate
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|field|leafCollector
specifier|private
name|LeafCollector
name|leafCollector
decl_stmt|;
DECL|method|EarlyTerminatingCollector
name|EarlyTerminatingCollector
parameter_list|(
specifier|final
name|Collector
name|delegate
parameter_list|,
name|int
name|maxCountHits
parameter_list|)
block|{
name|this
operator|.
name|maxCountHits
operator|=
name|maxCountHits
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
DECL|method|count
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|count
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|leafCollector
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|leafCollector
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|count
operator|>=
name|maxCountHits
condition|)
block|{
throw|throw
operator|new
name|EarlyTerminationException
argument_list|(
literal|"early termination [CountBased]"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|public
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|atomicReaderContext
parameter_list|)
throws|throws
name|IOException
block|{
name|leafCollector
operator|=
name|delegate
operator|.
name|getLeafCollector
argument_list|(
name|atomicReaderContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|needsScores
argument_list|()
return|;
block|}
block|}
DECL|method|Lucene
specifier|private
name|Lucene
parameter_list|()
block|{      }
DECL|method|indexExists
specifier|public
specifier|static
specifier|final
name|boolean
name|indexExists
parameter_list|(
specifier|final
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DirectoryReader
operator|.
name|indexExists
argument_list|(
name|directory
argument_list|)
return|;
block|}
comment|/**      * Wait for an index to exist for up to {@code timeLimitMillis}. Returns      * true if the index eventually exists, false if not.      *      * Will retry the directory every second for at least {@code timeLimitMillis}      */
DECL|method|waitForIndex
specifier|public
specifier|static
specifier|final
name|boolean
name|waitForIndex
parameter_list|(
specifier|final
name|Directory
name|directory
parameter_list|,
specifier|final
name|long
name|timeLimitMillis
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|DELAY
init|=
literal|1000
decl_stmt|;
name|long
name|waited
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|waited
operator|>=
name|timeLimitMillis
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|indexExists
argument_list|(
name|directory
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|DELAY
argument_list|)
expr_stmt|;
name|waited
operator|+=
name|DELAY
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// one more try after all retries
return|return
name|indexExists
argument_list|(
name|directory
argument_list|)
return|;
block|}
comment|/**      * Returns<tt>true</tt> iff the given exception or      * one of it's causes is an instance of {@link CorruptIndexException},      * {@link IndexFormatTooOldException}, or {@link IndexFormatTooNewException} otherwise<tt>false</tt>.      */
DECL|method|isCorruptionException
specifier|public
specifier|static
name|boolean
name|isCorruptionException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|ExceptionsHelper
operator|.
name|unwrapCorruption
argument_list|(
name|t
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Parses the version string lenient and returns the default value if the given string is null or emtpy      */
DECL|method|parseVersionLenient
specifier|public
specifier|static
name|Version
name|parseVersionLenient
parameter_list|(
name|String
name|toParse
parameter_list|,
name|Version
name|defaultValue
parameter_list|)
block|{
return|return
name|LenientParser
operator|.
name|parse
argument_list|(
name|toParse
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"Version#parseLeniently() used in a central place"
argument_list|)
DECL|class|LenientParser
specifier|private
specifier|static
specifier|final
class|class
name|LenientParser
block|{
DECL|method|parse
specifier|public
specifier|static
name|Version
name|parse
parameter_list|(
name|String
name|toParse
parameter_list|,
name|Version
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|toParse
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|Version
operator|.
name|parseLeniently
argument_list|(
name|toParse
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// pass to default
block|}
block|}
return|return
name|defaultValue
return|;
block|}
block|}
comment|/**      * Return a Scorer that throws an ElasticsearchIllegalStateException      * on all operations with the given message.      */
DECL|method|illegalScorer
specifier|public
specifier|static
name|Scorer
name|illegalScorer
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|Scorer
argument_list|(
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|class|CommitPoint
specifier|private
specifier|static
specifier|final
class|class
name|CommitPoint
extends|extends
name|IndexCommit
block|{
DECL|field|segmentsFileName
specifier|private
name|String
name|segmentsFileName
decl_stmt|;
DECL|field|files
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|files
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|generation
specifier|private
specifier|final
name|long
name|generation
decl_stmt|;
DECL|field|userData
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userData
decl_stmt|;
DECL|field|segmentCount
specifier|private
specifier|final
name|int
name|segmentCount
decl_stmt|;
DECL|method|CommitPoint
specifier|private
name|CommitPoint
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|segmentsFileName
operator|=
name|infos
operator|.
name|getSegmentsFileName
argument_list|()
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|userData
operator|=
name|infos
operator|.
name|getUserData
argument_list|()
expr_stmt|;
name|files
operator|=
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|infos
operator|.
name|files
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|generation
operator|=
name|infos
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
name|segmentCount
operator|=
name|infos
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DirectoryReader.ReaderCommit("
operator|+
name|segmentsFileName
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|getSegmentCount
specifier|public
name|int
name|getSegmentCount
parameter_list|()
block|{
return|return
name|segmentCount
return|;
block|}
annotation|@
name|Override
DECL|method|getSegmentsFileName
specifier|public
name|String
name|getSegmentsFileName
parameter_list|()
block|{
return|return
name|segmentsFileName
return|;
block|}
annotation|@
name|Override
DECL|method|getFileNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getFileNames
parameter_list|()
block|{
return|return
name|files
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectory
specifier|public
name|Directory
name|getDirectory
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
annotation|@
name|Override
DECL|method|getGeneration
specifier|public
name|long
name|getGeneration
parameter_list|()
block|{
return|return
name|generation
return|;
block|}
annotation|@
name|Override
DECL|method|isDeleted
specifier|public
name|boolean
name|isDeleted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getUserData
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUserData
parameter_list|()
block|{
return|return
name|userData
return|;
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This IndexCommit does not support deletions"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Given a {@link Scorer}, return a {@link Bits} instance that will match      * all documents contained in the set. Note that the returned {@link Bits}      * instance MUST be consumed in order.      */
DECL|method|asSequentialAccessBits
specifier|public
specifier|static
name|Bits
name|asSequentialAccessBits
parameter_list|(
specifier|final
name|int
name|maxDoc
parameter_list|,
annotation|@
name|Nullable
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scorer
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|maxDoc
argument_list|)
return|;
block|}
specifier|final
name|TwoPhaseIterator
name|twoPhase
init|=
name|scorer
operator|.
name|twoPhaseIterator
argument_list|()
decl_stmt|;
specifier|final
name|DocIdSetIterator
name|iterator
decl_stmt|;
if|if
condition|(
name|twoPhase
operator|==
literal|null
condition|)
block|{
name|iterator
operator|=
name|scorer
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iterator
operator|=
name|twoPhase
operator|.
name|approximation
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Bits
argument_list|()
block|{
name|int
name|previous
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|previousMatched
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|index
operator|+
literal|" is out of bounds: ["
operator|+
literal|0
operator|+
literal|"-"
operator|+
name|maxDoc
operator|+
literal|"["
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|<
name|previous
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This Bits instance can only be consumed in order. "
operator|+
literal|"Got called on ["
operator|+
name|index
operator|+
literal|"] while previously called on ["
operator|+
name|previous
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|==
name|previous
condition|)
block|{
comment|// we cache whether it matched because it is illegal to call
comment|// twoPhase.matches() twice
return|return
name|previousMatched
return|;
block|}
name|previous
operator|=
name|index
expr_stmt|;
name|int
name|doc
init|=
name|iterator
operator|.
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|<
name|index
condition|)
block|{
try|try
block|{
name|doc
operator|=
name|iterator
operator|.
name|advance
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot advance iterator"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|index
operator|==
name|doc
condition|)
block|{
try|try
block|{
return|return
name|previousMatched
operator|=
name|twoPhase
operator|==
literal|null
operator|||
name|twoPhase
operator|.
name|matches
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot validate match"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|previousMatched
operator|=
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

