begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BulkScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreCachingWrappingScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TwoPhaseIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A {@link Query} wrapper that only emits as hits documents whose score is  * above a given threshold. This query only really makes sense for queries  * whose score is computed manually, like eg. function score queries.  */
end_comment

begin_class
DECL|class|MinScoreQuery
specifier|public
specifier|final
class|class
name|MinScoreQuery
extends|extends
name|Query
block|{
DECL|field|query
specifier|private
specifier|final
name|Query
name|query
decl_stmt|;
DECL|field|minScore
specifier|private
specifier|final
name|float
name|minScore
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|final
name|IndexSearcher
name|searcher
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|MinScoreQuery
specifier|public
name|MinScoreQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|float
name|minScore
parameter_list|)
block|{
name|this
argument_list|(
name|query
argument_list|,
name|minScore
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MinScoreQuery
name|MinScoreQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|float
name|minScore
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|minScore
operator|=
name|minScore
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
block|}
comment|/** Return the wrapped query. */
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
comment|/** Return the minimum score. */
DECL|method|getMinScore
specifier|public
name|float
name|getMinScore
parameter_list|()
block|{
return|return
name|minScore
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"("
operator|+
name|query
operator|.
name|toString
argument_list|(
name|field
argument_list|)
operator|+
literal|", minScore="
operator|+
name|minScore
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MinScoreQuery
name|that
init|=
operator|(
name|MinScoreQuery
operator|)
name|obj
decl_stmt|;
return|return
name|minScore
operator|==
name|that
operator|.
name|minScore
operator|&&
name|searcher
operator|==
name|that
operator|.
name|searcher
operator|&&
name|query
operator|.
name|equals
argument_list|(
name|that
operator|.
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|Objects
operator|.
name|hash
argument_list|(
name|query
argument_list|,
name|minScore
argument_list|,
name|searcher
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getBoost
argument_list|()
operator|!=
literal|1f
condition|)
block|{
return|return
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
name|Query
name|rewritten
init|=
name|query
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|rewritten
operator|!=
name|query
condition|)
block|{
return|return
operator|new
name|MinScoreQuery
argument_list|(
name|rewritten
argument_list|,
name|minScore
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Weight
name|weight
init|=
name|searcher
operator|.
name|createWeight
argument_list|(
name|query
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// We specialize the query for the provided index searcher because it
comment|// can't really be cached as the documents that match depend on the
comment|// Similarity implementation and the top-level reader.
specifier|final
name|Query
name|key
init|=
operator|new
name|MinScoreQuery
argument_list|(
name|query
argument_list|,
name|minScore
argument_list|,
name|searcher
argument_list|)
decl_stmt|;
return|return
operator|new
name|Weight
argument_list|(
name|key
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Scorer
name|scorer
init|=
name|weight
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MinScoreScorer
argument_list|(
name|this
argument_list|,
name|scorer
argument_list|,
name|minScore
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BulkScorer
name|bulkScorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|BulkScorer
name|bulkScorer
init|=
name|weight
operator|.
name|bulkScorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|bulkScorer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MinScoreBulkScorer
argument_list|(
name|bulkScorer
argument_list|,
name|minScore
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|normalize
parameter_list|(
name|float
name|norm
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|weight
operator|.
name|normalize
argument_list|(
name|norm
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getValueForNormalization
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|weight
operator|.
name|getValueForNormalization
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
name|weight
operator|.
name|extractTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|Explanation
name|expl
init|=
name|weight
operator|.
name|explain
argument_list|(
name|context
argument_list|,
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|expl
operator|.
name|isMatch
argument_list|()
operator|==
literal|false
operator|||
name|expl
operator|.
name|getValue
argument_list|()
operator|>=
name|minScore
condition|)
block|{
return|return
name|expl
return|;
block|}
else|else
block|{
return|return
name|Explanation
operator|.
name|noMatch
argument_list|(
literal|"Min score is less than the configured min score="
operator|+
name|minScore
argument_list|,
name|expl
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
DECL|class|MinScoreScorer
specifier|private
specifier|static
class|class
name|MinScoreScorer
extends|extends
name|Scorer
block|{
DECL|field|scorer
specifier|private
specifier|final
name|Scorer
name|scorer
decl_stmt|;
DECL|field|minScore
specifier|private
specifier|final
name|float
name|minScore
decl_stmt|;
DECL|field|score
specifier|private
name|float
name|score
decl_stmt|;
DECL|method|MinScoreScorer
specifier|protected
name|MinScoreScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|Scorer
name|scorer
parameter_list|,
name|float
name|minScore
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
name|this
operator|.
name|minScore
operator|=
name|minScore
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|score
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scorer
operator|.
name|freq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|scorer
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|doNext
argument_list|(
name|scorer
operator|.
name|nextDoc
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doNext
argument_list|(
name|scorer
operator|.
name|advance
argument_list|(
name|target
argument_list|)
argument_list|)
return|;
block|}
DECL|method|doNext
specifier|private
name|int
name|doNext
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
name|doc
operator|!=
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|scorer
operator|.
name|nextDoc
argument_list|()
control|)
block|{
specifier|final
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|score
operator|>=
name|minScore
condition|)
block|{
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
return|return
name|doc
return|;
block|}
block|}
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
DECL|method|asTwoPhaseIterator
specifier|public
name|TwoPhaseIterator
name|asTwoPhaseIterator
parameter_list|()
block|{
specifier|final
name|TwoPhaseIterator
name|twoPhase
init|=
name|scorer
operator|.
name|asTwoPhaseIterator
argument_list|()
decl_stmt|;
specifier|final
name|DocIdSetIterator
name|approximation
init|=
name|twoPhase
operator|==
literal|null
condition|?
name|scorer
else|:
name|twoPhase
operator|.
name|approximation
argument_list|()
decl_stmt|;
return|return
operator|new
name|TwoPhaseIterator
argument_list|(
name|approximation
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|twoPhase
operator|!=
literal|null
operator|&&
name|twoPhase
operator|.
name|matches
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
name|score
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
return|return
name|score
operator|>=
name|minScore
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|scorer
operator|.
name|cost
argument_list|()
return|;
block|}
block|}
DECL|class|MinScoreBulkScorer
specifier|private
specifier|static
class|class
name|MinScoreBulkScorer
extends|extends
name|BulkScorer
block|{
DECL|field|bulkScorer
specifier|private
specifier|final
name|BulkScorer
name|bulkScorer
decl_stmt|;
DECL|field|minScore
specifier|private
specifier|final
name|float
name|minScore
decl_stmt|;
DECL|method|MinScoreBulkScorer
specifier|public
name|MinScoreBulkScorer
parameter_list|(
name|BulkScorer
name|bulkScorer
parameter_list|,
name|float
name|minScore
parameter_list|)
block|{
name|this
operator|.
name|bulkScorer
operator|=
name|bulkScorer
expr_stmt|;
name|this
operator|.
name|minScore
operator|=
name|minScore
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|int
name|score
parameter_list|(
name|LeafCollector
name|collector
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|bulkScorer
operator|.
name|score
argument_list|(
operator|new
name|MinScoreLeafCollector
argument_list|(
name|collector
argument_list|,
name|minScore
argument_list|)
argument_list|,
name|acceptDocs
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|bulkScorer
operator|.
name|cost
argument_list|()
return|;
block|}
block|}
DECL|class|MinScoreLeafCollector
specifier|private
specifier|static
class|class
name|MinScoreLeafCollector
implements|implements
name|LeafCollector
block|{
DECL|field|collector
specifier|private
specifier|final
name|LeafCollector
name|collector
decl_stmt|;
DECL|field|minScore
specifier|private
specifier|final
name|float
name|minScore
decl_stmt|;
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|method|MinScoreLeafCollector
specifier|public
name|MinScoreLeafCollector
parameter_list|(
name|LeafCollector
name|collector
parameter_list|,
name|float
name|minScore
parameter_list|)
block|{
name|this
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
name|this
operator|.
name|minScore
operator|=
name|minScore
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we will need scores at least once, maybe more due to the wrapped
comment|// collector, so we wrap with a ScoreCachingWrappingScorer
if|if
condition|(
name|scorer
operator|instanceof
name|ScoreCachingWrappingScorer
operator|==
literal|false
condition|)
block|{
name|scorer
operator|=
operator|new
name|ScoreCachingWrappingScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
name|collector
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scorer
operator|.
name|score
argument_list|()
operator|>=
name|minScore
condition|)
block|{
name|collector
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

