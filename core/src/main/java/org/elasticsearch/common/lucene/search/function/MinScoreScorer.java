begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search.function
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreCachingWrappingScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TwoPhaseIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_comment
comment|/** A {@link Scorer} that filters out documents that have a score that is  *  lower than a configured constant. */
end_comment

begin_class
DECL|class|MinScoreScorer
specifier|final
class|class
name|MinScoreScorer
extends|extends
name|Scorer
block|{
DECL|field|in
specifier|private
specifier|final
name|Scorer
name|in
decl_stmt|;
DECL|field|minScore
specifier|private
specifier|final
name|float
name|minScore
decl_stmt|;
DECL|method|MinScoreScorer
name|MinScoreScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|Scorer
name|scorer
parameter_list|,
name|float
name|minScore
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|)
expr_stmt|;
if|if
condition|(
name|scorer
operator|instanceof
name|ScoreCachingWrappingScorer
operator|==
literal|false
condition|)
block|{
comment|// when minScore is set, scores might be requested twice: once
comment|// to verify the match, and once by the collector
name|scorer
operator|=
operator|new
name|ScoreCachingWrappingScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|in
operator|=
name|scorer
expr_stmt|;
name|this
operator|.
name|minScore
operator|=
name|minScore
expr_stmt|;
block|}
DECL|method|getScorer
specifier|public
name|Scorer
name|getScorer
parameter_list|()
block|{
return|return
name|in
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|in
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|score
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|freq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
name|TwoPhaseIterator
operator|.
name|asDocIdSetIterator
argument_list|(
name|twoPhaseIterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|twoPhaseIterator
specifier|public
name|TwoPhaseIterator
name|twoPhaseIterator
parameter_list|()
block|{
specifier|final
name|TwoPhaseIterator
name|inTwoPhase
init|=
name|this
operator|.
name|in
operator|.
name|twoPhaseIterator
argument_list|()
decl_stmt|;
specifier|final
name|DocIdSetIterator
name|approximation
init|=
name|inTwoPhase
operator|==
literal|null
condition|?
name|in
operator|.
name|iterator
argument_list|()
else|:
name|inTwoPhase
operator|.
name|approximation
argument_list|()
decl_stmt|;
return|return
operator|new
name|TwoPhaseIterator
argument_list|(
name|approximation
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
throws|throws
name|IOException
block|{
comment|// we need to check the two-phase iterator first
comment|// otherwise calling score() is illegal
if|if
condition|(
name|inTwoPhase
operator|!=
literal|null
operator|&&
name|inTwoPhase
operator|.
name|matches
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|in
operator|.
name|score
argument_list|()
operator|>=
name|minScore
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|matchCost
parameter_list|()
block|{
return|return
literal|1000f
comment|// random constant for the score computation
operator|+
operator|(
name|inTwoPhase
operator|==
literal|null
condition|?
literal|0
else|:
name|inTwoPhase
operator|.
name|matchCost
argument_list|()
operator|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

