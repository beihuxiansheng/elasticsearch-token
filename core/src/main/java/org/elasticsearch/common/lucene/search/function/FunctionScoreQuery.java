begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search.function
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ToStringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A query that allows for a pluggable boost function to be applied to it.  */
end_comment

begin_class
DECL|class|FunctionScoreQuery
specifier|public
class|class
name|FunctionScoreQuery
extends|extends
name|Query
block|{
DECL|field|DEFAULT_MAX_BOOST
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_MAX_BOOST
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|subQuery
name|Query
name|subQuery
decl_stmt|;
DECL|field|function
specifier|final
name|ScoreFunction
name|function
decl_stmt|;
DECL|field|maxBoost
specifier|final
name|float
name|maxBoost
decl_stmt|;
DECL|field|combineFunction
specifier|final
name|CombineFunction
name|combineFunction
decl_stmt|;
DECL|method|FunctionScoreQuery
specifier|public
name|FunctionScoreQuery
parameter_list|(
name|Query
name|subQuery
parameter_list|,
name|ScoreFunction
name|function
parameter_list|,
name|CombineFunction
name|combineFunction
parameter_list|,
name|float
name|maxBoost
parameter_list|)
block|{
name|this
operator|.
name|subQuery
operator|=
name|subQuery
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
name|this
operator|.
name|combineFunction
operator|=
name|combineFunction
expr_stmt|;
name|this
operator|.
name|maxBoost
operator|=
name|maxBoost
expr_stmt|;
block|}
DECL|method|FunctionScoreQuery
specifier|public
name|FunctionScoreQuery
parameter_list|(
name|Query
name|subQuery
parameter_list|,
name|ScoreFunction
name|function
parameter_list|)
block|{
name|this
operator|.
name|subQuery
operator|=
name|subQuery
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
name|this
operator|.
name|combineFunction
operator|=
name|function
operator|.
name|getDefaultScoreCombiner
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxBoost
operator|=
name|DEFAULT_MAX_BOOST
expr_stmt|;
block|}
DECL|method|getMaxBoost
specifier|public
name|float
name|getMaxBoost
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxBoost
return|;
block|}
DECL|method|getSubQuery
specifier|public
name|Query
name|getSubQuery
parameter_list|()
block|{
return|return
name|subQuery
return|;
block|}
DECL|method|getFunction
specifier|public
name|ScoreFunction
name|getFunction
parameter_list|()
block|{
return|return
name|function
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getBoost
argument_list|()
operator|!=
literal|1.0F
condition|)
block|{
return|return
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
name|Query
name|newQ
init|=
name|subQuery
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|newQ
operator|==
name|subQuery
condition|)
block|{
return|return
name|this
return|;
block|}
name|FunctionScoreQuery
name|bq
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|this
operator|.
name|clone
argument_list|()
decl_stmt|;
name|bq
operator|.
name|subQuery
operator|=
name|newQ
expr_stmt|;
return|return
name|bq
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsScores
operator|==
literal|false
condition|)
block|{
return|return
name|subQuery
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
name|boolean
name|subQueryNeedsScores
init|=
name|combineFunction
operator|!=
name|CombineFunction
operator|.
name|REPLACE
comment|// if we don't replace we need the original score
operator|||
name|function
operator|==
literal|null
comment|// when the function is null, we just multiply the score, so we need it
operator|||
name|function
operator|.
name|needsScores
argument_list|()
decl_stmt|;
comment|// some scripts can replace with a script that returns eg. 1/_score
name|Weight
name|subQueryWeight
init|=
name|subQuery
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|subQueryNeedsScores
argument_list|)
decl_stmt|;
return|return
operator|new
name|CustomBoostFactorWeight
argument_list|(
name|this
argument_list|,
name|subQueryWeight
argument_list|,
name|subQueryNeedsScores
argument_list|)
return|;
block|}
DECL|class|CustomBoostFactorWeight
class|class
name|CustomBoostFactorWeight
extends|extends
name|Weight
block|{
DECL|field|subQueryWeight
specifier|final
name|Weight
name|subQueryWeight
decl_stmt|;
DECL|field|needsScores
specifier|final
name|boolean
name|needsScores
decl_stmt|;
DECL|method|CustomBoostFactorWeight
specifier|public
name|CustomBoostFactorWeight
parameter_list|(
name|Query
name|parent
parameter_list|,
name|Weight
name|subQueryWeight
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|subQueryWeight
operator|=
name|subQueryWeight
expr_stmt|;
name|this
operator|.
name|needsScores
operator|=
name|needsScores
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractTerms
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
name|subQueryWeight
operator|.
name|extractTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueForNormalization
specifier|public
name|float
name|getValueForNormalization
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|subQueryWeight
operator|.
name|getValueForNormalization
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|normalize
specifier|public
name|void
name|normalize
parameter_list|(
name|float
name|norm
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|subQueryWeight
operator|.
name|normalize
argument_list|(
name|norm
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Scorer
name|subQueryScorer
init|=
name|subQueryWeight
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|subQueryScorer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LeafScoreFunction
name|leafFunction
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|function
operator|!=
literal|null
condition|)
block|{
name|leafFunction
operator|=
name|function
operator|.
name|getLeafScoreFunction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FunctionFactorScorer
argument_list|(
name|this
argument_list|,
name|subQueryScorer
argument_list|,
name|leafFunction
argument_list|,
name|maxBoost
argument_list|,
name|combineFunction
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|Explanation
name|subQueryExpl
init|=
name|subQueryWeight
operator|.
name|explain
argument_list|(
name|context
argument_list|,
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subQueryExpl
operator|.
name|isMatch
argument_list|()
condition|)
block|{
return|return
name|subQueryExpl
return|;
block|}
if|if
condition|(
name|function
operator|!=
literal|null
condition|)
block|{
name|Explanation
name|functionExplanation
init|=
name|function
operator|.
name|getLeafScoreFunction
argument_list|(
name|context
argument_list|)
operator|.
name|explainScore
argument_list|(
name|doc
argument_list|,
name|subQueryExpl
argument_list|)
decl_stmt|;
return|return
name|combineFunction
operator|.
name|explain
argument_list|(
name|subQueryExpl
argument_list|,
name|functionExplanation
argument_list|,
name|maxBoost
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|subQueryExpl
return|;
block|}
block|}
block|}
DECL|class|FunctionFactorScorer
specifier|static
class|class
name|FunctionFactorScorer
extends|extends
name|CustomBoostFactorScorer
block|{
DECL|field|function
specifier|private
specifier|final
name|LeafScoreFunction
name|function
decl_stmt|;
DECL|field|needsScores
specifier|private
specifier|final
name|boolean
name|needsScores
decl_stmt|;
DECL|method|FunctionFactorScorer
specifier|private
name|FunctionFactorScorer
parameter_list|(
name|CustomBoostFactorWeight
name|w
parameter_list|,
name|Scorer
name|scorer
parameter_list|,
name|LeafScoreFunction
name|function
parameter_list|,
name|float
name|maxBoost
parameter_list|,
name|CombineFunction
name|scoreCombiner
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|w
argument_list|,
name|scorer
argument_list|,
name|maxBoost
argument_list|,
name|scoreCombiner
argument_list|)
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
name|this
operator|.
name|needsScores
operator|=
name|needsScores
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Even if the weight is created with needsScores=false, it might
comment|// be costly to call score(), so we explicitly check if scores
comment|// are needed
name|float
name|score
init|=
name|needsScores
condition|?
name|scorer
operator|.
name|score
argument_list|()
else|:
literal|0f
decl_stmt|;
if|if
condition|(
name|function
operator|==
literal|null
condition|)
block|{
return|return
name|score
return|;
block|}
else|else
block|{
return|return
name|scoreCombiner
operator|.
name|combine
argument_list|(
name|score
argument_list|,
name|function
operator|.
name|score
argument_list|(
name|scorer
operator|.
name|docID
argument_list|()
argument_list|,
name|score
argument_list|)
argument_list|,
name|maxBoost
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"function score ("
argument_list|)
operator|.
name|append
argument_list|(
name|subQuery
operator|.
name|toString
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|",function="
argument_list|)
operator|.
name|append
argument_list|(
name|function
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ToStringUtils
operator|.
name|boost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FunctionScoreQuery
name|other
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|subQuery
argument_list|,
name|other
operator|.
name|subQuery
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|function
argument_list|,
name|other
operator|.
name|function
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|combineFunction
argument_list|,
name|other
operator|.
name|combineFunction
argument_list|)
operator|&&
name|this
operator|.
name|maxBoost
operator|==
name|other
operator|.
name|maxBoost
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|super
operator|.
name|hashCode
argument_list|()
argument_list|,
name|subQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|function
argument_list|,
name|combineFunction
argument_list|,
name|maxBoost
argument_list|)
return|;
block|}
block|}
end_class

end_unit

