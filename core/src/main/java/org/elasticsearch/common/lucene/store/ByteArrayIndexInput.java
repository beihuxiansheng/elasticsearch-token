begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Wraps array of bytes into IndexInput  */
end_comment

begin_class
DECL|class|ByteArrayIndexInput
specifier|public
class|class
name|ByteArrayIndexInput
extends|extends
name|IndexInput
block|{
DECL|field|bytes
specifier|private
specifier|final
name|byte
index|[]
name|bytes
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|field|length
specifier|private
name|int
name|length
decl_stmt|;
DECL|method|ByteArrayIndexInput
specifier|public
name|ByteArrayIndexInput
parameter_list|(
name|String
name|resourceDesc
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|this
argument_list|(
name|resourceDesc
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|ByteArrayIndexInput
specifier|public
name|ByteArrayIndexInput
parameter_list|(
name|String
name|resourceDesc
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|resourceDesc
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|getFilePointer
specifier|public
name|long
name|getFilePointer
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|seek
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|l
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|l
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Seeking to negative position: "
operator|+
name|pos
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|l
operator|>
name|length
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"seek past EOF"
argument_list|)
throw|;
block|}
name|pos
operator|=
operator|(
name|int
operator|)
name|l
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|slice
specifier|public
name|IndexInput
name|slice
parameter_list|(
name|String
name|sliceDescription
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|>=
literal|0L
operator|&&
name|length
operator|>=
literal|0L
operator|&&
name|offset
operator|+
name|length
operator|<=
name|this
operator|.
name|length
condition|)
block|{
return|return
operator|new
name|ByteArrayIndexInput
argument_list|(
name|sliceDescription
argument_list|,
name|bytes
argument_list|,
name|this
operator|.
name|offset
operator|+
operator|(
name|int
operator|)
name|offset
argument_list|,
operator|(
name|int
operator|)
name|length
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"slice() "
operator|+
name|sliceDescription
operator|+
literal|" out of bounds: offset="
operator|+
name|offset
operator|+
literal|",length="
operator|+
name|length
operator|+
literal|",fileLength="
operator|+
name|this
operator|.
name|length
operator|+
literal|": "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|readByte
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|>=
name|offset
operator|+
name|length
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"seek past EOF"
argument_list|)
throw|;
block|}
return|return
name|bytes
index|[
name|offset
operator|+
name|pos
operator|++
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|readBytes
specifier|public
name|void
name|readBytes
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|+
name|len
operator|>
name|this
operator|.
name|offset
operator|+
name|length
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"seek past EOF"
argument_list|)
throw|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|this
operator|.
name|offset
operator|+
name|pos
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
block|}
block|}
end_class

end_unit

