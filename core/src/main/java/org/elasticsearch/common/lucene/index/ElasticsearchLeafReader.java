begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterLeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.lucene.index.FilterLeafReader} that exposes  * Elasticsearch internal per shard / index information like the shard ID.  */
end_comment

begin_class
DECL|class|ElasticsearchLeafReader
specifier|public
specifier|final
class|class
name|ElasticsearchLeafReader
extends|extends
name|FilterLeafReader
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
comment|/**      *<p>Construct a FilterLeafReader based on the specified base reader.      *<p>Note that base reader is closed if this FilterLeafReader is closed.</p>      *      * @param in specified base reader.      */
DECL|method|ElasticsearchLeafReader
specifier|public
name|ElasticsearchLeafReader
parameter_list|(
name|LeafReader
name|in
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
block|}
comment|/**      * Returns the shard id this segment belongs to.      */
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|this
operator|.
name|shardId
return|;
block|}
annotation|@
name|Override
DECL|method|getCoreCacheHelper
specifier|public
name|CacheHelper
name|getCoreCacheHelper
parameter_list|()
block|{
return|return
name|in
operator|.
name|getCoreCacheHelper
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getReaderCacheHelper
specifier|public
name|CacheHelper
name|getReaderCacheHelper
parameter_list|()
block|{
return|return
name|in
operator|.
name|getReaderCacheHelper
argument_list|()
return|;
block|}
DECL|method|getElasticsearchLeafReader
specifier|public
specifier|static
name|ElasticsearchLeafReader
name|getElasticsearchLeafReader
parameter_list|(
name|LeafReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|FilterLeafReader
condition|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|ElasticsearchLeafReader
condition|)
block|{
return|return
operator|(
name|ElasticsearchLeafReader
operator|)
name|reader
return|;
block|}
else|else
block|{
comment|// We need to use FilterLeafReader#getDelegate and not FilterLeafReader#unwrap, because
comment|// If there are multiple levels of filtered leaf readers then with the unwrap() method it immediately
comment|// returns the most inner leaf reader and thus skipping of over any other filtered leaf reader that
comment|// may be instance of ElasticsearchLeafReader. This can cause us to miss the shardId.
return|return
name|getElasticsearchLeafReader
argument_list|(
operator|(
operator|(
name|FilterLeafReader
operator|)
name|reader
operator|)
operator|.
name|getDelegate
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

