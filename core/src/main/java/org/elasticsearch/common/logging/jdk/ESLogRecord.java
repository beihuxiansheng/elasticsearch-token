begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.logging.jdk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|jdk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|support
operator|.
name|AbstractESLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_comment
comment|/**  * A {@link LogRecord} which is used in conjunction with {@link JdkESLogger}  * with the ability to provide the class name, method name and line number  * information of the code calling the logger  */
end_comment

begin_class
DECL|class|ESLogRecord
specifier|public
class|class
name|ESLogRecord
extends|extends
name|LogRecord
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1107741560233585726L
decl_stmt|;
DECL|field|FQCN
specifier|private
specifier|static
specifier|final
name|String
name|FQCN
init|=
name|AbstractESLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|sourceClassName
specifier|private
name|String
name|sourceClassName
decl_stmt|;
DECL|field|sourceMethodName
specifier|private
name|String
name|sourceMethodName
decl_stmt|;
DECL|field|needToInferCaller
specifier|private
specifier|transient
name|boolean
name|needToInferCaller
decl_stmt|;
DECL|method|ESLogRecord
specifier|public
name|ESLogRecord
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|needToInferCaller
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSourceClassName
specifier|public
name|String
name|getSourceClassName
parameter_list|()
block|{
if|if
condition|(
name|needToInferCaller
condition|)
block|{
name|inferCaller
argument_list|()
expr_stmt|;
block|}
return|return
name|sourceClassName
return|;
block|}
annotation|@
name|Override
DECL|method|setSourceClassName
specifier|public
name|void
name|setSourceClassName
parameter_list|(
name|String
name|sourceClassName
parameter_list|)
block|{
name|this
operator|.
name|sourceClassName
operator|=
name|sourceClassName
expr_stmt|;
name|needToInferCaller
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSourceMethodName
specifier|public
name|String
name|getSourceMethodName
parameter_list|()
block|{
if|if
condition|(
name|needToInferCaller
condition|)
block|{
name|inferCaller
argument_list|()
expr_stmt|;
block|}
return|return
name|sourceMethodName
return|;
block|}
annotation|@
name|Override
DECL|method|setSourceMethodName
specifier|public
name|void
name|setSourceMethodName
parameter_list|(
name|String
name|sourceMethodName
parameter_list|)
block|{
name|this
operator|.
name|sourceMethodName
operator|=
name|sourceMethodName
expr_stmt|;
name|needToInferCaller
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Determines the source information for the caller of the logger (class      * name, method name, and line number)      */
DECL|method|inferCaller
specifier|private
name|void
name|inferCaller
parameter_list|()
block|{
name|needToInferCaller
operator|=
literal|false
expr_stmt|;
name|Throwable
name|throwable
init|=
operator|new
name|Throwable
argument_list|()
decl_stmt|;
name|boolean
name|lookingForLogger
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|StackTraceElement
name|frame
range|:
name|throwable
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
name|String
name|cname
init|=
name|frame
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|boolean
name|isLoggerImpl
init|=
name|isLoggerImplFrame
argument_list|(
name|cname
argument_list|)
decl_stmt|;
if|if
condition|(
name|lookingForLogger
condition|)
block|{
comment|// Skip all frames until we have found the first logger frame.
if|if
condition|(
name|isLoggerImpl
condition|)
block|{
name|lookingForLogger
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isLoggerImpl
condition|)
block|{
comment|// skip reflection call
if|if
condition|(
operator|!
name|cname
operator|.
name|startsWith
argument_list|(
literal|"java.lang.reflect."
argument_list|)
operator|&&
operator|!
name|cname
operator|.
name|startsWith
argument_list|(
literal|"sun.reflect."
argument_list|)
condition|)
block|{
comment|// We've found the relevant frame.
name|setSourceClassName
argument_list|(
name|cname
argument_list|)
expr_stmt|;
name|setSourceMethodName
argument_list|(
name|frame
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
comment|// We haven't found a suitable frame, so just punt.  This is
comment|// OK as we are only committed to making a "best effort" here.
block|}
DECL|method|isLoggerImplFrame
specifier|private
name|boolean
name|isLoggerImplFrame
parameter_list|(
name|String
name|cname
parameter_list|)
block|{
comment|// the log record could be created for a platform logger
return|return
name|cname
operator|.
name|equals
argument_list|(
name|FQCN
argument_list|)
return|;
block|}
block|}
end_class

end_unit

