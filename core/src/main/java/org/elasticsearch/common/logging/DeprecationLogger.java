begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.logging
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressLoggerChecks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_comment
comment|/**  * A logger that logs deprecation notices.  */
end_comment

begin_class
DECL|class|DeprecationLogger
specifier|public
class|class
name|DeprecationLogger
block|{
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
comment|/**      * The "Warning" Header comes from RFC-7234. As the RFC describes, it's generally used for caching purposes, but it can be      * used for<em>any</em> warning.      *      * https://tools.ietf.org/html/rfc7234#section-5.5      */
DECL|field|WARNING_HEADER
specifier|public
specifier|static
specifier|final
name|String
name|WARNING_HEADER
init|=
literal|"Warning"
decl_stmt|;
comment|/**      * This is set once by the {@code Node} constructor, but it uses {@link CopyOnWriteArraySet} to ensure that tests can run in parallel.      *<p>      * Integration tests will create separate nodes within the same classloader, thus leading to a shared, {@code static} state.      * In order for all tests to appropriately be handled, this must be able to remember<em>all</em> {@link ThreadContext}s that it is      * given in a thread safe manner.      *<p>      * For actual usage, multiple nodes do not share the same JVM and therefore this will only be set once in practice.      */
DECL|field|THREAD_CONTEXT
specifier|private
specifier|static
specifier|final
name|CopyOnWriteArraySet
argument_list|<
name|ThreadContext
argument_list|>
name|THREAD_CONTEXT
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Set the {@link ThreadContext} used to add deprecation headers to network responses.      *<p>      * This is expected to<em>only</em> be invoked by the {@code Node}'s constructor (therefore once outside of tests).      *      * @param threadContext The thread context owned by the {@code ThreadPool} (and implicitly a {@code Node})      * @throws IllegalStateException if this {@code threadContext} has already been set      */
DECL|method|setThreadContext
specifier|public
specifier|static
name|void
name|setThreadContext
parameter_list|(
name|ThreadContext
name|threadContext
parameter_list|)
block|{
assert|assert
name|threadContext
operator|!=
literal|null
assert|;
comment|// add returning false means it _did_ have it already
if|if
condition|(
name|THREAD_CONTEXT
operator|.
name|add
argument_list|(
name|threadContext
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Double-setting ThreadContext not allowed!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Remove the {@link ThreadContext} used to add deprecation headers to network responses.      *<p>      * This is expected to<em>only</em> be invoked by the {@code Node}'s {@code close} method (therefore once outside of tests).      *      * @param threadContext The thread context owned by the {@code ThreadPool} (and implicitly a {@code Node})      * @throws IllegalStateException if this {@code threadContext} is unknown (and presumably already unset before)      */
DECL|method|removeThreadContext
specifier|public
specifier|static
name|void
name|removeThreadContext
parameter_list|(
name|ThreadContext
name|threadContext
parameter_list|)
block|{
assert|assert
name|threadContext
operator|!=
literal|null
assert|;
comment|// remove returning false means it did not have it already
if|if
condition|(
name|THREAD_CONTEXT
operator|.
name|remove
argument_list|(
name|threadContext
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Removing unknown ThreadContext not allowed!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a new deprecation logger based on the parent logger. Automatically      * prefixes the logger name with "deprecation", if it starts with "org.elasticsearch.",      * it replaces "org.elasticsearch" with "org.elasticsearch.deprecation" to maintain      * the "org.elasticsearch" namespace.      */
DECL|method|DeprecationLogger
specifier|public
name|DeprecationLogger
parameter_list|(
name|Logger
name|parentLogger
parameter_list|)
block|{
name|String
name|name
init|=
name|parentLogger
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"org.elasticsearch"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"org.elasticsearch."
argument_list|,
literal|"org.elasticsearch.deprecation."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
literal|"deprecation."
operator|+
name|name
expr_stmt|;
block|}
name|this
operator|.
name|logger
operator|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs a deprecated message.      */
DECL|method|deprecated
specifier|public
name|void
name|deprecated
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|deprecated
argument_list|(
name|THREAD_CONTEXT
argument_list|,
name|msg
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs a deprecated message to the deprecation log, as well as to the local {@link ThreadContext}.      *      * @param threadContexts The node's {@link ThreadContext} (outside of concurrent tests, this should only ever have one context).      * @param message The deprecation message.      * @param params The parameters used to fill in the message, if any exist.      */
annotation|@
name|SuppressLoggerChecks
argument_list|(
name|reason
operator|=
literal|"safely delegates to logger"
argument_list|)
DECL|method|deprecated
name|void
name|deprecated
parameter_list|(
name|Set
argument_list|<
name|ThreadContext
argument_list|>
name|threadContexts
parameter_list|,
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|Iterator
argument_list|<
name|ThreadContext
argument_list|>
name|iterator
init|=
name|threadContexts
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|String
name|formattedMessage
init|=
name|LoggerMessageFormat
operator|.
name|format
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|addResponseHeader
argument_list|(
name|WARNING_HEADER
argument_list|,
name|formattedMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// ignored; it should be removed shortly
block|}
block|}
name|logger
operator|.
name|warn
argument_list|(
name|formattedMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

