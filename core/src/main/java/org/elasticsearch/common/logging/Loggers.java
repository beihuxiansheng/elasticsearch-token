begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.logging
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|LoggerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Classes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
operator|.
name|getConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|asArrayList
import|;
end_import

begin_comment
comment|/**  * A set of utilities around Logging.  */
end_comment

begin_class
DECL|class|Loggers
specifier|public
class|class
name|Loggers
block|{
DECL|field|SPACE
specifier|public
specifier|static
specifier|final
name|String
name|SPACE
init|=
literal|" "
decl_stmt|;
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|String
modifier|...
name|prefixes
parameter_list|)
block|{
return|return
name|getLogger
argument_list|(
name|clazz
argument_list|,
name|settings
argument_list|,
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|,
name|asArrayList
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|prefixes
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Just like {@link #getLogger(Class, org.elasticsearch.common.settings.Settings, ShardId, String...)} but String loggerName instead of      * Class.      */
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|String
name|loggerName
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|String
modifier|...
name|prefixes
parameter_list|)
block|{
return|return
name|getLogger
argument_list|(
name|loggerName
argument_list|,
name|settings
argument_list|,
name|asArrayList
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|prefixes
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|Index
name|index
parameter_list|,
name|String
modifier|...
name|prefixes
parameter_list|)
block|{
return|return
name|getLogger
argument_list|(
name|clazz
argument_list|,
name|settings
argument_list|,
name|asArrayList
argument_list|(
name|SPACE
argument_list|,
name|index
operator|.
name|getName
argument_list|()
argument_list|,
name|prefixes
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|String
modifier|...
name|prefixes
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|prefixesList
init|=
name|prefixesList
argument_list|(
name|settings
argument_list|,
name|prefixes
argument_list|)
decl_stmt|;
return|return
name|getLogger
argument_list|(
name|clazz
argument_list|,
name|prefixesList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|prefixesList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|String
name|loggerName
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|String
modifier|...
name|prefixes
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|prefixesList
init|=
name|prefixesList
argument_list|(
name|settings
argument_list|,
name|prefixes
argument_list|)
decl_stmt|;
return|return
name|getLogger
argument_list|(
name|loggerName
argument_list|,
name|prefixesList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|prefixesList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|prefixesList
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|prefixesList
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
modifier|...
name|prefixes
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|prefixesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Node
operator|.
name|NODE_NAME_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|prefixesList
operator|.
name|add
argument_list|(
name|Node
operator|.
name|NODE_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefixes
operator|!=
literal|null
operator|&&
name|prefixes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|prefixesList
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|prefixes
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|prefixesList
return|;
block|}
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|Logger
name|parentLogger
parameter_list|,
name|String
name|s
parameter_list|)
block|{
assert|assert
name|parentLogger
operator|instanceof
name|PrefixLogger
assert|;
return|return
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
operator|(
operator|(
name|PrefixLogger
operator|)
name|parentLogger
operator|)
operator|.
name|prefix
argument_list|()
argument_list|,
name|parentLogger
operator|.
name|getName
argument_list|()
operator|+
name|s
argument_list|)
return|;
block|}
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|s
argument_list|)
return|;
block|}
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|clazz
argument_list|)
return|;
block|}
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
modifier|...
name|prefixes
parameter_list|)
block|{
return|return
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|formatPrefix
argument_list|(
name|prefixes
argument_list|)
argument_list|,
name|clazz
argument_list|)
return|;
block|}
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|prefixes
parameter_list|)
block|{
return|return
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|formatPrefix
argument_list|(
name|prefixes
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|formatPrefix
specifier|private
specifier|static
name|String
name|formatPrefix
parameter_list|(
name|String
modifier|...
name|prefixes
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefixes
operator|!=
literal|null
operator|&&
name|prefixes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|prefixX
range|:
name|prefixes
control|)
block|{
if|if
condition|(
name|prefixX
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prefixX
operator|.
name|equals
argument_list|(
name|SPACE
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|prefixX
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|prefix
return|;
block|}
comment|/**      * Set the level of the logger. If the new level is null, the logger will inherit it's level from its nearest ancestor with a non-null      * level.      */
DECL|method|setLevel
specifier|public
specifier|static
name|void
name|setLevel
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|String
name|level
parameter_list|)
block|{
specifier|final
name|Level
name|l
decl_stmt|;
if|if
condition|(
name|level
operator|==
literal|null
condition|)
block|{
name|l
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
name|Level
operator|.
name|valueOf
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
name|setLevel
argument_list|(
name|logger
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|setLevel
specifier|public
specifier|static
name|void
name|setLevel
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|Level
name|level
parameter_list|)
block|{
if|if
condition|(
operator|!
name|LogManager
operator|.
name|ROOT_LOGGER_NAME
operator|.
name|equals
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Configurator
operator|.
name|setLevel
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|LoggerContext
name|ctx
init|=
name|LoggerContext
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|config
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|LoggerConfig
name|loggerConfig
init|=
name|config
operator|.
name|getLoggerConfig
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|loggerConfig
operator|.
name|setLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|updateLoggers
argument_list|()
expr_stmt|;
block|}
comment|// we have to descend the hierarchy
specifier|final
name|LoggerContext
name|ctx
init|=
name|LoggerContext
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|LoggerConfig
name|loggerConfig
range|:
name|ctx
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLoggers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|LogManager
operator|.
name|ROOT_LOGGER_NAME
operator|.
name|equals
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|loggerConfig
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
condition|)
block|{
name|Configurator
operator|.
name|setLevel
argument_list|(
name|loggerConfig
operator|.
name|getName
argument_list|()
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addAppender
specifier|public
specifier|static
name|void
name|addAppender
parameter_list|(
specifier|final
name|Logger
name|logger
parameter_list|,
specifier|final
name|Appender
name|appender
parameter_list|)
block|{
specifier|final
name|LoggerContext
name|ctx
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|config
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|LoggerConfig
name|loggerConfig
init|=
name|config
operator|.
name|getLoggerConfig
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|logger
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|loggerConfig
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|loggerConfig
operator|=
operator|new
name|LoggerConfig
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|logger
operator|.
name|getLevel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|addLogger
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|loggerConfig
argument_list|)
expr_stmt|;
block|}
name|loggerConfig
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|updateLoggers
argument_list|()
expr_stmt|;
block|}
DECL|method|removeAppender
specifier|public
specifier|static
name|void
name|removeAppender
parameter_list|(
specifier|final
name|Logger
name|logger
parameter_list|,
specifier|final
name|Appender
name|appender
parameter_list|)
block|{
specifier|final
name|LoggerContext
name|ctx
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|config
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|LoggerConfig
name|loggerConfig
init|=
name|config
operator|.
name|getLoggerConfig
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|logger
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|loggerConfig
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|loggerConfig
operator|=
operator|new
name|LoggerConfig
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|logger
operator|.
name|getLevel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|addLogger
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|loggerConfig
argument_list|)
expr_stmt|;
block|}
name|loggerConfig
operator|.
name|removeAppender
argument_list|(
name|appender
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|updateLoggers
argument_list|()
expr_stmt|;
block|}
DECL|method|findAppender
specifier|public
specifier|static
name|Appender
name|findAppender
parameter_list|(
specifier|final
name|Logger
name|logger
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Appender
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|LoggerContext
name|ctx
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|config
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|LoggerConfig
name|loggerConfig
init|=
name|config
operator|.
name|getLoggerConfig
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Appender
argument_list|>
name|entry
range|:
name|loggerConfig
operator|.
name|getAppenders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

