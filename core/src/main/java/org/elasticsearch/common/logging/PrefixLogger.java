begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.logging
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Marker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|MarkerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|spi
operator|.
name|ExtendedLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|spi
operator|.
name|ExtendedLoggerWrapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_comment
comment|/**  * A logger that prefixes all messages with a fixed prefix specified during construction. The prefix mechanism uses the marker construct, so  * for the prefixes to appear, the logging layout pattern must include the marker in its pattern.  */
end_comment

begin_class
DECL|class|PrefixLogger
class|class
name|PrefixLogger
extends|extends
name|ExtendedLoggerWrapper
block|{
comment|/*      * We can not use the built-in Marker tracking (MarkerManager) because the MarkerManager holds a permanent reference to the marker;      * however, we have transient markers from index-level and shard-level components so this would effectively be a memory leak. Since we      * can not tie into the lifecycle of these components, we have to use a mechanism that enables garbage collection of such markers when      * they are no longer in use.      */
DECL|field|markers
specifier|private
specifier|static
specifier|final
name|WeakHashMap
argument_list|<
name|String
argument_list|,
name|Marker
argument_list|>
name|markers
init|=
operator|new
name|WeakHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Return the size of the cached markers. This size can vary as markers are cached but collected during GC activity when a given prefix      * is no longer in use.      *      * @return the size of the cached markers      */
DECL|method|markersSize
specifier|static
name|int
name|markersSize
parameter_list|()
block|{
return|return
name|markers
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * The marker for this prefix logger.      */
DECL|field|marker
specifier|private
specifier|final
name|Marker
name|marker
decl_stmt|;
comment|/**      * Obtain the prefix for this prefix logger. This can be used to create a logger with the same prefix as this one.      *      * @return the prefix      */
DECL|method|prefix
specifier|public
name|String
name|prefix
parameter_list|()
block|{
return|return
name|marker
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * Construct a prefix logger with the specified name and prefix.      *      * @param logger the extended logger to wrap      * @param name   the name of this prefix logger      * @param prefix the prefix for this prefix logger      */
DECL|method|PrefixLogger
name|PrefixLogger
parameter_list|(
specifier|final
name|ExtendedLogger
name|logger
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|(
name|logger
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|String
name|actualPrefix
init|=
operator|(
name|prefix
operator|==
literal|null
condition|?
literal|""
else|:
name|prefix
operator|)
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|final
name|Marker
name|actualMarker
decl_stmt|;
comment|// markers is not thread-safe, so we synchronize access
synchronized|synchronized
init|(
name|markers
init|)
block|{
specifier|final
name|Marker
name|maybeMarker
init|=
name|markers
operator|.
name|get
argument_list|(
name|actualPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeMarker
operator|==
literal|null
condition|)
block|{
name|actualMarker
operator|=
operator|new
name|MarkerManager
operator|.
name|Log4jMarker
argument_list|(
name|actualPrefix
argument_list|)
expr_stmt|;
comment|/*                  * We must create a new instance here as otherwise the marker will hold a reference to the key in the weak hash map; as                  * those references are held strongly, this would give a strong reference back to the key preventing them from ever being                  * collected. This also guarantees that no other strong reference can be held to the prefix anywhere.                  */
name|markers
operator|.
name|put
argument_list|(
operator|new
name|String
argument_list|(
name|actualPrefix
argument_list|)
argument_list|,
name|actualMarker
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actualMarker
operator|=
name|maybeMarker
expr_stmt|;
block|}
block|}
name|this
operator|.
name|marker
operator|=
name|actualMarker
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|logMessage
specifier|public
name|void
name|logMessage
parameter_list|(
specifier|final
name|String
name|fqcn
parameter_list|,
specifier|final
name|Level
name|level
parameter_list|,
specifier|final
name|Marker
name|marker
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|,
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
assert|assert
name|marker
operator|==
literal|null
assert|;
name|super
operator|.
name|logMessage
argument_list|(
name|fqcn
argument_list|,
name|level
argument_list|,
name|this
operator|.
name|marker
argument_list|,
name|message
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

