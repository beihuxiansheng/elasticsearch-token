begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.logging
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Factory to get {@link Logger}s  */
end_comment

begin_class
DECL|class|ESLoggerFactory
specifier|public
specifier|abstract
class|class
name|ESLoggerFactory
block|{
DECL|field|LOG_DEFAULT_LEVEL_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Level
argument_list|>
name|LOG_DEFAULT_LEVEL_SETTING
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"logger.level"
argument_list|,
name|Level
operator|.
name|INFO
operator|.
name|name
argument_list|()
argument_list|,
name|Level
operator|::
name|valueOf
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|LOG_LEVEL_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Level
argument_list|>
name|LOG_LEVEL_SETTING
init|=
name|Setting
operator|.
name|prefixKeySetting
argument_list|(
literal|"logger."
argument_list|,
name|Level
operator|.
name|INFO
operator|.
name|name
argument_list|()
argument_list|,
name|Level
operator|::
name|valueOf
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|name
operator|.
name|intern
argument_list|()
expr_stmt|;
specifier|final
name|Logger
name|logger
init|=
name|getLogger
argument_list|(
operator|new
name|PrefixMessageFactory
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
specifier|final
name|MessageFactory
name|factory
init|=
name|logger
operator|.
name|getMessageFactory
argument_list|()
decl_stmt|;
comment|// in some cases, we initialize the logger before we are ready to set the prefix
comment|// we can not re-initialize the logger, so the above getLogger might return an existing
comment|// instance without the prefix set; thus, we hack around this by resetting the prefix
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|factory
operator|instanceof
name|PrefixMessageFactory
condition|)
block|{
operator|(
operator|(
name|PrefixMessageFactory
operator|)
name|factory
operator|)
operator|.
name|setPrefix
argument_list|(
name|prefix
operator|.
name|intern
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|logger
return|;
block|}
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|MessageFactory
name|messageFactory
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|LogManager
operator|.
name|getLogger
argument_list|(
name|name
argument_list|,
name|messageFactory
argument_list|)
return|;
block|}
DECL|method|getLogger
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getLogger
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|getDeprecationLogger
specifier|public
specifier|static
name|DeprecationLogger
name|getDeprecationLogger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|DeprecationLogger
argument_list|(
name|getLogger
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDeprecationLogger
specifier|public
specifier|static
name|DeprecationLogger
name|getDeprecationLogger
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|DeprecationLogger
argument_list|(
name|getLogger
argument_list|(
name|prefix
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getRootLogger
specifier|public
specifier|static
name|Logger
name|getRootLogger
parameter_list|()
block|{
return|return
name|LogManager
operator|.
name|getRootLogger
argument_list|()
return|;
block|}
DECL|method|ESLoggerFactory
specifier|private
name|ESLoggerFactory
parameter_list|()
block|{
comment|// Utility class can't be built.
block|}
block|}
end_class

end_unit

