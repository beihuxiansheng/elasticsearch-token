begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.logging
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressLoggerChecks
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|LoggerMessageFormat
operator|.
name|format
import|;
end_import

begin_comment
comment|/**  * Elasticsearch's logger wrapper.  */
end_comment

begin_class
annotation|@
name|SuppressLoggerChecks
argument_list|(
name|reason
operator|=
literal|"safely delegates to itself"
argument_list|)
DECL|class|ESLogger
specifier|public
class|class
name|ESLogger
block|{
DECL|field|FQCN
specifier|private
specifier|static
specifier|final
name|String
name|FQCN
init|=
name|ESLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|method|ESLogger
specifier|public
name|ESLogger
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
comment|/**      * The prefix of the log.      */
DECL|method|getPrefix
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|this
operator|.
name|prefix
return|;
block|}
comment|/**      * Fetch the underlying logger so we can look at it. Only exists for testing.      */
DECL|method|getLogger
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|logger
return|;
block|}
comment|/**      * Set the level of the logger. If the new level is null, the logger will inherit it's level from its nearest ancestor with a non-null      * level.      */
DECL|method|setLevel
specifier|public
name|void
name|setLevel
parameter_list|(
name|String
name|level
parameter_list|)
block|{
if|if
condition|(
name|level
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|setLevel
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"error"
operator|.
name|equalsIgnoreCase
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"warn"
operator|.
name|equalsIgnoreCase
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"info"
operator|.
name|equalsIgnoreCase
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"debug"
operator|.
name|equalsIgnoreCase
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"trace"
operator|.
name|equalsIgnoreCase
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The level of this logger. If null then the logger is inheriting it's level from its nearest ancestor with a non-null level.      */
DECL|method|getLevel
specifier|public
name|String
name|getLevel
parameter_list|()
block|{
if|if
condition|(
name|logger
operator|.
name|getLevel
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|logger
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * The name of this logger.      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|logger
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * Returns {@code true} if a TRACE level message should be logged.      */
DECL|method|isTraceEnabled
specifier|public
name|boolean
name|isTraceEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isTraceEnabled
argument_list|()
return|;
block|}
comment|/**      * Returns {@code true} if a DEBUG level message should be logged.      */
DECL|method|isDebugEnabled
specifier|public
name|boolean
name|isDebugEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isDebugEnabled
argument_list|()
return|;
block|}
comment|/**      * Returns {@code true} if an INFO level message should be logged.      */
DECL|method|isInfoEnabled
specifier|public
name|boolean
name|isInfoEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isInfoEnabled
argument_list|()
return|;
block|}
comment|/**      * Returns {@code true} if a WARN level message should be logged.      */
DECL|method|isWarnEnabled
specifier|public
name|boolean
name|isWarnEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isEnabledFor
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
return|;
block|}
comment|/**      * Returns {@code true} if an ERROR level message should be logged.      */
DECL|method|isErrorEnabled
specifier|public
name|boolean
name|isErrorEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isEnabledFor
argument_list|(
name|Level
operator|.
name|ERROR
argument_list|)
return|;
block|}
comment|/**      * Logs a TRACE level message.      */
DECL|method|trace
specifier|public
name|void
name|trace
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|trace
argument_list|(
name|msg
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs a TRACE level message with an exception.      */
DECL|method|trace
specifier|public
name|void
name|trace
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
if|if
condition|(
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|FQCN
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|,
name|format
argument_list|(
name|prefix
argument_list|,
name|msg
argument_list|,
name|params
argument_list|)
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Logs a DEBUG level message.      */
DECL|method|debug
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|debug
argument_list|(
name|msg
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs a DEBUG level message with an exception.      */
DECL|method|debug
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
if|if
condition|(
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|FQCN
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|,
name|format
argument_list|(
name|prefix
argument_list|,
name|msg
argument_list|,
name|params
argument_list|)
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Logs a INFO level message.      */
DECL|method|info
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|info
argument_list|(
name|msg
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs a INFO level message with an exception.      */
DECL|method|info
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
if|if
condition|(
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|FQCN
argument_list|,
name|Level
operator|.
name|INFO
argument_list|,
name|format
argument_list|(
name|prefix
argument_list|,
name|msg
argument_list|,
name|params
argument_list|)
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Logs a WARN level message.      */
DECL|method|warn
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|warn
argument_list|(
name|msg
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs a WARN level message with an exception.      */
DECL|method|warn
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
if|if
condition|(
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|FQCN
argument_list|,
name|Level
operator|.
name|WARN
argument_list|,
name|format
argument_list|(
name|prefix
argument_list|,
name|msg
argument_list|,
name|params
argument_list|)
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Logs a ERROR level message.      */
DECL|method|error
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|error
argument_list|(
name|msg
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs a ERROR level message with an exception.      */
DECL|method|error
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
if|if
condition|(
name|isErrorEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|FQCN
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|,
name|format
argument_list|(
name|prefix
argument_list|,
name|msg
argument_list|,
name|params
argument_list|)
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

