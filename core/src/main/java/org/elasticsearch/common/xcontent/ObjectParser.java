begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * A declarative Object parser to parse any kind of XContent structures into existing object with setters.  * The Parser is designed to be declarative and stateless. A single parser is defined for one object level, nested  * elements can be added via {@link #declareObject(BiConsumer, BiFunction, ParseField)} which is commonly done by  * declaring yet another instance of {@link ObjectParser}. Instances of {@link ObjectParser} are thread-safe and can be  * re-used across parsing operations. It's recommended to use the high level declare methods like {@link #declareString(BiConsumer, ParseField)}  * instead of {@link #declareField} which can be used to implement exceptional parsing operations not covered by the high level methods.  */
end_comment

begin_class
DECL|class|ObjectParser
specifier|public
specifier|final
class|class
name|ObjectParser
parameter_list|<
name|Value
parameter_list|,
name|Context
parameter_list|>
implements|implements
name|BiFunction
argument_list|<
name|XContentParser
argument_list|,
name|Context
argument_list|,
name|Value
argument_list|>
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|valueSupplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Value
argument_list|>
name|valueSupplier
decl_stmt|;
comment|/**      * Creates a new ObjectParser instance with a name. This name is used to reference the parser in exceptions and messages.      */
DECL|method|ObjectParser
specifier|public
name|ObjectParser
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new ObjectParser instance which a name.      * @param name the parsers name, used to reference the parser in exceptions and messages.      * @param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser.      */
DECL|method|ObjectParser
specifier|public
name|ObjectParser
parameter_list|(
name|String
name|name
parameter_list|,
name|Supplier
argument_list|<
name|Value
argument_list|>
name|valueSupplier
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|valueSupplier
operator|=
name|valueSupplier
expr_stmt|;
block|}
comment|/**      * Parses a Value from the given {@link XContentParser}      * @param parser the parser to build a value from      * @return a new value instance drawn from the provided value supplier on {@link #ObjectParser(String, Supplier)}      * @throws IOException if an IOException occurs.      */
DECL|method|parse
specifier|public
name|Value
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valueSupplier
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"valueSupplier is not set"
argument_list|)
throw|;
block|}
return|return
name|parse
argument_list|(
name|parser
argument_list|,
name|valueSupplier
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Parses a Value from the given {@link XContentParser}      * @param parser the parser to build a value from      * @param value the value to fill from the parser      * @return the parsed value      * @throws IOException if an IOException occurs.      */
DECL|method|parse
specifier|public
name|Value
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|Value
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parse
argument_list|(
name|parser
argument_list|,
name|value
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Parses a Value from the given {@link XContentParser}      * @param parser the parser to build a value from      * @param value the value to fill from the parser      * @param context an optional context that is passed along to all declared field parsers      * @return the parsed value      * @throws IOException if an IOException occurs.      */
DECL|method|parse
specifier|public
name|Value
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|Value
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|currentToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"["
operator|+
name|name
operator|+
literal|"] Expected START_OBJECT but was: "
operator|+
name|token
argument_list|)
throw|;
block|}
block|}
name|FieldParser
argument_list|<
name|Value
argument_list|>
name|fieldParser
init|=
literal|null
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
name|fieldParser
operator|=
name|getParser
argument_list|(
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|currentFieldName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"["
operator|+
name|name
operator|+
literal|"] no field found"
argument_list|)
throw|;
block|}
assert|assert
name|fieldParser
operator|!=
literal|null
assert|;
name|fieldParser
operator|.
name|assertSupports
argument_list|(
name|name
argument_list|,
name|token
argument_list|,
name|currentFieldName
argument_list|,
name|parser
operator|.
name|getParseFieldMatcher
argument_list|()
argument_list|)
expr_stmt|;
name|parseSub
argument_list|(
name|parser
argument_list|,
name|fieldParser
argument_list|,
name|currentFieldName
argument_list|,
name|value
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|fieldParser
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
DECL|method|parseArray
specifier|private
name|void
name|parseArray
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|FieldParser
argument_list|<
name|Value
argument_list|>
name|fieldParser
parameter_list|,
name|String
name|currentFieldName
parameter_list|,
name|Value
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
operator|:
literal|"Token was: "
operator|+
name|parser
operator|.
name|currentToken
argument_list|()
assert|;
name|parseValue
argument_list|(
name|parser
argument_list|,
name|fieldParser
argument_list|,
name|currentFieldName
argument_list|,
name|value
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|parseValue
specifier|private
name|void
name|parseValue
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|FieldParser
argument_list|<
name|Value
argument_list|>
name|fieldParser
parameter_list|,
name|String
name|currentFieldName
parameter_list|,
name|Value
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fieldParser
operator|.
name|parser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|value
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
operator|new
name|Index
argument_list|(
literal|"_na_"
argument_list|)
argument_list|,
name|parser
argument_list|,
literal|"["
operator|+
name|name
operator|+
literal|"] failed to parse field ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|parseSub
specifier|private
name|void
name|parseSub
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|FieldParser
argument_list|<
name|Value
argument_list|>
name|fieldParser
parameter_list|,
name|String
name|currentFieldName
parameter_list|,
name|Value
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|token
condition|)
block|{
case|case
name|START_OBJECT
case|:
name|parseValue
argument_list|(
name|parser
argument_list|,
name|fieldParser
argument_list|,
name|currentFieldName
argument_list|,
name|value
argument_list|,
name|context
argument_list|)
expr_stmt|;
break|break;
case|case
name|START_ARRAY
case|:
name|parseArray
argument_list|(
name|parser
argument_list|,
name|fieldParser
argument_list|,
name|currentFieldName
argument_list|,
name|value
argument_list|,
name|context
argument_list|)
expr_stmt|;
break|break;
case|case
name|END_OBJECT
case|:
case|case
name|END_ARRAY
case|:
case|case
name|FIELD_NAME
case|:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"["
operator|+
name|name
operator|+
literal|"]"
operator|+
name|token
operator|+
literal|" is unexpected"
argument_list|)
throw|;
case|case
name|VALUE_STRING
case|:
case|case
name|VALUE_NUMBER
case|:
case|case
name|VALUE_BOOLEAN
case|:
case|case
name|VALUE_EMBEDDED_OBJECT
case|:
case|case
name|VALUE_NULL
case|:
name|parseValue
argument_list|(
name|parser
argument_list|,
name|fieldParser
argument_list|,
name|currentFieldName
argument_list|,
name|value
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getParser
specifier|protected
name|FieldParser
name|getParser
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|FieldParser
argument_list|<
name|Value
argument_list|>
name|parser
init|=
name|fieldParserMap
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|name
operator|+
literal|"] unknown field ["
operator|+
name|fieldName
operator|+
literal|"], parser not found"
argument_list|)
throw|;
block|}
return|return
name|parser
return|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|Value
name|apply
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
if|if
condition|(
name|valueSupplier
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"valueSupplier is not set"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|parse
argument_list|(
name|parser
argument_list|,
name|valueSupplier
operator|.
name|get
argument_list|()
argument_list|,
name|context
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
operator|new
name|Index
argument_list|(
literal|"_na_"
argument_list|)
argument_list|,
name|parser
argument_list|,
literal|"["
operator|+
name|name
operator|+
literal|"] failed to parse object"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|interface|Parser
specifier|public
interface|interface
name|Parser
parameter_list|<
name|Value
parameter_list|,
name|Context
parameter_list|>
block|{
DECL|method|parse
name|void
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|Value
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|interface|IOSupplier
specifier|private
interface|interface
name|IOSupplier
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|get
name|T
name|get
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
DECL|field|fieldParserMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FieldParser
argument_list|>
name|fieldParserMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|declareField
specifier|public
name|void
name|declareField
parameter_list|(
name|Parser
argument_list|<
name|Value
argument_list|,
name|Context
argument_list|>
name|p
parameter_list|,
name|ParseField
name|parseField
parameter_list|,
name|ValueType
name|type
parameter_list|)
block|{
name|FieldParser
name|fieldParser
init|=
operator|new
name|FieldParser
argument_list|(
name|p
argument_list|,
name|type
operator|.
name|supportedTokens
argument_list|()
argument_list|,
name|parseField
argument_list|,
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fieldValue
range|:
name|parseField
operator|.
name|getAllNamesIncludedDeprecated
argument_list|()
control|)
block|{
name|fieldParserMap
operator|.
name|putIfAbsent
argument_list|(
name|fieldValue
argument_list|,
name|fieldParser
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|declareStringArray
specifier|public
name|void
name|declareStringArray
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|parseArray
argument_list|(
name|p
argument_list|,
name|p
operator|::
name|text
argument_list|)
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|STRING_ARRAY
argument_list|)
expr_stmt|;
block|}
DECL|method|declareDoubleArray
specifier|public
name|void
name|declareDoubleArray
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|List
argument_list|<
name|Double
argument_list|>
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|parseArray
argument_list|(
name|p
argument_list|,
name|p
operator|::
name|doubleValue
argument_list|)
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|DOUBLE_ARRAY
argument_list|)
expr_stmt|;
block|}
DECL|method|declareFloatArray
specifier|public
name|void
name|declareFloatArray
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|List
argument_list|<
name|Float
argument_list|>
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|parseArray
argument_list|(
name|p
argument_list|,
name|p
operator|::
name|floatValue
argument_list|)
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|FLOAT_ARRAY
argument_list|)
expr_stmt|;
block|}
DECL|method|declareLongArray
specifier|public
name|void
name|declareLongArray
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|parseArray
argument_list|(
name|p
argument_list|,
name|p
operator|::
name|longValue
argument_list|)
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|LONG_ARRAY
argument_list|)
expr_stmt|;
block|}
DECL|method|declareIntArray
specifier|public
name|void
name|declareIntArray
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|parseArray
argument_list|(
name|p
argument_list|,
name|p
operator|::
name|intValue
argument_list|)
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|INT_ARRAY
argument_list|)
expr_stmt|;
block|}
DECL|method|parseArray
specifier|private
specifier|final
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|parseArray
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|IOSupplier
argument_list|<
name|T
argument_list|>
name|supplier
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|supplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|method|declareObject
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|declareObject
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|T
argument_list|>
name|consumer
parameter_list|,
name|BiFunction
argument_list|<
name|XContentParser
argument_list|,
name|Context
argument_list|,
name|T
argument_list|>
name|objectParser
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|objectParser
operator|.
name|apply
argument_list|(
name|p
argument_list|,
name|c
argument_list|)
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|OBJECT
argument_list|)
expr_stmt|;
block|}
DECL|method|declareFloat
specifier|public
name|void
name|declareFloat
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|Float
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|p
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
DECL|method|declareDouble
specifier|public
name|void
name|declareDouble
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|Double
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|p
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
DECL|method|declareLong
specifier|public
name|void
name|declareLong
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|Long
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|p
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
DECL|method|declareInt
specifier|public
name|void
name|declareInt
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|Integer
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|p
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
DECL|method|declareString
specifier|public
name|void
name|declareString
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|String
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|p
operator|.
name|text
argument_list|()
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
DECL|method|declareStringOrNull
specifier|public
name|void
name|declareStringOrNull
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|String
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|p
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|?
literal|null
else|:
name|p
operator|.
name|text
argument_list|()
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|STRING_OR_NULL
argument_list|)
expr_stmt|;
block|}
DECL|method|declareBoolean
specifier|public
name|void
name|declareBoolean
parameter_list|(
name|BiConsumer
argument_list|<
name|Value
argument_list|,
name|Boolean
argument_list|>
name|consumer
parameter_list|,
name|ParseField
name|field
parameter_list|)
block|{
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|v
argument_list|,
name|p
operator|.
name|booleanValue
argument_list|()
argument_list|)
argument_list|,
name|field
argument_list|,
name|ValueType
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
block|}
DECL|class|FieldParser
specifier|public
specifier|static
class|class
name|FieldParser
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|parser
specifier|private
specifier|final
name|Parser
name|parser
decl_stmt|;
DECL|field|supportedTokens
specifier|private
specifier|final
name|EnumSet
argument_list|<
name|XContentParser
operator|.
name|Token
argument_list|>
name|supportedTokens
decl_stmt|;
DECL|field|parseField
specifier|private
specifier|final
name|ParseField
name|parseField
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|ValueType
name|type
decl_stmt|;
DECL|method|FieldParser
specifier|public
name|FieldParser
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|EnumSet
argument_list|<
name|XContentParser
operator|.
name|Token
argument_list|>
name|supportedTokens
parameter_list|,
name|ParseField
name|parseField
parameter_list|,
name|ValueType
name|type
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|this
operator|.
name|supportedTokens
operator|=
name|supportedTokens
expr_stmt|;
name|this
operator|.
name|parseField
operator|=
name|parseField
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|assertSupports
specifier|public
name|void
name|assertSupports
parameter_list|(
name|String
name|parserName
parameter_list|,
name|XContentParser
operator|.
name|Token
name|token
parameter_list|,
name|String
name|currentFieldName
parameter_list|,
name|ParseFieldMatcher
name|matcher
parameter_list|)
block|{
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|parseField
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"["
operator|+
name|parserName
operator|+
literal|"] parsefield doesn't accept: "
operator|+
name|currentFieldName
argument_list|)
throw|;
block|}
if|if
condition|(
name|supportedTokens
operator|.
name|contains
argument_list|(
name|token
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|parserName
operator|+
literal|"] "
operator|+
name|currentFieldName
operator|+
literal|" doesn't support values of type: "
operator|+
name|token
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
index|[]
name|deprecatedNames
init|=
name|parseField
operator|.
name|getDeprecatedNames
argument_list|()
decl_stmt|;
name|String
name|allReplacedWith
init|=
name|parseField
operator|.
name|getAllReplacedWith
argument_list|()
decl_stmt|;
return|return
literal|"FieldParser{"
operator|+
literal|"preferred_name="
operator|+
name|parseField
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|", supportedTokens="
operator|+
name|supportedTokens
operator|+
operator|(
name|deprecatedNames
operator|==
literal|null
operator|||
name|deprecatedNames
operator|.
name|length
operator|==
literal|0
condition|?
literal|""
else|:
literal|", deprecated_names="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|deprecatedNames
argument_list|)
operator|)
operator|+
operator|(
name|allReplacedWith
operator|==
literal|null
condition|?
literal|""
else|:
literal|", replaced_with="
operator|+
name|allReplacedWith
operator|)
operator|+
literal|", type="
operator|+
name|type
operator|.
name|name
argument_list|()
operator|+
literal|'}'
return|;
block|}
block|}
DECL|enum|ValueType
specifier|public
enum|enum
name|ValueType
block|{
DECL|enum constant|STRING
DECL|enum constant|EnumSet.of
name|STRING
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|)
argument_list|)
block|,
DECL|enum constant|STRING_OR_NULL
DECL|enum constant|EnumSet.of
name|STRING_OR_NULL
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|,
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
argument_list|)
argument_list|)
block|,
DECL|enum constant|FLOAT
DECL|enum constant|EnumSet.of
name|FLOAT
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|)
argument_list|)
block|,
DECL|enum constant|DOUBLE
DECL|enum constant|EnumSet.of
name|DOUBLE
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|)
argument_list|)
block|,
DECL|enum constant|LONG
DECL|enum constant|EnumSet.of
name|LONG
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|)
argument_list|)
block|,
DECL|enum constant|INT
DECL|enum constant|EnumSet.of
name|INT
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|)
argument_list|)
block|,
DECL|enum constant|BOOLEAN
DECL|enum constant|EnumSet.of
DECL|enum constant|STRING_ARRAY
DECL|enum constant|EnumSet.of
name|BOOLEAN
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_BOOLEAN
argument_list|)
argument_list|)
block|,
name|STRING_ARRAY
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|)
argument_list|)
block|,
DECL|enum constant|FLOAT_ARRAY
DECL|enum constant|EnumSet.of
name|FLOAT_ARRAY
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|)
argument_list|)
block|,
DECL|enum constant|DOUBLE_ARRAY
DECL|enum constant|EnumSet.of
name|DOUBLE_ARRAY
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|)
argument_list|)
block|,
DECL|enum constant|LONG_ARRAY
DECL|enum constant|EnumSet.of
name|LONG_ARRAY
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|)
argument_list|)
block|,
DECL|enum constant|INT_ARRAY
DECL|enum constant|EnumSet.of
name|INT_ARRAY
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|)
argument_list|)
block|,
DECL|enum constant|BOOLEAN_ARRAY
DECL|enum constant|EnumSet.of
name|BOOLEAN_ARRAY
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|)
argument_list|)
block|,
DECL|enum constant|OBJECT
DECL|enum constant|EnumSet.of
name|OBJECT
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|)
argument_list|)
block|;
DECL|field|tokens
specifier|private
specifier|final
name|EnumSet
argument_list|<
name|XContentParser
operator|.
name|Token
argument_list|>
name|tokens
decl_stmt|;
DECL|method|ValueType
name|ValueType
parameter_list|(
name|EnumSet
argument_list|<
name|XContentParser
operator|.
name|Token
argument_list|>
name|tokens
parameter_list|)
block|{
name|this
operator|.
name|tokens
operator|=
name|tokens
expr_stmt|;
block|}
DECL|method|supportedTokens
specifier|public
name|EnumSet
argument_list|<
name|XContentParser
operator|.
name|Token
argument_list|>
name|supportedTokens
parameter_list|()
block|{
return|return
name|this
operator|.
name|tokens
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ObjectParser{"
operator|+
literal|"name='"
operator|+
name|name
operator|+
literal|'\''
operator|+
literal|", fields="
operator|+
name|fieldParserMap
operator|.
name|values
argument_list|()
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

