begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|BytesStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|ReadableInstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|ISODateTimeFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Flushable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A utility to build XContent (ie json).  */
end_comment

begin_class
DECL|class|XContentBuilder
specifier|public
specifier|final
class|class
name|XContentBuilder
implements|implements
name|BytesStream
implements|,
name|Releasable
implements|,
name|Flushable
block|{
comment|/**      * Create a new {@link XContentBuilder} using the given {@link XContent} content.      *<p>      * The builder uses an internal {@link BytesStreamOutput} output stream to build the content.      *</p>      *      * @param xContent the {@link XContent}      * @return a new {@link XContentBuilder}      * @throws IOException if an {@link IOException} occurs while building the content      */
DECL|method|builder
specifier|public
specifier|static
name|XContentBuilder
name|builder
parameter_list|(
name|XContent
name|xContent
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|XContentBuilder
argument_list|(
name|xContent
argument_list|,
operator|new
name|BytesStreamOutput
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Create a new {@link XContentBuilder} using the given {@link XContent} content and some inclusive and/or exclusive filters.      *<p>      * The builder uses an internal {@link BytesStreamOutput} output stream to build the content. When both exclusive and      * inclusive filters are provided, the underlying builder will first use exclusion filters to remove fields and then will check the      * remaining fields against the inclusive filters.      *<p>      *      * @param xContent the {@link XContent}      * @param includes the inclusive filters: only fields and objects that match the inclusive filters will be written to the output.      * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output.      * @throws IOException if an {@link IOException} occurs while building the content      */
DECL|method|builder
specifier|public
specifier|static
name|XContentBuilder
name|builder
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|XContentBuilder
argument_list|(
name|xContent
argument_list|,
operator|new
name|BytesStreamOutput
argument_list|()
argument_list|,
name|includes
argument_list|,
name|excludes
argument_list|)
return|;
block|}
DECL|field|DEFAULT_DATE_PRINTER
specifier|public
specifier|static
specifier|final
name|DateTimeFormatter
name|DEFAULT_DATE_PRINTER
init|=
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
operator|.
name|withZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
DECL|field|WRITERS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Writer
argument_list|>
name|WRITERS
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Writer
argument_list|>
name|writers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|Boolean
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|Byte
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|BytesRef
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|binaryValue
argument_list|(
operator|(
name|BytesRef
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|Date
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|Date
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|Double
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|Double
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|double
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|values
argument_list|(
operator|(
name|double
index|[]
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|Float
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|Float
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|float
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|values
argument_list|(
operator|(
name|float
index|[]
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|GeoPoint
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|GeoPoint
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|Integer
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|values
argument_list|(
operator|(
name|int
index|[]
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|Long
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|Long
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|long
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|values
argument_list|(
operator|(
name|long
index|[]
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|Short
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|Short
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|short
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|values
argument_list|(
operator|(
name|short
index|[]
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|String
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|values
argument_list|(
operator|(
name|String
index|[]
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|Text
operator|.
name|class
argument_list|,
parameter_list|(
name|b
parameter_list|,
name|v
parameter_list|)
lambda|->
name|b
operator|.
name|value
argument_list|(
operator|(
name|Text
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|WRITERS
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|writers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|Writer
specifier|private
interface|interface
name|Writer
block|{
DECL|method|write
name|void
name|write
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**      * XContentGenerator used to build the XContent object      */
DECL|field|generator
specifier|private
specifier|final
name|XContentGenerator
name|generator
decl_stmt|;
comment|/**      * Output stream to which the built object is written      */
DECL|field|bos
specifier|private
specifier|final
name|OutputStream
name|bos
decl_stmt|;
comment|/**      * When this flag is set to true, some types of values are written in a format easier to read for a human.      */
DECL|field|humanReadable
specifier|private
name|boolean
name|humanReadable
init|=
literal|false
decl_stmt|;
comment|/**      * Constructs a new builder using the provided XContent and an OutputStream. Make sure      * to call {@link #close()} when the builder is done with.      */
DECL|method|XContentBuilder
specifier|public
name|XContentBuilder
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|OutputStream
name|bos
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|xContent
argument_list|,
name|bos
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new builder using the provided XContent, an OutputStream and      * some filters. If filters are specified, only those values matching a      * filter will be written to the output stream. Make sure to call      * {@link #close()} when the builder is done with.      */
DECL|method|XContentBuilder
specifier|public
name|XContentBuilder
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|OutputStream
name|bos
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|xContent
argument_list|,
name|bos
argument_list|,
name|includes
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new builder using the provided XContent, output stream and some inclusive and/or exclusive filters. When both exclusive and      * inclusive filters are provided, the underlying builder will first use exclusion filters to remove fields and then will check the      * remaining fields against the inclusive filters.      *<p>      * Make sure to call {@link #close()} when the builder is done with.      *      * @param os       the output stream      * @param includes the inclusive filters: only fields and objects that match the inclusive filters will be written to the output.      * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output.      */
DECL|method|XContentBuilder
specifier|public
name|XContentBuilder
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|bos
operator|=
name|os
expr_stmt|;
name|this
operator|.
name|generator
operator|=
name|xContent
operator|.
name|createGenerator
argument_list|(
name|bos
argument_list|,
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
block|}
DECL|method|contentType
specifier|public
name|XContentType
name|contentType
parameter_list|()
block|{
return|return
name|generator
operator|.
name|contentType
argument_list|()
return|;
block|}
DECL|method|prettyPrint
specifier|public
name|XContentBuilder
name|prettyPrint
parameter_list|()
block|{
name|generator
operator|.
name|usePrettyPrint
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isPrettyPrint
specifier|public
name|boolean
name|isPrettyPrint
parameter_list|()
block|{
return|return
name|generator
operator|.
name|isPrettyPrint
argument_list|()
return|;
block|}
comment|/**      * Indicate that the current {@link XContentBuilder} must write a line feed ("\n")      * at the end of the built object.      *<p>      * This only applies for JSON XContent type. It has no effect for other types.      */
DECL|method|lfAtEnd
specifier|public
name|XContentBuilder
name|lfAtEnd
parameter_list|()
block|{
name|generator
operator|.
name|usePrintLineFeedAtEnd
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the "human readable" flag. Once set, some types of values are written in a      * format easier to read for a human.      */
DECL|method|humanReadable
specifier|public
name|XContentBuilder
name|humanReadable
parameter_list|(
name|boolean
name|humanReadable
parameter_list|)
block|{
name|this
operator|.
name|humanReadable
operator|=
name|humanReadable
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @return the value of the "human readable" flag. When the value is equal to true,      * some types of values are written in a format easier to read for a human.      */
DECL|method|humanReadable
specifier|public
name|boolean
name|humanReadable
parameter_list|()
block|{
return|return
name|this
operator|.
name|humanReadable
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Structure (object, array, field, null values...)
comment|//////////////////////////////////
DECL|method|startObject
specifier|public
name|XContentBuilder
name|startObject
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startObject
specifier|public
name|XContentBuilder
name|startObject
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|startObject
argument_list|()
return|;
block|}
DECL|method|endObject
specifier|public
name|XContentBuilder
name|endObject
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startArray
specifier|public
name|XContentBuilder
name|startArray
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startArray
specifier|public
name|XContentBuilder
name|startArray
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|startArray
argument_list|()
return|;
block|}
DECL|method|endArray
specifier|public
name|XContentBuilder
name|endArray
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureNameNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|nullField
specifier|public
name|XContentBuilder
name|nullField
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureNameNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNullField
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|nullValue
specifier|public
name|XContentBuilder
name|nullValue
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Boolean
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Boolean
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullField
argument_list|(
name|name
argument_list|)
else|:
name|field
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|booleanValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureNameNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|values
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|values
specifier|private
name|XContentBuilder
name|values
parameter_list|(
name|boolean
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|boolean
name|b
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Boolean
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullValue
argument_list|()
else|:
name|value
argument_list|(
name|value
operator|.
name|booleanValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|boolean
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Byte
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Byte
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullField
argument_list|(
name|name
argument_list|)
else|:
name|field
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|byteValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Byte
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullValue
argument_list|()
else|:
name|value
argument_list|(
name|value
operator|.
name|byteValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|byte
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Double
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullField
argument_list|(
name|name
argument_list|)
else|:
name|field
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureNameNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumberField
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|String
name|name
parameter_list|,
name|double
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|values
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|values
specifier|private
name|XContentBuilder
name|values
parameter_list|(
name|double
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|double
name|b
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullValue
argument_list|()
else|:
name|value
argument_list|(
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Float
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullField
argument_list|(
name|name
argument_list|)
else|:
name|field
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureNameNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumberField
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|String
name|name
parameter_list|,
name|float
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|values
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|values
specifier|private
name|XContentBuilder
name|values
parameter_list|(
name|float
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|float
name|f
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullValue
argument_list|()
else|:
name|value
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Integer
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Integer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullField
argument_list|(
name|name
argument_list|)
else|:
name|field
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureNameNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumberField
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|String
name|name
parameter_list|,
name|int
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|values
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|values
specifier|private
name|XContentBuilder
name|values
parameter_list|(
name|int
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Integer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullValue
argument_list|()
else|:
name|value
argument_list|(
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Long
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullField
argument_list|(
name|name
argument_list|)
else|:
name|field
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureNameNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumberField
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|String
name|name
parameter_list|,
name|long
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|values
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|values
specifier|private
name|XContentBuilder
name|values
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|l
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullValue
argument_list|()
else|:
name|value
argument_list|(
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Short
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Short
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullField
argument_list|(
name|name
argument_list|)
else|:
name|field
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|shortValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|short
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|String
name|name
parameter_list|,
name|short
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|values
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|values
specifier|private
name|XContentBuilder
name|values
parameter_list|(
name|short
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|short
name|s
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Short
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullValue
argument_list|()
else|:
name|value
argument_list|(
name|value
operator|.
name|shortValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|short
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// String
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullField
argument_list|(
name|name
argument_list|)
return|;
block|}
name|ensureNameNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|values
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|values
specifier|private
name|XContentBuilder
name|values
parameter_list|(
name|String
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|generator
operator|.
name|writeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Binary
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullField
argument_list|(
name|name
argument_list|)
return|;
block|}
name|ensureNameNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBinaryField
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Writes the binary content of the given {@link BytesRef}.      *      * Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back      */
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|binaryValue
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Writes the binary content of the given {@link BytesRef} as UTF-8 bytes.      *      * Use {@link XContentParser#utf8Bytes()} to read the value back      */
DECL|method|utf8Field
specifier|public
name|XContentBuilder
name|utf8Field
parameter_list|(
name|String
name|name
parameter_list|,
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|utf8Value
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Writes the binary content of the given {@link BytesRef}.      *      * Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back      */
DECL|method|binaryValue
specifier|public
name|XContentBuilder
name|binaryValue
parameter_list|(
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|value
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Writes the binary content of the given {@link BytesRef} as UTF-8 bytes.      *      * Use {@link XContentParser#utf8Bytes()} to read the value back      */
DECL|method|utf8Value
specifier|public
name|XContentBuilder
name|utf8Value
parameter_list|(
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|generator
operator|.
name|writeUTF8String
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Writes the binary content of the given {@link BytesReference}.      *      * Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back      */
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|BytesReference
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Writes the binary content of the given {@link BytesReference}.      *      * Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back      */
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|BytesReference
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|nullValue
argument_list|()
else|:
name|binaryValue
argument_list|(
name|value
operator|.
name|toBytesRef
argument_list|()
argument_list|)
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Text
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|hasString
argument_list|()
condition|)
block|{
return|return
name|value
argument_list|(
name|value
operator|.
name|string
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// TODO: TextBytesOptimization we can use a buffer here to convert it? maybe add a
comment|// request to jackson to support InputStream as well?
return|return
name|utf8Value
argument_list|(
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesRef
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Date
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|ReadableInstant
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|ReadableInstant
name|value
parameter_list|,
name|DateTimeFormatter
name|formatter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|,
name|formatter
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|ReadableInstant
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|value
argument_list|(
name|value
argument_list|,
name|DEFAULT_DATE_PRINTER
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|ReadableInstant
name|value
parameter_list|,
name|DateTimeFormatter
name|formatter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|ensureFormatterNotNull
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|formatter
operator|.
name|print
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Date
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Date
name|value
parameter_list|,
name|DateTimeFormatter
name|formatter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|,
name|formatter
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Date
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|value
argument_list|(
name|value
argument_list|,
name|DEFAULT_DATE_PRINTER
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Date
name|value
parameter_list|,
name|DateTimeFormatter
name|formatter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
return|return
name|value
argument_list|(
name|formatter
argument_list|,
name|value
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|dateField
specifier|public
name|XContentBuilder
name|dateField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|readableName
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableName
argument_list|)
operator|.
name|value
argument_list|(
name|DEFAULT_DATE_PRINTER
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
name|XContentBuilder
name|value
parameter_list|(
name|Calendar
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
return|return
name|value
argument_list|(
name|DEFAULT_DATE_PRINTER
argument_list|,
name|value
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
name|XContentBuilder
name|value
parameter_list|(
name|DateTimeFormatter
name|formatter
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureFormatterNotNull
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|formatter
operator|.
name|print
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// GeoPoint& LatLon
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|GeoPoint
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|GeoPoint
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
return|return
name|latlon
argument_list|(
name|value
operator|.
name|getLat
argument_list|()
argument_list|,
name|value
operator|.
name|getLon
argument_list|()
argument_list|)
return|;
block|}
DECL|method|latlon
specifier|public
name|XContentBuilder
name|latlon
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|latlon
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
DECL|method|latlon
specifier|public
name|XContentBuilder
name|latlon
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|lat
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|lon
argument_list|)
operator|.
name|endObject
argument_list|()
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Path
comment|//////////////////////////////////
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Path
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
return|return
name|value
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Objects
comment|//
comment|// These methods are used when the type of value is unknown. It tries to fallback
comment|// on typed methods and use Object.toString() as a last resort. Always prefer using
comment|// typed methods over this.
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|values
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|values
name|XContentBuilder
name|values
parameter_list|(
name|Object
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|unknownValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unknownValue
specifier|private
name|void
name|unknownValue
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|nullValue
argument_list|()
expr_stmt|;
return|return;
block|}
name|Writer
name|writer
init|=
name|WRITERS
operator|.
name|get
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Path
condition|)
block|{
comment|//Path implements Iterable<Path> and causes endless recursion and a StackOverFlow if treated as an Iterable here
name|value
argument_list|(
operator|(
name|Path
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
name|map
argument_list|(
operator|(
name|Map
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Iterable
condition|)
block|{
name|value
argument_list|(
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|values
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Calendar
condition|)
block|{
name|value
argument_list|(
operator|(
name|Calendar
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ReadableInstant
condition|)
block|{
name|value
argument_list|(
operator|(
name|ReadableInstant
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|BytesReference
condition|)
block|{
name|value
argument_list|(
operator|(
name|BytesReference
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ToXContent
condition|)
block|{
name|value
argument_list|(
operator|(
name|ToXContent
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This is a "value" object (like enum, DistanceUnit, etc) just toString() it
comment|// (yes, it can be misleading when toString a Java class, but really, jackson should be used in that case)
name|value
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// ToXContent
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|ToXContent
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|ToXContent
name|value
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|value
argument_list|,
name|params
argument_list|)
return|;
block|}
DECL|method|value
specifier|private
name|XContentBuilder
name|value
parameter_list|(
name|ToXContent
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|value
argument_list|(
name|value
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
return|;
block|}
DECL|method|value
specifier|private
name|XContentBuilder
name|value
parameter_list|(
name|ToXContent
name|value
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|value
operator|.
name|toXContent
argument_list|(
name|this
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Maps& Iterable
comment|//////////////////////////////////
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|map
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|map
specifier|public
name|XContentBuilder
name|map
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|startObject
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|value
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|field
argument_list|(
name|value
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|unknownValue
argument_list|(
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|endObject
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|value
specifier|private
name|XContentBuilder
name|value
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
if|if
condition|(
name|values
operator|instanceof
name|Path
condition|)
block|{
comment|//treat as single value
name|value
argument_list|(
operator|(
name|Path
operator|)
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|unknownValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Misc.
comment|//////////////////////////////////
DECL|method|timeValueField
specifier|public
name|XContentBuilder
name|timeValueField
parameter_list|(
name|String
name|rawFieldName
parameter_list|,
name|String
name|readableFieldName
parameter_list|,
name|TimeValue
name|timeValue
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
name|timeValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|timeValue
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|timeValueField
specifier|public
name|XContentBuilder
name|timeValueField
parameter_list|(
name|String
name|rawFieldName
parameter_list|,
name|String
name|readableFieldName
parameter_list|,
name|long
name|rawTime
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|rawTime
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|rawTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|timeValueField
specifier|public
name|XContentBuilder
name|timeValueField
parameter_list|(
name|String
name|rawFieldName
parameter_list|,
name|String
name|readableFieldName
parameter_list|,
name|long
name|rawTime
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|rawTime
argument_list|,
name|timeUnit
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|rawTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|percentageField
specifier|public
name|XContentBuilder
name|percentageField
parameter_list|(
name|String
name|rawFieldName
parameter_list|,
name|String
name|readableFieldName
parameter_list|,
name|double
name|percentage
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%1.1f%%"
argument_list|,
name|percentage
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|percentage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|byteSizeField
specifier|public
name|XContentBuilder
name|byteSizeField
parameter_list|(
name|String
name|rawFieldName
parameter_list|,
name|String
name|readableFieldName
parameter_list|,
name|ByteSizeValue
name|byteSizeValue
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
name|byteSizeValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|byteSizeValue
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|byteSizeField
specifier|public
name|XContentBuilder
name|byteSizeField
parameter_list|(
name|String
name|rawFieldName
parameter_list|,
name|String
name|readableFieldName
parameter_list|,
name|long
name|rawSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|rawSize
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|rawSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// Raw fields
comment|//////////////////////////////////
DECL|method|rawField
specifier|public
name|XContentBuilder
name|rawField
parameter_list|(
name|String
name|name
parameter_list|,
name|InputStream
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeRawField
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|rawField
specifier|public
name|XContentBuilder
name|rawField
parameter_list|(
name|String
name|name
parameter_list|,
name|BytesReference
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeRawField
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|rawValue
specifier|public
name|XContentBuilder
name|rawValue
parameter_list|(
name|BytesReference
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeRawValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|copyCurrentStructure
specifier|public
name|XContentBuilder
name|copyCurrentStructure
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to close the XContentBuilder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|generator
specifier|public
name|XContentGenerator
name|generator
parameter_list|()
block|{
return|return
name|this
operator|.
name|generator
return|;
block|}
annotation|@
name|Override
DECL|method|bytes
specifier|public
name|BytesReference
name|bytes
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
return|return
operator|(
operator|(
name|BytesStream
operator|)
name|bos
operator|)
operator|.
name|bytes
argument_list|()
return|;
block|}
comment|/**      * Returns a string representation of the builder (only applicable for text based xcontent).      */
DECL|method|string
specifier|public
name|String
name|string
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|bytes
argument_list|()
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
DECL|method|ensureNameNotNull
specifier|static
name|void
name|ensureNameNotNull
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ensureNotNull
argument_list|(
name|name
argument_list|,
literal|"Field name cannot be null"
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureFormatterNotNull
specifier|static
name|void
name|ensureFormatterNotNull
parameter_list|(
name|DateTimeFormatter
name|formatter
parameter_list|)
block|{
name|ensureNotNull
argument_list|(
name|formatter
argument_list|,
literal|"DateTimeFormatter cannot be null"
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureNotNull
specifier|static
name|void
name|ensureNotNull
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

