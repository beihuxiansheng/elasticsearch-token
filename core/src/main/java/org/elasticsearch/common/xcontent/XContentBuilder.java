begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|BytesStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|ReadableInstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|ISODateTimeFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|XContentBuilder
specifier|public
specifier|final
class|class
name|XContentBuilder
implements|implements
name|BytesStream
implements|,
name|Releasable
block|{
DECL|enum|FieldCaseConversion
specifier|public
enum|enum
name|FieldCaseConversion
block|{
comment|/**          * No conversion will occur.          */
DECL|enum constant|NONE
name|NONE
block|,
comment|/**          * Camel Case will be converted to Underscore casing.          */
DECL|enum constant|UNDERSCORE
name|UNDERSCORE
block|,
comment|/**          * Underscore will be converted to Camel case.          */
DECL|enum constant|CAMELCASE
name|CAMELCASE
block|}
DECL|field|defaultDatePrinter
specifier|public
specifier|final
specifier|static
name|DateTimeFormatter
name|defaultDatePrinter
init|=
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
operator|.
name|withZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
DECL|field|globalFieldCaseConversion
specifier|protected
specifier|static
name|FieldCaseConversion
name|globalFieldCaseConversion
init|=
name|FieldCaseConversion
operator|.
name|NONE
decl_stmt|;
DECL|method|globalFieldCaseConversion
specifier|public
specifier|static
name|void
name|globalFieldCaseConversion
parameter_list|(
name|FieldCaseConversion
name|globalFieldCaseConversion
parameter_list|)
block|{
name|XContentBuilder
operator|.
name|globalFieldCaseConversion
operator|=
name|globalFieldCaseConversion
expr_stmt|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|XContentBuilder
name|builder
parameter_list|(
name|XContent
name|xContent
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|XContentBuilder
argument_list|(
name|xContent
argument_list|,
operator|new
name|BytesStreamOutput
argument_list|()
argument_list|)
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|XContentBuilder
name|builder
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|String
index|[]
name|filters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|XContentBuilder
argument_list|(
name|xContent
argument_list|,
operator|new
name|BytesStreamOutput
argument_list|()
argument_list|,
name|filters
argument_list|)
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|XContentBuilder
name|builder
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|String
index|[]
name|filters
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|XContentBuilder
argument_list|(
name|xContent
argument_list|,
operator|new
name|BytesStreamOutput
argument_list|()
argument_list|,
name|filters
argument_list|,
name|inclusive
argument_list|)
return|;
block|}
DECL|field|generator
specifier|private
name|XContentGenerator
name|generator
decl_stmt|;
DECL|field|bos
specifier|private
specifier|final
name|OutputStream
name|bos
decl_stmt|;
DECL|field|fieldCaseConversion
specifier|private
name|FieldCaseConversion
name|fieldCaseConversion
init|=
name|globalFieldCaseConversion
decl_stmt|;
DECL|field|cachedStringBuilder
specifier|private
name|StringBuilder
name|cachedStringBuilder
decl_stmt|;
DECL|field|humanReadable
specifier|private
name|boolean
name|humanReadable
init|=
literal|false
decl_stmt|;
comment|/**      * Constructs a new builder using the provided xcontent and an OutputStream. Make sure      * to call {@link #close()} when the builder is done with.      */
DECL|method|XContentBuilder
specifier|public
name|XContentBuilder
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|OutputStream
name|bos
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|xContent
argument_list|,
name|bos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new builder using the provided xcontent, an OutputStream and      * some filters. If filters are specified, only those values matching a      * filter will be written to the output stream. Make sure to call      * {@link #close()} when the builder is done with.      */
DECL|method|XContentBuilder
specifier|public
name|XContentBuilder
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|OutputStream
name|bos
parameter_list|,
name|String
index|[]
name|filters
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|xContent
argument_list|,
name|bos
argument_list|,
name|filters
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new builder using the provided xcontent, an OutputStream and      * some filters. If {@code filters} are specified and {@code inclusive} is      * true, only those values matching a filter will be written to the output      * stream. If {@code inclusive} is false, those matching will be excluded.      * Make sure to call {@link #close()} when the builder is done with.      */
DECL|method|XContentBuilder
specifier|public
name|XContentBuilder
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|OutputStream
name|bos
parameter_list|,
name|String
index|[]
name|filters
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|bos
operator|=
name|bos
expr_stmt|;
name|this
operator|.
name|generator
operator|=
name|xContent
operator|.
name|createGenerator
argument_list|(
name|bos
argument_list|,
name|filters
argument_list|,
name|inclusive
argument_list|)
expr_stmt|;
block|}
DECL|method|fieldCaseConversion
specifier|public
name|XContentBuilder
name|fieldCaseConversion
parameter_list|(
name|FieldCaseConversion
name|fieldCaseConversion
parameter_list|)
block|{
name|this
operator|.
name|fieldCaseConversion
operator|=
name|fieldCaseConversion
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|contentType
specifier|public
name|XContentType
name|contentType
parameter_list|()
block|{
return|return
name|generator
operator|.
name|contentType
argument_list|()
return|;
block|}
DECL|method|prettyPrint
specifier|public
name|XContentBuilder
name|prettyPrint
parameter_list|()
block|{
name|generator
operator|.
name|usePrettyPrint
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|lfAtEnd
specifier|public
name|XContentBuilder
name|lfAtEnd
parameter_list|()
block|{
name|generator
operator|.
name|usePrintLineFeedAtEnd
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|humanReadable
specifier|public
name|XContentBuilder
name|humanReadable
parameter_list|(
name|boolean
name|humanReadable
parameter_list|)
block|{
name|this
operator|.
name|humanReadable
operator|=
name|humanReadable
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|humanReadable
specifier|public
name|boolean
name|humanReadable
parameter_list|()
block|{
return|return
name|this
operator|.
name|humanReadable
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|ToXContent
name|xContent
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|xContent
operator|.
name|toXContent
argument_list|(
name|this
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|ToXContent
name|xContent
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|xContent
operator|.
name|toXContent
argument_list|(
name|this
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startObject
specifier|public
name|XContentBuilder
name|startObject
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|startObject
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startObject
specifier|public
name|XContentBuilder
name|startObject
parameter_list|(
name|String
name|name
parameter_list|,
name|FieldCaseConversion
name|conversion
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|,
name|conversion
argument_list|)
expr_stmt|;
name|startObject
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startObject
specifier|public
name|XContentBuilder
name|startObject
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|startObject
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startObject
specifier|public
name|XContentBuilder
name|startObject
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|FieldCaseConversion
name|conversion
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|,
name|conversion
argument_list|)
expr_stmt|;
name|startObject
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startObject
specifier|public
name|XContentBuilder
name|startObject
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|endObject
specifier|public
name|XContentBuilder
name|endObject
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|array
specifier|public
name|XContentBuilder
name|array
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startArray
specifier|public
name|XContentBuilder
name|startArray
parameter_list|(
name|String
name|name
parameter_list|,
name|FieldCaseConversion
name|conversion
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|,
name|conversion
argument_list|)
expr_stmt|;
name|startArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startArray
specifier|public
name|XContentBuilder
name|startArray
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|startArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startArray
specifier|public
name|XContentBuilder
name|startArray
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|startArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startArray
specifier|public
name|XContentBuilder
name|startArray
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|endArray
specifier|public
name|XContentBuilder
name|endArray
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|,
name|fieldCaseConversion
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|FieldCaseConversion
name|conversion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|conversion
operator|==
name|FieldCaseConversion
operator|.
name|UNDERSCORE
condition|)
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|name
operator|.
name|underscore
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|conversion
operator|==
name|FieldCaseConversion
operator|.
name|CAMELCASE
condition|)
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|name
operator|.
name|camelCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|name
operator|.
name|underscore
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|,
name|fieldCaseConversion
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|FieldCaseConversion
name|conversion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field name cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|conversion
operator|==
name|FieldCaseConversion
operator|.
name|UNDERSCORE
condition|)
block|{
if|if
condition|(
name|cachedStringBuilder
operator|==
literal|null
condition|)
block|{
name|cachedStringBuilder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|name
operator|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|name
argument_list|,
name|cachedStringBuilder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|conversion
operator|==
name|FieldCaseConversion
operator|.
name|CAMELCASE
condition|)
block|{
if|if
condition|(
name|cachedStringBuilder
operator|==
literal|null
condition|)
block|{
name|cachedStringBuilder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|name
operator|=
name|Strings
operator|.
name|toCamelCase
argument_list|(
name|name
argument_list|,
name|cachedStringBuilder
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeFieldName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|char
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|char
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|FieldCaseConversion
name|conversion
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|,
name|conversion
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|FieldCaseConversion
name|conversion
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|,
name|conversion
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Integer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Integer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|BigDecimal
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|value
operator|.
name|scale
argument_list|()
argument_list|,
name|RoundingMode
operator|.
name|HALF_UP
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|BigDecimal
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|field
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|value
operator|.
name|scale
argument_list|()
argument_list|,
name|RoundingMode
operator|.
name|HALF_UP
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|BigDecimal
name|value
parameter_list|,
name|int
name|scale
parameter_list|,
name|RoundingMode
name|rounding
parameter_list|,
name|boolean
name|toDouble
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|toDouble
condition|)
block|{
try|try
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|rounding
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
operator|.
name|toEngineeringString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
operator|.
name|toEngineeringString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|BigDecimal
name|value
parameter_list|,
name|int
name|scale
parameter_list|,
name|RoundingMode
name|rounding
parameter_list|,
name|boolean
name|toDouble
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|toDouble
condition|)
block|{
try|try
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|rounding
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
operator|.
name|toEngineeringString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
operator|.
name|toEngineeringString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * Writes the binary content of the given BytesRef      * Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back      */
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Writes the binary content of the given BytesRef      * Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back      */
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Writes the binary content of the given BytesReference      * Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back      */
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|BytesReference
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|toBytesArray
argument_list|()
expr_stmt|;
block|}
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
operator|.
name|array
argument_list|()
argument_list|,
name|value
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Writes the binary content of the given BytesReference      * Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back      */
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|BytesReference
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|toBytesArray
argument_list|()
expr_stmt|;
block|}
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
operator|.
name|array
argument_list|()
argument_list|,
name|value
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Writes the binary content of the given BytesRef as UTF-8 bytes      * Use {@link XContentParser#utf8Bytes()} to read the value back      */
DECL|method|utf8Field
specifier|public
name|XContentBuilder
name|utf8Field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeUTF8String
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Writes the binary content of the given BytesRef as UTF-8 bytes      * Use {@link XContentParser#utf8Bytes()} to read the value back      */
DECL|method|utf8Field
specifier|public
name|XContentBuilder
name|utf8Field
parameter_list|(
name|String
name|name
parameter_list|,
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeUTF8String
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|hasBytes
argument_list|()
operator|&&
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|generator
operator|.
name|writeUTF8String
argument_list|(
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|value
operator|.
name|hasString
argument_list|()
condition|)
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// TODO: TextBytesOptimization we can use a buffer here to convert it? maybe add a request to jackson to support InputStream as well?
name|BytesArray
name|bytesArray
init|=
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesArray
argument_list|()
decl_stmt|;
name|generator
operator|.
name|writeUTF8String
argument_list|(
name|bytesArray
operator|.
name|array
argument_list|()
argument_list|,
name|bytesArray
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bytesArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|hasBytes
argument_list|()
operator|&&
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|generator
operator|.
name|writeUTF8String
argument_list|(
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|value
operator|.
name|hasString
argument_list|()
condition|)
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// TODO: TextBytesOptimization we can use a buffer here to convert it? maybe add a request to jackson to support InputStream as well?
name|BytesArray
name|bytesArray
init|=
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesArray
argument_list|()
decl_stmt|;
name|generator
operator|.
name|writeUTF8String
argument_list|(
name|bytesArray
operator|.
name|array
argument_list|()
argument_list|,
name|bytesArray
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bytesArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|instanceof
name|Path
condition|)
block|{
comment|//treat Paths as single value
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Iterable
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|instanceof
name|Path
condition|)
block|{
comment|//treat Paths as single value
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|boolean
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|boolean
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|boolean
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|String
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Object
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|int
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|int
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
operator|(
name|offset
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|value
operator|.
name|length
operator|>
name|length
operator|)
operator|)
assert|;
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|value
argument_list|(
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|int
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|long
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|long
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|float
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|float
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|double
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|double
modifier|...
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|startArray
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|writeValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|writeValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writeValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|ReadableInstant
name|date
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|date
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|ReadableInstant
name|date
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|date
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|ReadableInstant
name|date
parameter_list|,
name|DateTimeFormatter
name|formatter
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|date
argument_list|,
name|formatter
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|ReadableInstant
name|date
parameter_list|,
name|DateTimeFormatter
name|formatter
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|date
argument_list|,
name|formatter
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Date
name|date
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|date
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Date
name|date
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|date
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|String
name|name
parameter_list|,
name|Date
name|date
parameter_list|,
name|DateTimeFormatter
name|formatter
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|date
argument_list|,
name|formatter
argument_list|)
return|;
block|}
DECL|method|field
specifier|public
name|XContentBuilder
name|field
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|,
name|Date
name|date
parameter_list|,
name|DateTimeFormatter
name|formatter
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|date
argument_list|,
name|formatter
argument_list|)
return|;
block|}
DECL|method|nullField
specifier|public
name|XContentBuilder
name|nullField
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNullField
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|nullField
specifier|public
name|XContentBuilder
name|nullField
parameter_list|(
name|XContentBuilderString
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|nullValue
specifier|public
name|XContentBuilder
name|nullValue
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|rawField
specifier|public
name|XContentBuilder
name|rawField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|InputStream
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeRawField
argument_list|(
name|fieldName
argument_list|,
name|content
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|rawField
specifier|public
name|XContentBuilder
name|rawField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|BytesReference
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeRawField
argument_list|(
name|fieldName
argument_list|,
name|content
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|rawValue
specifier|public
name|XContentBuilder
name|rawValue
parameter_list|(
name|BytesReference
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeRawValue
argument_list|(
name|content
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|timeValueField
specifier|public
name|XContentBuilder
name|timeValueField
parameter_list|(
name|XContentBuilderString
name|rawFieldName
parameter_list|,
name|XContentBuilderString
name|readableFieldName
parameter_list|,
name|TimeValue
name|timeValue
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
name|timeValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|timeValue
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|timeValueField
specifier|public
name|XContentBuilder
name|timeValueField
parameter_list|(
name|XContentBuilderString
name|rawFieldName
parameter_list|,
name|XContentBuilderString
name|readableFieldName
parameter_list|,
name|long
name|rawTime
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|rawTime
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|rawTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|dateValueField
specifier|public
name|XContentBuilder
name|dateValueField
parameter_list|(
name|XContentBuilderString
name|rawFieldName
parameter_list|,
name|XContentBuilderString
name|readableFieldName
parameter_list|,
name|long
name|rawTimestamp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
name|defaultDatePrinter
operator|.
name|print
argument_list|(
name|rawTimestamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|rawTimestamp
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|timeValueField
specifier|public
name|XContentBuilder
name|timeValueField
parameter_list|(
name|String
name|rawFieldName
parameter_list|,
name|String
name|readableFieldName
parameter_list|,
name|long
name|rawTime
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|rawTime
argument_list|,
name|timeUnit
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|rawTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|dateValueField
specifier|public
name|XContentBuilder
name|dateValueField
parameter_list|(
name|String
name|rawFieldName
parameter_list|,
name|String
name|readableFieldName
parameter_list|,
name|long
name|rawTimestamp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
name|defaultDatePrinter
operator|.
name|print
argument_list|(
name|rawTimestamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|rawTimestamp
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|byteSizeField
specifier|public
name|XContentBuilder
name|byteSizeField
parameter_list|(
name|XContentBuilderString
name|rawFieldName
parameter_list|,
name|XContentBuilderString
name|readableFieldName
parameter_list|,
name|ByteSizeValue
name|byteSizeValue
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
name|byteSizeValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|byteSizeValue
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|byteSizeField
specifier|public
name|XContentBuilder
name|byteSizeField
parameter_list|(
name|XContentBuilderString
name|rawFieldName
parameter_list|,
name|XContentBuilderString
name|readableFieldName
parameter_list|,
name|long
name|rawSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|rawSize
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|rawSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|percentageField
specifier|public
name|XContentBuilder
name|percentageField
parameter_list|(
name|XContentBuilderString
name|rawFieldName
parameter_list|,
name|XContentBuilderString
name|readableFieldName
parameter_list|,
name|double
name|percentage
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|humanReadable
condition|)
block|{
name|field
argument_list|(
name|readableFieldName
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%1.1f%%"
argument_list|,
name|percentage
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|field
argument_list|(
name|rawFieldName
argument_list|,
name|percentage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Boolean
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
return|return
name|value
argument_list|(
name|value
operator|.
name|booleanValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|boolean
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|ReadableInstant
name|date
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|value
argument_list|(
name|date
argument_list|,
name|defaultDatePrinter
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|ReadableInstant
name|date
parameter_list|,
name|DateTimeFormatter
name|dateTimeFormatter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
return|return
name|value
argument_list|(
name|dateTimeFormatter
operator|.
name|print
argument_list|(
name|date
argument_list|)
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Date
name|date
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|value
argument_list|(
name|date
argument_list|,
name|defaultDatePrinter
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Date
name|date
parameter_list|,
name|DateTimeFormatter
name|dateTimeFormatter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
return|return
name|value
argument_list|(
name|dateTimeFormatter
operator|.
name|print
argument_list|(
name|date
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Integer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
return|return
name|value
argument_list|(
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
return|return
name|value
argument_list|(
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
return|return
name|value
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
return|return
name|value
argument_list|(
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|generator
operator|.
name|writeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Writes the binary content of the given BytesRef      * Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back      */
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|BytesRef
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Writes the binary content of the given BytesReference      * Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back      */
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|BytesReference
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|value
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|toBytesArray
argument_list|()
expr_stmt|;
block|}
name|generator
operator|.
name|writeBinary
argument_list|(
name|value
operator|.
name|array
argument_list|()
argument_list|,
name|value
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|.
name|hasBytes
argument_list|()
operator|&&
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|generator
operator|.
name|writeUTF8String
argument_list|(
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|value
operator|.
name|hasString
argument_list|()
condition|)
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|value
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|BytesArray
name|bytesArray
init|=
name|value
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesArray
argument_list|()
decl_stmt|;
name|generator
operator|.
name|writeUTF8String
argument_list|(
name|bytesArray
operator|.
name|array
argument_list|()
argument_list|,
name|bytesArray
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bytesArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|map
specifier|public
name|XContentBuilder
name|map
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|writeMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
name|writeMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|value
specifier|public
name|XContentBuilder
name|value
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|nullValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Path
condition|)
block|{
comment|//treat as single value
name|writeValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|value
control|)
block|{
name|value
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|latlon
specifier|public
name|XContentBuilder
name|latlon
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|startObject
argument_list|(
name|name
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|lat
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|lon
argument_list|)
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|latlon
specifier|public
name|XContentBuilder
name|latlon
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|lat
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|lon
argument_list|)
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|copyCurrentStructure
specifier|public
name|XContentBuilder
name|copyCurrentStructure
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|flush
specifier|public
name|XContentBuilder
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
DECL|method|generator
specifier|public
name|XContentGenerator
name|generator
parameter_list|()
block|{
return|return
name|this
operator|.
name|generator
return|;
block|}
annotation|@
name|Override
DECL|method|bytes
specifier|public
name|BytesReference
name|bytes
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
return|return
operator|(
operator|(
name|BytesStream
operator|)
name|bos
operator|)
operator|.
name|bytes
argument_list|()
return|;
block|}
comment|/**      * Returns a string representation of the builder (only applicable for text based xcontent).      */
DECL|method|string
specifier|public
name|String
name|string
parameter_list|()
throws|throws
name|IOException
block|{
name|close
argument_list|()
expr_stmt|;
name|BytesArray
name|bytesArray
init|=
name|bytes
argument_list|()
operator|.
name|toBytesArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|bytesArray
operator|.
name|array
argument_list|()
argument_list|,
name|bytesArray
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bytesArray
operator|.
name|length
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
DECL|method|writeMap
specifier|private
name|void
name|writeMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|writeValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|Writer
interface|interface
name|Writer
block|{
DECL|method|write
name|void
name|write
parameter_list|(
name|XContentGenerator
name|g
parameter_list|,
name|Object
name|v
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|field|MAP
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Writer
argument_list|>
name|MAP
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Writer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
name|g
operator|.
name|writeString
argument_list|(
operator|(
name|String
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
name|g
operator|.
name|writeNumber
argument_list|(
operator|(
name|Integer
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Long
operator|.
name|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
name|g
operator|.
name|writeNumber
argument_list|(
operator|(
name|Long
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Float
operator|.
name|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
name|g
operator|.
name|writeNumber
argument_list|(
operator|(
name|Float
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Double
operator|.
name|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
name|g
operator|.
name|writeNumber
argument_list|(
operator|(
name|Double
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
name|g
operator|.
name|writeNumber
argument_list|(
operator|(
name|Byte
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Short
operator|.
name|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
name|g
operator|.
name|writeNumber
argument_list|(
operator|(
name|Short
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
name|g
operator|.
name|writeBoolean
argument_list|(
operator|(
name|Boolean
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|GeoPoint
operator|.
name|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|g
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|g
operator|.
name|writeNumberField
argument_list|(
literal|"lat"
argument_list|,
operator|(
operator|(
name|GeoPoint
operator|)
name|v
operator|)
operator|.
name|lat
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|writeNumberField
argument_list|(
literal|"lon"
argument_list|,
operator|(
operator|(
name|GeoPoint
operator|)
name|v
operator|)
operator|.
name|lon
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|g
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|item
range|:
operator|(
name|int
index|[]
operator|)
name|v
control|)
block|{
name|g
operator|.
name|writeNumber
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|long
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|g
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|item
range|:
operator|(
name|long
index|[]
operator|)
name|v
control|)
block|{
name|g
operator|.
name|writeNumber
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|float
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|g
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|float
name|item
range|:
operator|(
name|float
index|[]
operator|)
name|v
control|)
block|{
name|g
operator|.
name|writeNumber
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|double
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|g
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|double
name|item
range|:
operator|(
name|double
index|[]
operator|)
name|v
control|)
block|{
name|g
operator|.
name|writeNumber
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
name|g
operator|.
name|writeBinary
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|short
index|[]
operator|.
expr|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|g
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|short
name|item
range|:
operator|(
name|short
index|[]
operator|)
name|v
control|)
block|{
name|g
operator|.
name|writeNumber
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BytesRef
operator|.
name|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|BytesRef
name|bytes
init|=
operator|(
name|BytesRef
operator|)
name|v
decl_stmt|;
name|g
operator|.
name|writeBinary
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Text
operator|.
name|class
argument_list|,
parameter_list|(
name|g
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|v
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|hasBytes
argument_list|()
operator|&&
name|text
operator|.
name|bytes
argument_list|()
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|g
operator|.
name|writeUTF8String
argument_list|(
name|text
operator|.
name|bytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|text
operator|.
name|bytes
argument_list|()
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|text
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|hasString
argument_list|()
condition|)
block|{
name|g
operator|.
name|writeString
argument_list|(
name|text
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BytesArray
name|bytesArray
init|=
name|text
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesArray
argument_list|()
decl_stmt|;
name|g
operator|.
name|writeUTF8String
argument_list|(
name|bytesArray
operator|.
name|array
argument_list|()
argument_list|,
name|bytesArray
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bytesArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|writeValue
specifier|private
name|void
name|writeValue
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|value
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|generator
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
name|writeMap
argument_list|(
operator|(
name|Map
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Path
condition|)
block|{
comment|//Path implements Iterable<Path> and causes endless recursion and a StackOverFlow if treated as an Iterable here
name|generator
operator|.
name|writeString
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Iterable
condition|)
block|{
name|writeIterable
argument_list|(
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|writeObjectArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Date
condition|)
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|XContentBuilder
operator|.
name|defaultDatePrinter
operator|.
name|print
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|value
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Calendar
condition|)
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|XContentBuilder
operator|.
name|defaultDatePrinter
operator|.
name|print
argument_list|(
operator|(
operator|(
operator|(
name|Calendar
operator|)
name|value
operator|)
operator|)
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ReadableInstant
condition|)
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|XContentBuilder
operator|.
name|defaultDatePrinter
operator|.
name|print
argument_list|(
operator|(
operator|(
operator|(
name|ReadableInstant
operator|)
name|value
operator|)
operator|)
operator|.
name|getMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|BytesReference
condition|)
block|{
name|writeBytesReference
argument_list|(
operator|(
name|BytesReference
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ToXContent
condition|)
block|{
operator|(
operator|(
name|ToXContent
operator|)
name|value
operator|)
operator|.
name|toXContent
argument_list|(
name|this
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if this is a "value" object, like enum, DistanceUnit, ..., just toString it
comment|// yea, it can be misleading when toString a Java class, but really, jackson should be used in that case
name|generator
operator|.
name|writeString
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//throw new ElasticsearchIllegalArgumentException("type not supported for generic value conversion: " + type);
block|}
block|}
DECL|method|writeBytesReference
specifier|private
name|void
name|writeBytesReference
parameter_list|(
name|BytesReference
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesReference
name|bytes
init|=
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|bytes
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|bytes
operator|=
name|bytes
operator|.
name|toBytesArray
argument_list|()
expr_stmt|;
block|}
name|generator
operator|.
name|writeBinary
argument_list|(
name|bytes
operator|.
name|array
argument_list|()
argument_list|,
name|bytes
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bytes
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeIterable
specifier|private
name|void
name|writeIterable
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|v
range|:
name|value
control|)
block|{
name|writeValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
DECL|method|writeObjectArray
specifier|private
name|void
name|writeObjectArray
parameter_list|(
name|Object
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|v
range|:
name|value
control|)
block|{
name|writeValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

