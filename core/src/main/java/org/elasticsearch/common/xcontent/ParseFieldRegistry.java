begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Registry for looking things up using ParseField semantics.  */
end_comment

begin_class
DECL|class|ParseFieldRegistry
specifier|public
class|class
name|ParseFieldRegistry
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|registry
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple
argument_list|<
name|ParseField
argument_list|,
name|T
argument_list|>
argument_list|>
name|registry
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|registryName
specifier|private
specifier|final
name|String
name|registryName
decl_stmt|;
comment|/**      * Build the registry.      * @param registryName used for error messages      */
DECL|method|ParseFieldRegistry
specifier|public
name|ParseFieldRegistry
parameter_list|(
name|String
name|registryName
parameter_list|)
block|{
name|this
operator|.
name|registryName
operator|=
name|registryName
expr_stmt|;
block|}
comment|/**      * All the names under which values are registered. Expect this to be used mostly for testing.      */
DECL|method|getNames
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|()
block|{
return|return
name|registry
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Register a parser.      */
DECL|method|register
specifier|public
name|void
name|register
parameter_list|(
name|T
name|value
parameter_list|,
name|ParseField
name|parseField
parameter_list|)
block|{
name|Tuple
argument_list|<
name|ParseField
argument_list|,
name|T
argument_list|>
name|parseFieldParserTuple
init|=
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|parseField
argument_list|,
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|parseField
operator|.
name|getAllNamesIncludedDeprecated
argument_list|()
control|)
block|{
name|Tuple
argument_list|<
name|ParseField
argument_list|,
name|T
argument_list|>
name|previousValue
init|=
name|registry
operator|.
name|putIfAbsent
argument_list|(
name|name
argument_list|,
name|parseFieldParserTuple
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousValue
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|previousValue
operator|.
name|v2
argument_list|()
operator|+
literal|"] already registered for ["
operator|+
name|registryName
operator|+
literal|"]["
operator|+
name|name
operator|+
literal|"] while trying to register ["
operator|+
name|value
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Lookup a value from the registry by name while checking that the name matches the ParseField.      *      * @param name The name of the thing to look up.      * @param parseFieldMatcher to build nice error messages.      * @return The value being looked up. Never null.      * @throws ParsingException if the named thing isn't in the registry or the name was deprecated and deprecated names aren't supported.      */
DECL|method|lookup
specifier|public
name|T
name|lookup
parameter_list|(
name|String
name|name
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|,
name|XContentLocation
name|xContentLocation
parameter_list|)
block|{
name|T
name|value
init|=
name|lookupReturningNullIfNotFound
argument_list|(
name|name
argument_list|,
name|parseFieldMatcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|xContentLocation
argument_list|,
literal|"no ["
operator|+
name|registryName
operator|+
literal|"] registered for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Lookup a value from the registry by name while checking that the name matches the ParseField.      *      * @param name The name of the thing to look up.      * @param parseFieldMatcher The parseFieldMatcher. This is used to resolve the {@link ParseFieldMatcher} and to build nice      *        error messages.      * @return The value being looked up or null if it wasn't found.      * @throws ParsingException if the named thing isn't in the registry or the name was deprecated and deprecated names aren't supported.      */
DECL|method|lookupReturningNullIfNotFound
specifier|public
name|T
name|lookupReturningNullIfNotFound
parameter_list|(
name|String
name|name
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|)
block|{
name|Tuple
argument_list|<
name|ParseField
argument_list|,
name|T
argument_list|>
name|parseFieldAndValue
init|=
name|registry
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseFieldAndValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ParseField
name|parseField
init|=
name|parseFieldAndValue
operator|.
name|v1
argument_list|()
decl_stmt|;
name|T
name|value
init|=
name|parseFieldAndValue
operator|.
name|v2
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|name
argument_list|,
name|parseField
argument_list|)
decl_stmt|;
comment|//this is always expected to match, ParseField is useful for deprecation warnings etc. here
assert|assert
name|match
operator|:
literal|"ParseField did not match registered name ["
operator|+
name|name
operator|+
literal|"]["
operator|+
name|registryName
operator|+
literal|"]"
assert|;
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

