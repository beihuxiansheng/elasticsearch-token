begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent.json
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonStreamContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|base
operator|.
name|GeneratorBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|filter
operator|.
name|FilteringGeneratorDelegate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|io
operator|.
name|SerializedString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|util
operator|.
name|DefaultIndenter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|util
operator|.
name|DefaultPrettyPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|filtering
operator|.
name|FilterPathBasedFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|JsonXContentGenerator
specifier|public
class|class
name|JsonXContentGenerator
implements|implements
name|XContentGenerator
block|{
comment|/** Generator used to write content **/
DECL|field|generator
specifier|protected
specifier|final
name|JsonGenerator
name|generator
decl_stmt|;
comment|/**      * Reference to base generator because      * writing raw values needs a specific method call.      */
DECL|field|base
specifier|private
specifier|final
name|GeneratorBase
name|base
decl_stmt|;
comment|/**      * Reference to filtering generator because      * writing an empty object '{}' when everything is filtered      * out needs a specific treatment      */
DECL|field|filter
specifier|private
specifier|final
name|FilteringGeneratorDelegate
name|filter
decl_stmt|;
DECL|field|os
specifier|private
specifier|final
name|OutputStream
name|os
decl_stmt|;
DECL|field|writeLineFeedAtEnd
specifier|private
name|boolean
name|writeLineFeedAtEnd
decl_stmt|;
DECL|field|LF
specifier|private
specifier|static
specifier|final
name|SerializedString
name|LF
init|=
operator|new
name|SerializedString
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
DECL|field|INDENTER
specifier|private
specifier|static
specifier|final
name|DefaultPrettyPrinter
operator|.
name|Indenter
name|INDENTER
init|=
operator|new
name|DefaultIndenter
argument_list|(
literal|"  "
argument_list|,
name|LF
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|prettyPrint
specifier|private
name|boolean
name|prettyPrint
init|=
literal|false
decl_stmt|;
DECL|method|JsonXContentGenerator
specifier|public
name|JsonXContentGenerator
parameter_list|(
name|JsonGenerator
name|jsonGenerator
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|String
modifier|...
name|filters
parameter_list|)
block|{
name|this
argument_list|(
name|jsonGenerator
argument_list|,
name|os
argument_list|,
name|filters
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|JsonXContentGenerator
specifier|public
name|JsonXContentGenerator
parameter_list|(
name|JsonGenerator
name|jsonGenerator
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|String
index|[]
name|filters
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
if|if
condition|(
name|jsonGenerator
operator|instanceof
name|GeneratorBase
condition|)
block|{
name|this
operator|.
name|base
operator|=
operator|(
name|GeneratorBase
operator|)
name|jsonGenerator
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|base
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|filters
argument_list|)
condition|)
block|{
name|this
operator|.
name|generator
operator|=
name|jsonGenerator
expr_stmt|;
name|this
operator|.
name|filter
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|filter
operator|=
operator|new
name|FilteringGeneratorDelegate
argument_list|(
name|jsonGenerator
argument_list|,
operator|new
name|FilterPathBasedFilter
argument_list|(
name|filters
argument_list|,
name|inclusive
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|generator
operator|=
name|this
operator|.
name|filter
expr_stmt|;
block|}
name|this
operator|.
name|os
operator|=
name|os
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contentType
specifier|public
name|XContentType
name|contentType
parameter_list|()
block|{
return|return
name|XContentType
operator|.
name|JSON
return|;
block|}
annotation|@
name|Override
DECL|method|usePrettyPrint
specifier|public
specifier|final
name|void
name|usePrettyPrint
parameter_list|()
block|{
name|generator
operator|.
name|setPrettyPrinter
argument_list|(
operator|new
name|DefaultPrettyPrinter
argument_list|()
operator|.
name|withObjectIndenter
argument_list|(
name|INDENTER
argument_list|)
argument_list|)
expr_stmt|;
name|prettyPrint
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|usePrintLineFeedAtEnd
specifier|public
name|void
name|usePrintLineFeedAtEnd
parameter_list|()
block|{
name|writeLineFeedAtEnd
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStartArray
specifier|public
name|void
name|writeStartArray
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeEndArray
specifier|public
name|void
name|writeEndArray
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
DECL|method|isFiltered
specifier|protected
name|boolean
name|isFiltered
parameter_list|()
block|{
return|return
name|filter
operator|!=
literal|null
return|;
block|}
DECL|method|inRoot
specifier|protected
name|boolean
name|inRoot
parameter_list|()
block|{
if|if
condition|(
name|isFiltered
argument_list|()
condition|)
block|{
name|JsonStreamContext
name|context
init|=
name|filter
operator|.
name|getFilterContext
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|context
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|context
operator|.
name|inRoot
argument_list|()
operator|&&
name|context
operator|.
name|getCurrentName
argument_list|()
operator|==
literal|null
operator|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|writeStartObject
specifier|public
name|void
name|writeStartObject
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isFiltered
argument_list|()
operator|&&
name|inRoot
argument_list|()
condition|)
block|{
comment|// Bypass generator to always write the root start object
name|filter
operator|.
name|getDelegate
argument_list|()
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
return|return;
block|}
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeEndObject
specifier|public
name|void
name|writeEndObject
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isFiltered
argument_list|()
operator|&&
name|inRoot
argument_list|()
condition|)
block|{
comment|// Bypass generator to always write the root end object
name|filter
operator|.
name|getDelegate
argument_list|()
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
return|return;
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeFieldName
specifier|public
name|void
name|writeFieldName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeString
specifier|public
name|void
name|writeString
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeString
specifier|public
name|void
name|writeString
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|text
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeUTF8String
specifier|public
name|void
name|writeUTF8String
parameter_list|(
name|byte
index|[]
name|text
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeUTF8String
argument_list|(
name|text
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBinary
specifier|public
name|void
name|writeBinary
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeBinary
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBinary
specifier|public
name|void
name|writeBinary
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeBinary
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNumber
specifier|public
name|void
name|writeNumber
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNumber
specifier|public
name|void
name|writeNumber
parameter_list|(
name|long
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNumber
specifier|public
name|void
name|writeNumber
parameter_list|(
name|double
name|d
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNumber
specifier|public
name|void
name|writeNumber
parameter_list|(
name|float
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumber
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBoolean
specifier|public
name|void
name|writeBoolean
parameter_list|(
name|boolean
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeBoolean
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNull
specifier|public
name|void
name|writeNull
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStringField
specifier|public
name|void
name|writeStringField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStringField
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBooleanField
specifier|public
name|void
name|writeBooleanField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeBooleanField
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNullField
specifier|public
name|void
name|writeNullField
parameter_list|(
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNullField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNumberField
specifier|public
name|void
name|writeNumberField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumberField
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNumberField
specifier|public
name|void
name|writeNumberField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumberField
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNumberField
specifier|public
name|void
name|writeNumberField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumberField
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNumberField
specifier|public
name|void
name|writeNumberField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeNumberField
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBinaryField
specifier|public
name|void
name|writeBinaryField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeBinaryField
argument_list|(
name|fieldName
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeArrayFieldStart
specifier|public
name|void
name|writeArrayFieldStart
parameter_list|(
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeArrayFieldStart
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeObjectFieldStart
specifier|public
name|void
name|writeObjectFieldStart
parameter_list|(
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeObjectFieldStart
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
DECL|method|writeStartRaw
specifier|private
name|void
name|writeStartRaw
parameter_list|(
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFieldName
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeRaw
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
DECL|method|writeEndRaw
specifier|public
name|void
name|writeEndRaw
parameter_list|()
block|{
assert|assert
name|base
operator|!=
literal|null
operator|:
literal|"JsonGenerator should be of instance GeneratorBase but was: "
operator|+
name|generator
operator|.
name|getClass
argument_list|()
assert|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|base
operator|.
name|getOutputContext
argument_list|()
operator|.
name|writeValue
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeRawField
specifier|public
name|void
name|writeRawField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|InputStream
name|content
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|content
operator|.
name|markSupported
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// needed for the XContentFactory.xContentType call
name|content
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
name|XContentType
name|contentType
init|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't write raw bytes whose xcontent-type can't be guessed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mayWriteRawData
argument_list|(
name|contentType
argument_list|)
operator|==
literal|false
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|contentType
argument_list|)
operator|.
name|createParser
argument_list|(
name|content
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|writeFieldName
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writeStartRaw
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
name|content
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|writeEndRaw
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeRawField
specifier|public
specifier|final
name|void
name|writeRawField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|BytesReference
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentType
name|contentType
init|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't write raw bytes whose xcontent-type can't be guessed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mayWriteRawData
argument_list|(
name|contentType
argument_list|)
operator|==
literal|false
condition|)
block|{
name|writeFieldName
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|copyRawValue
argument_list|(
name|content
argument_list|,
name|contentType
operator|.
name|xContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeStartRaw
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|content
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|writeEndRaw
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeRawValue
specifier|public
specifier|final
name|void
name|writeRawValue
parameter_list|(
name|BytesReference
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentType
name|contentType
init|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't write raw bytes whose xcontent-type can't be guessed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mayWriteRawData
argument_list|(
name|contentType
argument_list|)
operator|==
literal|false
condition|)
block|{
name|copyRawValue
argument_list|(
name|content
argument_list|,
name|contentType
operator|.
name|xContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|flush
argument_list|()
expr_stmt|;
name|content
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|writeEndRaw
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|mayWriteRawData
specifier|private
name|boolean
name|mayWriteRawData
parameter_list|(
name|XContentType
name|contentType
parameter_list|)
block|{
comment|// When the current generator is filtered (ie filter != null)
comment|// or the content is in a different format than the current generator,
comment|// we need to copy the whole structure so that it will be correctly
comment|// filtered or converted
return|return
name|supportsRawWrites
argument_list|()
operator|&&
name|isFiltered
argument_list|()
operator|==
literal|false
operator|&&
name|contentType
operator|==
name|contentType
argument_list|()
operator|&&
name|prettyPrint
operator|==
literal|false
return|;
block|}
comment|/** Whether this generator supports writing raw data directly */
DECL|method|supportsRawWrites
specifier|protected
name|boolean
name|supportsRawWrites
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|copyRawValue
specifier|protected
name|void
name|copyRawValue
parameter_list|(
name|BytesReference
name|content
parameter_list|,
name|XContent
name|xContent
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|content
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|parser
operator|=
name|xContent
operator|.
name|createParser
argument_list|(
name|content
operator|.
name|array
argument_list|()
argument_list|,
name|content
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|content
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parser
operator|=
name|xContent
operator|.
name|createParser
argument_list|(
name|content
operator|.
name|streamInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|copyCurrentStructure
specifier|public
name|void
name|copyCurrentStructure
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the start of the parser
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
literal|null
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|instanceof
name|JsonXContentParser
condition|)
block|{
name|generator
operator|.
name|copyCurrentStructure
argument_list|(
operator|(
operator|(
name|JsonXContentParser
operator|)
name|parser
operator|)
operator|.
name|parser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XContentHelper
operator|.
name|copyCurrentStructure
argument_list|(
name|this
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|generator
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|generator
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|writeLineFeedAtEnd
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeRaw
argument_list|(
name|LF
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

