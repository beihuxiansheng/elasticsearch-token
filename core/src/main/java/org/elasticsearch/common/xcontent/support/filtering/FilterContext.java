begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent.support.filtering
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|filtering
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A FilterContext contains the description of a field about to be written by a JsonGenerator.  */
end_comment

begin_class
DECL|class|FilterContext
specifier|public
class|class
name|FilterContext
block|{
comment|/**      * The field/property name to be write      */
DECL|field|property
specifier|private
name|String
name|property
decl_stmt|;
comment|/**      * List of XContentFilter matched by the current filtering context      */
DECL|field|matchings
specifier|private
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|matchings
decl_stmt|;
comment|/**      * Flag to indicate if the field/property must be written      */
DECL|field|write
specifier|private
name|Boolean
name|write
init|=
literal|null
decl_stmt|;
comment|/**      * Flag to indicate if the field/property match a filter      */
DECL|field|match
specifier|private
name|boolean
name|match
init|=
literal|false
decl_stmt|;
comment|/**      * Points to the parent context      */
DECL|field|parent
specifier|private
name|FilterContext
name|parent
decl_stmt|;
comment|/**      * Type of the field/property      */
DECL|field|type
specifier|private
name|Type
name|type
init|=
name|Type
operator|.
name|VALUE
decl_stmt|;
DECL|enum|Type
specifier|protected
enum|enum
name|Type
block|{
DECL|enum constant|VALUE
name|VALUE
block|,
DECL|enum constant|OBJECT
name|OBJECT
block|,
DECL|enum constant|ARRAY
name|ARRAY
block|,
DECL|enum constant|ARRAY_OF_OBJECT
name|ARRAY_OF_OBJECT
block|}
DECL|method|FilterContext
specifier|public
name|FilterContext
parameter_list|(
name|String
name|property
parameter_list|,
name|FilterContext
name|parent
parameter_list|)
block|{
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|String
name|property
parameter_list|)
block|{
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|this
operator|.
name|write
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|matchings
operator|!=
literal|null
condition|)
block|{
name|matchings
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|match
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|VALUE
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|String
name|property
parameter_list|,
name|FilterContext
name|parent
parameter_list|)
block|{
name|reset
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|isMatch
argument_list|()
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|parent
specifier|public
name|FilterContext
name|parent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|matchings
specifier|public
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|matchings
parameter_list|()
block|{
return|return
name|matchings
return|;
block|}
DECL|method|addMatching
specifier|public
name|void
name|addMatching
parameter_list|(
name|String
index|[]
name|matching
parameter_list|)
block|{
if|if
condition|(
name|matchings
operator|==
literal|null
condition|)
block|{
name|matchings
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|matchings
operator|.
name|add
argument_list|(
name|matching
argument_list|)
expr_stmt|;
block|}
DECL|method|isRoot
specifier|public
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
name|parent
operator|==
literal|null
return|;
block|}
DECL|method|isArray
specifier|public
name|boolean
name|isArray
parameter_list|()
block|{
return|return
name|Type
operator|.
name|ARRAY
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|initArray
specifier|public
name|void
name|initArray
parameter_list|()
block|{
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|ARRAY
expr_stmt|;
block|}
DECL|method|isObject
specifier|public
name|boolean
name|isObject
parameter_list|()
block|{
return|return
name|Type
operator|.
name|OBJECT
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|initObject
specifier|public
name|void
name|initObject
parameter_list|()
block|{
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|OBJECT
expr_stmt|;
block|}
DECL|method|isArrayOfObject
specifier|public
name|boolean
name|isArrayOfObject
parameter_list|()
block|{
return|return
name|Type
operator|.
name|ARRAY_OF_OBJECT
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|initArrayOfObject
specifier|public
name|void
name|initArrayOfObject
parameter_list|()
block|{
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|ARRAY_OF_OBJECT
expr_stmt|;
block|}
DECL|method|isMatch
specifier|public
name|boolean
name|isMatch
parameter_list|()
block|{
return|return
name|match
return|;
block|}
comment|/**      * This method contains the logic to check if a field/property must be included      * or not.      */
DECL|method|include
specifier|public
name|boolean
name|include
parameter_list|()
block|{
if|if
condition|(
name|write
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
comment|// the parent context matches the end of a filter list:
comment|// by default we include all the sub properties so we
comment|// don't need to check if the sub properties also match
if|if
condition|(
name|parent
operator|.
name|isMatch
argument_list|()
condition|)
block|{
name|write
operator|=
literal|true
expr_stmt|;
name|match
operator|=
literal|true
expr_stmt|;
return|return
name|write
return|;
block|}
if|if
condition|(
name|parent
operator|.
name|matchings
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Iterates over the filters matched by the parent context
comment|// and checks if the current context also match
for|for
control|(
name|String
index|[]
name|matcher
range|:
name|parent
operator|.
name|matchings
argument_list|()
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|field
init|=
name|matcher
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
literal|"**"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|addMatching
argument_list|(
name|matcher
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|field
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|field
argument_list|,
name|property
argument_list|)
operator|)
condition|)
block|{
name|int
name|remaining
init|=
name|matcher
operator|.
name|length
operator|-
literal|1
decl_stmt|;
comment|// the current context matches the end of a filter list:
comment|// it must be written and it is flagged as a direct match
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
block|{
name|write
operator|=
literal|true
expr_stmt|;
name|match
operator|=
literal|true
expr_stmt|;
return|return
name|write
return|;
block|}
else|else
block|{
name|String
index|[]
name|submatching
init|=
operator|new
name|String
index|[
name|remaining
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|matcher
argument_list|,
literal|1
argument_list|,
name|submatching
argument_list|,
literal|0
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
name|addMatching
argument_list|(
name|submatching
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// Root object is always written
name|write
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|write
operator|==
literal|null
condition|)
block|{
name|write
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|write
return|;
block|}
comment|/**      * Ensure that the full path to the current field is write by the JsonGenerator      *      * @param generator      * @throws IOException      */
DECL|method|writePath
specifier|public
name|void
name|writePath
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|writePath
argument_list|(
name|generator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|write
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|write
operator|)
condition|)
block|{
name|write
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|property
argument_list|)
expr_stmt|;
if|if
condition|(
name|isArray
argument_list|()
condition|)
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isObject
argument_list|()
operator|||
name|isArrayOfObject
argument_list|()
condition|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

