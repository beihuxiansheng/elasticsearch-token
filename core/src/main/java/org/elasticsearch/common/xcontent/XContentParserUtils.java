begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * A set of static methods to get {@link Token} from {@link XContentParser}  * while checking for their types and throw {@link ParsingException} if needed.  */
end_comment

begin_class
DECL|class|XContentParserUtils
specifier|public
specifier|final
class|class
name|XContentParserUtils
block|{
DECL|method|XContentParserUtils
specifier|private
name|XContentParserUtils
parameter_list|()
block|{     }
comment|/**      * Makes sure that current token is of type {@link XContentParser.Token#FIELD_NAME}      *      * @return the token      * @throws ParsingException if the token is not of type {@link XContentParser.Token#FIELD_NAME}      */
DECL|method|ensureFieldName
specifier|public
specifier|static
name|Token
name|ensureFieldName
parameter_list|(
name|Token
name|token
parameter_list|,
name|Supplier
argument_list|<
name|XContentLocation
argument_list|>
name|location
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ensureType
argument_list|(
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|token
argument_list|,
name|location
argument_list|)
return|;
block|}
comment|/**      * Makes sure that current token is of type {@link XContentParser.Token#FIELD_NAME} and the the field name is equal to the provided one      *      * @return the token      * @throws ParsingException if the token is not of type {@link XContentParser.Token#FIELD_NAME} or is not equal to the given      *                          field name      */
DECL|method|ensureFieldName
specifier|public
specifier|static
name|Token
name|ensureFieldName
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|Token
name|token
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
name|t
init|=
name|ensureType
argument_list|(
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|token
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
decl_stmt|;
name|String
name|current
init|=
name|parser
operator|.
name|currentName
argument_list|()
operator|!=
literal|null
condition|?
name|parser
operator|.
name|currentName
argument_list|()
else|:
literal|"<null>"
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|==
literal|false
condition|)
block|{
name|String
name|message
init|=
literal|"Failed to parse object: expecting field with name [%s] but found [%s]"
decl_stmt|;
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|message
argument_list|,
name|fieldName
argument_list|,
name|current
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|t
return|;
block|}
comment|/**      * @throws ParsingException with a "unknown field found" reason      */
DECL|method|throwUnknownField
specifier|public
specifier|static
name|void
name|throwUnknownField
parameter_list|(
name|String
name|field
parameter_list|,
name|XContentLocation
name|location
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to parse object: unknown field [%s] found"
decl_stmt|;
throw|throw
operator|new
name|ParsingException
argument_list|(
name|location
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|message
argument_list|,
name|field
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * Makes sure that current token is of the expected type      *      * @return the token      * @throws ParsingException if the token is not equal to the expected type      */
DECL|method|ensureType
specifier|private
specifier|static
name|Token
name|ensureType
parameter_list|(
name|Token
name|expected
parameter_list|,
name|Token
name|current
parameter_list|,
name|Supplier
argument_list|<
name|XContentLocation
argument_list|>
name|location
parameter_list|)
block|{
if|if
condition|(
name|current
operator|!=
name|expected
condition|)
block|{
name|String
name|message
init|=
literal|"Failed to parse object: expecting token of type [%s] but found [%s]"
decl_stmt|;
throw|throw
operator|new
name|ParsingException
argument_list|(
name|location
operator|.
name|get
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|message
argument_list|,
name|expected
argument_list|,
name|current
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|current
return|;
block|}
block|}
end_class

end_unit

