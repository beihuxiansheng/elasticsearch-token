begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|search
operator|.
name|RestSearchAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * A set of static methods to get {@link Token} from {@link XContentParser}  * while checking for their types and throw {@link ParsingException} if needed.  */
end_comment

begin_class
DECL|class|XContentParserUtils
specifier|public
specifier|final
class|class
name|XContentParserUtils
block|{
DECL|method|XContentParserUtils
specifier|private
name|XContentParserUtils
parameter_list|()
block|{     }
comment|/**      * Makes sure that current token is of type {@link XContentParser.Token#FIELD_NAME} and the the field name is equal to the provided one      * @throws ParsingException if the token is not of type {@link XContentParser.Token#FIELD_NAME} or is not equal to the given field name      */
DECL|method|ensureFieldName
specifier|public
specifier|static
name|void
name|ensureFieldName
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|Token
name|token
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureExpectedToken
argument_list|(
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|token
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|String
name|currentName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentName
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|==
literal|false
condition|)
block|{
name|String
name|message
init|=
literal|"Failed to parse object: expecting field with name [%s] but found [%s]"
decl_stmt|;
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|message
argument_list|,
name|fieldName
argument_list|,
name|currentName
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * @throws ParsingException with a "unknown field found" reason      */
DECL|method|throwUnknownField
specifier|public
specifier|static
name|void
name|throwUnknownField
parameter_list|(
name|String
name|field
parameter_list|,
name|XContentLocation
name|location
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to parse object: unknown field [%s] found"
decl_stmt|;
throw|throw
operator|new
name|ParsingException
argument_list|(
name|location
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|message
argument_list|,
name|field
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * @throws ParsingException with a "unknown token found" reason      */
DECL|method|throwUnknownToken
specifier|public
specifier|static
name|void
name|throwUnknownToken
parameter_list|(
name|XContentParser
operator|.
name|Token
name|token
parameter_list|,
name|XContentLocation
name|location
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to parse object: unexpected token [%s] found"
decl_stmt|;
throw|throw
operator|new
name|ParsingException
argument_list|(
name|location
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|message
argument_list|,
name|token
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * Makes sure that provided token is of the expected type      *      * @throws ParsingException if the token is not equal to the expected type      */
DECL|method|ensureExpectedToken
specifier|public
specifier|static
name|void
name|ensureExpectedToken
parameter_list|(
name|Token
name|expected
parameter_list|,
name|Token
name|actual
parameter_list|,
name|Supplier
argument_list|<
name|XContentLocation
argument_list|>
name|location
parameter_list|)
block|{
if|if
condition|(
name|actual
operator|!=
name|expected
condition|)
block|{
name|String
name|message
init|=
literal|"Failed to parse object: expecting token of type [%s] but found [%s]"
decl_stmt|;
throw|throw
operator|new
name|ParsingException
argument_list|(
name|location
operator|.
name|get
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|message
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Parse the current token depending on its token type. The following token types will be      * parsed by the corresponding parser methods:      *<ul>      *<li>XContentParser.Token.VALUE_STRING: parser.text()</li>      *<li>XContentParser.Token.VALUE_NUMBER: parser.numberValue()</li>      *<li>XContentParser.Token.VALUE_BOOLEAN: parser.booleanValue()</li>      *<li>XContentParser.Token.VALUE_EMBEDDED_OBJECT: parser.binaryValue()</li>      *</ul>      *      * @throws ParsingException if the token none of the allowed values      */
DECL|method|parseStoredFieldsValue
specifier|public
specifier|static
name|Object
name|parseStoredFieldsValue
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
comment|//binary values will be parsed back and returned as base64 strings when reading from json and yaml
name|value
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|value
operator|=
name|parser
operator|.
name|numberValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_BOOLEAN
condition|)
block|{
name|value
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_EMBEDDED_OBJECT
condition|)
block|{
comment|//binary values will be parsed back and returned as BytesArray when reading from cbor and smile
name|value
operator|=
operator|new
name|BytesArray
argument_list|(
name|parser
operator|.
name|binaryValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|throwUnknownToken
argument_list|(
name|token
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * This method expects that the current token is a {@code XContentParser.Token.FIELD_NAME} and      * that the current field name is the concatenation of a type, delimiter and name (ex: terms#foo      * where "terms" refers to the type of a registered {@link NamedXContentRegistry.Entry}, "#" is      * the delimiter and "foo" the name of the object to parse).      *      * The method splits the field's name to extract the type and name and then parses the object      * using the {@link XContentParser#namedObject(Class, String, Object)} method.      *      * @param parser      the current {@link XContentParser}      * @param delimiter   the delimiter to use to splits the field's name      * @param objectClass the object class of the object to parse      * @param<T>         the type of the object to parse      * @return the parsed object      * @throws IOException if anything went wrong during parsing or if the type or name cannot be derived      *                     from the field's name      */
DECL|method|parseTypedKeysObject
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|parseTypedKeysObject
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|String
name|delimiter
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|objectClass
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|String
name|currentFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|int
name|position
init|=
name|currentFieldName
operator|.
name|indexOf
argument_list|(
name|delimiter
argument_list|)
decl_stmt|;
if|if
condition|(
name|position
operator|>
literal|0
condition|)
block|{
name|String
name|type
init|=
name|currentFieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|position
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|currentFieldName
operator|.
name|substring
argument_list|(
name|position
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|namedObject
argument_list|(
name|objectClass
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Cannot parse object of class ["
operator|+
name|objectClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"] without type information. Set ["
operator|+
name|RestSearchAction
operator|.
name|TYPED_KEYS_PARAM
operator|+
literal|"] parameter on the request to ensure the"
operator|+
literal|" type information is added to the response output"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

