begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_enum
DECL|enum|Priority
specifier|public
enum|enum
name|Priority
block|{
DECL|enum constant|IMMEDIATE
name|IMMEDIATE
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
block|,
DECL|enum constant|URGENT
name|URGENT
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
DECL|enum constant|HIGH
name|HIGH
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
DECL|enum constant|NORMAL
name|NORMAL
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
DECL|enum constant|LOW
name|LOW
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|,
DECL|enum constant|LANGUID
name|LANGUID
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
block|;
DECL|method|readFrom
specifier|public
specifier|static
name|Priority
name|readFrom
parameter_list|(
name|StreamInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fromByte
argument_list|(
name|input
operator|.
name|readByte
argument_list|()
argument_list|)
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|StreamOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|writeByte
argument_list|(
name|priority
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|fromByte
specifier|public
specifier|static
name|Priority
name|fromByte
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
switch|switch
condition|(
name|b
condition|)
block|{
case|case
operator|-
literal|1
case|:
return|return
name|IMMEDIATE
return|;
case|case
literal|0
case|:
return|return
name|URGENT
return|;
case|case
literal|1
case|:
return|return
name|HIGH
return|;
case|case
literal|2
case|:
return|return
name|NORMAL
return|;
case|case
literal|3
case|:
return|return
name|LOW
return|;
case|case
literal|4
case|:
return|return
name|LANGUID
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't find priority for ["
operator|+
name|b
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|field|value
specifier|private
specifier|final
name|byte
name|value
decl_stmt|;
DECL|method|Priority
name|Priority
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|after
specifier|public
name|boolean
name|after
parameter_list|(
name|Priority
name|p
parameter_list|)
block|{
return|return
name|this
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|>
literal|0
return|;
block|}
DECL|method|sameOrAfter
specifier|public
name|boolean
name|sameOrAfter
parameter_list|(
name|Priority
name|p
parameter_list|)
block|{
return|return
name|this
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|>=
literal|0
return|;
block|}
block|}
end_enum

end_unit

