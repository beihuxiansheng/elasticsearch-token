begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|LocalTransportAddress
specifier|public
specifier|final
class|class
name|LocalTransportAddress
implements|implements
name|TransportAddress
block|{
DECL|field|TYPE_ID
specifier|public
specifier|static
specifier|final
name|short
name|TYPE_ID
init|=
literal|2
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|method|LocalTransportAddress
specifier|public
name|LocalTransportAddress
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|LocalTransportAddress
specifier|public
name|LocalTransportAddress
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|id
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|uniqueAddressTypeId
specifier|public
name|short
name|uniqueAddressTypeId
parameter_list|()
block|{
return|return
name|TYPE_ID
return|;
block|}
annotation|@
name|Override
DECL|method|sameHost
specifier|public
name|boolean
name|sameHost
parameter_list|(
name|TransportAddress
name|other
parameter_list|)
block|{
return|return
name|other
operator|instanceof
name|LocalTransportAddress
operator|&&
name|id
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|LocalTransportAddress
operator|)
name|other
operator|)
operator|.
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isLoopbackOrLinkLocalAddress
specifier|public
name|boolean
name|isLoopbackOrLinkLocalAddress
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getHost
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
literal|"local"
return|;
block|}
annotation|@
name|Override
DECL|method|getAddress
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
literal|"0.0.0.0"
return|;
comment|// see https://en.wikipedia.org/wiki/0.0.0.0
block|}
annotation|@
name|Override
DECL|method|getPort
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|LocalTransportAddress
name|that
init|=
operator|(
name|LocalTransportAddress
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|?
operator|!
name|id
operator|.
name|equals
argument_list|(
name|that
operator|.
name|id
argument_list|)
else|:
name|that
operator|.
name|id
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"local["
operator|+
name|id
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

