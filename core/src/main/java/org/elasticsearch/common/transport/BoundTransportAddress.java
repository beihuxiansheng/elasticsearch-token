begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A bounded transport address is a tuple of {@link TransportAddress}, one array that represents  * the addresses the transport is bound to, and the other is the published one that represents the address clients  * should communicate on.  *  *  */
end_comment

begin_class
DECL|class|BoundTransportAddress
specifier|public
class|class
name|BoundTransportAddress
implements|implements
name|Streamable
block|{
DECL|field|boundAddresses
specifier|private
name|TransportAddress
index|[]
name|boundAddresses
decl_stmt|;
DECL|field|publishAddress
specifier|private
name|TransportAddress
name|publishAddress
decl_stmt|;
DECL|method|BoundTransportAddress
name|BoundTransportAddress
parameter_list|()
block|{     }
DECL|method|BoundTransportAddress
specifier|public
name|BoundTransportAddress
parameter_list|(
name|TransportAddress
index|[]
name|boundAddresses
parameter_list|,
name|TransportAddress
name|publishAddress
parameter_list|)
block|{
if|if
condition|(
name|boundAddresses
operator|==
literal|null
operator|||
name|boundAddresses
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"at least one bound address must be provided"
argument_list|)
throw|;
block|}
name|this
operator|.
name|boundAddresses
operator|=
name|boundAddresses
expr_stmt|;
name|this
operator|.
name|publishAddress
operator|=
name|publishAddress
expr_stmt|;
block|}
DECL|method|boundAddresses
specifier|public
name|TransportAddress
index|[]
name|boundAddresses
parameter_list|()
block|{
return|return
name|boundAddresses
return|;
block|}
DECL|method|publishAddress
specifier|public
name|TransportAddress
name|publishAddress
parameter_list|()
block|{
return|return
name|publishAddress
return|;
block|}
DECL|method|readBoundTransportAddress
specifier|public
specifier|static
name|BoundTransportAddress
name|readBoundTransportAddress
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|BoundTransportAddress
name|addr
init|=
operator|new
name|BoundTransportAddress
argument_list|()
decl_stmt|;
name|addr
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|addr
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|boundAddressLength
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|boundAddresses
operator|=
operator|new
name|TransportAddress
index|[
name|boundAddressLength
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|boundAddressLength
condition|;
name|i
operator|++
control|)
block|{
name|boundAddresses
index|[
name|i
index|]
operator|=
name|TransportAddressSerializers
operator|.
name|addressFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|publishAddress
operator|=
name|TransportAddressSerializers
operator|.
name|addressFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|boundAddresses
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|TransportAddress
name|address
range|:
name|boundAddresses
control|)
block|{
name|TransportAddressSerializers
operator|.
name|addressToStream
argument_list|(
name|out
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
name|TransportAddressSerializers
operator|.
name|addressToStream
argument_list|(
name|out
argument_list|,
name|publishAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"publish_address {"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|publishAddress
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"}, bound_addresses "
argument_list|)
expr_stmt|;
name|boolean
name|firstAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TransportAddress
name|address
range|:
name|boundAddresses
control|)
block|{
if|if
condition|(
name|firstAdded
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstAdded
operator|=
literal|true
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
name|address
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

