begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|ReleasablePagedBytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|ByteArray
import|;
end_import

begin_comment
comment|/**  * An bytes stream output that allows providing a {@link BigArrays} instance  * expecting it to require releasing its content ({@link #bytes()}) once done.  *<p>  * Please note, closing this stream will release the bytes that are in use by any  * {@link ReleasablePagedBytesReference} returned from {@link #bytes()}, so this  * stream should only be closed after the bytes have been output or copied  * elsewhere.  */
end_comment

begin_class
DECL|class|ReleasableBytesStreamOutput
specifier|public
class|class
name|ReleasableBytesStreamOutput
extends|extends
name|BytesStreamOutput
implements|implements
name|Releasable
block|{
DECL|field|releasable
specifier|private
name|Releasable
name|releasable
decl_stmt|;
DECL|method|ReleasableBytesStreamOutput
specifier|public
name|ReleasableBytesStreamOutput
parameter_list|(
name|BigArrays
name|bigarrays
parameter_list|)
block|{
name|this
argument_list|(
name|BigArrays
operator|.
name|PAGE_SIZE_IN_BYTES
argument_list|,
name|bigarrays
argument_list|)
expr_stmt|;
block|}
DECL|method|ReleasableBytesStreamOutput
specifier|public
name|ReleasableBytesStreamOutput
parameter_list|(
name|int
name|expectedSize
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|)
block|{
name|super
argument_list|(
name|expectedSize
argument_list|,
name|bigArrays
argument_list|)
expr_stmt|;
name|this
operator|.
name|releasable
operator|=
name|Releasables
operator|.
name|releaseOnce
argument_list|(
name|this
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a {@link Releasable} implementation of a      * {@link org.elasticsearch.common.bytes.BytesReference} that represents the current state of      * the bytes in the stream.      */
annotation|@
name|Override
DECL|method|bytes
specifier|public
name|ReleasablePagedBytesReference
name|bytes
parameter_list|()
block|{
return|return
operator|new
name|ReleasablePagedBytesReference
argument_list|(
name|bigArrays
argument_list|,
name|bytes
argument_list|,
name|count
argument_list|,
name|releasable
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|releasable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ensureCapacity
name|void
name|ensureCapacity
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
specifier|final
name|ByteArray
name|prevBytes
init|=
name|this
operator|.
name|bytes
decl_stmt|;
name|super
operator|.
name|ensureCapacity
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevBytes
operator|!=
name|this
operator|.
name|bytes
condition|)
block|{
comment|// re-create the releasable with the new reference
name|releasable
operator|=
name|Releasables
operator|.
name|releaseOnce
argument_list|(
name|this
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
specifier|final
name|ByteArray
name|prevBytes
init|=
name|this
operator|.
name|bytes
decl_stmt|;
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|prevBytes
operator|!=
name|this
operator|.
name|bytes
condition|)
block|{
comment|// re-create the releasable with the new reference
name|releasable
operator|=
name|Releasables
operator|.
name|releaseOnce
argument_list|(
name|this
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

