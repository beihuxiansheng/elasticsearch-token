begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Wraps a {@link StreamInput} and associates it with a {@link NamedWriteableRegistry}  */
end_comment

begin_class
DECL|class|NamedWriteableAwareStreamInput
specifier|public
class|class
name|NamedWriteableAwareStreamInput
extends|extends
name|FilterStreamInput
block|{
DECL|field|namedWriteableRegistry
specifier|private
specifier|final
name|NamedWriteableRegistry
name|namedWriteableRegistry
decl_stmt|;
DECL|method|NamedWriteableAwareStreamInput
specifier|public
name|NamedWriteableAwareStreamInput
parameter_list|(
name|StreamInput
name|delegate
parameter_list|,
name|NamedWriteableRegistry
name|namedWriteableRegistry
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|namedWriteableRegistry
operator|=
name|namedWriteableRegistry
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readNamedWriteable
argument_list|<
name|C
extends|extends
name|NamedWriteable
argument_list|<
name|?
argument_list|>
argument_list|>
name|C
name|readNamedWriteable
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|categoryClass
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|readString
argument_list|()
decl_stmt|;
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|C
argument_list|>
name|reader
init|=
name|namedWriteableRegistry
operator|.
name|getReader
argument_list|(
name|categoryClass
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|C
name|c
init|=
name|reader
operator|.
name|read
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Writeable.Reader ["
operator|+
name|reader
operator|+
literal|"] returned null which is not allowed and probably means it screwed up the stream."
argument_list|)
throw|;
block|}
assert|assert
name|name
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getWriteableName
argument_list|()
argument_list|)
operator|:
name|c
operator|+
literal|" claims to have a different name ["
operator|+
name|c
operator|.
name|getWriteableName
argument_list|()
operator|+
literal|"] than it was read from ["
operator|+
name|name
operator|+
literal|"]."
assert|;
return|return
name|c
return|;
block|}
block|}
end_class

end_unit

