begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooNewException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooOldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AtomicMoveNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryNotEmptyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystemException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystemLoopException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NotDirectoryException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|IntFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
operator|.
name|readStackTrace
import|;
end_import

begin_comment
comment|/**  * A stream from this node to another node. Technically, it can also be streamed to a byte array but that is mostly for testing.  *  * This class's methods are optimized so you can put the methods that read and write a class next to each other and you can scan them  * visually for differences. That means that most variables should be read and written in a single line so even large objects fit both  * reading and writing on the screen. It also means that the methods on this class are named very similarly to {@link StreamOutput}. Finally  * it means that the "barrier to entry" for adding new methods to this class is relatively low even though it is a shared class with code  * everywhere. That being said, this class deals primarily with {@code List}s rather than Arrays. For the most part calls should adapt to  * lists, either by storing {@code List}s internally or just converting to and from a {@code List} when calling. This comment is repeated  * on {@link StreamInput}.  */
end_comment

begin_class
DECL|class|StreamInput
specifier|public
specifier|abstract
class|class
name|StreamInput
extends|extends
name|InputStream
block|{
DECL|field|version
specifier|private
name|Version
name|version
init|=
name|Version
operator|.
name|CURRENT
decl_stmt|;
comment|/**      * The version of the node on the other side of this stream.      */
DECL|method|getVersion
specifier|public
name|Version
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
comment|/**      * Set the version of the node on the other side of this stream.      */
DECL|method|setVersion
specifier|public
name|void
name|setVersion
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/**      * Reads and returns a single byte.      */
DECL|method|readByte
specifier|public
specifier|abstract
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Reads a specified number of bytes into an array at the specified offset.      *      * @param b      the array to read bytes into      * @param offset the offset in the array to start storing bytes      * @param len    the number of bytes to read      */
DECL|method|readBytes
specifier|public
specifier|abstract
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Reads a bytes reference from this stream, might hold an actual reference to the underlying      * bytes of the stream.      */
DECL|method|readBytesReference
specifier|public
name|BytesReference
name|readBytesReference
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readArraySize
argument_list|()
decl_stmt|;
return|return
name|readBytesReference
argument_list|(
name|length
argument_list|)
return|;
block|}
comment|/**      * Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this      * only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and      * {@link StreamOutput#writeBytesReference(BytesReference)} if you do not.      */
annotation|@
name|Nullable
DECL|method|readOptionalBytesReference
specifier|public
name|BytesReference
name|readOptionalBytesReference
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readVInt
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|length
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|readBytesReference
argument_list|(
name|length
argument_list|)
return|;
block|}
comment|/**      * Reads a bytes reference from this stream, might hold an actual reference to the underlying      * bytes of the stream.      */
DECL|method|readBytesReference
specifier|public
name|BytesReference
name|readBytesReference
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|BytesArray
operator|.
name|EMPTY
return|;
block|}
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|readBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|BytesArray
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
return|;
block|}
DECL|method|readBytesRef
specifier|public
name|BytesRef
name|readBytesRef
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readArraySize
argument_list|()
decl_stmt|;
return|return
name|readBytesRef
argument_list|(
name|length
argument_list|)
return|;
block|}
DECL|method|readBytesRef
specifier|public
name|BytesRef
name|readBytesRef
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|BytesRef
argument_list|()
return|;
block|}
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|readBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
return|;
block|}
DECL|method|readFully
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|readShort
specifier|public
name|short
name|readShort
parameter_list|()
throws|throws
name|IOException
block|{
return|return
call|(
name|short
call|)
argument_list|(
operator|(
operator|(
name|readByte
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|readByte
argument_list|()
operator|&
literal|0xFF
operator|)
argument_list|)
return|;
block|}
comment|/**      * Reads four bytes and returns an int.      */
DECL|method|readInt
specifier|public
name|int
name|readInt
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|readByte
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|readByte
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|readByte
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|readByte
argument_list|()
operator|&
literal|0xFF
operator|)
return|;
block|}
comment|/**      * Reads an int stored in variable-length format.  Reads between one and      * five bytes.  Smaller values take fewer bytes.  Negative numbers      * will always use all 5 bytes and are therefore better serialized      * using {@link #readInt}      */
DECL|method|readVInt
specifier|public
name|int
name|readVInt
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
name|b
init|=
name|readByte
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|b
operator|&
literal|0x7F
decl_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7F
operator|)
operator|<<
literal|7
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7F
operator|)
operator|<<
literal|14
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7F
operator|)
operator|<<
literal|21
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
assert|assert
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
assert|;
return|return
name|i
operator||
operator|(
operator|(
name|b
operator|&
literal|0x7F
operator|)
operator|<<
literal|28
operator|)
return|;
block|}
comment|/**      * Reads eight bytes and returns a long.      */
DECL|method|readLong
specifier|public
name|long
name|readLong
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
operator|(
name|long
operator|)
name|readInt
argument_list|()
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
name|readInt
argument_list|()
operator|&
literal|0xFFFFFFFFL
operator|)
return|;
block|}
comment|/**      * Reads a long stored in variable-length format. Reads between one and ten bytes. Smaller values take fewer bytes. Negative numbers      * are encoded in ten bytes so prefer {@link #readLong()} or {@link #readZLong()} for negative numbers.      */
DECL|method|readVLong
specifier|public
name|long
name|readVLong
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
name|b
init|=
name|readByte
argument_list|()
decl_stmt|;
name|long
name|i
init|=
name|b
operator|&
literal|0x7FL
decl_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|7
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|14
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|21
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|28
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|35
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|42
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|49
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
operator|(
name|b
operator|&
literal|0x7FL
operator|)
operator|<<
literal|56
operator|)
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|b
operator|=
name|readByte
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|0
operator|&&
name|b
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid vlong ("
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|b
argument_list|)
operator|+
literal|"<< 63) | "
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|i
argument_list|)
argument_list|)
throw|;
block|}
name|i
operator||=
operator|(
operator|(
name|long
operator|)
name|b
operator|)
operator|<<
literal|63
expr_stmt|;
return|return
name|i
return|;
block|}
DECL|method|readZLong
specifier|public
name|long
name|readZLong
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|accumulator
init|=
literal|0L
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|long
name|currentByte
decl_stmt|;
while|while
condition|(
operator|(
operator|(
name|currentByte
operator|=
name|readByte
argument_list|()
operator|)
operator|&
literal|0x80L
operator|)
operator|!=
literal|0
condition|)
block|{
name|accumulator
operator||=
operator|(
name|currentByte
operator|&
literal|0x7F
operator|)
operator|<<
name|i
expr_stmt|;
name|i
operator|+=
literal|7
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|63
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"variable-length stream is too long"
argument_list|)
throw|;
block|}
block|}
return|return
name|BitUtil
operator|.
name|zigZagDecode
argument_list|(
name|accumulator
operator||
operator|(
name|currentByte
operator|<<
name|i
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|readOptionalLong
specifier|public
name|Long
name|readOptionalLong
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|readLong
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
DECL|method|readOptionalText
specifier|public
name|Text
name|readOptionalText
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Text
argument_list|(
name|readBytesReference
argument_list|(
name|length
argument_list|)
argument_list|)
return|;
block|}
DECL|method|readText
specifier|public
name|Text
name|readText
parameter_list|()
throws|throws
name|IOException
block|{
comment|// use StringAndBytes so we can cache the string if its ever converted to it
name|int
name|length
init|=
name|readInt
argument_list|()
decl_stmt|;
return|return
operator|new
name|Text
argument_list|(
name|readBytesReference
argument_list|(
name|length
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|readOptionalString
specifier|public
name|String
name|readOptionalString
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|readString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
DECL|method|readOptionalFloat
specifier|public
name|Float
name|readOptionalFloat
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|readFloat
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
DECL|method|readOptionalVInt
specifier|public
name|Integer
name|readOptionalVInt
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|readVInt
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|// we don't use a CharsRefBuilder since we exactly know the size of the character array up front
comment|// this prevents calling grow for every character since we don't need this
DECL|field|spare
specifier|private
specifier|final
name|CharsRef
name|spare
init|=
operator|new
name|CharsRef
argument_list|()
decl_stmt|;
DECL|method|readString
specifier|public
name|String
name|readString
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO it would be nice to not call readByte() for every character but we don't know how much to read up-front
comment|// we can make the loop much more complicated but that won't buy us much compared to the bounds checks in readByte()
specifier|final
name|int
name|charCount
init|=
name|readArraySize
argument_list|()
decl_stmt|;
if|if
condition|(
name|spare
operator|.
name|chars
operator|.
name|length
operator|<
name|charCount
condition|)
block|{
comment|// we don't use ArrayUtils.grow since there is no need to copy the array
name|spare
operator|.
name|chars
operator|=
operator|new
name|char
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|charCount
argument_list|,
name|Character
operator|.
name|BYTES
argument_list|)
index|]
expr_stmt|;
block|}
name|spare
operator|.
name|length
operator|=
name|charCount
expr_stmt|;
specifier|final
name|char
index|[]
name|buffer
init|=
name|spare
operator|.
name|chars
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|c
init|=
name|readByte
argument_list|()
operator|&
literal|0xff
decl_stmt|;
switch|switch
condition|(
name|c
operator|>>
literal|4
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
case|case
literal|2
case|:
case|case
literal|3
case|:
case|case
literal|4
case|:
case|case
literal|5
case|:
case|case
literal|6
case|:
case|case
literal|7
case|:
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
break|break;
case|case
literal|12
case|:
case|case
literal|13
case|:
name|buffer
index|[
name|i
index|]
operator|=
operator|(
call|(
name|char
call|)
argument_list|(
operator|(
name|c
operator|&
literal|0x1F
operator|)
operator|<<
literal|6
operator||
name|readByte
argument_list|()
operator|&
literal|0x3F
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
name|buffer
index|[
name|i
index|]
operator|=
operator|(
call|(
name|char
call|)
argument_list|(
operator|(
name|c
operator|&
literal|0x0F
operator|)
operator|<<
literal|12
operator||
operator|(
name|readByte
argument_list|()
operator|&
literal|0x3F
operator|)
operator|<<
literal|6
operator||
operator|(
name|readByte
argument_list|()
operator|&
literal|0x3F
operator|)
operator|<<
literal|0
argument_list|)
operator|)
expr_stmt|;
break|break;
default|default:
operator|new
name|AssertionError
argument_list|(
literal|"unexpected character: "
operator|+
name|c
operator|+
literal|" hex: "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|spare
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|readFloat
specifier|public
specifier|final
name|float
name|readFloat
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|readInt
argument_list|()
argument_list|)
return|;
block|}
DECL|method|readDouble
specifier|public
specifier|final
name|double
name|readDouble
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|readLong
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|readOptionalDouble
specifier|public
specifier|final
name|Double
name|readOptionalDouble
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|readDouble
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Reads a boolean.      */
DECL|method|readBoolean
specifier|public
specifier|final
name|boolean
name|readBoolean
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readBoolean
argument_list|(
name|readByte
argument_list|()
argument_list|)
return|;
block|}
DECL|method|readBoolean
specifier|private
name|boolean
name|readBoolean
parameter_list|(
specifier|final
name|byte
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"unexpected byte [0x%02x]"
argument_list|,
name|value
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nullable
DECL|method|readOptionalBoolean
specifier|public
specifier|final
name|Boolean
name|readOptionalBoolean
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
name|value
init|=
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|2
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|readBoolean
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
comment|/**      * Closes the stream to further operations.      */
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|available
specifier|public
specifier|abstract
name|int
name|available
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|readStringArray
specifier|public
name|String
index|[]
name|readStringArray
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|readArraySize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
name|Strings
operator|.
name|EMPTY_ARRAY
return|;
block|}
name|String
index|[]
name|ret
init|=
operator|new
name|String
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|readString
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Nullable
DECL|method|readOptionalStringArray
specifier|public
name|String
index|[]
name|readOptionalStringArray
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|readStringArray
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|readMap
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|readMap
parameter_list|(
name|Writeable
operator|.
name|Reader
argument_list|<
name|K
argument_list|>
name|keyReader
parameter_list|,
name|Writeable
operator|.
name|Reader
argument_list|<
name|V
argument_list|>
name|valueReader
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|K
name|key
init|=
name|keyReader
operator|.
name|read
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|V
name|value
init|=
name|valueReader
operator|.
name|read
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**      * Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s.      *<pre><code>      * Map&lt;String, List&lt;String&gt;&gt; map = in.readMapOfLists(StreamInput::readString, StreamInput::readString);      *</code></pre>      *      * @param keyReader The key reader      * @param valueReader The value reader      * @return Never {@code null}.      */
DECL|method|readMapOfLists
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|readMapOfLists
parameter_list|(
specifier|final
name|Writeable
operator|.
name|Reader
argument_list|<
name|K
argument_list|>
name|keyReader
parameter_list|,
specifier|final
name|Writeable
operator|.
name|Reader
argument_list|<
name|V
argument_list|>
name|valueReader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|size
init|=
name|readArraySize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|keyReader
operator|.
name|read
argument_list|(
name|this
argument_list|)
argument_list|,
name|readList
argument_list|(
name|valueReader
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|readMap
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|readGenericValue
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Nullable
DECL|method|readGenericValue
specifier|public
name|Object
name|readGenericValue
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
name|type
init|=
name|readByte
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
operator|-
literal|1
case|:
return|return
literal|null
return|;
case|case
literal|0
case|:
return|return
name|readString
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|readInt
argument_list|()
return|;
case|case
literal|2
case|:
return|return
name|readLong
argument_list|()
return|;
case|case
literal|3
case|:
return|return
name|readFloat
argument_list|()
return|;
case|case
literal|4
case|:
return|return
name|readDouble
argument_list|()
return|;
case|case
literal|5
case|:
return|return
name|readBoolean
argument_list|()
return|;
case|case
literal|6
case|:
return|return
name|readByteArray
argument_list|()
return|;
case|case
literal|7
case|:
return|return
name|readArrayList
argument_list|()
return|;
case|case
literal|8
case|:
return|return
name|readArray
argument_list|()
return|;
case|case
literal|9
case|:
return|return
name|readLinkedHashMap
argument_list|()
return|;
case|case
literal|10
case|:
return|return
name|readHashMap
argument_list|()
return|;
case|case
literal|11
case|:
return|return
name|readByte
argument_list|()
return|;
case|case
literal|12
case|:
return|return
name|readDate
argument_list|()
return|;
case|case
literal|13
case|:
return|return
name|readDateTime
argument_list|()
return|;
case|case
literal|14
case|:
return|return
name|readBytesReference
argument_list|()
return|;
case|case
literal|15
case|:
return|return
name|readText
argument_list|()
return|;
case|case
literal|16
case|:
return|return
name|readShort
argument_list|()
return|;
case|case
literal|17
case|:
return|return
name|readIntArray
argument_list|()
return|;
case|case
literal|18
case|:
return|return
name|readLongArray
argument_list|()
return|;
case|case
literal|19
case|:
return|return
name|readFloatArray
argument_list|()
return|;
case|case
literal|20
case|:
return|return
name|readDoubleArray
argument_list|()
return|;
case|case
literal|21
case|:
return|return
name|readBytesRef
argument_list|()
return|;
case|case
literal|22
case|:
return|return
name|readGeoPoint
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't read unknown type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readArrayList
specifier|private
name|List
name|readArrayList
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|readGenericValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|method|readDateTime
specifier|private
name|DateTime
name|readDateTime
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|timeZoneId
init|=
name|readString
argument_list|()
decl_stmt|;
return|return
operator|new
name|DateTime
argument_list|(
name|readLong
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|timeZoneId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|readArray
specifier|private
name|Object
index|[]
name|readArray
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|size8
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|Object
index|[]
name|list8
init|=
operator|new
name|Object
index|[
name|size8
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size8
condition|;
name|i
operator|++
control|)
block|{
name|list8
index|[
name|i
index|]
operator|=
name|readGenericValue
argument_list|()
expr_stmt|;
block|}
return|return
name|list8
return|;
block|}
DECL|method|readLinkedHashMap
specifier|private
name|Map
name|readLinkedHashMap
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|size9
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|Map
name|map9
init|=
operator|new
name|LinkedHashMap
argument_list|(
name|size9
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size9
condition|;
name|i
operator|++
control|)
block|{
name|map9
operator|.
name|put
argument_list|(
name|readString
argument_list|()
argument_list|,
name|readGenericValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map9
return|;
block|}
DECL|method|readHashMap
specifier|private
name|Map
name|readHashMap
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|size10
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|Map
name|map10
init|=
operator|new
name|HashMap
argument_list|(
name|size10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size10
condition|;
name|i
operator|++
control|)
block|{
name|map10
operator|.
name|put
argument_list|(
name|readString
argument_list|()
argument_list|,
name|readGenericValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map10
return|;
block|}
DECL|method|readDate
specifier|private
name|Date
name|readDate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Date
argument_list|(
name|readLong
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Reads a {@link GeoPoint} from this stream input      */
DECL|method|readGeoPoint
specifier|public
name|GeoPoint
name|readGeoPoint
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|GeoPoint
argument_list|(
name|readDouble
argument_list|()
argument_list|,
name|readDouble
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Read a {@linkplain DateTimeZone}.      */
DECL|method|readTimeZone
specifier|public
name|DateTimeZone
name|readTimeZone
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|readString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Read an optional {@linkplain DateTimeZone}.      */
DECL|method|readOptionalTimeZone
specifier|public
name|DateTimeZone
name|readOptionalTimeZone
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|readString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|readIntArray
specifier|public
name|int
index|[]
name|readIntArray
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|readInt
argument_list|()
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|method|readVIntArray
specifier|public
name|int
index|[]
name|readVIntArray
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|readVInt
argument_list|()
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|method|readLongArray
specifier|public
name|long
index|[]
name|readLongArray
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|readLong
argument_list|()
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|method|readVLongArray
specifier|public
name|long
index|[]
name|readVLongArray
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|readVLong
argument_list|()
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|method|readFloatArray
specifier|public
name|float
index|[]
name|readFloatArray
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|float
index|[]
name|values
init|=
operator|new
name|float
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|readFloat
argument_list|()
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|method|readDoubleArray
specifier|public
name|double
index|[]
name|readDoubleArray
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|readDouble
argument_list|()
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|method|readByteArray
specifier|public
name|byte
index|[]
name|readByteArray
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|length
init|=
name|readArraySize
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|readBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
DECL|method|readArray
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|readArray
parameter_list|(
name|Writeable
operator|.
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|,
name|IntFunction
argument_list|<
name|T
index|[]
argument_list|>
name|arraySupplier
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|T
index|[]
name|values
init|=
name|arraySupplier
operator|.
name|apply
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|reader
operator|.
name|read
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|method|readOptionalArray
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|readOptionalArray
parameter_list|(
name|Writeable
operator|.
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|,
name|IntFunction
argument_list|<
name|T
index|[]
argument_list|>
name|arraySupplier
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readBoolean
argument_list|()
condition|?
name|readArray
argument_list|(
name|reader
argument_list|,
name|arraySupplier
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Serializes a potential null value.      */
annotation|@
name|Nullable
DECL|method|readOptionalStreamable
specifier|public
parameter_list|<
name|T
extends|extends
name|Streamable
parameter_list|>
name|T
name|readOptionalStreamable
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|supplier
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
name|T
name|streamable
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|streamable
operator|.
name|readFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|streamable
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Nullable
DECL|method|readOptionalWriteable
specifier|public
parameter_list|<
name|T
extends|extends
name|Writeable
parameter_list|>
name|T
name|readOptionalWriteable
parameter_list|(
name|Writeable
operator|.
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
name|T
name|t
init|=
name|reader
operator|.
name|read
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Writeable.Reader ["
operator|+
name|reader
operator|+
literal|"] returned null which is not allowed and probably means it screwed up the stream."
argument_list|)
throw|;
block|}
return|return
name|t
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|readException
specifier|public
parameter_list|<
name|T
extends|extends
name|Exception
parameter_list|>
name|T
name|readException
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|key
init|=
name|readVInt
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|key
condition|)
block|{
case|case
literal|0
case|:
specifier|final
name|int
name|ord
init|=
name|readVInt
argument_list|()
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|ElasticsearchException
operator|.
name|readException
argument_list|(
name|this
argument_list|,
name|ord
argument_list|)
return|;
case|case
literal|1
case|:
name|String
name|msg1
init|=
name|readOptionalString
argument_list|()
decl_stmt|;
name|String
name|resource1
init|=
name|readOptionalString
argument_list|()
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|CorruptIndexException
argument_list|(
name|msg1
argument_list|,
name|resource1
argument_list|,
name|readException
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|2
case|:
name|String
name|resource2
init|=
name|readOptionalString
argument_list|()
decl_stmt|;
name|int
name|version2
init|=
name|readInt
argument_list|()
decl_stmt|;
name|int
name|minVersion2
init|=
name|readInt
argument_list|()
decl_stmt|;
name|int
name|maxVersion2
init|=
name|readInt
argument_list|()
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|IndexFormatTooNewException
argument_list|(
name|resource2
argument_list|,
name|version2
argument_list|,
name|minVersion2
argument_list|,
name|maxVersion2
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|3
case|:
name|String
name|resource3
init|=
name|readOptionalString
argument_list|()
decl_stmt|;
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|version3
init|=
name|readInt
argument_list|()
decl_stmt|;
name|int
name|minVersion3
init|=
name|readInt
argument_list|()
decl_stmt|;
name|int
name|maxVersion3
init|=
name|readInt
argument_list|()
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|IndexFormatTooOldException
argument_list|(
name|resource3
argument_list|,
name|version3
argument_list|,
name|minVersion3
argument_list|,
name|maxVersion3
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|version3
init|=
name|readOptionalString
argument_list|()
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|IndexFormatTooOldException
argument_list|(
name|resource3
argument_list|,
name|version3
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
block|}
case|case
literal|4
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|NullPointerException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|5
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|NumberFormatException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|6
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|,
name|readException
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|7
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|AlreadyClosedException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|,
name|readException
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|8
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|EOFException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|9
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|SecurityException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|,
name|readException
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|10
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|StringIndexOutOfBoundsException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|11
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|12
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|FileNotFoundException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|13
case|:
specifier|final
name|int
name|subclass
init|=
name|readVInt
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
name|readOptionalString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|other
init|=
name|readOptionalString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|reason
init|=
name|readOptionalString
argument_list|()
decl_stmt|;
name|readOptionalString
argument_list|()
expr_stmt|;
comment|// skip the msg - it's composed from file, other and reason
specifier|final
name|Exception
name|exception
decl_stmt|;
switch|switch
condition|(
name|subclass
condition|)
block|{
case|case
literal|0
case|:
name|exception
operator|=
operator|new
name|NoSuchFileException
argument_list|(
name|file
argument_list|,
name|other
argument_list|,
name|reason
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|exception
operator|=
operator|new
name|NotDirectoryException
argument_list|(
name|file
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|exception
operator|=
operator|new
name|DirectoryNotEmptyException
argument_list|(
name|file
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|exception
operator|=
operator|new
name|AtomicMoveNotSupportedException
argument_list|(
name|file
argument_list|,
name|other
argument_list|,
name|reason
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|exception
operator|=
operator|new
name|FileAlreadyExistsException
argument_list|(
name|file
argument_list|,
name|other
argument_list|,
name|reason
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|exception
operator|=
operator|new
name|AccessDeniedException
argument_list|(
name|file
argument_list|,
name|other
argument_list|,
name|reason
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|exception
operator|=
operator|new
name|FileSystemLoopException
argument_list|(
name|file
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|exception
operator|=
operator|new
name|FileSystemException
argument_list|(
name|file
argument_list|,
name|other
argument_list|,
name|reason
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown FileSystemException with index "
operator|+
name|subclass
argument_list|)
throw|;
block|}
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
name|exception
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|14
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|,
name|readException
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|15
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|LockObtainFailedException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|,
name|readException
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|16
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|InterruptedException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
case|case
literal|17
case|:
return|return
operator|(
name|T
operator|)
name|readStackTrace
argument_list|(
operator|new
name|IOException
argument_list|(
name|readOptionalString
argument_list|()
argument_list|,
name|readException
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
default|default:
assert|assert
literal|false
operator|:
literal|"no such exception for id: "
operator|+
name|key
assert|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Reads a {@link NamedWriteable} from the current stream, by first reading its name and then looking for      * the corresponding entry in the registry by name, so that the proper object can be read and returned.      * Default implementation throws {@link UnsupportedOperationException} as StreamInput doesn't hold a registry.      * Use {@link FilterInputStream} instead which wraps a stream and supports a {@link NamedWriteableRegistry} too.      */
annotation|@
name|Nullable
DECL|method|readNamedWriteable
specifier|public
parameter_list|<
name|C
extends|extends
name|NamedWriteable
parameter_list|>
name|C
name|readNamedWriteable
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Class
argument_list|<
name|C
argument_list|>
name|categoryClass
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"can't read named writeable from StreamInput"
argument_list|)
throw|;
block|}
comment|/**      * Reads an optional {@link NamedWriteable}.      */
annotation|@
name|Nullable
DECL|method|readOptionalNamedWriteable
specifier|public
parameter_list|<
name|C
extends|extends
name|NamedWriteable
parameter_list|>
name|C
name|readOptionalNamedWriteable
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|categoryClass
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|readNamedWriteable
argument_list|(
name|categoryClass
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Read a {@link List} of {@link Streamable} objects, using the {@code constructor} to instantiate each instance.      *<p>      * This is expected to take the form:      *<code>      * List&lt;MyStreamableClass&gt; list = in.readStreamList(MyStreamableClass::new);      *</code>      *      * @param constructor Streamable instance creator      * @return Never {@code null}.      * @throws IOException if any step fails      */
DECL|method|readStreamableList
specifier|public
parameter_list|<
name|T
extends|extends
name|Streamable
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|readStreamableList
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|constructor
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|builder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|T
name|instance
init|=
name|constructor
operator|.
name|get
argument_list|()
decl_stmt|;
name|instance
operator|.
name|readFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|/**      * Reads a list of objects      */
DECL|method|readList
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|readList
parameter_list|(
name|Writeable
operator|.
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|builder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|reader
operator|.
name|read
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|/**      * Reads a list of {@link NamedWriteable}s.      */
DECL|method|readNamedWriteableList
specifier|public
parameter_list|<
name|T
extends|extends
name|NamedWriteable
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|readNamedWriteableList
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|categoryClass
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
name|readArraySize
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|builder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|readNamedWriteable
argument_list|(
name|categoryClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|wrap
specifier|public
specifier|static
name|StreamInput
name|wrap
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|wrap
specifier|public
specifier|static
name|StreamInput
name|wrap
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|InputStreamStreamInput
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Reads a vint via {@link #readVInt()} and applies basic checks to ensure the read array size is sane.      * This method uses {@link #ensureCanReadBytes(int)} to ensure this stream has enough bytes to read for the read array size.      */
DECL|method|readArraySize
specifier|private
name|int
name|readArraySize
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|arraySize
init|=
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|arraySize
operator|>
name|ArrayUtil
operator|.
name|MAX_ARRAY_LENGTH
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"array length must be<= to "
operator|+
name|ArrayUtil
operator|.
name|MAX_ARRAY_LENGTH
operator|+
literal|" but was: "
operator|+
name|arraySize
argument_list|)
throw|;
block|}
if|if
condition|(
name|arraySize
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|NegativeArraySizeException
argument_list|(
literal|"array size must be positive but was: "
operator|+
name|arraySize
argument_list|)
throw|;
block|}
comment|// lets do a sanity check that if we are reading an array size that is bigger that the remaining bytes we can safely
comment|// throw an exception instead of allocating the array based on the size. A simple corrutpted byte can make a node go OOM
comment|// if the size is large and for perf reasons we allocate arrays ahead of time
name|ensureCanReadBytes
argument_list|(
name|arraySize
argument_list|)
expr_stmt|;
return|return
name|arraySize
return|;
block|}
comment|/**      * This method throws an {@link EOFException} if the given number of bytes can not be read from the this stream. This method might      * be a no-op depending on the underlying implementation if the information of the remaining bytes is not present.      */
DECL|method|ensureCanReadBytes
specifier|protected
specifier|abstract
name|void
name|ensureCanReadBytes
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|EOFException
function_decl|;
block|}
end_class

end_unit

