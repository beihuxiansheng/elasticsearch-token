begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_comment
comment|/**  * Utilities for creating a Path from names,  * or accessing the default FileSystem.  *<p>  * This class allows the default filesystem to  * be changed during tests.  */
end_comment

begin_class
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"accesses the default filesystem by design"
argument_list|)
comment|// TODO: can we move this to the .env package and make it package-private?
DECL|class|PathUtils
specifier|public
specifier|final
class|class
name|PathUtils
block|{
comment|/** no instantiation */
DECL|method|PathUtils
specifier|private
name|PathUtils
parameter_list|()
block|{}
comment|/** the actual JDK default */
DECL|field|ACTUAL_DEFAULT
specifier|static
specifier|final
name|FileSystem
name|ACTUAL_DEFAULT
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
decl_stmt|;
comment|/** can be changed by tests */
DECL|field|DEFAULT
specifier|static
specifier|volatile
name|FileSystem
name|DEFAULT
init|=
name|ACTUAL_DEFAULT
decl_stmt|;
comment|/**      * Returns a {@code Path} from name components.      *<p>      * This works just like {@code Paths.get()}.      * Remember: just like {@code Paths.get()} this is NOT A STRING CONCATENATION      * UTILITY FUNCTION.      *<p>      * Remember: this should almost never be used. Usually resolve      * a path against an existing one!      */
DECL|method|get
specifier|public
specifier|static
name|Path
name|get
parameter_list|(
name|String
name|first
parameter_list|,
name|String
modifier|...
name|more
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|DEFAULT
argument_list|,
name|first
argument_list|,
name|more
argument_list|)
return|;
block|}
comment|/**      * Returns a {@code Path} from name components against the given      * {@code FileSystem}.      *<p>      * This works just like {@code Paths.get()}.      * Remember: just like {@code Paths.get()} this is NOT A STRING CONCATENATION      * UTILITY FUNCTION.      *<p>      * Remember: this should almost never be used. Usually resolve      * a path against an existing one!      *      * @param fs    the given {@code FileSystem}      * @param first the first path component      * @param more  the remaining path components      * @return a path      */
DECL|method|get
specifier|public
specifier|static
name|Path
name|get
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|first
parameter_list|,
name|String
modifier|...
name|more
parameter_list|)
block|{
return|return
name|fs
operator|.
name|getPath
argument_list|(
name|first
argument_list|,
name|more
argument_list|)
return|;
block|}
comment|/**      * Returns a {@code Path} from a URI      *<p>      * This works just like {@code Paths.get()}.      *<p>      * Remember: this should almost never be used. Usually resolve      * a path against an existing one!      */
DECL|method|get
specifier|public
specifier|static
name|Path
name|get
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
return|return
name|DEFAULT
operator|.
name|provider
argument_list|()
operator|.
name|getPath
argument_list|(
name|uri
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
comment|/**      * Tries to resolve the given path against the list of available roots.      *      * If path starts with one of the listed roots, it returned back by this method, otherwise null is returned.      */
DECL|method|get
specifier|public
specifier|static
name|Path
name|get
parameter_list|(
name|Path
index|[]
name|roots
parameter_list|,
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|Path
name|root
range|:
name|roots
control|)
block|{
name|Path
name|normalizedRoot
init|=
name|root
operator|.
name|normalize
argument_list|()
decl_stmt|;
name|Path
name|normalizedPath
init|=
name|normalizedRoot
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
operator|.
name|normalize
argument_list|()
decl_stmt|;
if|if
condition|(
name|normalizedPath
operator|.
name|startsWith
argument_list|(
name|normalizedRoot
argument_list|)
condition|)
block|{
return|return
name|normalizedPath
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Tries to resolve the given file uri against the list of available roots.      *      * If uri starts with one of the listed roots, it returned back by this method, otherwise null is returned.      */
DECL|method|get
specifier|public
specifier|static
name|Path
name|get
parameter_list|(
name|Path
index|[]
name|roots
parameter_list|,
name|URI
name|uri
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|roots
argument_list|,
name|PathUtils
operator|.
name|get
argument_list|(
name|uri
argument_list|)
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the default FileSystem.      */
DECL|method|getDefaultFileSystem
specifier|public
specifier|static
name|FileSystem
name|getDefaultFileSystem
parameter_list|()
block|{
return|return
name|DEFAULT
return|;
block|}
block|}
end_class

end_unit

