begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Registry for {@link NamedWriteable} objects. Allows to register and retrieve prototype instances of writeable objects  * given their name.  */
end_comment

begin_class
DECL|class|NamedWriteableRegistry
specifier|public
class|class
name|NamedWriteableRegistry
block|{
DECL|field|registry
specifier|private
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|InnerRegistry
argument_list|<
name|?
argument_list|>
argument_list|>
name|registry
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Register a {@link NamedWriteable} given its category, its name, and a function to read it from the stream.      *      * This method suppresses the rawtypes warning because it intentionally using NamedWriteable instead of {@code NamedWriteable<T>} so it      * is easier to use and because we might be able to drop the type parameter from NamedWriteable entirely some day.      */
DECL|method|register
specifier|public
specifier|synchronized
parameter_list|<
name|T
extends|extends
name|NamedWriteable
parameter_list|>
name|void
name|register
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|categoryClass
parameter_list|,
name|String
name|name
parameter_list|,
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|reader
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|InnerRegistry
argument_list|<
name|T
argument_list|>
name|innerRegistry
init|=
operator|(
name|InnerRegistry
argument_list|<
name|T
argument_list|>
operator|)
name|registry
operator|.
name|get
argument_list|(
name|categoryClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerRegistry
operator|==
literal|null
condition|)
block|{
name|innerRegistry
operator|=
operator|new
name|InnerRegistry
argument_list|<>
argument_list|(
name|categoryClass
argument_list|)
expr_stmt|;
name|registry
operator|.
name|put
argument_list|(
name|categoryClass
argument_list|,
name|innerRegistry
argument_list|)
expr_stmt|;
block|}
name|innerRegistry
operator|.
name|register
argument_list|(
name|name
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a prototype of the {@link NamedWriteable} object identified by the name provided as argument and its category      */
DECL|method|getReader
specifier|public
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getReader
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|categoryClass
parameter_list|,
name|String
name|name
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|InnerRegistry
argument_list|<
name|T
argument_list|>
name|innerRegistry
init|=
operator|(
name|InnerRegistry
argument_list|<
name|T
argument_list|>
operator|)
name|registry
operator|.
name|get
argument_list|(
name|categoryClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerRegistry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown named writeable category ["
operator|+
name|categoryClass
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|innerRegistry
operator|.
name|getReader
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|class|InnerRegistry
specifier|private
specifier|static
class|class
name|InnerRegistry
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|registry
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
name|registry
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|categoryClass
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|categoryClass
decl_stmt|;
DECL|method|InnerRegistry
specifier|private
name|InnerRegistry
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|categoryClass
parameter_list|)
block|{
name|this
operator|.
name|categoryClass
operator|=
name|categoryClass
expr_stmt|;
block|}
DECL|method|register
specifier|private
name|void
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|reader
parameter_list|)
block|{
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|existingReader
init|=
name|registry
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingReader
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"named writeable ["
operator|+
name|categoryClass
operator|.
name|getName
argument_list|()
operator|+
literal|"]["
operator|+
name|name
operator|+
literal|"] is already registered by ["
operator|+
name|reader
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|registry
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
DECL|method|getReader
specifier|private
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getReader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|reader
init|=
name|registry
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown named writeable ["
operator|+
name|categoryClass
operator|.
name|getName
argument_list|()
operator|+
literal|"]["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|reader
return|;
block|}
block|}
block|}
end_class

end_unit

