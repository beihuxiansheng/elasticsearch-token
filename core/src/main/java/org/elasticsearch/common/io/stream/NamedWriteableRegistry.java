begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A registry for {@link org.elasticsearch.common.io.stream.Writeable.Reader} readers of {@link NamedWriteable}.  *  * The registration is keyed by the combination of the category class of {@link NamedWriteable}, and a name unique  * to that category.  */
end_comment

begin_class
DECL|class|NamedWriteableRegistry
specifier|public
class|class
name|NamedWriteableRegistry
block|{
comment|/** An entry in the registry, made up of a category class and name, and a reader for that category class. */
DECL|class|Entry
specifier|public
specifier|static
class|class
name|Entry
block|{
comment|/** The superclass of a {@link NamedWriteable} which will be read by {@link #reader}. */
DECL|field|categoryClass
specifier|public
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|categoryClass
decl_stmt|;
comment|/** A name for the writeable which is unique to the {@link #categoryClass}. */
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
comment|/** A reader capability of reading*/
DECL|field|reader
specifier|public
specifier|final
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
argument_list|>
name|reader
decl_stmt|;
comment|/** Creates a new entry which can be stored by the registry. */
DECL|method|Entry
specifier|public
parameter_list|<
name|T
extends|extends
name|NamedWriteable
parameter_list|>
name|Entry
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|categoryClass
parameter_list|,
name|String
name|name
parameter_list|,
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|reader
parameter_list|)
block|{
name|this
operator|.
name|categoryClass
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|categoryClass
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The underlying data of the registry maps from the category to an inner      * map of name unique to that category, to the actual reader.      */
DECL|field|registry
specifier|private
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|registry
decl_stmt|;
comment|/**      * Constructs a new registry from the given entries.      */
DECL|method|NamedWriteableRegistry
specifier|public
name|NamedWriteableRegistry
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|)
block|{
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|registry
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
return|return;
block|}
name|entries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|entries
operator|.
name|sort
argument_list|(
parameter_list|(
name|e1
parameter_list|,
name|e2
parameter_list|)
lambda|->
name|e1
operator|.
name|categoryClass
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|categoryClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|registry
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
argument_list|>
argument_list|>
name|readers
init|=
literal|null
decl_stmt|;
name|Class
name|currentCategory
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|currentCategory
operator|!=
name|entry
operator|.
name|categoryClass
condition|)
block|{
if|if
condition|(
name|currentCategory
operator|!=
literal|null
condition|)
block|{
comment|// we've seen the last of this category, put it into the big map
name|registry
operator|.
name|put
argument_list|(
name|currentCategory
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|readers
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|readers
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|currentCategory
operator|=
name|entry
operator|.
name|categoryClass
expr_stmt|;
block|}
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
argument_list|>
name|oldReader
init|=
name|readers
operator|.
name|put
argument_list|(
name|entry
operator|.
name|name
argument_list|,
name|entry
operator|.
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldReader
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"NamedWriteable ["
operator|+
name|currentCategory
operator|.
name|getName
argument_list|()
operator|+
literal|"]["
operator|+
name|entry
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" is already registered for ["
operator|+
name|oldReader
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"],"
operator|+
literal|" cannot register ["
operator|+
name|entry
operator|.
name|reader
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|// handle the last category
name|registry
operator|.
name|put
argument_list|(
name|currentCategory
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|readers
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|registry
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a reader for a {@link NamedWriteable} object identified by the      * name provided as argument and its category.      */
DECL|method|getReader
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getReader
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|categoryClass
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
argument_list|>
argument_list|>
name|readers
init|=
name|registry
operator|.
name|get
argument_list|(
name|categoryClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|readers
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown NamedWriteable category ["
operator|+
name|categoryClass
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|reader
init|=
operator|(
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|readers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown NamedWriteable ["
operator|+
name|categoryClass
operator|.
name|getName
argument_list|()
operator|+
literal|"]["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|reader
return|;
block|}
block|}
end_class

end_unit

