begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Registry for {@link NamedWriteable} objects. Allows to register and retrieve prototype instances of writeable objects  * given their name.  */
end_comment

begin_class
DECL|class|NamedWriteableRegistry
specifier|public
class|class
name|NamedWriteableRegistry
block|{
DECL|field|registry
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|NamedWriteable
argument_list|>
name|registry
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Registers a {@link NamedWriteable} prototype      */
DECL|method|registerPrototype
specifier|public
specifier|synchronized
name|void
name|registerPrototype
parameter_list|(
name|NamedWriteable
argument_list|<
name|?
argument_list|>
name|namedWriteable
parameter_list|)
block|{
if|if
condition|(
name|registry
operator|.
name|containsKey
argument_list|(
name|namedWriteable
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"named writeable of type ["
operator|+
name|namedWriteable
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] with name ["
operator|+
name|namedWriteable
operator|.
name|getName
argument_list|()
operator|+
literal|"] "
operator|+
literal|"is already registered by type ["
operator|+
name|registry
operator|.
name|get
argument_list|(
name|namedWriteable
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|registry
operator|.
name|put
argument_list|(
name|namedWriteable
operator|.
name|getName
argument_list|()
argument_list|,
name|namedWriteable
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a prototype of the {@link NamedWriteable} object identified by the name provided as argument      */
DECL|method|getPrototype
specifier|public
parameter_list|<
name|C
parameter_list|>
name|NamedWriteable
argument_list|<
name|C
argument_list|>
name|getPrototype
parameter_list|(
name|String
name|name
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|NamedWriteable
argument_list|<
name|C
argument_list|>
name|namedWriteable
init|=
operator|(
name|NamedWriteable
argument_list|<
name|C
argument_list|>
operator|)
name|registry
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|namedWriteable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown named writeable with name ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|namedWriteable
return|;
block|}
block|}
end_class

end_unit

