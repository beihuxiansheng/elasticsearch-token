begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.joda
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|field
operator|.
name|DividedDateTimeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|field
operator|.
name|OffsetDateTimeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|field
operator|.
name|ScaledDurationField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|Joda
specifier|public
class|class
name|Joda
block|{
DECL|method|forPattern
specifier|public
specifier|static
name|FormatDateTimeFormatter
name|forPattern
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|forPattern
argument_list|(
name|input
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
comment|/**      * Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).      */
DECL|method|forPattern
specifier|public
specifier|static
name|FormatDateTimeFormatter
name|forPattern
parameter_list|(
name|String
name|input
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|input
operator|=
name|input
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|input
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No date pattern provided"
argument_list|)
throw|;
block|}
name|DateTimeFormatter
name|formatter
decl_stmt|;
if|if
condition|(
literal|"basicDate"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_date"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicDate
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicDateTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_date_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicDateTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicDateTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_date_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicDateTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicOrdinalDate"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_ordinal_date"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicOrdinalDate
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicOrdinalDateTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_ordinal_date_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicOrdinalDateTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicOrdinalDateTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_ordinal_date_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicOrdinalDateTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicTTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_t_Time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicTTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicTTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_t_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicTTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicWeekDate"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_week_date"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicWeekDate
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicWeekDateTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_week_date_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicWeekDateTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"basicWeekDateTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"basic_week_date_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|basicWeekDateTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"date"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|date
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"dateHour"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"date_hour"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|dateHour
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"dateHourMinute"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"date_hour_minute"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|dateHourMinute
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"dateHourMinuteSecond"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"date_hour_minute_second"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|dateHourMinuteSecond
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"dateHourMinuteSecondFraction"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"date_hour_minute_second_fraction"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|dateHourMinuteSecondFraction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"dateHourMinuteSecondMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"date_hour_minute_second_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|dateHourMinuteSecondMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"dateOptionalTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"date_optional_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
comment|// in this case, we have a separate parser and printer since the dataOptionalTimeParser can't print
comment|// this sucks we should use the root local by default and not be dependent on the node
return|return
operator|new
name|FormatDateTimeFormatter
argument_list|(
name|input
argument_list|,
name|ISODateTimeFormat
operator|.
name|dateOptionalTimeParser
argument_list|()
operator|.
name|withZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
operator|.
name|withZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
name|locale
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"dateTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"date_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"dateTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"date_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|dateTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hour"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|hour
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hourMinute"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"hour_minute"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|hourMinute
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hourMinuteSecond"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"hour_minute_second"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|hourMinuteSecond
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hourMinuteSecondFraction"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"hour_minute_second_fraction"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|hourMinuteSecondFraction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hourMinuteSecondMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"hour_minute_second_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|hourMinuteSecondMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ordinalDate"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"ordinal_date"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|ordinalDate
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ordinalDateTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"ordinal_date_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|ordinalDateTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ordinalDateTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"ordinal_date_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|ordinalDateTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|time
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"timeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|timeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"tTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"t_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|tTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"tTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"t_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|tTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"weekDate"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"week_date"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|weekDate
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"weekDateTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"week_date_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|weekDateTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"weekDateTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"week_date_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|weekDateTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"weekyear"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"week_year"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|weekyear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"weekyearWeek"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"weekyear_week"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|weekyearWeek
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"weekyearWeekDay"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"weekyear_week_day"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|weekyearWeekDay
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"year"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|year
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"yearMonth"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"year_month"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|yearMonth
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"yearMonthDay"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"year_month_day"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|ISODateTimeFormat
operator|.
name|yearMonthDay
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"epoch_second"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
operator|new
name|EpochTimePrinter
argument_list|(
literal|false
argument_list|)
argument_list|,
operator|new
name|EpochTimeParser
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|toFormatter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"epoch_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
operator|new
name|EpochTimePrinter
argument_list|(
literal|true
argument_list|)
argument_list|,
operator|new
name|EpochTimeParser
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|toFormatter
argument_list|()
expr_stmt|;
comment|// strict date formats here, must be at least 4 digits for year and two for months and two for day
block|}
elseif|else
if|if
condition|(
literal|"strictBasicWeekDate"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_basic_week_date"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|basicWeekDate
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictBasicWeekDateTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_basic_week_date_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|basicWeekDateTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictBasicWeekDateTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_basic_week_date_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|basicWeekDateTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictDate"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_date"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|date
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictDateHour"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_date_hour"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|dateHour
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictDateHourMinute"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_date_hour_minute"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|dateHourMinute
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictDateHourMinuteSecond"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_date_hour_minute_second"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|dateHourMinuteSecond
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictDateHourMinuteSecondFraction"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_date_hour_minute_second_fraction"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|dateHourMinuteSecondFraction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictDateHourMinuteSecondMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_date_hour_minute_second_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|dateHourMinuteSecondMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictDateOptionalTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_date_optional_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
comment|// in this case, we have a separate parser and printer since the dataOptionalTimeParser can't print
comment|// this sucks we should use the root local by default and not be dependent on the node
return|return
operator|new
name|FormatDateTimeFormatter
argument_list|(
name|input
argument_list|,
name|StrictISODateTimeFormat
operator|.
name|dateOptionalTimeParser
argument_list|()
operator|.
name|withZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
name|StrictISODateTimeFormat
operator|.
name|dateTime
argument_list|()
operator|.
name|withZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
name|locale
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"strictDateTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_date_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|dateTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictDateTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_date_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|dateTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictHour"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_hour"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|hour
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictHourMinute"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_hour_minute"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|hourMinute
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictHourMinuteSecond"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_hour_minute_second"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|hourMinuteSecond
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictHourMinuteSecondFraction"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_hour_minute_second_fraction"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|hourMinuteSecondFraction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictHourMinuteSecondMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_hour_minute_second_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|hourMinuteSecondMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictOrdinalDate"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_ordinal_date"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|ordinalDate
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictOrdinalDateTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_ordinal_date_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|ordinalDateTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictOrdinalDateTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_ordinal_date_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|ordinalDateTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|time
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|timeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictTTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_t_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|tTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictTTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_t_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|tTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictWeekDate"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_week_date"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|weekDate
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictWeekDateTime"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_week_date_time"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|weekDateTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictWeekDateTimeNoMillis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_week_date_time_no_millis"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|weekDateTimeNoMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictWeekyear"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_weekyear"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|weekyear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictWeekyearWeek"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_weekyear_week"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|weekyearWeek
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictWeekyearWeekDay"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_weekyear_week_day"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|weekyearWeekDay
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictYear"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_year"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|year
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictYearMonth"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_year_month"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|yearMonth
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"strictYearMonthDay"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"strict_year_month_day"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|formatter
operator|=
name|StrictISODateTimeFormat
operator|.
name|yearMonthDay
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|input
argument_list|)
operator|&&
name|input
operator|.
name|contains
argument_list|(
literal|"||"
argument_list|)
condition|)
block|{
name|String
index|[]
name|formats
init|=
name|Strings
operator|.
name|delimitedListToStringArray
argument_list|(
name|input
argument_list|,
literal|"||"
argument_list|)
decl_stmt|;
name|DateTimeParser
index|[]
name|parsers
init|=
operator|new
name|DateTimeParser
index|[
name|formats
operator|.
name|length
index|]
decl_stmt|;
if|if
condition|(
name|formats
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|formatter
operator|=
name|forPattern
argument_list|(
name|input
argument_list|,
name|locale
argument_list|)
operator|.
name|parser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|DateTimeFormatter
name|dateTimeFormatter
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|formats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FormatDateTimeFormatter
name|currentFormatter
init|=
name|forPattern
argument_list|(
name|formats
index|[
name|i
index|]
argument_list|,
name|locale
argument_list|)
decl_stmt|;
name|DateTimeFormatter
name|currentParser
init|=
name|currentFormatter
operator|.
name|parser
argument_list|()
decl_stmt|;
if|if
condition|(
name|dateTimeFormatter
operator|==
literal|null
condition|)
block|{
name|dateTimeFormatter
operator|=
name|currentFormatter
operator|.
name|printer
argument_list|()
expr_stmt|;
block|}
name|parsers
index|[
name|i
index|]
operator|=
name|currentParser
operator|.
name|getParser
argument_list|()
expr_stmt|;
block|}
name|DateTimeFormatterBuilder
name|builder
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|dateTimeFormatter
operator|.
name|withZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|getPrinter
argument_list|()
argument_list|,
name|parsers
argument_list|)
decl_stmt|;
name|formatter
operator|=
name|builder
operator|.
name|toFormatter
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|formatter
operator|=
name|DateTimeFormat
operator|.
name|forPattern
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid format: ["
operator|+
name|input
operator|+
literal|"]: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|FormatDateTimeFormatter
argument_list|(
name|input
argument_list|,
name|formatter
operator|.
name|withZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
name|locale
argument_list|)
return|;
block|}
DECL|method|getStrictStandardDateFormatter
specifier|public
specifier|static
name|FormatDateTimeFormatter
name|getStrictStandardDateFormatter
parameter_list|()
block|{
comment|// 2014/10/10
name|DateTimeFormatter
name|shortFormatter
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|year
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|'/'
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|monthOfYear
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|'/'
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|toFormatter
argument_list|()
operator|.
name|withZoneUTC
argument_list|()
decl_stmt|;
comment|// 2014/10/10 12:12:12
name|DateTimeFormatter
name|longFormatter
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|year
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|'/'
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|monthOfYear
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|'/'
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|' '
argument_list|)
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|hourOfDay
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|':'
argument_list|)
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|minuteOfHour
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|':'
argument_list|)
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|secondOfMinute
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|toFormatter
argument_list|()
operator|.
name|withZoneUTC
argument_list|()
decl_stmt|;
name|DateTimeFormatterBuilder
name|builder
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|longFormatter
operator|.
name|withZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|getPrinter
argument_list|()
argument_list|,
operator|new
name|DateTimeParser
index|[]
block|{
name|longFormatter
operator|.
name|getParser
argument_list|()
block|,
name|shortFormatter
operator|.
name|getParser
argument_list|()
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|FormatDateTimeFormatter
argument_list|(
literal|"yyyy/MM/dd HH:mm:ss||yyyy/MM/dd"
argument_list|,
name|builder
operator|.
name|toFormatter
argument_list|()
operator|.
name|withZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
DECL|field|Quarters
specifier|public
specifier|static
specifier|final
name|DurationFieldType
name|Quarters
init|=
operator|new
name|DurationFieldType
argument_list|(
literal|"quarters"
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|8167713675442491871L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|DurationField
name|getField
parameter_list|(
name|Chronology
name|chronology
parameter_list|)
block|{
return|return
operator|new
name|ScaledDurationField
argument_list|(
name|chronology
operator|.
name|months
argument_list|()
argument_list|,
name|Quarters
argument_list|,
literal|3
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|QuarterOfYear
specifier|public
specifier|static
specifier|final
name|DateTimeFieldType
name|QuarterOfYear
init|=
operator|new
name|DateTimeFieldType
argument_list|(
literal|"quarterOfYear"
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5677872459807379123L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|DurationFieldType
name|getDurationType
parameter_list|()
block|{
return|return
name|Quarters
return|;
block|}
annotation|@
name|Override
specifier|public
name|DurationFieldType
name|getRangeDurationType
parameter_list|()
block|{
return|return
name|DurationFieldType
operator|.
name|years
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DateTimeField
name|getField
parameter_list|(
name|Chronology
name|chronology
parameter_list|)
block|{
return|return
operator|new
name|OffsetDateTimeField
argument_list|(
operator|new
name|DividedDateTimeField
argument_list|(
operator|new
name|OffsetDateTimeField
argument_list|(
name|chronology
operator|.
name|monthOfYear
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|QuarterOfYear
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|class|EpochTimeParser
specifier|public
specifier|static
class|class
name|EpochTimeParser
implements|implements
name|DateTimeParser
block|{
DECL|field|MILLI_SECOND_PRECISION_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|MILLI_SECOND_PRECISION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^-?\\d{1,13}$"
argument_list|)
decl_stmt|;
DECL|field|SECOND_PRECISION_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|SECOND_PRECISION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^-?\\d{1,10}$"
argument_list|)
decl_stmt|;
DECL|field|hasMilliSecondPrecision
specifier|private
specifier|final
name|boolean
name|hasMilliSecondPrecision
decl_stmt|;
DECL|field|pattern
specifier|private
specifier|final
name|Pattern
name|pattern
decl_stmt|;
DECL|method|EpochTimeParser
specifier|public
name|EpochTimeParser
parameter_list|(
name|boolean
name|hasMilliSecondPrecision
parameter_list|)
block|{
name|this
operator|.
name|hasMilliSecondPrecision
operator|=
name|hasMilliSecondPrecision
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|hasMilliSecondPrecision
condition|?
name|MILLI_SECOND_PRECISION_PATTERN
else|:
name|SECOND_PRECISION_PATTERN
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|estimateParsedLength
specifier|public
name|int
name|estimateParsedLength
parameter_list|()
block|{
return|return
name|hasMilliSecondPrecision
condition|?
literal|13
else|:
literal|10
return|;
block|}
annotation|@
name|Override
DECL|method|parseInto
specifier|public
name|int
name|parseInto
parameter_list|(
name|DateTimeParserBucket
name|bucket
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|boolean
name|isPositive
init|=
name|text
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|==
literal|false
decl_stmt|;
name|boolean
name|isTooLong
init|=
name|text
operator|.
name|length
argument_list|()
operator|>
name|estimateParsedLength
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|isPositive
operator|&&
name|isTooLong
operator|)
operator|||
comment|// timestamps have to have UTC timezone
name|bucket
operator|.
name|getZone
argument_list|()
operator|!=
name|DateTimeZone
operator|.
name|UTC
operator|||
name|pattern
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
operator|.
name|matches
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|factor
init|=
name|hasMilliSecondPrecision
condition|?
literal|1
else|:
literal|1000
decl_stmt|;
try|try
block|{
name|long
name|millis
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|text
argument_list|)
operator|*
name|factor
decl_stmt|;
name|DateTime
name|dt
init|=
operator|new
name|DateTime
argument_list|(
name|millis
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|bucket
operator|.
name|saveField
argument_list|(
name|DateTimeFieldType
operator|.
name|year
argument_list|()
argument_list|,
name|dt
operator|.
name|getYear
argument_list|()
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|saveField
argument_list|(
name|DateTimeFieldType
operator|.
name|monthOfYear
argument_list|()
argument_list|,
name|dt
operator|.
name|getMonthOfYear
argument_list|()
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|saveField
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|,
name|dt
operator|.
name|getDayOfMonth
argument_list|()
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|saveField
argument_list|(
name|DateTimeFieldType
operator|.
name|hourOfDay
argument_list|()
argument_list|,
name|dt
operator|.
name|getHourOfDay
argument_list|()
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|saveField
argument_list|(
name|DateTimeFieldType
operator|.
name|minuteOfHour
argument_list|()
argument_list|,
name|dt
operator|.
name|getMinuteOfHour
argument_list|()
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|saveField
argument_list|(
name|DateTimeFieldType
operator|.
name|secondOfMinute
argument_list|()
argument_list|,
name|dt
operator|.
name|getSecondOfMinute
argument_list|()
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|saveField
argument_list|(
name|DateTimeFieldType
operator|.
name|millisOfSecond
argument_list|()
argument_list|,
name|dt
operator|.
name|getMillisOfSecond
argument_list|()
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|setZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|text
operator|.
name|length
argument_list|()
return|;
block|}
block|}
DECL|class|EpochTimePrinter
specifier|public
specifier|static
class|class
name|EpochTimePrinter
implements|implements
name|DateTimePrinter
block|{
DECL|field|hasMilliSecondPrecision
specifier|private
name|boolean
name|hasMilliSecondPrecision
decl_stmt|;
DECL|method|EpochTimePrinter
specifier|public
name|EpochTimePrinter
parameter_list|(
name|boolean
name|hasMilliSecondPrecision
parameter_list|)
block|{
name|this
operator|.
name|hasMilliSecondPrecision
operator|=
name|hasMilliSecondPrecision
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|estimatePrintedLength
specifier|public
name|int
name|estimatePrintedLength
parameter_list|()
block|{
return|return
name|hasMilliSecondPrecision
condition|?
literal|13
else|:
literal|10
return|;
block|}
annotation|@
name|Override
DECL|method|printTo
specifier|public
name|void
name|printTo
parameter_list|(
name|StringBuffer
name|buf
parameter_list|,
name|long
name|instant
parameter_list|,
name|Chronology
name|chrono
parameter_list|,
name|int
name|displayOffset
parameter_list|,
name|DateTimeZone
name|displayZone
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|hasMilliSecondPrecision
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|instant
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|instant
operator|/
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|printTo
specifier|public
name|void
name|printTo
parameter_list|(
name|Writer
name|out
parameter_list|,
name|long
name|instant
parameter_list|,
name|Chronology
name|chrono
parameter_list|,
name|int
name|displayOffset
parameter_list|,
name|DateTimeZone
name|displayZone
parameter_list|,
name|Locale
name|locale
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasMilliSecondPrecision
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|instant
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|instant
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|printTo
specifier|public
name|void
name|printTo
parameter_list|(
name|StringBuffer
name|buf
parameter_list|,
name|ReadablePartial
name|partial
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|hasMilliSecondPrecision
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|getDateTimeMillis
argument_list|(
name|partial
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|getDateTimeMillis
argument_list|(
name|partial
argument_list|)
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|printTo
specifier|public
name|void
name|printTo
parameter_list|(
name|Writer
name|out
parameter_list|,
name|ReadablePartial
name|partial
parameter_list|,
name|Locale
name|locale
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasMilliSecondPrecision
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|getDateTimeMillis
argument_list|(
name|partial
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|getDateTimeMillis
argument_list|(
name|partial
argument_list|)
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDateTimeMillis
specifier|private
name|long
name|getDateTimeMillis
parameter_list|(
name|ReadablePartial
name|partial
parameter_list|)
block|{
name|int
name|year
init|=
name|partial
operator|.
name|get
argument_list|(
name|DateTimeFieldType
operator|.
name|year
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|monthOfYear
init|=
name|partial
operator|.
name|get
argument_list|(
name|DateTimeFieldType
operator|.
name|monthOfYear
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|dayOfMonth
init|=
name|partial
operator|.
name|get
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|hourOfDay
init|=
name|partial
operator|.
name|get
argument_list|(
name|DateTimeFieldType
operator|.
name|hourOfDay
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|minuteOfHour
init|=
name|partial
operator|.
name|get
argument_list|(
name|DateTimeFieldType
operator|.
name|minuteOfHour
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|secondOfMinute
init|=
name|partial
operator|.
name|get
argument_list|(
name|DateTimeFieldType
operator|.
name|secondOfMinute
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|millisOfSecond
init|=
name|partial
operator|.
name|get
argument_list|(
name|DateTimeFieldType
operator|.
name|millisOfSecond
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|partial
operator|.
name|getChronology
argument_list|()
operator|.
name|getDateTimeMillis
argument_list|(
name|year
argument_list|,
name|monthOfYear
argument_list|,
name|dayOfMonth
argument_list|,
name|hourOfDay
argument_list|,
name|minuteOfHour
argument_list|,
name|secondOfMinute
argument_list|,
name|millisOfSecond
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

