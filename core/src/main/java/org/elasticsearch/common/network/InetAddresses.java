begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.network
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet4Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
DECL|class|InetAddresses
specifier|public
class|class
name|InetAddresses
block|{
DECL|field|IPV4_PART_COUNT
specifier|private
specifier|static
name|int
name|IPV4_PART_COUNT
init|=
literal|4
decl_stmt|;
DECL|field|IPV6_PART_COUNT
specifier|private
specifier|static
name|int
name|IPV6_PART_COUNT
init|=
literal|8
decl_stmt|;
DECL|method|isInetAddress
specifier|public
specifier|static
name|boolean
name|isInetAddress
parameter_list|(
name|String
name|ipString
parameter_list|)
block|{
return|return
name|ipStringToBytes
argument_list|(
name|ipString
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|ipStringToBytes
specifier|private
specifier|static
name|byte
index|[]
name|ipStringToBytes
parameter_list|(
name|String
name|ipString
parameter_list|)
block|{
comment|// Make a first pass to categorize the characters in this string.
name|boolean
name|hasColon
init|=
literal|false
decl_stmt|;
name|boolean
name|hasDot
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ipString
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|ipString
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'.'
condition|)
block|{
name|hasDot
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|':'
condition|)
block|{
if|if
condition|(
name|hasDot
condition|)
block|{
return|return
literal|null
return|;
comment|// Colons must not appear after dots.
block|}
name|hasColon
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Character
operator|.
name|digit
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
comment|// Everything else must be a decimal or hex digit.
block|}
block|}
comment|// Now decide which address family to parse.
if|if
condition|(
name|hasColon
condition|)
block|{
if|if
condition|(
name|hasDot
condition|)
block|{
name|ipString
operator|=
name|convertDottedQuadToHex
argument_list|(
name|ipString
argument_list|)
expr_stmt|;
if|if
condition|(
name|ipString
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|textToNumericFormatV6
argument_list|(
name|ipString
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hasDot
condition|)
block|{
return|return
name|textToNumericFormatV4
argument_list|(
name|ipString
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convertDottedQuadToHex
specifier|private
specifier|static
name|String
name|convertDottedQuadToHex
parameter_list|(
name|String
name|ipString
parameter_list|)
block|{
name|int
name|lastColon
init|=
name|ipString
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|initialPart
init|=
name|ipString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastColon
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|dottedQuad
init|=
name|ipString
operator|.
name|substring
argument_list|(
name|lastColon
operator|+
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|quad
init|=
name|textToNumericFormatV4
argument_list|(
name|dottedQuad
argument_list|)
decl_stmt|;
if|if
condition|(
name|quad
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|penultimate
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
operator|(
operator|(
name|quad
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|quad
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
argument_list|)
decl_stmt|;
name|String
name|ultimate
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
operator|(
operator|(
name|quad
index|[
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|quad
index|[
literal|3
index|]
operator|&
literal|0xff
operator|)
argument_list|)
decl_stmt|;
return|return
name|initialPart
operator|+
name|penultimate
operator|+
literal|":"
operator|+
name|ultimate
return|;
block|}
DECL|method|textToNumericFormatV4
specifier|private
specifier|static
name|byte
index|[]
name|textToNumericFormatV4
parameter_list|(
name|String
name|ipString
parameter_list|)
block|{
name|String
index|[]
name|address
init|=
name|ipString
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|,
name|IPV4_PART_COUNT
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|length
operator|!=
name|IPV4_PART_COUNT
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|IPV4_PART_COUNT
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
name|parseOctet
argument_list|(
name|address
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|bytes
return|;
block|}
DECL|method|parseOctet
specifier|private
specifier|static
name|byte
name|parseOctet
parameter_list|(
name|String
name|ipPart
parameter_list|)
block|{
comment|// Note: we already verified that this string contains only hex digits.
name|int
name|octet
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ipPart
argument_list|)
decl_stmt|;
comment|// Disallow leading zeroes, because no clear standard exists on
comment|// whether these should be interpreted as decimal or octal.
if|if
condition|(
name|octet
operator|>
literal|255
operator|||
operator|(
name|ipPart
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
operator|&&
name|ipPart
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
return|return
operator|(
name|byte
operator|)
name|octet
return|;
block|}
DECL|method|textToNumericFormatV6
specifier|private
specifier|static
name|byte
index|[]
name|textToNumericFormatV6
parameter_list|(
name|String
name|ipString
parameter_list|)
block|{
comment|// An address can have [2..8] colons, and N colons make N+1 parts.
name|String
index|[]
name|parts
init|=
name|ipString
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
name|IPV6_PART_COUNT
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
argument_list|<
literal|3
operator|||
name|parts
operator|.
name|length
argument_list|>
name|IPV6_PART_COUNT
operator|+
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Disregarding the endpoints, find "::" with nothing in between.
comment|// This indicates that a run of zeroes has been skipped.
name|int
name|skipIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|parts
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|parts
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|skipIndex
operator|>=
literal|0
condition|)
block|{
return|return
literal|null
return|;
comment|// Can't have more than one ::
block|}
name|skipIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
name|int
name|partsHi
decl_stmt|;
comment|// Number of parts to copy from above/before the "::"
name|int
name|partsLo
decl_stmt|;
comment|// Number of parts to copy from below/after the "::"
if|if
condition|(
name|skipIndex
operator|>=
literal|0
condition|)
block|{
comment|// If we found a "::", then check if it also covers the endpoints.
name|partsHi
operator|=
name|skipIndex
expr_stmt|;
name|partsLo
operator|=
name|parts
operator|.
name|length
operator|-
name|skipIndex
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
operator|--
name|partsHi
operator|!=
literal|0
condition|)
block|{
return|return
literal|null
return|;
comment|// ^: requires ^::
block|}
if|if
condition|(
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
operator|--
name|partsLo
operator|!=
literal|0
condition|)
block|{
return|return
literal|null
return|;
comment|// :$ requires ::$
block|}
block|}
else|else
block|{
comment|// Otherwise, allocate the entire address to partsHi.  The endpoints
comment|// could still be empty, but parseHextet() will check for that.
name|partsHi
operator|=
name|parts
operator|.
name|length
expr_stmt|;
name|partsLo
operator|=
literal|0
expr_stmt|;
block|}
comment|// If we found a ::, then we must have skipped at least one part.
comment|// Otherwise, we must have exactly the right number of parts.
name|int
name|partsSkipped
init|=
name|IPV6_PART_COUNT
operator|-
operator|(
name|partsHi
operator|+
name|partsLo
operator|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|skipIndex
operator|>=
literal|0
condition|?
name|partsSkipped
operator|>=
literal|1
else|:
name|partsSkipped
operator|==
literal|0
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Now parse the hextets into a byte array.
name|ByteBuffer
name|rawBytes
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|2
operator|*
name|IPV6_PART_COUNT
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partsHi
condition|;
name|i
operator|++
control|)
block|{
name|rawBytes
operator|.
name|putShort
argument_list|(
name|parseHextet
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partsSkipped
condition|;
name|i
operator|++
control|)
block|{
name|rawBytes
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|partsLo
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|rawBytes
operator|.
name|putShort
argument_list|(
name|parseHextet
argument_list|(
name|parts
index|[
name|parts
operator|.
name|length
operator|-
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|rawBytes
operator|.
name|array
argument_list|()
return|;
block|}
DECL|method|parseHextet
specifier|private
specifier|static
name|short
name|parseHextet
parameter_list|(
name|String
name|ipPart
parameter_list|)
block|{
comment|// Note: we already verified that this string contains only hex digits.
name|int
name|hextet
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ipPart
argument_list|,
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|hextet
operator|>
literal|0xffff
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
return|return
operator|(
name|short
operator|)
name|hextet
return|;
block|}
comment|/**      * Returns the string representation of an {@link InetAddress} suitable      * for inclusion in a URI.      *      *<p>For IPv4 addresses, this is identical to      * {@link InetAddress#getHostAddress()}, but for IPv6 addresses it      * compresses zeroes and surrounds the text with square brackets; for example      * {@code "[2001:db8::1]"}.      *      *<p>Per section 3.2.2 of      *<a target="_parent"      *    href="http://tools.ietf.org/html/rfc3986#section-3.2.2"      *>http://tools.ietf.org/html/rfc3986</a>,      * a URI containing an IPv6 string literal is of the form      * {@code "http://[2001:db8::1]:8888/index.html"}.      *      *<p>Use of either {@link InetAddresses#toAddrString},      * {@link InetAddress#getHostAddress()}, or this method is recommended over      * {@link InetAddress#toString()} when an IP address string literal is      * desired.  This is because {@link InetAddress#toString()} prints the      * hostname and the IP address string joined by a "/".      *      * @param ip {@link InetAddress} to be converted to URI string literal      * @return {@code String} containing URI-safe string literal      */
DECL|method|toUriString
specifier|public
specifier|static
name|String
name|toUriString
parameter_list|(
name|InetAddress
name|ip
parameter_list|)
block|{
if|if
condition|(
name|ip
operator|instanceof
name|Inet6Address
condition|)
block|{
return|return
literal|"["
operator|+
name|toAddrString
argument_list|(
name|ip
argument_list|)
operator|+
literal|"]"
return|;
block|}
return|return
name|toAddrString
argument_list|(
name|ip
argument_list|)
return|;
block|}
comment|/**      * Returns the string representation of an {@link InetAddress}.      *      *<p>For IPv4 addresses, this is identical to      * {@link InetAddress#getHostAddress()}, but for IPv6 addresses, the output      * follows<a href="http://tools.ietf.org/html/rfc5952">RFC 5952</a>      * section 4.  The main difference is that this method uses "::" for zero      * compression, while Java's version uses the uncompressed form.      *      *<p>This method uses hexadecimal for all IPv6 addresses, including      * IPv4-mapped IPv6 addresses such as "::c000:201".  The output does not      * include a Scope ID.      *      * @param ip {@link InetAddress} to be converted to an address string      * @return {@code String} containing the text-formatted IP address      * @since 10.0      */
DECL|method|toAddrString
specifier|public
specifier|static
name|String
name|toAddrString
parameter_list|(
name|InetAddress
name|ip
parameter_list|)
block|{
if|if
condition|(
name|ip
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"ip"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ip
operator|instanceof
name|Inet4Address
condition|)
block|{
comment|// For IPv4, Java's formatting is good enough.
name|byte
index|[]
name|bytes
init|=
name|ip
operator|.
name|getAddress
argument_list|()
decl_stmt|;
return|return
operator|(
name|bytes
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
operator|+
literal|"."
operator|+
operator|(
name|bytes
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|+
literal|"."
operator|+
operator|(
name|bytes
index|[
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|+
literal|"."
operator|+
operator|(
name|bytes
index|[
literal|3
index|]
operator|&
literal|0xff
operator|)
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|ip
operator|instanceof
name|Inet6Address
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ip"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|bytes
init|=
name|ip
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|int
index|[]
name|hextets
init|=
operator|new
name|int
index|[
name|IPV6_PART_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hextets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hextets
index|[
name|i
index|]
operator|=
operator|(
name|bytes
index|[
literal|2
operator|*
name|i
index|]
operator|&
literal|255
operator|)
operator|<<
literal|8
operator||
name|bytes
index|[
literal|2
operator|*
name|i
operator|+
literal|1
index|]
operator|&
literal|255
expr_stmt|;
block|}
name|compressLongestRunOfZeroes
argument_list|(
name|hextets
argument_list|)
expr_stmt|;
return|return
name|hextetsToIPv6String
argument_list|(
name|hextets
argument_list|)
return|;
block|}
comment|/**      * Identify and mark the longest run of zeroes in an IPv6 address.      *      *<p>Only runs of two or more hextets are considered.  In case of a tie, the      * leftmost run wins.  If a qualifying run is found, its hextets are replaced      * by the sentinel value -1.      *      * @param hextets {@code int[]} mutable array of eight 16-bit hextets      */
DECL|method|compressLongestRunOfZeroes
specifier|private
specifier|static
name|void
name|compressLongestRunOfZeroes
parameter_list|(
name|int
index|[]
name|hextets
parameter_list|)
block|{
name|int
name|bestRunStart
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|bestRunLength
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|runStart
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hextets
operator|.
name|length
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|hextets
operator|.
name|length
operator|&&
name|hextets
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|runStart
operator|<
literal|0
condition|)
block|{
name|runStart
operator|=
name|i
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|runStart
operator|>=
literal|0
condition|)
block|{
name|int
name|runLength
init|=
name|i
operator|-
name|runStart
decl_stmt|;
if|if
condition|(
name|runLength
operator|>
name|bestRunLength
condition|)
block|{
name|bestRunStart
operator|=
name|runStart
expr_stmt|;
name|bestRunLength
operator|=
name|runLength
expr_stmt|;
block|}
name|runStart
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bestRunLength
operator|>=
literal|2
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|hextets
argument_list|,
name|bestRunStart
argument_list|,
name|bestRunStart
operator|+
name|bestRunLength
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convert a list of hextets into a human-readable IPv6 address.      *      *<p>In order for "::" compression to work, the input should contain negative      * sentinel values in place of the elided zeroes.      *      * @param hextets {@code int[]} array of eight 16-bit hextets, or -1s      */
DECL|method|hextetsToIPv6String
specifier|private
specifier|static
name|String
name|hextetsToIPv6String
parameter_list|(
name|int
index|[]
name|hextets
parameter_list|)
block|{
comment|/*      * While scanning the array, handle these state transitions:      *   start->num => "num"     start->gap => "::"      *   num->num   => ":num"    num->gap   => "::"      *   gap->num   => "num"     gap->gap   => ""      */
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|39
argument_list|)
decl_stmt|;
name|boolean
name|lastWasNumber
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hextets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|thisIsNumber
init|=
name|hextets
index|[
name|i
index|]
operator|>=
literal|0
decl_stmt|;
if|if
condition|(
name|thisIsNumber
condition|)
block|{
if|if
condition|(
name|lastWasNumber
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|hextets
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|lastWasNumber
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"::"
argument_list|)
expr_stmt|;
block|}
block|}
name|lastWasNumber
operator|=
name|thisIsNumber
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns the {@link InetAddress} having the given string representation.      *      *<p>This deliberately avoids all nameservice lookups (e.g. no DNS).      *      * @param ipString {@code String} containing an IPv4 or IPv6 string literal, e.g.      *     {@code "192.168.0.1"} or {@code "2001:db8::1"}      * @return {@link InetAddress} representing the argument      * @throws IllegalArgumentException if the argument is not a valid IP string literal      */
DECL|method|forString
specifier|public
specifier|static
name|InetAddress
name|forString
parameter_list|(
name|String
name|ipString
parameter_list|)
block|{
name|byte
index|[]
name|addr
init|=
name|ipStringToBytes
argument_list|(
name|ipString
argument_list|)
decl_stmt|;
comment|// The argument was malformed, i.e. not an IP string literal.
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"'%s' is not an IP string literal."
argument_list|,
name|ipString
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|bytesToInetAddress
argument_list|(
name|addr
argument_list|)
return|;
block|}
comment|/**      * Convert a byte array into an InetAddress.      *      * {@link InetAddress#getByAddress} is documented as throwing a checked      * exception "if IP address is of illegal length."  We replace it with      * an unchecked exception, for use by callers who already know that addr      * is an array of length 4 or 16.      *      * @param addr the raw 4-byte or 16-byte IP address in big-endian order      * @return an InetAddress object created from the raw IP address      */
DECL|method|bytesToInetAddress
specifier|private
specifier|static
name|InetAddress
name|bytesToInetAddress
parameter_list|(
name|byte
index|[]
name|addr
parameter_list|)
block|{
try|try
block|{
return|return
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|addr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

