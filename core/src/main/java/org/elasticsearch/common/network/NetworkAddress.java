begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.network
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InetAddresses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**   * Utility functions for presentation of network addresses.  *<p>  * Java's address formatting is particularly bad, every address  * has an optional host if its resolved, so IPv4 addresses often  * look like this (note the confusing leading slash):  *<pre>  *    {@code /127.0.0.1}  *</pre>  * IPv6 addresses are even worse, with no IPv6 address compression,  * and often containing things like numeric scopeids, which are even  * more confusing (e.g. not going to work in any user's browser, refer  * to an interface on<b>another</b> machine, etc):  *<pre>  *    {@code /0:0:0:0:0:0:0:1%1}  *</pre>  * This class provides sane address formatting instead, e.g.   * {@code 127.0.0.1} and {@code ::1} respectively. No methods do reverse  * lookups.  */
end_comment

begin_class
DECL|class|NetworkAddress
specifier|public
specifier|final
class|class
name|NetworkAddress
block|{
comment|/** No instantiation */
DECL|method|NetworkAddress
specifier|private
name|NetworkAddress
parameter_list|()
block|{}
comment|/**      * Formats a network address (with optional host) for display purposes.      *<p>      * If the host is already resolved (typically because, we looked up      * a name to do that), then we include it, otherwise it is      * omitted. See {@link #formatAddress(InetAddress)} if you only      * want the address.      *<p>      * IPv6 addresses are compressed and without scope      * identifiers.      *<p>      * Example output with already-resolved hostnames:      *<ul>      *<li>IPv4: {@code localhost/127.0.0.1}</li>      *<li>IPv6: {@code localhost/::1}</li>      *</ul>      *<p>      * Example output with just an address:      *<ul>      *<li>IPv4: {@code 127.0.0.1}</li>      *<li>IPv6: {@code ::1}</li>      *</ul>      * @param address IPv4 or IPv6 address      * @return formatted string      * @see #formatAddress(InetAddress)      */
DECL|method|format
specifier|public
specifier|static
name|String
name|format
parameter_list|(
name|InetAddress
name|address
parameter_list|)
block|{
return|return
name|format
argument_list|(
name|address
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Formats a network address and port for display purposes.      *<p>      * If the host is already resolved (typically because, we looked up      * a name to do that), then we include it, otherwise it is      * omitted. See {@link #formatAddress(InetSocketAddress)} if you only      * want the address.      *<p>      * This formats the address with {@link #format(InetAddress)}      * and appends the port number. IPv6 addresses will be bracketed.      *<p>      * Example output with already-resolved hostnames:      *<ul>      *<li>IPv4: {@code localhost/127.0.0.1:9300}</li>      *<li>IPv6: {@code localhost/[::1]:9300}</li>      *</ul>      *<p>      * Example output with just an address:      *<ul>      *<li>IPv4: {@code 127.0.0.1:9300}</li>      *<li>IPv6: {@code [::1]:9300}</li>      *</ul>      * @param address IPv4 or IPv6 address with port      * @return formatted string      * @see #formatAddress(InetSocketAddress)      */
DECL|method|format
specifier|public
specifier|static
name|String
name|format
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|)
block|{
return|return
name|format
argument_list|(
name|address
operator|.
name|getAddress
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Formats a network address for display purposes.      *<p>      * This formats only the address, any hostname information,      * if present, is ignored. IPv6 addresses are compressed       * and without scope identifiers.      *<p>      * Example output with just an address:      *<ul>      *<li>IPv4: {@code 127.0.0.1}</li>      *<li>IPv6: {@code ::1}</li>      *</ul>      * @param address IPv4 or IPv6 address      * @return formatted string      */
DECL|method|formatAddress
specifier|public
specifier|static
name|String
name|formatAddress
parameter_list|(
name|InetAddress
name|address
parameter_list|)
block|{
return|return
name|format
argument_list|(
name|address
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Formats a network address and port for display purposes.      *<p>      * This formats the address with {@link #formatAddress(InetAddress)}      * and appends the port number. IPv6 addresses will be bracketed.      * Any host information, if present is ignored.      *<p>      * Example output:      *<ul>      *<li>IPv4: {@code 127.0.0.1:9300}</li>      *<li>IPv6: {@code [::1]:9300}</li>      *</ul>      * @param address IPv4 or IPv6 address with port      * @return formatted string      */
DECL|method|formatAddress
specifier|public
specifier|static
name|String
name|formatAddress
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|)
block|{
return|return
name|format
argument_list|(
name|address
operator|.
name|getAddress
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// note, we don't validate port, because we only allow InetSocketAddress
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"we call toString to avoid a DNS lookup"
argument_list|)
DECL|method|format
specifier|static
name|String
name|format
parameter_list|(
name|InetAddress
name|address
parameter_list|,
name|int
name|port
parameter_list|,
name|boolean
name|includeHost
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeHost
condition|)
block|{
comment|// must use toString, to avoid DNS lookup. but the format is specified in the spec
name|String
name|toString
init|=
name|address
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|separator
init|=
name|toString
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|separator
operator|>
literal|0
condition|)
block|{
comment|// append hostname, with the slash too
name|builder
operator|.
name|append
argument_list|(
name|toString
argument_list|,
literal|0
argument_list|,
name|separator
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|port
operator|!=
operator|-
literal|1
operator|&&
name|address
operator|instanceof
name|Inet6Address
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|InetAddresses
operator|.
name|toUriString
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|port
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

