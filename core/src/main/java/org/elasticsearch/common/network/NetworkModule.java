begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.network
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocateEmptyPrimaryAllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocateReplicaAllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocateStalePrimaryAllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommandRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|CancelAllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|MoveAllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|NetworkPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|RawTaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|local
operator|.
name|LocalTransport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * A module to handle registering and binding all network related classes.  */
end_comment

begin_class
DECL|class|NetworkModule
specifier|public
specifier|final
class|class
name|NetworkModule
block|{
DECL|field|TRANSPORT_TYPE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|TRANSPORT_TYPE_KEY
init|=
literal|"transport.type"
decl_stmt|;
DECL|field|HTTP_TYPE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_TYPE_KEY
init|=
literal|"http.type"
decl_stmt|;
DECL|field|LOCAL_TRANSPORT
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_TRANSPORT
init|=
literal|"local"
decl_stmt|;
DECL|field|HTTP_TYPE_DEFAULT_KEY
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_TYPE_DEFAULT_KEY
init|=
literal|"http.type.default"
decl_stmt|;
DECL|field|TRANSPORT_TYPE_DEFAULT_KEY
specifier|public
specifier|static
specifier|final
name|String
name|TRANSPORT_TYPE_DEFAULT_KEY
init|=
literal|"transport.type.default"
decl_stmt|;
DECL|field|TRANSPORT_DEFAULT_TYPE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|TRANSPORT_DEFAULT_TYPE_SETTING
init|=
name|Setting
operator|.
name|simpleString
argument_list|(
name|TRANSPORT_TYPE_DEFAULT_KEY
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|HTTP_DEFAULT_TYPE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|HTTP_DEFAULT_TYPE_SETTING
init|=
name|Setting
operator|.
name|simpleString
argument_list|(
name|HTTP_TYPE_DEFAULT_KEY
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|HTTP_TYPE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|HTTP_TYPE_SETTING
init|=
name|Setting
operator|.
name|simpleString
argument_list|(
name|HTTP_TYPE_KEY
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|HTTP_ENABLED
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|HTTP_ENABLED
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"http.enabled"
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|TRANSPORT_TYPE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|TRANSPORT_TYPE_SETTING
init|=
name|Setting
operator|.
name|simpleString
argument_list|(
name|TRANSPORT_TYPE_KEY
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|transportClient
specifier|private
specifier|final
name|boolean
name|transportClient
decl_stmt|;
DECL|field|allocationCommandRegistry
specifier|private
specifier|static
specifier|final
name|AllocationCommandRegistry
name|allocationCommandRegistry
init|=
operator|new
name|AllocationCommandRegistry
argument_list|()
decl_stmt|;
DECL|field|namedWriteables
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|>
name|namedWriteables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|transportFactories
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|Transport
argument_list|>
argument_list|>
name|transportFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|transportHttpFactories
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|HttpServerTransport
argument_list|>
argument_list|>
name|transportHttpFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|transportIntercetors
specifier|private
specifier|final
name|List
argument_list|<
name|TransportInterceptor
argument_list|>
name|transportIntercetors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|registerAllocationCommand
argument_list|(
name|CancelAllocationCommand
operator|::
operator|new
argument_list|,
name|CancelAllocationCommand
operator|::
name|fromXContent
argument_list|,
name|CancelAllocationCommand
operator|.
name|COMMAND_NAME_FIELD
argument_list|)
expr_stmt|;
name|registerAllocationCommand
argument_list|(
name|MoveAllocationCommand
operator|::
operator|new
argument_list|,
name|MoveAllocationCommand
operator|::
name|fromXContent
argument_list|,
name|MoveAllocationCommand
operator|.
name|COMMAND_NAME_FIELD
argument_list|)
expr_stmt|;
name|registerAllocationCommand
argument_list|(
name|AllocateReplicaAllocationCommand
operator|::
operator|new
argument_list|,
name|AllocateReplicaAllocationCommand
operator|::
name|fromXContent
argument_list|,
name|AllocateReplicaAllocationCommand
operator|.
name|COMMAND_NAME_FIELD
argument_list|)
expr_stmt|;
name|registerAllocationCommand
argument_list|(
name|AllocateEmptyPrimaryAllocationCommand
operator|::
operator|new
argument_list|,
name|AllocateEmptyPrimaryAllocationCommand
operator|::
name|fromXContent
argument_list|,
name|AllocateEmptyPrimaryAllocationCommand
operator|.
name|COMMAND_NAME_FIELD
argument_list|)
expr_stmt|;
name|registerAllocationCommand
argument_list|(
name|AllocateStalePrimaryAllocationCommand
operator|::
operator|new
argument_list|,
name|AllocateStalePrimaryAllocationCommand
operator|::
name|fromXContent
argument_list|,
name|AllocateStalePrimaryAllocationCommand
operator|.
name|COMMAND_NAME_FIELD
argument_list|)
expr_stmt|;
name|namedWriteables
operator|.
name|add
argument_list|(
operator|new
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|(
name|Task
operator|.
name|Status
operator|.
name|class
argument_list|,
name|ReplicationTask
operator|.
name|Status
operator|.
name|NAME
argument_list|,
name|ReplicationTask
operator|.
name|Status
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|namedWriteables
operator|.
name|add
argument_list|(
operator|new
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|(
name|Task
operator|.
name|Status
operator|.
name|class
argument_list|,
name|RawTaskStatus
operator|.
name|NAME
argument_list|,
name|RawTaskStatus
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a network module that custom networking classes can be plugged into.      * @param settings The settings for the node      * @param transportClient True if only transport classes should be allowed to be registered, false otherwise.      */
DECL|method|NetworkModule
specifier|public
name|NetworkModule
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|boolean
name|transportClient
parameter_list|,
name|List
argument_list|<
name|NetworkPlugin
argument_list|>
name|plugins
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|CircuitBreakerService
name|circuitBreakerService
parameter_list|,
name|NamedWriteableRegistry
name|namedWriteableRegistry
parameter_list|,
name|NetworkService
name|networkService
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|transportClient
operator|=
name|transportClient
expr_stmt|;
name|registerTransport
argument_list|(
name|LOCAL_TRANSPORT
argument_list|,
parameter_list|()
lambda|->
operator|new
name|LocalTransport
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|namedWriteableRegistry
argument_list|,
name|circuitBreakerService
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NetworkPlugin
name|plugin
range|:
name|plugins
control|)
block|{
if|if
condition|(
name|transportClient
operator|==
literal|false
operator|&&
name|HTTP_ENABLED
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|HttpServerTransport
argument_list|>
argument_list|>
name|httpTransportFactory
init|=
name|plugin
operator|.
name|getHttpTransports
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|bigArrays
argument_list|,
name|circuitBreakerService
argument_list|,
name|namedWriteableRegistry
argument_list|,
name|networkService
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|HttpServerTransport
argument_list|>
argument_list|>
name|entry
range|:
name|httpTransportFactory
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|registerHttpTransport
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|Transport
argument_list|>
argument_list|>
name|httpTransportFactory
init|=
name|plugin
operator|.
name|getTransports
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|bigArrays
argument_list|,
name|circuitBreakerService
argument_list|,
name|namedWriteableRegistry
argument_list|,
name|networkService
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|Transport
argument_list|>
argument_list|>
name|entry
range|:
name|httpTransportFactory
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|registerTransport
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TransportInterceptor
argument_list|>
name|transportInterceptors
init|=
name|plugin
operator|.
name|getTransportInterceptors
argument_list|()
decl_stmt|;
for|for
control|(
name|TransportInterceptor
name|interceptor
range|:
name|transportInterceptors
control|)
block|{
name|registerTransportInterceptor
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isTransportClient
specifier|public
name|boolean
name|isTransportClient
parameter_list|()
block|{
return|return
name|transportClient
return|;
block|}
comment|/** Adds a transport implementation that can be selected by setting {@link #TRANSPORT_TYPE_KEY}. */
DECL|method|registerTransport
specifier|private
name|void
name|registerTransport
parameter_list|(
name|String
name|key
parameter_list|,
name|Supplier
argument_list|<
name|Transport
argument_list|>
name|factory
parameter_list|)
block|{
if|if
condition|(
name|transportFactories
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|factory
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"transport for name: "
operator|+
name|key
operator|+
literal|" is already registered"
argument_list|)
throw|;
block|}
block|}
comment|/** Adds an http transport implementation that can be selected by setting {@link #HTTP_TYPE_KEY}. */
comment|// TODO: we need another name than "http transport"....so confusing with transportClient...
DECL|method|registerHttpTransport
specifier|private
name|void
name|registerHttpTransport
parameter_list|(
name|String
name|key
parameter_list|,
name|Supplier
argument_list|<
name|HttpServerTransport
argument_list|>
name|factory
parameter_list|)
block|{
if|if
condition|(
name|transportClient
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot register http transport "
operator|+
name|key
operator|+
literal|" for transport client"
argument_list|)
throw|;
block|}
if|if
condition|(
name|transportHttpFactories
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|factory
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"transport for name: "
operator|+
name|key
operator|+
literal|" is already registered"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Register an allocation command.      *<p>      * This lives here instead of the more aptly named ClusterModule because the Transport client needs these to be registered.      *</p>      * @param reader the reader to read it from a stream      * @param parser the parser to read it from XContent      * @param commandName the names under which the command should be parsed. The {@link ParseField#getPreferredName()} is special because      *        it is the name under which the command's reader is registered.      */
DECL|method|registerAllocationCommand
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|AllocationCommand
parameter_list|>
name|void
name|registerAllocationCommand
parameter_list|(
name|Writeable
operator|.
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|,
name|AllocationCommand
operator|.
name|Parser
argument_list|<
name|T
argument_list|>
name|parser
parameter_list|,
name|ParseField
name|commandName
parameter_list|)
block|{
name|allocationCommandRegistry
operator|.
name|register
argument_list|(
name|parser
argument_list|,
name|commandName
argument_list|)
expr_stmt|;
name|namedWriteables
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|AllocationCommand
operator|.
name|class
argument_list|,
name|commandName
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The registry of allocation command parsers.      */
DECL|method|getAllocationCommandRegistry
specifier|public
specifier|static
name|AllocationCommandRegistry
name|getAllocationCommandRegistry
parameter_list|()
block|{
return|return
name|allocationCommandRegistry
return|;
block|}
DECL|method|getNamedWriteables
specifier|public
specifier|static
name|List
argument_list|<
name|Entry
argument_list|>
name|getNamedWriteables
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|namedWriteables
argument_list|)
return|;
block|}
DECL|method|getHttpServerTransportSupplier
specifier|public
name|Supplier
argument_list|<
name|HttpServerTransport
argument_list|>
name|getHttpServerTransportSupplier
parameter_list|()
block|{
specifier|final
name|String
name|name
decl_stmt|;
if|if
condition|(
name|HTTP_TYPE_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|name
operator|=
name|HTTP_TYPE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|HTTP_DEFAULT_TYPE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Supplier
argument_list|<
name|HttpServerTransport
argument_list|>
name|factory
init|=
name|transportHttpFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported http.type ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|factory
return|;
block|}
DECL|method|isHttpEnabled
specifier|public
name|boolean
name|isHttpEnabled
parameter_list|()
block|{
return|return
name|transportClient
operator|==
literal|false
operator|&&
name|HTTP_ENABLED
operator|.
name|get
argument_list|(
name|settings
argument_list|)
return|;
block|}
DECL|method|getTransportSupplier
specifier|public
name|Supplier
argument_list|<
name|Transport
argument_list|>
name|getTransportSupplier
parameter_list|()
block|{
specifier|final
name|String
name|name
decl_stmt|;
if|if
condition|(
name|TRANSPORT_TYPE_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|name
operator|=
name|TRANSPORT_TYPE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|TRANSPORT_DEFAULT_TYPE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Supplier
argument_list|<
name|Transport
argument_list|>
name|factory
init|=
name|transportFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported transport.type ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|factory
return|;
block|}
comment|/**      * Registers a new {@link TransportInterceptor}      */
DECL|method|registerTransportInterceptor
specifier|private
name|void
name|registerTransportInterceptor
parameter_list|(
name|TransportInterceptor
name|interceptor
parameter_list|)
block|{
name|this
operator|.
name|transportIntercetors
operator|.
name|add
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|interceptor
argument_list|,
literal|"interceptor must not be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a composite {@link TransportInterceptor} containing all registered interceptors      * @see #registerTransportInterceptor(TransportInterceptor)      */
DECL|method|getTransportInterceptor
specifier|public
name|TransportInterceptor
name|getTransportInterceptor
parameter_list|()
block|{
return|return
operator|new
name|CompositeTransportInterceptor
argument_list|(
name|this
operator|.
name|transportIntercetors
argument_list|)
return|;
block|}
DECL|class|CompositeTransportInterceptor
specifier|static
specifier|final
class|class
name|CompositeTransportInterceptor
implements|implements
name|TransportInterceptor
block|{
DECL|field|transportInterceptors
specifier|final
name|List
argument_list|<
name|TransportInterceptor
argument_list|>
name|transportInterceptors
decl_stmt|;
DECL|method|CompositeTransportInterceptor
specifier|private
name|CompositeTransportInterceptor
parameter_list|(
name|List
argument_list|<
name|TransportInterceptor
argument_list|>
name|transportInterceptors
parameter_list|)
block|{
name|this
operator|.
name|transportInterceptors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|transportInterceptors
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|interceptHandler
specifier|public
parameter_list|<
name|T
extends|extends
name|TransportRequest
parameter_list|>
name|TransportRequestHandler
argument_list|<
name|T
argument_list|>
name|interceptHandler
parameter_list|(
name|String
name|action
parameter_list|,
name|TransportRequestHandler
argument_list|<
name|T
argument_list|>
name|actualHandler
parameter_list|)
block|{
for|for
control|(
name|TransportInterceptor
name|interceptor
range|:
name|this
operator|.
name|transportInterceptors
control|)
block|{
name|actualHandler
operator|=
name|interceptor
operator|.
name|interceptHandler
argument_list|(
name|action
argument_list|,
name|actualHandler
argument_list|)
expr_stmt|;
block|}
return|return
name|actualHandler
return|;
block|}
annotation|@
name|Override
DECL|method|interceptSender
specifier|public
name|AsyncSender
name|interceptSender
parameter_list|(
name|AsyncSender
name|sender
parameter_list|)
block|{
for|for
control|(
name|TransportInterceptor
name|interceptor
range|:
name|this
operator|.
name|transportInterceptors
control|)
block|{
name|sender
operator|=
name|interceptor
operator|.
name|interceptSender
argument_list|(
name|sender
argument_list|)
expr_stmt|;
block|}
return|return
name|sender
return|;
block|}
block|}
block|}
end_class

end_unit

