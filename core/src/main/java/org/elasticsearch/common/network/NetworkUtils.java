begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.network
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet4Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utilities for network interfaces / addresses binding and publishing.  * Its only intended for that purpose, not general purpose usage!!!!  */
end_comment

begin_class
DECL|class|NetworkUtils
specifier|public
specifier|abstract
class|class
name|NetworkUtils
block|{
comment|/** no instantation */
DECL|method|NetworkUtils
specifier|private
name|NetworkUtils
parameter_list|()
block|{}
comment|/**      * By default we bind to any addresses on an interface/name, unless restricted by :ipv4 etc.      * This property is unrelated to that, this is about what we *publish*. Today the code pretty much      * expects one address so this is used for the sort order.      * @deprecated transition mechanism only      */
annotation|@
name|Deprecated
DECL|field|PREFER_V6
specifier|static
specifier|final
name|boolean
name|PREFER_V6
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.net.preferIPv6Addresses"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * True if we can bind to a v6 address. Its silly, but for *binding* we have a need to know      * if the stack works. this can prevent scary noise on IPv4-only hosts.      * @deprecated transition mechanism only, do not use      */
annotation|@
name|Deprecated
DECL|field|SUPPORTS_V6
specifier|public
specifier|static
specifier|final
name|boolean
name|SUPPORTS_V6
decl_stmt|;
static|static
block|{
name|boolean
name|v
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|NetworkInterface
name|nic
range|:
name|getInterfaces
argument_list|()
control|)
block|{
for|for
control|(
name|InetAddress
name|address
range|:
name|Collections
operator|.
name|list
argument_list|(
name|nic
operator|.
name|getInetAddresses
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|address
operator|instanceof
name|Inet6Address
condition|)
block|{
name|v
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
decl||
name|SocketException
name|misconfiguration
parameter_list|)
block|{
name|v
operator|=
literal|true
expr_stmt|;
comment|// be optimistic, you misconfigure, then you get noise to your screen
block|}
name|SUPPORTS_V6
operator|=
name|v
expr_stmt|;
block|}
comment|/** Sorts an address by preference. This way code like publishing can just pick the first one */
DECL|method|sortKey
specifier|static
name|int
name|sortKey
parameter_list|(
name|InetAddress
name|address
parameter_list|,
name|boolean
name|prefer_v6
parameter_list|)
block|{
name|int
name|key
init|=
name|address
operator|.
name|getAddress
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|prefer_v6
condition|)
block|{
name|key
operator|=
operator|-
name|key
expr_stmt|;
block|}
if|if
condition|(
name|address
operator|.
name|isAnyLocalAddress
argument_list|()
condition|)
block|{
name|key
operator|+=
literal|5
expr_stmt|;
block|}
if|if
condition|(
name|address
operator|.
name|isMulticastAddress
argument_list|()
condition|)
block|{
name|key
operator|+=
literal|4
expr_stmt|;
block|}
if|if
condition|(
name|address
operator|.
name|isLoopbackAddress
argument_list|()
condition|)
block|{
name|key
operator|+=
literal|3
expr_stmt|;
block|}
if|if
condition|(
name|address
operator|.
name|isLinkLocalAddress
argument_list|()
condition|)
block|{
name|key
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|address
operator|.
name|isSiteLocalAddress
argument_list|()
condition|)
block|{
name|key
operator|+=
literal|1
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
comment|/**       * Sorts addresses by order of preference. This is used to pick the first one for publishing      * @deprecated remove this when multihoming is really correct      */
annotation|@
name|Deprecated
DECL|method|sortAddresses
specifier|static
name|void
name|sortAddresses
parameter_list|(
name|List
argument_list|<
name|InetAddress
argument_list|>
name|list
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|Comparator
argument_list|<
name|InetAddress
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|InetAddress
name|left
parameter_list|,
name|InetAddress
name|right
parameter_list|)
block|{
name|int
name|cmp
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|sortKey
argument_list|(
name|left
argument_list|,
name|PREFER_V6
argument_list|)
argument_list|,
name|sortKey
argument_list|(
name|right
argument_list|,
name|PREFER_V6
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
operator|new
name|BytesRef
argument_list|(
name|left
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|right
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cmp
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** Return all interfaces (and subinterfaces) on the system */
DECL|method|getInterfaces
specifier|static
name|List
argument_list|<
name|NetworkInterface
argument_list|>
name|getInterfaces
parameter_list|()
throws|throws
name|SocketException
block|{
name|List
argument_list|<
name|NetworkInterface
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|addAllInterfaces
argument_list|(
name|all
argument_list|,
name|Collections
operator|.
name|list
argument_list|(
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|all
argument_list|,
operator|new
name|Comparator
argument_list|<
name|NetworkInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|NetworkInterface
name|left
parameter_list|,
name|NetworkInterface
name|right
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|left
operator|.
name|getIndex
argument_list|()
argument_list|,
name|right
operator|.
name|getIndex
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|all
return|;
block|}
comment|/** Helper for getInterfaces, recursively adds subinterfaces to {@code target} */
DECL|method|addAllInterfaces
specifier|private
specifier|static
name|void
name|addAllInterfaces
parameter_list|(
name|List
argument_list|<
name|NetworkInterface
argument_list|>
name|target
parameter_list|,
name|List
argument_list|<
name|NetworkInterface
argument_list|>
name|level
parameter_list|)
block|{
if|if
condition|(
operator|!
name|level
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|target
operator|.
name|addAll
argument_list|(
name|level
argument_list|)
expr_stmt|;
for|for
control|(
name|NetworkInterface
name|intf
range|:
name|level
control|)
block|{
name|addAllInterfaces
argument_list|(
name|target
argument_list|,
name|Collections
operator|.
name|list
argument_list|(
name|intf
operator|.
name|getSubInterfaces
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Returns system default for SO_REUSEADDR */
DECL|method|defaultReuseAddress
specifier|public
specifier|static
name|boolean
name|defaultReuseAddress
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|WINDOWS
condition|?
literal|false
else|:
literal|true
return|;
block|}
comment|/** Returns addresses for all loopback interfaces that are up. */
DECL|method|getLoopbackAddresses
specifier|static
name|InetAddress
index|[]
name|getLoopbackAddresses
parameter_list|()
throws|throws
name|SocketException
block|{
name|List
argument_list|<
name|InetAddress
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|NetworkInterface
name|intf
range|:
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|intf
operator|.
name|isLoopback
argument_list|()
operator|&&
name|intf
operator|.
name|isUp
argument_list|()
condition|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|list
argument_list|(
name|intf
operator|.
name|getInetAddresses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No up-and-running loopback interfaces found, got "
operator|+
name|getInterfaces
argument_list|()
argument_list|)
throw|;
block|}
name|sortAddresses
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|InetAddress
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** Returns addresses for the first non-loopback interface that is up. */
DECL|method|getFirstNonLoopbackAddresses
specifier|static
name|InetAddress
index|[]
name|getFirstNonLoopbackAddresses
parameter_list|()
throws|throws
name|SocketException
block|{
name|List
argument_list|<
name|InetAddress
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|NetworkInterface
name|intf
range|:
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|intf
operator|.
name|isLoopback
argument_list|()
operator|==
literal|false
operator|&&
name|intf
operator|.
name|isUp
argument_list|()
condition|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|list
argument_list|(
name|intf
operator|.
name|getInetAddresses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No up-and-running non-loopback interfaces found, got "
operator|+
name|getInterfaces
argument_list|()
argument_list|)
throw|;
block|}
name|sortAddresses
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|InetAddress
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** Returns addresses for the given interface (it must be marked up) */
DECL|method|getAddressesForInterface
specifier|static
name|InetAddress
index|[]
name|getAddressesForInterface
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SocketException
block|{
name|NetworkInterface
name|intf
init|=
name|NetworkInterface
operator|.
name|getByName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|intf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No interface named '"
operator|+
name|name
operator|+
literal|"' found, got "
operator|+
name|getInterfaces
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|intf
operator|.
name|isUp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Interface '"
operator|+
name|name
operator|+
literal|"' is not up and running"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|InetAddress
argument_list|>
name|list
init|=
name|Collections
operator|.
name|list
argument_list|(
name|intf
operator|.
name|getInetAddresses
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Interface '"
operator|+
name|name
operator|+
literal|"' has no internet addresses"
argument_list|)
throw|;
block|}
name|sortAddresses
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|InetAddress
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** Returns addresses for the given host, sorted by order of preference */
DECL|method|getAllByName
specifier|static
name|InetAddress
index|[]
name|getAllByName
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|InetAddress
name|addresses
index|[]
init|=
name|InetAddress
operator|.
name|getAllByName
argument_list|(
name|host
argument_list|)
decl_stmt|;
comment|// deduplicate, in case of resolver misconfiguration
comment|// stuff like https://bugzilla.redhat.com/show_bug.cgi?id=496300
name|List
argument_list|<
name|InetAddress
argument_list|>
name|unique
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|addresses
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|sortAddresses
argument_list|(
name|unique
argument_list|)
expr_stmt|;
return|return
name|unique
operator|.
name|toArray
argument_list|(
operator|new
name|InetAddress
index|[
name|unique
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** Returns only the IPV4 addresses in {@code addresses} */
DECL|method|filterIPV4
specifier|static
name|InetAddress
index|[]
name|filterIPV4
parameter_list|(
name|InetAddress
name|addresses
index|[]
parameter_list|)
block|{
name|List
argument_list|<
name|InetAddress
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|InetAddress
name|address
range|:
name|addresses
control|)
block|{
if|if
condition|(
name|address
operator|instanceof
name|Inet4Address
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ipv4 addresses found in "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|addresses
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|InetAddress
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** Returns only the IPV6 addresses in {@code addresses} */
DECL|method|filterIPV6
specifier|static
name|InetAddress
index|[]
name|filterIPV6
parameter_list|(
name|InetAddress
name|addresses
index|[]
parameter_list|)
block|{
name|List
argument_list|<
name|InetAddress
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|InetAddress
name|address
range|:
name|addresses
control|)
block|{
if|if
condition|(
name|address
operator|instanceof
name|Inet6Address
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ipv6 addresses found in "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|addresses
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|InetAddress
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

