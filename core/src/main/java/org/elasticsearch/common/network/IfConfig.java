begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.network
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InterfaceAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Simple class to log {@code ifconfig}-style output at DEBUG logging.  */
end_comment

begin_class
DECL|class|IfConfig
specifier|final
class|class
name|IfConfig
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|IfConfig
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INDENT
specifier|private
specifier|static
specifier|final
name|String
name|INDENT
init|=
literal|"        "
decl_stmt|;
comment|/** log interface configuration at debug level, if its enabled */
DECL|method|logIfNecessary
specifier|static
name|void
name|logIfNecessary
parameter_list|()
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|doLogging
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unable to gather network information"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** perform actual logging: might throw exception if things go wrong */
DECL|method|doLogging
specifier|private
specifier|static
name|void
name|doLogging
parameter_list|()
throws|throws
name|IOException
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|NetworkInterface
name|nic
range|:
name|NetworkUtils
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// ordinary name
name|msg
operator|.
name|append
argument_list|(
name|nic
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// display name (e.g. on windows)
if|if
condition|(
operator|!
name|nic
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|nic
operator|.
name|getDisplayName
argument_list|()
argument_list|)
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|INDENT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|nic
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// addresses: v4 first, then v6
name|List
argument_list|<
name|InterfaceAddress
argument_list|>
name|addresses
init|=
name|nic
operator|.
name|getInterfaceAddresses
argument_list|()
decl_stmt|;
for|for
control|(
name|InterfaceAddress
name|address
range|:
name|addresses
control|)
block|{
if|if
condition|(
name|address
operator|.
name|getAddress
argument_list|()
operator|instanceof
name|Inet6Address
operator|==
literal|false
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|INDENT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|formatAddress
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|InterfaceAddress
name|address
range|:
name|addresses
control|)
block|{
if|if
condition|(
name|address
operator|.
name|getAddress
argument_list|()
operator|instanceof
name|Inet6Address
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|INDENT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|formatAddress
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// hardware address
name|byte
name|hardware
index|[]
init|=
name|nic
operator|.
name|getHardwareAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|hardware
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|INDENT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"hardware "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hardware
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%02X"
argument_list|,
name|hardware
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// attributes
name|msg
operator|.
name|append
argument_list|(
name|INDENT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|formatFlags
argument_list|(
name|nic
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"configuration:{}{}"
argument_list|,
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
comment|/** format internet address: java's default doesn't include everything useful */
DECL|method|formatAddress
specifier|private
specifier|static
name|String
name|formatAddress
parameter_list|(
name|InterfaceAddress
name|interfaceAddress
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|InetAddress
name|address
init|=
name|interfaceAddress
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|instanceof
name|Inet6Address
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"inet6 "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" prefixlen:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|interfaceAddress
operator|.
name|getNetworkPrefixLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"inet "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|netmask
init|=
literal|0xFFFFFFFF
operator|<<
operator|(
literal|32
operator|-
name|interfaceAddress
operator|.
name|getNetworkPrefixLength
argument_list|()
operator|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" netmask:"
operator|+
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|netmask
operator|>>>
literal|24
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|netmask
operator|>>>
literal|16
operator|&
literal|0xFF
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|netmask
operator|>>>
literal|8
operator|&
literal|0xFF
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|netmask
operator|&
literal|0xFF
argument_list|)
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|InetAddress
name|broadcast
init|=
name|interfaceAddress
operator|.
name|getBroadcast
argument_list|()
decl_stmt|;
if|if
condition|(
name|broadcast
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" broadcast:"
operator|+
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
name|broadcast
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|address
operator|.
name|isLoopbackAddress
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" scope:host"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|address
operator|.
name|isLinkLocalAddress
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" scope:link"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|address
operator|.
name|isSiteLocalAddress
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" scope:site"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** format network interface flags */
DECL|method|formatFlags
specifier|private
specifier|static
name|String
name|formatFlags
parameter_list|(
name|NetworkInterface
name|nic
parameter_list|)
throws|throws
name|SocketException
block|{
name|StringBuilder
name|flags
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|nic
operator|.
name|isUp
argument_list|()
condition|)
block|{
name|flags
operator|.
name|append
argument_list|(
literal|"UP "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nic
operator|.
name|supportsMulticast
argument_list|()
condition|)
block|{
name|flags
operator|.
name|append
argument_list|(
literal|"MULTICAST "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nic
operator|.
name|isLoopback
argument_list|()
condition|)
block|{
name|flags
operator|.
name|append
argument_list|(
literal|"LOOPBACK "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nic
operator|.
name|isPointToPoint
argument_list|()
condition|)
block|{
name|flags
operator|.
name|append
argument_list|(
literal|"POINTOPOINT "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nic
operator|.
name|isVirtual
argument_list|()
condition|)
block|{
name|flags
operator|.
name|append
argument_list|(
literal|"VIRTUAL "
argument_list|)
expr_stmt|;
block|}
name|flags
operator|.
name|append
argument_list|(
literal|"mtu:"
operator|+
name|nic
operator|.
name|getMTU
argument_list|()
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
literal|" index:"
operator|+
name|nic
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|flags
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

