begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.network
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|Cidrs
specifier|public
specifier|final
class|class
name|Cidrs
block|{
DECL|method|Cidrs
specifier|private
name|Cidrs
parameter_list|()
block|{     }
comment|/**      * Parses an IPv4 address block in CIDR notation into a pair of      * longs representing the bottom and top of the address block      *      * @param cidr an address block in CIDR notation a.b.c.d/n      * @return array representing the address block      * @throws IllegalArgumentException if the cidr can not be parsed      */
DECL|method|cidrMaskToMinMax
specifier|public
specifier|static
name|long
index|[]
name|cidrMaskToMinMax
parameter_list|(
name|String
name|cidr
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|cidr
argument_list|,
literal|"cidr"
argument_list|)
expr_stmt|;
name|String
index|[]
name|fields
init|=
name|cidr
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid IPv4/CIDR; expected [a.b.c.d, e] but was [%s] after splitting on \"/\" in [%s]"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|fields
argument_list|)
argument_list|,
name|cidr
argument_list|)
argument_list|)
throw|;
block|}
comment|// do not try to parse IPv4-mapped IPv6 address
if|if
condition|(
name|fields
index|[
literal|0
index|]
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid IPv4/CIDR; expected [a.b.c.d, e] where a, b, c, d are decimal octets but was [%s] after splitting on \"/\" in [%s]"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|fields
argument_list|)
argument_list|,
name|cidr
argument_list|)
argument_list|)
throw|;
block|}
name|byte
index|[]
name|addressBytes
decl_stmt|;
try|try
block|{
name|addressBytes
operator|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid IPv4/CIDR; unable to parse [%s] as an IP address literal"
argument_list|,
name|fields
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|t
argument_list|)
throw|;
block|}
name|long
name|accumulator
init|=
operator|(
operator|(
name|addressBytes
index|[
literal|0
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|24
operator|)
operator|+
operator|(
operator|(
name|addressBytes
index|[
literal|1
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|addressBytes
index|[
literal|2
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
name|addressBytes
index|[
literal|3
index|]
operator|&
literal|0xFFL
operator|)
operator|)
decl_stmt|;
name|int
name|networkMask
decl_stmt|;
try|try
block|{
name|networkMask
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid IPv4/CIDR; invalid network mask [%s] in [%s]"
argument_list|,
name|fields
index|[
literal|1
index|]
argument_list|,
name|cidr
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|networkMask
argument_list|<
literal|0
operator|||
name|networkMask
argument_list|>
literal|32
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid IPv4/CIDR; invalid network mask [%s], out of range in [%s]"
argument_list|,
name|fields
index|[
literal|1
index|]
argument_list|,
name|cidr
argument_list|)
argument_list|)
throw|;
block|}
name|long
name|blockSize
init|=
literal|1L
operator|<<
operator|(
literal|32
operator|-
name|networkMask
operator|)
decl_stmt|;
comment|// validation
if|if
condition|(
operator|(
name|accumulator
operator|&
operator|(
name|blockSize
operator|-
literal|1
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid IPv4/CIDR; invalid address/network mask combination in [%s]; perhaps [%s] was intended?"
argument_list|,
name|cidr
argument_list|,
name|octetsToCIDR
argument_list|(
name|longToOctets
argument_list|(
name|accumulator
operator|-
operator|(
name|accumulator
operator|&
operator|(
name|blockSize
operator|-
literal|1
operator|)
operator|)
argument_list|)
argument_list|,
name|networkMask
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|new
name|long
index|[]
block|{
name|accumulator
block|,
name|accumulator
operator|+
name|blockSize
block|}
return|;
block|}
DECL|method|longToOctets
specifier|static
name|int
index|[]
name|longToOctets
parameter_list|(
name|long
name|value
parameter_list|)
block|{
assert|assert
name|value
operator|>=
literal|0
operator|&&
name|value
operator|<=
operator|(
literal|1L
operator|<<
literal|32
operator|)
operator|:
name|value
assert|;
name|int
index|[]
name|octets
init|=
operator|new
name|int
index|[
literal|4
index|]
decl_stmt|;
name|octets
index|[
literal|0
index|]
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|value
operator|>>
literal|24
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|octets
index|[
literal|1
index|]
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|value
operator|>>
literal|16
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|octets
index|[
literal|2
index|]
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|value
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|octets
index|[
literal|3
index|]
operator|=
call|(
name|int
call|)
argument_list|(
name|value
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
return|return
name|octets
return|;
block|}
DECL|method|octetsToString
specifier|static
name|String
name|octetsToString
parameter_list|(
name|int
index|[]
name|octets
parameter_list|)
block|{
assert|assert
name|octets
operator|!=
literal|null
assert|;
assert|assert
name|octets
operator|.
name|length
operator|==
literal|4
assert|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%d.%d.%d.%d"
argument_list|,
name|octets
index|[
literal|0
index|]
argument_list|,
name|octets
index|[
literal|1
index|]
argument_list|,
name|octets
index|[
literal|2
index|]
argument_list|,
name|octets
index|[
literal|3
index|]
argument_list|)
return|;
block|}
DECL|method|octetsToCIDR
specifier|static
name|String
name|octetsToCIDR
parameter_list|(
name|int
index|[]
name|octets
parameter_list|,
name|int
name|networkMask
parameter_list|)
block|{
assert|assert
name|octets
operator|!=
literal|null
assert|;
assert|assert
name|octets
operator|.
name|length
operator|==
literal|4
assert|;
return|return
name|octetsToString
argument_list|(
name|octets
argument_list|)
operator|+
literal|"/"
operator|+
name|networkMask
return|;
block|}
DECL|method|createCIDR
specifier|public
specifier|static
name|String
name|createCIDR
parameter_list|(
name|long
name|ipAddress
parameter_list|,
name|int
name|networkMask
parameter_list|)
block|{
return|return
name|octetsToCIDR
argument_list|(
name|longToOctets
argument_list|(
name|ipAddress
argument_list|)
argument_list|,
name|networkMask
argument_list|)
return|;
block|}
block|}
end_class

end_unit

