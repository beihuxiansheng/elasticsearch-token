begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchScrollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * An iterator that easily helps to consume all hits from a scroll search.  */
end_comment

begin_class
DECL|class|SearchScrollIterator
specifier|public
specifier|final
class|class
name|SearchScrollIterator
implements|implements
name|Iterator
argument_list|<
name|SearchHit
argument_list|>
block|{
comment|/**      * Creates an iterator that returns all matching hits of a scroll search via an iterator.      * The iterator will return all hits per scroll search and execute additional scroll searches      * to get more hits until all hits have been returned by the scroll search on the ES side.      */
DECL|method|createIterator
specifier|public
specifier|static
name|Iterable
argument_list|<
name|SearchHit
argument_list|>
name|createIterator
parameter_list|(
name|Client
name|client
parameter_list|,
name|TimeValue
name|scrollTimeout
parameter_list|,
name|SearchRequest
name|searchRequest
parameter_list|)
block|{
name|searchRequest
operator|.
name|scroll
argument_list|(
name|scrollTimeout
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|)
operator|.
name|actionGet
argument_list|(
name|scrollTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
parameter_list|()
lambda|->
operator|new
name|SearchScrollIterator
argument_list|(
name|client
argument_list|,
name|scrollTimeout
argument_list|,
name|searchResponse
argument_list|)
return|;
block|}
block|}
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|field|scrollTimeout
specifier|private
specifier|final
name|TimeValue
name|scrollTimeout
decl_stmt|;
DECL|field|currentIndex
specifier|private
name|int
name|currentIndex
decl_stmt|;
DECL|field|currentHits
specifier|private
name|SearchHit
index|[]
name|currentHits
decl_stmt|;
DECL|field|searchResponse
specifier|private
name|SearchResponse
name|searchResponse
decl_stmt|;
DECL|method|SearchScrollIterator
specifier|private
name|SearchScrollIterator
parameter_list|(
name|Client
name|client
parameter_list|,
name|TimeValue
name|scrollTimeout
parameter_list|,
name|SearchResponse
name|searchResponse
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|scrollTimeout
operator|=
name|scrollTimeout
expr_stmt|;
name|this
operator|.
name|searchResponse
operator|=
name|searchResponse
expr_stmt|;
name|this
operator|.
name|currentHits
operator|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|currentIndex
operator|<
name|currentHits
operator|.
name|length
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|searchResponse
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SearchScrollRequest
name|request
init|=
operator|new
name|SearchScrollRequest
argument_list|(
name|searchResponse
operator|.
name|getScrollId
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|scroll
argument_list|(
name|scrollTimeout
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
operator|.
name|searchScroll
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|(
name|scrollTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|searchResponse
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|currentHits
operator|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
expr_stmt|;
name|currentIndex
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|SearchHit
name|next
parameter_list|()
block|{
return|return
name|currentHits
index|[
name|currentIndex
operator|++
index|]
return|;
block|}
block|}
end_class

end_unit

