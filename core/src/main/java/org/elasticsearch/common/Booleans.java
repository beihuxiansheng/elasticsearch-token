begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_class
DECL|class|Booleans
specifier|public
specifier|final
class|class
name|Booleans
block|{
DECL|method|Booleans
specifier|private
name|Booleans
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"No instances intended"
argument_list|)
throw|;
block|}
comment|/**      * Parses a char[] representation of a boolean value to<code>boolean</code>.      *      * @return<code>true</code> iff the sequence of chars is "true",<code>false</code> iff the sequence of chars is "false" or the      * provided default value iff either text is<code>null</code> or length == 0.      * @throws IllegalArgumentException if the string cannot be parsed to boolean.      */
DECL|method|parseBoolean
specifier|public
specifier|static
name|boolean
name|parseBoolean
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
else|else
block|{
return|return
name|parseBoolean
argument_list|(
operator|new
name|String
argument_list|(
name|text
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * returns true iff the sequence of chars is one of "true","false".      *      * @param text   sequence to check      * @param offset offset to start      * @param length length to check      */
DECL|method|isBoolean
specifier|public
specifier|static
name|boolean
name|isBoolean
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|isBoolean
argument_list|(
operator|new
name|String
argument_list|(
name|text
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isBoolean
specifier|public
specifier|static
name|boolean
name|isBoolean
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|isFalse
argument_list|(
name|value
argument_list|)
operator|||
name|isTrue
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Parses a string representation of a boolean value to<code>boolean</code>.      *      * @return<code>true</code> iff the provided value is "true".<code>false</code> iff the provided value is "false".      * @throws IllegalArgumentException if the string cannot be parsed to boolean.      */
DECL|method|parseBoolean
specifier|public
specifier|static
name|boolean
name|parseBoolean
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|isFalse
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isTrue
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse value ["
operator|+
name|value
operator|+
literal|"] as only [true] or [false] are allowed."
argument_list|)
throw|;
block|}
comment|/**      *      * @param value text to parse.      * @param defaultValue The default value to return if the provided value is<code>null</code>.      * @return see {@link #parseBoolean(String)}      */
DECL|method|parseBoolean
specifier|public
specifier|static
name|boolean
name|parseBoolean
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|parseBoolean
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
name|defaultValue
return|;
block|}
DECL|method|parseBoolean
specifier|public
specifier|static
name|Boolean
name|parseBoolean
parameter_list|(
name|String
name|value
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|parseBoolean
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**      * Returns<code>false</code> if text is in<tt>false</tt>,<tt>0</tt>,<tt>off</tt>,<tt>no</tt>; else, true      *      * @deprecated Only kept to provide automatic upgrades for pre 6.0 indices. Use {@link #parseBoolean(String, Boolean)} instead.      */
annotation|@
name|Deprecated
DECL|method|parseBooleanLenient
specifier|public
specifier|static
name|Boolean
name|parseBooleanLenient
parameter_list|(
name|String
name|value
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// only for the null case we do that here!
return|return
name|defaultValue
return|;
block|}
return|return
name|parseBooleanLenient
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> iff the value is neither of the following:      *<tt>false</tt>,<tt>0</tt>,<tt>off</tt>,<tt>no</tt>      *   otherwise<code>false</code>      *      * @deprecated Only kept to provide automatic upgrades for pre 6.0 indices. Use {@link #parseBoolean(String, boolean)} instead.      */
annotation|@
name|Deprecated
DECL|method|parseBooleanLenient
specifier|public
specifier|static
name|boolean
name|parseBooleanLenient
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
operator|!
operator|(
name|value
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"off"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
operator|)
return|;
block|}
comment|/**      * @return<code>true</code> iff the value is<tt>false</tt>, otherwise<code>false</code>.      */
DECL|method|isFalse
specifier|public
specifier|static
name|boolean
name|isFalse
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
literal|"false"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * @return<code>true</code> iff the value is<tt>true</tt>, otherwise<code>false</code>      */
DECL|method|isTrue
specifier|public
specifier|static
name|boolean
name|isTrue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
literal|"true"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Returns<code>false</code> if text is in<tt>false</tt>,<tt>0</tt>,<tt>off</tt>,<tt>no</tt>; else, true      *      * @deprecated Only kept to provide automatic upgrades for pre 6.0 indices. Use {@link #parseBoolean(char[], int, int, boolean)} instead      */
annotation|@
name|Deprecated
DECL|method|parseBooleanLenient
specifier|public
specifier|static
name|boolean
name|parseBooleanLenient
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
if|if
condition|(
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|text
index|[
name|offset
index|]
operator|!=
literal|'0'
return|;
block|}
if|if
condition|(
name|length
operator|==
literal|2
condition|)
block|{
return|return
operator|!
operator|(
name|text
index|[
name|offset
index|]
operator|==
literal|'n'
operator|&&
name|text
index|[
name|offset
operator|+
literal|1
index|]
operator|==
literal|'o'
operator|)
return|;
block|}
if|if
condition|(
name|length
operator|==
literal|3
condition|)
block|{
return|return
operator|!
operator|(
name|text
index|[
name|offset
index|]
operator|==
literal|'o'
operator|&&
name|text
index|[
name|offset
operator|+
literal|1
index|]
operator|==
literal|'f'
operator|&&
name|text
index|[
name|offset
operator|+
literal|2
index|]
operator|==
literal|'f'
operator|)
return|;
block|}
if|if
condition|(
name|length
operator|==
literal|5
condition|)
block|{
return|return
operator|!
operator|(
name|text
index|[
name|offset
index|]
operator|==
literal|'f'
operator|&&
name|text
index|[
name|offset
operator|+
literal|1
index|]
operator|==
literal|'a'
operator|&&
name|text
index|[
name|offset
operator|+
literal|2
index|]
operator|==
literal|'l'
operator|&&
name|text
index|[
name|offset
operator|+
literal|3
index|]
operator|==
literal|'s'
operator|&&
name|text
index|[
name|offset
operator|+
literal|4
index|]
operator|==
literal|'e'
operator|)
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * returns true if the a sequence of chars is one of "true","false","on","off","yes","no","0","1"      *      * @param text   sequence to check      * @param offset offset to start      * @param length length to check      *      * @deprecated Only kept to provide automatic upgrades for pre 6.0 indices. Use {@link #isBoolean(char[], int, int)} instead.      */
annotation|@
name|Deprecated
DECL|method|isBooleanLenient
specifier|public
specifier|static
name|boolean
name|isBooleanLenient
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|text
index|[
name|offset
index|]
operator|==
literal|'0'
operator|||
name|text
index|[
name|offset
index|]
operator|==
literal|'1'
return|;
block|}
if|if
condition|(
name|length
operator|==
literal|2
condition|)
block|{
return|return
operator|(
name|text
index|[
name|offset
index|]
operator|==
literal|'n'
operator|&&
name|text
index|[
name|offset
operator|+
literal|1
index|]
operator|==
literal|'o'
operator|)
operator|||
operator|(
name|text
index|[
name|offset
index|]
operator|==
literal|'o'
operator|&&
name|text
index|[
name|offset
operator|+
literal|1
index|]
operator|==
literal|'n'
operator|)
return|;
block|}
if|if
condition|(
name|length
operator|==
literal|3
condition|)
block|{
return|return
operator|(
name|text
index|[
name|offset
index|]
operator|==
literal|'o'
operator|&&
name|text
index|[
name|offset
operator|+
literal|1
index|]
operator|==
literal|'f'
operator|&&
name|text
index|[
name|offset
operator|+
literal|2
index|]
operator|==
literal|'f'
operator|)
operator|||
operator|(
name|text
index|[
name|offset
index|]
operator|==
literal|'y'
operator|&&
name|text
index|[
name|offset
operator|+
literal|1
index|]
operator|==
literal|'e'
operator|&&
name|text
index|[
name|offset
operator|+
literal|2
index|]
operator|==
literal|'s'
operator|)
return|;
block|}
if|if
condition|(
name|length
operator|==
literal|4
condition|)
block|{
return|return
operator|(
name|text
index|[
name|offset
index|]
operator|==
literal|'t'
operator|&&
name|text
index|[
name|offset
operator|+
literal|1
index|]
operator|==
literal|'r'
operator|&&
name|text
index|[
name|offset
operator|+
literal|2
index|]
operator|==
literal|'u'
operator|&&
name|text
index|[
name|offset
operator|+
literal|3
index|]
operator|==
literal|'e'
operator|)
return|;
block|}
if|if
condition|(
name|length
operator|==
literal|5
condition|)
block|{
return|return
operator|(
name|text
index|[
name|offset
index|]
operator|==
literal|'f'
operator|&&
name|text
index|[
name|offset
operator|+
literal|1
index|]
operator|==
literal|'a'
operator|&&
name|text
index|[
name|offset
operator|+
literal|2
index|]
operator|==
literal|'l'
operator|&&
name|text
index|[
name|offset
operator|+
literal|3
index|]
operator|==
literal|'s'
operator|&&
name|text
index|[
name|offset
operator|+
literal|4
index|]
operator|==
literal|'e'
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

