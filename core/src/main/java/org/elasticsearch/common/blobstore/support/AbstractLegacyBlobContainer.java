begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.blobstore.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * Temporary compatibility interface.  *  * This class should be removed after S3 and Azure containers migrate to the new model  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|AbstractLegacyBlobContainer
specifier|public
specifier|abstract
class|class
name|AbstractLegacyBlobContainer
extends|extends
name|AbstractBlobContainer
block|{
DECL|method|AbstractLegacyBlobContainer
specifier|protected
name|AbstractLegacyBlobContainer
parameter_list|(
name|BlobPath
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new {@link InputStream} for the given blob name      *<p/>      * This method is deprecated and is used only for compatibility with older blob containers      * The new blob containers should use readBlob/writeBlob methods instead      */
annotation|@
name|Deprecated
DECL|method|openInput
specifier|protected
specifier|abstract
name|InputStream
name|openInput
parameter_list|(
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Creates a new OutputStream for the given blob name      *<p/>      * This method is deprecated and is used only for compatibility with older blob containers      * The new blob containers should override readBlob/writeBlob methods instead      */
annotation|@
name|Deprecated
DECL|method|createOutput
specifier|protected
specifier|abstract
name|OutputStream
name|createOutput
parameter_list|(
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|readBlob
specifier|public
name|InputStream
name|readBlob
parameter_list|(
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|openInput
argument_list|(
name|blobName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeBlob
specifier|public
name|void
name|writeBlob
parameter_list|(
name|String
name|blobName
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|long
name|blobSize
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|OutputStream
name|stream
init|=
name|createOutput
argument_list|(
name|blobName
argument_list|)
init|)
block|{
name|Streams
operator|.
name|copy
argument_list|(
name|inputStream
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeBlob
specifier|public
name|void
name|writeBlob
parameter_list|(
name|String
name|blobName
parameter_list|,
name|BytesReference
name|data
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|OutputStream
name|stream
init|=
name|createOutput
argument_list|(
name|blobName
argument_list|)
init|)
block|{
name|data
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

