begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.rounding
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A strategy for rounding long values.  */
end_comment

begin_class
DECL|class|Rounding
specifier|public
specifier|abstract
class|class
name|Rounding
implements|implements
name|Streamable
block|{
DECL|method|id
specifier|public
specifier|abstract
name|byte
name|id
parameter_list|()
function_decl|;
comment|/**      * Rounds the given value.      */
DECL|method|round
specifier|public
specifier|abstract
name|long
name|round
parameter_list|(
name|long
name|value
parameter_list|)
function_decl|;
comment|/**      * Given the rounded value (which was potentially generated by {@link #round(long)}, returns the next rounding value. For example, with      * interval based rounding, if the interval is 3, {@code nextRoundValue(6) = 9 }.      *      * @param value The current rounding value      * @return      The next rounding value;      */
DECL|method|nextRoundingValue
specifier|public
specifier|abstract
name|long
name|nextRoundingValue
parameter_list|(
name|long
name|value
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|abstract
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|abstract
name|int
name|hashCode
parameter_list|()
function_decl|;
DECL|class|OffsetRounding
specifier|public
specifier|static
class|class
name|OffsetRounding
extends|extends
name|Rounding
block|{
DECL|field|ID
specifier|static
specifier|final
name|byte
name|ID
init|=
literal|8
decl_stmt|;
DECL|field|rounding
specifier|private
name|Rounding
name|rounding
decl_stmt|;
DECL|field|offset
specifier|private
name|long
name|offset
decl_stmt|;
DECL|method|OffsetRounding
name|OffsetRounding
parameter_list|()
block|{
comment|// for serialization
block|}
DECL|method|OffsetRounding
specifier|public
name|OffsetRounding
parameter_list|(
name|Rounding
name|intervalRounding
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|rounding
operator|=
name|intervalRounding
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
annotation|@
name|Override
DECL|method|round
specifier|public
name|long
name|round
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
name|rounding
operator|.
name|round
argument_list|(
name|value
operator|-
name|offset
argument_list|)
operator|+
name|offset
return|;
block|}
annotation|@
name|Override
DECL|method|nextRoundingValue
specifier|public
name|long
name|nextRoundingValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
name|rounding
operator|.
name|nextRoundingValue
argument_list|(
name|value
operator|-
name|offset
argument_list|)
operator|+
name|offset
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|rounding
operator|=
name|Rounding
operator|.
name|Streams
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|offset
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Rounding
operator|.
name|Streams
operator|.
name|write
argument_list|(
name|rounding
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|rounding
argument_list|,
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|OffsetRounding
name|other
init|=
operator|(
name|OffsetRounding
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|rounding
argument_list|,
name|other
operator|.
name|rounding
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|offset
argument_list|,
name|other
operator|.
name|offset
argument_list|)
return|;
block|}
block|}
DECL|class|Streams
specifier|public
specifier|static
class|class
name|Streams
block|{
DECL|method|write
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|Rounding
name|rounding
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|rounding
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|rounding
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|read
specifier|public
specifier|static
name|Rounding
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Rounding
name|rounding
init|=
literal|null
decl_stmt|;
name|byte
name|id
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|id
condition|)
block|{
case|case
name|TimeZoneRounding
operator|.
name|TimeUnitRounding
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|TimeUnitRounding
argument_list|()
expr_stmt|;
break|break;
case|case
name|TimeZoneRounding
operator|.
name|TimeIntervalRounding
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|TimeIntervalRounding
argument_list|()
expr_stmt|;
break|break;
case|case
name|OffsetRounding
operator|.
name|ID
case|:
name|rounding
operator|=
operator|new
name|OffsetRounding
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"unknown rounding id ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|rounding
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|rounding
return|;
block|}
block|}
block|}
end_class

end_unit

