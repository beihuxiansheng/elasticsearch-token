begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.rounding
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|IllegalInstantException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A rounding strategy for dates. It is typically used to group together dates  * that are part of the same hour/day/month, taking into account time zones and  * daylight saving times.  */
end_comment

begin_class
DECL|class|TimeZoneRounding
specifier|public
specifier|abstract
class|class
name|TimeZoneRounding
extends|extends
name|Rounding
block|{
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|DateTimeUnit
name|unit
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|unit
argument_list|)
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|TimeValue
name|interval
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|interval
argument_list|)
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|unit
specifier|private
specifier|final
name|DateTimeUnit
name|unit
decl_stmt|;
DECL|field|interval
specifier|private
specifier|final
name|long
name|interval
decl_stmt|;
DECL|field|timeZone
specifier|private
name|DateTimeZone
name|timeZone
init|=
name|DateTimeZone
operator|.
name|UTC
decl_stmt|;
DECL|field|offset
specifier|private
name|long
name|offset
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|DateTimeUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|unit
operator|=
name|unit
expr_stmt|;
name|this
operator|.
name|interval
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|TimeValue
name|interval
parameter_list|)
block|{
name|this
operator|.
name|unit
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|interval
operator|.
name|millis
argument_list|()
operator|<
literal|1
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Zero or negative time interval not supported"
argument_list|)
throw|;
name|this
operator|.
name|interval
operator|=
name|interval
operator|.
name|millis
argument_list|()
expr_stmt|;
block|}
DECL|method|timeZone
specifier|public
name|Builder
name|timeZone
parameter_list|(
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
if|if
condition|(
name|timeZone
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting null as timezone is not supported"
argument_list|)
throw|;
block|}
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|offset
specifier|public
name|Builder
name|offset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|Rounding
name|build
parameter_list|()
block|{
name|Rounding
name|timeZoneRounding
decl_stmt|;
if|if
condition|(
name|unit
operator|!=
literal|null
condition|)
block|{
name|timeZoneRounding
operator|=
operator|new
name|TimeUnitRounding
argument_list|(
name|unit
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timeZoneRounding
operator|=
operator|new
name|TimeIntervalRounding
argument_list|(
name|interval
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
literal|0
condition|)
block|{
name|timeZoneRounding
operator|=
operator|new
name|OffsetRounding
argument_list|(
name|timeZoneRounding
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|timeZoneRounding
return|;
block|}
block|}
DECL|class|TimeUnitRounding
specifier|static
class|class
name|TimeUnitRounding
extends|extends
name|TimeZoneRounding
block|{
DECL|field|ID
specifier|static
specifier|final
name|byte
name|ID
init|=
literal|1
decl_stmt|;
DECL|field|unit
specifier|private
name|DateTimeUnit
name|unit
decl_stmt|;
DECL|field|field
specifier|private
name|DateTimeField
name|field
decl_stmt|;
DECL|field|timeZone
specifier|private
name|DateTimeZone
name|timeZone
decl_stmt|;
DECL|method|TimeUnitRounding
name|TimeUnitRounding
parameter_list|()
block|{
comment|// for serialization
block|}
DECL|method|TimeUnitRounding
name|TimeUnitRounding
parameter_list|(
name|DateTimeUnit
name|unit
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
name|this
operator|.
name|unit
operator|=
name|unit
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|unit
operator|.
name|field
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
annotation|@
name|Override
DECL|method|round
specifier|public
name|long
name|round
parameter_list|(
name|long
name|utcMillis
parameter_list|)
block|{
name|long
name|rounded
init|=
name|field
operator|.
name|roundFloor
argument_list|(
name|utcMillis
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeZone
operator|.
name|isFixed
argument_list|()
operator|==
literal|false
operator|&&
name|timeZone
operator|.
name|getOffset
argument_list|(
name|utcMillis
argument_list|)
operator|!=
name|timeZone
operator|.
name|getOffset
argument_list|(
name|rounded
argument_list|)
condition|)
block|{
comment|// in this case, we crossed a time zone transition. In some edge cases this will
comment|// result in a value that is not a rounded value itself. We need to round again
comment|// to make sure. This will have no affect in cases where 'rounded' was already a proper
comment|// rounded value
name|rounded
operator|=
name|field
operator|.
name|roundFloor
argument_list|(
name|rounded
argument_list|)
expr_stmt|;
block|}
assert|assert
name|rounded
operator|==
name|field
operator|.
name|roundFloor
argument_list|(
name|rounded
argument_list|)
assert|;
return|return
name|rounded
return|;
block|}
annotation|@
name|Override
DECL|method|nextRoundingValue
specifier|public
name|long
name|nextRoundingValue
parameter_list|(
name|long
name|utcMillis
parameter_list|)
block|{
name|long
name|floor
init|=
name|round
argument_list|(
name|utcMillis
argument_list|)
decl_stmt|;
comment|// add one unit and round to get to next rounded value
name|long
name|next
init|=
name|round
argument_list|(
name|field
operator|.
name|add
argument_list|(
name|floor
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|floor
condition|)
block|{
comment|// in rare case we need to add more than one unit
name|next
operator|=
name|round
argument_list|(
name|field
operator|.
name|add
argument_list|(
name|floor
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|unit
operator|=
name|DateTimeUnit
operator|.
name|resolve
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|timeZone
operator|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|=
name|unit
operator|.
name|field
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|unit
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|unit
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TimeUnitRounding
name|other
init|=
operator|(
name|TimeUnitRounding
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|unit
argument_list|,
name|other
operator|.
name|unit
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|timeZone
argument_list|,
name|other
operator|.
name|timeZone
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|timeZone
operator|+
literal|"]["
operator|+
name|unit
operator|+
literal|"]"
return|;
block|}
block|}
DECL|class|TimeIntervalRounding
specifier|static
class|class
name|TimeIntervalRounding
extends|extends
name|TimeZoneRounding
block|{
DECL|field|ID
specifier|static
specifier|final
name|byte
name|ID
init|=
literal|2
decl_stmt|;
DECL|field|interval
specifier|private
name|long
name|interval
decl_stmt|;
DECL|field|timeZone
specifier|private
name|DateTimeZone
name|timeZone
decl_stmt|;
DECL|method|TimeIntervalRounding
name|TimeIntervalRounding
parameter_list|()
block|{
comment|// for serialization
block|}
DECL|method|TimeIntervalRounding
name|TimeIntervalRounding
parameter_list|(
name|long
name|interval
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
if|if
condition|(
name|interval
operator|<
literal|1
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Zero or negative time interval not supported"
argument_list|)
throw|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
annotation|@
name|Override
DECL|method|round
specifier|public
name|long
name|round
parameter_list|(
name|long
name|utcMillis
parameter_list|)
block|{
name|long
name|timeLocal
init|=
name|timeZone
operator|.
name|convertUTCToLocal
argument_list|(
name|utcMillis
argument_list|)
decl_stmt|;
name|long
name|rounded
init|=
name|roundKey
argument_list|(
name|timeLocal
argument_list|,
name|interval
argument_list|)
operator|*
name|interval
decl_stmt|;
name|long
name|roundedUTC
decl_stmt|;
if|if
condition|(
name|isInDSTGap
argument_list|(
name|rounded
argument_list|)
operator|==
literal|false
condition|)
block|{
name|roundedUTC
operator|=
name|timeZone
operator|.
name|convertLocalToUTC
argument_list|(
name|rounded
argument_list|,
literal|true
argument_list|,
name|utcMillis
argument_list|)
expr_stmt|;
comment|// check if we crossed DST transition, in this case we want the last rounded value before the transition
name|long
name|transition
init|=
name|timeZone
operator|.
name|previousTransition
argument_list|(
name|utcMillis
argument_list|)
decl_stmt|;
if|if
condition|(
name|transition
operator|!=
name|utcMillis
operator|&&
name|transition
operator|>
name|roundedUTC
condition|)
block|{
name|roundedUTC
operator|=
name|round
argument_list|(
name|transition
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/*                  * Edge case where the rounded local time is illegal and landed                  * in a DST gap. In this case, we choose 1ms tick after the                  * transition date. We don't want the transition date itself                  * because those dates, when rounded themselves, fall into the                  * previous interval. This would violate the invariant that the                  * rounding operation should be idempotent.                  */
name|roundedUTC
operator|=
name|timeZone
operator|.
name|previousTransition
argument_list|(
name|utcMillis
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|roundedUTC
return|;
block|}
DECL|method|roundKey
specifier|private
specifier|static
name|long
name|roundKey
parameter_list|(
name|long
name|value
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
return|return
operator|(
name|value
operator|-
name|interval
operator|+
literal|1
operator|)
operator|/
name|interval
return|;
block|}
else|else
block|{
return|return
name|value
operator|/
name|interval
return|;
block|}
block|}
comment|/**          * Determine whether the local instant is a valid instant in the given          * time zone. The logic for this is taken from          * {@link DateTimeZone#convertLocalToUTC(long, boolean)} for the          * `strict` mode case, but instead of throwing an          * {@link IllegalInstantException}, which is costly, we want to return a          * flag indicating that the value is illegal in that time zone.          */
DECL|method|isInDSTGap
specifier|private
name|boolean
name|isInDSTGap
parameter_list|(
name|long
name|instantLocal
parameter_list|)
block|{
if|if
condition|(
name|timeZone
operator|.
name|isFixed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// get the offset at instantLocal (first estimate)
name|int
name|offsetLocal
init|=
name|timeZone
operator|.
name|getOffset
argument_list|(
name|instantLocal
argument_list|)
decl_stmt|;
comment|// adjust instantLocal using the estimate and recalc the offset
name|int
name|offset
init|=
name|timeZone
operator|.
name|getOffset
argument_list|(
name|instantLocal
operator|-
name|offsetLocal
argument_list|)
decl_stmt|;
comment|// if the offsets differ, we must be near a DST boundary
if|if
condition|(
name|offsetLocal
operator|!=
name|offset
condition|)
block|{
comment|// determine if we are in the DST gap
name|long
name|nextLocal
init|=
name|timeZone
operator|.
name|nextTransition
argument_list|(
name|instantLocal
operator|-
name|offsetLocal
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextLocal
operator|==
operator|(
name|instantLocal
operator|-
name|offsetLocal
operator|)
condition|)
block|{
name|nextLocal
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|long
name|nextAdjusted
init|=
name|timeZone
operator|.
name|nextTransition
argument_list|(
name|instantLocal
operator|-
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextAdjusted
operator|==
operator|(
name|instantLocal
operator|-
name|offset
operator|)
condition|)
block|{
name|nextAdjusted
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|nextLocal
operator|!=
name|nextAdjusted
condition|)
block|{
comment|// we are in the DST gap
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|nextRoundingValue
specifier|public
name|long
name|nextRoundingValue
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|long
name|timeLocal
init|=
name|time
decl_stmt|;
name|timeLocal
operator|=
name|timeZone
operator|.
name|convertUTCToLocal
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|long
name|next
init|=
name|timeLocal
operator|+
name|interval
decl_stmt|;
return|return
name|timeZone
operator|.
name|convertLocalToUTC
argument_list|(
name|next
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|interval
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|timeZone
operator|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|interval
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TimeIntervalRounding
name|other
init|=
operator|(
name|TimeIntervalRounding
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|interval
argument_list|,
name|other
operator|.
name|interval
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|timeZone
argument_list|,
name|other
operator|.
name|timeZone
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

