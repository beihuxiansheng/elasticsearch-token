begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKeyFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|PBEKeySpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|DestroyFailedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributeView
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SetOnce
import|;
end_import

begin_comment
comment|/**  * A wrapper around a Java KeyStore which provides supplements the keystore with extra metadata.  *  * Loading a keystore has 2 phases. First, call {@link #loadMetadata(Path)}. Then call  * {@link #loadKeystore(char[])} with the keystore password, or an empty char array if  * {@link #hasPassword()} is {@code false}.  */
end_comment

begin_class
DECL|class|KeyStoreWrapper
specifier|public
class|class
name|KeyStoreWrapper
implements|implements
name|Closeable
block|{
comment|/** The version of the metadata written before the keystore data. */
DECL|field|FORMAT_VERSION
specifier|private
specifier|static
specifier|final
name|int
name|FORMAT_VERSION
init|=
literal|1
decl_stmt|;
comment|/** The keystore type for a newly created keystore. */
DECL|field|NEW_KEYSTORE_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|NEW_KEYSTORE_TYPE
init|=
literal|"PKCS12"
decl_stmt|;
comment|/** The algorithm used to store password for a newly created keystore. */
DECL|field|NEW_KEYSTORE_SECRET_KEY_ALGO
specifier|private
specifier|static
specifier|final
name|String
name|NEW_KEYSTORE_SECRET_KEY_ALGO
init|=
literal|"PBEWithHmacSHA256AndAES_128"
decl_stmt|;
comment|/** True iff the keystore has a password needed to read. */
DECL|field|hasPassword
specifier|private
specifier|final
name|boolean
name|hasPassword
decl_stmt|;
comment|/** The type of the keystore, as passed to {@link java.security.KeyStore#getInstance(String)} */
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
comment|/** A factory necessary for constructing instances of secrets in a {@link KeyStore}. */
DECL|field|secretFactory
specifier|private
specifier|final
name|SecretKeyFactory
name|secretFactory
decl_stmt|;
comment|/** A stream of the actual keystore data. */
DECL|field|input
specifier|private
specifier|final
name|InputStream
name|input
decl_stmt|;
comment|/** The loaded keystore. See {@link #loadKeystore(char[])}. */
DECL|field|keystore
specifier|private
specifier|final
name|SetOnce
argument_list|<
name|KeyStore
argument_list|>
name|keystore
init|=
operator|new
name|SetOnce
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** The password for the keystore. See {@link #loadKeystore(char[])}. */
DECL|field|keystorePassword
specifier|private
specifier|final
name|SetOnce
argument_list|<
name|KeyStore
operator|.
name|PasswordProtection
argument_list|>
name|keystorePassword
init|=
operator|new
name|SetOnce
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** The setting names contained in the loaded keystore. */
DECL|field|settingNames
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|settingNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|KeyStoreWrapper
specifier|private
name|KeyStoreWrapper
parameter_list|(
name|boolean
name|hasPassword
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|secretKeyAlgo
parameter_list|,
name|InputStream
name|input
parameter_list|)
block|{
name|this
operator|.
name|hasPassword
operator|=
name|hasPassword
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
try|try
block|{
name|secretFactory
operator|=
name|SecretKeyFactory
operator|.
name|getInstance
argument_list|(
name|secretKeyAlgo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
block|}
comment|/** Returns a path representing the ES keystore in the given config dir. */
DECL|method|keystorePath
specifier|static
name|Path
name|keystorePath
parameter_list|(
name|Path
name|configDir
parameter_list|)
block|{
return|return
name|configDir
operator|.
name|resolve
argument_list|(
literal|"elasticsearch.keystore"
argument_list|)
return|;
block|}
comment|/** Constructs a new keystore with the given password. */
DECL|method|create
specifier|static
name|KeyStoreWrapper
name|create
parameter_list|(
name|char
index|[]
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyStoreWrapper
name|wrapper
init|=
operator|new
name|KeyStoreWrapper
argument_list|(
name|password
operator|.
name|length
operator|!=
literal|0
argument_list|,
name|NEW_KEYSTORE_TYPE
argument_list|,
name|NEW_KEYSTORE_SECRET_KEY_ALGO
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyStore
name|keyStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|NEW_KEYSTORE_TYPE
argument_list|)
decl_stmt|;
name|keyStore
operator|.
name|load
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|keystore
operator|.
name|set
argument_list|(
name|keyStore
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|keystorePassword
operator|.
name|set
argument_list|(
operator|new
name|KeyStore
operator|.
name|PasswordProtection
argument_list|(
name|password
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|wrapper
return|;
block|}
comment|/**      * Loads information about the Elasticsearch keystore from the provided config directory.      *      * {@link #loadKeystore(char[])} must be called before reading or writing any entries.      * Returns {@code null} if no keystore exists.      */
DECL|method|loadMetadata
specifier|public
specifier|static
name|KeyStoreWrapper
name|loadMetadata
parameter_list|(
name|Path
name|configDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|keystoreFile
init|=
name|keystorePath
argument_list|(
name|configDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|keystoreFile
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DataInputStream
name|inputStream
init|=
operator|new
name|DataInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|keystoreFile
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|format
init|=
name|inputStream
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|!=
name|FORMAT_VERSION
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown keystore metadata format ["
operator|+
name|format
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|boolean
name|hasPassword
init|=
name|inputStream
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|inputStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|String
name|secretKeyAlgo
init|=
name|inputStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
return|return
operator|new
name|KeyStoreWrapper
argument_list|(
name|hasPassword
argument_list|,
name|type
argument_list|,
name|secretKeyAlgo
argument_list|,
name|inputStream
argument_list|)
return|;
block|}
comment|/** Returns true iff {@link #loadKeystore(char[])} has been called. */
DECL|method|isLoaded
specifier|public
name|boolean
name|isLoaded
parameter_list|()
block|{
return|return
name|keystore
operator|.
name|get
argument_list|()
operator|!=
literal|null
return|;
block|}
comment|/** Return true iff calling {@link #loadKeystore(char[])} requires a non-empty password. */
DECL|method|hasPassword
specifier|public
name|boolean
name|hasPassword
parameter_list|()
block|{
return|return
name|hasPassword
return|;
block|}
comment|/** Loads the keystore this metadata wraps. This may only be called once. */
DECL|method|loadKeystore
specifier|public
name|void
name|loadKeystore
parameter_list|(
name|char
index|[]
name|password
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|this
operator|.
name|keystore
operator|.
name|set
argument_list|(
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|input
init|)
block|{
name|keystore
operator|.
name|get
argument_list|()
operator|.
name|load
argument_list|(
name|in
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|keystorePassword
operator|.
name|set
argument_list|(
operator|new
name|KeyStore
operator|.
name|PasswordProtection
argument_list|(
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|password
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
comment|// convert keystore aliases enum into a set for easy lookup
name|Enumeration
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|keystore
operator|.
name|get
argument_list|()
operator|.
name|aliases
argument_list|()
decl_stmt|;
while|while
condition|(
name|aliases
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|settingNames
operator|.
name|add
argument_list|(
name|aliases
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Write the keystore to the given config directory. */
DECL|method|save
name|void
name|save
parameter_list|(
name|Path
name|configDir
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|keystoreFile
init|=
name|keystorePath
argument_list|(
name|configDir
argument_list|)
decl_stmt|;
try|try
init|(
name|DataOutputStream
name|outputStream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|keystoreFile
argument_list|)
argument_list|)
init|)
block|{
name|outputStream
operator|.
name|writeInt
argument_list|(
name|FORMAT_VERSION
argument_list|)
expr_stmt|;
name|char
index|[]
name|password
init|=
name|this
operator|.
name|keystorePassword
operator|.
name|get
argument_list|()
operator|.
name|getPassword
argument_list|()
decl_stmt|;
name|outputStream
operator|.
name|writeBoolean
argument_list|(
name|password
operator|.
name|length
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|writeUTF
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|writeUTF
argument_list|(
name|secretFactory
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|keystore
operator|.
name|get
argument_list|()
operator|.
name|store
argument_list|(
name|outputStream
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
name|PosixFileAttributeView
name|attrs
init|=
name|Files
operator|.
name|getFileAttributeView
argument_list|(
name|keystoreFile
argument_list|,
name|PosixFileAttributeView
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrs
operator|!=
literal|null
condition|)
block|{
comment|// don't rely on umask: ensure the keystore has minimal permissions
name|attrs
operator|.
name|setPermissions
argument_list|(
name|PosixFilePermissions
operator|.
name|fromString
argument_list|(
literal|"rw-------"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Returns the names of all settings in this keystore. */
DECL|method|getSettings
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSettings
parameter_list|()
block|{
return|return
name|settingNames
return|;
block|}
comment|/** Retrieve a string setting. The {@link SecureString} should be closed once it is used. */
DECL|method|getStringSetting
name|SecureString
name|getStringSetting
parameter_list|(
name|String
name|setting
parameter_list|)
throws|throws
name|GeneralSecurityException
block|{
name|KeyStore
operator|.
name|Entry
name|entry
init|=
name|keystore
operator|.
name|get
argument_list|()
operator|.
name|getEntry
argument_list|(
name|setting
argument_list|,
name|keystorePassword
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|instanceof
name|KeyStore
operator|.
name|SecretKeyEntry
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Secret setting "
operator|+
name|setting
operator|+
literal|" is not a string"
argument_list|)
throw|;
block|}
comment|// TODO: only allow getting a setting once?
name|KeyStore
operator|.
name|SecretKeyEntry
name|secretKeyEntry
init|=
operator|(
name|KeyStore
operator|.
name|SecretKeyEntry
operator|)
name|entry
decl_stmt|;
name|PBEKeySpec
name|keySpec
init|=
operator|(
name|PBEKeySpec
operator|)
name|secretFactory
operator|.
name|getKeySpec
argument_list|(
name|secretKeyEntry
operator|.
name|getSecretKey
argument_list|()
argument_list|,
name|PBEKeySpec
operator|.
name|class
argument_list|)
decl_stmt|;
name|SecureString
name|value
init|=
operator|new
name|SecureString
argument_list|(
name|keySpec
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|keySpec
operator|.
name|clearPassword
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/** Set a string setting. */
DECL|method|setStringSetting
name|void
name|setStringSetting
parameter_list|(
name|String
name|setting
parameter_list|,
name|char
index|[]
name|value
parameter_list|)
throws|throws
name|GeneralSecurityException
block|{
name|SecretKey
name|secretKey
init|=
name|secretFactory
operator|.
name|generateSecret
argument_list|(
operator|new
name|PBEKeySpec
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|get
argument_list|()
operator|.
name|setEntry
argument_list|(
name|setting
argument_list|,
operator|new
name|KeyStore
operator|.
name|SecretKeyEntry
argument_list|(
name|secretKey
argument_list|)
argument_list|,
name|keystorePassword
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|settingNames
operator|.
name|add
argument_list|(
name|setting
argument_list|)
expr_stmt|;
block|}
comment|/** Remove the given setting from the keystore. */
DECL|method|remove
name|void
name|remove
parameter_list|(
name|String
name|setting
parameter_list|)
throws|throws
name|KeyStoreException
block|{
name|keystore
operator|.
name|get
argument_list|()
operator|.
name|deleteEntry
argument_list|(
name|setting
argument_list|)
expr_stmt|;
name|settingNames
operator|.
name|remove
argument_list|(
name|setting
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|keystorePassword
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keystorePassword
operator|.
name|get
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DestroyFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

