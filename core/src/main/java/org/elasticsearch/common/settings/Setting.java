begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ToXContentToBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Booleans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|MemorySizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * A setting. Encapsulates typical stuff like default value, parsing, and scope.  * Some (SettingsProperty.Dynamic) can by modified at run time using the API.  * All settings inside elasticsearch or in any of the plugins should use this type-safe and generic settings infrastructure  * together with {@link AbstractScopedSettings}. This class contains several utility methods that makes it straight forward  * to add settings for the majority of the cases. For instance a simple boolean settings can be defined like this:  *<pre>{@code  * public static final Setting<Boolean>; MY_BOOLEAN = Setting.boolSetting("my.bool.setting", true, SettingsProperty.NodeScope);}  *</pre>  * To retrieve the value of the setting a {@link Settings} object can be passed directly to the {@link Setting#get(Settings)} method.  *<pre>  * final boolean myBooleanValue = MY_BOOLEAN.get(settings);  *</pre>  * It's recommended to use typed settings rather than string based settings. For example adding a setting for an enum type:  *<pre>{@code  * public enum Color {  *     RED, GREEN, BLUE;  * }  * public static final Setting<Color> MY_BOOLEAN =  *     new Setting<>("my.color.setting", Color.RED.toString(), Color::valueOf, SettingsProperty.NodeScope);  * }  *</pre>  */
end_comment

begin_class
DECL|class|Setting
specifier|public
class|class
name|Setting
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ToXContentToBytes
block|{
DECL|enum|Property
specifier|public
enum|enum
name|Property
block|{
comment|/**          * should be filtered in some api (mask password/credentials)          */
DECL|enum constant|Filtered
name|Filtered
block|,
comment|/**          * iff this setting can be dynamically updateable          */
DECL|enum constant|Dynamic
name|Dynamic
block|,
comment|/**          * mark this setting as deprecated          */
DECL|enum constant|Deprecated
name|Deprecated
block|,
comment|/**          * Node scope          */
DECL|enum constant|NodeScope
name|NodeScope
block|,
comment|/**          * Index scope          */
DECL|enum constant|IndexScope
name|IndexScope
block|}
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|Setting
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|deprecationLogger
specifier|private
specifier|static
specifier|final
name|DeprecationLogger
name|deprecationLogger
init|=
operator|new
name|DeprecationLogger
argument_list|(
name|logger
argument_list|)
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|Key
name|key
decl_stmt|;
DECL|field|defaultValue
specifier|protected
specifier|final
name|Function
argument_list|<
name|Settings
argument_list|,
name|String
argument_list|>
name|defaultValue
decl_stmt|;
DECL|field|parser
specifier|private
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parser
decl_stmt|;
DECL|field|properties
specifier|private
specifier|final
name|EnumSet
argument_list|<
name|Property
argument_list|>
name|properties
decl_stmt|;
DECL|field|EMPTY_PROPERTIES
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|Property
argument_list|>
name|EMPTY_PROPERTIES
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Property
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Creates a new Setting instance. When no scope is provided, we default to {@link Property#NodeScope}.      * @param key the settings key for this setting.      * @param defaultValue a default value function that returns the default values string representation.      * @param parser a parser that parses the string rep into a complex datatype.      * @param properties properties for this setting like scope, filtering...      */
DECL|method|Setting
specifier|public
name|Setting
parameter_list|(
name|Key
name|key
parameter_list|,
name|Function
argument_list|<
name|Settings
argument_list|,
name|String
argument_list|>
name|defaultValue
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parser
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
assert|assert
name|parser
operator|.
name|apply
argument_list|(
name|defaultValue
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|!=
literal|null
operator|||
name|this
operator|.
name|isGroupSetting
argument_list|()
operator|:
literal|"parser returned null"
assert|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"properties can not be null for setting ["
operator|+
name|key
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|properties
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|properties
operator|=
name|EMPTY_PROPERTIES
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|properties
operator|=
name|EnumSet
operator|.
name|copyOf
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|properties
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new Setting instance      * @param key the settings key for this setting.      * @param defaultValue a default value.      * @param parser a parser that parses the string rep into a complex datatype.      * @param properties properties for this setting like scope, filtering...      */
DECL|method|Setting
specifier|public
name|Setting
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parser
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
name|s
lambda|->
name|defaultValue
argument_list|,
name|parser
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new Setting instance      * @param key the settings key for this setting.      * @param defaultValue a default value function that returns the default values string representation.      * @param parser a parser that parses the string rep into a complex datatype.      * @param properties properties for this setting like scope, filtering...      */
DECL|method|Setting
specifier|public
name|Setting
parameter_list|(
name|String
name|key
parameter_list|,
name|Function
argument_list|<
name|Settings
argument_list|,
name|String
argument_list|>
name|defaultValue
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parser
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|SimpleKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|,
name|parser
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new Setting instance      * @param key the settings key for this setting.      * @param fallBackSetting a setting to fall back to if the current setting is not set.      * @param parser a parser that parses the string rep into a complex datatype.      * @param properties properties for this setting like scope, filtering...      */
DECL|method|Setting
specifier|public
name|Setting
parameter_list|(
name|String
name|key
parameter_list|,
name|Setting
argument_list|<
name|T
argument_list|>
name|fallBackSetting
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parser
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
name|fallBackSetting
operator|::
name|getRaw
argument_list|,
name|parser
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the settings key or a prefix if this setting is a group setting.      *<b>Note: this method should not be used to retrieve a value from a {@link Settings} object.      * Use {@link #get(Settings)} instead</b>      *      * @see #isGroupSetting()      */
DECL|method|getKey
specifier|public
specifier|final
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns the original representation of a setting key.      */
DECL|method|getRawKey
specifier|public
specifier|final
name|Key
name|getRawKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * Returns<code>true</code> if this setting is dynamically updateable, otherwise<code>false</code>      */
DECL|method|isDynamic
specifier|public
specifier|final
name|boolean
name|isDynamic
parameter_list|()
block|{
return|return
name|properties
operator|.
name|contains
argument_list|(
name|Property
operator|.
name|Dynamic
argument_list|)
return|;
block|}
comment|/**      * Returns the setting properties      * @see Property      */
DECL|method|getProperties
specifier|public
name|EnumSet
argument_list|<
name|Property
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
comment|/**      * Returns<code>true</code> if this setting must be filtered, otherwise<code>false</code>      */
DECL|method|isFiltered
specifier|public
name|boolean
name|isFiltered
parameter_list|()
block|{
return|return
name|properties
operator|.
name|contains
argument_list|(
name|Property
operator|.
name|Filtered
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> if this setting has a node scope, otherwise<code>false</code>      */
DECL|method|hasNodeScope
specifier|public
name|boolean
name|hasNodeScope
parameter_list|()
block|{
return|return
name|properties
operator|.
name|contains
argument_list|(
name|Property
operator|.
name|NodeScope
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> if this setting has an index scope, otherwise<code>false</code>      */
DECL|method|hasIndexScope
specifier|public
name|boolean
name|hasIndexScope
parameter_list|()
block|{
return|return
name|properties
operator|.
name|contains
argument_list|(
name|Property
operator|.
name|IndexScope
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> if this setting is deprecated, otherwise<code>false</code>      */
DECL|method|isDeprecated
specifier|public
name|boolean
name|isDeprecated
parameter_list|()
block|{
return|return
name|properties
operator|.
name|contains
argument_list|(
name|Property
operator|.
name|Deprecated
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> iff this setting is a group setting. Group settings represent a set of settings      * rather than a single value. The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like<tt>cluster.store.</tt>      * that matches all settings with this prefix.      */
DECL|method|isGroupSetting
name|boolean
name|isGroupSetting
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|hasComplexMatcher
name|boolean
name|hasComplexMatcher
parameter_list|()
block|{
return|return
name|isGroupSetting
argument_list|()
return|;
block|}
comment|/**      * Returns the default value string representation for this setting.      * @param settings a settings object for settings that has a default value depending on another setting if available      */
DECL|method|getDefaultRaw
specifier|public
specifier|final
name|String
name|getDefaultRaw
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|defaultValue
operator|.
name|apply
argument_list|(
name|settings
argument_list|)
return|;
block|}
comment|/**      * Returns the default value for this setting.      * @param settings a settings object for settings that has a default value depending on another setting if available      */
DECL|method|getDefault
specifier|public
specifier|final
name|T
name|getDefault
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|parser
operator|.
name|apply
argument_list|(
name|getDefaultRaw
argument_list|(
name|settings
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> iff this setting is present in the given settings object. Otherwise<code>false</code>      */
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|settings
operator|.
name|get
argument_list|(
name|getKey
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Returns the settings value. If the setting is not present in the given settings object the default value is returned      * instead.      */
DECL|method|get
specifier|public
name|T
name|get
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|String
name|value
init|=
name|getRaw
argument_list|(
name|settings
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|parser
operator|.
name|apply
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse value ["
operator|+
name|value
operator|+
literal|"] for setting ["
operator|+
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse value ["
operator|+
name|value
operator|+
literal|"] for setting ["
operator|+
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned      * instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.      */
DECL|method|getRaw
specifier|public
name|String
name|getRaw
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
comment|// They're using the setting, so we need to tell them to stop
if|if
condition|(
name|this
operator|.
name|isDeprecated
argument_list|()
operator|&&
name|this
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
comment|// It would be convenient to show its replacement key, but replacement is often not so simple
name|deprecationLogger
operator|.
name|deprecated
argument_list|(
literal|"[{}] setting was deprecated in Elasticsearch and it will be removed in a future release! "
operator|+
literal|"See the breaking changes lists in the documentation for details"
argument_list|,
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|settings
operator|.
name|get
argument_list|(
name|getKey
argument_list|()
argument_list|,
name|defaultValue
operator|.
name|apply
argument_list|(
name|settings
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> iff the given key matches the settings key or if this setting is a group setting if the      * given key is part of the settings group.      * @see #isGroupSetting()      */
DECL|method|match
specifier|public
specifier|final
name|boolean
name|match
parameter_list|(
name|String
name|toTest
parameter_list|)
block|{
return|return
name|key
operator|.
name|match
argument_list|(
name|toTest
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
specifier|final
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"key"
argument_list|,
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"properties"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"is_group_setting"
argument_list|,
name|isGroupSetting
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
name|defaultValue
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Returns the value for this setting but falls back to the second provided settings object      */
DECL|method|get
specifier|public
specifier|final
name|T
name|get
parameter_list|(
name|Settings
name|primary
parameter_list|,
name|Settings
name|secondary
parameter_list|)
block|{
if|if
condition|(
name|exists
argument_list|(
name|primary
argument_list|)
condition|)
block|{
return|return
name|get
argument_list|(
name|primary
argument_list|)
return|;
block|}
return|return
name|get
argument_list|(
name|secondary
argument_list|)
return|;
block|}
DECL|method|getConcreteSetting
specifier|public
name|Setting
argument_list|<
name|T
argument_list|>
name|getConcreteSetting
parameter_list|(
name|String
name|key
parameter_list|)
block|{
assert|assert
name|key
operator|.
name|startsWith
argument_list|(
name|this
operator|.
name|getKey
argument_list|()
argument_list|)
operator|:
literal|"was "
operator|+
name|key
operator|+
literal|" expected: "
operator|+
name|getKey
argument_list|()
assert|;
comment|// we use startsWith here since the key might be foo.bar.0 if it's an array
return|return
name|this
return|;
block|}
comment|/**      * Build a new updater with a noop validator.      */
DECL|method|newUpdater
specifier|final
name|AbstractScopedSettings
operator|.
name|SettingUpdater
argument_list|<
name|T
argument_list|>
name|newUpdater
parameter_list|(
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
return|return
name|newUpdater
argument_list|(
name|consumer
argument_list|,
name|logger
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
block|{}
argument_list|)
return|;
block|}
comment|/**      * Build the updater responsible for validating new values, logging the new      * value, and eventually setting the value where it belongs.      */
DECL|method|newUpdater
name|AbstractScopedSettings
operator|.
name|SettingUpdater
argument_list|<
name|T
argument_list|>
name|newUpdater
parameter_list|(
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|,
name|ESLogger
name|logger
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|validator
parameter_list|)
block|{
if|if
condition|(
name|isDynamic
argument_list|()
condition|)
block|{
return|return
operator|new
name|Updater
argument_list|(
name|consumer
argument_list|,
name|logger
argument_list|,
name|validator
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"setting ["
operator|+
name|getKey
argument_list|()
operator|+
literal|"] is not dynamic"
argument_list|)
throw|;
block|}
block|}
comment|/**      * this is used for settings that depend on each other... see {@link org.elasticsearch.common.settings.AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and it's      * usage for details.      */
DECL|method|compoundUpdater
specifier|static
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
name|AbstractScopedSettings
operator|.
name|SettingUpdater
argument_list|<
name|Tuple
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
argument_list|>
name|compoundUpdater
parameter_list|(
specifier|final
name|BiConsumer
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
name|consumer
parameter_list|,
specifier|final
name|Setting
argument_list|<
name|A
argument_list|>
name|aSetting
parameter_list|,
specifier|final
name|Setting
argument_list|<
name|B
argument_list|>
name|bSetting
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
specifier|final
name|AbstractScopedSettings
operator|.
name|SettingUpdater
argument_list|<
name|A
argument_list|>
name|aSettingUpdater
init|=
name|aSetting
operator|.
name|newUpdater
argument_list|(
literal|null
argument_list|,
name|logger
argument_list|)
decl_stmt|;
specifier|final
name|AbstractScopedSettings
operator|.
name|SettingUpdater
argument_list|<
name|B
argument_list|>
name|bSettingUpdater
init|=
name|bSetting
operator|.
name|newUpdater
argument_list|(
literal|null
argument_list|,
name|logger
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractScopedSettings
operator|.
name|SettingUpdater
argument_list|<
name|Tuple
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasChanged
parameter_list|(
name|Settings
name|current
parameter_list|,
name|Settings
name|previous
parameter_list|)
block|{
return|return
name|aSettingUpdater
operator|.
name|hasChanged
argument_list|(
name|current
argument_list|,
name|previous
argument_list|)
operator|||
name|bSettingUpdater
operator|.
name|hasChanged
argument_list|(
name|current
argument_list|,
name|previous
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tuple
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
name|getValue
parameter_list|(
name|Settings
name|current
parameter_list|,
name|Settings
name|previous
parameter_list|)
block|{
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|aSettingUpdater
operator|.
name|getValue
argument_list|(
name|current
argument_list|,
name|previous
argument_list|)
argument_list|,
name|bSettingUpdater
operator|.
name|getValue
argument_list|(
name|current
argument_list|,
name|previous
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|Tuple
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
name|value
parameter_list|,
name|Settings
name|current
parameter_list|,
name|Settings
name|previous
parameter_list|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|value
operator|.
name|v1
argument_list|()
argument_list|,
name|value
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CompoundUpdater for: "
operator|+
name|aSettingUpdater
operator|+
literal|" and "
operator|+
name|bSettingUpdater
return|;
block|}
block|}
return|;
block|}
DECL|class|Updater
specifier|private
specifier|final
class|class
name|Updater
implements|implements
name|AbstractScopedSettings
operator|.
name|SettingUpdater
argument_list|<
name|T
argument_list|>
block|{
DECL|field|consumer
specifier|private
specifier|final
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|accept
specifier|private
specifier|final
name|Consumer
argument_list|<
name|T
argument_list|>
name|accept
decl_stmt|;
DECL|method|Updater
specifier|public
name|Updater
parameter_list|(
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|,
name|ESLogger
name|logger
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|accept
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|accept
operator|=
name|accept
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Updater for: "
operator|+
name|Setting
operator|.
name|this
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasChanged
specifier|public
name|boolean
name|hasChanged
parameter_list|(
name|Settings
name|current
parameter_list|,
name|Settings
name|previous
parameter_list|)
block|{
specifier|final
name|String
name|newValue
init|=
name|getRaw
argument_list|(
name|current
argument_list|)
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|getRaw
argument_list|(
name|previous
argument_list|)
decl_stmt|;
assert|assert
name|isGroupSetting
argument_list|()
operator|==
literal|false
operator|:
literal|"group settings must override this method"
assert|;
assert|assert
name|value
operator|!=
literal|null
operator|:
literal|"value was null but can't be unless default is null which is invalid"
assert|;
return|return
name|value
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
operator|==
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|T
name|getValue
parameter_list|(
name|Settings
name|current
parameter_list|,
name|Settings
name|previous
parameter_list|)
block|{
specifier|final
name|String
name|newValue
init|=
name|getRaw
argument_list|(
name|current
argument_list|)
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|getRaw
argument_list|(
name|previous
argument_list|)
decl_stmt|;
name|T
name|inst
init|=
name|get
argument_list|(
name|current
argument_list|)
decl_stmt|;
try|try
block|{
name|accept
operator|.
name|accept
argument_list|(
name|inst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
decl||
name|AssertionError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal value can't update ["
operator|+
name|key
operator|+
literal|"] from ["
operator|+
name|value
operator|+
literal|"] to ["
operator|+
name|newValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|inst
return|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
specifier|final
name|void
name|apply
parameter_list|(
name|T
name|value
parameter_list|,
name|Settings
name|current
parameter_list|,
name|Settings
name|previous
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [{}] from [{}] to [{}]"
argument_list|,
name|key
argument_list|,
name|getRaw
argument_list|(
name|previous
argument_list|)
argument_list|,
name|getRaw
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|floatSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|Float
argument_list|>
name|floatSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|float
name|defaultValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Float
operator|.
name|toString
argument_list|(
name|defaultValue
argument_list|)
argument_list|,
name|Float
operator|::
name|parseFloat
argument_list|,
name|properties
argument_list|)
return|;
block|}
DECL|method|floatSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|Float
argument_list|>
name|floatSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|float
name|defaultValue
parameter_list|,
name|float
name|minValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Float
operator|.
name|toString
argument_list|(
name|defaultValue
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
block|{
name|float
name|value
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|s
argument_list|)
argument_list|;             if
operator|(
name|value
operator|<
name|minValue
operator|)
block|{
throw|throw
argument_list|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse value ["
operator|+
name|s
operator|+
literal|"] for setting ["
operator|+
name|key
operator|+
literal|"] must be>= "
operator|+
name|minValue
argument_list|)
block|;             }
return|return
name|value
return|;
block|}
operator|,
name|properties
block|)
class|;
end_class

begin_function
unit|}      public
DECL|method|intSetting
specifier|static
name|Setting
argument_list|<
name|Integer
argument_list|>
name|intSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|defaultValue
parameter_list|,
name|int
name|minValue
parameter_list|,
name|int
name|maxValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|defaultValue
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|parseInt
argument_list|(
name|s
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|,
name|key
argument_list|)
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|intSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|Integer
argument_list|>
name|intSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|defaultValue
parameter_list|,
name|int
name|minValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|defaultValue
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|parseInt
argument_list|(
name|s
argument_list|,
name|minValue
argument_list|,
name|key
argument_list|)
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|longSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|Long
argument_list|>
name|longSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|defaultValue
parameter_list|,
name|long
name|minValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Long
operator|.
name|toString
argument_list|(
name|defaultValue
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|parseLong
argument_list|(
name|s
argument_list|,
name|minValue
argument_list|,
name|key
argument_list|)
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|simpleString
specifier|public
specifier|static
name|Setting
argument_list|<
name|String
argument_list|>
name|simpleString
parameter_list|(
name|String
name|key
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
name|s
lambda|->
literal|""
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|parseInt
specifier|public
specifier|static
name|int
name|parseInt
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|minValue
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|parseInt
argument_list|(
name|s
argument_list|,
name|minValue
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|key
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|parseInt
specifier|public
specifier|static
name|int
name|parseInt
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|minValue
parameter_list|,
name|int
name|maxValue
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|int
name|value
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|<
name|minValue
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse value ["
operator|+
name|s
operator|+
literal|"] for setting ["
operator|+
name|key
operator|+
literal|"] must be>= "
operator|+
name|minValue
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|>
name|maxValue
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse value ["
operator|+
name|s
operator|+
literal|"] for setting ["
operator|+
name|key
operator|+
literal|"] must be =< "
operator|+
name|maxValue
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
end_function

begin_function
DECL|method|parseLong
specifier|public
specifier|static
name|long
name|parseLong
parameter_list|(
name|String
name|s
parameter_list|,
name|long
name|minValue
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|long
name|value
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|<
name|minValue
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse value ["
operator|+
name|s
operator|+
literal|"] for setting ["
operator|+
name|key
operator|+
literal|"] must be>= "
operator|+
name|minValue
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
end_function

begin_function
DECL|method|parseTimeValue
specifier|public
specifier|static
name|TimeValue
name|parseTimeValue
parameter_list|(
name|String
name|s
parameter_list|,
name|TimeValue
name|minValue
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|TimeValue
name|timeValue
init|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|s
argument_list|,
literal|null
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeValue
operator|.
name|millis
argument_list|()
operator|<
name|minValue
operator|.
name|millis
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse value ["
operator|+
name|s
operator|+
literal|"] for setting ["
operator|+
name|key
operator|+
literal|"] must be>= "
operator|+
name|minValue
argument_list|)
throw|;
block|}
return|return
name|timeValue
return|;
block|}
end_function

begin_function
DECL|method|intSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|Integer
argument_list|>
name|intSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|defaultValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|intSetting
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|boolSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|boolSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|defaultValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Boolean
operator|.
name|toString
argument_list|(
name|defaultValue
argument_list|)
argument_list|,
name|Booleans
operator|::
name|parseBooleanExact
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|boolSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|boolSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|fallbackSetting
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
name|fallbackSetting
argument_list|,
name|Booleans
operator|::
name|parseBooleanExact
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|byteSizeSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|byteSizeSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|percentage
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|percentage
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|MemorySizeValue
operator|.
name|parseBytesSizeValueOrHeapRatio
argument_list|(
name|s
argument_list|,
name|key
argument_list|)
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|byteSizeSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|byteSizeSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|ByteSizeValue
name|value
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|byteSizeSetting
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|byteSizeSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|byteSizeSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|fallbackSettings
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|byteSizeSetting
argument_list|(
name|key
argument_list|,
name|fallbackSettings
operator|::
name|getRaw
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|byteSizeSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|byteSizeSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|Function
argument_list|<
name|Settings
argument_list|,
name|String
argument_list|>
name|defaultValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
argument_list|(
name|s
argument_list|,
name|key
argument_list|)
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|positiveTimeSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|positiveTimeSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|TimeValue
name|defaultValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|timeSetting
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|listSetting
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Setting
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|listSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|defaultStringValue
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|singleValueParser
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|listSetting
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|defaultStringValue
argument_list|,
name|singleValueParser
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|listSetting
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Setting
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|listSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|Setting
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|fallbackSetting
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|singleValueParser
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|listSetting
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|parseableStringToList
argument_list|(
name|fallbackSetting
operator|.
name|getRaw
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|,
name|singleValueParser
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|listSetting
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Setting
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|listSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|Function
argument_list|<
name|Settings
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|defaultStringValue
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|singleValueParser
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|parser
init|=
parameter_list|(
name|s
parameter_list|)
lambda|->
name|parseableStringToList
argument_list|(
name|s
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|singleValueParser
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Setting
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
operator|new
name|ListKey
argument_list|(
name|key
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|arrayToParsableString
argument_list|(
name|defaultStringValue
operator|.
name|apply
argument_list|(
name|s
argument_list|)
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|)
argument_list|,
name|parser
argument_list|,
name|properties
argument_list|)
block|{
specifier|private
name|final
name|Pattern
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|key
argument_list|)
operator|+
literal|"(\\.\\d+)?"
argument_list|)
block|;             @
name|Override
specifier|public
name|String
name|getRaw
argument_list|(
name|Settings
name|settings
argument_list|)
block|{
name|String
index|[]
name|array
operator|=
name|settings
operator|.
name|getAsArray
argument_list|(
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|)
block|;
return|return
name|array
operator|==
literal|null
condition|?
name|defaultValue
operator|.
name|apply
argument_list|(
name|settings
argument_list|)
else|:
name|arrayToParsableString
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|hasComplexMatcher
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      private
DECL|method|parseableStringToList
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseableStringToList
parameter_list|(
name|String
name|parsableString
parameter_list|)
block|{
try|try
init|(
name|XContentParser
name|xContentParser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|parsableString
argument_list|)
init|)
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|xContentParser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expected START_ARRAY but got "
operator|+
name|token
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|xContentParser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expected VALUE_STRING but got "
operator|+
name|token
argument_list|)
throw|;
block|}
name|list
operator|.
name|add
argument_list|(
name|xContentParser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to parse array"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|arrayToParsableString
specifier|private
specifier|static
name|String
name|arrayToParsableString
parameter_list|(
name|String
index|[]
name|array
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|element
range|:
name|array
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|groupSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|Settings
argument_list|>
name|groupSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|groupSetting
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
block|{}
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|groupSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|Settings
argument_list|>
name|groupSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|Consumer
argument_list|<
name|Settings
argument_list|>
name|validator
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<
name|Settings
argument_list|>
argument_list|(
operator|new
name|GroupKey
argument_list|(
name|key
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
literal|""
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
literal|null
argument_list|,
name|properties
argument_list|)
block|{             @
name|Override
specifier|public
name|boolean
name|isGroupSetting
argument_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRaw
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|Settings
name|subSettings
init|=
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|subSettings
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
expr|@
name|Override
specifier|public
name|Settings
name|get
argument_list|(
name|Settings
name|settings
argument_list|)
block|{
name|Settings
name|byPrefix
operator|=
name|settings
operator|.
name|getByPrefix
argument_list|(
name|getKey
argument_list|()
argument_list|)
block|;
name|validator
operator|.
name|accept
argument_list|(
name|byPrefix
argument_list|)
block|;
return|return
name|byPrefix
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|settings
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|AbstractScopedSettings
operator|.
name|SettingUpdater
argument_list|<
name|Settings
argument_list|>
name|newUpdater
parameter_list|(
name|Consumer
argument_list|<
name|Settings
argument_list|>
name|consumer
parameter_list|,
name|ESLogger
name|logger
parameter_list|,
name|Consumer
argument_list|<
name|Settings
argument_list|>
name|validator
parameter_list|)
block|{
if|if
condition|(
name|isDynamic
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"setting ["
operator|+
name|getKey
argument_list|()
operator|+
literal|"] is not dynamic"
argument_list|)
throw|;
block|}
specifier|final
name|Setting
argument_list|<
name|?
argument_list|>
name|setting
init|=
name|this
decl_stmt|;
return|return
operator|new
name|AbstractScopedSettings
operator|.
name|SettingUpdater
argument_list|<
name|Settings
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasChanged
parameter_list|(
name|Settings
name|current
parameter_list|,
name|Settings
name|previous
parameter_list|)
block|{
name|Settings
name|currentSettings
init|=
name|get
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|Settings
name|previousSettings
init|=
name|get
argument_list|(
name|previous
argument_list|)
decl_stmt|;
return|return
name|currentSettings
operator|.
name|equals
argument_list|(
name|previousSettings
argument_list|)
operator|==
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Settings
name|getValue
parameter_list|(
name|Settings
name|current
parameter_list|,
name|Settings
name|previous
parameter_list|)
block|{
name|Settings
name|currentSettings
init|=
name|get
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|Settings
name|previousSettings
init|=
name|get
argument_list|(
name|previous
argument_list|)
decl_stmt|;
try|try
block|{
name|validator
operator|.
name|accept
argument_list|(
name|currentSettings
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
decl||
name|AssertionError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal value can't update ["
operator|+
name|key
operator|+
literal|"] from ["
operator|+
name|previousSettings
operator|.
name|getAsMap
argument_list|()
operator|+
literal|"] to ["
operator|+
name|currentSettings
operator|.
name|getAsMap
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|currentSettings
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|Settings
name|value
parameter_list|,
name|Settings
name|current
parameter_list|,
name|Settings
name|previous
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [{}] from [{}] to [{}]"
argument_list|,
name|key
argument_list|,
name|getRaw
argument_list|(
name|previous
argument_list|)
argument_list|,
name|getRaw
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Updater for: "
operator|+
name|setting
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
DECL|method|timeSetting
specifier|static
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|timeSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|Function
argument_list|<
name|Settings
argument_list|,
name|String
argument_list|>
name|defaultValue
parameter_list|,
name|TimeValue
name|minValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
block|{
name|TimeValue
name|timeValue
init|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|s
argument_list|,
literal|null
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeValue
operator|.
name|millis
argument_list|()
operator|<
name|minValue
operator|.
name|millis
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse value ["
operator|+
name|s
operator|+
literal|"] for setting ["
operator|+
name|key
operator|+
literal|"] must be>= "
operator|+
name|minValue
argument_list|)
throw|;
block|}
return|return
name|timeValue
return|;
block|}
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|timeSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|timeSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|TimeValue
name|defaultValue
parameter_list|,
name|TimeValue
name|minValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|timeSetting
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|defaultValue
operator|.
name|getStringRep
argument_list|()
argument_list|,
name|minValue
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|timeSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|timeSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|TimeValue
name|defaultValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|defaultValue
operator|.
name|toString
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|s
argument_list|,
name|key
argument_list|)
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|timeSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|timeSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|fallbackSetting
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
name|fallbackSetting
operator|::
name|getRaw
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|s
argument_list|,
name|key
argument_list|)
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|doubleSetting
specifier|public
specifier|static
name|Setting
argument_list|<
name|Double
argument_list|>
name|doubleSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|double
name|defaultValue
parameter_list|,
name|double
name|minValue
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Double
operator|.
name|toString
argument_list|(
name|defaultValue
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
block|{
name|final
name|double
name|d
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|s
argument_list|)
argument_list|;             if
operator|(
name|d
operator|<
name|minValue
operator|)
block|{
throw|throw
argument_list|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse value ["
operator|+
name|s
operator|+
literal|"] for setting ["
operator|+
name|key
operator|+
literal|"] must be>= "
operator|+
name|minValue
argument_list|)
block|;             }
return|return
name|d
return|;
block|}
end_function

begin_operator
operator|,
end_operator

begin_expr_stmt
name|properties
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Setting
argument_list|<
name|?
argument_list|>
name|setting
init|=
operator|(
name|Setting
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|key
argument_list|,
name|setting
operator|.
name|key
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]      * can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless      * {@link #getConcreteSetting(String)} is used to pull the updater.      */
end_comment

begin_function
DECL|method|prefixKeySetting
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Setting
argument_list|<
name|T
argument_list|>
name|prefixKeySetting
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parser
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|affixKeySetting
argument_list|(
name|AffixKey
operator|.
name|withPrefix
argument_list|(
name|prefix
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|defaultValue
argument_list|,
name|parser
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance      * storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, adfix key settings don't support updaters      * out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.      */
end_comment

begin_function
DECL|method|adfixKeySetting
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Setting
argument_list|<
name|T
argument_list|>
name|adfixKeySetting
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|Function
argument_list|<
name|Settings
argument_list|,
name|String
argument_list|>
name|defaultValue
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parser
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|affixKeySetting
argument_list|(
name|AffixKey
operator|.
name|withAdfix
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|)
argument_list|,
name|defaultValue
argument_list|,
name|parser
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|adfixKeySetting
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Setting
argument_list|<
name|T
argument_list|>
name|adfixKeySetting
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parser
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|adfixKeySetting
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|defaultValue
argument_list|,
name|parser
argument_list|,
name|properties
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|affixKeySetting
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Setting
argument_list|<
name|T
argument_list|>
name|affixKeySetting
parameter_list|(
name|AffixKey
name|key
parameter_list|,
name|Function
argument_list|<
name|Settings
argument_list|,
name|String
argument_list|>
name|defaultValue
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parser
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
return|return
operator|new
name|Setting
argument_list|<
name|T
argument_list|>
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|,
name|parser
argument_list|,
name|properties
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|isGroupSetting
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|AbstractScopedSettings
operator|.
name|SettingUpdater
argument_list|<
name|T
argument_list|>
name|newUpdater
parameter_list|(
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|,
name|ESLogger
name|logger
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|validator
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Affix settings can't be updated. Use #getConcreteSetting for updating."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Setting
argument_list|<
name|T
argument_list|>
name|getConcreteSetting
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|match
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
operator|new
name|Setting
argument_list|<>
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|,
name|parser
argument_list|,
name|properties
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"key ["
operator|+
name|key
operator|+
literal|"] must match ["
operator|+
name|getKey
argument_list|()
operator|+
literal|"] but didn't."
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
end_function

begin_interface
DECL|interface|Key
specifier|public
interface|interface
name|Key
block|{
DECL|method|match
name|boolean
name|match
parameter_list|(
name|String
name|key
parameter_list|)
function_decl|;
block|}
end_interface

begin_class
DECL|class|SimpleKey
specifier|public
specifier|static
class|class
name|SimpleKey
implements|implements
name|Key
block|{
DECL|field|key
specifier|protected
specifier|final
name|String
name|key
decl_stmt|;
DECL|method|SimpleKey
specifier|public
name|SimpleKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|SimpleKey
name|simpleKey
init|=
operator|(
name|SimpleKey
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|key
argument_list|,
name|simpleKey
operator|.
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_class

begin_class
DECL|class|GroupKey
specifier|public
specifier|static
specifier|final
class|class
name|GroupKey
extends|extends
name|SimpleKey
block|{
DECL|method|GroupKey
specifier|public
name|GroupKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"key must end with a '.'"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|toTest
parameter_list|)
block|{
return|return
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|key
operator|+
literal|"*"
argument_list|,
name|toTest
argument_list|)
return|;
block|}
block|}
end_class

begin_class
DECL|class|ListKey
specifier|public
specifier|static
specifier|final
class|class
name|ListKey
extends|extends
name|SimpleKey
block|{
DECL|field|pattern
specifier|private
specifier|final
name|Pattern
name|pattern
decl_stmt|;
DECL|method|ListKey
specifier|public
name|ListKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|key
argument_list|)
operator|+
literal|"(\\.\\d+)?"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|toTest
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|toTest
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
end_class

begin_class
DECL|class|AffixKey
specifier|public
specifier|static
specifier|final
class|class
name|AffixKey
implements|implements
name|Key
block|{
DECL|method|withPrefix
specifier|public
specifier|static
name|AffixKey
name|withPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
operator|new
name|AffixKey
argument_list|(
name|prefix
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|withAdfix
specifier|public
specifier|static
name|AffixKey
name|withAdfix
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
return|return
operator|new
name|AffixKey
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|)
return|;
block|}
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|field|suffix
specifier|private
specifier|final
name|String
name|suffix
decl_stmt|;
DECL|method|AffixKey
specifier|public
name|AffixKey
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
assert|assert
name|prefix
operator|!=
literal|null
operator|||
name|suffix
operator|!=
literal|null
operator|:
literal|"Either prefix or suffix must be non-null"
assert|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|suffix
operator|=
name|suffix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|boolean
name|match
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|match
operator|=
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suffix
operator|!=
literal|null
condition|)
block|{
name|match
operator|=
name|match
operator|&&
name|key
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
block|}
return|return
name|match
return|;
block|}
DECL|method|toConcreteKey
specifier|public
name|SimpleKey
name|toConcreteKey
parameter_list|(
name|String
name|missingPart
parameter_list|)
block|{
name|StringBuilder
name|key
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|key
operator|.
name|append
argument_list|(
name|missingPart
argument_list|)
expr_stmt|;
if|if
condition|(
name|suffix
operator|!=
literal|null
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|key
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SimpleKey
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suffix
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|AffixKey
name|that
init|=
operator|(
name|AffixKey
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|prefix
argument_list|,
name|that
operator|.
name|prefix
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|suffix
argument_list|,
name|that
operator|.
name|suffix
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

