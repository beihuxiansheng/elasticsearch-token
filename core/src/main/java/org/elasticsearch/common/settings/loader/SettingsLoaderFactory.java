begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings.loader
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|loader
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_comment
comment|/**  * A class holding factory methods for settings loaders that attempts  * to infer the type of the underlying settings content.  */
end_comment

begin_class
DECL|class|SettingsLoaderFactory
specifier|public
specifier|final
class|class
name|SettingsLoaderFactory
block|{
DECL|method|SettingsLoaderFactory
specifier|private
name|SettingsLoaderFactory
parameter_list|()
block|{     }
comment|/**      * Returns a {@link SettingsLoader} based on the source resource      * name. This factory method assumes that if the resource name ends      * with ".json" then the content should be parsed as JSON, else if      * the resource name ends with ".yml" or ".yaml" then the content      * should be parsed as YAML, otherwise throws an exception. Note that the      * parsers returned by this method will not accept null-valued      * keys.      *      * @param resourceName The resource name containing the settings      *                     content.      * @return A settings loader.      */
DECL|method|loaderFromResource
specifier|public
specifier|static
name|SettingsLoader
name|loaderFromResource
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
if|if
condition|(
name|resourceName
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
condition|)
block|{
return|return
operator|new
name|JsonSettingsLoader
argument_list|(
literal|false
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|resourceName
operator|.
name|endsWith
argument_list|(
literal|".yml"
argument_list|)
operator|||
name|resourceName
operator|.
name|endsWith
argument_list|(
literal|".yaml"
argument_list|)
condition|)
block|{
return|return
operator|new
name|YamlSettingsLoader
argument_list|(
literal|false
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unable to detect content type from resource name ["
operator|+
name|resourceName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns a {@link SettingsLoader} based on the source content.      * This factory method assumes that if the underlying content      * contains an opening and closing brace ('{' and '}') then the      * content should be parsed as JSON, else if the underlying content      * fails this condition but contains a ':' then the content should      * be parsed as YAML, and otherwise throws an exception.      * Note that the JSON and YAML parsers returned by this method will      * accept null-valued keys.      *      * @param source The underlying settings content.      * @return A settings loader.      * @deprecated use {@link #loaderFromXContentType(XContentType)} instead      */
annotation|@
name|Deprecated
DECL|method|loaderFromSource
specifier|public
specifier|static
name|SettingsLoader
name|loaderFromSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|indexOf
argument_list|(
literal|'{'
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
name|source
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|JsonSettingsLoader
argument_list|(
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|YamlSettingsLoader
argument_list|(
literal|true
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unable to detect content type from source ["
operator|+
name|source
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns a {@link SettingsLoader} based on the {@link XContentType}. Note only {@link XContentType#JSON} and      * {@link XContentType#YAML} are supported      *      * @param xContentType The content type      * @return A settings loader.      */
DECL|method|loaderFromXContentType
specifier|public
specifier|static
name|SettingsLoader
name|loaderFromXContentType
parameter_list|(
name|XContentType
name|xContentType
parameter_list|)
block|{
if|if
condition|(
name|xContentType
operator|==
name|XContentType
operator|.
name|JSON
condition|)
block|{
return|return
operator|new
name|JsonSettingsLoader
argument_list|(
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|xContentType
operator|==
name|XContentType
operator|.
name|YAML
condition|)
block|{
return|return
operator|new
name|YamlSettingsLoader
argument_list|(
literal|true
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unsupported content type ["
operator|+
name|xContentType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

