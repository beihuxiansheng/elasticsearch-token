begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_comment
comment|/**  * A basic setting service that can be used for per-index and per-cluster settings.  * This service offers transactional application of updates settings.  */
end_comment

begin_class
DECL|class|AbstractScopedSettings
specifier|public
specifier|abstract
class|class
name|AbstractScopedSettings
extends|extends
name|AbstractComponent
block|{
DECL|field|lastSettingsApplied
specifier|private
name|Settings
name|lastSettingsApplied
decl_stmt|;
DECL|field|settingUpdaters
specifier|private
specifier|final
name|List
argument_list|<
name|SettingUpdater
argument_list|>
name|settingUpdaters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|groupSettings
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|groupSettings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|keySettings
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|keySettings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|scope
specifier|private
specifier|final
name|Setting
operator|.
name|Scope
name|scope
decl_stmt|;
DECL|method|AbstractScopedSettings
specifier|protected
name|AbstractScopedSettings
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Set
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|settingsSet
parameter_list|,
name|Setting
operator|.
name|Scope
name|scope
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
for|for
control|(
name|Setting
argument_list|<
name|?
argument_list|>
name|entry
range|:
name|settingsSet
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getScope
argument_list|()
operator|!=
name|scope
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting must be a cluster setting but was: "
operator|+
name|entry
operator|.
name|getScope
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|entry
operator|.
name|isGroupSetting
argument_list|()
condition|)
block|{
name|groupSettings
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keySettings
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
block|}
DECL|method|getScope
specifier|public
name|Setting
operator|.
name|Scope
name|getScope
parameter_list|()
block|{
return|return
name|this
operator|.
name|scope
return|;
block|}
comment|/**      * Applies the given settings to all listeners and rolls back the result after application. This      * method will not change any settings but will fail if any of the settings can't be applied.      */
DECL|method|dryRun
specifier|public
specifier|synchronized
name|Settings
name|dryRun
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
specifier|final
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|this
operator|.
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|RuntimeException
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SettingUpdater
name|settingUpdater
range|:
name|settingUpdaters
control|)
block|{
try|try
block|{
name|settingUpdater
operator|.
name|prepareApply
argument_list|(
name|build
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to prepareCommit settings for [{}]"
argument_list|,
name|ex
argument_list|,
name|settingUpdater
argument_list|)
expr_stmt|;
block|}
block|}
comment|// here we are exhaustive and record all settings that failed.
name|ExceptionsHelper
operator|.
name|rethrowAndSuppress
argument_list|(
name|exceptions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|SettingUpdater
name|settingUpdater
range|:
name|settingUpdaters
control|)
block|{
try|try
block|{
name|settingUpdater
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to rollback settings for [{}]"
argument_list|,
name|e
argument_list|,
name|settingUpdater
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|build
return|;
block|}
comment|/**      * Applies the given settings to all the settings consumers or to none of them. The settings      * will be merged with the node settings before they are applied while given settings override existing node      * settings.      * @param newSettings the settings to apply      * @return the unmerged applied settings     */
DECL|method|applySettings
specifier|public
specifier|synchronized
name|Settings
name|applySettings
parameter_list|(
name|Settings
name|newSettings
parameter_list|)
block|{
if|if
condition|(
name|lastSettingsApplied
operator|!=
literal|null
operator|&&
name|newSettings
operator|.
name|equals
argument_list|(
name|lastSettingsApplied
argument_list|)
condition|)
block|{
comment|// nothing changed in the settings, ignore
return|return
name|newSettings
return|;
block|}
specifier|final
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|this
operator|.
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|newSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|SettingUpdater
name|settingUpdater
range|:
name|settingUpdaters
control|)
block|{
try|try
block|{
name|settingUpdater
operator|.
name|prepareApply
argument_list|(
name|build
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to prepareCommit settings for [{}]"
argument_list|,
name|ex
argument_list|,
name|settingUpdater
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
for|for
control|(
name|SettingUpdater
name|settingUpdater
range|:
name|settingUpdaters
control|)
block|{
name|settingUpdater
operator|.
name|apply
argument_list|()
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to apply settings"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|SettingUpdater
name|settingUpdater
range|:
name|settingUpdaters
control|)
block|{
try|try
block|{
name|settingUpdater
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to refresh settings for [{}]"
argument_list|,
name|e
argument_list|,
name|settingUpdater
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|lastSettingsApplied
operator|=
name|newSettings
return|;
block|}
comment|/**      * Adds a settings consumer with a predicate that is only evaluated at update time.      *<p>      * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.      *</p>      */
DECL|method|addSettingsUpdateConsumer
specifier|public
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|void
name|addSettingsUpdateConsumer
parameter_list|(
name|Setting
argument_list|<
name|T
argument_list|>
name|setting
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|predicate
parameter_list|)
block|{
if|if
condition|(
name|setting
operator|!=
name|get
argument_list|(
name|setting
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting is not registered for key ["
operator|+
name|setting
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|settingUpdaters
operator|.
name|add
argument_list|(
name|setting
operator|.
name|newUpdater
argument_list|(
name|consumer
argument_list|,
name|logger
argument_list|,
name|settings
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a settings consumer that accepts the values for two settings. The consumer if only notified if one or both settings change.      *<p>      * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.      *</p>      * This method registers a compound updater that is useful if two settings are depending on each other. The consumer is always provided      * with both values even if only one of the two changes.      */
DECL|method|addSettingsUpdateConsumer
specifier|public
specifier|synchronized
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
name|void
name|addSettingsUpdateConsumer
parameter_list|(
name|Setting
argument_list|<
name|A
argument_list|>
name|a
parameter_list|,
name|Setting
argument_list|<
name|B
argument_list|>
name|b
parameter_list|,
name|BiConsumer
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|a
operator|!=
name|get
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting is not registered for key ["
operator|+
name|a
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|b
operator|!=
name|get
argument_list|(
name|b
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting is not registered for key ["
operator|+
name|b
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|settingUpdaters
operator|.
name|add
argument_list|(
name|Setting
operator|.
name|compoundUpdater
argument_list|(
name|consumer
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|logger
argument_list|,
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a settings consumer.      *<p>      * Note: Only settings registered in {@link org.elasticsearch.cluster.ClusterModule} can be changed dynamically.      *</p>      */
DECL|method|addSettingsUpdateConsumer
specifier|public
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|void
name|addSettingsUpdateConsumer
parameter_list|(
name|Setting
argument_list|<
name|T
argument_list|>
name|setting
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|)
block|{
name|addSettingsUpdateConsumer
argument_list|(
name|setting
argument_list|,
name|consumer
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
block|{}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Transactional interface to update settings.      * @see Setting      */
DECL|interface|SettingUpdater
specifier|public
interface|interface
name|SettingUpdater
block|{
comment|/**          * Prepares applying the given settings to this updater. All the heavy lifting like parsing and validation          * happens in this method. Yet the actual setting should not be changed by this call.          * @param settings the settings to apply          * @return<code>true</code> if this updater will update a setting on calling {@link #apply()} otherwise<code>false</code>          */
DECL|method|prepareApply
name|boolean
name|prepareApply
parameter_list|(
name|Settings
name|settings
parameter_list|)
function_decl|;
comment|/**          * Applies the settings passed to {@link #prepareApply(Settings)}          */
DECL|method|apply
name|void
name|apply
parameter_list|()
function_decl|;
comment|/**          * Rolls back to the state before {@link #prepareApply(Settings)} was called. All internal prepared state is cleared after this call.          */
DECL|method|rollback
name|void
name|rollback
parameter_list|()
function_decl|;
block|}
comment|/**      * Returns the {@link Setting} for the given key or<code>null</code> if the setting can not be found.      */
DECL|method|get
specifier|public
name|Setting
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Setting
argument_list|<
name|?
argument_list|>
name|setting
init|=
name|keySettings
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|setting
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|groupSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|match
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
else|else
block|{
return|return
name|setting
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns<code>true</code> if the setting for the given key is dynamically updateable. Otherwise<code>false</code>.      */
DECL|method|hasDynamicSetting
specifier|public
name|boolean
name|hasDynamicSetting
parameter_list|(
name|String
name|key
parameter_list|)
block|{
specifier|final
name|Setting
name|setting
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|setting
operator|!=
literal|null
operator|&&
name|setting
operator|.
name|isDynamic
argument_list|()
return|;
block|}
comment|/**      * Returns a settings object that contains all settings that are not      * already set in the given source. The diff contains either the default value for each      * setting or the settings value in the given default settings.      */
DECL|method|diff
specifier|public
name|Settings
name|diff
parameter_list|(
name|Settings
name|source
parameter_list|,
name|Settings
name|defaultSettings
parameter_list|)
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Setting
argument_list|<
name|?
argument_list|>
name|setting
range|:
name|keySettings
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|setting
operator|.
name|exists
argument_list|(
name|source
argument_list|)
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|setting
operator|.
name|getKey
argument_list|()
argument_list|,
name|setting
operator|.
name|getRaw
argument_list|(
name|defaultSettings
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

