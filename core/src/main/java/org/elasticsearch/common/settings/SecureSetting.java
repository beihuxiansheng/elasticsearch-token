begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|ArrayUtils
import|;
end_import

begin_comment
comment|/**  * A secure setting.  *  * This class allows access to settings from the Elasticsearch keystore.  */
end_comment

begin_class
DECL|class|SecureSetting
specifier|public
specifier|abstract
class|class
name|SecureSetting
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Setting
argument_list|<
name|T
argument_list|>
block|{
DECL|field|ALLOWED_PROPERTIES
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Property
argument_list|>
name|ALLOWED_PROPERTIES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Property
operator|.
name|Deprecated
argument_list|,
name|Property
operator|.
name|Shared
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|FIXED_PROPERTIES
specifier|private
specifier|static
specifier|final
name|Property
index|[]
name|FIXED_PROPERTIES
init|=
block|{
name|Property
operator|.
name|NodeScope
block|}
decl_stmt|;
DECL|field|LEGACY_PROPERTIES
specifier|private
specifier|static
specifier|final
name|Property
index|[]
name|LEGACY_PROPERTIES
init|=
block|{
name|Property
operator|.
name|NodeScope
block|,
name|Property
operator|.
name|Deprecated
block|,
name|Property
operator|.
name|Filtered
block|}
decl_stmt|;
DECL|method|SecureSetting
specifier|private
name|SecureSetting
parameter_list|(
name|String
name|key
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|ArrayUtils
operator|.
name|concat
argument_list|(
name|properties
argument_list|,
name|FIXED_PROPERTIES
argument_list|,
name|Property
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|assertAllowedProperties
argument_list|(
name|properties
argument_list|)
assert|;
block|}
DECL|method|assertAllowedProperties
specifier|private
name|boolean
name|assertAllowedProperties
parameter_list|(
name|Setting
operator|.
name|Property
modifier|...
name|properties
parameter_list|)
block|{
for|for
control|(
name|Setting
operator|.
name|Property
name|property
range|:
name|properties
control|)
block|{
if|if
condition|(
name|ALLOWED_PROPERTIES
operator|.
name|contains
argument_list|(
name|property
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultRaw
specifier|public
name|String
name|getDefaultRaw
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"secure settings are not strings"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getDefault
specifier|public
name|T
name|getDefault
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"secure settings are not strings"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getRaw
specifier|public
name|String
name|getRaw
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"secure settings are not strings"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
specifier|final
name|SecureSettings
name|secureSettings
init|=
name|settings
operator|.
name|getSecureSettings
argument_list|()
decl_stmt|;
return|return
name|secureSettings
operator|!=
literal|null
operator|&&
name|secureSettings
operator|.
name|getSettingNames
argument_list|()
operator|.
name|contains
argument_list|(
name|getKey
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|T
name|get
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|checkDeprecation
argument_list|(
name|settings
argument_list|)
expr_stmt|;
specifier|final
name|SecureSettings
name|secureSettings
init|=
name|settings
operator|.
name|getSecureSettings
argument_list|()
decl_stmt|;
if|if
condition|(
name|secureSettings
operator|==
literal|null
operator|||
name|secureSettings
operator|.
name|getSettingNames
argument_list|()
operator|.
name|contains
argument_list|(
name|getKey
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|getFallback
argument_list|(
name|settings
argument_list|)
return|;
block|}
try|try
block|{
return|return
name|getSecret
argument_list|(
name|secureSettings
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to read secure setting "
operator|+
name|getKey
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Returns the secret setting from the keyStoreReader store. */
DECL|method|getSecret
specifier|abstract
name|T
name|getSecret
parameter_list|(
name|SecureSettings
name|secureSettings
parameter_list|)
throws|throws
name|GeneralSecurityException
function_decl|;
comment|/** Returns the value from a fallback setting. Returns null if no fallback exists. */
DECL|method|getFallback
specifier|abstract
name|T
name|getFallback
parameter_list|(
name|Settings
name|settings
parameter_list|)
function_decl|;
comment|// TODO: override toXContent
comment|/**      * A setting which contains a sensitive string.      *      * This may be any sensitive string, e.g. a username, a password, an auth token, etc.      */
DECL|method|secureString
specifier|public
specifier|static
name|Setting
argument_list|<
name|SecureString
argument_list|>
name|secureString
parameter_list|(
name|String
name|name
parameter_list|,
name|Setting
argument_list|<
name|SecureString
argument_list|>
name|fallback
parameter_list|,
name|boolean
name|allowLegacy
parameter_list|,
name|Property
modifier|...
name|properties
parameter_list|)
block|{
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|legacy
decl_stmt|;
if|if
condition|(
name|allowLegacy
condition|)
block|{
name|Property
index|[]
name|legacyProperties
init|=
name|ArrayUtils
operator|.
name|concat
argument_list|(
name|properties
argument_list|,
name|LEGACY_PROPERTIES
argument_list|,
name|Property
operator|.
name|class
argument_list|)
decl_stmt|;
name|legacy
operator|=
name|Setting
operator|.
name|simpleString
argument_list|(
name|name
argument_list|,
name|legacyProperties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|legacy
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|SecureSetting
argument_list|<
name|SecureString
argument_list|>
argument_list|(
name|name
argument_list|,
name|properties
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|SecureString
name|getSecret
parameter_list|(
name|SecureSettings
name|secureSettings
parameter_list|)
throws|throws
name|GeneralSecurityException
block|{
return|return
name|secureSettings
operator|.
name|getString
argument_list|(
name|getKey
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|SecureString
name|getFallback
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
if|if
condition|(
name|legacy
operator|!=
literal|null
operator|&&
name|legacy
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
return|return
operator|new
name|SecureString
argument_list|(
name|legacy
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|fallback
operator|!=
literal|null
condition|)
block|{
return|return
name|fallback
operator|.
name|get
argument_list|(
name|settings
argument_list|)
return|;
block|}
return|return
operator|new
name|SecureString
argument_list|(
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
return|;
comment|// this means "setting does not exist"
block|}
annotation|@
name|Override
specifier|protected
name|void
name|checkDeprecation
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
operator|.
name|checkDeprecation
argument_list|(
name|settings
argument_list|)
expr_stmt|;
if|if
condition|(
name|legacy
operator|!=
literal|null
condition|)
block|{
name|legacy
operator|.
name|checkDeprecation
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
comment|// handle legacy, which is internal to this setting
return|return
name|super
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
operator|||
name|legacy
operator|!=
literal|null
operator|&&
name|legacy
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

