begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|EnvironmentAwareCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_comment
comment|/**  * A subcommand for the keystore cli to create a new keystore.  */
end_comment

begin_class
DECL|class|CreateKeyStoreCommand
class|class
name|CreateKeyStoreCommand
extends|extends
name|EnvironmentAwareCommand
block|{
DECL|method|CreateKeyStoreCommand
name|CreateKeyStoreCommand
parameter_list|()
block|{
name|super
argument_list|(
literal|"Creates a new elasticsearch keystore"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|protected
name|void
name|execute
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OptionSet
name|options
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|keystoreFile
init|=
name|KeyStoreWrapper
operator|.
name|keystorePath
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|keystoreFile
argument_list|)
condition|)
block|{
name|String
name|answer
init|=
name|terminal
operator|.
name|readText
argument_list|(
literal|"An elasticsearch keystore already exists. Overwrite? [y/N] "
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|.
name|equals
argument_list|(
literal|"y"
argument_list|)
operator|==
literal|false
condition|)
block|{
name|terminal
operator|.
name|println
argument_list|(
literal|"Exiting without creating keystore."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|char
index|[]
name|password
init|=
operator|new
name|char
index|[
literal|0
index|]
decl_stmt|;
comment|// terminal.readSecret("Enter passphrase (empty for no passphrase): ");
comment|/* TODO: uncomment when entering passwords on startup is supported         char[] passwordRepeat = terminal.readSecret("Enter same passphrase again: ");         if (Arrays.equals(password, passwordRepeat) == false) {             throw new UserException(ExitCodes.DATA_ERROR, "Passphrases are not equal, exiting.");         }*/
name|KeyStoreWrapper
name|keystore
init|=
name|KeyStoreWrapper
operator|.
name|create
argument_list|(
name|password
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|save
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|println
argument_list|(
literal|"Created elasticsearch keystore in "
operator|+
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

