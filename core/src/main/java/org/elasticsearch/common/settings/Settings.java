begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Booleans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|loader
operator|.
name|SettingsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|loader
operator|.
name|SettingsLoaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|MemorySizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|RatioValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
operator|.
name|toCamelCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
operator|.
name|parseSizeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|parseTimeValue
import|;
end_import

begin_comment
comment|/**  * An immutable settings implementation.  */
end_comment

begin_class
DECL|class|Settings
specifier|public
specifier|final
class|class
name|Settings
implements|implements
name|ToXContent
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|Settings
name|EMPTY
init|=
operator|new
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|ARRAY_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|ARRAY_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*)\\.\\d+$"
argument_list|)
decl_stmt|;
DECL|field|forcedUnderscoreSettings
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|forcedUnderscoreSettings
decl_stmt|;
DECL|field|settings
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
decl_stmt|;
DECL|method|Settings
name|Settings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
parameter_list|)
block|{
comment|// we use a sorted map for consistent serialization when using getAsMap()
name|this
operator|.
name|settings
operator|=
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|forcedUnderscoreSettings
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|settings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|toUnderscoreCase
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|toUnderscoreCase
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|forcedUnderscoreSettings
operator|==
literal|null
condition|)
block|{
name|forcedUnderscoreSettings
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|forcedUnderscoreSettings
operator|.
name|put
argument_list|(
name|toUnderscoreCase
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|forcedUnderscoreSettings
operator|=
name|forcedUnderscoreSettings
operator|==
literal|null
condition|?
name|emptyMap
argument_list|()
else|:
name|unmodifiableMap
argument_list|(
name|forcedUnderscoreSettings
argument_list|)
expr_stmt|;
block|}
comment|/**      * The settings as a flat {@link java.util.Map}.      * @return an unmodifiable map of settings      */
DECL|method|getAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAsMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|settings
argument_list|)
return|;
block|}
comment|/**      * The settings as a structured {@link java.util.Map}.      */
DECL|method|getAsStructuredMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getAsStructuredMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|settings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|processSetting
argument_list|(
name|map
argument_list|,
literal|""
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|valMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
name|convertMapsToArrays
argument_list|(
name|valMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
DECL|method|processSetting
specifier|private
name|void
name|processSetting
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|setting
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|int
name|prefixLength
init|=
name|setting
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefixLength
operator|==
operator|-
literal|1
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|map
operator|.
name|get
argument_list|(
name|prefix
operator|+
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerMap
operator|!=
literal|null
condition|)
block|{
comment|// It supposed to be a value, but we already have a map stored, need to convert this map to "." notation
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|innerMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|prefix
operator|+
name|setting
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|map
operator|.
name|put
argument_list|(
name|prefix
operator|+
name|setting
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|key
init|=
name|setting
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefixLength
argument_list|)
decl_stmt|;
name|String
name|rest
init|=
name|setting
operator|.
name|substring
argument_list|(
name|prefixLength
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Object
name|existingValue
init|=
name|map
operator|.
name|get
argument_list|(
name|prefix
operator|+
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingValue
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|processSetting
argument_list|(
name|newMap
argument_list|,
literal|""
argument_list|,
name|rest
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|existingValue
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|existingValue
decl_stmt|;
name|processSetting
argument_list|(
name|innerMap
argument_list|,
literal|""
argument_list|,
name|rest
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|innerMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// It supposed to be a map, but we already have a value stored, which is not a map
comment|// fall back to "." notation
name|processSetting
argument_list|(
name|map
argument_list|,
name|prefix
operator|+
name|key
operator|+
literal|"."
argument_list|,
name|rest
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|convertMapsToArrays
specifier|private
name|Object
name|convertMapsToArrays
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|map
return|;
block|}
name|boolean
name|isArray
init|=
literal|true
decl_stmt|;
name|int
name|maxIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|isArray
condition|)
block|{
try|try
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|maxIndex
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxIndex
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isArray
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|isArray
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|valMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
name|convertMapsToArrays
argument_list|(
name|valMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isArray
operator|&&
operator|(
name|maxIndex
operator|+
literal|1
operator|)
operator|==
name|map
operator|.
name|size
argument_list|()
condition|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newValue
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|maxIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|maxIndex
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|obj
init|=
name|map
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
comment|// Something went wrong. Different format?
comment|// Bailout!
return|return
name|map
return|;
block|}
name|newValue
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
return|return
name|newValue
return|;
block|}
return|return
name|map
return|;
block|}
comment|/**      * A settings that are filtered (and key is removed) with the specified prefix.      */
DECL|method|getByPrefix
specifier|public
name|Settings
name|getByPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|<
name|prefix
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// ignore this. one
continue|continue;
block|}
name|builder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Returns a new settings object that contains all setting of the current one filtered by the given settings key predicate.      */
DECL|method|filter
specifier|public
name|Settings
name|filter
parameter_list|(
name|Predicate
argument_list|<
name|String
argument_list|>
name|predicate
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Returns the settings mapped to the given setting name.      */
DECL|method|getAsSettings
specifier|public
name|Settings
name|getAsSettings
parameter_list|(
name|String
name|setting
parameter_list|)
block|{
return|return
name|getByPrefix
argument_list|(
name|setting
operator|+
literal|"."
argument_list|)
return|;
block|}
comment|/**      * Returns the setting value associated with the setting key.      *      * @param setting The setting key      * @return The setting value,<tt>null</tt> if it does not exists.      */
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|String
name|setting
parameter_list|)
block|{
name|String
name|retVal
init|=
name|settings
operator|.
name|get
argument_list|(
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|!=
literal|null
condition|)
block|{
return|return
name|retVal
return|;
block|}
return|return
name|forcedUnderscoreSettings
operator|.
name|get
argument_list|(
name|setting
argument_list|)
return|;
block|}
comment|/**      * Returns the setting value associated with the first setting key.      */
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|String
index|[]
name|settings
parameter_list|)
block|{
for|for
control|(
name|String
name|setting
range|:
name|settings
control|)
block|{
name|String
name|retVal
init|=
name|get
argument_list|(
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|!=
literal|null
condition|)
block|{
return|return
name|retVal
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the setting value associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|String
name|setting
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|retVal
init|=
name|get
argument_list|(
name|setting
argument_list|)
decl_stmt|;
return|return
name|retVal
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|retVal
return|;
block|}
comment|/**      * Returns the setting value associated with the first setting key, if none exists,      * returns the default value provided.      */
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|String
index|[]
name|settings
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|retVal
init|=
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
return|return
name|retVal
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|retVal
return|;
block|}
comment|/**      * Returns the setting value (as float) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsFloat
specifier|public
name|Float
name|getAsFloat
parameter_list|(
name|String
name|setting
parameter_list|,
name|Float
name|defaultValue
parameter_list|)
block|{
name|String
name|sValue
init|=
name|get
argument_list|(
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|sValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"Failed to parse float setting ["
operator|+
name|setting
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the setting value (as float) associated with teh first setting key, if none      * exists, returns the default value provided.      */
DECL|method|getAsFloat
specifier|public
name|Float
name|getAsFloat
parameter_list|(
name|String
index|[]
name|settings
parameter_list|,
name|Float
name|defaultValue
parameter_list|)
throws|throws
name|SettingsException
block|{
name|String
name|sValue
init|=
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|sValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"Failed to parse float setting ["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|settings
argument_list|)
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the setting value (as double) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsDouble
specifier|public
name|Double
name|getAsDouble
parameter_list|(
name|String
name|setting
parameter_list|,
name|Double
name|defaultValue
parameter_list|)
block|{
name|String
name|sValue
init|=
name|get
argument_list|(
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"Failed to parse double setting ["
operator|+
name|setting
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the setting value (as double) associated with teh first setting key, if none      * exists, returns the default value provided.      */
DECL|method|getAsDouble
specifier|public
name|Double
name|getAsDouble
parameter_list|(
name|String
index|[]
name|settings
parameter_list|,
name|Double
name|defaultValue
parameter_list|)
block|{
name|String
name|sValue
init|=
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|sValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"Failed to parse double setting ["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|settings
argument_list|)
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the setting value (as int) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsInt
specifier|public
name|Integer
name|getAsInt
parameter_list|(
name|String
name|setting
parameter_list|,
name|Integer
name|defaultValue
parameter_list|)
block|{
name|String
name|sValue
init|=
name|get
argument_list|(
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|sValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"Failed to parse int setting ["
operator|+
name|setting
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the setting value (as int) associated with the first setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsInt
specifier|public
name|Integer
name|getAsInt
parameter_list|(
name|String
index|[]
name|settings
parameter_list|,
name|Integer
name|defaultValue
parameter_list|)
block|{
name|String
name|sValue
init|=
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|sValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"Failed to parse int setting ["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|settings
argument_list|)
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the setting value (as long) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsLong
specifier|public
name|Long
name|getAsLong
parameter_list|(
name|String
name|setting
parameter_list|,
name|Long
name|defaultValue
parameter_list|)
block|{
name|String
name|sValue
init|=
name|get
argument_list|(
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|sValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"Failed to parse long setting ["
operator|+
name|setting
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the setting value (as long) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsLong
specifier|public
name|Long
name|getAsLong
parameter_list|(
name|String
index|[]
name|settings
parameter_list|,
name|Long
name|defaultValue
parameter_list|)
block|{
name|String
name|sValue
init|=
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|sValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"Failed to parse long setting ["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|settings
argument_list|)
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the setting value (as boolean) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsBoolean
specifier|public
name|Boolean
name|getAsBoolean
parameter_list|(
name|String
name|setting
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|get
argument_list|(
name|setting
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * Returns the setting value (as boolean) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsBoolean
specifier|public
name|Boolean
name|getAsBoolean
parameter_list|(
name|String
index|[]
name|settings
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * Returns the setting value (as time) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsTime
specifier|public
name|TimeValue
name|getAsTime
parameter_list|(
name|String
name|setting
parameter_list|,
name|TimeValue
name|defaultValue
parameter_list|)
block|{
return|return
name|parseTimeValue
argument_list|(
name|get
argument_list|(
name|setting
argument_list|)
argument_list|,
name|defaultValue
argument_list|,
name|setting
argument_list|)
return|;
block|}
comment|/**      * Returns the setting value (as time) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsTime
specifier|public
name|TimeValue
name|getAsTime
parameter_list|(
name|String
index|[]
name|settings
parameter_list|,
name|TimeValue
name|defaultValue
parameter_list|)
block|{
comment|// NOTE: duplicated from get(String[]) so we can pass which setting name was actually used to parseTimeValue:
for|for
control|(
name|String
name|setting
range|:
name|settings
control|)
block|{
name|String
name|retVal
init|=
name|get
argument_list|(
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|!=
literal|null
condition|)
block|{
name|parseTimeValue
argument_list|(
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|defaultValue
argument_list|,
name|setting
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**      * Returns the setting value (as size) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsBytesSize
specifier|public
name|ByteSizeValue
name|getAsBytesSize
parameter_list|(
name|String
name|setting
parameter_list|,
name|ByteSizeValue
name|defaultValue
parameter_list|)
throws|throws
name|SettingsException
block|{
return|return
name|parseBytesSizeValue
argument_list|(
name|get
argument_list|(
name|setting
argument_list|)
argument_list|,
name|defaultValue
argument_list|,
name|setting
argument_list|)
return|;
block|}
comment|/**      * Returns the setting value (as size) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsBytesSize
specifier|public
name|ByteSizeValue
name|getAsBytesSize
parameter_list|(
name|String
index|[]
name|settings
parameter_list|,
name|ByteSizeValue
name|defaultValue
parameter_list|)
throws|throws
name|SettingsException
block|{
comment|// NOTE: duplicated from get(String[]) so we can pass which setting name was actually used to parseBytesSizeValue
for|for
control|(
name|String
name|setting
range|:
name|settings
control|)
block|{
name|String
name|retVal
init|=
name|get
argument_list|(
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|!=
literal|null
condition|)
block|{
name|parseBytesSizeValue
argument_list|(
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|defaultValue
argument_list|,
name|setting
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**      * Returns the setting value (as size) associated with the setting key. Provided values can either be      * absolute values (interpreted as a number of bytes), byte sizes (eg. 1mb) or percentage of the heap size      * (eg. 12%). If it does not exists, parses the default value provided.      */
DECL|method|getAsMemory
specifier|public
name|ByteSizeValue
name|getAsMemory
parameter_list|(
name|String
name|setting
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|SettingsException
block|{
return|return
name|MemorySizeValue
operator|.
name|parseBytesSizeValueOrHeapRatio
argument_list|(
name|get
argument_list|(
name|setting
argument_list|,
name|defaultValue
argument_list|)
argument_list|,
name|setting
argument_list|)
return|;
block|}
comment|/**      * Returns the setting value (as size) associated with the setting key. Provided values can either be      * absolute values (interpreted as a number of bytes), byte sizes (eg. 1mb) or percentage of the heap size      * (eg. 12%). If it does not exists, parses the default value provided.      */
DECL|method|getAsMemory
specifier|public
name|ByteSizeValue
name|getAsMemory
parameter_list|(
name|String
index|[]
name|settings
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|SettingsException
block|{
comment|// NOTE: duplicated from get(String[]) so we can pass which setting name was actually used to parseBytesSizeValueOrHeapRatio
for|for
control|(
name|String
name|setting
range|:
name|settings
control|)
block|{
name|String
name|retVal
init|=
name|get
argument_list|(
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|!=
literal|null
condition|)
block|{
return|return
name|MemorySizeValue
operator|.
name|parseBytesSizeValueOrHeapRatio
argument_list|(
name|retVal
argument_list|,
name|setting
argument_list|)
return|;
block|}
block|}
return|return
name|MemorySizeValue
operator|.
name|parseBytesSizeValueOrHeapRatio
argument_list|(
name|defaultValue
argument_list|,
name|settings
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns the setting value (as a RatioValue) associated with the setting key. Provided values can      * either be a percentage value (eg. 23%), or expressed as a floating point number (eg. 0.23). If      * it does not exist, parses the default value provided.      */
DECL|method|getAsRatio
specifier|public
name|RatioValue
name|getAsRatio
parameter_list|(
name|String
name|setting
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|SettingsException
block|{
return|return
name|RatioValue
operator|.
name|parseRatioValue
argument_list|(
name|get
argument_list|(
name|setting
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the setting value (as a RatioValue) associated with the setting key. Provided values can      * either be a percentage value (eg. 23%), or expressed as a floating point number (eg. 0.23). If      * it does not exist, parses the default value provided.      */
DECL|method|getAsRatio
specifier|public
name|RatioValue
name|getAsRatio
parameter_list|(
name|String
index|[]
name|settings
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|SettingsException
block|{
return|return
name|RatioValue
operator|.
name|parseRatioValue
argument_list|(
name|get
argument_list|(
name|settings
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the setting value (as size) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsSize
specifier|public
name|SizeValue
name|getAsSize
parameter_list|(
name|String
name|setting
parameter_list|,
name|SizeValue
name|defaultValue
parameter_list|)
throws|throws
name|SettingsException
block|{
return|return
name|parseSizeValue
argument_list|(
name|get
argument_list|(
name|setting
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * Returns the setting value (as size) associated with the setting key. If it does not exists,      * returns the default value provided.      */
DECL|method|getAsSize
specifier|public
name|SizeValue
name|getAsSize
parameter_list|(
name|String
index|[]
name|settings
parameter_list|,
name|SizeValue
name|defaultValue
parameter_list|)
throws|throws
name|SettingsException
block|{
return|return
name|parseSizeValue
argument_list|(
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * The values associated with a setting prefix as an array. The settings array is in the format of:      *<tt>settingPrefix.[index]</tt>.      *<p>      * It will also automatically load a comma separated list under the settingPrefix and merge with      * the numbered format.      *      * @param settingPrefix The setting prefix to load the array by      * @return The setting array values      */
DECL|method|getAsArray
specifier|public
name|String
index|[]
name|getAsArray
parameter_list|(
name|String
name|settingPrefix
parameter_list|)
throws|throws
name|SettingsException
block|{
return|return
name|getAsArray
argument_list|(
name|settingPrefix
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * The values associated with a setting prefix as an array. The settings array is in the format of:      *<tt>settingPrefix.[index]</tt>.      *<p>      * If commaDelimited is true, it will automatically load a comma separated list under the settingPrefix and merge with      * the numbered format.      *      * @param settingPrefix The setting prefix to load the array by      * @return The setting array values      */
DECL|method|getAsArray
specifier|public
name|String
index|[]
name|getAsArray
parameter_list|(
name|String
name|settingPrefix
parameter_list|,
name|String
index|[]
name|defaultArray
parameter_list|)
throws|throws
name|SettingsException
block|{
return|return
name|getAsArray
argument_list|(
name|settingPrefix
argument_list|,
name|defaultArray
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * The values associated with a setting prefix as an array. The settings array is in the format of:      *<tt>settingPrefix.[index]</tt>.      *<p>      * It will also automatically load a comma separated list under the settingPrefix and merge with      * the numbered format.      *      * @param settingPrefix  The setting prefix to load the array by      * @param defaultArray   The default array to use if no value is specified      * @param commaDelimited Whether to try to parse a string as a comma-delimited value      * @return The setting array values      */
DECL|method|getAsArray
specifier|public
name|String
index|[]
name|getAsArray
parameter_list|(
name|String
name|settingPrefix
parameter_list|,
name|String
index|[]
name|defaultArray
parameter_list|,
name|Boolean
name|commaDelimited
parameter_list|)
throws|throws
name|SettingsException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|get
argument_list|(
name|settingPrefix
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|commaDelimited
condition|)
block|{
name|String
index|[]
name|strings
init|=
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
name|get
argument_list|(
name|settingPrefix
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|strings
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|string
range|:
name|strings
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|string
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|get
argument_list|(
name|settingPrefix
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|value
init|=
name|get
argument_list|(
name|settingPrefix
operator|+
literal|'.'
operator|+
operator|(
name|counter
operator|++
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|result
operator|.
name|add
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|defaultArray
return|;
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns group settings for the given setting prefix.      */
DECL|method|getGroups
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|getGroups
parameter_list|(
name|String
name|settingPrefix
parameter_list|)
throws|throws
name|SettingsException
block|{
return|return
name|getGroups
argument_list|(
name|settingPrefix
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Returns group settings for the given setting prefix.      */
DECL|method|getGroups
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|getGroups
parameter_list|(
name|String
name|settingPrefix
parameter_list|,
name|boolean
name|ignoreNonGrouped
parameter_list|)
throws|throws
name|SettingsException
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|hasLength
argument_list|(
name|settingPrefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal setting prefix "
operator|+
name|settingPrefix
argument_list|)
throw|;
block|}
if|if
condition|(
name|settingPrefix
operator|.
name|charAt
argument_list|(
name|settingPrefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|settingPrefix
operator|=
name|settingPrefix
operator|+
literal|"."
expr_stmt|;
block|}
return|return
name|getGroupsInternal
argument_list|(
name|settingPrefix
argument_list|,
name|ignoreNonGrouped
argument_list|)
return|;
block|}
DECL|method|getGroupsInternal
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|getGroupsInternal
parameter_list|(
name|String
name|settingPrefix
parameter_list|,
name|boolean
name|ignoreNonGrouped
parameter_list|)
throws|throws
name|SettingsException
block|{
comment|// we don't really care that it might happen twice
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|settings
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|setting
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|setting
operator|.
name|startsWith
argument_list|(
name|settingPrefix
argument_list|)
condition|)
block|{
name|String
name|nameValue
init|=
name|setting
operator|.
name|substring
argument_list|(
name|settingPrefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|dotIndex
init|=
name|nameValue
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|ignoreNonGrouped
condition|)
block|{
continue|continue;
block|}
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"Failed to get setting group for ["
operator|+
name|settingPrefix
operator|+
literal|"] setting prefix and setting ["
operator|+
name|setting
operator|+
literal|"] because of a missing '.'"
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|nameValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|nameValue
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|groupSettings
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupSettings
operator|==
literal|null
condition|)
block|{
name|groupSettings
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|groupSettings
argument_list|)
expr_stmt|;
block|}
name|groupSettings
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|get
argument_list|(
name|setting
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|retVal
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|retVal
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|Settings
argument_list|(
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|retVal
argument_list|)
return|;
block|}
comment|/**      * Returns group settings for the given setting prefix.      */
DECL|method|getAsGroups
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|getAsGroups
parameter_list|()
throws|throws
name|SettingsException
block|{
return|return
name|getAsGroups
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|getAsGroups
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|getAsGroups
parameter_list|(
name|boolean
name|ignoreNonGrouped
parameter_list|)
throws|throws
name|SettingsException
block|{
return|return
name|getGroupsInternal
argument_list|(
literal|""
argument_list|,
name|ignoreNonGrouped
argument_list|)
return|;
block|}
comment|/**      * Returns a parsed version.      */
DECL|method|getAsVersion
specifier|public
name|Version
name|getAsVersion
parameter_list|(
name|String
name|setting
parameter_list|,
name|Version
name|defaultVersion
parameter_list|)
throws|throws
name|SettingsException
block|{
name|String
name|sValue
init|=
name|get
argument_list|(
name|setting
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultVersion
return|;
block|}
try|try
block|{
return|return
name|Version
operator|.
name|fromId
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|sValue
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"Failed to parse version setting ["
operator|+
name|setting
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @return  The direct keys of this settings      */
DECL|method|names
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|names
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|settings
operator|.
name|keySet
argument_list|()
control|)
block|{
name|int
name|i
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|add
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
comment|/**      * Returns the settings as delimited string.      */
DECL|method|toDelimitedString
specifier|public
name|String
name|toDelimitedString
parameter_list|(
name|char
name|delimiter
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|settings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Settings
name|that
init|=
operator|(
name|Settings
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|settings
operator|!=
literal|null
condition|?
operator|!
name|settings
operator|.
name|equals
argument_list|(
name|that
operator|.
name|settings
argument_list|)
else|:
name|that
operator|.
name|settings
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|settings
operator|!=
literal|null
condition|?
name|settings
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
return|return
name|result
return|;
block|}
DECL|method|readSettingsFromStream
specifier|public
specifier|static
name|Settings
name|readSettingsFromStream
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
name|int
name|numberOfSettings
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfSettings
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|in
operator|.
name|readOptionalString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|writeSettingsToStream
specifier|public
specifier|static
name|void
name|writeSettingsToStream
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|settings
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|settings
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Returns a builder to be used in order to build settings.      */
DECL|method|settingsBuilder
specifier|public
specifier|static
name|Builder
name|settingsBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|SettingsFilter
operator|.
name|filterSettings
argument_list|(
name|params
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|paramAsBoolean
argument_list|(
literal|"flat_settings"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|settings
operator|.
name|getAsStructuredMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|settings
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
comment|/**      * Returns<tt>true</tt> if this settings object contains no settings      * @return<tt>true</tt> if this settings object contains no settings      */
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|this
operator|.
name|settings
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * A builder allowing to put different settings and then {@link #build()} an immutable      * settings implementation. Use {@link Settings#settingsBuilder()} in order to      * construct it.      */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|EMPTY_SETTINGS
specifier|public
specifier|static
specifier|final
name|Settings
name|EMPTY_SETTINGS
init|=
operator|new
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Builder
specifier|private
name|Builder
parameter_list|()
block|{          }
DECL|method|internalMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|internalMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|map
return|;
block|}
comment|/**          * Removes the provided setting from the internal map holding the current list of settings.          */
DECL|method|remove
specifier|public
name|String
name|remove
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**          * Returns a setting value based on the setting key.          */
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|retVal
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|!=
literal|null
condition|)
block|{
return|return
name|retVal
return|;
block|}
comment|// try camel case version
return|return
name|map
operator|.
name|get
argument_list|(
name|toCamelCase
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Puts tuples of key value pairs of settings. Simplified version instead of repeating calling          * put for each one.          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|Object
modifier|...
name|settings
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// support cases where the actual type gets lost down the road...
if|if
condition|(
name|settings
index|[
literal|0
index|]
operator|instanceof
name|Map
condition|)
block|{
comment|//noinspection unchecked
return|return
name|put
argument_list|(
operator|(
name|Map
operator|)
name|settings
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|settings
index|[
literal|0
index|]
operator|instanceof
name|Settings
condition|)
block|{
return|return
name|put
argument_list|(
operator|(
name|Settings
operator|)
name|settings
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
if|if
condition|(
operator|(
name|settings
operator|.
name|length
operator|%
literal|2
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"array settings of key + value order doesn't hold correct number of arguments ("
operator|+
name|settings
operator|.
name|length
operator|+
literal|")"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|settings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|put
argument_list|(
name|settings
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|settings
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Sets a setting with the provided setting key and value.          *          * @param key   The setting key          * @param value The setting value          * @return The builder          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|putNull
specifier|public
name|Builder
name|putNull
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**          * Sets a setting with the provided setting key and class as value.          *          * @param key   The setting key          * @param clazz The setting class value          * @return The builder          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the setting with the provided setting key and the boolean value.          *          * @param setting The setting key          * @param value   The boolean value          * @return The builder          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|String
name|setting
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|put
argument_list|(
name|setting
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the setting with the provided setting key and the int value.          *          * @param setting The setting key          * @param value   The int value          * @return The builder          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|String
name|setting
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|put
argument_list|(
name|setting
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|String
name|setting
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|put
argument_list|(
name|setting
argument_list|,
name|version
operator|.
name|id
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the setting with the provided setting key and the long value.          *          * @param setting The setting key          * @param value   The long value          * @return The builder          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|String
name|setting
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|put
argument_list|(
name|setting
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the setting with the provided setting key and the float value.          *          * @param setting The setting key          * @param value   The float value          * @return The builder          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|String
name|setting
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|put
argument_list|(
name|setting
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the setting with the provided setting key and the double value.          *          * @param setting The setting key          * @param value   The double value          * @return The builder          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|String
name|setting
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|put
argument_list|(
name|setting
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the setting with the provided setting key and the time value.          *          * @param setting The setting key          * @param value   The time value          * @return The builder          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|String
name|setting
parameter_list|,
name|long
name|value
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|put
argument_list|(
name|setting
argument_list|,
name|timeUnit
operator|.
name|toMillis
argument_list|(
name|value
argument_list|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the setting with the provided setting key and the size value.          *          * @param setting The setting key          * @param value   The size value          * @return The builder          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|String
name|setting
parameter_list|,
name|long
name|value
parameter_list|,
name|ByteSizeUnit
name|sizeUnit
parameter_list|)
block|{
name|put
argument_list|(
name|setting
argument_list|,
name|sizeUnit
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
operator|+
literal|"b"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the setting with the provided setting key and an array of values.          *          * @param setting The setting key          * @param values  The values          * @return The builder          */
comment|/**          * Sets the setting with the provided setting key and an array of values.          *          * @param setting The setting key          * @param values  The values          * @return The builder          */
DECL|method|putArray
specifier|public
name|Builder
name|putArray
parameter_list|(
name|String
name|setting
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
block|{
return|return
name|putArray
argument_list|(
name|setting
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Sets the setting with the provided setting key and a list of values.          *          * @param setting The setting key          * @param values  The values          * @return The builder          */
DECL|method|putArray
specifier|public
name|Builder
name|putArray
parameter_list|(
name|String
name|setting
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|remove
argument_list|(
name|setting
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|value
init|=
name|map
operator|.
name|remove
argument_list|(
name|setting
operator|+
literal|'.'
operator|+
operator|(
name|counter
operator|++
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|put
argument_list|(
name|setting
operator|+
literal|"."
operator|+
name|i
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Sets the setting as an array of values, but keeps existing elements for the key.          */
DECL|method|extendArray
specifier|public
name|Builder
name|extendArray
parameter_list|(
name|String
name|setting
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
block|{
comment|// check for a singular (non array) value
name|String
name|oldSingle
init|=
name|remove
argument_list|(
name|setting
argument_list|)
decl_stmt|;
comment|// find the highest array index
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|setting
operator|+
literal|'.'
operator|+
name|counter
argument_list|)
condition|)
block|{
operator|++
name|counter
expr_stmt|;
block|}
if|if
condition|(
name|oldSingle
operator|!=
literal|null
condition|)
block|{
name|put
argument_list|(
name|setting
operator|+
literal|'.'
operator|+
name|counter
operator|++
argument_list|,
name|oldSingle
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|put
argument_list|(
name|setting
operator|+
literal|'.'
operator|+
name|counter
operator|++
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Sets the setting group.          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|String
name|settingPrefix
parameter_list|,
name|String
name|groupName
parameter_list|,
name|String
index|[]
name|settings
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
throws|throws
name|SettingsException
block|{
if|if
condition|(
name|settings
operator|.
name|length
operator|!=
name|values
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"The settings length must match the value length"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|settings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|values
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|put
argument_list|(
name|settingPrefix
operator|+
literal|"."
operator|+
name|groupName
operator|+
literal|"."
operator|+
name|settings
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Sets all the provided settings.          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|removeNonArraysFieldsIfNewSettingsContainsFieldAsArray
argument_list|(
name|settings
operator|.
name|getAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|settings
operator|.
name|getAsMap
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets all the provided settings.          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
parameter_list|)
block|{
name|removeNonArraysFieldsIfNewSettingsContainsFieldAsArray
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|settings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Removes non array values from the existing map, if settings contains an array value instead          *          * Example:          *   Existing map contains: {key:value}          *   New map contains: {key:[value1,value2]} (which has been flattened to {}key.0:value1,key.1:value2})          *          *   This ensure that that the 'key' field gets removed from the map in order to override all the          *   data instead of merging          */
DECL|method|removeNonArraysFieldsIfNewSettingsContainsFieldAsArray
specifier|private
name|void
name|removeNonArraysFieldsIfNewSettingsContainsFieldAsArray
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|prefixesToRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|settings
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Matcher
name|matcher
init|=
name|ARRAY_PATTERN
operator|.
name|matcher
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|prefixesToRemove
operator|.
name|add
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|key
lambda|->
name|key
operator|.
name|startsWith
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"."
argument_list|)
argument_list|)
condition|)
block|{
name|prefixesToRemove
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
block|;                 }
block|}
for|for
control|(
name|String
name|prefix
range|:
name|prefixesToRemove
control|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
operator|+
literal|"."
argument_list|)
operator|||
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**          * Sets all the provided settings.          */
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|Dictionary
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
for|for
control|(
name|Object
name|key
range|:
name|Collections
operator|.
name|list
argument_list|(
name|properties
operator|.
name|keys
argument_list|()
argument_list|)
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|key
argument_list|)
argument_list|,
name|Objects
operator|.
name|toString
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|loadFromDelimitedString
specifier|public
name|Builder
name|loadFromDelimitedString
parameter_list|(
name|String
name|value
parameter_list|,
name|char
name|delimiter
parameter_list|)
block|{
name|String
index|[]
name|values
init|=
name|Strings
operator|.
name|splitStringToArray
argument_list|(
name|value
argument_list|,
name|delimiter
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|values
control|)
block|{
name|int
name|index
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value ["
operator|+
name|s
operator|+
literal|"] for settings loaded with delimiter ["
operator|+
name|delimiter
operator|+
literal|"] is malformed, missing ="
argument_list|)
throw|;
block|}
name|map
operator|.
name|put
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Loads settings from the actual string content that represents them using the          * {@link SettingsLoaderFactory#loaderFromSource(String)}.          */
DECL|method|loadFromSource
specifier|public
name|Builder
name|loadFromSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|SettingsLoader
name|settingsLoader
init|=
name|SettingsLoaderFactory
operator|.
name|loaderFromSource
argument_list|(
name|source
argument_list|)
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|loadedSettings
init|=
name|settingsLoader
operator|.
name|load
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|put
argument_list|(
name|loadedSettings
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SettingsException
argument_list|(
literal|"Failed to load settings from ["
operator|+
name|source
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Loads settings from a url that represents them using the          * {@link SettingsLoaderFactory#loaderFromSource(String)}.          */
DECL|method|loadFromPath
specifier|public
name|Builder
name|loadFromPath
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|// NOTE: loadFromStream will close the input stream
return|return
name|loadFromStream
argument_list|(
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Files
operator|.
name|newInputStream
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Loads settings from a stream that represents them using the          * {@link SettingsLoaderFactory#loaderFromSource(String)}.          */
DECL|method|loadFromStream
specifier|public
name|Builder
name|loadFromStream
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|SettingsLoader
name|settingsLoader
init|=
name|SettingsLoaderFactory
operator|.
name|loaderFromResource
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
comment|// NOTE: copyToString will close the input stream
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|loadedSettings
init|=
name|settingsLoader
operator|.
name|load
argument_list|(
name|Streams
operator|.
name|copyToString
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
argument_list|(
name|loadedSettings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Puts all the properties with keys starting with the provided<tt>prefix</tt>.          *          * @param prefix     The prefix to filter property key by          * @param properties The properties to put          * @return The builder          */
DECL|method|putProperties
specifier|public
name|Builder
name|putProperties
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Dictionary
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
for|for
control|(
name|Object
name|property
range|:
name|Collections
operator|.
name|list
argument_list|(
name|properties
operator|.
name|keys
argument_list|()
argument_list|)
control|)
block|{
name|String
name|key
init|=
name|Objects
operator|.
name|toString
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|Objects
operator|.
name|toString
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**          * Puts all the properties with keys starting with the provided<tt>prefix</tt>.          *          * @param prefix     The prefix to filter property key by          * @param properties The properties to put          * @return The builder          */
DECL|method|putProperties
specifier|public
name|Builder
name|putProperties
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Dictionary
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|String
name|ignorePrefix
parameter_list|)
block|{
for|for
control|(
name|Object
name|property
range|:
name|Collections
operator|.
name|list
argument_list|(
name|properties
operator|.
name|keys
argument_list|()
argument_list|)
control|)
block|{
name|String
name|key
init|=
name|Objects
operator|.
name|toString
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|Objects
operator|.
name|toString
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|ignorePrefix
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**          * Runs across all the settings set on this builder and replaces<tt>${...}</tt> elements in the          * each setting value according to the following logic:          *<p>          * First, tries to resolve it against a System property ({@link System#getProperty(String)}), next,          * tries and resolve it against an environment variable ({@link System#getenv(String)}), and last, tries          * and replace it with another setting already set on this builder.          */
DECL|method|replacePropertyPlaceholders
specifier|public
name|Builder
name|replacePropertyPlaceholders
parameter_list|()
block|{
name|PropertyPlaceholder
name|propertyPlaceholder
init|=
operator|new
name|PropertyPlaceholder
argument_list|(
literal|"${"
argument_list|,
literal|"}"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PropertyPlaceholder
operator|.
name|PlaceholderResolver
name|placeholderResolver
init|=
operator|new
name|PropertyPlaceholder
operator|.
name|PlaceholderResolver
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|resolvePlaceholder
parameter_list|(
name|String
name|placeholderName
parameter_list|)
block|{
if|if
condition|(
name|placeholderName
operator|.
name|startsWith
argument_list|(
literal|"env."
argument_list|)
condition|)
block|{
comment|// explicit env var prefix
return|return
name|System
operator|.
name|getenv
argument_list|(
name|placeholderName
operator|.
name|substring
argument_list|(
literal|"env."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|placeholderName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
name|value
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|placeholderName
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
return|return
name|map
operator|.
name|get
argument_list|(
name|placeholderName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldIgnoreMissing
parameter_list|(
name|String
name|placeholderName
parameter_list|)
block|{
comment|// if its an explicit env var, we are ok with not having a value for it and treat it as optional
if|if
condition|(
name|placeholderName
operator|.
name|startsWith
argument_list|(
literal|"env."
argument_list|)
operator|||
name|placeholderName
operator|.
name|startsWith
argument_list|(
literal|"prompt."
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldRemoveMissingPlaceholder
parameter_list|(
name|String
name|placeholderName
parameter_list|)
block|{
if|if
condition|(
name|placeholderName
operator|.
name|startsWith
argument_list|(
literal|"prompt."
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entryItr
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entryItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|entryItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// a null value obviously can't be replaced
continue|continue;
block|}
name|String
name|value
init|=
name|propertyPlaceholder
operator|.
name|replacePlaceholders
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|placeholderResolver
argument_list|)
decl_stmt|;
comment|// if the values exists and has length, we should maintain it  in the map
comment|// otherwise, the replace process resolved into removing it
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entryItr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**          * Checks that all settings in the builder start with the specified prefix.          *          * If a setting doesn't start with the prefix, the builder appends the prefix to such setting.          */
DECL|method|normalizePrefix
specifier|public
name|Builder
name|normalizePrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replacements
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
operator|==
literal|false
condition|)
block|{
name|replacements
operator|.
name|put
argument_list|(
name|prefix
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|map
operator|.
name|putAll
argument_list|(
name|replacements
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Builds a {@link Settings} (underlying uses {@link Settings}) based on everything          * set on this builder.          */
DECL|method|build
specifier|public
name|Settings
name|build
parameter_list|()
block|{
return|return
operator|new
name|Settings
argument_list|(
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

