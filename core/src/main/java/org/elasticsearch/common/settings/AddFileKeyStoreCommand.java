begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|EnvironmentAwareCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|ExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|UserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_comment
comment|/**  * A subcommand for the keystore cli which adds a file setting.  */
end_comment

begin_class
DECL|class|AddFileKeyStoreCommand
class|class
name|AddFileKeyStoreCommand
extends|extends
name|EnvironmentAwareCommand
block|{
DECL|field|forceOption
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|forceOption
decl_stmt|;
DECL|field|arguments
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|arguments
decl_stmt|;
DECL|method|AddFileKeyStoreCommand
name|AddFileKeyStoreCommand
parameter_list|()
block|{
name|super
argument_list|(
literal|"Add a file setting to the keystore"
argument_list|)
expr_stmt|;
name|this
operator|.
name|forceOption
operator|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"f"
argument_list|,
literal|"force"
argument_list|)
argument_list|,
literal|"Overwrite existing setting without prompting"
argument_list|)
expr_stmt|;
comment|// jopt simple has issue with multiple non options, so we just get one set of them here
comment|// and convert to File when necessary
comment|// see https://github.com/jopt-simple/jopt-simple/issues/103
name|this
operator|.
name|arguments
operator|=
name|parser
operator|.
name|nonOptions
argument_list|(
literal|"setting [filepath]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|protected
name|void
name|execute
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OptionSet
name|options
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyStoreWrapper
name|keystore
init|=
name|KeyStoreWrapper
operator|.
name|load
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keystore
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UserException
argument_list|(
name|ExitCodes
operator|.
name|DATA_ERROR
argument_list|,
literal|"Elasticsearch keystore not found. Use 'create' command to create one."
argument_list|)
throw|;
block|}
name|keystore
operator|.
name|decrypt
argument_list|(
operator|new
name|char
index|[
literal|0
index|]
comment|/* TODO: prompt for password when they are supported */
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argumentValues
init|=
name|arguments
operator|.
name|values
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|argumentValues
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|UserException
argument_list|(
name|ExitCodes
operator|.
name|USAGE
argument_list|,
literal|"Missing setting name"
argument_list|)
throw|;
block|}
name|String
name|setting
init|=
name|argumentValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|keystore
operator|.
name|getSettingNames
argument_list|()
operator|.
name|contains
argument_list|(
name|setting
argument_list|)
operator|&&
name|options
operator|.
name|has
argument_list|(
name|forceOption
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|terminal
operator|.
name|promptYesNo
argument_list|(
literal|"Setting "
operator|+
name|setting
operator|+
literal|" already exists. Overwrite?"
argument_list|,
literal|false
argument_list|)
operator|==
literal|false
condition|)
block|{
name|terminal
operator|.
name|println
argument_list|(
literal|"Exiting without modifying keystore."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|argumentValues
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|UserException
argument_list|(
name|ExitCodes
operator|.
name|USAGE
argument_list|,
literal|"Missing file name"
argument_list|)
throw|;
block|}
name|Path
name|file
init|=
name|getPath
argument_list|(
name|argumentValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|file
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|UserException
argument_list|(
name|ExitCodes
operator|.
name|IO_ERROR
argument_list|,
literal|"File ["
operator|+
name|file
operator|.
name|toString
argument_list|()
operator|+
literal|"] does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|argumentValues
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|UserException
argument_list|(
name|ExitCodes
operator|.
name|USAGE
argument_list|,
literal|"Unrecognized extra arguments ["
operator|+
name|String
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|argumentValues
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
name|argumentValues
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"] after filepath"
argument_list|)
throw|;
block|}
name|keystore
operator|.
name|setFile
argument_list|(
name|setting
argument_list|,
name|Files
operator|.
name|readAllBytes
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|keystore
operator|.
name|save
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"file arg for cli"
argument_list|)
DECL|method|getPath
specifier|private
name|Path
name|getPath
parameter_list|(
name|String
name|file
parameter_list|)
block|{
return|return
name|PathUtils
operator|.
name|get
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
end_class

end_unit

