begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A String implementations which allows clearing the underlying char array.  */
end_comment

begin_class
DECL|class|SecureString
specifier|public
specifier|final
class|class
name|SecureString
implements|implements
name|CharSequence
implements|,
name|Closeable
block|{
DECL|field|chars
specifier|private
name|char
index|[]
name|chars
decl_stmt|;
comment|/**      * Constructs a new SecureString which controls the passed in char array.      *      * Note: When this instance is closed, the array will be zeroed out.      */
DECL|method|SecureString
specifier|public
name|SecureString
parameter_list|(
name|char
index|[]
name|chars
parameter_list|)
block|{
name|this
operator|.
name|chars
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|chars
argument_list|)
expr_stmt|;
block|}
comment|/** Constant time equality to avoid potential timing attacks. */
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|synchronized
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ensureNotClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|instanceof
name|CharSequence
operator|==
literal|false
condition|)
return|return
literal|false
return|;
name|CharSequence
name|that
init|=
operator|(
name|CharSequence
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|chars
operator|.
name|length
operator|!=
name|that
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|equals
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|equals
operator||=
name|chars
index|[
name|i
index|]
operator|^
name|that
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|equals
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|synchronized
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|chars
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
specifier|synchronized
name|int
name|length
parameter_list|()
block|{
name|ensureNotClosed
argument_list|()
expr_stmt|;
return|return
name|chars
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|charAt
specifier|public
specifier|synchronized
name|char
name|charAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|ensureNotClosed
argument_list|()
expr_stmt|;
return|return
name|chars
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|subSequence
specifier|public
name|SecureString
name|subSequence
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot get subsequence of SecureString"
argument_list|)
throw|;
block|}
comment|/**      * Convert to a {@link String}. This should only be used with APIs that do not take {@link CharSequence}.      */
annotation|@
name|Override
DECL|method|toString
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|chars
argument_list|)
return|;
block|}
comment|/**      * Closes the string by clearing the underlying char array.      */
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|chars
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
name|chars
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Throw an exception if this string has been closed, indicating something is trying to access the data after being closed. */
DECL|method|ensureNotClosed
specifier|private
name|void
name|ensureNotClosed
parameter_list|()
block|{
if|if
condition|(
name|chars
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"SecureString has already been closed"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

