begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CheckedOutputStream
import|;
end_import

begin_comment
comment|/**  * Similar class to the {@link String} class except that it internally stores  * data using a compressed representation in order to require less permanent  * memory. Note that the compressed string might still sometimes need to be  * decompressed in order to perform equality checks or to compute hash codes.  */
end_comment

begin_class
DECL|class|CompressedXContent
specifier|public
specifier|final
class|class
name|CompressedXContent
block|{
DECL|method|crc32
specifier|private
specifier|static
name|int
name|crc32
parameter_list|(
name|BytesReference
name|data
parameter_list|)
block|{
name|OutputStream
name|dummy
init|=
operator|new
name|OutputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no-op
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no-op
block|}
block|}
decl_stmt|;
name|CRC32
name|crc32
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
try|try
block|{
name|data
operator|.
name|writeTo
argument_list|(
operator|new
name|CheckedOutputStream
argument_list|(
name|dummy
argument_list|,
name|crc32
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|bogus
parameter_list|)
block|{
comment|// cannot happen
throw|throw
operator|new
name|Error
argument_list|(
name|bogus
argument_list|)
throw|;
block|}
return|return
operator|(
name|int
operator|)
name|crc32
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|field|bytes
specifier|private
specifier|final
name|byte
index|[]
name|bytes
decl_stmt|;
DECL|field|crc32
specifier|private
specifier|final
name|int
name|crc32
decl_stmt|;
comment|// Used for serialization
DECL|method|CompressedXContent
specifier|private
name|CompressedXContent
parameter_list|(
name|byte
index|[]
name|compressed
parameter_list|,
name|int
name|crc32
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|compressed
expr_stmt|;
name|this
operator|.
name|crc32
operator|=
name|crc32
expr_stmt|;
name|assertConsistent
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create a {@link CompressedXContent} out of a {@link ToXContent} instance.      */
DECL|method|CompressedXContent
specifier|public
name|CompressedXContent
parameter_list|(
name|ToXContent
name|xcontent
parameter_list|,
name|XContentType
name|type
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|bStream
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|OutputStream
name|compressedStream
init|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
operator|.
name|streamOutput
argument_list|(
name|bStream
argument_list|)
decl_stmt|;
name|CRC32
name|crc32
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|OutputStream
name|checkedStream
init|=
operator|new
name|CheckedOutputStream
argument_list|(
name|compressedStream
argument_list|,
name|crc32
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|type
argument_list|,
name|checkedStream
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|xcontent
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|bytes
operator|=
name|bStream
operator|.
name|bytes
argument_list|()
operator|.
name|toBytes
argument_list|()
expr_stmt|;
name|this
operator|.
name|crc32
operator|=
operator|(
name|int
operator|)
name|crc32
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertConsistent
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create a {@link CompressedXContent} out of a serialized {@link ToXContent}      * that may already be compressed.      */
DECL|method|CompressedXContent
specifier|public
name|CompressedXContent
parameter_list|(
name|BytesReference
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|Compressor
name|compressor
init|=
name|CompressorFactory
operator|.
name|compressor
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
comment|// already compressed...
name|this
operator|.
name|bytes
operator|=
name|data
operator|.
name|toBytes
argument_list|()
expr_stmt|;
name|this
operator|.
name|crc32
operator|=
name|crc32
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|uncompressed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
try|try
init|(
name|OutputStream
name|compressedOutput
init|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
operator|.
name|streamOutput
argument_list|(
name|out
argument_list|)
init|)
block|{
name|data
operator|.
name|writeTo
argument_list|(
name|compressedOutput
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|bytes
operator|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|toBytes
argument_list|()
expr_stmt|;
name|this
operator|.
name|crc32
operator|=
name|crc32
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|assertConsistent
argument_list|()
expr_stmt|;
block|}
DECL|method|assertConsistent
specifier|private
name|void
name|assertConsistent
parameter_list|()
block|{
assert|assert
name|CompressorFactory
operator|.
name|compressor
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|bytes
argument_list|)
argument_list|)
operator|!=
literal|null
assert|;
assert|assert
name|this
operator|.
name|crc32
operator|==
name|crc32
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|uncompressed
argument_list|()
argument_list|)
argument_list|)
assert|;
block|}
DECL|method|CompressedXContent
specifier|public
name|CompressedXContent
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|CompressedXContent
specifier|public
name|CompressedXContent
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Return the compressed bytes. */
DECL|method|compressed
specifier|public
name|byte
index|[]
name|compressed
parameter_list|()
block|{
return|return
name|this
operator|.
name|bytes
return|;
block|}
comment|/** Return the compressed bytes as a {@link BytesReference}. */
DECL|method|compressedReference
specifier|public
name|BytesReference
name|compressedReference
parameter_list|()
block|{
return|return
operator|new
name|BytesArray
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/** Return the uncompressed bytes. */
DECL|method|uncompressed
specifier|public
name|byte
index|[]
name|uncompressed
parameter_list|()
block|{
try|try
block|{
return|return
name|CompressorFactory
operator|.
name|uncompress
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|bytes
argument_list|)
argument_list|)
operator|.
name|toBytes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot decompress compressed string"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|string
specifier|public
name|String
name|string
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|BytesRef
argument_list|(
name|uncompressed
argument_list|()
argument_list|)
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
DECL|method|readCompressedString
specifier|public
specifier|static
name|CompressedXContent
name|readCompressedString
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|crc32
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|compressed
init|=
operator|new
name|byte
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|compressed
argument_list|,
literal|0
argument_list|,
name|compressed
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompressedXContent
argument_list|(
name|compressed
argument_list|,
name|crc32
argument_list|)
return|;
block|}
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|crc32
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|CompressedXContent
name|that
init|=
operator|(
name|CompressedXContent
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|compressed
argument_list|()
argument_list|,
name|that
operator|.
name|compressed
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|crc32
operator|!=
name|that
operator|.
name|crc32
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|uncompressed
argument_list|()
argument_list|,
name|that
operator|.
name|uncompressed
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|crc32
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
return|return
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|"_na_"
return|;
block|}
block|}
block|}
end_class

end_unit

