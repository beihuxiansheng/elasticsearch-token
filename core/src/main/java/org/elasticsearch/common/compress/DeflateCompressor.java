begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|OutputStreamStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DeflaterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import

begin_comment
comment|/**  * {@link Compressor} implementation based on the DEFLATE compression algorithm.  */
end_comment

begin_class
DECL|class|DeflateCompressor
specifier|public
class|class
name|DeflateCompressor
implements|implements
name|Compressor
block|{
comment|// An arbitrary header that we use to identify compressed streams
comment|// It needs to be different from other compressors and to not be specific
comment|// enough so that no stream starting with these bytes could be detected as
comment|// a XContent
DECL|field|HEADER
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|HEADER
init|=
operator|new
name|byte
index|[]
block|{
literal|'D'
block|,
literal|'F'
block|,
literal|'L'
block|,
literal|'\0'
block|}
decl_stmt|;
comment|// 3 is a good trade-off between speed and compression ratio
DECL|field|LEVEL
specifier|private
specifier|static
specifier|final
name|int
name|LEVEL
init|=
literal|3
decl_stmt|;
comment|// We use buffering on the input and output of in/def-laters in order to
comment|// limit the number of JNI calls
DECL|field|BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|4096
decl_stmt|;
annotation|@
name|Override
DECL|method|isCompressed
specifier|public
name|boolean
name|isCompressed
parameter_list|(
name|BytesReference
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|.
name|length
argument_list|()
operator|<
name|HEADER
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HEADER
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|bytes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
name|HEADER
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|streamInput
specifier|public
name|StreamInput
name|streamInput
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|headerBytes
init|=
operator|new
name|byte
index|[
name|HEADER
operator|.
name|length
index|]
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|<
name|headerBytes
operator|.
name|length
condition|)
block|{
specifier|final
name|int
name|read
init|=
name|in
operator|.
name|read
argument_list|(
name|headerBytes
argument_list|,
name|len
argument_list|,
name|headerBytes
operator|.
name|length
operator|-
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|len
operator|+=
name|read
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|!=
name|HEADER
operator|.
name|length
operator|||
name|Arrays
operator|.
name|equals
argument_list|(
name|headerBytes
argument_list|,
name|HEADER
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Input stream is not compressed with DEFLATE!"
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|nowrap
init|=
literal|true
decl_stmt|;
specifier|final
name|Inflater
name|inflater
init|=
operator|new
name|Inflater
argument_list|(
name|nowrap
argument_list|)
decl_stmt|;
name|InputStream
name|decompressedIn
init|=
operator|new
name|InflaterInputStream
argument_list|(
name|in
argument_list|,
name|inflater
argument_list|,
name|BUFFER_SIZE
argument_list|)
decl_stmt|;
name|decompressedIn
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|decompressedIn
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
return|return
operator|new
name|InputStreamStreamInput
argument_list|(
name|decompressedIn
argument_list|)
block|{
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// important to release native memory
name|inflater
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|streamOutput
specifier|public
name|StreamOutput
name|streamOutput
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|HEADER
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|nowrap
init|=
literal|true
decl_stmt|;
specifier|final
name|Deflater
name|deflater
init|=
operator|new
name|Deflater
argument_list|(
name|LEVEL
argument_list|,
name|nowrap
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|syncFlush
init|=
literal|true
decl_stmt|;
name|OutputStream
name|compressedOut
init|=
operator|new
name|DeflaterOutputStream
argument_list|(
name|out
argument_list|,
name|deflater
argument_list|,
name|BUFFER_SIZE
argument_list|,
name|syncFlush
argument_list|)
decl_stmt|;
name|compressedOut
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|compressedOut
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
return|return
operator|new
name|OutputStreamStreamOutput
argument_list|(
name|compressedOut
argument_list|)
block|{
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// important to release native memory
name|deflater
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

