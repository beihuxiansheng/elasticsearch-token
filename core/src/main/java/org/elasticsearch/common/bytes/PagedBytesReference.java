begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.bytes
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|ByteArray
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * A page based bytes reference, internally holding the bytes in a paged  * data structure.  */
end_comment

begin_class
DECL|class|PagedBytesReference
specifier|public
class|class
name|PagedBytesReference
extends|extends
name|BytesReference
block|{
DECL|field|PAGE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|PAGE_SIZE
init|=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
decl_stmt|;
DECL|field|bigarrays
specifier|private
specifier|final
name|BigArrays
name|bigarrays
decl_stmt|;
DECL|field|bytearray
specifier|protected
specifier|final
name|ByteArray
name|bytearray
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
DECL|field|hash
specifier|private
name|int
name|hash
init|=
literal|0
decl_stmt|;
DECL|method|PagedBytesReference
specifier|public
name|PagedBytesReference
parameter_list|(
name|BigArrays
name|bigarrays
parameter_list|,
name|ByteArray
name|bytearray
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
argument_list|(
name|bigarrays
argument_list|,
name|bytearray
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|PagedBytesReference
specifier|public
name|PagedBytesReference
parameter_list|(
name|BigArrays
name|bigarrays
parameter_list|,
name|ByteArray
name|bytearray
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bigarrays
operator|=
name|bigarrays
expr_stmt|;
name|this
operator|.
name|bytearray
operator|=
name|bytearray
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|byte
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|bytearray
operator|.
name|get
argument_list|(
name|offset
operator|+
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|slice
specifier|public
name|BytesReference
name|slice
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|from
argument_list|<
literal|0
operator|||
operator|(
name|from
operator|+
name|length
operator|)
argument_list|>
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't slice a buffer with length ["
operator|+
name|length
argument_list|()
operator|+
literal|"], with slice parameters from ["
operator|+
name|from
operator|+
literal|"], length ["
operator|+
name|length
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
operator|new
name|PagedBytesReference
argument_list|(
name|bigarrays
argument_list|,
name|bytearray
argument_list|,
name|offset
operator|+
name|from
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|streamInput
specifier|public
name|StreamInput
name|streamInput
parameter_list|()
block|{
return|return
operator|new
name|PagedBytesReferenceStreamInput
argument_list|(
name|bytearray
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toBytesRef
specifier|public
name|BytesRef
name|toBytesRef
parameter_list|()
block|{
name|BytesRef
name|bref
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
comment|// if length<= pagesize this will dereference the page, or materialize the byte[]
name|bytearray
operator|.
name|get
argument_list|(
name|offset
argument_list|,
name|length
argument_list|,
name|bref
argument_list|)
expr_stmt|;
return|return
name|bref
return|;
block|}
DECL|class|PagedBytesReferenceStreamInput
specifier|private
specifier|static
class|class
name|PagedBytesReferenceStreamInput
extends|extends
name|StreamInput
block|{
DECL|field|bytearray
specifier|private
specifier|final
name|ByteArray
name|bytearray
decl_stmt|;
DECL|field|ref
specifier|private
specifier|final
name|BytesRef
name|ref
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|mark
specifier|private
name|int
name|mark
decl_stmt|;
DECL|method|PagedBytesReferenceStreamInput
specifier|public
name|PagedBytesReferenceStreamInput
parameter_list|(
name|ByteArray
name|bytearray
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytearray
operator|=
name|bytearray
expr_stmt|;
name|this
operator|.
name|ref
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|offset
operator|+
name|length
operator|>
name|bytearray
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"offset+length>= bytearray.size()"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|readByte
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|>=
name|length
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
name|bytearray
operator|.
name|get
argument_list|(
name|offset
operator|+
name|pos
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readBytes
specifier|public
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|bOffset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|len
operator|>
name|offset
operator|+
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Cannot read "
operator|+
name|len
operator|+
literal|" bytes from stream with length "
operator|+
name|length
operator|+
literal|" at pos "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|read
argument_list|(
name|b
argument_list|,
name|bOffset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|pos
operator|<
name|length
operator|)
condition|?
name|Byte
operator|.
name|toUnsignedInt
argument_list|(
name|bytearray
operator|.
name|get
argument_list|(
name|offset
operator|+
name|pos
operator|++
argument_list|)
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|bOffset
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|pos
operator|>=
name|offset
operator|+
name|length
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|int
name|numBytesToCopy
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|length
operator|-
name|pos
argument_list|)
decl_stmt|;
comment|// copy the full length or the remaining part
comment|// current offset into the underlying ByteArray
name|long
name|byteArrayOffset
init|=
name|offset
operator|+
name|pos
decl_stmt|;
comment|// bytes already copied
name|int
name|copiedBytes
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|copiedBytes
operator|<
name|numBytesToCopy
condition|)
block|{
name|long
name|pageFragment
init|=
name|PAGE_SIZE
operator|-
operator|(
name|byteArrayOffset
operator|%
name|PAGE_SIZE
operator|)
decl_stmt|;
comment|// how much can we read until hitting N*PAGE_SIZE?
name|int
name|bulkSize
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|pageFragment
argument_list|,
name|numBytesToCopy
operator|-
name|copiedBytes
argument_list|)
decl_stmt|;
comment|// we cannot copy more than a page fragment
name|boolean
name|copied
init|=
name|bytearray
operator|.
name|get
argument_list|(
name|byteArrayOffset
argument_list|,
name|bulkSize
argument_list|,
name|ref
argument_list|)
decl_stmt|;
comment|// get the fragment
assert|assert
operator|(
name|copied
operator|==
literal|false
operator|)
assert|;
comment|// we should never ever get back a materialized byte[]
name|System
operator|.
name|arraycopy
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|b
argument_list|,
name|bOffset
operator|+
name|copiedBytes
argument_list|,
name|bulkSize
argument_list|)
expr_stmt|;
comment|// copy fragment contents
name|copiedBytes
operator|+=
name|bulkSize
expr_stmt|;
comment|// count how much we copied
name|byteArrayOffset
operator|+=
name|bulkSize
expr_stmt|;
comment|// advance ByteArray index
block|}
name|pos
operator|+=
name|copiedBytes
expr_stmt|;
comment|// finally advance our stream position
return|return
name|copiedBytes
return|;
block|}
annotation|@
name|Override
DECL|method|markSupported
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|mark
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readlimit
parameter_list|)
block|{
name|this
operator|.
name|mark
operator|=
name|pos
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|pos
operator|=
name|mark
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|available
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|length
operator|-
name|pos
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
specifier|final
name|BytesRefIterator
name|iterator
parameter_list|()
block|{
specifier|final
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|this
operator|.
name|length
decl_stmt|;
comment|// this iteration is page aligned to ensure we do NOT materialize the pages from the ByteArray
comment|// we calculate the initial fragment size here to ensure that if this reference is a slice we are still page aligned
comment|// across the entire iteration. The first page is smaller if our offset != 0 then we start in the middle of the page
comment|// otherwise we iterate full pages until we reach the last chunk which also might end within a page.
specifier|final
name|int
name|initialFragmentSize
init|=
name|offset
operator|!=
literal|0
condition|?
name|PAGE_SIZE
operator|-
operator|(
name|offset
operator|%
name|PAGE_SIZE
operator|)
else|:
name|PAGE_SIZE
decl_stmt|;
return|return
operator|new
name|BytesRefIterator
argument_list|()
block|{
name|int
name|position
init|=
literal|0
decl_stmt|;
name|int
name|nextFragmentSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|initialFragmentSize
argument_list|)
decl_stmt|;
comment|// this BytesRef is reused across the iteration on purpose - BytesRefIterator interface was designed for this
specifier|final
name|BytesRef
name|slice
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nextFragmentSize
operator|!=
literal|0
condition|)
block|{
specifier|final
name|boolean
name|materialized
init|=
name|bytearray
operator|.
name|get
argument_list|(
name|offset
operator|+
name|position
argument_list|,
name|nextFragmentSize
argument_list|,
name|slice
argument_list|)
decl_stmt|;
assert|assert
name|materialized
operator|==
literal|false
operator|:
literal|"iteration should be page aligned but array got materialized"
assert|;
name|position
operator|+=
name|nextFragmentSize
expr_stmt|;
specifier|final
name|int
name|remaining
init|=
name|length
operator|-
name|position
decl_stmt|;
name|nextFragmentSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|PAGE_SIZE
argument_list|)
expr_stmt|;
return|return
name|slice
return|;
block|}
else|else
block|{
assert|assert
name|nextFragmentSize
operator|==
literal|0
operator|:
literal|"fragmentSize expected [0] but was: ["
operator|+
name|nextFragmentSize
operator|+
literal|"]"
assert|;
return|return
literal|null
return|;
comment|// we are done with this iteration
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|bytearray
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
block|}
end_class

end_unit

