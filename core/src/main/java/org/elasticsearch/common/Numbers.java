begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_comment
comment|/**  * A set of utilities for numbers.  */
end_comment

begin_class
DECL|class|Numbers
specifier|public
specifier|final
class|class
name|Numbers
block|{
DECL|method|Numbers
specifier|private
name|Numbers
parameter_list|()
block|{      }
comment|/**      * Converts a byte array to an short.      *      * @param arr The byte array to convert to an short      * @return The int converted      */
DECL|method|bytesToShort
specifier|public
specifier|static
name|short
name|bytesToShort
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
operator|(
operator|(
name|arr
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|arr
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
argument_list|)
return|;
block|}
DECL|method|bytesToShort
specifier|public
specifier|static
name|short
name|bytesToShort
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
operator|(
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
argument_list|)
return|;
block|}
comment|/**      * Converts a byte array to an int.      *      * @param arr The byte array to convert to an int      * @return The int converted      */
DECL|method|bytesToInt
specifier|public
specifier|static
name|int
name|bytesToInt
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|)
block|{
return|return
operator|(
name|arr
index|[
literal|0
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|arr
index|[
literal|3
index|]
operator|&
literal|0xff
operator|)
return|;
block|}
DECL|method|bytesToInt
specifier|public
specifier|static
name|int
name|bytesToInt
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
return|return
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|3
index|]
operator|&
literal|0xff
operator|)
return|;
block|}
comment|/**      * Converts a byte array to a long.      *      * @param arr The byte array to convert to a long      * @return The long converter      */
DECL|method|bytesToLong
specifier|public
specifier|static
name|long
name|bytesToLong
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|)
block|{
name|int
name|high
init|=
operator|(
name|arr
index|[
literal|0
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|arr
index|[
literal|3
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|int
name|low
init|=
operator|(
name|arr
index|[
literal|4
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|5
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|6
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|arr
index|[
literal|7
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
return|return
operator|(
operator|(
operator|(
name|long
operator|)
name|high
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
name|low
operator|&
literal|0x0ffffffffL
operator|)
return|;
block|}
DECL|method|bytesToLong
specifier|public
specifier|static
name|long
name|bytesToLong
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
name|int
name|high
init|=
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|0
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|3
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|int
name|low
init|=
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|4
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|5
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|6
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|bytes
operator|.
name|bytes
index|[
name|bytes
operator|.
name|offset
operator|+
literal|7
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
return|return
operator|(
operator|(
operator|(
name|long
operator|)
name|high
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
name|low
operator|&
literal|0x0ffffffffL
operator|)
return|;
block|}
comment|/**      * Converts a byte array to float.      *      * @param arr The byte array to convert to a float      * @return The float converted      */
DECL|method|bytesToFloat
specifier|public
specifier|static
name|float
name|bytesToFloat
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|)
block|{
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|bytesToInt
argument_list|(
name|arr
argument_list|)
argument_list|)
return|;
block|}
DECL|method|bytesToFloat
specifier|public
specifier|static
name|float
name|bytesToFloat
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|bytesToInt
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Converts a byte array to double.      *      * @param arr The byte array to convert to a double      * @return The double converted      */
DECL|method|bytesToDouble
specifier|public
specifier|static
name|double
name|bytesToDouble
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|)
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|bytesToLong
argument_list|(
name|arr
argument_list|)
argument_list|)
return|;
block|}
DECL|method|bytesToDouble
specifier|public
specifier|static
name|double
name|bytesToDouble
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|bytesToLong
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Converts an int to a byte array.      *      * @param val The int to convert to a byte array      * @return The byte array converted      */
DECL|method|intToBytes
specifier|public
specifier|static
name|byte
index|[]
name|intToBytes
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|arr
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|arr
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|arr
index|[
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|arr
index|[
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
comment|/**      * Converts an int to a byte array.      *      * @param val The int to convert to a byte array      * @return The byte array converted      */
DECL|method|shortToBytes
specifier|public
specifier|static
name|byte
index|[]
name|shortToBytes
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|arr
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|arr
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
comment|/**      * Converts a long to a byte array.      *      * @param val The long to convert to a byte array      * @return The byte array converted      */
DECL|method|longToBytes
specifier|public
specifier|static
name|byte
index|[]
name|longToBytes
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|arr
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|56
argument_list|)
expr_stmt|;
name|arr
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|48
argument_list|)
expr_stmt|;
name|arr
index|[
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|40
argument_list|)
expr_stmt|;
name|arr
index|[
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|32
argument_list|)
expr_stmt|;
name|arr
index|[
literal|4
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|arr
index|[
literal|5
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|arr
index|[
literal|6
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|arr
index|[
literal|7
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
comment|/**      * Converts a float to a byte array.      *      * @param val The float to convert to a byte array      * @return The byte array converted      */
DECL|method|floatToBytes
specifier|public
specifier|static
name|byte
index|[]
name|floatToBytes
parameter_list|(
name|float
name|val
parameter_list|)
block|{
return|return
name|intToBytes
argument_list|(
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|val
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Converts a double to a byte array.      *      * @param val The double to convert to a byte array      * @return The byte array converted      */
DECL|method|doubleToBytes
specifier|public
specifier|static
name|byte
index|[]
name|doubleToBytes
parameter_list|(
name|double
name|val
parameter_list|)
block|{
return|return
name|longToBytes
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|val
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns true if value is neither NaN nor infinite. */
DECL|method|isValidDouble
specifier|public
specifier|static
name|boolean
name|isValidDouble
parameter_list|(
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|value
argument_list|)
operator|||
name|Double
operator|.
name|isInfinite
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** Return the long that {@code n} stores, or throws an exception if the      *  stored value cannot be converted to a long that stores the exact same      *  value. */
DECL|method|toLongExact
specifier|public
specifier|static
name|long
name|toLongExact
parameter_list|(
name|Number
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|instanceof
name|Byte
operator|||
name|n
operator|instanceof
name|Short
operator|||
name|n
operator|instanceof
name|Integer
operator|||
name|n
operator|instanceof
name|Long
condition|)
block|{
return|return
name|n
operator|.
name|longValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|instanceof
name|Float
operator|||
name|n
operator|instanceof
name|Double
condition|)
block|{
name|double
name|d
init|=
name|n
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|!=
name|Math
operator|.
name|round
argument_list|(
name|d
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|n
operator|+
literal|" is not an integer value"
argument_list|)
throw|;
block|}
return|return
name|n
operator|.
name|longValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
operator|(
operator|(
name|BigDecimal
operator|)
name|n
operator|)
operator|.
name|toBigIntegerExact
argument_list|()
operator|.
name|longValueExact
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|instanceof
name|BigInteger
condition|)
block|{
return|return
operator|(
operator|(
name|BigInteger
operator|)
name|n
operator|)
operator|.
name|longValueExact
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot check whether ["
operator|+
name|n
operator|+
literal|"] of class ["
operator|+
name|n
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] is actually a long"
argument_list|)
throw|;
block|}
block|}
comment|/** Return the int that {@code n} stores, or throws an exception if the      *  stored value cannot be converted to an int that stores the exact same      *  value. */
DECL|method|toIntExact
specifier|public
specifier|static
name|int
name|toIntExact
parameter_list|(
name|Number
name|n
parameter_list|)
block|{
return|return
name|Math
operator|.
name|toIntExact
argument_list|(
name|toLongExact
argument_list|(
name|n
argument_list|)
argument_list|)
return|;
block|}
comment|/** Return the short that {@code n} stores, or throws an exception if the      *  stored value cannot be converted to a short that stores the exact same      *  value. */
DECL|method|toShortExact
specifier|public
specifier|static
name|short
name|toShortExact
parameter_list|(
name|Number
name|n
parameter_list|)
block|{
name|long
name|l
init|=
name|toLongExact
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
operator|(
name|short
operator|)
name|l
condition|)
block|{
throw|throw
operator|new
name|ArithmeticException
argument_list|(
literal|"short overflow: "
operator|+
name|l
argument_list|)
throw|;
block|}
return|return
operator|(
name|short
operator|)
name|l
return|;
block|}
comment|/** Return the byte that {@code n} stores, or throws an exception if the      *  stored value cannot be converted to a byte that stores the exact same      *  value. */
DECL|method|toByteExact
specifier|public
specifier|static
name|byte
name|toByteExact
parameter_list|(
name|Number
name|n
parameter_list|)
block|{
name|long
name|l
init|=
name|toLongExact
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
operator|(
name|byte
operator|)
name|l
condition|)
block|{
throw|throw
operator|new
name|ArithmeticException
argument_list|(
literal|"byte overflow: "
operator|+
name|l
argument_list|)
throw|;
block|}
return|return
operator|(
name|byte
operator|)
name|l
return|;
block|}
block|}
end_class

end_unit

