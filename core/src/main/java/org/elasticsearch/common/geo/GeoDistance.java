begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Geo distance calculation.  */
end_comment

begin_enum
DECL|enum|GeoDistance
specifier|public
enum|enum
name|GeoDistance
implements|implements
name|Writeable
block|{
DECL|enum constant|PLANE
DECL|enum constant|ARC
name|PLANE
block|,
name|ARC
block|;
comment|/** Creates a GeoDistance instance from an input stream */
DECL|method|readFromStream
specifier|public
specifier|static
name|GeoDistance
name|readFromStream
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ord
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|ord
operator|<
literal|0
operator|||
name|ord
operator|>=
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown GeoDistance ordinal ["
operator|+
name|ord
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|GeoDistance
operator|.
name|values
argument_list|()
index|[
name|ord
index|]
return|;
block|}
comment|/** Writes an instance of a GeoDistance object to an output stream */
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get a {@link GeoDistance} according to a given name. Valid values are      *      *<ul>      *<li><b>plane</b> for<code>GeoDistance.PLANE</code></li>      *<li><b>arc</b> for<code>GeoDistance.ARC</code></li>      *</ul>      *      * @param name name of the {@link GeoDistance}      * @return a {@link GeoDistance}      */
DECL|method|fromString
specifier|public
specifier|static
name|GeoDistance
name|fromString
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"plane"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|PLANE
return|;
block|}
elseif|else
if|if
condition|(
literal|"arc"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|ARC
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No geo distance for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|/** compute the distance between two points using the selected algorithm (PLANE, ARC) */
DECL|method|calculate
specifier|public
name|double
name|calculate
parameter_list|(
name|double
name|srcLat
parameter_list|,
name|double
name|srcLon
parameter_list|,
name|double
name|dstLat
parameter_list|,
name|double
name|dstLon
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|PLANE
condition|)
block|{
return|return
name|DistanceUnit
operator|.
name|convert
argument_list|(
name|GeoUtils
operator|.
name|planeDistance
argument_list|(
name|srcLat
argument_list|,
name|srcLon
argument_list|,
name|dstLat
argument_list|,
name|dstLon
argument_list|)
argument_list|,
name|DistanceUnit
operator|.
name|METERS
argument_list|,
name|unit
argument_list|)
return|;
block|}
return|return
name|DistanceUnit
operator|.
name|convert
argument_list|(
name|GeoUtils
operator|.
name|arcDistance
argument_list|(
name|srcLat
argument_list|,
name|srcLon
argument_list|,
name|dstLat
argument_list|,
name|dstLon
argument_list|)
argument_list|,
name|DistanceUnit
operator|.
name|METERS
argument_list|,
name|unit
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

