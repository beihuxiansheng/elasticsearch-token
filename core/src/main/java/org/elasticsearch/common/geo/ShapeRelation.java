begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Enum representing the relationship between a Query / Filter Shape and indexed Shapes  * that will be used to determine if a Document should be matched or not  */
end_comment

begin_enum
DECL|enum|ShapeRelation
specifier|public
enum|enum
name|ShapeRelation
implements|implements
name|Writeable
argument_list|<
name|ShapeRelation
argument_list|>
block|{
DECL|enum constant|INTERSECTS
name|INTERSECTS
argument_list|(
literal|"intersects"
argument_list|)
block|,
DECL|enum constant|DISJOINT
name|DISJOINT
argument_list|(
literal|"disjoint"
argument_list|)
block|,
DECL|enum constant|WITHIN
name|WITHIN
argument_list|(
literal|"within"
argument_list|)
block|;
DECL|field|relationName
specifier|private
specifier|final
name|String
name|relationName
decl_stmt|;
DECL|method|ShapeRelation
name|ShapeRelation
parameter_list|(
name|String
name|relationName
parameter_list|)
block|{
name|this
operator|.
name|relationName
operator|=
name|relationName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|ShapeRelation
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ordinal
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordinal
operator|<
literal|0
operator|||
name|ordinal
operator|>=
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown ShapeRelation ordinal ["
operator|+
name|ordinal
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|values
argument_list|()
index|[
name|ordinal
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getRelationByName
specifier|public
specifier|static
name|ShapeRelation
name|getRelationByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
expr_stmt|;
for|for
control|(
name|ShapeRelation
name|relation
range|:
name|ShapeRelation
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|relation
operator|.
name|relationName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|relation
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getRelationName
specifier|public
name|String
name|getRelationName
parameter_list|()
block|{
return|return
name|relationName
return|;
block|}
block|}
end_enum

end_unit

