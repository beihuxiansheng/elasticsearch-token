begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.usage
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|usage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|usage
operator|.
name|NodeUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BaseRestHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A service to monitor usage of Elasticsearch features.  */
end_comment

begin_class
DECL|class|UsageService
specifier|public
class|class
name|UsageService
extends|extends
name|AbstractComponent
block|{
DECL|field|handlers
specifier|private
specifier|final
name|List
argument_list|<
name|BaseRestHandler
argument_list|>
name|handlers
decl_stmt|;
DECL|field|sinceTime
specifier|private
specifier|final
name|long
name|sinceTime
decl_stmt|;
annotation|@
name|Inject
DECL|method|UsageService
specifier|public
name|UsageService
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|handlers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|sinceTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**      * Add a REST handler to this service.      *      * @param handler      *            the {@link BaseRestHandler} to add to the usage service.      */
DECL|method|addRestHandler
specifier|public
name|void
name|addRestHandler
parameter_list|(
name|BaseRestHandler
name|handler
parameter_list|)
block|{
name|handlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the current usage statistics for this node.      *      * @param localNode      *            the {@link DiscoveryNode} for this node      * @param restActions      *            whether to include rest action usage in the returned      *            statistics      * @return the {@link NodeUsage} representing the usage statistics for this      *         node      */
DECL|method|getUsageStats
specifier|public
name|NodeUsage
name|getUsageStats
parameter_list|(
name|DiscoveryNode
name|localNode
parameter_list|,
name|boolean
name|restActions
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|restUsageMap
decl_stmt|;
if|if
condition|(
name|restActions
condition|)
block|{
name|restUsageMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|handlers
operator|.
name|forEach
argument_list|(
name|handler
lambda|->
block|{
name|long
name|usageCount
init|=
name|handler
operator|.
name|getUsageCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|usageCount
operator|>
literal|0
condition|)
block|{
name|restUsageMap
operator|.
name|put
argument_list|(
name|handler
operator|.
name|getName
argument_list|()
argument_list|,
name|usageCount
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|restUsageMap
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|NodeUsage
argument_list|(
name|localNode
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|sinceTime
argument_list|,
name|restUsageMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

