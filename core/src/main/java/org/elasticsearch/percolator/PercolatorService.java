begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ReaderUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
operator|.
name|ExtendedMemoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
operator|.
name|MemoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopScoreDocCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CloseableThreadLocal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
operator|.
name|PercolateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
operator|.
name|PercolateShardRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
operator|.
name|PercolateShardResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
operator|.
name|PageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fieldvisitor
operator|.
name|SingleFieldsVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
operator|.
name|PercolatorFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
operator|.
name|PercolatorQueriesRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|ParsedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|BucketCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|global
operator|.
name|GlobalAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|SiblingPipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
import|;
end_import

begin_class
DECL|class|PercolatorService
specifier|public
class|class
name|PercolatorService
extends|extends
name|AbstractComponent
block|{
DECL|field|NO_SCORE
specifier|public
specifier|final
specifier|static
name|float
name|NO_SCORE
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
DECL|field|TYPE_NAME
specifier|public
specifier|final
specifier|static
name|String
name|TYPE_NAME
init|=
literal|".percolator"
decl_stmt|;
DECL|field|bigArrays
specifier|private
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|highlightPhase
specifier|private
specifier|final
name|HighlightPhase
name|highlightPhase
decl_stmt|;
DECL|field|aggregationPhase
specifier|private
specifier|final
name|AggregationPhase
name|aggregationPhase
decl_stmt|;
DECL|field|pageCacheRecycler
specifier|private
specifier|final
name|PageCacheRecycler
name|pageCacheRecycler
decl_stmt|;
DECL|field|parseFieldMatcher
specifier|private
specifier|final
name|ParseFieldMatcher
name|parseFieldMatcher
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|CloseableThreadLocal
argument_list|<
name|MemoryIndex
argument_list|>
name|cache
decl_stmt|;
DECL|field|indexNameExpressionResolver
specifier|private
specifier|final
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
decl_stmt|;
DECL|field|percolateDocumentParser
specifier|private
specifier|final
name|PercolateDocumentParser
name|percolateDocumentParser
decl_stmt|;
DECL|field|single
specifier|private
specifier|final
name|PercolatorIndex
name|single
decl_stmt|;
DECL|field|multi
specifier|private
specifier|final
name|PercolatorIndex
name|multi
decl_stmt|;
annotation|@
name|Inject
DECL|method|PercolatorService
specifier|public
name|PercolatorService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|PageCacheRecycler
name|pageCacheRecycler
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|HighlightPhase
name|highlightPhase
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|AggregationPhase
name|aggregationPhase
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|PercolateDocumentParser
name|percolateDocumentParser
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexNameExpressionResolver
operator|=
name|indexNameExpressionResolver
expr_stmt|;
name|this
operator|.
name|percolateDocumentParser
operator|=
name|percolateDocumentParser
expr_stmt|;
name|this
operator|.
name|parseFieldMatcher
operator|=
operator|new
name|ParseFieldMatcher
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|pageCacheRecycler
operator|=
name|pageCacheRecycler
expr_stmt|;
name|this
operator|.
name|bigArrays
operator|=
name|bigArrays
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
name|this
operator|.
name|aggregationPhase
operator|=
name|aggregationPhase
expr_stmt|;
name|this
operator|.
name|highlightPhase
operator|=
name|highlightPhase
expr_stmt|;
specifier|final
name|long
name|maxReuseBytes
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"indices.memory.memory_index.size_per_thread"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|1
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|cache
operator|=
operator|new
name|CloseableThreadLocal
argument_list|<
name|MemoryIndex
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|MemoryIndex
name|initialValue
parameter_list|()
block|{
comment|// TODO: should we expose payloads as an option? should offsets be turned on always?
return|return
operator|new
name|ExtendedMemoryIndex
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|maxReuseBytes
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|single
operator|=
operator|new
name|SingleDocumentPercolatorIndex
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|multi
operator|=
operator|new
name|MultiDocumentPercolatorIndex
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
DECL|method|reduce
specifier|public
name|ReduceResult
name|reduce
parameter_list|(
name|boolean
name|onlyCount
parameter_list|,
name|List
argument_list|<
name|PercolateShardResponse
argument_list|>
name|shardResponses
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|onlyCount
condition|)
block|{
name|long
name|finalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PercolateShardResponse
name|shardResponse
range|:
name|shardResponses
control|)
block|{
name|finalCount
operator|+=
name|shardResponse
operator|.
name|topDocs
argument_list|()
operator|.
name|totalHits
expr_stmt|;
block|}
name|InternalAggregations
name|reducedAggregations
init|=
name|reduceAggregations
argument_list|(
name|shardResponses
argument_list|)
decl_stmt|;
return|return
operator|new
name|PercolatorService
operator|.
name|ReduceResult
argument_list|(
name|finalCount
argument_list|,
name|reducedAggregations
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|requestedSize
init|=
name|shardResponses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|requestedSize
argument_list|()
decl_stmt|;
name|TopDocs
index|[]
name|shardResults
init|=
operator|new
name|TopDocs
index|[
name|shardResponses
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|long
name|foundMatches
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TopDocs
name|shardResult
init|=
name|shardResponses
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|foundMatches
operator|+=
name|shardResult
operator|.
name|totalHits
expr_stmt|;
name|shardResults
index|[
name|i
index|]
operator|=
name|shardResult
expr_stmt|;
block|}
name|TopDocs
name|merged
init|=
name|TopDocs
operator|.
name|merge
argument_list|(
name|requestedSize
argument_list|,
name|shardResults
argument_list|)
decl_stmt|;
name|PercolateResponse
operator|.
name|Match
index|[]
name|matches
init|=
operator|new
name|PercolateResponse
operator|.
name|Match
index|[
name|merged
operator|.
name|scoreDocs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|merged
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|doc
init|=
name|merged
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
name|PercolateShardResponse
name|shardResponse
init|=
name|shardResponses
operator|.
name|get
argument_list|(
name|doc
operator|.
name|shardIndex
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|shardResponse
operator|.
name|ids
argument_list|()
operator|.
name|get
argument_list|(
name|doc
operator|.
name|doc
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|hl
init|=
name|shardResponse
operator|.
name|hls
argument_list|()
operator|.
name|get
argument_list|(
name|doc
operator|.
name|doc
argument_list|)
decl_stmt|;
name|matches
index|[
name|i
index|]
operator|=
operator|new
name|PercolateResponse
operator|.
name|Match
argument_list|(
operator|new
name|Text
argument_list|(
name|shardResponse
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|id
argument_list|)
argument_list|,
name|doc
operator|.
name|score
argument_list|,
name|hl
argument_list|)
expr_stmt|;
block|}
name|InternalAggregations
name|reducedAggregations
init|=
name|reduceAggregations
argument_list|(
name|shardResponses
argument_list|)
decl_stmt|;
return|return
operator|new
name|PercolatorService
operator|.
name|ReduceResult
argument_list|(
name|foundMatches
argument_list|,
name|matches
argument_list|,
name|reducedAggregations
argument_list|)
return|;
block|}
block|}
DECL|method|percolate
specifier|public
name|PercolateShardResponse
name|percolate
parameter_list|(
name|PercolateShardRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexService
name|percolateIndexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|percolateIndexService
operator|.
name|getShard
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|indexShard
operator|.
name|readAllowed
argument_list|()
expr_stmt|;
comment|// check if we can read the shard...
name|PercolatorQueriesRegistry
name|percolateQueryRegistry
init|=
name|indexShard
operator|.
name|percolateRegistry
argument_list|()
decl_stmt|;
name|percolateQueryRegistry
operator|.
name|prePercolate
argument_list|()
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|// TODO: The filteringAliases should be looked up at the coordinating node and serialized with all shard request,
comment|// just like is done in other apis.
name|String
index|[]
name|filteringAliases
init|=
name|indexNameExpressionResolver
operator|.
name|filteringAliases
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|,
name|indexShard
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|indices
argument_list|()
argument_list|)
decl_stmt|;
name|Query
name|aliasFilter
init|=
name|percolateIndexService
operator|.
name|aliasFilter
argument_list|(
name|indexShard
operator|.
name|getQueryShardContext
argument_list|()
argument_list|,
name|filteringAliases
argument_list|)
decl_stmt|;
name|SearchShardTarget
name|searchShardTarget
init|=
operator|new
name|SearchShardTarget
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PercolateContext
name|context
init|=
operator|new
name|PercolateContext
argument_list|(
name|request
argument_list|,
name|searchShardTarget
argument_list|,
name|indexShard
argument_list|,
name|percolateIndexService
argument_list|,
name|pageCacheRecycler
argument_list|,
name|bigArrays
argument_list|,
name|scriptService
argument_list|,
name|aliasFilter
argument_list|,
name|parseFieldMatcher
argument_list|)
decl_stmt|;
name|SearchContext
operator|.
name|setCurrent
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|ParsedDocument
name|parsedDocument
init|=
name|percolateDocumentParser
operator|.
name|parse
argument_list|(
name|request
argument_list|,
name|context
argument_list|,
name|percolateIndexService
operator|.
name|mapperService
argument_list|()
argument_list|,
name|percolateIndexService
operator|.
name|getQueryShardContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|PercolateShardResponse
argument_list|(
name|Lucene
operator|.
name|EMPTY_TOP_DOCS
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|context
argument_list|)
return|;
block|}
if|if
condition|(
name|context
operator|.
name|size
argument_list|()
operator|<
literal|0
condition|)
block|{
name|context
operator|.
name|size
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// parse the source either into one MemoryIndex, if it is a single document or index multiple docs if nested
name|PercolatorIndex
name|percolatorIndex
decl_stmt|;
name|DocumentMapper
name|documentMapper
init|=
name|indexShard
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
name|request
operator|.
name|documentType
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isNested
init|=
name|documentMapper
operator|!=
literal|null
operator|&&
name|documentMapper
operator|.
name|hasNestedObjects
argument_list|()
decl_stmt|;
if|if
condition|(
name|parsedDocument
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
assert|assert
name|isNested
assert|;
name|percolatorIndex
operator|=
name|multi
expr_stmt|;
block|}
else|else
block|{
name|percolatorIndex
operator|=
name|single
expr_stmt|;
block|}
name|percolatorIndex
operator|.
name|prepare
argument_list|(
name|context
argument_list|,
name|parsedDocument
argument_list|)
expr_stmt|;
name|BucketCollector
name|aggregatorCollector
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|aggregations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|AggregationContext
name|aggregationContext
init|=
operator|new
name|AggregationContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|context
operator|.
name|aggregations
argument_list|()
operator|.
name|aggregationContext
argument_list|(
name|aggregationContext
argument_list|)
expr_stmt|;
name|Aggregator
index|[]
name|aggregators
init|=
name|context
operator|.
name|aggregations
argument_list|()
operator|.
name|factories
argument_list|()
operator|.
name|createTopLevelAggregators
argument_list|(
name|aggregationContext
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Aggregator
argument_list|>
name|aggregatorCollectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aggregators
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|aggregators
index|[
name|i
index|]
operator|instanceof
name|GlobalAggregator
operator|)
condition|)
block|{
name|Aggregator
name|aggregator
init|=
name|aggregators
index|[
name|i
index|]
decl_stmt|;
name|aggregatorCollectors
operator|.
name|add
argument_list|(
name|aggregator
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|aggregations
argument_list|()
operator|.
name|aggregators
argument_list|(
name|aggregators
argument_list|)
expr_stmt|;
name|aggregatorCollector
operator|=
name|BucketCollector
operator|.
name|wrap
argument_list|(
name|aggregatorCollectors
argument_list|)
expr_stmt|;
name|aggregatorCollector
operator|.
name|preCollection
argument_list|()
expr_stmt|;
block|}
name|PercolatorQueriesRegistry
name|queriesRegistry
init|=
name|indexShard
operator|.
name|percolateRegistry
argument_list|()
decl_stmt|;
return|return
name|doPercolate
argument_list|(
name|context
argument_list|,
name|queriesRegistry
argument_list|,
name|aggregationPhase
argument_list|,
name|aggregatorCollector
argument_list|,
name|highlightPhase
argument_list|)
return|;
block|}
finally|finally
block|{
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
name|percolateQueryRegistry
operator|.
name|postPercolate
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
comment|// moved the core percolation logic to a pck protected method to make testing easier:
DECL|method|doPercolate
specifier|static
name|PercolateShardResponse
name|doPercolate
parameter_list|(
name|PercolateContext
name|context
parameter_list|,
name|PercolatorQueriesRegistry
name|queriesRegistry
parameter_list|,
name|AggregationPhase
name|aggregationPhase
parameter_list|,
annotation|@
name|Nullable
name|BucketCollector
name|aggregatorCollector
parameter_list|,
name|HighlightPhase
name|highlightPhase
parameter_list|)
throws|throws
name|IOException
block|{
name|PercolatorQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|PercolatorQuery
operator|.
name|Builder
argument_list|(
name|context
operator|.
name|docSearcher
argument_list|()
argument_list|,
name|queriesRegistry
operator|.
name|getPercolateQueries
argument_list|()
argument_list|,
name|context
operator|.
name|percolatorTypeFilter
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|queriesRegistry
operator|.
name|indexSettings
argument_list|()
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsVersion
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
literal|null
argument_list|)
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_3_0_0
argument_list|)
condition|)
block|{
name|builder
operator|.
name|extractQueryTermsQuery
argument_list|(
name|PercolatorFieldMapper
operator|.
name|EXTRACTED_TERMS_FULL_FIELD_NAME
argument_list|,
name|PercolatorFieldMapper
operator|.
name|UNKNOWN_QUERY_FULL_FIELD_NAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|percolateQuery
argument_list|()
operator|!=
literal|null
operator|||
name|context
operator|.
name|aliasFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|percolateQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bq
operator|.
name|add
argument_list|(
name|context
operator|.
name|percolateQuery
argument_list|()
argument_list|,
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|aliasFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bq
operator|.
name|add
argument_list|(
name|context
operator|.
name|aliasFilter
argument_list|()
argument_list|,
name|FILTER
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setPercolateQuery
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PercolatorQuery
name|percolatorQuery
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isOnlyCount
argument_list|()
operator|||
name|context
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|TotalHitCountCollector
name|collector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
name|percolatorQuery
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|collector
argument_list|,
name|aggregatorCollector
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|aggregatorCollector
operator|!=
literal|null
condition|)
block|{
name|aggregatorCollector
operator|.
name|postCollection
argument_list|()
expr_stmt|;
name|aggregationPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PercolateShardResponse
argument_list|(
operator|new
name|TopDocs
argument_list|(
name|collector
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|Lucene
operator|.
name|EMPTY_SCORE_DOCS
argument_list|,
literal|0f
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|context
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|size
init|=
name|context
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
condition|)
block|{
comment|// prevent easy OOM if more than the total number of docs that exist is requested...
name|size
operator|=
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
block|}
name|TopScoreDocCollector
name|collector
init|=
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
name|percolatorQuery
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|collector
argument_list|,
name|aggregatorCollector
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|aggregatorCollector
operator|!=
literal|null
condition|)
block|{
name|aggregatorCollector
operator|.
name|postCollection
argument_list|()
expr_stmt|;
name|aggregationPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|TopDocs
name|topDocs
init|=
name|collector
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
argument_list|>
name|hls
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|scoreDoc
range|:
name|topDocs
operator|.
name|scoreDocs
control|)
block|{
if|if
condition|(
name|context
operator|.
name|trackScores
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// No sort or tracking scores was provided, so use special value to indicate to not show the scores:
name|scoreDoc
operator|.
name|score
operator|=
name|NO_SCORE
expr_stmt|;
block|}
name|int
name|segmentIdx
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|,
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
argument_list|)
decl_stmt|;
name|LeafReaderContext
name|atomicReaderContext
init|=
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
name|segmentIdx
argument_list|)
decl_stmt|;
specifier|final
name|int
name|segmentDocId
init|=
name|scoreDoc
operator|.
name|doc
operator|-
name|atomicReaderContext
operator|.
name|docBase
decl_stmt|;
name|SingleFieldsVisitor
name|fieldsVisitor
init|=
operator|new
name|SingleFieldsVisitor
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|atomicReaderContext
operator|.
name|reader
argument_list|()
operator|.
name|document
argument_list|(
name|segmentDocId
argument_list|,
name|fieldsVisitor
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|fieldsVisitor
operator|.
name|uid
argument_list|()
operator|.
name|id
argument_list|()
decl_stmt|;
name|ids
operator|.
name|put
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|highlight
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Query
name|query
init|=
name|queriesRegistry
operator|.
name|getPercolateQueries
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|parsedQuery
argument_list|(
operator|new
name|ParsedQuery
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|hitContext
argument_list|()
operator|.
name|cache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|highlightPhase
operator|.
name|hitExecute
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|hitContext
argument_list|()
argument_list|)
expr_stmt|;
name|hls
operator|.
name|put
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|,
name|context
operator|.
name|hitContext
argument_list|()
operator|.
name|hit
argument_list|()
operator|.
name|getHighlightFields
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PercolateShardResponse
argument_list|(
name|topDocs
argument_list|,
name|ids
argument_list|,
name|hls
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|reduceAggregations
specifier|private
name|InternalAggregations
name|reduceAggregations
parameter_list|(
name|List
argument_list|<
name|PercolateShardResponse
argument_list|>
name|shardResults
parameter_list|)
block|{
if|if
condition|(
name|shardResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|aggregations
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|InternalAggregations
argument_list|>
name|aggregationsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|shardResults
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PercolateShardResponse
name|shardResult
range|:
name|shardResults
control|)
block|{
name|aggregationsList
operator|.
name|add
argument_list|(
name|shardResult
operator|.
name|aggregations
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|InternalAggregations
name|aggregations
init|=
name|InternalAggregations
operator|.
name|reduce
argument_list|(
name|aggregationsList
argument_list|,
operator|new
name|InternalAggregation
operator|.
name|ReduceContext
argument_list|(
name|bigArrays
argument_list|,
name|scriptService
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggregations
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|SiblingPipelineAggregator
argument_list|>
name|pipelineAggregators
init|=
name|shardResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|pipelineAggregators
argument_list|()
decl_stmt|;
if|if
condition|(
name|pipelineAggregators
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|newAggs
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|aggregations
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
parameter_list|(
name|p
parameter_list|)
lambda|->
block|{
return|return
operator|(
name|InternalAggregation
operator|)
name|p
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SiblingPipelineAggregator
name|pipelineAggregator
range|:
name|pipelineAggregators
control|)
block|{
name|InternalAggregation
name|newAgg
init|=
name|pipelineAggregator
operator|.
name|doReduce
argument_list|(
operator|new
name|InternalAggregations
argument_list|(
name|newAggs
argument_list|)
argument_list|,
operator|new
name|InternalAggregation
operator|.
name|ReduceContext
argument_list|(
name|bigArrays
argument_list|,
name|scriptService
argument_list|)
argument_list|)
decl_stmt|;
name|newAggs
operator|.
name|add
argument_list|(
name|newAgg
argument_list|)
expr_stmt|;
block|}
name|aggregations
operator|=
operator|new
name|InternalAggregations
argument_list|(
name|newAggs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aggregations
return|;
block|}
DECL|class|ReduceResult
specifier|public
specifier|final
specifier|static
class|class
name|ReduceResult
block|{
DECL|field|count
specifier|private
specifier|final
name|long
name|count
decl_stmt|;
DECL|field|matches
specifier|private
specifier|final
name|PercolateResponse
operator|.
name|Match
index|[]
name|matches
decl_stmt|;
DECL|field|reducedAggregations
specifier|private
specifier|final
name|InternalAggregations
name|reducedAggregations
decl_stmt|;
DECL|method|ReduceResult
name|ReduceResult
parameter_list|(
name|long
name|count
parameter_list|,
name|PercolateResponse
operator|.
name|Match
index|[]
name|matches
parameter_list|,
name|InternalAggregations
name|reducedAggregations
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|matches
operator|=
name|matches
expr_stmt|;
name|this
operator|.
name|reducedAggregations
operator|=
name|reducedAggregations
expr_stmt|;
block|}
DECL|method|ReduceResult
specifier|public
name|ReduceResult
parameter_list|(
name|long
name|count
parameter_list|,
name|InternalAggregations
name|reducedAggregations
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|matches
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|reducedAggregations
operator|=
name|reducedAggregations
expr_stmt|;
block|}
DECL|method|count
specifier|public
name|long
name|count
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|matches
specifier|public
name|PercolateResponse
operator|.
name|Match
index|[]
name|matches
parameter_list|()
block|{
return|return
name|matches
return|;
block|}
DECL|method|reducedAggregations
specifier|public
name|InternalAggregations
name|reducedAggregations
parameter_list|()
block|{
return|return
name|reducedAggregations
return|;
block|}
block|}
block|}
end_class

end_unit

