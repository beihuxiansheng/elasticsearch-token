begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
DECL|class|ProcessorsRegistry
specifier|public
specifier|final
class|class
name|ProcessorsRegistry
implements|implements
name|Closeable
block|{
DECL|field|processorFactories
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|processorFactories
decl_stmt|;
DECL|field|templateService
specifier|private
specifier|final
name|TemplateService
name|templateService
decl_stmt|;
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|method|ProcessorsRegistry
specifier|private
name|ProcessorsRegistry
parameter_list|(
name|ScriptService
name|scriptService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|ProcessorsRegistry
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|providers
parameter_list|)
block|{
name|this
operator|.
name|templateService
operator|=
operator|new
name|InternalTemplateService
argument_list|(
name|scriptService
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|processorFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|ProcessorsRegistry
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|providers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|processorFactories
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|apply
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|processorFactories
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|processorFactories
argument_list|)
expr_stmt|;
block|}
DECL|method|getTemplateService
specifier|public
name|TemplateService
name|getTemplateService
parameter_list|()
block|{
return|return
name|templateService
return|;
block|}
DECL|method|getScriptService
specifier|public
name|ScriptService
name|getScriptService
parameter_list|()
block|{
return|return
name|scriptService
return|;
block|}
DECL|method|getClusterService
specifier|public
name|ClusterService
name|getClusterService
parameter_list|()
block|{
return|return
name|clusterService
return|;
block|}
DECL|method|getProcessorFactory
specifier|public
name|Processor
operator|.
name|Factory
name|getProcessorFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|processorFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Closeable
argument_list|>
name|closeables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Processor
operator|.
name|Factory
name|factory
range|:
name|processorFactories
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|factory
operator|instanceof
name|Closeable
condition|)
block|{
name|closeables
operator|.
name|add
argument_list|(
operator|(
name|Closeable
operator|)
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|closeables
argument_list|)
expr_stmt|;
block|}
comment|// For testing:
DECL|method|getProcessorFactories
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|getProcessorFactories
parameter_list|()
block|{
return|return
name|processorFactories
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
DECL|field|providers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|ProcessorsRegistry
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|providers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**          * Adds a processor factory under a specific name.          */
DECL|method|registerProcessor
specifier|public
name|void
name|registerProcessor
parameter_list|(
name|String
name|name
parameter_list|,
name|Function
argument_list|<
name|ProcessorsRegistry
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|<
name|?
argument_list|>
argument_list|>
name|provider
parameter_list|)
block|{
name|Function
argument_list|<
name|ProcessorsRegistry
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|<
name|?
argument_list|>
argument_list|>
name|previous
init|=
name|this
operator|.
name|providers
operator|.
name|putIfAbsent
argument_list|(
name|name
argument_list|,
name|provider
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Processor factory already registered for name ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|build
specifier|public
name|ProcessorsRegistry
name|build
parameter_list|(
name|ScriptService
name|scriptService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|)
block|{
return|return
operator|new
name|ProcessorsRegistry
argument_list|(
name|scriptService
argument_list|,
name|clusterService
argument_list|,
name|providers
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

