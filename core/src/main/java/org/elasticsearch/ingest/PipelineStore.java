begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ingest
operator|.
name|DeletePipelineRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ingest
operator|.
name|PutPipelineRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ingest
operator|.
name|WritePipelineResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|AckedClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|core
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|core
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|core
operator|.
name|TemplateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
DECL|class|PipelineStore
specifier|public
class|class
name|PipelineStore
extends|extends
name|AbstractComponent
implements|implements
name|Closeable
implements|,
name|ClusterStateListener
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|factory
specifier|private
specifier|final
name|Pipeline
operator|.
name|Factory
name|factory
init|=
operator|new
name|Pipeline
operator|.
name|Factory
argument_list|()
decl_stmt|;
DECL|field|processorFactoryRegistry
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|processorFactoryRegistry
decl_stmt|;
comment|// Ideally this should be in IngestMetadata class, but we don't have the processor factories around there.
comment|// We know of all the processor factories when a node with all its plugin have been initialized. Also some
comment|// processor factories rely on other node services. Custom metadata is statically registered when classes
comment|// are loaded, so in the cluster state we just save the pipeline config and here we keep the actual pipelines around.
DECL|field|pipelines
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Pipeline
argument_list|>
name|pipelines
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|PipelineStore
specifier|public
name|PipelineStore
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|clusterService
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|buildProcessorFactoryRegistry
specifier|public
name|void
name|buildProcessorFactoryRegistry
parameter_list|(
name|ProcessorsRegistry
name|processorsRegistry
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|processorFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TemplateService
name|templateService
init|=
operator|new
name|InternalTemplateService
argument_list|(
name|scriptService
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|TemplateService
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|processorsRegistry
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Processor
operator|.
name|Factory
name|processorFactory
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|apply
argument_list|(
name|templateService
argument_list|)
decl_stmt|;
name|processorFactories
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|processorFactory
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|processorFactoryRegistry
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|processorFactories
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO: When org.elasticsearch.node.Node can close Closable instances we should try to remove this code,
comment|// since any wired closable should be able to close itself
name|List
argument_list|<
name|Closeable
argument_list|>
name|closeables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Processor
operator|.
name|Factory
name|factory
range|:
name|processorFactoryRegistry
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|factory
operator|instanceof
name|Closeable
condition|)
block|{
name|closeables
operator|.
name|add
argument_list|(
operator|(
name|Closeable
operator|)
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|closeables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|innerUpdatePipelines
argument_list|(
name|event
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|innerUpdatePipelines
name|void
name|innerUpdatePipelines
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|IngestMetadata
name|ingestMetadata
init|=
name|state
operator|.
name|getMetaData
argument_list|()
operator|.
name|custom
argument_list|(
name|IngestMetadata
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ingestMetadata
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Pipeline
argument_list|>
name|pipelines
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PipelineConfiguration
name|pipeline
range|:
name|ingestMetadata
operator|.
name|getPipelines
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|pipelines
operator|.
name|put
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|constructPipeline
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|pipeline
operator|.
name|getConfigAsMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|pipelines
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|pipelines
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes the pipeline specified by id in the request.      */
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|DeletePipelineRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|WritePipelineResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"delete-pipeline-"
operator|+
name|request
operator|.
name|id
argument_list|()
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|<
name|WritePipelineResponse
argument_list|>
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|WritePipelineResponse
name|newResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
return|return
operator|new
name|WritePipelineResponse
argument_list|(
name|acknowledged
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|innerDelete
argument_list|(
name|request
argument_list|,
name|currentState
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|innerDelete
name|ClusterState
name|innerDelete
parameter_list|(
name|DeletePipelineRequest
name|request
parameter_list|,
name|ClusterState
name|currentState
parameter_list|)
block|{
name|IngestMetadata
name|currentIngestMetadata
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|custom
argument_list|(
name|IngestMetadata
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentIngestMetadata
operator|==
literal|null
condition|)
block|{
return|return
name|currentState
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PipelineConfiguration
argument_list|>
name|pipelines
init|=
name|currentIngestMetadata
operator|.
name|getPipelines
argument_list|()
decl_stmt|;
if|if
condition|(
name|pipelines
operator|.
name|containsKey
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"pipeline [{}] is missing"
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|pipelines
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|pipelines
argument_list|)
expr_stmt|;
name|pipelines
operator|.
name|remove
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterState
operator|.
name|Builder
name|newState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
decl_stmt|;
name|newState
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|getMetaData
argument_list|()
argument_list|)
operator|.
name|putCustom
argument_list|(
name|IngestMetadata
operator|.
name|TYPE
argument_list|,
operator|new
name|IngestMetadata
argument_list|(
name|pipelines
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newState
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**      * Stores the specified pipeline definition in the request.      *      * @throws IllegalArgumentException If the pipeline holds incorrect configuration      */
DECL|method|put
specifier|public
name|void
name|put
parameter_list|(
name|PutPipelineRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|WritePipelineResponse
argument_list|>
name|listener
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
try|try
block|{
comment|// validates the pipeline and processor configuration before submitting a cluster update task:
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pipelineConfig
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|request
operator|.
name|getSource
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|v2
argument_list|()
decl_stmt|;
name|constructPipeline
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|pipelineConfig
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid pipeline configuration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"put-pipeline-"
operator|+
name|request
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|<
name|WritePipelineResponse
argument_list|>
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|WritePipelineResponse
name|newResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
return|return
operator|new
name|WritePipelineResponse
argument_list|(
name|acknowledged
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|innerPut
argument_list|(
name|request
argument_list|,
name|currentState
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|innerPut
name|ClusterState
name|innerPut
parameter_list|(
name|PutPipelineRequest
name|request
parameter_list|,
name|ClusterState
name|currentState
parameter_list|)
block|{
name|IngestMetadata
name|currentIngestMetadata
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|custom
argument_list|(
name|IngestMetadata
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PipelineConfiguration
argument_list|>
name|pipelines
decl_stmt|;
if|if
condition|(
name|currentIngestMetadata
operator|!=
literal|null
condition|)
block|{
name|pipelines
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|currentIngestMetadata
operator|.
name|getPipelines
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pipelines
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|pipelines
operator|.
name|put
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|PipelineConfiguration
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|request
operator|.
name|getSource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
operator|.
name|Builder
name|newState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
decl_stmt|;
name|newState
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|getMetaData
argument_list|()
argument_list|)
operator|.
name|putCustom
argument_list|(
name|IngestMetadata
operator|.
name|TYPE
argument_list|,
operator|new
name|IngestMetadata
argument_list|(
name|pipelines
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newState
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Returns the pipeline by the specified id      */
DECL|method|get
specifier|public
name|Pipeline
name|get
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|pipelines
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|getProcessorFactoryRegistry
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|getProcessorFactoryRegistry
parameter_list|()
block|{
return|return
name|processorFactoryRegistry
return|;
block|}
comment|/**      * @return pipeline configuration specified by id. If multiple ids or wildcards are specified multiple pipelines      * may be returned      */
comment|// Returning PipelineConfiguration instead of Pipeline, because Pipeline and Processor interface don't
comment|// know how to serialize themselves.
DECL|method|getPipelines
specifier|public
name|List
argument_list|<
name|PipelineConfiguration
argument_list|>
name|getPipelines
parameter_list|(
name|String
modifier|...
name|ids
parameter_list|)
block|{
name|IngestMetadata
name|ingestMetadata
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|custom
argument_list|(
name|IngestMetadata
operator|.
name|TYPE
argument_list|)
decl_stmt|;
return|return
name|innerGetPipelines
argument_list|(
name|ingestMetadata
argument_list|,
name|ids
argument_list|)
return|;
block|}
DECL|method|innerGetPipelines
name|List
argument_list|<
name|PipelineConfiguration
argument_list|>
name|innerGetPipelines
parameter_list|(
name|IngestMetadata
name|ingestMetadata
parameter_list|,
name|String
modifier|...
name|ids
parameter_list|)
block|{
if|if
condition|(
name|ingestMetadata
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|PipelineConfiguration
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ids
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|id
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PipelineConfiguration
argument_list|>
name|entry
range|:
name|ingestMetadata
operator|.
name|getPipelines
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|id
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|PipelineConfiguration
name|pipeline
init|=
name|ingestMetadata
operator|.
name|getPipelines
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipeline
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|constructPipeline
specifier|private
name|Pipeline
name|constructPipeline
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|factory
operator|.
name|create
argument_list|(
name|id
argument_list|,
name|config
argument_list|,
name|processorFactoryRegistry
argument_list|)
return|;
block|}
block|}
end_class

end_unit

