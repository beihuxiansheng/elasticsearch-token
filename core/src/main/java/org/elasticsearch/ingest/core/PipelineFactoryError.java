begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.core
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|ConfigurationPropertyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|PipelineFactoryError
specifier|public
class|class
name|PipelineFactoryError
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|reason
specifier|private
name|String
name|reason
decl_stmt|;
DECL|field|processorType
specifier|private
name|String
name|processorType
decl_stmt|;
DECL|field|processorTag
specifier|private
name|String
name|processorTag
decl_stmt|;
DECL|field|processorPropertyName
specifier|private
name|String
name|processorPropertyName
decl_stmt|;
DECL|method|PipelineFactoryError
specifier|public
name|PipelineFactoryError
parameter_list|()
block|{      }
DECL|method|PipelineFactoryError
specifier|public
name|PipelineFactoryError
parameter_list|(
name|ConfigurationPropertyException
name|e
parameter_list|)
block|{
name|this
operator|.
name|reason
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|this
operator|.
name|processorType
operator|=
name|e
operator|.
name|getProcessorType
argument_list|()
expr_stmt|;
name|this
operator|.
name|processorTag
operator|=
name|e
operator|.
name|getProcessorTag
argument_list|()
expr_stmt|;
name|this
operator|.
name|processorPropertyName
operator|=
name|e
operator|.
name|getPropertyName
argument_list|()
expr_stmt|;
block|}
DECL|method|PipelineFactoryError
specifier|public
name|PipelineFactoryError
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|this
operator|.
name|reason
operator|=
literal|"Constructing Pipeline failed:"
operator|+
name|reason
expr_stmt|;
block|}
DECL|method|getReason
specifier|public
name|String
name|getReason
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
DECL|method|getProcessorTag
specifier|public
name|String
name|getProcessorTag
parameter_list|()
block|{
return|return
name|processorTag
return|;
block|}
DECL|method|getProcessorPropertyName
specifier|public
name|String
name|getProcessorPropertyName
parameter_list|()
block|{
return|return
name|processorPropertyName
return|;
block|}
DECL|method|getProcessorType
specifier|public
name|String
name|getProcessorType
parameter_list|()
block|{
return|return
name|processorType
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|reason
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|processorType
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|processorTag
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|processorPropertyName
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|processorType
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|processorTag
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|processorPropertyName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|processorType
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|,
name|processorTag
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"reason"
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"property_name"
argument_list|,
name|processorPropertyName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

