begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|//TODO(simonw): can all these classes go into org.elasticsearch.ingest?
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.core
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * A Processor that executes a list of other "processors". It executes a separate list of  * "onFailureProcessors" when any of the processors throw an {@link Exception}.  */
end_comment

begin_class
DECL|class|CompoundProcessor
specifier|public
class|class
name|CompoundProcessor
implements|implements
name|Processor
block|{
DECL|field|ON_FAILURE_MESSAGE_FIELD
specifier|static
specifier|final
name|String
name|ON_FAILURE_MESSAGE_FIELD
init|=
literal|"on_failure_message"
decl_stmt|;
DECL|field|ON_FAILURE_PROCESSOR_FIELD
specifier|static
specifier|final
name|String
name|ON_FAILURE_PROCESSOR_FIELD
init|=
literal|"on_failure_processor"
decl_stmt|;
DECL|field|processors
specifier|private
specifier|final
name|List
argument_list|<
name|Processor
argument_list|>
name|processors
decl_stmt|;
DECL|field|onFailureProcessors
specifier|private
specifier|final
name|List
argument_list|<
name|Processor
argument_list|>
name|onFailureProcessors
decl_stmt|;
DECL|method|CompoundProcessor
specifier|public
name|CompoundProcessor
parameter_list|(
name|Processor
modifier|...
name|processor
parameter_list|)
block|{
name|this
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|processor
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|CompoundProcessor
specifier|public
name|CompoundProcessor
parameter_list|(
name|List
argument_list|<
name|Processor
argument_list|>
name|processors
parameter_list|,
name|List
argument_list|<
name|Processor
argument_list|>
name|onFailureProcessors
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|processors
operator|=
name|processors
expr_stmt|;
name|this
operator|.
name|onFailureProcessors
operator|=
name|onFailureProcessors
expr_stmt|;
block|}
DECL|method|getOnFailureProcessors
specifier|public
name|List
argument_list|<
name|Processor
argument_list|>
name|getOnFailureProcessors
parameter_list|()
block|{
return|return
name|onFailureProcessors
return|;
block|}
DECL|method|getProcessors
specifier|public
name|List
argument_list|<
name|Processor
argument_list|>
name|getProcessors
parameter_list|()
block|{
return|return
name|processors
return|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
literal|"compound"
return|;
block|}
annotation|@
name|Override
DECL|method|getTag
specifier|public
name|String
name|getTag
parameter_list|()
block|{
return|return
literal|"compound-processor-"
operator|+
name|Objects
operator|.
name|hash
argument_list|(
name|processors
argument_list|,
name|onFailureProcessors
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|IngestDocument
name|ingestDocument
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Processor
name|processor
range|:
name|processors
control|)
block|{
try|try
block|{
name|processor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|onFailureProcessors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|executeOnFailure
argument_list|(
name|ingestDocument
argument_list|,
name|e
argument_list|,
name|processor
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
DECL|method|executeOnFailure
name|void
name|executeOnFailure
parameter_list|(
name|IngestDocument
name|ingestDocument
parameter_list|,
name|Exception
name|cause
parameter_list|,
name|String
name|failedProcessorType
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ingestMetadata
init|=
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
decl_stmt|;
try|try
block|{
name|ingestMetadata
operator|.
name|put
argument_list|(
name|ON_FAILURE_MESSAGE_FIELD
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ingestMetadata
operator|.
name|put
argument_list|(
name|ON_FAILURE_PROCESSOR_FIELD
argument_list|,
name|failedProcessorType
argument_list|)
expr_stmt|;
for|for
control|(
name|Processor
name|processor
range|:
name|onFailureProcessors
control|)
block|{
name|processor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ingestMetadata
operator|.
name|remove
argument_list|(
name|ON_FAILURE_MESSAGE_FIELD
argument_list|)
expr_stmt|;
name|ingestMetadata
operator|.
name|remove
argument_list|(
name|ON_FAILURE_PROCESSOR_FIELD
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

