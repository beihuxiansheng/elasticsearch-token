begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|IngestStats
specifier|public
class|class
name|IngestStats
implements|implements
name|Writeable
argument_list|<
name|IngestStats
argument_list|>
implements|,
name|ToXContent
block|{
DECL|field|totalStats
specifier|private
specifier|final
name|Stats
name|totalStats
decl_stmt|;
DECL|field|statsPerPipeline
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Stats
argument_list|>
name|statsPerPipeline
decl_stmt|;
DECL|method|IngestStats
specifier|public
name|IngestStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|totalStats
operator|=
operator|new
name|Stats
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|statsPerPipeline
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|statsPerPipeline
operator|.
name|put
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
operator|new
name|Stats
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|IngestStats
specifier|public
name|IngestStats
parameter_list|(
name|Stats
name|totalStats
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Stats
argument_list|>
name|statsPerPipeline
parameter_list|)
block|{
name|this
operator|.
name|totalStats
operator|=
name|totalStats
expr_stmt|;
name|this
operator|.
name|statsPerPipeline
operator|=
name|statsPerPipeline
expr_stmt|;
block|}
comment|/**      * @return The accumulated stats for all pipelines      */
DECL|method|getTotalStats
specifier|public
name|Stats
name|getTotalStats
parameter_list|()
block|{
return|return
name|totalStats
return|;
block|}
comment|/**      * @return The stats on a per pipeline basis      */
DECL|method|getStatsPerPipeline
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Stats
argument_list|>
name|getStatsPerPipeline
parameter_list|()
block|{
return|return
name|statsPerPipeline
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|IngestStats
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|IngestStats
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|totalStats
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|statsPerPipeline
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Stats
argument_list|>
name|entry
range|:
name|statsPerPipeline
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"ingest"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"total"
argument_list|)
expr_stmt|;
name|totalStats
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"pipelines"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Stats
argument_list|>
name|entry
range|:
name|statsPerPipeline
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Stats
specifier|public
specifier|static
class|class
name|Stats
implements|implements
name|Writeable
argument_list|<
name|Stats
argument_list|>
implements|,
name|ToXContent
block|{
DECL|field|ingestCount
specifier|private
specifier|final
name|long
name|ingestCount
decl_stmt|;
DECL|field|ingestTimeInMillis
specifier|private
specifier|final
name|long
name|ingestTimeInMillis
decl_stmt|;
DECL|field|ingestCurrent
specifier|private
specifier|final
name|long
name|ingestCurrent
decl_stmt|;
DECL|field|ingestFailedCount
specifier|private
specifier|final
name|long
name|ingestFailedCount
decl_stmt|;
DECL|method|Stats
specifier|public
name|Stats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ingestCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|ingestTimeInMillis
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|ingestCurrent
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|ingestFailedCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
DECL|method|Stats
specifier|public
name|Stats
parameter_list|(
name|long
name|ingestCount
parameter_list|,
name|long
name|ingestTimeInMillis
parameter_list|,
name|long
name|ingestCurrent
parameter_list|,
name|long
name|ingestFailedCount
parameter_list|)
block|{
name|this
operator|.
name|ingestCount
operator|=
name|ingestCount
expr_stmt|;
name|this
operator|.
name|ingestTimeInMillis
operator|=
name|ingestTimeInMillis
expr_stmt|;
name|this
operator|.
name|ingestCurrent
operator|=
name|ingestCurrent
expr_stmt|;
name|this
operator|.
name|ingestFailedCount
operator|=
name|ingestFailedCount
expr_stmt|;
block|}
comment|/**          * @return The total number of executed ingest preprocessing operations.          */
DECL|method|getIngestCount
specifier|public
name|long
name|getIngestCount
parameter_list|()
block|{
return|return
name|ingestCount
return|;
block|}
comment|/**          *          * @return The total time spent of ingest preprocessing in millis.          */
DECL|method|getIngestTimeInMillis
specifier|public
name|long
name|getIngestTimeInMillis
parameter_list|()
block|{
return|return
name|ingestTimeInMillis
return|;
block|}
comment|/**          * @return The total number of ingest preprocessing operations currently executing.          */
DECL|method|getIngestCurrent
specifier|public
name|long
name|getIngestCurrent
parameter_list|()
block|{
return|return
name|ingestCurrent
return|;
block|}
comment|/**          * @return The total number of ingest preprocessing operations that have failed.          */
DECL|method|getIngestFailedCount
specifier|public
name|long
name|getIngestFailedCount
parameter_list|()
block|{
return|return
name|ingestFailedCount
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|Stats
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Stats
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|ingestCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|ingestTimeInMillis
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|ingestCurrent
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|ingestFailedCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"count"
argument_list|,
name|ingestCount
argument_list|)
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
literal|"time_in_millis"
argument_list|,
literal|"time"
argument_list|,
name|ingestTimeInMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"current"
argument_list|,
name|ingestCurrent
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"failed"
argument_list|,
name|ingestFailedCount
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

