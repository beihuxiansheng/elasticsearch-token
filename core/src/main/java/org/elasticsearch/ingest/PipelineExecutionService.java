begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateApplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|metrics
operator|.
name|CounterMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|metrics
operator|.
name|MeanMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_class
DECL|class|PipelineExecutionService
specifier|public
class|class
name|PipelineExecutionService
implements|implements
name|ClusterStateApplier
block|{
DECL|field|store
specifier|private
specifier|final
name|PipelineStore
name|store
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|totalStats
specifier|private
specifier|final
name|StatsHolder
name|totalStats
init|=
operator|new
name|StatsHolder
argument_list|()
decl_stmt|;
DECL|field|statsHolderPerPipeline
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|StatsHolder
argument_list|>
name|statsHolderPerPipeline
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
DECL|method|PipelineExecutionService
specifier|public
name|PipelineExecutionService
parameter_list|(
name|PipelineStore
name|store
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
block|}
DECL|method|executeIndexRequest
specifier|public
name|void
name|executeIndexRequest
parameter_list|(
name|IndexRequest
name|request
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|failureHandler
parameter_list|,
name|Consumer
argument_list|<
name|Boolean
argument_list|>
name|completionHandler
parameter_list|)
block|{
name|Pipeline
name|pipeline
init|=
name|getPipeline
argument_list|(
name|request
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failureHandler
operator|.
name|accept
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|innerExecute
argument_list|(
name|request
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
name|completionHandler
operator|.
name|accept
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|executeBulkRequest
specifier|public
name|void
name|executeBulkRequest
parameter_list|(
name|Iterable
argument_list|<
name|DocWriteRequest
argument_list|>
name|actionRequests
parameter_list|,
name|BiConsumer
argument_list|<
name|IndexRequest
argument_list|,
name|Exception
argument_list|>
name|itemFailureHandler
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|completionHandler
parameter_list|)
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|BULK
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|completionHandler
operator|.
name|accept
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|DocWriteRequest
name|actionRequest
range|:
name|actionRequests
control|)
block|{
if|if
condition|(
operator|(
name|actionRequest
operator|instanceof
name|IndexRequest
operator|)
condition|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|actionRequest
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|indexRequest
operator|.
name|getPipeline
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|innerExecute
argument_list|(
name|indexRequest
argument_list|,
name|getPipeline
argument_list|(
name|indexRequest
operator|.
name|getPipeline
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//this shouldn't be needed here but we do it for consistency with index api
comment|// which requires it to prevent double execution
name|indexRequest
operator|.
name|setPipeline
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|itemFailureHandler
operator|.
name|accept
argument_list|(
name|indexRequest
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|completionHandler
operator|.
name|accept
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|stats
specifier|public
name|IngestStats
name|stats
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|StatsHolder
argument_list|>
name|statsHolderPerPipeline
init|=
name|this
operator|.
name|statsHolderPerPipeline
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IngestStats
operator|.
name|Stats
argument_list|>
name|statsPerPipeline
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|statsHolderPerPipeline
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StatsHolder
argument_list|>
name|entry
range|:
name|statsHolderPerPipeline
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|statsPerPipeline
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|createStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|IngestStats
argument_list|(
name|totalStats
operator|.
name|createStats
argument_list|()
argument_list|,
name|statsPerPipeline
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|applyClusterState
specifier|public
name|void
name|applyClusterState
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|IngestMetadata
name|ingestMetadata
init|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|custom
argument_list|(
name|IngestMetadata
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ingestMetadata
operator|!=
literal|null
condition|)
block|{
name|updatePipelineStats
argument_list|(
name|ingestMetadata
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updatePipelineStats
name|void
name|updatePipelineStats
parameter_list|(
name|IngestMetadata
name|ingestMetadata
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StatsHolder
argument_list|>
name|newStatsPerPipeline
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|statsHolderPerPipeline
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|newStatsPerPipeline
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|pipeline
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ingestMetadata
operator|.
name|getPipelines
argument_list|()
operator|.
name|containsKey
argument_list|(
name|pipeline
argument_list|)
operator|==
literal|false
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|pipeline
range|:
name|ingestMetadata
operator|.
name|getPipelines
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|newStatsPerPipeline
operator|.
name|containsKey
argument_list|(
name|pipeline
argument_list|)
operator|==
literal|false
condition|)
block|{
name|newStatsPerPipeline
operator|.
name|put
argument_list|(
name|pipeline
argument_list|,
operator|new
name|StatsHolder
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|statsHolderPerPipeline
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|newStatsPerPipeline
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|innerExecute
specifier|private
name|void
name|innerExecute
parameter_list|(
name|IndexRequest
name|indexRequest
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|pipeline
operator|.
name|getProcessors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|long
name|startTimeInNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|// the pipeline specific stat holder may not exist and that is fine:
comment|// (e.g. the pipeline may have been removed while we're ingesting a document
name|Optional
argument_list|<
name|StatsHolder
argument_list|>
name|pipelineStats
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|statsHolderPerPipeline
operator|.
name|get
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|totalStats
operator|.
name|preIngest
argument_list|()
expr_stmt|;
name|pipelineStats
operator|.
name|ifPresent
argument_list|(
name|StatsHolder
operator|::
name|preIngest
argument_list|)
expr_stmt|;
name|String
name|index
init|=
name|indexRequest
operator|.
name|index
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|indexRequest
operator|.
name|type
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|indexRequest
operator|.
name|id
argument_list|()
decl_stmt|;
name|String
name|routing
init|=
name|indexRequest
operator|.
name|routing
argument_list|()
decl_stmt|;
name|String
name|parent
init|=
name|indexRequest
operator|.
name|parent
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
init|=
name|indexRequest
operator|.
name|sourceAsMap
argument_list|()
decl_stmt|;
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|routing
argument_list|,
name|parent
argument_list|,
name|sourceAsMap
argument_list|,
name|store
operator|.
name|isNewIngestDateFormat
argument_list|()
argument_list|)
decl_stmt|;
name|pipeline
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|IngestDocument
operator|.
name|MetaData
argument_list|,
name|String
argument_list|>
name|metadataMap
init|=
name|ingestDocument
operator|.
name|extractMetadata
argument_list|()
decl_stmt|;
comment|//it's fine to set all metadata fields all the time, as ingest document holds their starting values
comment|//before ingestion, which might also get modified during ingestion.
name|indexRequest
operator|.
name|index
argument_list|(
name|metadataMap
operator|.
name|get
argument_list|(
name|IngestDocument
operator|.
name|MetaData
operator|.
name|INDEX
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|type
argument_list|(
name|metadataMap
operator|.
name|get
argument_list|(
name|IngestDocument
operator|.
name|MetaData
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|id
argument_list|(
name|metadataMap
operator|.
name|get
argument_list|(
name|IngestDocument
operator|.
name|MetaData
operator|.
name|ID
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|routing
argument_list|(
name|metadataMap
operator|.
name|get
argument_list|(
name|IngestDocument
operator|.
name|MetaData
operator|.
name|ROUTING
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|parent
argument_list|(
name|metadataMap
operator|.
name|get
argument_list|(
name|IngestDocument
operator|.
name|MetaData
operator|.
name|PARENT
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|source
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|totalStats
operator|.
name|ingestFailed
argument_list|()
expr_stmt|;
name|pipelineStats
operator|.
name|ifPresent
argument_list|(
name|StatsHolder
operator|::
name|ingestFailed
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|long
name|ingestTimeInMillis
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTimeInNanos
argument_list|)
decl_stmt|;
name|totalStats
operator|.
name|postIngest
argument_list|(
name|ingestTimeInMillis
argument_list|)
expr_stmt|;
name|pipelineStats
operator|.
name|ifPresent
argument_list|(
name|statsHolder
lambda|->
name|statsHolder
operator|.
name|postIngest
argument_list|(
name|ingestTimeInMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPipeline
specifier|private
name|Pipeline
name|getPipeline
parameter_list|(
name|String
name|pipelineId
parameter_list|)
block|{
name|Pipeline
name|pipeline
init|=
name|store
operator|.
name|get
argument_list|(
name|pipelineId
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipeline
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"pipeline with id ["
operator|+
name|pipelineId
operator|+
literal|"] does not exist"
argument_list|)
throw|;
block|}
return|return
name|pipeline
return|;
block|}
DECL|class|StatsHolder
specifier|static
class|class
name|StatsHolder
block|{
DECL|field|ingestMetric
specifier|private
specifier|final
name|MeanMetric
name|ingestMetric
init|=
operator|new
name|MeanMetric
argument_list|()
decl_stmt|;
DECL|field|ingestCurrent
specifier|private
specifier|final
name|CounterMetric
name|ingestCurrent
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
DECL|field|ingestFailed
specifier|private
specifier|final
name|CounterMetric
name|ingestFailed
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
DECL|method|preIngest
name|void
name|preIngest
parameter_list|()
block|{
name|ingestCurrent
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
DECL|method|postIngest
name|void
name|postIngest
parameter_list|(
name|long
name|ingestTimeInMillis
parameter_list|)
block|{
name|ingestCurrent
operator|.
name|dec
argument_list|()
expr_stmt|;
name|ingestMetric
operator|.
name|inc
argument_list|(
name|ingestTimeInMillis
argument_list|)
expr_stmt|;
block|}
DECL|method|ingestFailed
name|void
name|ingestFailed
parameter_list|()
block|{
name|ingestFailed
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
DECL|method|createStats
name|IngestStats
operator|.
name|Stats
name|createStats
parameter_list|()
block|{
return|return
operator|new
name|IngestStats
operator|.
name|Stats
argument_list|(
name|ingestMetric
operator|.
name|count
argument_list|()
argument_list|,
name|ingestMetric
operator|.
name|sum
argument_list|()
argument_list|,
name|ingestCurrent
operator|.
name|count
argument_list|()
argument_list|,
name|ingestFailed
operator|.
name|count
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

