begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.env
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|env
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|MetaDataStateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Metadata associated with this node. Currently only contains the unique uuid describing this node.  * The metadata is persisted in the data folder of this node and is reused across restarts.  */
end_comment

begin_class
DECL|class|NodeMetaData
specifier|public
specifier|final
class|class
name|NodeMetaData
block|{
DECL|field|NODE_ID_KEY
specifier|private
specifier|static
specifier|final
name|String
name|NODE_ID_KEY
init|=
literal|"node_id"
decl_stmt|;
DECL|field|nodeId
specifier|private
specifier|final
name|String
name|nodeId
decl_stmt|;
DECL|method|NodeMetaData
specifier|public
name|NodeMetaData
parameter_list|(
specifier|final
name|String
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeMetaData
name|that
init|=
operator|(
name|NodeMetaData
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|nodeId
argument_list|,
name|that
operator|.
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeId
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"node_id ["
operator|+
name|nodeId
operator|+
literal|"]"
return|;
block|}
DECL|field|PARSER
specifier|private
specifier|static
name|ObjectParser
argument_list|<
name|Builder
argument_list|,
name|Void
argument_list|>
name|PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"node_meta_data"
argument_list|,
name|Builder
operator|::
operator|new
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareString
argument_list|(
name|Builder
operator|::
name|setNodeId
argument_list|,
operator|new
name|ParseField
argument_list|(
name|NODE_ID_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|nodeId
specifier|public
name|String
name|nodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
DECL|class|Builder
specifier|private
specifier|static
class|class
name|Builder
block|{
DECL|field|nodeId
name|String
name|nodeId
decl_stmt|;
DECL|method|setNodeId
specifier|public
name|void
name|setNodeId
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
DECL|method|build
specifier|public
name|NodeMetaData
name|build
parameter_list|()
block|{
return|return
operator|new
name|NodeMetaData
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
block|}
DECL|field|FORMAT
specifier|public
specifier|static
specifier|final
name|MetaDataStateFormat
argument_list|<
name|NodeMetaData
argument_list|>
name|FORMAT
init|=
operator|new
name|MetaDataStateFormat
argument_list|<
name|NodeMetaData
argument_list|>
argument_list|(
name|XContentType
operator|.
name|SMILE
argument_list|,
literal|"node-"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|XContentBuilder
name|newXContentBuilder
parameter_list|(
name|XContentType
name|type
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|super
operator|.
name|newXContentBuilder
argument_list|(
name|type
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|xContentBuilder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
return|return
name|xContentBuilder
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|NodeMetaData
name|nodeMetaData
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|NODE_ID_KEY
argument_list|,
name|nodeMetaData
operator|.
name|nodeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeMetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

