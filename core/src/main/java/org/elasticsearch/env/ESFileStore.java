begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.env
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|env
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystemException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|FileAttributeView
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|FileStoreAttributeView
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**   * Implementation of FileStore that supports  * additional features, such as SSD detection and better  * filesystem information for the root filesystem.  * @see Environment#getFileStore(Path)  */
end_comment

begin_class
DECL|class|ESFileStore
class|class
name|ESFileStore
extends|extends
name|FileStore
block|{
comment|/** Underlying filestore */
DECL|field|in
specifier|final
name|FileStore
name|in
decl_stmt|;
comment|/** Cached result of Lucene's {@code IOUtils.spins} on path. */
DECL|field|spins
specifier|final
name|Boolean
name|spins
decl_stmt|;
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"tries to determine if disk is spinning"
argument_list|)
comment|// TODO: move PathUtils to be package-private here instead of
comment|// public+forbidden api!
DECL|method|ESFileStore
name|ESFileStore
parameter_list|(
name|FileStore
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|Boolean
name|spins
decl_stmt|;
comment|// Lucene's IOUtils.spins only works on Linux today:
if|if
condition|(
name|Constants
operator|.
name|LINUX
condition|)
block|{
try|try
block|{
name|spins
operator|=
name|IOUtils
operator|.
name|spins
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
name|getMountPointLinux
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|spins
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|spins
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|spins
operator|=
name|spins
expr_stmt|;
block|}
comment|// these are hacks that are not guaranteed
DECL|method|getMountPointLinux
specifier|private
specifier|static
name|String
name|getMountPointLinux
parameter_list|(
name|FileStore
name|store
parameter_list|)
block|{
name|String
name|desc
init|=
name|store
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|desc
operator|.
name|lastIndexOf
argument_list|(
literal|" ("
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|desc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|desc
return|;
block|}
block|}
comment|/**       * Files.getFileStore(Path) useless here!  Don't complain, just try it yourself.       */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"works around the bugs"
argument_list|)
DECL|method|getMatchingFileStore
specifier|static
name|FileStore
name|getMatchingFileStore
parameter_list|(
name|Path
name|path
parameter_list|,
name|FileStore
name|fileStores
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Constants
operator|.
name|WINDOWS
condition|)
block|{
return|return
name|getFileStoreWindows
argument_list|(
name|path
argument_list|,
name|fileStores
argument_list|)
return|;
block|}
name|FileStore
name|store
init|=
name|Files
operator|.
name|getFileStore
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|mount
init|=
name|getMountPointLinux
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|FileStore
name|sameMountPoint
init|=
literal|null
decl_stmt|;
for|for
control|(
name|FileStore
name|fs
range|:
name|fileStores
control|)
block|{
if|if
condition|(
name|mount
operator|.
name|equals
argument_list|(
name|getMountPointLinux
argument_list|(
name|fs
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|sameMountPoint
operator|==
literal|null
condition|)
block|{
name|sameMountPoint
operator|=
name|fs
expr_stmt|;
block|}
else|else
block|{
comment|// more than one filesystem has the same mount point; something is wrong!
comment|// fall back to crappy one we got from Files.getFileStore
return|return
name|store
return|;
block|}
block|}
block|}
if|if
condition|(
name|sameMountPoint
operator|!=
literal|null
condition|)
block|{
comment|// ok, we found only one, use it:
return|return
name|sameMountPoint
return|;
block|}
else|else
block|{
comment|// fall back to crappy one we got from Files.getFileStore
return|return
name|store
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// fall back to crappy one we got from Files.getFileStore
return|return
name|store
return|;
block|}
comment|/**       * remove this code and just use getFileStore for windows on java 9      * works around https://bugs.openjdk.java.net/browse/JDK-8034057      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"works around https://bugs.openjdk.java.net/browse/JDK-8034057"
argument_list|)
DECL|method|getFileStoreWindows
specifier|static
name|FileStore
name|getFileStoreWindows
parameter_list|(
name|Path
name|path
parameter_list|,
name|FileStore
name|fileStores
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|Constants
operator|.
name|WINDOWS
assert|;
try|try
block|{
return|return
name|Files
operator|.
name|getFileStore
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileSystemException
name|possibleBug
parameter_list|)
block|{
specifier|final
name|char
name|driveLetter
decl_stmt|;
comment|// look for a drive letter to see if its the SUBST bug,
comment|// it might be some other type of path, like a windows share
comment|// if something goes wrong, we just deliver the original exception
try|try
block|{
name|String
name|root
init|=
name|path
operator|.
name|toRealPath
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"root isn't a drive letter: "
operator|+
name|root
argument_list|)
throw|;
block|}
name|driveLetter
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|root
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Character
operator|.
name|isAlphabetic
argument_list|(
name|driveLetter
argument_list|)
operator|==
literal|false
operator|||
name|root
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|!=
literal|':'
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"root isn't a drive letter: "
operator|+
name|root
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|checkFailed
parameter_list|)
block|{
comment|// something went wrong,
name|possibleBug
operator|.
name|addSuppressed
argument_list|(
name|checkFailed
argument_list|)
expr_stmt|;
throw|throw
name|possibleBug
throw|;
block|}
comment|// we have a drive letter: the hack begins!!!!!!!!
try|try
block|{
comment|// we have no choice but to parse toString of all stores and find the matching drive letter
for|for
control|(
name|FileStore
name|store
range|:
name|fileStores
control|)
block|{
name|String
name|toString
init|=
name|store
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|toString
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|3
operator|&&
name|toString
operator|.
name|endsWith
argument_list|(
literal|":)"
argument_list|)
operator|&&
name|toString
operator|.
name|charAt
argument_list|(
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|'('
condition|)
block|{
if|if
condition|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|toString
operator|.
name|charAt
argument_list|(
name|length
operator|-
literal|3
argument_list|)
argument_list|)
operator|==
name|driveLetter
condition|)
block|{
return|return
name|store
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no filestores matched"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|weTried
parameter_list|)
block|{
name|IOException
name|newException
init|=
operator|new
name|IOException
argument_list|(
literal|"Unable to retrieve filestore for '"
operator|+
name|path
operator|+
literal|"', tried matching against "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|fileStores
argument_list|)
argument_list|,
name|weTried
argument_list|)
decl_stmt|;
name|newException
operator|.
name|addSuppressed
argument_list|(
name|possibleBug
argument_list|)
expr_stmt|;
throw|throw
name|newException
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|in
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|in
operator|.
name|type
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isReadOnly
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|in
operator|.
name|isReadOnly
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTotalSpace
specifier|public
name|long
name|getTotalSpace
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getTotalSpace
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUsableSpace
specifier|public
name|long
name|getUsableSpace
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getUsableSpace
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUnallocatedSpace
specifier|public
name|long
name|getUnallocatedSpace
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getUnallocatedSpace
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|supportsFileAttributeView
specifier|public
name|boolean
name|supportsFileAttributeView
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|FileAttributeView
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|in
operator|.
name|supportsFileAttributeView
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|supportsFileAttributeView
specifier|public
name|boolean
name|supportsFileAttributeView
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"lucene"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|supportsFileAttributeView
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFileStoreAttributeView
specifier|public
parameter_list|<
name|V
extends|extends
name|FileStoreAttributeView
parameter_list|>
name|V
name|getFileStoreAttributeView
parameter_list|(
name|Class
argument_list|<
name|V
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|in
operator|.
name|getFileStoreAttributeView
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAttribute
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|String
name|attribute
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"lucene:spins"
operator|.
name|equals
argument_list|(
name|attribute
argument_list|)
condition|)
block|{
return|return
name|spins
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|getAttribute
argument_list|(
name|attribute
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|in
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

