begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch
package|package
name|org
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|LoggerMessageFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|ensureExpectedToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|ensureFieldName
import|;
end_import

begin_comment
comment|/**  * A base class for all elasticsearch exceptions.  */
end_comment

begin_class
DECL|class|ElasticsearchException
specifier|public
class|class
name|ElasticsearchException
extends|extends
name|RuntimeException
implements|implements
name|ToXContent
implements|,
name|Writeable
block|{
DECL|field|UNKNOWN_VERSION_ADDED
specifier|private
specifier|static
specifier|final
name|Version
name|UNKNOWN_VERSION_ADDED
init|=
name|Version
operator|.
name|fromId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Passed in the {@link Params} of {@link #generateThrowableXContent(XContentBuilder, Params, Throwable)}      * to control if the {@code caused_by} element should render. Unlike most parameters to {@code toXContent} methods this parameter is      * internal only and not available as a URL parameter.      */
DECL|field|REST_EXCEPTION_SKIP_CAUSE
specifier|private
specifier|static
specifier|final
name|String
name|REST_EXCEPTION_SKIP_CAUSE
init|=
literal|"rest.exception.cause.skip"
decl_stmt|;
comment|/**      * Passed in the {@link Params} of {@link #generateThrowableXContent(XContentBuilder, Params, Throwable)}      * to control if the {@code stack_trace} element should render. Unlike most parameters to {@code toXContent} methods this parameter is      * internal only and not available as a URL parameter. Use the {@code error_trace} parameter instead.      */
DECL|field|REST_EXCEPTION_SKIP_STACK_TRACE
specifier|public
specifier|static
specifier|final
name|String
name|REST_EXCEPTION_SKIP_STACK_TRACE
init|=
literal|"rest.exception.stacktrace.skip"
decl_stmt|;
DECL|field|REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT
specifier|public
specifier|static
specifier|final
name|boolean
name|REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT
init|=
literal|true
decl_stmt|;
DECL|field|REST_EXCEPTION_SKIP_CAUSE_DEFAULT
specifier|private
specifier|static
specifier|final
name|boolean
name|REST_EXCEPTION_SKIP_CAUSE_DEFAULT
init|=
literal|false
decl_stmt|;
DECL|field|INDEX_METADATA_KEY
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_METADATA_KEY
init|=
literal|"es.index"
decl_stmt|;
DECL|field|INDEX_METADATA_KEY_UUID
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_METADATA_KEY_UUID
init|=
literal|"es.index_uuid"
decl_stmt|;
DECL|field|SHARD_METADATA_KEY
specifier|private
specifier|static
specifier|final
name|String
name|SHARD_METADATA_KEY
init|=
literal|"es.shard"
decl_stmt|;
DECL|field|RESOURCE_METADATA_TYPE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_METADATA_TYPE_KEY
init|=
literal|"es.resource.type"
decl_stmt|;
DECL|field|RESOURCE_METADATA_ID_KEY
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_METADATA_ID_KEY
init|=
literal|"es.resource.id"
decl_stmt|;
DECL|field|TYPE
specifier|private
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"type"
decl_stmt|;
DECL|field|REASON
specifier|private
specifier|static
specifier|final
name|String
name|REASON
init|=
literal|"reason"
decl_stmt|;
DECL|field|CAUSED_BY
specifier|private
specifier|static
specifier|final
name|String
name|CAUSED_BY
init|=
literal|"caused_by"
decl_stmt|;
DECL|field|STACK_TRACE
specifier|private
specifier|static
specifier|final
name|String
name|STACK_TRACE
init|=
literal|"stack_trace"
decl_stmt|;
DECL|field|HEADER
specifier|private
specifier|static
specifier|final
name|String
name|HEADER
init|=
literal|"header"
decl_stmt|;
DECL|field|ERROR
specifier|private
specifier|static
specifier|final
name|String
name|ERROR
init|=
literal|"error"
decl_stmt|;
DECL|field|ROOT_CAUSE
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_CAUSE
init|=
literal|"root_cause"
decl_stmt|;
DECL|field|ID_TO_SUPPLIER
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|CheckedFunction
argument_list|<
name|StreamInput
argument_list|,
name|?
extends|extends
name|ElasticsearchException
argument_list|,
name|IOException
argument_list|>
argument_list|>
name|ID_TO_SUPPLIER
decl_stmt|;
DECL|field|CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ElasticsearchException
argument_list|>
argument_list|,
name|ElasticsearchExceptionHandle
argument_list|>
name|CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE
decl_stmt|;
DECL|field|metadata
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|headers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Construct a<code>ElasticsearchException</code> with the specified cause exception.      */
DECL|method|ElasticsearchException
specifier|public
name|ElasticsearchException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a<code>ElasticsearchException</code> with the specified detail message.      *      * The message can be parameterized using<code>{}</code> as placeholders for the given      * arguments      *      * @param msg  the detail message      * @param args the arguments for the message      */
DECL|method|ElasticsearchException
specifier|public
name|ElasticsearchException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|LoggerMessageFormat
operator|.
name|format
argument_list|(
name|msg
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a<code>ElasticsearchException</code> with the specified detail message      * and nested exception.      *      * The message can be parameterized using<code>{}</code> as placeholders for the given      * arguments      *      * @param msg   the detail message      * @param cause the nested exception      * @param args  the arguments for the message      */
DECL|method|ElasticsearchException
specifier|public
name|ElasticsearchException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|LoggerMessageFormat
operator|.
name|format
argument_list|(
name|msg
argument_list|,
name|args
argument_list|)
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
DECL|method|ElasticsearchException
specifier|public
name|ElasticsearchException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
operator|.
name|readOptionalString
argument_list|()
argument_list|,
name|in
operator|.
name|readException
argument_list|()
argument_list|)
expr_stmt|;
name|readStackTrace
argument_list|(
name|this
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|headers
operator|.
name|putAll
argument_list|(
name|in
operator|.
name|readMapOfLists
argument_list|(
name|StreamInput
operator|::
name|readString
argument_list|,
name|StreamInput
operator|::
name|readString
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_3_0_UNRELEASED
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|putAll
argument_list|(
name|in
operator|.
name|readMapOfLists
argument_list|(
name|StreamInput
operator|::
name|readString
argument_list|,
name|StreamInput
operator|::
name|readString
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|headers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|header
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"es."
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|put
argument_list|(
name|header
operator|.
name|getKey
argument_list|()
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Adds a new piece of metadata with the given key.      * If the provided key is already present, the corresponding metadata will be replaced      */
DECL|method|addMetadata
specifier|public
name|void
name|addMetadata
parameter_list|(
name|String
name|key
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
block|{
name|addMetadata
argument_list|(
name|key
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a new piece of metadata with the given key.      * If the provided key is already present, the corresponding metadata will be replaced      */
DECL|method|addMetadata
specifier|public
name|void
name|addMetadata
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
comment|//we need to enforce this otherwise bw comp doesn't work properly, as "es." was the previous criteria to split headers in two sets
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"es."
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"exception metadata must start with [es.], found ["
operator|+
name|key
operator|+
literal|"] instead"
argument_list|)
throw|;
block|}
name|this
operator|.
name|metadata
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a set of all metadata keys on this exception      */
DECL|method|getMetadataKeys
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getMetadataKeys
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Returns the list of metadata values for the given key or {@code null} if no metadata for the      * given key exists.      */
DECL|method|getMetadata
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMetadata
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getMetadata
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
comment|/**      * Adds a new header with the given key.      * This method will replace existing header if a header with the same key already exists      */
DECL|method|addHeader
specifier|public
name|void
name|addHeader
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
comment|//we need to enforce this otherwise bw comp doesn't work properly, as "es." was the previous criteria to split headers in two sets
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"es."
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"exception headers must not start with [es.], found ["
operator|+
name|key
operator|+
literal|"] instead"
argument_list|)
throw|;
block|}
name|this
operator|.
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a new header with the given key.      * This method will replace existing header if a header with the same key already exists      */
DECL|method|addHeader
specifier|public
name|void
name|addHeader
parameter_list|(
name|String
name|key
parameter_list|,
name|String
modifier|...
name|value
parameter_list|)
block|{
name|addHeader
argument_list|(
name|key
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a set of all header keys on this exception      */
DECL|method|getHeaderKeys
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getHeaderKeys
parameter_list|()
block|{
return|return
name|headers
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Returns the list of header values for the given key or {@code null} if no header for the      * given key exists.      */
DECL|method|getHeader
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getHeader
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|headers
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getHeaders
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
comment|/**      * Returns the rest status code associated with this exception.      */
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
name|Throwable
name|cause
init|=
name|unwrapCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|==
name|this
condition|)
block|{
return|return
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
return|;
block|}
else|else
block|{
return|return
name|ExceptionsHelper
operator|.
name|status
argument_list|(
name|cause
argument_list|)
return|;
block|}
block|}
comment|/**      * Unwraps the actual cause from the exception for cases when the exception is a      * {@link ElasticsearchWrapperException}.      *      * @see ExceptionsHelper#unwrapCause(Throwable)      */
DECL|method|unwrapCause
specifier|public
name|Throwable
name|unwrapCause
parameter_list|()
block|{
return|return
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Return the detail message, including the message from the nested exception      * if there is one.      */
DECL|method|getDetailedMessage
specifier|public
name|String
name|getDetailedMessage
parameter_list|()
block|{
if|if
condition|(
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCause
argument_list|()
operator|instanceof
name|ElasticsearchException
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|ElasticsearchException
operator|)
name|getCause
argument_list|()
operator|)
operator|.
name|getDetailedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Retrieve the innermost cause of this exception, if none, returns the current exception.      */
DECL|method|getRootCause
specifier|public
name|Throwable
name|getRootCause
parameter_list|()
block|{
name|Throwable
name|rootCause
init|=
name|this
decl_stmt|;
name|Throwable
name|cause
init|=
name|getCause
argument_list|()
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|!=
name|rootCause
condition|)
block|{
name|rootCause
operator|=
name|cause
expr_stmt|;
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
name|rootCause
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeException
argument_list|(
name|this
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|writeStackTraces
argument_list|(
name|this
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_3_0_UNRELEASED
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeMapOfLists
argument_list|(
name|headers
argument_list|,
name|StreamOutput
operator|::
name|writeString
argument_list|,
name|StreamOutput
operator|::
name|writeString
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeMapOfLists
argument_list|(
name|metadata
argument_list|,
name|StreamOutput
operator|::
name|writeString
argument_list|,
name|StreamOutput
operator|::
name|writeString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|finalHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|headers
operator|.
name|size
argument_list|()
operator|+
name|metadata
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|finalHeaders
operator|.
name|putAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|finalHeaders
operator|.
name|putAll
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeMapOfLists
argument_list|(
name|finalHeaders
argument_list|,
name|StreamOutput
operator|::
name|writeString
argument_list|,
name|StreamOutput
operator|::
name|writeString
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readException
specifier|public
specifier|static
name|ElasticsearchException
name|readException
parameter_list|(
name|StreamInput
name|input
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|CheckedFunction
argument_list|<
name|StreamInput
argument_list|,
name|?
extends|extends
name|ElasticsearchException
argument_list|,
name|IOException
argument_list|>
name|elasticsearchException
init|=
name|ID_TO_SUPPLIER
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|elasticsearchException
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown exception for id: "
operator|+
name|id
argument_list|)
throw|;
block|}
return|return
name|elasticsearchException
operator|.
name|apply
argument_list|(
name|input
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> iff the given class is a registered for an exception to be read.      */
DECL|method|isRegistered
specifier|public
specifier|static
name|boolean
name|isRegistered
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exception
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|ElasticsearchExceptionHandle
name|elasticsearchExceptionHandle
init|=
name|CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE
operator|.
name|get
argument_list|(
name|exception
argument_list|)
decl_stmt|;
if|if
condition|(
name|elasticsearchExceptionHandle
operator|!=
literal|null
condition|)
block|{
return|return
name|version
operator|.
name|onOrAfter
argument_list|(
name|elasticsearchExceptionHandle
operator|.
name|versionAdded
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getRegisteredKeys
specifier|static
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ElasticsearchException
argument_list|>
argument_list|>
name|getRegisteredKeys
parameter_list|()
block|{
comment|// for testing
return|return
name|CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Returns the serialization id the given exception.      */
DECL|method|getId
specifier|public
specifier|static
name|int
name|getId
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ElasticsearchException
argument_list|>
name|exception
parameter_list|)
block|{
return|return
name|CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE
operator|.
name|get
argument_list|(
name|exception
argument_list|)
operator|.
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|Throwable
name|ex
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
name|this
condition|)
block|{
name|generateThrowableXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|this
argument_list|,
name|getExceptionName
argument_list|()
argument_list|,
name|getMessage
argument_list|()
argument_list|,
name|headers
argument_list|,
name|metadata
argument_list|,
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|protected
specifier|static
name|void
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|,
name|Throwable
name|throwable
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|message
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|metadata
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|REASON
argument_list|,
name|message
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|metadata
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headerToXContent
argument_list|(
name|builder
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
literal|"es."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|throwable
operator|instanceof
name|ElasticsearchException
condition|)
block|{
name|ElasticsearchException
name|exception
init|=
operator|(
name|ElasticsearchException
operator|)
name|throwable
decl_stmt|;
name|exception
operator|.
name|metadataToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|paramAsBoolean
argument_list|(
name|REST_EXCEPTION_SKIP_CAUSE
argument_list|,
name|REST_EXCEPTION_SKIP_CAUSE_DEFAULT
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|CAUSED_BY
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|generateThrowableXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|headers
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|HEADER
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headerToXContent
argument_list|(
name|builder
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|paramAsBoolean
argument_list|(
name|REST_EXCEPTION_SKIP_STACK_TRACE
argument_list|,
name|REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT
argument_list|)
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|STACK_TRACE
argument_list|,
name|ExceptionsHelper
operator|.
name|stackTrace
argument_list|(
name|throwable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|headerToXContent
specifier|private
specifier|static
name|void
name|headerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|key
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|key
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Renders additional per exception information into the XContent      */
DECL|method|metadataToXContent
specifier|protected
name|void
name|metadataToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{     }
comment|/**      * Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not      * return the original exception type (ie NodeClosedException for example) but just wraps      * the type, the reason and the cause of the exception. It also recursively parses the      * tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}      * instances.      */
DECL|method|fromXContent
specifier|public
specifier|static
name|ElasticsearchException
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|token
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
return|return
name|innerFromXContent
argument_list|(
name|parser
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|innerFromXContent
specifier|private
specifier|static
name|ElasticsearchException
name|innerFromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|parseRootCauses
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|token
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|,
name|reason
init|=
literal|null
decl_stmt|,
name|stack
init|=
literal|null
decl_stmt|;
name|ElasticsearchException
name|cause
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ElasticsearchException
argument_list|>
name|rootCauses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
control|)
block|{
name|String
name|currentFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|TYPE
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|type
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|REASON
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|reason
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|STACK_TRACE
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|stack
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|metadata
operator|.
name|put
argument_list|(
name|currentFieldName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|CAUSED_BY
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|cause
operator|=
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|HEADER
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|getOrDefault
argument_list|(
name|currentFieldName
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
name|headers
operator|.
name|put
argument_list|(
name|currentFieldName
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Any additional metadata object added by the metadataToXContent method is ignored
comment|// and skipped, so that the parser does not fail on unknown fields. The parser only
comment|// support metadata key-pairs and metadata arrays of values.
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|parseRootCauses
operator|&&
name|ROOT_CAUSE
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|rootCauses
operator|.
name|add
argument_list|(
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Parse the array and add each item to the corresponding list of metadata.
comment|// Arrays of objects are not supported yet and just ignored and skipped.
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|metadata
operator|.
name|containsKey
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|currentFieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|put
argument_list|(
name|currentFieldName
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ElasticsearchException
name|e
init|=
operator|new
name|ElasticsearchException
argument_list|(
name|buildMessage
argument_list|(
name|type
argument_list|,
name|reason
argument_list|,
name|stack
argument_list|)
argument_list|,
name|cause
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|metadata
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|//subclasses can print out additional metadata through the metadataToXContent method. Simple key-value pairs will be
comment|//parsed back and become part of this metadata set, while objects and arrays are not supported when parsing back.
comment|//Those key-value pairs become part of the metadata set and inherit the "es." prefix as that is currently required
comment|//by addMetadata. The prefix will get stripped out when printing metadata out so it will be effectively invisible.
comment|//TODO move subclasses that print out simple metadata to using addMetadata directly and support also numbers and booleans.
comment|//TODO rename metadataToXContent and have only SearchPhaseExecutionException use it, which prints out complex objects
name|e
operator|.
name|addMetadata
argument_list|(
literal|"es."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|header
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|e
operator|.
name|addHeader
argument_list|(
name|header
operator|.
name|getKey
argument_list|()
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Adds root causes as suppressed exception. This way they are not lost
comment|// after parsing and can be retrieved using getSuppressed() method.
for|for
control|(
name|ElasticsearchException
name|rootCause
range|:
name|rootCauses
control|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|rootCause
argument_list|)
expr_stmt|;
block|}
return|return
name|e
return|;
block|}
comment|/**      * Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances      * as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}      * or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.      *      * This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can      * be parsed back using the {@link #fromXContent(XContentParser)} method.      */
DECL|method|generateThrowableXContent
specifier|public
specifier|static
name|void
name|generateThrowableXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|,
name|Throwable
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|t
operator|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|ElasticsearchException
condition|)
block|{
operator|(
operator|(
name|ElasticsearchException
operator|)
name|t
operator|)
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|t
argument_list|,
name|getExceptionName
argument_list|(
name|t
argument_list|)
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|t
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered      * depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the      * exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack      * trace.      *      * This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed      * by the {@link #failureFromXContent(XContentParser)} method.      */
DECL|method|generateFailureXContent
specifier|public
specifier|static
name|void
name|generateFailureXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|,
annotation|@
name|Nullable
name|Exception
name|e
parameter_list|,
name|boolean
name|detailed
parameter_list|)
throws|throws
name|IOException
block|{
comment|// No exception to render as an error
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ERROR
argument_list|,
literal|"unknown"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Render the exception with a simple message
if|if
condition|(
name|detailed
operator|==
literal|false
condition|)
block|{
name|String
name|message
init|=
literal|"No ElasticsearchException found"
decl_stmt|;
name|Throwable
name|t
init|=
name|e
decl_stmt|;
for|for
control|(
name|int
name|counter
init|=
literal|0
init|;
name|counter
operator|<
literal|10
operator|&&
name|t
operator|!=
literal|null
condition|;
name|counter
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|ElasticsearchException
condition|)
block|{
name|message
operator|=
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"["
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|"]"
expr_stmt|;
break|break;
block|}
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|ERROR
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Render the exception with all details
specifier|final
name|ElasticsearchException
index|[]
name|rootCauses
init|=
name|ElasticsearchException
operator|.
name|guessRootCauses
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|ERROR
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|ROOT_CAUSE
argument_list|)
expr_stmt|;
for|for
control|(
name|ElasticsearchException
name|rootCause
range|:
name|rootCauses
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|rootCause
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
operator|new
name|DelegatingMapParams
argument_list|(
name|singletonMap
argument_list|(
name|REST_EXCEPTION_SKIP_CAUSE
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|generateThrowableXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|/**      * Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)}      */
DECL|method|failureFromXContent
specifier|public
specifier|static
name|ElasticsearchException
name|failureFromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|ensureFieldName
argument_list|(
name|parser
argument_list|,
name|token
argument_list|,
name|ERROR
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
return|return
operator|new
name|ElasticsearchException
argument_list|(
name|buildMessage
argument_list|(
literal|"exception"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
name|ensureExpectedToken
argument_list|(
name|token
argument_list|,
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// Root causes are parsed in the innerFromXContent() and are added as suppressed exceptions.
return|return
name|innerFromXContent
argument_list|(
name|parser
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Returns the root cause of this exception or multiple if different shards caused different exceptions      */
DECL|method|guessRootCauses
specifier|public
name|ElasticsearchException
index|[]
name|guessRootCauses
parameter_list|()
block|{
specifier|final
name|Throwable
name|cause
init|=
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|ElasticsearchException
condition|)
block|{
return|return
operator|(
operator|(
name|ElasticsearchException
operator|)
name|cause
operator|)
operator|.
name|guessRootCauses
argument_list|()
return|;
block|}
return|return
operator|new
name|ElasticsearchException
index|[]
block|{
name|this
block|}
return|;
block|}
comment|/**      * Returns the root cause of this exception or multiple if different shards caused different exceptions.      * If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array      * is returned.      */
DECL|method|guessRootCauses
specifier|public
specifier|static
name|ElasticsearchException
index|[]
name|guessRootCauses
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwable
name|ex
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|ElasticsearchException
condition|)
block|{
return|return
operator|(
operator|(
name|ElasticsearchException
operator|)
name|ex
operator|)
operator|.
name|guessRootCauses
argument_list|()
return|;
block|}
return|return
operator|new
name|ElasticsearchException
index|[]
block|{
operator|new
name|ElasticsearchException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getExceptionName
parameter_list|()
block|{
return|return
name|getExceptionName
argument_list|(
name|getCause
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      protected
DECL|method|getExceptionName
name|String
name|getExceptionName
parameter_list|()
block|{
return|return
name|getExceptionName
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Returns a underscore case name for the given exception. This method strips<tt>Elasticsearch</tt> prefixes from exception names.      */
end_comment

begin_function
DECL|method|getExceptionName
specifier|public
specifier|static
name|String
name|getExceptionName
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|String
name|simpleName
init|=
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|simpleName
operator|.
name|startsWith
argument_list|(
literal|"Elasticsearch"
argument_list|)
condition|)
block|{
name|simpleName
operator|=
name|simpleName
operator|.
name|substring
argument_list|(
literal|"Elasticsearch"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: do we really need to make the exception name in underscore casing?
return|return
name|toUnderscoreCase
argument_list|(
name|simpleName
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|buildMessage
specifier|static
name|String
name|buildMessage
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|reason
parameter_list|,
name|String
name|stack
parameter_list|)
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Elasticsearch exception ["
argument_list|)
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
name|TYPE
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|REASON
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|reason
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|STACK_TRACE
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|stack
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|message
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|containsKey
argument_list|(
name|INDEX_METADATA_KEY
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|.
name|containsKey
argument_list|(
name|SHARD_METADATA_KEY
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|getShardId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|append
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|this
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and      * adds it to the given exception.      */
end_comment

begin_function
DECL|method|readStackTrace
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|T
name|readStackTrace
parameter_list|(
name|T
name|throwable
parameter_list|,
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|stackTraceElements
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|StackTraceElement
index|[]
name|stackTrace
init|=
operator|new
name|StackTraceElement
index|[
name|stackTraceElements
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stackTraceElements
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|declaringClasss
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fileName
init|=
name|in
operator|.
name|readOptionalString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|methodName
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
specifier|final
name|int
name|lineNumber
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|stackTrace
index|[
name|i
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
name|declaringClasss
argument_list|,
name|methodName
argument_list|,
name|fileName
argument_list|,
name|lineNumber
argument_list|)
expr_stmt|;
block|}
name|throwable
operator|.
name|setStackTrace
argument_list|(
name|stackTrace
argument_list|)
expr_stmt|;
name|int
name|numSuppressed
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSuppressed
condition|;
name|i
operator|++
control|)
block|{
name|throwable
operator|.
name|addSuppressed
argument_list|(
name|in
operator|.
name|readException
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|throwable
return|;
block|}
end_function

begin_comment
comment|/**      * Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.      */
end_comment

begin_function
DECL|method|writeStackTraces
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|T
name|writeStackTraces
parameter_list|(
name|T
name|throwable
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|StackTraceElement
index|[]
name|stackTrace
init|=
name|throwable
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|stackTrace
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|StackTraceElement
name|element
range|:
name|stackTrace
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|element
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|element
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|element
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|element
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Throwable
index|[]
name|suppressed
init|=
name|throwable
operator|.
name|getSuppressed
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|suppressed
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Throwable
name|t
range|:
name|suppressed
control|)
block|{
name|out
operator|.
name|writeException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|throwable
return|;
block|}
end_function

begin_comment
comment|/**      * This is the list of Exceptions Elasticsearch can throw over the wire or save into a corruption marker. Each value in the enum is a      * single exception tying the Class to an id for use of the encode side and the id back to a constructor for use on the decode side. As      * such its ok if the exceptions to change names so long as their constructor can still read the exception. Each exception is listed      * in id order below. If you want to remove an exception leave a tombstone comment and mark the id as null in      * ExceptionSerializationTests.testIds.ids.      */
end_comment

begin_enum
DECL|enum|ElasticsearchExceptionHandle
enum|enum
name|ElasticsearchExceptionHandle
block|{
DECL|enum constant|INDEX_SHARD_SNAPSHOT_FAILED_EXCEPTION
name|INDEX_SHARD_SNAPSHOT_FAILED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardSnapshotFailedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardSnapshotFailedException
operator|::
operator|new
argument_list|,
literal|0
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|DFS_PHASE_EXECUTION_EXCEPTION
name|DFS_PHASE_EXECUTION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsPhaseExecutionException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsPhaseExecutionException
operator|::
operator|new
argument_list|,
literal|1
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|EXECUTION_CANCELLED_EXCEPTION
name|EXECUTION_CANCELLED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CancellableThreads
operator|.
name|ExecutionCancelledException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CancellableThreads
operator|.
name|ExecutionCancelledException
operator|::
operator|new
argument_list|,
literal|2
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|MASTER_NOT_DISCOVERED_EXCEPTION
name|MASTER_NOT_DISCOVERED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|MasterNotDiscoveredException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|MasterNotDiscoveredException
operator|::
operator|new
argument_list|,
literal|3
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ELASTICSEARCH_SECURITY_EXCEPTION
name|ELASTICSEARCH_SECURITY_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchSecurityException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchSecurityException
operator|::
operator|new
argument_list|,
literal|4
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_SHARD_RESTORE_EXCEPTION
name|INDEX_SHARD_RESTORE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRestoreException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRestoreException
operator|::
operator|new
argument_list|,
literal|5
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_CLOSED_EXCEPTION
name|INDEX_CLOSED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexClosedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexClosedException
operator|::
operator|new
argument_list|,
literal|6
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|BIND_HTTP_EXCEPTION
name|BIND_HTTP_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|BindHttpException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|BindHttpException
operator|::
operator|new
argument_list|,
literal|7
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|REDUCE_SEARCH_PHASE_EXCEPTION
name|REDUCE_SEARCH_PHASE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ReduceSearchPhaseException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ReduceSearchPhaseException
operator|::
operator|new
argument_list|,
literal|8
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|NODE_CLOSED_EXCEPTION
name|NODE_CLOSED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
operator|::
operator|new
argument_list|,
literal|9
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SNAPSHOT_FAILED_ENGINE_EXCEPTION
name|SNAPSHOT_FAILED_ENGINE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|SnapshotFailedEngineException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|SnapshotFailedEngineException
operator|::
operator|new
argument_list|,
literal|10
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SHARD_NOT_FOUND_EXCEPTION
name|SHARD_NOT_FOUND_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardNotFoundException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardNotFoundException
operator|::
operator|new
argument_list|,
literal|11
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|CONNECT_TRANSPORT_EXCEPTION
name|CONNECT_TRANSPORT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
operator|::
operator|new
argument_list|,
literal|12
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|NOT_SERIALIZABLE_TRANSPORT_EXCEPTION
name|NOT_SERIALIZABLE_TRANSPORT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NotSerializableTransportException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NotSerializableTransportException
operator|::
operator|new
argument_list|,
literal|13
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|RESPONSE_HANDLER_FAILURE_TRANSPORT_EXCEPTION
name|RESPONSE_HANDLER_FAILURE_TRANSPORT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ResponseHandlerFailureTransportException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ResponseHandlerFailureTransportException
operator|::
operator|new
argument_list|,
literal|14
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_CREATION_EXCEPTION
name|INDEX_CREATION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexCreationException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexCreationException
operator|::
operator|new
argument_list|,
literal|15
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_NOT_FOUND_EXCEPTION
name|INDEX_NOT_FOUND_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
operator|::
operator|new
argument_list|,
literal|16
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ILLEGAL_SHARD_ROUTING_STATE_EXCEPTION
name|ILLEGAL_SHARD_ROUTING_STATE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IllegalShardRoutingStateException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IllegalShardRoutingStateException
operator|::
operator|new
argument_list|,
literal|17
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|BROADCAST_SHARD_OPERATION_FAILED_EXCEPTION
name|BROADCAST_SHARD_OPERATION_FAILED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastShardOperationFailedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastShardOperationFailedException
operator|::
operator|new
argument_list|,
literal|18
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|RESOURCE_NOT_FOUND_EXCEPTION
name|RESOURCE_NOT_FOUND_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceNotFoundException
operator|::
operator|new
argument_list|,
literal|19
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ACTION_TRANSPORT_EXCEPTION
name|ACTION_TRANSPORT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ActionTransportException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ActionTransportException
operator|::
operator|new
argument_list|,
literal|20
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ELASTICSEARCH_GENERATION_EXCEPTION
name|ELASTICSEARCH_GENERATION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchGenerationException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchGenerationException
operator|::
operator|new
argument_list|,
literal|21
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|//      22 was CreateFailedEngineException
DECL|enum constant|INDEX_SHARD_STARTED_EXCEPTION
name|INDEX_SHARD_STARTED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardStartedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardStartedException
operator|::
operator|new
argument_list|,
literal|23
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SEARCH_CONTEXT_MISSING_EXCEPTION
name|SEARCH_CONTEXT_MISSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchContextMissingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchContextMissingException
operator|::
operator|new
argument_list|,
literal|24
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|GENERAL_SCRIPT_EXCEPTION
name|GENERAL_SCRIPT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|GeneralScriptException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|GeneralScriptException
operator|::
operator|new
argument_list|,
literal|25
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|BATCH_OPERATION_EXCEPTION
name|BATCH_OPERATION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|TranslogRecoveryPerformer
operator|.
name|BatchOperationException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|TranslogRecoveryPerformer
operator|.
name|BatchOperationException
operator|::
operator|new
argument_list|,
literal|26
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SNAPSHOT_CREATION_EXCEPTION
name|SNAPSHOT_CREATION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotCreationException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotCreationException
operator|::
operator|new
argument_list|,
literal|27
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|DELETE_FAILED_ENGINE_EXCEPTION
name|DELETE_FAILED_ENGINE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DeleteFailedEngineException
operator|.
name|class
argument_list|,
comment|// deprecated in 6.0, remove in 7.0
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DeleteFailedEngineException
operator|::
operator|new
argument_list|,
literal|28
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|DOCUMENT_MISSING_EXCEPTION
name|DOCUMENT_MISSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentMissingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentMissingException
operator|::
operator|new
argument_list|,
literal|29
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SNAPSHOT_EXCEPTION
name|SNAPSHOT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotException
operator|::
operator|new
argument_list|,
literal|30
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INVALID_ALIAS_NAME_EXCEPTION
name|INVALID_ALIAS_NAME_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidAliasNameException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidAliasNameException
operator|::
operator|new
argument_list|,
literal|31
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INVALID_INDEX_NAME_EXCEPTION
name|INVALID_INDEX_NAME_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexNameException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexNameException
operator|::
operator|new
argument_list|,
literal|32
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_PRIMARY_SHARD_NOT_ALLOCATED_EXCEPTION
name|INDEX_PRIMARY_SHARD_NOT_ALLOCATED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexPrimaryShardNotAllocatedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexPrimaryShardNotAllocatedException
operator|::
operator|new
argument_list|,
literal|33
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|TRANSPORT_EXCEPTION
name|TRANSPORT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
operator|::
operator|new
argument_list|,
literal|34
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ELASTICSEARCH_PARSE_EXCEPTION
name|ELASTICSEARCH_PARSE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
operator|::
operator|new
argument_list|,
literal|35
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SEARCH_EXCEPTION
name|SEARCH_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchException
operator|::
operator|new
argument_list|,
literal|36
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|MAPPER_EXCEPTION
name|MAPPER_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperException
operator|::
operator|new
argument_list|,
literal|37
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INVALID_TYPE_NAME_EXCEPTION
name|INVALID_TYPE_NAME_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidTypeNameException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidTypeNameException
operator|::
operator|new
argument_list|,
literal|38
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SNAPSHOT_RESTORE_EXCEPTION
name|SNAPSHOT_RESTORE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotRestoreException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotRestoreException
operator|::
operator|new
argument_list|,
literal|39
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|PARSING_EXCEPTION
name|PARSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
operator|::
operator|new
argument_list|,
literal|40
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_SHARD_CLOSED_EXCEPTION
name|INDEX_SHARD_CLOSED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardClosedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardClosedException
operator|::
operator|new
argument_list|,
literal|41
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|RECOVER_FILES_RECOVERY_EXCEPTION
name|RECOVER_FILES_RECOVERY_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoverFilesRecoveryException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoverFilesRecoveryException
operator|::
operator|new
argument_list|,
literal|42
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|TRUNCATED_TRANSLOG_EXCEPTION
name|TRUNCATED_TRANSLOG_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TruncatedTranslogException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TruncatedTranslogException
operator|::
operator|new
argument_list|,
literal|43
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|RECOVERY_FAILED_EXCEPTION
name|RECOVERY_FAILED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryFailedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryFailedException
operator|::
operator|new
argument_list|,
literal|44
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_SHARD_RELOCATED_EXCEPTION
name|INDEX_SHARD_RELOCATED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRelocatedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRelocatedException
operator|::
operator|new
argument_list|,
literal|45
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|NODE_SHOULD_NOT_CONNECT_EXCEPTION
name|NODE_SHOULD_NOT_CONNECT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeShouldNotConnectException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeShouldNotConnectException
operator|::
operator|new
argument_list|,
literal|46
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|// 47 used to be for IndexTemplateAlreadyExistsException which was deprecated in 5.1 removed in 6.0
DECL|enum constant|TRANSLOG_CORRUPTED_EXCEPTION
name|TRANSLOG_CORRUPTED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogCorruptedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogCorruptedException
operator|::
operator|new
argument_list|,
literal|48
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|CLUSTER_BLOCK_EXCEPTION
name|CLUSTER_BLOCK_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
operator|::
operator|new
argument_list|,
literal|49
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|FETCH_PHASE_EXECUTION_EXCEPTION
name|FETCH_PHASE_EXECUTION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchPhaseExecutionException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchPhaseExecutionException
operator|::
operator|new
argument_list|,
literal|50
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|// 51 used to be for IndexShardAlreadyExistsException which was deprecated in 5.1 removed in 6.0
DECL|enum constant|VERSION_CONFLICT_ENGINE_EXCEPTION
name|VERSION_CONFLICT_ENGINE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
operator|::
operator|new
argument_list|,
literal|52
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ENGINE_EXCEPTION
name|ENGINE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineException
operator|::
operator|new
argument_list|,
literal|53
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|// 54 was DocumentAlreadyExistsException, which is superseded by VersionConflictEngineException
DECL|enum constant|NO_SUCH_NODE_EXCEPTION
name|NO_SUCH_NODE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|NoSuchNodeException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|NoSuchNodeException
operator|::
operator|new
argument_list|,
literal|55
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SETTINGS_EXCEPTION
name|SETTINGS_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsException
operator|::
operator|new
argument_list|,
literal|56
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_TEMPLATE_MISSING_EXCEPTION
name|INDEX_TEMPLATE_MISSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexTemplateMissingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexTemplateMissingException
operator|::
operator|new
argument_list|,
literal|57
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SEND_REQUEST_TRANSPORT_EXCEPTION
name|SEND_REQUEST_TRANSPORT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|SendRequestTransportException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|SendRequestTransportException
operator|::
operator|new
argument_list|,
literal|58
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ES_REJECTED_EXECUTION_EXCEPTION
name|ES_REJECTED_EXECUTION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
operator|::
operator|new
argument_list|,
literal|59
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|EARLY_TERMINATION_EXCEPTION
name|EARLY_TERMINATION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
operator|.
name|EarlyTerminationException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
operator|.
name|EarlyTerminationException
operator|::
operator|new
argument_list|,
literal|60
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|// 61 used to be for RoutingValidationException
DECL|enum constant|NOT_SERIALIZABLE_EXCEPTION_WRAPPER
name|NOT_SERIALIZABLE_EXCEPTION_WRAPPER
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NotSerializableExceptionWrapper
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NotSerializableExceptionWrapper
operator|::
operator|new
argument_list|,
literal|62
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ALIAS_FILTER_PARSING_EXCEPTION
name|ALIAS_FILTER_PARSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|AliasFilterParsingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|AliasFilterParsingException
operator|::
operator|new
argument_list|,
literal|63
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|// 64 was DeleteByQueryFailedEngineException, which was removed in 5.0
DECL|enum constant|GATEWAY_EXCEPTION
name|GATEWAY_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayException
operator|::
operator|new
argument_list|,
literal|65
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_SHARD_NOT_RECOVERING_EXCEPTION
name|INDEX_SHARD_NOT_RECOVERING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardNotRecoveringException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardNotRecoveringException
operator|::
operator|new
argument_list|,
literal|66
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|HTTP_EXCEPTION
name|HTTP_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpException
operator|::
operator|new
argument_list|,
literal|67
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ELASTICSEARCH_EXCEPTION
name|ELASTICSEARCH_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
operator|::
operator|new
argument_list|,
literal|68
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SNAPSHOT_MISSING_EXCEPTION
name|SNAPSHOT_MISSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotMissingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotMissingException
operator|::
operator|new
argument_list|,
literal|69
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|PRIMARY_MISSING_ACTION_EXCEPTION
name|PRIMARY_MISSING_ACTION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|PrimaryMissingActionException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|PrimaryMissingActionException
operator|::
operator|new
argument_list|,
literal|70
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|FAILED_NODE_EXCEPTION
name|FAILED_NODE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|FailedNodeException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|FailedNodeException
operator|::
operator|new
argument_list|,
literal|71
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SEARCH_PARSE_EXCEPTION
name|SEARCH_PARSE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseException
operator|::
operator|new
argument_list|,
literal|72
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|CONCURRENT_SNAPSHOT_EXECUTION_EXCEPTION
name|CONCURRENT_SNAPSHOT_EXECUTION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|ConcurrentSnapshotExecutionException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|ConcurrentSnapshotExecutionException
operator|::
operator|new
argument_list|,
literal|73
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|BLOB_STORE_EXCEPTION
name|BLOB_STORE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStoreException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStoreException
operator|::
operator|new
argument_list|,
literal|74
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INCOMPATIBLE_CLUSTER_STATE_VERSION_EXCEPTION
name|INCOMPATIBLE_CLUSTER_STATE_VERSION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|IncompatibleClusterStateVersionException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|IncompatibleClusterStateVersionException
operator|::
operator|new
argument_list|,
literal|75
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|RECOVERY_ENGINE_EXCEPTION
name|RECOVERY_ENGINE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|RecoveryEngineException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|RecoveryEngineException
operator|::
operator|new
argument_list|,
literal|76
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|UNCATEGORIZED_EXECUTION_EXCEPTION
name|UNCATEGORIZED_EXECUTION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncategorizedExecutionException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncategorizedExecutionException
operator|::
operator|new
argument_list|,
literal|77
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|TIMESTAMP_PARSING_EXCEPTION
name|TIMESTAMP_PARSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|TimestampParsingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|TimestampParsingException
operator|::
operator|new
argument_list|,
literal|78
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ROUTING_MISSING_EXCEPTION
name|ROUTING_MISSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|RoutingMissingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|RoutingMissingException
operator|::
operator|new
argument_list|,
literal|79
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_FAILED_ENGINE_EXCEPTION
name|INDEX_FAILED_ENGINE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|IndexFailedEngineException
operator|.
name|class
argument_list|,
comment|// deprecated in 6.0, remove in 7.0
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|IndexFailedEngineException
operator|::
operator|new
argument_list|,
literal|80
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_SHARD_RESTORE_FAILED_EXCEPTION
name|INDEX_SHARD_RESTORE_FAILED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRestoreFailedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRestoreFailedException
operator|::
operator|new
argument_list|,
literal|81
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|REPOSITORY_EXCEPTION
name|REPOSITORY_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryException
operator|::
operator|new
argument_list|,
literal|82
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|RECEIVE_TIMEOUT_TRANSPORT_EXCEPTION
name|RECEIVE_TIMEOUT_TRANSPORT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ReceiveTimeoutTransportException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ReceiveTimeoutTransportException
operator|::
operator|new
argument_list|,
literal|83
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|NODE_DISCONNECTED_EXCEPTION
name|NODE_DISCONNECTED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeDisconnectedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeDisconnectedException
operator|::
operator|new
argument_list|,
literal|84
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ALREADY_EXPIRED_EXCEPTION
name|ALREADY_EXPIRED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AlreadyExpiredException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AlreadyExpiredException
operator|::
operator|new
argument_list|,
literal|85
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|AGGREGATION_EXECUTION_EXCEPTION
name|AGGREGATION_EXECUTION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationExecutionException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationExecutionException
operator|::
operator|new
argument_list|,
literal|86
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|// 87 used to be for MergeMappingException
DECL|enum constant|INVALID_INDEX_TEMPLATE_EXCEPTION
name|INVALID_INDEX_TEMPLATE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexTemplateException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexTemplateException
operator|::
operator|new
argument_list|,
literal|88
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|REFRESH_FAILED_ENGINE_EXCEPTION
name|REFRESH_FAILED_ENGINE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|RefreshFailedEngineException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|RefreshFailedEngineException
operator|::
operator|new
argument_list|,
literal|90
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|AGGREGATION_INITIALIZATION_EXCEPTION
name|AGGREGATION_INITIALIZATION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationInitializationException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationInitializationException
operator|::
operator|new
argument_list|,
literal|91
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|DELAY_RECOVERY_EXCEPTION
name|DELAY_RECOVERY_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|DelayRecoveryException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|DelayRecoveryException
operator|::
operator|new
argument_list|,
literal|92
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|// 93 used to be for IndexWarmerMissingException
DECL|enum constant|NO_NODE_AVAILABLE_EXCEPTION
name|NO_NODE_AVAILABLE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|NoNodeAvailableException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|NoNodeAvailableException
operator|::
operator|new
argument_list|,
literal|94
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INVALID_SNAPSHOT_NAME_EXCEPTION
name|INVALID_SNAPSHOT_NAME_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|InvalidSnapshotNameException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|InvalidSnapshotNameException
operator|::
operator|new
argument_list|,
literal|96
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ILLEGAL_INDEX_SHARD_STATE_EXCEPTION
name|ILLEGAL_INDEX_SHARD_STATE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IllegalIndexShardStateException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IllegalIndexShardStateException
operator|::
operator|new
argument_list|,
literal|97
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_SHARD_SNAPSHOT_EXCEPTION
name|INDEX_SHARD_SNAPSHOT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardSnapshotException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardSnapshotException
operator|::
operator|new
argument_list|,
literal|98
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_SHARD_NOT_STARTED_EXCEPTION
name|INDEX_SHARD_NOT_STARTED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardNotStartedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardNotStartedException
operator|::
operator|new
argument_list|,
literal|99
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SEARCH_PHASE_EXECUTION_EXCEPTION
name|SEARCH_PHASE_EXECUTION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
operator|::
operator|new
argument_list|,
literal|100
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ACTION_NOT_FOUND_TRANSPORT_EXCEPTION
name|ACTION_NOT_FOUND_TRANSPORT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ActionNotFoundTransportException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ActionNotFoundTransportException
operator|::
operator|new
argument_list|,
literal|101
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|TRANSPORT_SERIALIZATION_EXCEPTION
name|TRANSPORT_SERIALIZATION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportSerializationException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportSerializationException
operator|::
operator|new
argument_list|,
literal|102
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|REMOTE_TRANSPORT_EXCEPTION
name|REMOTE_TRANSPORT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteTransportException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteTransportException
operator|::
operator|new
argument_list|,
literal|103
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ENGINE_CREATION_FAILURE_EXCEPTION
name|ENGINE_CREATION_FAILURE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineCreationFailureException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineCreationFailureException
operator|::
operator|new
argument_list|,
literal|104
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ROUTING_EXCEPTION
name|ROUTING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingException
operator|::
operator|new
argument_list|,
literal|105
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_SHARD_RECOVERY_EXCEPTION
name|INDEX_SHARD_RECOVERY_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRecoveryException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRecoveryException
operator|::
operator|new
argument_list|,
literal|106
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|REPOSITORY_MISSING_EXCEPTION
name|REPOSITORY_MISSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryMissingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryMissingException
operator|::
operator|new
argument_list|,
literal|107
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|DOCUMENT_SOURCE_MISSING_EXCEPTION
name|DOCUMENT_SOURCE_MISSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentSourceMissingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentSourceMissingException
operator|::
operator|new
argument_list|,
literal|109
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|// 110 used to be FlushNotAllowedEngineException
DECL|enum constant|NO_CLASS_SETTINGS_EXCEPTION
name|NO_CLASS_SETTINGS_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|NoClassSettingsException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|NoClassSettingsException
operator|::
operator|new
argument_list|,
literal|111
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|BIND_TRANSPORT_EXCEPTION
name|BIND_TRANSPORT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BindTransportException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BindTransportException
operator|::
operator|new
argument_list|,
literal|112
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ALIASES_NOT_FOUND_EXCEPTION
name|ALIASES_NOT_FOUND_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|AliasesNotFoundException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|AliasesNotFoundException
operator|::
operator|new
argument_list|,
literal|113
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INDEX_SHARD_RECOVERING_EXCEPTION
name|INDEX_SHARD_RECOVERING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRecoveringException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRecoveringException
operator|::
operator|new
argument_list|,
literal|114
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|TRANSLOG_EXCEPTION
name|TRANSLOG_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogException
operator|::
operator|new
argument_list|,
literal|115
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|PROCESS_CLUSTER_EVENT_TIMEOUT_EXCEPTION
name|PROCESS_CLUSTER_EVENT_TIMEOUT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|ProcessClusterEventTimeoutException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|ProcessClusterEventTimeoutException
operator|::
operator|new
argument_list|,
literal|116
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|RETRY_ON_PRIMARY_EXCEPTION
name|RETRY_ON_PRIMARY_EXCEPTION
argument_list|(
name|ReplicationOperation
operator|.
name|RetryOnPrimaryException
operator|.
name|class
argument_list|,
name|ReplicationOperation
operator|.
name|RetryOnPrimaryException
operator|::
operator|new
argument_list|,
literal|117
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|ELASTICSEARCH_TIMEOUT_EXCEPTION
name|ELASTICSEARCH_TIMEOUT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchTimeoutException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchTimeoutException
operator|::
operator|new
argument_list|,
literal|118
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|QUERY_PHASE_EXECUTION_EXCEPTION
name|QUERY_PHASE_EXECUTION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryPhaseExecutionException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryPhaseExecutionException
operator|::
operator|new
argument_list|,
literal|119
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|REPOSITORY_VERIFICATION_EXCEPTION
name|REPOSITORY_VERIFICATION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryVerificationException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryVerificationException
operator|::
operator|new
argument_list|,
literal|120
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|INVALID_AGGREGATION_PATH_EXCEPTION
name|INVALID_AGGREGATION_PATH_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InvalidAggregationPathException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InvalidAggregationPathException
operator|::
operator|new
argument_list|,
literal|121
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|// 123 used to be IndexAlreadyExistsException and was renamed
DECL|enum constant|RESOURCE_ALREADY_EXISTS_EXCEPTION
name|RESOURCE_ALREADY_EXISTS_EXCEPTION
argument_list|(
name|ResourceAlreadyExistsException
operator|.
name|class
argument_list|,
name|ResourceAlreadyExistsException
operator|::
operator|new
argument_list|,
literal|123
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|// 124 used to be Script.ScriptParseException
DECL|enum constant|HTTP_ON_TRANSPORT_EXCEPTION
name|HTTP_ON_TRANSPORT_EXCEPTION
argument_list|(
name|TcpTransport
operator|.
name|HttpOnTransportException
operator|.
name|class
argument_list|,
name|TcpTransport
operator|.
name|HttpOnTransportException
operator|::
operator|new
argument_list|,
literal|125
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|MAPPER_PARSING_EXCEPTION
name|MAPPER_PARSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
operator|::
operator|new
argument_list|,
literal|126
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SEARCH_CONTEXT_EXCEPTION
name|SEARCH_CONTEXT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchContextException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchContextException
operator|::
operator|new
argument_list|,
literal|127
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SEARCH_SOURCE_BUILDER_EXCEPTION
name|SEARCH_SOURCE_BUILDER_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilderException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilderException
operator|::
operator|new
argument_list|,
literal|128
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
comment|// 129 was EngineClosedException
DECL|enum constant|NO_SHARD_AVAILABLE_ACTION_EXCEPTION
name|NO_SHARD_AVAILABLE_ACTION_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|NoShardAvailableActionException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|NoShardAvailableActionException
operator|::
operator|new
argument_list|,
literal|130
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|UNAVAILABLE_SHARDS_EXCEPTION
name|UNAVAILABLE_SHARDS_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|UnavailableShardsException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|UnavailableShardsException
operator|::
operator|new
argument_list|,
literal|131
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|FLUSH_FAILED_ENGINE_EXCEPTION
name|FLUSH_FAILED_ENGINE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|FlushFailedEngineException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|FlushFailedEngineException
operator|::
operator|new
argument_list|,
literal|132
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|CIRCUIT_BREAKING_EXCEPTION
name|CIRCUIT_BREAKING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreakingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreakingException
operator|::
operator|new
argument_list|,
literal|133
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|NODE_NOT_CONNECTED_EXCEPTION
name|NODE_NOT_CONNECTED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeNotConnectedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeNotConnectedException
operator|::
operator|new
argument_list|,
literal|134
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|STRICT_DYNAMIC_MAPPING_EXCEPTION
name|STRICT_DYNAMIC_MAPPING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|StrictDynamicMappingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|StrictDynamicMappingException
operator|::
operator|new
argument_list|,
literal|135
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|RETRY_ON_REPLICA_EXCEPTION
name|RETRY_ON_REPLICA_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportReplicationAction
operator|.
name|RetryOnReplicaException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportReplicationAction
operator|.
name|RetryOnReplicaException
operator|::
operator|new
argument_list|,
literal|136
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|TYPE_MISSING_EXCEPTION
name|TYPE_MISSING_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|TypeMissingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|TypeMissingException
operator|::
operator|new
argument_list|,
literal|137
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|FAILED_TO_COMMIT_CLUSTER_STATE_EXCEPTION
name|FAILED_TO_COMMIT_CLUSTER_STATE_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
operator|.
name|FailedToCommitClusterStateException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
operator|.
name|FailedToCommitClusterStateException
operator|::
operator|new
argument_list|,
literal|140
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|QUERY_SHARD_EXCEPTION
name|QUERY_SHARD_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardException
operator|::
operator|new
argument_list|,
literal|141
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|NO_LONGER_PRIMARY_SHARD_EXCEPTION
name|NO_LONGER_PRIMARY_SHARD_EXCEPTION
argument_list|(
name|ShardStateAction
operator|.
name|NoLongerPrimaryShardException
operator|.
name|class
argument_list|,
name|ShardStateAction
operator|.
name|NoLongerPrimaryShardException
operator|::
operator|new
argument_list|,
literal|142
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|SCRIPT_EXCEPTION
name|SCRIPT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptException
operator|::
operator|new
argument_list|,
literal|143
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|NOT_MASTER_EXCEPTION
name|NOT_MASTER_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|NotMasterException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|NotMasterException
operator|::
operator|new
argument_list|,
literal|144
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|STATUS_EXCEPTION
name|STATUS_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchStatusException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchStatusException
operator|::
operator|new
argument_list|,
literal|145
argument_list|,
name|UNKNOWN_VERSION_ADDED
argument_list|)
block|,
DECL|enum constant|TASK_CANCELLED_EXCEPTION
name|TASK_CANCELLED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskCancelledException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskCancelledException
operator|::
operator|new
argument_list|,
literal|146
argument_list|,
name|Version
operator|.
name|V_5_1_1_UNRELEASED
argument_list|)
block|,
DECL|enum constant|SHARD_LOCK_OBTAIN_FAILED_EXCEPTION
name|SHARD_LOCK_OBTAIN_FAILED_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|ShardLockObtainFailedException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|ShardLockObtainFailedException
operator|::
operator|new
argument_list|,
literal|147
argument_list|,
name|Version
operator|.
name|V_5_0_2
argument_list|)
block|,
DECL|enum constant|UNKNOWN_NAMED_OBJECT_EXCEPTION
name|UNKNOWN_NAMED_OBJECT_EXCEPTION
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
operator|.
name|UnknownNamedObjectException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
operator|.
name|UnknownNamedObjectException
operator|::
operator|new
argument_list|,
literal|148
argument_list|,
name|Version
operator|.
name|V_5_2_0_UNRELEASED
argument_list|)
block|;
DECL|field|exceptionClass
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|ElasticsearchException
argument_list|>
name|exceptionClass
decl_stmt|;
DECL|field|constructor
specifier|final
name|CheckedFunction
argument_list|<
name|StreamInput
argument_list|,
name|?
extends|extends
name|ElasticsearchException
argument_list|,
name|IOException
argument_list|>
name|constructor
decl_stmt|;
DECL|field|id
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|versionAdded
specifier|final
name|Version
name|versionAdded
decl_stmt|;
DECL|method|ElasticsearchExceptionHandle
parameter_list|<
name|E
extends|extends
name|ElasticsearchException
parameter_list|>
name|ElasticsearchExceptionHandle
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|exceptionClass
parameter_list|,
name|CheckedFunction
argument_list|<
name|StreamInput
argument_list|,
name|E
argument_list|,
name|IOException
argument_list|>
name|constructor
parameter_list|,
name|int
name|id
parameter_list|,
name|Version
name|versionAdded
parameter_list|)
block|{
comment|// We need the exceptionClass because you can't dig it out of the constructor reliably.
name|this
operator|.
name|exceptionClass
operator|=
name|exceptionClass
expr_stmt|;
name|this
operator|.
name|constructor
operator|=
name|constructor
expr_stmt|;
name|this
operator|.
name|versionAdded
operator|=
name|versionAdded
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
block|}
end_enum

begin_static
static|static
block|{
name|ID_TO_SUPPLIER
operator|=
name|unmodifiableMap
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|ElasticsearchExceptionHandle
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|e
lambda|->
name|e
operator|.
name|id
argument_list|,
name|e
lambda|->
name|e
operator|.
name|constructor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE
operator|=
name|unmodifiableMap
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|ElasticsearchExceptionHandle
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|e
lambda|->
name|e
operator|.
name|exceptionClass
argument_list|,
name|e
lambda|->
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_static

begin_function
DECL|method|getIndex
specifier|public
name|Index
name|getIndex
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|index
init|=
name|getMetadata
argument_list|(
name|INDEX_METADATA_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
operator|&&
name|index
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|index_uuid
init|=
name|getMetadata
argument_list|(
name|INDEX_METADATA_KEY_UUID
argument_list|)
decl_stmt|;
return|return
operator|new
name|Index
argument_list|(
name|index
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|index_uuid
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|getShardId
specifier|public
name|ShardId
name|getShardId
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|shard
init|=
name|getMetadata
argument_list|(
name|SHARD_METADATA_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|shard
operator|!=
literal|null
operator|&&
name|shard
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
operator|new
name|ShardId
argument_list|(
name|getIndex
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|shard
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|setIndex
specifier|public
name|void
name|setIndex
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|addMetadata
argument_list|(
name|INDEX_METADATA_KEY
argument_list|,
name|index
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|INDEX_METADATA_KEY_UUID
argument_list|,
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|setIndex
specifier|public
name|void
name|setIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|setIndex
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|,
name|INDEX_UUID_NA_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|setShard
specifier|public
name|void
name|setShard
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|)
block|{
name|setIndex
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|SHARD_METADATA_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|setResources
specifier|public
name|void
name|setResources
parameter_list|(
name|String
name|type
parameter_list|,
name|String
modifier|...
name|id
parameter_list|)
block|{
assert|assert
name|type
operator|!=
literal|null
assert|;
name|addMetadata
argument_list|(
name|RESOURCE_METADATA_ID_KEY
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|RESOURCE_METADATA_TYPE_KEY
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getResourceId
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResourceId
parameter_list|()
block|{
return|return
name|getMetadata
argument_list|(
name|RESOURCE_METADATA_ID_KEY
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getResourceType
specifier|public
name|String
name|getResourceType
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|header
init|=
name|getMetadata
argument_list|(
name|RESOURCE_METADATA_TYPE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
operator|&&
name|header
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
assert|assert
name|header
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
return|return
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|// lower cases and adds underscores to transitions in a name
end_comment

begin_function
DECL|method|toUnderscoreCase
specifier|private
specifier|static
name|String
name|toUnderscoreCase
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|c
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|changed
condition|)
block|{
comment|// copy it over here
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|changed
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|changed
condition|)
block|{
return|return
name|value
return|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

