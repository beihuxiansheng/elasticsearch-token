begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch
package|package
name|org
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NotSerializableExceptionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|support
operator|.
name|LoggerMessageFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|delete
operator|.
name|AliasesNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A base class for all elasticsearch exceptions.  */
end_comment

begin_class
DECL|class|ElasticsearchException
specifier|public
class|class
name|ElasticsearchException
extends|extends
name|RuntimeException
implements|implements
name|ToXContent
block|{
DECL|field|REST_EXCEPTION_SKIP_CAUSE
specifier|public
specifier|static
specifier|final
name|String
name|REST_EXCEPTION_SKIP_CAUSE
init|=
literal|"rest.exception.cause.skip"
decl_stmt|;
DECL|field|REST_EXCEPTION_SKIP_STACK_TRACE
specifier|public
specifier|static
specifier|final
name|String
name|REST_EXCEPTION_SKIP_STACK_TRACE
init|=
literal|"rest.exception.stacktrace.skip"
decl_stmt|;
DECL|field|REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT
specifier|public
specifier|static
specifier|final
name|boolean
name|REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT
init|=
literal|true
decl_stmt|;
DECL|field|REST_EXCEPTION_SKIP_CAUSE_DEFAULT
specifier|public
specifier|static
specifier|final
name|boolean
name|REST_EXCEPTION_SKIP_CAUSE_DEFAULT
init|=
literal|false
decl_stmt|;
DECL|field|INDEX_HEADER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_HEADER_KEY
init|=
literal|"es.index"
decl_stmt|;
DECL|field|SHARD_HEADER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|SHARD_HEADER_KEY
init|=
literal|"es.shard"
decl_stmt|;
DECL|field|RESOURCE_HEADER_TYPE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_HEADER_TYPE_KEY
init|=
literal|"es.resource.type"
decl_stmt|;
DECL|field|RESOURCE_HEADER_ID_KEY
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_HEADER_ID_KEY
init|=
literal|"es.resource.id"
decl_stmt|;
DECL|field|MAPPING
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Constructor
argument_list|<
name|?
extends|extends
name|ElasticsearchException
argument_list|>
argument_list|>
name|MAPPING
decl_stmt|;
DECL|field|headers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Construct a<code>ElasticsearchException</code> with the specified detail message.      *      * The message can be parameterized using {@code {}} as placeholders for the given      * arguments      *      * @param msg the detail message      * @param args the arguments for the message      */
DECL|method|ElasticsearchException
specifier|public
name|ElasticsearchException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|LoggerMessageFormat
operator|.
name|format
argument_list|(
name|msg
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a<code>ElasticsearchException</code> with the specified detail message      * and nested exception.      *      * The message can be parameterized using {@code {}} as placeholders for the given      * arguments      *      * @param msg   the detail message      * @param cause the nested exception      * @param args  the arguments for the message      */
DECL|method|ElasticsearchException
specifier|public
name|ElasticsearchException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|LoggerMessageFormat
operator|.
name|format
argument_list|(
name|msg
argument_list|,
name|args
argument_list|)
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
DECL|method|ElasticsearchException
specifier|public
name|ElasticsearchException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
operator|.
name|readOptionalString
argument_list|()
argument_list|,
name|in
operator|.
name|readThrowable
argument_list|()
argument_list|)
expr_stmt|;
name|readStackTrace
argument_list|(
name|this
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|int
name|numKeys
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numKeys
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|key
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numValues
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numValues
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|j
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new header with the given key.      * This method will replace existing header if a header with the same key already exists      */
DECL|method|addHeader
specifier|public
name|void
name|addHeader
parameter_list|(
name|String
name|key
parameter_list|,
name|String
modifier|...
name|value
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a new header with the given key.      * This method will replace existing header if a header with the same key already exists      */
DECL|method|addHeader
specifier|public
name|void
name|addHeader
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a set of all header keys on this exception      */
DECL|method|getHeaderKeys
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getHeaderKeys
parameter_list|()
block|{
return|return
name|headers
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Returns the list of header values for the given key or {@code null} if not header for the      * given key exists.      */
DECL|method|getHeader
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getHeader
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|headers
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Returns the rest status code associated with this exception.      */
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
name|Throwable
name|cause
init|=
name|unwrapCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|==
name|this
condition|)
block|{
return|return
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
return|;
block|}
else|else
block|{
return|return
name|ExceptionsHelper
operator|.
name|status
argument_list|(
name|cause
argument_list|)
return|;
block|}
block|}
comment|/**      * Unwraps the actual cause from the exception for cases when the exception is a      * {@link ElasticsearchWrapperException}.      *      * @see org.elasticsearch.ExceptionsHelper#unwrapCause(Throwable)      */
DECL|method|unwrapCause
specifier|public
name|Throwable
name|unwrapCause
parameter_list|()
block|{
return|return
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Return the detail message, including the message from the nested exception      * if there is one.      */
DECL|method|getDetailedMessage
specifier|public
name|String
name|getDetailedMessage
parameter_list|()
block|{
if|if
condition|(
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCause
argument_list|()
operator|instanceof
name|ElasticsearchException
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|ElasticsearchException
operator|)
name|getCause
argument_list|()
operator|)
operator|.
name|getDetailedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Retrieve the innermost cause of this exception, if none, returns the current exception.      */
DECL|method|getRootCause
specifier|public
name|Throwable
name|getRootCause
parameter_list|()
block|{
name|Throwable
name|rootCause
init|=
name|this
decl_stmt|;
name|Throwable
name|cause
init|=
name|getCause
argument_list|()
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|!=
name|rootCause
condition|)
block|{
name|rootCause
operator|=
name|cause
expr_stmt|;
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
name|rootCause
return|;
block|}
comment|/**      * Check whether this exception contains an exception of the given type:      * either it is of the given class itself or it contains a nested cause      * of the given type.      *      * @param exType the exception type to look for      * @return whether there is a nested exception of the specified type      */
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Class
name|exType
parameter_list|)
block|{
if|if
condition|(
name|exType
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|exType
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Throwable
name|cause
init|=
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|==
name|this
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|ElasticsearchException
condition|)
block|{
return|return
operator|(
operator|(
name|ElasticsearchException
operator|)
name|cause
operator|)
operator|.
name|contains
argument_list|(
name|exType
argument_list|)
return|;
block|}
else|else
block|{
while|while
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exType
operator|.
name|isInstance
argument_list|(
name|cause
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|cause
operator|.
name|getCause
argument_list|()
operator|==
name|cause
condition|)
block|{
break|break;
block|}
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeThrowable
argument_list|(
name|this
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|writeStackTraces
argument_list|(
name|this
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|headers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|v
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readException
specifier|public
specifier|static
name|ElasticsearchException
name|readException
parameter_list|(
name|StreamInput
name|input
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|ElasticsearchException
argument_list|>
name|elasticsearchException
init|=
name|MAPPING
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|elasticsearchException
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown exception with name: "
operator|+
name|name
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|elasticsearchException
operator|.
name|newInstance
argument_list|(
name|input
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to read exception: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Retruns<code>true</code> iff the given name is a registered for an exception to be read.      */
DECL|method|isRegistered
specifier|public
specifier|static
name|boolean
name|isRegistered
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|MAPPING
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getRegisteredKeys
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getRegisteredKeys
parameter_list|()
block|{
comment|// for testing
return|return
name|MAPPING
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|Throwable
name|ex
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
name|this
condition|)
block|{
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|getExceptionName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"reason"
argument_list|,
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|headers
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"es."
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|xContentHeader
argument_list|(
name|builder
argument_list|,
name|key
operator|.
name|substring
argument_list|(
literal|"es."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|renderHeader
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|paramAsBoolean
argument_list|(
name|REST_EXCEPTION_SKIP_STACK_TRACE
argument_list|,
name|REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT
argument_list|)
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"stack_trace"
argument_list|,
name|ExceptionsHelper
operator|.
name|stackTrace
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
comment|/**      * Renders additional per exception information into the xcontent      */
DECL|method|innerToXContent
specifier|protected
name|void
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|causeToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|/**      * Renders a cause exception as xcontent      */
DECL|method|causeToXContent
specifier|protected
specifier|final
name|void
name|causeToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Throwable
name|cause
init|=
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|params
operator|.
name|paramAsBoolean
argument_list|(
name|REST_EXCEPTION_SKIP_CAUSE
argument_list|,
name|REST_EXCEPTION_SKIP_CAUSE_DEFAULT
argument_list|)
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"caused_by"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|renderHeader
specifier|protected
specifier|final
name|void
name|renderHeader
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasHeader
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|headers
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"es."
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|hasHeader
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"header"
argument_list|)
expr_stmt|;
name|hasHeader
operator|=
literal|true
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|xContentHeader
argument_list|(
name|builder
argument_list|,
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasHeader
condition|)
block|{
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|xContentHeader
specifier|private
name|void
name|xContentHeader
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|key
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|key
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Statis toXContent helper method that also renders non {@link org.elasticsearch.ElasticsearchException} instances as XContent.      */
DECL|method|toXContent
specifier|public
specifier|static
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|,
name|Throwable
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
name|ex
operator|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|ElasticsearchException
condition|)
block|{
operator|(
operator|(
name|ElasticsearchException
operator|)
name|ex
operator|)
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|getExceptionName
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"reason"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"caused_by"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|paramAsBoolean
argument_list|(
name|REST_EXCEPTION_SKIP_STACK_TRACE
argument_list|,
name|REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT
argument_list|)
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"stack_trace"
argument_list|,
name|ExceptionsHelper
operator|.
name|stackTrace
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns the root cause of this exception or mupltiple if different shards caused different exceptions      */
DECL|method|guessRootCauses
specifier|public
name|ElasticsearchException
index|[]
name|guessRootCauses
parameter_list|()
block|{
specifier|final
name|Throwable
name|cause
init|=
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|ElasticsearchException
condition|)
block|{
return|return
operator|(
operator|(
name|ElasticsearchException
operator|)
name|cause
operator|)
operator|.
name|guessRootCauses
argument_list|()
return|;
block|}
return|return
operator|new
name|ElasticsearchException
index|[]
block|{
name|this
block|}
return|;
block|}
comment|/**      * Returns the root cause of this exception or mupltiple if different shards caused different exceptions.      * If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array      * is returned.      */
DECL|method|guessRootCauses
specifier|public
specifier|static
name|ElasticsearchException
index|[]
name|guessRootCauses
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwable
name|ex
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|ElasticsearchException
condition|)
block|{
return|return
operator|(
operator|(
name|ElasticsearchException
operator|)
name|ex
operator|)
operator|.
name|guessRootCauses
argument_list|()
return|;
block|}
return|return
operator|new
name|ElasticsearchException
index|[]
block|{
operator|new
name|ElasticsearchException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getExceptionName
parameter_list|()
block|{
return|return
name|getExceptionName
argument_list|(
name|getCause
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      protected
DECL|method|getExceptionName
name|String
name|getExceptionName
parameter_list|()
block|{
return|return
name|getExceptionName
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Returns a underscore case name for the given exception. This method strips<tt>Elasticsearch</tt> prefixes from exception names.      */
end_comment

begin_function
DECL|method|getExceptionName
specifier|public
specifier|static
name|String
name|getExceptionName
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|String
name|simpleName
init|=
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|simpleName
operator|.
name|startsWith
argument_list|(
literal|"Elasticsearch"
argument_list|)
condition|)
block|{
name|simpleName
operator|=
name|simpleName
operator|.
name|substring
argument_list|(
literal|"Elasticsearch"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|simpleName
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|INDEX_HEADER_KEY
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|getIndex
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SHARD_HEADER_KEY
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|getShardId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|append
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|this
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and      * adds it to the given exception.      */
end_comment

begin_function
DECL|method|readStackTrace
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|T
name|readStackTrace
parameter_list|(
name|T
name|throwable
parameter_list|,
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|stackTraceElements
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|StackTraceElement
index|[]
name|stackTrace
init|=
operator|new
name|StackTraceElement
index|[
name|stackTraceElements
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stackTraceElements
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|declaringClasss
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fileName
init|=
name|in
operator|.
name|readOptionalString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|methodName
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
specifier|final
name|int
name|lineNumber
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|stackTrace
index|[
name|i
index|]
operator|=
operator|new
name|StackTraceElement
argument_list|(
name|declaringClasss
argument_list|,
name|methodName
argument_list|,
name|fileName
argument_list|,
name|lineNumber
argument_list|)
expr_stmt|;
block|}
name|throwable
operator|.
name|setStackTrace
argument_list|(
name|stackTrace
argument_list|)
expr_stmt|;
name|int
name|numSuppressed
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSuppressed
condition|;
name|i
operator|++
control|)
block|{
name|throwable
operator|.
name|addSuppressed
argument_list|(
name|in
operator|.
name|readThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|throwable
return|;
block|}
end_function

begin_comment
comment|/**      * Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.      */
end_comment

begin_function
DECL|method|writeStackTraces
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|T
name|writeStackTraces
parameter_list|(
name|T
name|throwable
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|StackTraceElement
index|[]
name|stackTrace
init|=
name|throwable
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|stackTrace
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|StackTraceElement
name|element
range|:
name|stackTrace
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|element
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|element
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|element
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|element
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Throwable
index|[]
name|suppressed
init|=
name|throwable
operator|.
name|getSuppressed
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|suppressed
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Throwable
name|t
range|:
name|suppressed
control|)
block|{
name|out
operator|.
name|writeThrowable
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|throwable
return|;
block|}
end_function

begin_static
static|static
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ElasticsearchException
argument_list|>
index|[]
name|exceptions
init|=
operator|new
name|Class
index|[]
block|{
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardSnapshotFailedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|IndexFailedEngineException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoverFilesRecoveryException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TruncatedTranslogException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentSourceMissingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentMissingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
operator|.
name|EarlyTerminationException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidAliasNameException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineCreationFailureException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRestoreFailedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|groovy
operator|.
name|GroovyScriptCompilationException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingValidationException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotMissingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRecoveryException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncategorizedExecutionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|SnapshotFailedEngineException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ReduceSearchPhaseException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|RoutingMissingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DeleteFailedEngineException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryFailedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilderException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|RefreshFailedEngineException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardSnapshotException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryPhaseExecutionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|ProcessClusterEventTimeoutException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
operator|.
name|PercolatorException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|ConcurrentSnapshotExecutionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexTemplateAlreadyExistsException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexNameException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|DelayRecoveryException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|AliasFilterParsingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexTemplateException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardNotRecoveringException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexPrimaryShardNotAllocatedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|UnavailableShardsException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ActionNotFoundTransportException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|TranslogRecoveryPerformer
operator|.
name|BatchOperationException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardClosedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|NoNodeAvailableException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|FailedNodeException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|TypeMissingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidTypeNameException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
operator|.
name|SizeHeaderFrameDecoder
operator|.
name|HttpOnTransportException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CancellableThreads
operator|.
name|ExecutionCancelledException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotCreationException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|groovy
operator|.
name|GroovyScriptExecutionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexTemplateMissingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeNotConnectedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRecoveringException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardStartedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexClosedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryMissingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|warmer
operator|.
name|IndexWarmerMissingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|PercolateException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|expression
operator|.
name|ExpressionScriptExecutionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|NoShardAvailableActionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ReceiveTimeoutTransportException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|BindHttpException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteTransportException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRelocatedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|InvalidSnapshotNameException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryVerificationException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ActionTransportException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|NoClassSettingsException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeShouldNotConnectException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportReplicationAction
operator|.
name|RetryOnReplicaException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsPhaseExecutionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotRestoreException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
operator|.
name|ScriptParseException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchGenerationException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|TimestampParsingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|NoSuchNodeException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BindTransportException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchContextException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogCorruptedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportSerializationException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|IncompatibleClusterStateVersionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexCreationException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MergeMappingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NotSerializableTransportException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchTimeoutException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchContextMissingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|SendRequestTransportException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexShardAlreadyExistsException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentAlreadyExistsException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|expression
operator|.
name|ExpressionScriptCompilationException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardNotStartedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|StrictDynamicMappingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineClosedException
operator|.
name|class
block|,
name|AliasesNotFoundException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ResponseHandlerFailureTransportException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchPhaseExecutionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeDisconnectedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreakingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationInitializationException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InvalidAggregationPathException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IllegalShardRoutingStateException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|FlushFailedEngineException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AlreadyExpiredException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|FlushNotAllowedEngineException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|RecoveryEngineException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStoreException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRestoreException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParsingException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportReplicationAction
operator|.
name|RetryOnPrimaryException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DeleteByQueryFailedEngineException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|MasterNotDiscoveredException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastShardOperationFailedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationExecutionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|PrimaryMissingActionException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|CreateFailedEngineException
operator|.
name|class
block|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IllegalIndexShardStateException
operator|.
name|class
block|,
name|ElasticsearchSecurityException
operator|.
name|class
block|,
name|ResourceNotFoundException
operator|.
name|class
block|,
name|IndexNotFoundException
operator|.
name|class
block|,
name|ShardNotFoundException
operator|.
name|class
block|,
name|NotSerializableExceptionWrapper
operator|.
name|class
block|,
name|Discovery
operator|.
name|FailedToCommitClusterStateException
operator|.
name|class
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Constructor
argument_list|<
name|?
extends|extends
name|ElasticsearchException
argument_list|>
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|exceptions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|ElasticsearchException
argument_list|>
name|e
range|:
name|exceptions
control|)
block|{
name|String
name|name
init|=
name|e
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|ElasticsearchException
argument_list|>
name|constructor
init|=
name|e
operator|.
name|getDeclaredConstructor
argument_list|(
name|StreamInput
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|name
operator|+
literal|" has not StreamInput ctor"
argument_list|)
throw|;
block|}
name|mapping
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|constructor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to register ["
operator|+
name|name
operator|+
literal|"] exception must have a public StreamInput ctor"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
name|MAPPING
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
end_static

begin_function
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|index
init|=
name|getHeader
argument_list|(
name|INDEX_HEADER_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
operator|&&
name|index
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
name|index
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|getShardId
specifier|public
name|ShardId
name|getShardId
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|shard
init|=
name|getHeader
argument_list|(
name|SHARD_HEADER_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|shard
operator|!=
literal|null
operator|&&
name|shard
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
operator|new
name|ShardId
argument_list|(
name|getIndex
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|shard
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|setIndex
specifier|public
name|void
name|setIndex
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|addHeader
argument_list|(
name|INDEX_HEADER_KEY
argument_list|,
name|index
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|setIndex
specifier|public
name|void
name|setIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|addHeader
argument_list|(
name|INDEX_HEADER_KEY
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|setShard
specifier|public
name|void
name|setShard
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|)
block|{
name|addHeader
argument_list|(
name|INDEX_HEADER_KEY
argument_list|,
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|addHeader
argument_list|(
name|SHARD_HEADER_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|setResources
specifier|public
name|void
name|setResources
parameter_list|(
name|String
name|type
parameter_list|,
name|String
modifier|...
name|id
parameter_list|)
block|{
assert|assert
name|type
operator|!=
literal|null
assert|;
name|addHeader
argument_list|(
name|RESOURCE_HEADER_ID_KEY
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|addHeader
argument_list|(
name|RESOURCE_HEADER_TYPE_KEY
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getResourceId
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResourceId
parameter_list|()
block|{
return|return
name|getHeader
argument_list|(
name|RESOURCE_HEADER_ID_KEY
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getResourceType
specifier|public
name|String
name|getResourceType
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|header
init|=
name|getHeader
argument_list|(
name|RESOURCE_HEADER_TYPE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
operator|&&
name|header
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
assert|assert
name|header
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
return|return
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|renderThrowable
specifier|public
specifier|static
name|void
name|renderThrowable
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|,
name|Throwable
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
specifier|final
name|ElasticsearchException
index|[]
name|rootCauses
init|=
name|ElasticsearchException
operator|.
name|guessRootCauses
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"root_cause"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|ElasticsearchException
name|rootCause
range|:
name|rootCauses
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|rootCause
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
operator|new
name|ToXContent
operator|.
name|DelegatingMapParams
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ElasticsearchException
operator|.
name|REST_EXCEPTION_SKIP_CAUSE
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|ElasticsearchException
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

