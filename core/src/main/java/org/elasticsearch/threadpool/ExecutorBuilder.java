begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Base class for executor builders.  *  * @param<U> the underlying type of the executor settings  */
end_comment

begin_class
DECL|class|ExecutorBuilder
specifier|public
specifier|abstract
class|class
name|ExecutorBuilder
parameter_list|<
name|U
extends|extends
name|ExecutorBuilder
operator|.
name|ExecutorSettings
parameter_list|>
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|ExecutorBuilder
specifier|public
name|ExecutorBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|name
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|settingsKey
specifier|protected
specifier|static
name|String
name|settingsKey
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
return|return
name|String
operator|.
name|join
argument_list|(
literal|"."
argument_list|,
name|prefix
argument_list|,
name|key
argument_list|)
return|;
block|}
comment|/**      * The list of settings this builder will register.      *      * @return the list of registered settings      */
DECL|method|getRegisteredSettings
specifier|public
specifier|abstract
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getRegisteredSettings
parameter_list|()
function_decl|;
comment|/**      * Return an executor settings object from the node-level settings.      *      * @param settings the node-level settings      * @return the executor settings object      */
DECL|method|getSettings
specifier|abstract
name|U
name|getSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
function_decl|;
comment|/**      * Builds the executor with the specified executor settings.      *      * @param settings      the executor settings      * @param threadContext the current thread context      * @return a new executor built from the specified executor settings      */
DECL|method|build
specifier|abstract
name|ThreadPool
operator|.
name|ExecutorHolder
name|build
parameter_list|(
name|U
name|settings
parameter_list|,
name|ThreadContext
name|threadContext
parameter_list|)
function_decl|;
comment|/**      * Format the thread pool info object for this executor.      *      * @param info the thread pool info object to format      * @return a formatted thread pool info (useful for logging)      */
DECL|method|formatInfo
specifier|abstract
name|String
name|formatInfo
parameter_list|(
name|ThreadPool
operator|.
name|Info
name|info
parameter_list|)
function_decl|;
DECL|class|ExecutorSettings
specifier|abstract
specifier|static
class|class
name|ExecutorSettings
block|{
DECL|field|nodeName
specifier|protected
specifier|final
name|String
name|nodeName
decl_stmt|;
DECL|method|ExecutorSettings
name|ExecutorSettings
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

