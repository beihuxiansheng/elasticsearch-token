begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ExecutorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|QueueResizingEsThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_comment
comment|/**  * A builder for executors that automatically adjust the queue length as needed, depending on  * Little's Law. See https://en.wikipedia.org/wiki/Little's_law for more information.  */
end_comment

begin_class
DECL|class|AutoQueueAdjustingExecutorBuilder
specifier|public
specifier|final
class|class
name|AutoQueueAdjustingExecutorBuilder
extends|extends
name|ExecutorBuilder
argument_list|<
name|AutoQueueAdjustingExecutorBuilder
operator|.
name|AutoExecutorSettings
argument_list|>
block|{
DECL|field|sizeSetting
specifier|private
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|sizeSetting
decl_stmt|;
DECL|field|queueSizeSetting
specifier|private
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|queueSizeSetting
decl_stmt|;
DECL|field|minQueueSizeSetting
specifier|private
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|minQueueSizeSetting
decl_stmt|;
DECL|field|maxQueueSizeSetting
specifier|private
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|maxQueueSizeSetting
decl_stmt|;
DECL|field|targetedResponseTimeSetting
specifier|private
specifier|final
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|targetedResponseTimeSetting
decl_stmt|;
DECL|field|frameSizeSetting
specifier|private
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|frameSizeSetting
decl_stmt|;
DECL|method|AutoQueueAdjustingExecutorBuilder
name|AutoQueueAdjustingExecutorBuilder
parameter_list|(
specifier|final
name|Settings
name|settings
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|size
parameter_list|,
specifier|final
name|int
name|initialQueueSize
parameter_list|,
specifier|final
name|int
name|minQueueSize
parameter_list|,
specifier|final
name|int
name|maxQueueSize
parameter_list|,
specifier|final
name|int
name|frameSize
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
specifier|final
name|String
name|prefix
init|=
literal|"thread_pool."
operator|+
name|name
decl_stmt|;
specifier|final
name|String
name|sizeKey
init|=
name|settingsKey
argument_list|(
name|prefix
argument_list|,
literal|"size"
argument_list|)
decl_stmt|;
name|this
operator|.
name|sizeSetting
operator|=
operator|new
name|Setting
argument_list|<>
argument_list|(
name|sizeKey
argument_list|,
name|s
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|size
argument_list|)
argument_list|,
name|s
lambda|->
name|Setting
operator|.
name|parseInt
argument_list|(
name|s
argument_list|,
literal|1
argument_list|,
name|applyHardSizeLimit
argument_list|(
name|settings
argument_list|,
name|name
argument_list|)
argument_list|,
name|sizeKey
argument_list|)
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
expr_stmt|;
specifier|final
name|String
name|queueSizeKey
init|=
name|settingsKey
argument_list|(
name|prefix
argument_list|,
literal|"queue_size"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|minSizeKey
init|=
name|settingsKey
argument_list|(
name|prefix
argument_list|,
literal|"min_queue_size"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|maxSizeKey
init|=
name|settingsKey
argument_list|(
name|prefix
argument_list|,
literal|"max_queue_size"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|frameSizeKey
init|=
name|settingsKey
argument_list|(
name|prefix
argument_list|,
literal|"auto_queue_frame_size"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|targetedResponseTimeKey
init|=
name|settingsKey
argument_list|(
name|prefix
argument_list|,
literal|"target_response_time"
argument_list|)
decl_stmt|;
name|this
operator|.
name|targetedResponseTimeSetting
operator|=
name|Setting
operator|.
name|timeSetting
argument_list|(
name|targetedResponseTimeKey
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|10
argument_list|)
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueSizeSetting
operator|=
name|Setting
operator|.
name|intSetting
argument_list|(
name|queueSizeKey
argument_list|,
name|initialQueueSize
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
expr_stmt|;
comment|// These temp settings are used to validate the min and max settings below
name|Setting
argument_list|<
name|Integer
argument_list|>
name|tempMaxQueueSizeSetting
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
name|maxSizeKey
argument_list|,
name|maxQueueSize
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|Setting
argument_list|<
name|Integer
argument_list|>
name|tempMinQueueSizeSetting
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
name|minSizeKey
argument_list|,
name|minQueueSize
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|this
operator|.
name|minQueueSizeSetting
operator|=
operator|new
name|Setting
argument_list|<>
argument_list|(
name|minSizeKey
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|minQueueSize
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Setting
operator|.
name|parseInt
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|tempMaxQueueSizeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|minSizeKey
argument_list|)
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxQueueSizeSetting
operator|=
operator|new
name|Setting
argument_list|<>
argument_list|(
name|maxSizeKey
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|maxQueueSize
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|Setting
operator|.
name|parseInt
argument_list|(
name|s
argument_list|,
name|tempMinQueueSizeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|maxSizeKey
argument_list|)
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
expr_stmt|;
name|this
operator|.
name|frameSizeSetting
operator|=
name|Setting
operator|.
name|intSetting
argument_list|(
name|frameSizeKey
argument_list|,
name|frameSize
argument_list|,
literal|100
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRegisteredSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getRegisteredSettings
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|sizeSetting
argument_list|,
name|queueSizeSetting
argument_list|,
name|minQueueSizeSetting
argument_list|,
name|maxQueueSizeSetting
argument_list|,
name|frameSizeSetting
argument_list|,
name|targetedResponseTimeSetting
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSettings
name|AutoExecutorSettings
name|getSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
specifier|final
name|String
name|nodeName
init|=
name|Node
operator|.
name|NODE_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|sizeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|int
name|initialQueueSize
init|=
name|queueSizeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|int
name|minQueueSize
init|=
name|minQueueSizeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxQueueSize
init|=
name|maxQueueSizeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|int
name|frameSize
init|=
name|frameSizeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|TimeValue
name|targetedResponseTime
init|=
name|targetedResponseTimeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
return|return
operator|new
name|AutoExecutorSettings
argument_list|(
name|nodeName
argument_list|,
name|size
argument_list|,
name|initialQueueSize
argument_list|,
name|minQueueSize
argument_list|,
name|maxQueueSize
argument_list|,
name|frameSize
argument_list|,
name|targetedResponseTime
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|build
name|ThreadPool
operator|.
name|ExecutorHolder
name|build
parameter_list|(
specifier|final
name|AutoExecutorSettings
name|settings
parameter_list|,
specifier|final
name|ThreadContext
name|threadContext
parameter_list|)
block|{
name|int
name|size
init|=
name|settings
operator|.
name|size
decl_stmt|;
name|int
name|initialQueueSize
init|=
name|settings
operator|.
name|initialQueueSize
decl_stmt|;
name|int
name|minQueueSize
init|=
name|settings
operator|.
name|minQueueSize
decl_stmt|;
name|int
name|maxQueueSize
init|=
name|settings
operator|.
name|maxQueueSize
decl_stmt|;
name|int
name|frameSize
init|=
name|settings
operator|.
name|frameSize
decl_stmt|;
name|TimeValue
name|targetedResponseTime
init|=
name|settings
operator|.
name|targetedResponseTime
decl_stmt|;
specifier|final
name|ThreadFactory
name|threadFactory
init|=
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|EsExecutors
operator|.
name|threadName
argument_list|(
name|settings
operator|.
name|nodeName
argument_list|,
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorService
name|executor
init|=
name|EsExecutors
operator|.
name|newAutoQueueFixed
argument_list|(
name|name
argument_list|()
argument_list|,
name|size
argument_list|,
name|initialQueueSize
argument_list|,
name|minQueueSize
argument_list|,
name|maxQueueSize
argument_list|,
name|frameSize
argument_list|,
name|targetedResponseTime
argument_list|,
name|threadFactory
argument_list|,
name|threadContext
argument_list|)
decl_stmt|;
comment|// TODO: in a subsequent change we hope to extend ThreadPool.Info to be more specific for the thread pool type
specifier|final
name|ThreadPool
operator|.
name|Info
name|info
init|=
operator|new
name|ThreadPool
operator|.
name|Info
argument_list|(
name|name
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED_AUTO_QUEUE_SIZE
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
operator|new
name|SizeValue
argument_list|(
name|initialQueueSize
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ThreadPool
operator|.
name|ExecutorHolder
argument_list|(
name|executor
argument_list|,
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|formatInfo
name|String
name|formatInfo
parameter_list|(
name|ThreadPool
operator|.
name|Info
name|info
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"name [%s], size [%d], queue size [%s]"
argument_list|,
name|info
operator|.
name|getName
argument_list|()
argument_list|,
name|info
operator|.
name|getMax
argument_list|()
argument_list|,
name|info
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|null
condition|?
literal|"unbounded"
else|:
name|info
operator|.
name|getQueueSize
argument_list|()
argument_list|)
return|;
block|}
DECL|class|AutoExecutorSettings
specifier|static
specifier|final
class|class
name|AutoExecutorSettings
extends|extends
name|ExecutorBuilder
operator|.
name|ExecutorSettings
block|{
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|field|initialQueueSize
specifier|private
specifier|final
name|int
name|initialQueueSize
decl_stmt|;
DECL|field|minQueueSize
specifier|private
specifier|final
name|int
name|minQueueSize
decl_stmt|;
DECL|field|maxQueueSize
specifier|private
specifier|final
name|int
name|maxQueueSize
decl_stmt|;
DECL|field|frameSize
specifier|private
specifier|final
name|int
name|frameSize
decl_stmt|;
DECL|field|targetedResponseTime
specifier|private
specifier|final
name|TimeValue
name|targetedResponseTime
decl_stmt|;
DECL|method|AutoExecutorSettings
name|AutoExecutorSettings
parameter_list|(
specifier|final
name|String
name|nodeName
parameter_list|,
specifier|final
name|int
name|size
parameter_list|,
specifier|final
name|int
name|initialQueueSize
parameter_list|,
specifier|final
name|int
name|minQueueSize
parameter_list|,
specifier|final
name|int
name|maxQueueSize
parameter_list|,
specifier|final
name|int
name|frameSize
parameter_list|,
specifier|final
name|TimeValue
name|targetedResponseTime
parameter_list|)
block|{
name|super
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|initialQueueSize
operator|=
name|initialQueueSize
expr_stmt|;
name|this
operator|.
name|minQueueSize
operator|=
name|minQueueSize
expr_stmt|;
name|this
operator|.
name|maxQueueSize
operator|=
name|maxQueueSize
expr_stmt|;
name|this
operator|.
name|frameSize
operator|=
name|frameSize
expr_stmt|;
name|this
operator|.
name|targetedResponseTime
operator|=
name|targetedResponseTime
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

