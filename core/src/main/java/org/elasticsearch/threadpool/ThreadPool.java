begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsAbortPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|XRejectedExecutionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_class
DECL|class|ThreadPool
specifier|public
class|class
name|ThreadPool
extends|extends
name|AbstractComponent
implements|implements
name|Closeable
block|{
DECL|class|Names
specifier|public
specifier|static
class|class
name|Names
block|{
DECL|field|SAME
specifier|public
specifier|static
specifier|final
name|String
name|SAME
init|=
literal|"same"
decl_stmt|;
DECL|field|GENERIC
specifier|public
specifier|static
specifier|final
name|String
name|GENERIC
init|=
literal|"generic"
decl_stmt|;
DECL|field|LISTENER
specifier|public
specifier|static
specifier|final
name|String
name|LISTENER
init|=
literal|"listener"
decl_stmt|;
DECL|field|GET
specifier|public
specifier|static
specifier|final
name|String
name|GET
init|=
literal|"get"
decl_stmt|;
DECL|field|INDEX
specifier|public
specifier|static
specifier|final
name|String
name|INDEX
init|=
literal|"index"
decl_stmt|;
DECL|field|BULK
specifier|public
specifier|static
specifier|final
name|String
name|BULK
init|=
literal|"bulk"
decl_stmt|;
DECL|field|SEARCH
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH
init|=
literal|"search"
decl_stmt|;
DECL|field|MANAGEMENT
specifier|public
specifier|static
specifier|final
name|String
name|MANAGEMENT
init|=
literal|"management"
decl_stmt|;
DECL|field|FLUSH
specifier|public
specifier|static
specifier|final
name|String
name|FLUSH
init|=
literal|"flush"
decl_stmt|;
DECL|field|REFRESH
specifier|public
specifier|static
specifier|final
name|String
name|REFRESH
init|=
literal|"refresh"
decl_stmt|;
DECL|field|WARMER
specifier|public
specifier|static
specifier|final
name|String
name|WARMER
init|=
literal|"warmer"
decl_stmt|;
DECL|field|SNAPSHOT
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT
init|=
literal|"snapshot"
decl_stmt|;
DECL|field|FORCE_MERGE
specifier|public
specifier|static
specifier|final
name|String
name|FORCE_MERGE
init|=
literal|"force_merge"
decl_stmt|;
DECL|field|FETCH_SHARD_STARTED
specifier|public
specifier|static
specifier|final
name|String
name|FETCH_SHARD_STARTED
init|=
literal|"fetch_shard_started"
decl_stmt|;
DECL|field|FETCH_SHARD_STORE
specifier|public
specifier|static
specifier|final
name|String
name|FETCH_SHARD_STORE
init|=
literal|"fetch_shard_store"
decl_stmt|;
block|}
DECL|enum|ThreadPoolType
specifier|public
enum|enum
name|ThreadPoolType
block|{
DECL|enum constant|DIRECT
name|DIRECT
argument_list|(
literal|"direct"
argument_list|)
block|,
DECL|enum constant|FIXED
name|FIXED
argument_list|(
literal|"fixed"
argument_list|)
block|,
DECL|enum constant|SCALING
name|SCALING
argument_list|(
literal|"scaling"
argument_list|)
block|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|ThreadPoolType
name|ThreadPoolType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|field|TYPE_MAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadPoolType
argument_list|>
name|TYPE_MAP
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadPoolType
argument_list|>
name|typeMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ThreadPoolType
name|threadPoolType
range|:
name|ThreadPoolType
operator|.
name|values
argument_list|()
control|)
block|{
name|typeMap
operator|.
name|put
argument_list|(
name|threadPoolType
operator|.
name|getType
argument_list|()
argument_list|,
name|threadPoolType
argument_list|)
expr_stmt|;
block|}
name|TYPE_MAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|typeMap
argument_list|)
expr_stmt|;
block|}
DECL|method|fromType
specifier|public
specifier|static
name|ThreadPoolType
name|fromType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|ThreadPoolType
name|threadPoolType
init|=
name|TYPE_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadPoolType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no ThreadPoolType for "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
name|threadPoolType
return|;
block|}
block|}
DECL|field|THREAD_POOL_TYPES
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadPoolType
argument_list|>
name|THREAD_POOL_TYPES
decl_stmt|;
static|static
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|ThreadPoolType
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SAME
argument_list|,
name|ThreadPoolType
operator|.
name|DIRECT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|GENERIC
argument_list|,
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|LISTENER
argument_list|,
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|GET
argument_list|,
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|INDEX
argument_list|,
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|BULK
argument_list|,
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SEARCH
argument_list|,
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|MANAGEMENT
argument_list|,
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|FLUSH
argument_list|,
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|REFRESH
argument_list|,
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|WARMER
argument_list|,
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SNAPSHOT
argument_list|,
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|FORCE_MERGE
argument_list|,
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|FETCH_SHARD_STARTED
argument_list|,
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Names
operator|.
name|FETCH_SHARD_STORE
argument_list|,
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
name|THREAD_POOL_TYPES
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|field|executors
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ExecutorHolder
argument_list|>
name|executors
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|scheduler
decl_stmt|;
DECL|field|estimatedTimeThread
specifier|private
specifier|final
name|EstimatedTimeThread
name|estimatedTimeThread
decl_stmt|;
DECL|field|DIRECT_EXECUTOR
specifier|static
specifier|final
name|Executor
name|DIRECT_EXECUTOR
init|=
name|command
lambda|->
name|command
operator|.
name|run
argument_list|()
decl_stmt|;
DECL|field|threadContext
specifier|private
specifier|final
name|ThreadContext
name|threadContext
decl_stmt|;
DECL|field|builders
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExecutorBuilder
argument_list|>
name|builders
decl_stmt|;
DECL|method|builders
specifier|public
name|Collection
argument_list|<
name|ExecutorBuilder
argument_list|>
name|builders
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|builders
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|field|ESTIMATED_TIME_INTERVAL_SETTING
specifier|public
specifier|static
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|ESTIMATED_TIME_INTERVAL_SETTING
init|=
name|Setting
operator|.
name|timeSetting
argument_list|(
literal|"thread_pool.estimated_time_interval"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|200
argument_list|)
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|method|ThreadPool
specifier|public
name|ThreadPool
parameter_list|(
specifier|final
name|Settings
name|settings
parameter_list|,
specifier|final
name|ExecutorBuilder
argument_list|<
name|?
argument_list|>
modifier|...
name|customBuilders
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
assert|assert
name|Node
operator|.
name|NODE_NAME_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
assert|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExecutorBuilder
argument_list|>
name|builders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|availableProcessors
init|=
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|int
name|halfProcMaxAt5
init|=
name|halfNumberOfProcessorsMaxFive
argument_list|(
name|availableProcessors
argument_list|)
decl_stmt|;
specifier|final
name|int
name|halfProcMaxAt10
init|=
name|halfNumberOfProcessorsMaxTen
argument_list|(
name|availableProcessors
argument_list|)
decl_stmt|;
specifier|final
name|int
name|genericThreadPoolMax
init|=
name|boundedBy
argument_list|(
literal|4
operator|*
name|availableProcessors
argument_list|,
literal|128
argument_list|,
literal|512
argument_list|)
decl_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|ScalingExecutorBuilder
argument_list|(
name|Names
operator|.
name|GENERIC
argument_list|,
literal|4
argument_list|,
name|genericThreadPoolMax
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|INDEX
argument_list|,
operator|new
name|FixedExecutorBuilder
argument_list|(
name|settings
argument_list|,
name|Names
operator|.
name|INDEX
argument_list|,
name|availableProcessors
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|BULK
argument_list|,
operator|new
name|FixedExecutorBuilder
argument_list|(
name|settings
argument_list|,
name|Names
operator|.
name|BULK
argument_list|,
name|availableProcessors
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|GET
argument_list|,
operator|new
name|FixedExecutorBuilder
argument_list|(
name|settings
argument_list|,
name|Names
operator|.
name|GET
argument_list|,
name|availableProcessors
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SEARCH
argument_list|,
operator|new
name|FixedExecutorBuilder
argument_list|(
name|settings
argument_list|,
name|Names
operator|.
name|SEARCH
argument_list|,
name|searchThreadPoolSize
argument_list|(
name|availableProcessors
argument_list|)
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|MANAGEMENT
argument_list|,
operator|new
name|ScalingExecutorBuilder
argument_list|(
name|Names
operator|.
name|MANAGEMENT
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// no queue as this means clients will need to handle rejections on listener queue even if the operation succeeded
comment|// the assumption here is that the listeners should be very lightweight on the listeners side
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|LISTENER
argument_list|,
operator|new
name|FixedExecutorBuilder
argument_list|(
name|settings
argument_list|,
name|Names
operator|.
name|LISTENER
argument_list|,
name|halfProcMaxAt10
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|FLUSH
argument_list|,
operator|new
name|ScalingExecutorBuilder
argument_list|(
name|Names
operator|.
name|FLUSH
argument_list|,
literal|1
argument_list|,
name|halfProcMaxAt5
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|REFRESH
argument_list|,
operator|new
name|ScalingExecutorBuilder
argument_list|(
name|Names
operator|.
name|REFRESH
argument_list|,
literal|1
argument_list|,
name|halfProcMaxAt10
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|WARMER
argument_list|,
operator|new
name|ScalingExecutorBuilder
argument_list|(
name|Names
operator|.
name|WARMER
argument_list|,
literal|1
argument_list|,
name|halfProcMaxAt5
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SNAPSHOT
argument_list|,
operator|new
name|ScalingExecutorBuilder
argument_list|(
name|Names
operator|.
name|SNAPSHOT
argument_list|,
literal|1
argument_list|,
name|halfProcMaxAt5
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|FETCH_SHARD_STARTED
argument_list|,
operator|new
name|ScalingExecutorBuilder
argument_list|(
name|Names
operator|.
name|FETCH_SHARD_STARTED
argument_list|,
literal|1
argument_list|,
literal|2
operator|*
name|availableProcessors
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|FORCE_MERGE
argument_list|,
operator|new
name|FixedExecutorBuilder
argument_list|(
name|settings
argument_list|,
name|Names
operator|.
name|FORCE_MERGE
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|Names
operator|.
name|FETCH_SHARD_STORE
argument_list|,
operator|new
name|ScalingExecutorBuilder
argument_list|(
name|Names
operator|.
name|FETCH_SHARD_STORE
argument_list|,
literal|1
argument_list|,
literal|2
operator|*
name|availableProcessors
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ExecutorBuilder
argument_list|<
name|?
argument_list|>
name|builder
range|:
name|customBuilders
control|)
block|{
if|if
condition|(
name|builders
operator|.
name|containsKey
argument_list|(
name|builder
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"builder with name ["
operator|+
name|builder
operator|.
name|name
argument_list|()
operator|+
literal|"] already exists"
argument_list|)
throw|;
block|}
name|builders
operator|.
name|put
argument_list|(
name|builder
operator|.
name|name
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|builders
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|builders
argument_list|)
expr_stmt|;
name|threadContext
operator|=
operator|new
name|ThreadContext
argument_list|(
name|settings
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExecutorHolder
argument_list|>
name|executors
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ExecutorBuilder
argument_list|>
name|entry
range|:
name|builders
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|ExecutorBuilder
operator|.
name|ExecutorSettings
name|executorSettings
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getSettings
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorHolder
name|executorHolder
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|build
argument_list|(
name|executorSettings
argument_list|,
name|threadContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|executors
operator|.
name|containsKey
argument_list|(
name|executorHolder
operator|.
name|info
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"duplicate executors with name ["
operator|+
name|executorHolder
operator|.
name|info
operator|.
name|getName
argument_list|()
operator|+
literal|"] registered"
argument_list|)
throw|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"created thread pool: {}"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|formatInfo
argument_list|(
name|executorHolder
operator|.
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|executors
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|executorHolder
argument_list|)
expr_stmt|;
block|}
name|executors
operator|.
name|put
argument_list|(
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|ExecutorHolder
argument_list|(
name|DIRECT_EXECUTOR
argument_list|,
operator|new
name|Info
argument_list|(
name|Names
operator|.
name|SAME
argument_list|,
name|ThreadPoolType
operator|.
name|DIRECT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|executors
operator|=
name|unmodifiableMap
argument_list|(
name|executors
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"scheduler"
argument_list|)
argument_list|,
operator|new
name|EsAbortPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|setExecuteExistingDelayedTasksAfterShutdownPolicy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|setContinueExistingPeriodicTasksAfterShutdownPolicy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|setRemoveOnCancelPolicy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TimeValue
name|estimatedTimeInterval
init|=
name|ESTIMATED_TIME_INTERVAL_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|this
operator|.
name|estimatedTimeThread
operator|=
operator|new
name|EstimatedTimeThread
argument_list|(
name|EsExecutors
operator|.
name|threadName
argument_list|(
name|settings
argument_list|,
literal|"[timer]"
argument_list|)
argument_list|,
name|estimatedTimeInterval
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|estimatedTimeThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|estimatedTimeInMillis
specifier|public
name|long
name|estimatedTimeInMillis
parameter_list|()
block|{
return|return
name|estimatedTimeThread
operator|.
name|estimatedTimeInMillis
argument_list|()
return|;
block|}
DECL|method|estimatedTimeInMillisCounter
specifier|public
name|Counter
name|estimatedTimeInMillisCounter
parameter_list|()
block|{
return|return
name|estimatedTimeThread
operator|.
name|counter
return|;
block|}
DECL|method|info
specifier|public
name|ThreadPoolInfo
name|info
parameter_list|()
block|{
name|List
argument_list|<
name|Info
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExecutorHolder
name|holder
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|holder
operator|.
name|info
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// no need to have info on "same" thread pool
if|if
condition|(
literal|"same"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|infos
operator|.
name|add
argument_list|(
name|holder
operator|.
name|info
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ThreadPoolInfo
argument_list|(
name|infos
argument_list|)
return|;
block|}
DECL|method|info
specifier|public
name|Info
name|info
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ExecutorHolder
name|holder
init|=
name|executors
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|holder
operator|.
name|info
return|;
block|}
DECL|method|stats
specifier|public
name|ThreadPoolStats
name|stats
parameter_list|()
block|{
name|List
argument_list|<
name|ThreadPoolStats
operator|.
name|Stats
argument_list|>
name|stats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExecutorHolder
name|holder
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|holder
operator|.
name|info
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// no need to have info on "same" thread pool
if|if
condition|(
literal|"same"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|threads
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|queue
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|active
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|rejected
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|largest
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|completed
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|holder
operator|.
name|executor
argument_list|()
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
name|ThreadPoolExecutor
name|threadPoolExecutor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|holder
operator|.
name|executor
argument_list|()
decl_stmt|;
name|threads
operator|=
name|threadPoolExecutor
operator|.
name|getPoolSize
argument_list|()
expr_stmt|;
name|queue
operator|=
name|threadPoolExecutor
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|active
operator|=
name|threadPoolExecutor
operator|.
name|getActiveCount
argument_list|()
expr_stmt|;
name|largest
operator|=
name|threadPoolExecutor
operator|.
name|getLargestPoolSize
argument_list|()
expr_stmt|;
name|completed
operator|=
name|threadPoolExecutor
operator|.
name|getCompletedTaskCount
argument_list|()
expr_stmt|;
name|RejectedExecutionHandler
name|rejectedExecutionHandler
init|=
name|threadPoolExecutor
operator|.
name|getRejectedExecutionHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|rejectedExecutionHandler
operator|instanceof
name|XRejectedExecutionHandler
condition|)
block|{
name|rejected
operator|=
operator|(
operator|(
name|XRejectedExecutionHandler
operator|)
name|rejectedExecutionHandler
operator|)
operator|.
name|rejected
argument_list|()
expr_stmt|;
block|}
block|}
name|stats
operator|.
name|add
argument_list|(
operator|new
name|ThreadPoolStats
operator|.
name|Stats
argument_list|(
name|name
argument_list|,
name|threads
argument_list|,
name|queue
argument_list|,
name|active
argument_list|,
name|rejected
argument_list|,
name|largest
argument_list|,
name|completed
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ThreadPoolStats
argument_list|(
name|stats
argument_list|)
return|;
block|}
comment|/**      * Get the generic executor. This executor's {@link Executor#execute(Runnable)} method will run the Runnable it is given in      * the {@link ThreadContext} of the thread that queues it.      */
DECL|method|generic
specifier|public
name|Executor
name|generic
parameter_list|()
block|{
return|return
name|executor
argument_list|(
name|Names
operator|.
name|GENERIC
argument_list|)
return|;
block|}
comment|/**      * Get the executor with the given name. This executor's {@link Executor#execute(Runnable)} method will run the Runnable it is given in      * the {@link ThreadContext} of the thread that queues it.      */
DECL|method|executor
specifier|public
name|Executor
name|executor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Executor
name|executor
init|=
name|executors
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|executor
argument_list|()
decl_stmt|;
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No executor found for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|executor
return|;
block|}
DECL|method|scheduler
specifier|public
name|ScheduledExecutorService
name|scheduler
parameter_list|()
block|{
return|return
name|this
operator|.
name|scheduler
return|;
block|}
comment|/**      * Schedules a periodic action that runs on the specified thread pool.      *      * @param command the action to take      * @param interval the delay interval      * @param executor The name of the thread pool on which to execute this task. {@link Names#SAME} means "execute on the scheduler thread",      *             which there is only one of. Executing blocking or long running code on the {@link Names#SAME} thread pool should never      *             be done as it can cause issues with the cluster      * @return a {@link Cancellable} that can be used to cancel the subsequent runs of the command. If the command is running, it will      *         not be interrupted.      */
DECL|method|scheduleWithFixedDelay
specifier|public
name|Cancellable
name|scheduleWithFixedDelay
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|TimeValue
name|interval
parameter_list|,
name|String
name|executor
parameter_list|)
block|{
return|return
operator|new
name|ReschedulingRunnable
argument_list|(
name|command
argument_list|,
name|interval
argument_list|,
name|executor
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/**      * Schedules a one-shot command to run after a given delay. The command is not run in the context of the calling thread. To preserve the      * context of the calling thread you may call<code>threadPool.getThreadContext().preserveContext</code> on the runnable before passing      * it to this method.      *      * @param delay delay before the task executes      * @param executor the name of the thread pool on which to execute this task. SAME means "execute on the scheduler thread" which changes the      *        meaning of the ScheduledFuture returned by this method. In that case the ScheduledFuture will complete only when the command      *        completes.      * @param command the command to run      * @return a ScheduledFuture who's get will return when the task is has been added to its target thread pool and throw an exception if      *         the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool      *         the ScheduledFuture will cannot interact with it.      * @throws org.elasticsearch.common.util.concurrent.EsRejectedExecutionException      */
DECL|method|schedule
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|schedule
parameter_list|(
name|TimeValue
name|delay
parameter_list|,
name|String
name|executor
parameter_list|,
name|Runnable
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Names
operator|.
name|SAME
operator|.
name|equals
argument_list|(
name|executor
argument_list|)
condition|)
block|{
name|command
operator|=
operator|new
name|ThreadedRunnable
argument_list|(
name|command
argument_list|,
name|executor
argument_list|(
name|executor
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scheduler
operator|.
name|schedule
argument_list|(
operator|new
name|LoggingRunnable
argument_list|(
name|command
argument_list|)
argument_list|,
name|delay
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|estimatedTimeThread
operator|.
name|running
operator|=
literal|false
expr_stmt|;
name|estimatedTimeThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|ExecutorHolder
name|executor
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|executor
operator|.
name|executor
argument_list|()
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executor
operator|.
name|executor
argument_list|()
operator|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|shutdownNow
specifier|public
name|void
name|shutdownNow
parameter_list|()
block|{
name|estimatedTimeThread
operator|.
name|running
operator|=
literal|false
expr_stmt|;
name|estimatedTimeThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
for|for
control|(
name|ExecutorHolder
name|executor
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|executor
operator|.
name|executor
argument_list|()
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executor
operator|.
name|executor
argument_list|()
operator|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|awaitTermination
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|result
init|=
name|scheduler
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
for|for
control|(
name|ExecutorHolder
name|executor
range|:
name|executors
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|executor
operator|.
name|executor
argument_list|()
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
name|result
operator|&=
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executor
operator|.
name|executor
argument_list|()
operator|)
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
block|}
name|estimatedTimeThread
operator|.
name|join
argument_list|(
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Constrains a value between minimum and maximum values      * (inclusive).      *      * @param value the value to constrain      * @param min   the minimum acceptable value      * @param max   the maximum acceptable value      * @return min if value is less than min, max if value is greater      * than value, otherwise value      */
DECL|method|boundedBy
specifier|static
name|int
name|boundedBy
parameter_list|(
name|int
name|value
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|max
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|min
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|halfNumberOfProcessorsMaxFive
specifier|static
name|int
name|halfNumberOfProcessorsMaxFive
parameter_list|(
name|int
name|numberOfProcessors
parameter_list|)
block|{
return|return
name|boundedBy
argument_list|(
operator|(
name|numberOfProcessors
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
return|;
block|}
DECL|method|halfNumberOfProcessorsMaxTen
specifier|static
name|int
name|halfNumberOfProcessorsMaxTen
parameter_list|(
name|int
name|numberOfProcessors
parameter_list|)
block|{
return|return
name|boundedBy
argument_list|(
operator|(
name|numberOfProcessors
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
return|;
block|}
DECL|method|twiceNumberOfProcessors
specifier|static
name|int
name|twiceNumberOfProcessors
parameter_list|(
name|int
name|numberOfProcessors
parameter_list|)
block|{
return|return
name|boundedBy
argument_list|(
literal|2
operator|*
name|numberOfProcessors
argument_list|,
literal|2
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
DECL|method|searchThreadPoolSize
specifier|public
specifier|static
name|int
name|searchThreadPoolSize
parameter_list|(
name|int
name|availableProcessors
parameter_list|)
block|{
return|return
operator|(
operator|(
name|availableProcessors
operator|*
literal|3
operator|)
operator|/
literal|2
operator|)
operator|+
literal|1
return|;
block|}
DECL|class|LoggingRunnable
class|class
name|LoggingRunnable
implements|implements
name|Runnable
block|{
DECL|field|runnable
specifier|private
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|method|LoggingRunnable
name|LoggingRunnable
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to run {}"
argument_list|,
name|e
argument_list|,
name|runnable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|runnable
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|runnable
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[threaded] "
operator|+
name|runnable
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|ThreadedRunnable
class|class
name|ThreadedRunnable
implements|implements
name|Runnable
block|{
DECL|field|runnable
specifier|private
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|method|ThreadedRunnable
name|ThreadedRunnable
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|executor
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|runnable
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|runnable
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[threaded] "
operator|+
name|runnable
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|EstimatedTimeThread
specifier|static
class|class
name|EstimatedTimeThread
extends|extends
name|Thread
block|{
DECL|field|interval
specifier|final
name|long
name|interval
decl_stmt|;
DECL|field|counter
specifier|final
name|TimeCounter
name|counter
decl_stmt|;
DECL|field|running
specifier|volatile
name|boolean
name|running
init|=
literal|true
decl_stmt|;
DECL|field|estimatedTimeInMillis
specifier|volatile
name|long
name|estimatedTimeInMillis
decl_stmt|;
DECL|method|EstimatedTimeThread
name|EstimatedTimeThread
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
name|this
operator|.
name|estimatedTimeInMillis
operator|=
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|counter
operator|=
operator|new
name|TimeCounter
argument_list|()
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|estimatedTimeInMillis
specifier|public
name|long
name|estimatedTimeInMillis
parameter_list|()
block|{
return|return
name|this
operator|.
name|estimatedTimeInMillis
return|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
name|estimatedTimeInMillis
operator|=
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|running
operator|=
literal|false
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|class|TimeCounter
specifier|private
class|class
name|TimeCounter
extends|extends
name|Counter
block|{
annotation|@
name|Override
DECL|method|addAndGet
specifier|public
name|long
name|addAndGet
parameter_list|(
name|long
name|delta
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|long
name|get
parameter_list|()
block|{
return|return
name|estimatedTimeInMillis
return|;
block|}
block|}
block|}
DECL|class|ExecutorHolder
specifier|static
class|class
name|ExecutorHolder
block|{
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|field|info
specifier|public
specifier|final
name|Info
name|info
decl_stmt|;
DECL|method|ExecutorHolder
name|ExecutorHolder
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|Info
name|info
parameter_list|)
block|{
assert|assert
name|executor
operator|instanceof
name|EsThreadPoolExecutor
operator|||
name|executor
operator|==
name|DIRECT_EXECUTOR
assert|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
DECL|method|executor
name|Executor
name|executor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
block|}
DECL|class|Info
specifier|public
specifier|static
class|class
name|Info
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|private
name|ThreadPoolType
name|type
decl_stmt|;
DECL|field|min
specifier|private
name|int
name|min
decl_stmt|;
DECL|field|max
specifier|private
name|int
name|max
decl_stmt|;
DECL|field|keepAlive
specifier|private
name|TimeValue
name|keepAlive
decl_stmt|;
DECL|field|queueSize
specifier|private
name|SizeValue
name|queueSize
decl_stmt|;
DECL|method|Info
name|Info
parameter_list|()
block|{          }
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|name
parameter_list|,
name|ThreadPoolType
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|name
parameter_list|,
name|ThreadPoolType
name|type
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|name
parameter_list|,
name|ThreadPoolType
name|type
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
annotation|@
name|Nullable
name|TimeValue
name|keepAlive
parameter_list|,
annotation|@
name|Nullable
name|SizeValue
name|queueSize
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|keepAlive
operator|=
name|keepAlive
expr_stmt|;
name|this
operator|.
name|queueSize
operator|=
name|queueSize
expr_stmt|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|getThreadPoolType
specifier|public
name|ThreadPoolType
name|getThreadPoolType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|getMin
specifier|public
name|int
name|getMin
parameter_list|()
block|{
return|return
name|this
operator|.
name|min
return|;
block|}
DECL|method|getMax
specifier|public
name|int
name|getMax
parameter_list|()
block|{
return|return
name|this
operator|.
name|max
return|;
block|}
annotation|@
name|Nullable
DECL|method|getKeepAlive
specifier|public
name|TimeValue
name|getKeepAlive
parameter_list|()
block|{
return|return
name|this
operator|.
name|keepAlive
return|;
block|}
annotation|@
name|Nullable
DECL|method|getQueueSize
specifier|public
name|SizeValue
name|getQueueSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|queueSize
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|type
operator|=
name|ThreadPoolType
operator|.
name|fromType
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|min
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|max
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|keepAlive
operator|=
operator|new
name|TimeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|queueSize
operator|=
name|SizeValue
operator|.
name|readSizeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
comment|// here to conform with removed waitTime
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
comment|// here to conform with removed rejected setting
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
comment|// here to conform with queue type
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|type
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|keepAlive
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|keepAlive
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queueSize
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|queueSize
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// here to conform with removed waitTime
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// here to conform with removed rejected setting
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// here to conform with queue type
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TYPE
argument_list|,
name|type
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MIN
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|max
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MAX
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keepAlive
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|KEEP_ALIVE
argument_list|,
name|keepAlive
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queueSize
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|QUEUE_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|QUEUE_SIZE
argument_list|,
name|queueSize
operator|.
name|singles
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|TYPE
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"type"
decl_stmt|;
DECL|field|MIN
specifier|static
specifier|final
name|String
name|MIN
init|=
literal|"min"
decl_stmt|;
DECL|field|MAX
specifier|static
specifier|final
name|String
name|MAX
init|=
literal|"max"
decl_stmt|;
DECL|field|KEEP_ALIVE
specifier|static
specifier|final
name|String
name|KEEP_ALIVE
init|=
literal|"keep_alive"
decl_stmt|;
DECL|field|QUEUE_SIZE
specifier|static
specifier|final
name|String
name|QUEUE_SIZE
init|=
literal|"queue_size"
decl_stmt|;
block|}
block|}
comment|/**      * Returns<code>true</code> if the given service was terminated successfully. If the termination timed out,      * the service is<code>null</code> this method will return<code>false</code>.      */
DECL|method|terminate
specifier|public
specifier|static
name|boolean
name|terminate
parameter_list|(
name|ExecutorService
name|service
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|service
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|timeUnit
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|service
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns<code>true</code> if the given pool was terminated successfully. If the termination timed out,      * the service is<code>null</code> this method will return<code>false</code>.      */
DECL|method|terminate
specifier|public
specifier|static
name|boolean
name|terminate
parameter_list|(
name|ThreadPool
name|pool
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|pool
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|timeUnit
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|// last resort
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|threadContext
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getThreadContext
specifier|public
name|ThreadContext
name|getThreadContext
parameter_list|()
block|{
return|return
name|threadContext
return|;
block|}
comment|/**      * This interface represents an object whose execution may be cancelled during runtime.      */
DECL|interface|Cancellable
specifier|public
interface|interface
name|Cancellable
block|{
comment|/**          * Cancel the execution of this object. This method is idempotent.          */
DECL|method|cancel
name|void
name|cancel
parameter_list|()
function_decl|;
comment|/**          * Check if the execution has been cancelled          * @return true if cancelled          */
DECL|method|isCancelled
name|boolean
name|isCancelled
parameter_list|()
function_decl|;
block|}
comment|/**      * This class encapsulates the scheduling of a {@link Runnable} that needs to be repeated on a interval. For example, checking a value      * for cleanup every second could be done by passing in a Runnable that can perform the check and the specified interval between      * executions of this runnable.<em>NOTE:</em> the runnable is only rescheduled to run again after completion of the runnable.      *      * For this class,<i>completion</i> means that the call to {@link Runnable#run()} returned or an exception was thrown and caught. In      * case of an exception, this class will log the exception and reschedule the runnable for its next execution. This differs from the      * {@link ScheduledThreadPoolExecutor#scheduleWithFixedDelay(Runnable, long, long, TimeUnit)} semantics as an exception there would      * terminate the rescheduling of the runnable.      */
DECL|class|ReschedulingRunnable
specifier|static
specifier|final
class|class
name|ReschedulingRunnable
extends|extends
name|AbstractRunnable
implements|implements
name|Cancellable
block|{
DECL|field|runnable
specifier|private
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|field|interval
specifier|private
specifier|final
name|TimeValue
name|interval
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|String
name|executor
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|run
specifier|private
specifier|volatile
name|boolean
name|run
init|=
literal|true
decl_stmt|;
comment|/**          * Creates a new rescheduling runnable and schedules the first execution to occur after the interval specified          *          * @param runnable the {@link Runnable} that should be executed periodically          * @param interval the time interval between executions          * @param executor the executor where this runnable should be scheduled to run          * @param threadPool the {@link ThreadPool} instance to use for scheduling          */
DECL|method|ReschedulingRunnable
name|ReschedulingRunnable
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|TimeValue
name|interval
parameter_list|,
name|String
name|executor
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|interval
argument_list|,
name|executor
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancel
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|run
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCancelled
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|run
operator|==
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|doRun
specifier|public
name|void
name|doRun
parameter_list|()
block|{
comment|// always check run here since this may have been cancelled since the last execution and we do not want to run
if|if
condition|(
name|run
condition|)
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|threadPool
operator|.
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to run scheduled task [{}] on thread pool [{}]"
argument_list|,
name|e
argument_list|,
name|runnable
operator|.
name|toString
argument_list|()
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRejection
specifier|public
name|void
name|onRejection
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|run
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|threadPool
operator|.
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|threadPool
operator|.
name|logger
operator|.
name|debug
argument_list|(
literal|"scheduled task [{}] was rejected on thread pool [{}]"
argument_list|,
name|e
argument_list|,
name|runnable
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onAfter
specifier|public
name|void
name|onAfter
parameter_list|()
block|{
comment|// if this has not been cancelled reschedule it to run again
if|if
condition|(
name|run
condition|)
block|{
try|try
block|{
name|threadPool
operator|.
name|schedule
argument_list|(
name|interval
argument_list|,
name|executor
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EsRejectedExecutionException
name|e
parameter_list|)
block|{
name|onRejection
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|assertNotScheduleThread
specifier|public
specifier|static
name|boolean
name|assertNotScheduleThread
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
assert|assert
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"scheduler"
argument_list|)
operator|==
literal|false
operator|:
literal|"Expected current thread ["
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
literal|"] to not be the scheduler thread. Reason: ["
operator|+
name|reason
operator|+
literal|"]"
assert|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

