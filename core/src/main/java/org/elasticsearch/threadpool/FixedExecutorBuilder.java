begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_comment
comment|/**  * A builder for fixed executors.  */
end_comment

begin_class
DECL|class|FixedExecutorBuilder
specifier|public
specifier|final
class|class
name|FixedExecutorBuilder
extends|extends
name|ExecutorBuilder
argument_list|<
name|FixedExecutorBuilder
operator|.
name|FixedExecutorSettings
argument_list|>
block|{
DECL|field|sizeSetting
specifier|private
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|sizeSetting
decl_stmt|;
DECL|field|queueSizeSetting
specifier|private
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|queueSizeSetting
decl_stmt|;
comment|/**      * Construct a fixed executor builder; the settings will have the      * key prefix "thread_pool." followed by the executor name.      *      * @param settings  the node-level settings      * @param name      the name of the executor      * @param size      the fixed number of threads      * @param queueSize the size of the backing queue, -1 for unbounded      */
DECL|method|FixedExecutorBuilder
name|FixedExecutorBuilder
parameter_list|(
specifier|final
name|Settings
name|settings
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|size
parameter_list|,
specifier|final
name|int
name|queueSize
parameter_list|)
block|{
name|this
argument_list|(
name|settings
argument_list|,
name|name
argument_list|,
name|size
argument_list|,
name|queueSize
argument_list|,
literal|"thread_pool."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a fixed executor builder.      *      * @param settings  the node-level settings      * @param name      the name of the executor      * @param size      the fixed number of threads      * @param queueSize the size of the backing queue, -1 for unbounded      * @param prefix    the prefix for the settings keys      */
DECL|method|FixedExecutorBuilder
specifier|public
name|FixedExecutorBuilder
parameter_list|(
specifier|final
name|Settings
name|settings
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|size
parameter_list|,
specifier|final
name|int
name|queueSize
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sizeKey
init|=
name|settingsKey
argument_list|(
name|prefix
argument_list|,
literal|"size"
argument_list|)
decl_stmt|;
name|this
operator|.
name|sizeSetting
operator|=
operator|new
name|Setting
argument_list|<>
argument_list|(
name|sizeKey
argument_list|,
name|s
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|size
argument_list|)
argument_list|,
name|s
lambda|->
name|Setting
operator|.
name|parseInt
argument_list|(
name|s
argument_list|,
literal|1
argument_list|,
name|applyHardSizeLimit
argument_list|(
name|settings
argument_list|,
name|name
argument_list|)
argument_list|,
name|sizeKey
argument_list|)
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
expr_stmt|;
specifier|final
name|String
name|queueSizeKey
init|=
name|settingsKey
argument_list|(
name|prefix
argument_list|,
literal|"queue_size"
argument_list|)
decl_stmt|;
name|this
operator|.
name|queueSizeSetting
operator|=
name|Setting
operator|.
name|intSetting
argument_list|(
name|queueSizeKey
argument_list|,
name|queueSize
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|)
expr_stmt|;
block|}
DECL|method|applyHardSizeLimit
specifier|private
name|int
name|applyHardSizeLimit
parameter_list|(
specifier|final
name|Settings
name|settings
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|BULK
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
condition|)
block|{
return|return
literal|1
operator|+
name|EsExecutors
operator|.
name|numberOfProcessors
argument_list|(
name|settings
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRegisteredSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getRegisteredSettings
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|sizeSetting
argument_list|,
name|queueSizeSetting
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSettings
name|FixedExecutorSettings
name|getSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
specifier|final
name|String
name|nodeName
init|=
name|Node
operator|.
name|NODE_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|sizeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|int
name|queueSize
init|=
name|queueSizeSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
return|return
operator|new
name|FixedExecutorSettings
argument_list|(
name|nodeName
argument_list|,
name|size
argument_list|,
name|queueSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|build
name|ThreadPool
operator|.
name|ExecutorHolder
name|build
parameter_list|(
specifier|final
name|FixedExecutorSettings
name|settings
parameter_list|,
specifier|final
name|ThreadContext
name|threadContext
parameter_list|)
block|{
name|int
name|size
init|=
name|settings
operator|.
name|size
decl_stmt|;
name|int
name|queueSize
init|=
name|settings
operator|.
name|queueSize
decl_stmt|;
specifier|final
name|ThreadFactory
name|threadFactory
init|=
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|EsExecutors
operator|.
name|threadName
argument_list|(
name|settings
operator|.
name|nodeName
argument_list|,
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorService
name|executor
init|=
name|EsExecutors
operator|.
name|newFixed
argument_list|(
name|name
argument_list|()
argument_list|,
name|size
argument_list|,
name|queueSize
argument_list|,
name|threadFactory
argument_list|,
name|threadContext
argument_list|)
decl_stmt|;
specifier|final
name|ThreadPool
operator|.
name|Info
name|info
init|=
operator|new
name|ThreadPool
operator|.
name|Info
argument_list|(
name|name
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|queueSize
operator|<
literal|0
condition|?
literal|null
else|:
operator|new
name|SizeValue
argument_list|(
name|queueSize
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ThreadPool
operator|.
name|ExecutorHolder
argument_list|(
name|executor
argument_list|,
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|formatInfo
name|String
name|formatInfo
parameter_list|(
name|ThreadPool
operator|.
name|Info
name|info
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"name [%s], size [%d], queue size [%s]"
argument_list|,
name|info
operator|.
name|getName
argument_list|()
argument_list|,
name|info
operator|.
name|getMax
argument_list|()
argument_list|,
name|info
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|null
condition|?
literal|"unbounded"
else|:
name|info
operator|.
name|getQueueSize
argument_list|()
argument_list|)
return|;
block|}
DECL|class|FixedExecutorSettings
specifier|static
class|class
name|FixedExecutorSettings
extends|extends
name|ExecutorBuilder
operator|.
name|ExecutorSettings
block|{
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|field|queueSize
specifier|private
specifier|final
name|int
name|queueSize
decl_stmt|;
DECL|method|FixedExecutorSettings
name|FixedExecutorSettings
parameter_list|(
specifier|final
name|String
name|nodeName
parameter_list|,
specifier|final
name|int
name|size
parameter_list|,
specifier|final
name|int
name|queueSize
parameter_list|)
block|{
name|super
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|queueSize
operator|=
name|queueSize
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

