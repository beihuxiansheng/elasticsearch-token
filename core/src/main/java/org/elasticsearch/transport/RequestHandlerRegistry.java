begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_class
DECL|class|RequestHandlerRegistry
specifier|public
class|class
name|RequestHandlerRegistry
parameter_list|<
name|Request
extends|extends
name|TransportRequest
parameter_list|>
block|{
DECL|field|action
specifier|private
specifier|final
name|String
name|action
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|TransportRequestHandler
argument_list|<
name|Request
argument_list|>
name|handler
decl_stmt|;
DECL|field|forceExecution
specifier|private
specifier|final
name|boolean
name|forceExecution
decl_stmt|;
DECL|field|canTripCircuitBreaker
specifier|private
specifier|final
name|boolean
name|canTripCircuitBreaker
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|String
name|executor
decl_stmt|;
DECL|field|requestFactory
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Request
argument_list|>
name|requestFactory
decl_stmt|;
DECL|field|taskManager
specifier|private
specifier|final
name|TaskManager
name|taskManager
decl_stmt|;
DECL|method|RequestHandlerRegistry
specifier|public
name|RequestHandlerRegistry
parameter_list|(
name|String
name|action
parameter_list|,
name|Supplier
argument_list|<
name|Request
argument_list|>
name|requestFactory
parameter_list|,
name|TaskManager
name|taskManager
parameter_list|,
name|TransportRequestHandler
argument_list|<
name|Request
argument_list|>
name|handler
parameter_list|,
name|String
name|executor
parameter_list|,
name|boolean
name|forceExecution
parameter_list|,
name|boolean
name|canTripCircuitBreaker
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|requestFactory
operator|=
name|requestFactory
expr_stmt|;
assert|assert
name|newRequest
argument_list|()
operator|!=
literal|null
assert|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|forceExecution
operator|=
name|forceExecution
expr_stmt|;
name|this
operator|.
name|canTripCircuitBreaker
operator|=
name|canTripCircuitBreaker
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|taskManager
operator|=
name|taskManager
expr_stmt|;
block|}
DECL|method|getAction
specifier|public
name|String
name|getAction
parameter_list|()
block|{
return|return
name|action
return|;
block|}
DECL|method|newRequest
specifier|public
name|Request
name|newRequest
parameter_list|()
block|{
return|return
name|requestFactory
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|processMessageReceived
specifier|public
name|void
name|processMessageReceived
parameter_list|(
name|Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Task
name|task
init|=
name|taskManager
operator|.
name|register
argument_list|(
name|channel
operator|.
name|getChannelType
argument_list|()
argument_list|,
name|action
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|handler
operator|.
name|messageReceived
argument_list|(
name|request
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|messageReceived
argument_list|(
name|request
argument_list|,
operator|new
name|TransportChannelWrapper
argument_list|(
name|taskManager
argument_list|,
name|task
argument_list|,
name|channel
argument_list|)
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|taskManager
operator|.
name|unregister
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|isForceExecution
specifier|public
name|boolean
name|isForceExecution
parameter_list|()
block|{
return|return
name|forceExecution
return|;
block|}
DECL|method|canTripCircuitBreaker
specifier|public
name|boolean
name|canTripCircuitBreaker
parameter_list|()
block|{
return|return
name|canTripCircuitBreaker
return|;
block|}
DECL|method|getExecutor
specifier|public
name|String
name|getExecutor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|handler
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|TransportChannelWrapper
specifier|private
specifier|static
class|class
name|TransportChannelWrapper
extends|extends
name|DelegatingTransportChannel
block|{
DECL|field|task
specifier|private
specifier|final
name|Task
name|task
decl_stmt|;
DECL|field|taskManager
specifier|private
specifier|final
name|TaskManager
name|taskManager
decl_stmt|;
DECL|method|TransportChannelWrapper
name|TransportChannelWrapper
parameter_list|(
name|TaskManager
name|taskManager
parameter_list|,
name|Task
name|task
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
block|{
name|super
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|taskManager
operator|=
name|taskManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|endTask
argument_list|()
expr_stmt|;
name|super
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|,
name|TransportResponseOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|endTask
argument_list|()
expr_stmt|;
name|super
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|Exception
name|exception
parameter_list|)
throws|throws
name|IOException
block|{
name|endTask
argument_list|()
expr_stmt|;
name|super
operator|.
name|sendResponse
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
DECL|method|endTask
specifier|private
name|void
name|endTask
parameter_list|()
block|{
name|taskManager
operator|.
name|unregister
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

