begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport.netty
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Booleans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|ReleasablePagedBytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ReleasableBytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|math
operator|.
name|MathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|metrics
operator|.
name|CounterMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|NettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|OpenChannelsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|ReleaseChannelFutureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|BoundTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|InetSocketTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|PortsRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|KeyedLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|support
operator|.
name|TransportStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ClientBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioClientSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioWorkerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|oio
operator|.
name|OioClientSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|oio
operator|.
name|OioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|HashedWheelTimer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|CancelledKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
operator|.
name|TcpSettings
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|NetworkExceptionHelper
operator|.
name|isCloseConnectionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|NetworkExceptionHelper
operator|.
name|isConnectException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
operator|.
name|newConcurrentMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
operator|.
name|daemonThreadFactory
import|;
end_import

begin_comment
comment|/**  * There are 4 types of connections per node, low/med/high/ping. Low if for batch oriented APIs (like recovery or  * batch) with high payload that will cause regular request. (like search or single index) to take  * longer. Med is for the typical search / single doc index. And High for things like cluster state. Ping is reserved for  * sending out ping requests to other nodes.  */
end_comment

begin_class
DECL|class|NettyTransport
specifier|public
class|class
name|NettyTransport
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|Transport
argument_list|>
implements|implements
name|Transport
block|{
static|static
block|{
name|NettyUtils
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
DECL|field|HTTP_SERVER_WORKER_THREAD_NAME_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_SERVER_WORKER_THREAD_NAME_PREFIX
init|=
literal|"http_server_worker"
decl_stmt|;
DECL|field|HTTP_SERVER_BOSS_THREAD_NAME_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_SERVER_BOSS_THREAD_NAME_PREFIX
init|=
literal|"http_server_boss"
decl_stmt|;
DECL|field|TRANSPORT_CLIENT_WORKER_THREAD_NAME_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TRANSPORT_CLIENT_WORKER_THREAD_NAME_PREFIX
init|=
literal|"transport_client_worker"
decl_stmt|;
DECL|field|TRANSPORT_CLIENT_BOSS_THREAD_NAME_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TRANSPORT_CLIENT_BOSS_THREAD_NAME_PREFIX
init|=
literal|"transport_client_boss"
decl_stmt|;
DECL|field|WORKER_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|WORKER_COUNT
init|=
literal|"transport.netty.worker_count"
decl_stmt|;
DECL|field|CONNECTIONS_PER_NODE_RECOVERY
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTIONS_PER_NODE_RECOVERY
init|=
literal|"transport.connections_per_node.recovery"
decl_stmt|;
DECL|field|CONNECTIONS_PER_NODE_BULK
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTIONS_PER_NODE_BULK
init|=
literal|"transport.connections_per_node.bulk"
decl_stmt|;
DECL|field|CONNECTIONS_PER_NODE_REG
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTIONS_PER_NODE_REG
init|=
literal|"transport.connections_per_node.reg"
decl_stmt|;
DECL|field|CONNECTIONS_PER_NODE_STATE
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTIONS_PER_NODE_STATE
init|=
literal|"transport.connections_per_node.state"
decl_stmt|;
DECL|field|CONNECTIONS_PER_NODE_PING
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTIONS_PER_NODE_PING
init|=
literal|"transport.connections_per_node.ping"
decl_stmt|;
DECL|field|PING_SCHEDULE
specifier|public
specifier|static
specifier|final
name|String
name|PING_SCHEDULE
init|=
literal|"transport.ping_schedule"
decl_stmt|;
comment|// the scheduled internal ping interval setting
DECL|field|DEFAULT_PING_SCHEDULE
specifier|public
specifier|static
specifier|final
name|TimeValue
name|DEFAULT_PING_SCHEDULE
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// the default ping schedule, defaults to disabled (-1)
DECL|field|DEFAULT_PORT_RANGE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PORT_RANGE
init|=
literal|"9300-9400"
decl_stmt|;
DECL|field|DEFAULT_PROFILE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PROFILE
init|=
literal|"default"
decl_stmt|;
DECL|field|networkService
specifier|protected
specifier|final
name|NetworkService
name|networkService
decl_stmt|;
DECL|field|version
specifier|protected
specifier|final
name|Version
name|version
decl_stmt|;
DECL|field|blockingClient
specifier|protected
specifier|final
name|boolean
name|blockingClient
decl_stmt|;
DECL|field|connectTimeout
specifier|protected
specifier|final
name|TimeValue
name|connectTimeout
decl_stmt|;
DECL|field|maxCumulationBufferCapacity
specifier|protected
specifier|final
name|ByteSizeValue
name|maxCumulationBufferCapacity
decl_stmt|;
DECL|field|maxCompositeBufferComponents
specifier|protected
specifier|final
name|int
name|maxCompositeBufferComponents
decl_stmt|;
DECL|field|compress
specifier|protected
specifier|final
name|boolean
name|compress
decl_stmt|;
DECL|field|receiveBufferSizePredictorFactory
specifier|protected
specifier|final
name|ReceiveBufferSizePredictorFactory
name|receiveBufferSizePredictorFactory
decl_stmt|;
DECL|field|workerCount
specifier|protected
specifier|final
name|int
name|workerCount
decl_stmt|;
DECL|field|receivePredictorMin
specifier|protected
specifier|final
name|ByteSizeValue
name|receivePredictorMin
decl_stmt|;
DECL|field|receivePredictorMax
specifier|protected
specifier|final
name|ByteSizeValue
name|receivePredictorMax
decl_stmt|;
DECL|field|connectionsPerNodeRecovery
specifier|protected
specifier|final
name|int
name|connectionsPerNodeRecovery
decl_stmt|;
DECL|field|connectionsPerNodeBulk
specifier|protected
specifier|final
name|int
name|connectionsPerNodeBulk
decl_stmt|;
DECL|field|connectionsPerNodeReg
specifier|protected
specifier|final
name|int
name|connectionsPerNodeReg
decl_stmt|;
DECL|field|connectionsPerNodeState
specifier|protected
specifier|final
name|int
name|connectionsPerNodeState
decl_stmt|;
DECL|field|connectionsPerNodePing
specifier|protected
specifier|final
name|int
name|connectionsPerNodePing
decl_stmt|;
DECL|field|pingSchedule
specifier|private
specifier|final
name|TimeValue
name|pingSchedule
decl_stmt|;
DECL|field|bigArrays
specifier|protected
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|threadPool
specifier|protected
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|serverOpenChannels
specifier|protected
specifier|volatile
name|OpenChannelsHandler
name|serverOpenChannels
decl_stmt|;
DECL|field|clientBootstrap
specifier|protected
specifier|volatile
name|ClientBootstrap
name|clientBootstrap
decl_stmt|;
comment|// node id to actual channel
DECL|field|connectedNodes
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|DiscoveryNode
argument_list|,
name|NodeChannels
argument_list|>
name|connectedNodes
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|serverBootstraps
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ServerBootstrap
argument_list|>
name|serverBootstraps
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|serverChannels
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Channel
argument_list|>
argument_list|>
name|serverChannels
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|profileBoundAddresses
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|BoundTransportAddress
argument_list|>
name|profileBoundAddresses
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|transportServiceAdapter
specifier|protected
specifier|volatile
name|TransportServiceAdapter
name|transportServiceAdapter
decl_stmt|;
DECL|field|boundAddress
specifier|protected
specifier|volatile
name|BoundTransportAddress
name|boundAddress
decl_stmt|;
DECL|field|connectionLock
specifier|protected
specifier|final
name|KeyedLock
argument_list|<
name|String
argument_list|>
name|connectionLock
init|=
operator|new
name|KeyedLock
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|namedWriteableRegistry
specifier|protected
specifier|final
name|NamedWriteableRegistry
name|namedWriteableRegistry
decl_stmt|;
comment|// this lock is here to make sure we close this transport and disconnect all the client nodes
comment|// connections while no connect operations is going on... (this might help with 100% CPU when stopping the transport?)
DECL|field|globalLock
specifier|private
specifier|final
name|ReadWriteLock
name|globalLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
comment|// package visibility for tests
DECL|field|scheduledPing
specifier|final
name|ScheduledPing
name|scheduledPing
decl_stmt|;
annotation|@
name|Inject
DECL|method|NettyTransport
specifier|public
name|NettyTransport
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|NetworkService
name|networkService
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|Version
name|version
parameter_list|,
name|NamedWriteableRegistry
name|namedWriteableRegistry
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|networkService
operator|=
name|networkService
expr_stmt|;
name|this
operator|.
name|bigArrays
operator|=
name|bigArrays
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"netty.epollBugWorkaround"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.jboss.netty.epollBugWorkaround"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|workerCount
operator|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|WORKER_COUNT
argument_list|,
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|settings
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockingClient
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"transport.netty.transport.tcp.blocking_client"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_BLOCKING_CLIENT
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_BLOCKING
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectTimeout
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"transport.netty.connect_timeout"
argument_list|,
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"transport.tcp.connect_timeout"
argument_list|,
name|settings
operator|.
name|getAsTime
argument_list|(
name|TCP_CONNECT_TIMEOUT
argument_list|,
name|TCP_DEFAULT_CONNECT_TIMEOUT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxCumulationBufferCapacity
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"transport.netty.max_cumulation_buffer_capacity"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxCompositeBufferComponents
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"transport.netty.max_composite_buffer_components"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|compress
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TransportSettings
operator|.
name|TRANSPORT_TCP_COMPRESS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionsPerNodeRecovery
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"transport.netty.connections_per_node.recovery"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|CONNECTIONS_PER_NODE_RECOVERY
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionsPerNodeBulk
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"transport.netty.connections_per_node.bulk"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|CONNECTIONS_PER_NODE_BULK
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionsPerNodeReg
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"transport.netty.connections_per_node.reg"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|CONNECTIONS_PER_NODE_REG
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionsPerNodeState
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"transport.netty.connections_per_node.high"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|CONNECTIONS_PER_NODE_STATE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionsPerNodePing
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"transport.netty.connections_per_node.ping"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|CONNECTIONS_PER_NODE_PING
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// we want to have at least 1 for reg/state/ping
if|if
condition|(
name|this
operator|.
name|connectionsPerNodeReg
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't set [connection_per_node.reg] to 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|connectionsPerNodePing
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't set [connection_per_node.ping] to 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|connectionsPerNodeState
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't set [connection_per_node.state] to 0"
argument_list|)
throw|;
block|}
name|long
name|defaultReceiverPredictor
init|=
literal|512
operator|*
literal|1024
decl_stmt|;
if|if
condition|(
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getDirectMemoryMax
argument_list|()
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// we can guess a better default...
name|long
name|l
init|=
call|(
name|long
call|)
argument_list|(
operator|(
literal|0.3
operator|*
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getDirectMemoryMax
argument_list|()
operator|.
name|bytes
argument_list|()
operator|)
operator|/
name|workerCount
argument_list|)
decl_stmt|;
name|defaultReceiverPredictor
operator|=
name|Math
operator|.
name|min
argument_list|(
name|defaultReceiverPredictor
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|l
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// See AdaptiveReceiveBufferSizePredictor#DEFAULT_XXX for default values in netty..., we can use higher ones for us, even fixed one
name|this
operator|.
name|receivePredictorMin
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"transport.netty.receive_predictor_min"
argument_list|,
name|this
operator|.
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"transport.netty.receive_predictor_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|defaultReceiverPredictor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|receivePredictorMax
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"transport.netty.receive_predictor_max"
argument_list|,
name|this
operator|.
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"transport.netty.receive_predictor_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|defaultReceiverPredictor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
operator|==
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
condition|)
block|{
name|receiveBufferSizePredictorFactory
operator|=
operator|new
name|FixedReceiveBufferSizePredictorFactory
argument_list|(
operator|(
name|int
operator|)
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|receiveBufferSizePredictorFactory
operator|=
operator|new
name|AdaptiveReceiveBufferSizePredictorFactory
argument_list|(
operator|(
name|int
operator|)
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|receivePredictorMin
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|receivePredictorMax
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scheduledPing
operator|=
operator|new
name|ScheduledPing
argument_list|()
expr_stmt|;
name|this
operator|.
name|pingSchedule
operator|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|PING_SCHEDULE
argument_list|,
name|DEFAULT_PING_SCHEDULE
argument_list|)
expr_stmt|;
if|if
condition|(
name|pingSchedule
operator|.
name|millis
argument_list|()
operator|>
literal|0
condition|)
block|{
name|threadPool
operator|.
name|schedule
argument_list|(
name|pingSchedule
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
name|scheduledPing
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|namedWriteableRegistry
operator|=
name|namedWriteableRegistry
expr_stmt|;
block|}
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|this
operator|.
name|settings
return|;
block|}
annotation|@
name|Override
DECL|method|transportServiceAdapter
specifier|public
name|void
name|transportServiceAdapter
parameter_list|(
name|TransportServiceAdapter
name|service
parameter_list|)
block|{
name|this
operator|.
name|transportServiceAdapter
operator|=
name|service
expr_stmt|;
block|}
DECL|method|transportServiceAdapter
name|TransportServiceAdapter
name|transportServiceAdapter
parameter_list|()
block|{
return|return
name|transportServiceAdapter
return|;
block|}
DECL|method|threadPool
name|ThreadPool
name|threadPool
parameter_list|()
block|{
return|return
name|threadPool
return|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|clientBootstrap
operator|=
name|createClientBootstrap
argument_list|()
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"network.server"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
specifier|final
name|OpenChannelsHandler
name|openChannels
init|=
operator|new
name|OpenChannelsHandler
argument_list|(
name|logger
argument_list|)
decl_stmt|;
name|this
operator|.
name|serverOpenChannels
operator|=
name|openChannels
expr_stmt|;
comment|// extract default profile first and create standard bootstrap
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|profiles
init|=
name|settings
operator|.
name|getGroups
argument_list|(
literal|"transport.profiles"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|profiles
operator|.
name|containsKey
argument_list|(
name|DEFAULT_PROFILE
argument_list|)
condition|)
block|{
name|profiles
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|profiles
argument_list|)
expr_stmt|;
name|profiles
operator|.
name|put
argument_list|(
name|DEFAULT_PROFILE
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|Settings
name|fallbackSettings
init|=
name|createFallbackSettings
argument_list|()
decl_stmt|;
name|Settings
name|defaultSettings
init|=
name|profiles
operator|.
name|get
argument_list|(
name|DEFAULT_PROFILE
argument_list|)
decl_stmt|;
comment|// loop through all profiles and start them up, special handling for default one
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|profiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Settings
name|profileSettings
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|hasLength
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"transport profile configured without a name. skipping profile with settings [{}]"
argument_list|,
name|profileSettings
operator|.
name|toDelimitedString
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|DEFAULT_PROFILE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|profileSettings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|profileSettings
argument_list|)
operator|.
name|put
argument_list|(
literal|"port"
argument_list|,
name|profileSettings
operator|.
name|get
argument_list|(
literal|"port"
argument_list|,
name|this
operator|.
name|settings
operator|.
name|get
argument_list|(
literal|"transport.tcp.port"
argument_list|,
name|DEFAULT_PORT_RANGE
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|profileSettings
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// if profile does not have a port, skip it
name|logger
operator|.
name|info
argument_list|(
literal|"No port configured for profile [{}], not binding"
argument_list|,
name|name
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// merge fallback settings with default settings with profile settings so we have complete settings with default values
name|Settings
name|mergedSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|fallbackSettings
argument_list|)
operator|.
name|put
argument_list|(
name|defaultSettings
argument_list|)
operator|.
name|put
argument_list|(
name|profileSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createServerBootstrap
argument_list|(
name|name
argument_list|,
name|mergedSettings
argument_list|)
expr_stmt|;
name|bindServerBootstrap
argument_list|(
name|name
argument_list|,
name|mergedSettings
argument_list|)
expr_stmt|;
block|}
name|InetSocketAddress
name|boundAddress
init|=
operator|(
name|InetSocketAddress
operator|)
name|serverChannels
operator|.
name|get
argument_list|(
name|DEFAULT_PROFILE
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocalAddress
argument_list|()
decl_stmt|;
name|int
name|publishPort
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"transport.netty.publish_port"
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"transport.publish_port"
argument_list|,
name|boundAddress
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|publishHost
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"transport.netty.publish_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.publish_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.host"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|publishAddress
init|=
name|createPublishAddress
argument_list|(
name|publishHost
argument_list|,
name|publishPort
argument_list|)
decl_stmt|;
name|this
operator|.
name|boundAddress
operator|=
operator|new
name|BoundTransportAddress
argument_list|(
operator|new
name|InetSocketTransportAddress
argument_list|(
name|boundAddress
argument_list|)
argument_list|,
operator|new
name|InetSocketTransportAddress
argument_list|(
name|publishAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|profileBoundAddresses
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|BoundTransportAddress
argument_list|>
name|profileBoundAddresses
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|profileBoundAddresses
argument_list|)
return|;
block|}
DECL|method|createPublishAddress
specifier|private
name|InetSocketAddress
name|createPublishAddress
parameter_list|(
name|String
name|publishHost
parameter_list|,
name|int
name|publishPort
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|networkService
operator|.
name|resolvePublishHostAddress
argument_list|(
name|publishHost
argument_list|)
argument_list|,
name|publishPort
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BindTransportException
argument_list|(
literal|"Failed to resolve publish address"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createClientBootstrap
specifier|private
name|ClientBootstrap
name|createClientBootstrap
parameter_list|()
block|{
if|if
condition|(
name|blockingClient
condition|)
block|{
name|clientBootstrap
operator|=
operator|new
name|ClientBootstrap
argument_list|(
operator|new
name|OioClientSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
name|TRANSPORT_CLIENT_WORKER_THREAD_NAME_PREFIX
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|bossCount
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"transport.netty.boss_count"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|clientBootstrap
operator|=
operator|new
name|ClientBootstrap
argument_list|(
operator|new
name|NioClientSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
name|TRANSPORT_CLIENT_BOSS_THREAD_NAME_PREFIX
argument_list|)
argument_list|)
argument_list|,
name|bossCount
argument_list|,
operator|new
name|NioWorkerPool
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
name|TRANSPORT_CLIENT_WORKER_THREAD_NAME_PREFIX
argument_list|)
argument_list|)
argument_list|,
name|workerCount
argument_list|)
argument_list|,
operator|new
name|HashedWheelTimer
argument_list|(
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"transport_client_timer"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|clientBootstrap
operator|.
name|setPipelineFactory
argument_list|(
name|configureClientChannelPipelineFactory
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"connectTimeoutMillis"
argument_list|,
name|connectTimeout
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tcpNoDelay
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"transport.netty.tcp_no_delay"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|TCP_NO_DELAY
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"default"
operator|.
name|equals
argument_list|(
name|tcpNoDelay
argument_list|)
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|tcpNoDelay
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|tcpKeepAlive
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"transport.netty.tcp_keep_alive"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|TCP_KEEP_ALIVE
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"default"
operator|.
name|equals
argument_list|(
name|tcpKeepAlive
argument_list|)
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"keepAlive"
argument_list|,
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|tcpKeepAlive
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ByteSizeValue
name|tcpSendBufferSize
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"transport.netty.tcp_send_buffer_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|TCP_SEND_BUFFER_SIZE
argument_list|,
name|TCP_DEFAULT_SEND_BUFFER_SIZE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tcpSendBufferSize
operator|!=
literal|null
operator|&&
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ByteSizeValue
name|tcpReceiveBufferSize
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"transport.netty.tcp_receive_buffer_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|TCP_RECEIVE_BUFFER_SIZE
argument_list|,
name|TCP_DEFAULT_RECEIVE_BUFFER_SIZE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tcpReceiveBufferSize
operator|!=
literal|null
operator|&&
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"receiveBufferSizePredictorFactory"
argument_list|,
name|receiveBufferSizePredictorFactory
argument_list|)
expr_stmt|;
name|boolean
name|reuseAddress
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"transport.netty.reuse_address"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_REUSE_ADDRESS
argument_list|,
name|NetworkUtils
operator|.
name|defaultReuseAddress
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|clientBootstrap
return|;
block|}
DECL|method|createFallbackSettings
specifier|private
name|Settings
name|createFallbackSettings
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|fallbackSettingsBuilder
init|=
name|settingsBuilder
argument_list|()
decl_stmt|;
name|String
name|fallbackBindHost
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"transport.netty.bind_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.bind_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.host"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackBindHost
operator|!=
literal|null
condition|)
block|{
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"bind_host"
argument_list|,
name|fallbackBindHost
argument_list|)
expr_stmt|;
block|}
name|String
name|fallbackPublishHost
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"transport.netty.publish_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.publish_host"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.host"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackPublishHost
operator|!=
literal|null
condition|)
block|{
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"publish_host"
argument_list|,
name|fallbackPublishHost
argument_list|)
expr_stmt|;
block|}
name|String
name|fallbackTcpNoDelay
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"transport.netty.tcp_no_delay"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|TCP_NO_DELAY
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackTcpNoDelay
operator|!=
literal|null
condition|)
block|{
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"tcp_no_delay"
argument_list|,
name|fallbackTcpNoDelay
argument_list|)
expr_stmt|;
block|}
name|String
name|fallbackTcpKeepAlive
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"transport.netty.tcp_keep_alive"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|TCP_KEEP_ALIVE
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackTcpKeepAlive
operator|!=
literal|null
condition|)
block|{
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"tcp_keep_alive"
argument_list|,
name|fallbackTcpKeepAlive
argument_list|)
expr_stmt|;
block|}
name|boolean
name|fallbackReuseAddress
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"transport.netty.reuse_address"
argument_list|,
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_REUSE_ADDRESS
argument_list|,
name|NetworkUtils
operator|.
name|defaultReuseAddress
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"reuse_address"
argument_list|,
name|fallbackReuseAddress
argument_list|)
expr_stmt|;
name|ByteSizeValue
name|fallbackTcpSendBufferSize
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"transport.netty.tcp_send_buffer_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|TCP_SEND_BUFFER_SIZE
argument_list|,
name|TCP_DEFAULT_SEND_BUFFER_SIZE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackTcpSendBufferSize
operator|!=
literal|null
condition|)
block|{
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"tcp_send_buffer_size"
argument_list|,
name|fallbackTcpSendBufferSize
argument_list|)
expr_stmt|;
block|}
name|ByteSizeValue
name|fallbackTcpBufferSize
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"transport.netty.tcp_receive_buffer_size"
argument_list|,
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|TCP_RECEIVE_BUFFER_SIZE
argument_list|,
name|TCP_DEFAULT_RECEIVE_BUFFER_SIZE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackTcpBufferSize
operator|!=
literal|null
condition|)
block|{
name|fallbackSettingsBuilder
operator|.
name|put
argument_list|(
literal|"tcp_receive_buffer_size"
argument_list|,
name|fallbackTcpBufferSize
argument_list|)
expr_stmt|;
block|}
return|return
name|fallbackSettingsBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|bindServerBootstrap
specifier|private
name|void
name|bindServerBootstrap
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Settings
name|settings
parameter_list|)
block|{
comment|// Bind and start to accept incoming connections.
name|InetAddress
name|hostAddresses
index|[]
decl_stmt|;
name|String
name|bindHost
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"bind_host"
argument_list|)
decl_stmt|;
try|try
block|{
name|hostAddresses
operator|=
name|networkService
operator|.
name|resolveBindHostAddress
argument_list|(
name|bindHost
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BindTransportException
argument_list|(
literal|"Failed to resolve host ["
operator|+
name|bindHost
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
index|[]
name|addresses
init|=
operator|new
name|String
index|[
name|hostAddresses
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hostAddresses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|addresses
index|[
name|i
index|]
operator|=
name|NetworkAddress
operator|.
name|format
argument_list|(
name|hostAddresses
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"binding server bootstrap to: {}"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InetAddress
name|hostAddress
range|:
name|hostAddresses
control|)
block|{
name|bindServerBootstrap
argument_list|(
name|name
argument_list|,
name|hostAddress
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|bindServerBootstrap
specifier|private
name|void
name|bindServerBootstrap
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|InetAddress
name|hostAddress
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|String
name|port
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
decl_stmt|;
name|PortsRange
name|portsRange
init|=
operator|new
name|PortsRange
argument_list|(
name|port
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|boundSocket
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|portsRange
operator|.
name|iterate
argument_list|(
operator|new
name|PortsRange
operator|.
name|PortCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onPortNumber
parameter_list|(
name|int
name|portNumber
parameter_list|)
block|{
try|try
block|{
name|Channel
name|channel
init|=
name|serverBootstraps
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|hostAddress
argument_list|,
name|portNumber
argument_list|)
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|serverChannels
init|)
block|{
name|List
argument_list|<
name|Channel
argument_list|>
name|list
init|=
name|serverChannels
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|serverChannels
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|boundSocket
operator|.
name|set
argument_list|(
operator|(
name|InetSocketAddress
operator|)
name|channel
operator|.
name|getLocalAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|BindTransportException
argument_list|(
literal|"Failed to bind to ["
operator|+
name|port
operator|+
literal|"]"
argument_list|,
name|lastException
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|DEFAULT_PROFILE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|InetSocketAddress
name|boundAddress
init|=
name|boundSocket
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|publishPort
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"publish_port"
argument_list|,
name|boundAddress
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|publishHost
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"publish_host"
argument_list|,
name|boundAddress
operator|.
name|getHostString
argument_list|()
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|publishAddress
init|=
name|createPublishAddress
argument_list|(
name|publishHost
argument_list|,
name|publishPort
argument_list|)
decl_stmt|;
comment|// TODO: support real multihoming with publishing. Today we use putIfAbsent so only the prioritized address is published
name|profileBoundAddresses
operator|.
name|putIfAbsent
argument_list|(
name|name
argument_list|,
operator|new
name|BoundTransportAddress
argument_list|(
operator|new
name|InetSocketTransportAddress
argument_list|(
name|boundAddress
argument_list|)
argument_list|,
operator|new
name|InetSocketTransportAddress
argument_list|(
name|publishAddress
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Bound profile [{}] to address {{}}"
argument_list|,
name|name
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
name|boundSocket
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createServerBootstrap
specifier|private
name|void
name|createServerBootstrap
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|boolean
name|blockingServer
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"transport.tcp.blocking_server"
argument_list|,
name|this
operator|.
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_BLOCKING_SERVER
argument_list|,
name|this
operator|.
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|TCP_BLOCKING
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
decl_stmt|;
name|String
name|bindHost
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"bind_host"
argument_list|)
decl_stmt|;
name|String
name|publishHost
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"publish_host"
argument_list|)
decl_stmt|;
name|String
name|tcpNoDelay
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"tcp_no_delay"
argument_list|)
decl_stmt|;
name|String
name|tcpKeepAlive
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"tcp_keep_alive"
argument_list|)
decl_stmt|;
name|boolean
name|reuseAddress
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"reuse_address"
argument_list|,
name|NetworkUtils
operator|.
name|defaultReuseAddress
argument_list|()
argument_list|)
decl_stmt|;
name|ByteSizeValue
name|tcpSendBufferSize
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"tcp_send_buffer_size"
argument_list|,
name|TCP_DEFAULT_SEND_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|ByteSizeValue
name|tcpReceiveBufferSize
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"tcp_receive_buffer_size"
argument_list|,
name|TCP_DEFAULT_RECEIVE_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using profile[{}], worker_count[{}], port[{}], bind_host[{}], publish_host[{}], compress[{}], connect_timeout[{}], connections_per_node[{}/{}/{}/{}/{}], receive_predictor[{}->{}]"
argument_list|,
name|name
argument_list|,
name|workerCount
argument_list|,
name|port
argument_list|,
name|bindHost
argument_list|,
name|publishHost
argument_list|,
name|compress
argument_list|,
name|connectTimeout
argument_list|,
name|connectionsPerNodeRecovery
argument_list|,
name|connectionsPerNodeBulk
argument_list|,
name|connectionsPerNodeReg
argument_list|,
name|connectionsPerNodeState
argument_list|,
name|connectionsPerNodePing
argument_list|,
name|receivePredictorMin
argument_list|,
name|receivePredictorMax
argument_list|)
expr_stmt|;
specifier|final
name|ThreadFactory
name|bossFactory
init|=
name|daemonThreadFactory
argument_list|(
name|this
operator|.
name|settings
argument_list|,
name|HTTP_SERVER_BOSS_THREAD_NAME_PREFIX
argument_list|,
name|name
argument_list|)
decl_stmt|;
specifier|final
name|ThreadFactory
name|workerFactory
init|=
name|daemonThreadFactory
argument_list|(
name|this
operator|.
name|settings
argument_list|,
name|HTTP_SERVER_WORKER_THREAD_NAME_PREFIX
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|ServerBootstrap
name|serverBootstrap
decl_stmt|;
if|if
condition|(
name|blockingServer
condition|)
block|{
name|serverBootstrap
operator|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|OioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|bossFactory
argument_list|)
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|workerFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverBootstrap
operator|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|bossFactory
argument_list|)
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|workerFactory
argument_list|)
argument_list|,
name|workerCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serverBootstrap
operator|.
name|setPipelineFactory
argument_list|(
name|configureServerChannelPipelineFactory
argument_list|(
name|name
argument_list|,
name|settings
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"default"
operator|.
name|equals
argument_list|(
name|tcpNoDelay
argument_list|)
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.tcpNoDelay"
argument_list|,
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|tcpNoDelay
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"default"
operator|.
name|equals
argument_list|(
name|tcpKeepAlive
argument_list|)
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.keepAlive"
argument_list|,
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|tcpKeepAlive
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpSendBufferSize
operator|!=
literal|null
operator|&&
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.sendBufferSize"
argument_list|,
name|tcpSendBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpReceiveBufferSize
operator|!=
literal|null
operator|&&
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.receiveBufferSize"
argument_list|,
name|tcpReceiveBufferSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"receiveBufferSizePredictorFactory"
argument_list|,
name|receiveBufferSizePredictorFactory
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.receiveBufferSizePredictorFactory"
argument_list|,
name|receiveBufferSizePredictorFactory
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
name|serverBootstraps
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|serverBootstrap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// make sure we run it on another thread than a possible IO handler thread
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|globalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
argument_list|<
name|NodeChannels
argument_list|>
name|it
init|=
name|connectedNodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeChannels
name|nodeChannels
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Channel
argument_list|>
argument_list|>
argument_list|>
name|serverChannelIterator
init|=
name|serverChannels
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|serverChannelIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Channel
argument_list|>
argument_list|>
name|serverChannelEntry
init|=
name|serverChannelIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|serverChannelEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Channel
argument_list|>
name|serverChannels
init|=
name|serverChannelEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Channel
name|serverChannel
range|:
name|serverChannels
control|)
block|{
try|try
block|{
name|serverChannel
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Error closing serverChannel for profile [{}]"
argument_list|,
name|t
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|serverChannelIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|serverOpenChannels
operator|!=
literal|null
condition|)
block|{
name|serverOpenChannels
operator|.
name|close
argument_list|()
expr_stmt|;
name|serverOpenChannels
operator|=
literal|null
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ServerBootstrap
argument_list|>
argument_list|>
name|serverBootstrapIterator
init|=
name|serverBootstraps
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|serverBootstrapIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ServerBootstrap
argument_list|>
name|serverBootstrapEntry
init|=
name|serverBootstrapIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|serverBootstrapEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ServerBootstrap
name|serverBootstrap
init|=
name|serverBootstrapEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
name|serverBootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Error closing serverBootstrap for profile [{}]"
argument_list|,
name|t
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|serverBootstrapIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|NodeChannels
argument_list|>
name|it
init|=
name|connectedNodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeChannels
name|nodeChannels
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clientBootstrap
operator|!=
literal|null
condition|)
block|{
name|clientBootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
name|clientBootstrap
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|globalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|latch
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|addressesFromString
specifier|public
name|TransportAddress
index|[]
name|addressesFromString
parameter_list|(
name|String
name|address
parameter_list|,
name|int
name|perAddressLimit
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|parse
argument_list|(
name|address
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.profiles.default.port"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.netty.port"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.tcp.port"
argument_list|,
name|DEFAULT_PORT_RANGE
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|perAddressLimit
argument_list|)
return|;
block|}
comment|// this code is a take on guava's HostAndPort, like a HostAndPortRange
comment|// pattern for validating ipv6 bracked addresses.
comment|// not perfect, but PortsRange should take care of any port range validation, not a regex
DECL|field|BRACKET_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|BRACKET_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\[(.*:.*)\\](?::([\\d\\-]*))?$"
argument_list|)
decl_stmt|;
comment|/** parse a hostname+port range spec into its equivalent addresses */
DECL|method|parse
specifier|static
name|TransportAddress
index|[]
name|parse
parameter_list|(
name|String
name|hostPortString
parameter_list|,
name|String
name|defaultPortRange
parameter_list|,
name|int
name|perAddressLimit
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|hostPortString
argument_list|)
expr_stmt|;
name|String
name|host
decl_stmt|;
name|String
name|portString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hostPortString
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
condition|)
block|{
comment|// Parse a bracketed host, typically an IPv6 literal.
name|Matcher
name|matcher
init|=
name|BRACKET_PATTERN
operator|.
name|matcher
argument_list|(
name|hostPortString
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid bracketed host/port range: "
operator|+
name|hostPortString
argument_list|)
throw|;
block|}
name|host
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|portString
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// could be null
block|}
else|else
block|{
name|int
name|colonPos
init|=
name|hostPortString
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colonPos
operator|>=
literal|0
operator|&&
name|hostPortString
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|,
name|colonPos
operator|+
literal|1
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Exactly 1 colon.  Split into host:port.
name|host
operator|=
name|hostPortString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colonPos
argument_list|)
expr_stmt|;
name|portString
operator|=
name|hostPortString
operator|.
name|substring
argument_list|(
name|colonPos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// 0 or 2+ colons.  Bare hostname or IPv6 literal.
name|host
operator|=
name|hostPortString
expr_stmt|;
comment|// 2+ colons and not bracketed: exception
if|if
condition|(
name|colonPos
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"IPv6 addresses must be bracketed: "
operator|+
name|hostPortString
argument_list|)
throw|;
block|}
block|}
block|}
comment|// if port isn't specified, fill with the default
if|if
condition|(
name|portString
operator|==
literal|null
operator|||
name|portString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|portString
operator|=
name|defaultPortRange
expr_stmt|;
block|}
comment|// generate address for each port in the range
name|Set
argument_list|<
name|InetAddress
argument_list|>
name|addresses
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|InetAddress
operator|.
name|getAllByName
argument_list|(
name|host
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TransportAddress
argument_list|>
name|transportAddresses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
index|[]
name|ports
init|=
operator|new
name|PortsRange
argument_list|(
name|portString
argument_list|)
operator|.
name|ports
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|Math
operator|.
name|min
argument_list|(
name|ports
operator|.
name|length
argument_list|,
name|perAddressLimit
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|InetAddress
name|address
range|:
name|addresses
control|)
block|{
name|transportAddresses
operator|.
name|add
argument_list|(
operator|new
name|InetSocketTransportAddress
argument_list|(
name|address
argument_list|,
name|ports
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|transportAddresses
operator|.
name|toArray
argument_list|(
operator|new
name|TransportAddress
index|[
name|transportAddresses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addressSupported
specifier|public
name|boolean
name|addressSupported
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|TransportAddress
argument_list|>
name|address
parameter_list|)
block|{
return|return
name|InetSocketTransportAddress
operator|.
name|class
operator|.
name|equals
argument_list|(
name|address
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|boundAddress
specifier|public
name|BoundTransportAddress
name|boundAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|boundAddress
return|;
block|}
DECL|method|exceptionCaught
specifier|protected
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
comment|// ignore
return|return;
block|}
if|if
condition|(
name|isCloseConnectionException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"close connection exception caught on transport layer [{}], disconnecting from relevant node"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the channel, which will cause a node to be disconnected if relevant
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|disconnectFromNodeChannel
argument_list|(
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isConnectException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"connect exception caught on transport layer [{}]"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the channel as safe measure, which will cause a node to be disconnected if relevant
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|disconnectFromNodeChannel
argument_list|(
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|CancelledKeyException
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"cancelled key exception caught on transport layer [{}], disconnecting from relevant node"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the channel as safe measure, which will cause a node to be disconnected if relevant
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|disconnectFromNodeChannel
argument_list|(
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SizeHeaderFrameDecoder
operator|.
name|HttpOnTransportException
condition|)
block|{
comment|// in case we are able to return data, serialize the exception content and sent it back to the client
if|if
condition|(
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|ChannelBuffer
name|buffer
init|=
name|ChannelBuffers
operator|.
name|wrappedBuffer
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|ChannelFuture
name|channelFuture
init|=
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|channelFuture
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
name|future
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"exception caught on transport layer [{}], closing connection"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the channel, which will cause a node to be disconnected if relevant
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|disconnectFromNodeChannel
argument_list|(
name|ctx
operator|.
name|getChannel
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|wrapAddress
name|TransportAddress
name|wrapAddress
parameter_list|(
name|SocketAddress
name|socketAddress
parameter_list|)
block|{
return|return
operator|new
name|InetSocketTransportAddress
argument_list|(
operator|(
name|InetSocketAddress
operator|)
name|socketAddress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|serverOpen
specifier|public
name|long
name|serverOpen
parameter_list|()
block|{
name|OpenChannelsHandler
name|channels
init|=
name|serverOpenChannels
decl_stmt|;
return|return
name|channels
operator|==
literal|null
condition|?
literal|0
else|:
name|channels
operator|.
name|numberOfOpenChannels
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalAddresses
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLocalAddresses
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|local
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|local
operator|.
name|add
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
comment|// check if v6 is supported, if so, v4 will also work via mapped addresses.
if|if
condition|(
name|NetworkUtils
operator|.
name|SUPPORTS_V6
condition|)
block|{
name|local
operator|.
name|add
argument_list|(
literal|"[::1]"
argument_list|)
expr_stmt|;
comment|// may get ports appended!
block|}
return|return
name|local
return|;
block|}
annotation|@
name|Override
DECL|method|sendRequest
specifier|public
name|void
name|sendRequest
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|long
name|requestId
parameter_list|,
specifier|final
name|String
name|action
parameter_list|,
specifier|final
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransportException
block|{
name|Channel
name|targetChannel
init|=
name|nodeChannel
argument_list|(
name|node
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|compress
condition|)
block|{
name|options
operator|.
name|withCompress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|byte
name|status
init|=
literal|0
decl_stmt|;
name|status
operator|=
name|TransportStatus
operator|.
name|setRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|ReleasableBytesStreamOutput
name|bStream
init|=
operator|new
name|ReleasableBytesStreamOutput
argument_list|(
name|bigArrays
argument_list|)
decl_stmt|;
name|boolean
name|addedReleaseListener
init|=
literal|false
decl_stmt|;
try|try
block|{
name|bStream
operator|.
name|skip
argument_list|(
name|NettyHeader
operator|.
name|HEADER_SIZE
argument_list|)
expr_stmt|;
name|StreamOutput
name|stream
init|=
name|bStream
decl_stmt|;
comment|// only compress if asked, and, the request is not bytes, since then only
comment|// the header part is compressed, and the "body" can't be extracted as compressed
if|if
condition|(
name|options
operator|.
name|compress
argument_list|()
operator|&&
operator|(
operator|!
operator|(
name|request
operator|instanceof
name|BytesTransportRequest
operator|)
operator|)
condition|)
block|{
name|status
operator|=
name|TransportStatus
operator|.
name|setCompress
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|stream
operator|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
operator|.
name|streamOutput
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
comment|// we pick the smallest of the 2, to support both backward and forward compatibility
comment|// note, this is the only place we need to do this, since from here on, we use the serialized version
comment|// as the version to use also when the node receiving this request will send the response with
name|Version
name|version
init|=
name|Version
operator|.
name|smallest
argument_list|(
name|this
operator|.
name|version
argument_list|,
name|node
operator|.
name|version
argument_list|()
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeString
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|ReleasablePagedBytesReference
name|bytes
decl_stmt|;
name|ChannelBuffer
name|buffer
decl_stmt|;
comment|// it might be nice to somehow generalize this optimization, maybe a smart "paged" bytes output
comment|// that create paged channel buffers, but its tricky to know when to do it (where this option is
comment|// more explicit).
if|if
condition|(
name|request
operator|instanceof
name|BytesTransportRequest
condition|)
block|{
name|BytesTransportRequest
name|bRequest
init|=
operator|(
name|BytesTransportRequest
operator|)
name|request
decl_stmt|;
assert|assert
name|node
operator|.
name|version
argument_list|()
operator|.
name|equals
argument_list|(
name|bRequest
operator|.
name|version
argument_list|()
argument_list|)
assert|;
name|bRequest
operator|.
name|writeThin
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|bytes
operator|=
name|bStream
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|ChannelBuffer
name|headerBuffer
init|=
name|bytes
operator|.
name|toChannelBuffer
argument_list|()
decl_stmt|;
name|ChannelBuffer
name|contentBuffer
init|=
name|bRequest
operator|.
name|bytes
argument_list|()
operator|.
name|toChannelBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|=
name|ChannelBuffers
operator|.
name|wrappedBuffer
argument_list|(
name|NettyUtils
operator|.
name|DEFAULT_GATHERING
argument_list|,
name|headerBuffer
argument_list|,
name|contentBuffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|bytes
operator|=
name|bStream
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|buffer
operator|=
name|bytes
operator|.
name|toChannelBuffer
argument_list|()
expr_stmt|;
block|}
name|NettyHeader
operator|.
name|writeHeader
argument_list|(
name|buffer
argument_list|,
name|requestId
argument_list|,
name|status
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|ChannelFuture
name|future
init|=
name|targetChannel
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|ReleaseChannelFutureListener
name|listener
init|=
operator|new
name|ReleaseChannelFutureListener
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|addedReleaseListener
operator|=
literal|true
expr_stmt|;
name|transportServiceAdapter
operator|.
name|onRequestSent
argument_list|(
name|node
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|addedReleaseListener
condition|)
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|bStream
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|nodeConnected
specifier|public
name|boolean
name|nodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
name|connectedNodes
operator|.
name|containsKey
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|connectToNodeLight
specifier|public
name|void
name|connectToNodeLight
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
throws|throws
name|ConnectTransportException
block|{
name|connectToNode
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|connectToNode
specifier|public
name|void
name|connectToNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|connectToNode
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|connectToNode
specifier|public
name|void
name|connectToNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|boolean
name|light
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't add nodes to a stopped transport"
argument_list|)
throw|;
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
literal|null
argument_list|,
literal|"can't connect to a null node"
argument_list|)
throw|;
block|}
name|globalLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|connectionLock
operator|.
name|acquire
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't add nodes to a stopped transport"
argument_list|)
throw|;
block|}
name|NodeChannels
name|nodeChannels
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeChannels
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
name|light
condition|)
block|{
name|nodeChannels
operator|=
name|connectToChannelsLight
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodeChannels
operator|=
operator|new
name|NodeChannels
argument_list|(
operator|new
name|Channel
index|[
name|connectionsPerNodeRecovery
index|]
argument_list|,
operator|new
name|Channel
index|[
name|connectionsPerNodeBulk
index|]
argument_list|,
operator|new
name|Channel
index|[
name|connectionsPerNodeReg
index|]
argument_list|,
operator|new
name|Channel
index|[
name|connectionsPerNodeState
index|]
argument_list|,
operator|new
name|Channel
index|[
name|connectionsPerNodePing
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|connectToChannels
argument_list|(
name|nodeChannels
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to connect to [{}], cleaning dangling connections"
argument_list|,
name|e
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// we acquire a connection lock, so no way there is an existing connection
name|nodeChannels
operator|.
name|start
argument_list|()
expr_stmt|;
name|connectedNodes
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|nodeChannels
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"connected to node [{}]"
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|transportServiceAdapter
operator|.
name|raiseNodeConnected
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectTransportException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"general node connection failure"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|connectionLock
operator|.
name|release
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|globalLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|connectToChannelsLight
specifier|protected
name|NodeChannels
name|connectToChannelsLight
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|InetSocketAddress
name|address
init|=
operator|(
operator|(
name|InetSocketTransportAddress
operator|)
name|node
operator|.
name|address
argument_list|()
operator|)
operator|.
name|address
argument_list|()
decl_stmt|;
name|ChannelFuture
name|connect
init|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|connect
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connect
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connect
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|Channel
index|[]
name|channels
init|=
operator|new
name|Channel
index|[
literal|1
index|]
decl_stmt|;
name|channels
index|[
literal|0
index|]
operator|=
name|connect
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|channels
index|[
literal|0
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeChannels
argument_list|(
name|channels
argument_list|,
name|channels
argument_list|,
name|channels
argument_list|,
name|channels
argument_list|,
name|channels
argument_list|)
return|;
block|}
DECL|method|connectToChannels
specifier|protected
name|void
name|connectToChannels
parameter_list|(
name|NodeChannels
name|nodeChannels
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|ChannelFuture
index|[]
name|connectRecovery
init|=
operator|new
name|ChannelFuture
index|[
name|nodeChannels
operator|.
name|recovery
operator|.
name|length
index|]
decl_stmt|;
name|ChannelFuture
index|[]
name|connectBulk
init|=
operator|new
name|ChannelFuture
index|[
name|nodeChannels
operator|.
name|bulk
operator|.
name|length
index|]
decl_stmt|;
name|ChannelFuture
index|[]
name|connectReg
init|=
operator|new
name|ChannelFuture
index|[
name|nodeChannels
operator|.
name|reg
operator|.
name|length
index|]
decl_stmt|;
name|ChannelFuture
index|[]
name|connectState
init|=
operator|new
name|ChannelFuture
index|[
name|nodeChannels
operator|.
name|state
operator|.
name|length
index|]
decl_stmt|;
name|ChannelFuture
index|[]
name|connectPing
init|=
operator|new
name|ChannelFuture
index|[
name|nodeChannels
operator|.
name|ping
operator|.
name|length
index|]
decl_stmt|;
name|InetSocketAddress
name|address
init|=
operator|(
operator|(
name|InetSocketTransportAddress
operator|)
name|node
operator|.
name|address
argument_list|()
operator|)
operator|.
name|address
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectRecovery
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectRecovery
index|[
name|i
index|]
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectBulk
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectBulk
index|[
name|i
index|]
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectReg
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectReg
index|[
name|i
index|]
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectState
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectState
index|[
name|i
index|]
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectPing
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectPing
index|[
name|i
index|]
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectRecovery
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectRecovery
index|[
name|i
index|]
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connectRecovery
index|[
name|i
index|]
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connectRecovery
index|[
name|i
index|]
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|nodeChannels
operator|.
name|recovery
index|[
name|i
index|]
operator|=
name|connectRecovery
index|[
name|i
index|]
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|recovery
index|[
name|i
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectBulk
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectBulk
index|[
name|i
index|]
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connectBulk
index|[
name|i
index|]
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connectBulk
index|[
name|i
index|]
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|nodeChannels
operator|.
name|bulk
index|[
name|i
index|]
operator|=
name|connectBulk
index|[
name|i
index|]
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|bulk
index|[
name|i
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectReg
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectReg
index|[
name|i
index|]
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connectReg
index|[
name|i
index|]
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connectReg
index|[
name|i
index|]
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|nodeChannels
operator|.
name|reg
index|[
name|i
index|]
operator|=
name|connectReg
index|[
name|i
index|]
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|reg
index|[
name|i
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectState
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectState
index|[
name|i
index|]
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connectState
index|[
name|i
index|]
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connectState
index|[
name|i
index|]
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|nodeChannels
operator|.
name|state
index|[
name|i
index|]
operator|=
name|connectState
index|[
name|i
index|]
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|state
index|[
name|i
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectPing
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connectPing
index|[
name|i
index|]
operator|.
name|awaitUninterruptibly
argument_list|(
call|(
name|long
call|)
argument_list|(
name|connectTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connectPing
index|[
name|i
index|]
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"connect_timeout["
operator|+
name|connectTimeout
operator|+
literal|"]"
argument_list|,
name|connectPing
index|[
name|i
index|]
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
name|nodeChannels
operator|.
name|ping
index|[
name|i
index|]
operator|=
name|connectPing
index|[
name|i
index|]
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|nodeChannels
operator|.
name|ping
index|[
name|i
index|]
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelCloseListener
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeChannels
operator|.
name|recovery
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|nodeChannels
operator|.
name|bulk
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|nodeChannels
operator|.
name|recovery
operator|=
name|nodeChannels
operator|.
name|bulk
expr_stmt|;
block|}
else|else
block|{
name|nodeChannels
operator|.
name|recovery
operator|=
name|nodeChannels
operator|.
name|reg
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nodeChannels
operator|.
name|bulk
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|nodeChannels
operator|.
name|bulk
operator|=
name|nodeChannels
operator|.
name|reg
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// clean the futures
for|for
control|(
name|ChannelFuture
index|[]
name|futures
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|connectRecovery
argument_list|,
name|connectBulk
argument_list|,
name|connectReg
argument_list|,
name|connectState
argument_list|,
name|connectPing
argument_list|)
control|)
block|{
for|for
control|(
name|ChannelFuture
name|future
range|:
name|futures
control|)
block|{
name|future
operator|.
name|cancel
argument_list|()
expr_stmt|;
if|if
condition|(
name|future
operator|.
name|getChannel
argument_list|()
operator|!=
literal|null
operator|&&
name|future
operator|.
name|getChannel
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
try|try
block|{
name|future
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|disconnectFromNode
specifier|public
name|void
name|disconnectFromNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|connectionLock
operator|.
name|acquire
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|NodeChannels
name|nodeChannels
init|=
name|connectedNodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeChannels
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"disconnecting from [{}] due to explicit disconnect call"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"disconnected from [{}] due to explicit disconnect call"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|transportServiceAdapter
operator|.
name|raiseNodeDisconnected
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|connectionLock
operator|.
name|release
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Disconnects from a node, only if the relevant channel is found to be part of the node channels.      */
DECL|method|disconnectFromNode
specifier|protected
name|boolean
name|disconnectFromNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
comment|// this might be called multiple times from all the node channels, so do a lightweight
comment|// check outside of the lock
name|NodeChannels
name|nodeChannels
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeChannels
operator|!=
literal|null
operator|&&
name|nodeChannels
operator|.
name|hasChannel
argument_list|(
name|channel
argument_list|)
condition|)
block|{
name|connectionLock
operator|.
name|acquire
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|nodeChannels
operator|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// check again within the connection lock, if its still applicable to remove it
if|if
condition|(
name|nodeChannels
operator|!=
literal|null
operator|&&
name|nodeChannels
operator|.
name|hasChannel
argument_list|(
name|channel
argument_list|)
condition|)
block|{
name|connectedNodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"disconnecting from [{}], {}"
argument_list|,
name|node
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|nodeChannels
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"disconnected from [{}], {}"
argument_list|,
name|node
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|transportServiceAdapter
operator|.
name|raiseNodeDisconnected
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
finally|finally
block|{
name|connectionLock
operator|.
name|release
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Disconnects from a node if a channel is found as part of that nodes channels.      */
DECL|method|disconnectFromNodeChannel
specifier|protected
name|void
name|disconnectFromNodeChannel
parameter_list|(
specifier|final
name|Channel
name|channel
parameter_list|,
specifier|final
name|Throwable
name|failure
parameter_list|)
block|{
name|threadPool
argument_list|()
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|connectedNodes
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|disconnectFromNode
argument_list|(
name|node
argument_list|,
name|channel
argument_list|,
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|failure
argument_list|)
argument_list|)
condition|)
block|{
comment|// if we managed to find this channel and disconnect from it, then break, no need to check on
comment|// the rest of the nodes
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|nodeChannel
specifier|protected
name|Channel
name|nodeChannel
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|ConnectTransportException
block|{
name|NodeChannels
name|nodeChannels
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeChannels
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NodeNotConnectedException
argument_list|(
name|node
argument_list|,
literal|"Node not connected"
argument_list|)
throw|;
block|}
return|return
name|nodeChannels
operator|.
name|channel
argument_list|(
name|options
operator|.
name|type
argument_list|()
argument_list|)
return|;
block|}
DECL|method|configureClientChannelPipelineFactory
specifier|public
name|ChannelPipelineFactory
name|configureClientChannelPipelineFactory
parameter_list|()
block|{
return|return
operator|new
name|ClientChannelPipelineFactory
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|class|ClientChannelPipelineFactory
specifier|protected
specifier|static
class|class
name|ClientChannelPipelineFactory
implements|implements
name|ChannelPipelineFactory
block|{
DECL|field|nettyTransport
specifier|protected
specifier|final
name|NettyTransport
name|nettyTransport
decl_stmt|;
DECL|method|ClientChannelPipelineFactory
specifier|public
name|ClientChannelPipelineFactory
parameter_list|(
name|NettyTransport
name|nettyTransport
parameter_list|)
block|{
name|this
operator|.
name|nettyTransport
operator|=
name|nettyTransport
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPipeline
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|channelPipeline
init|=
name|Channels
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|SizeHeaderFrameDecoder
name|sizeHeader
init|=
operator|new
name|SizeHeaderFrameDecoder
argument_list|()
decl_stmt|;
if|if
condition|(
name|nettyTransport
operator|.
name|maxCumulationBufferCapacity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nettyTransport
operator|.
name|maxCumulationBufferCapacity
operator|.
name|bytes
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferCapacity
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferCapacity
argument_list|(
operator|(
name|int
operator|)
name|nettyTransport
operator|.
name|maxCumulationBufferCapacity
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nettyTransport
operator|.
name|maxCompositeBufferComponents
operator|!=
operator|-
literal|1
condition|)
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferComponents
argument_list|(
name|nettyTransport
operator|.
name|maxCompositeBufferComponents
argument_list|)
expr_stmt|;
block|}
name|channelPipeline
operator|.
name|addLast
argument_list|(
literal|"size"
argument_list|,
name|sizeHeader
argument_list|)
expr_stmt|;
comment|// using a dot as a prefix means, this cannot come from any settings parsed
name|channelPipeline
operator|.
name|addLast
argument_list|(
literal|"dispatcher"
argument_list|,
operator|new
name|MessageChannelHandler
argument_list|(
name|nettyTransport
argument_list|,
name|nettyTransport
operator|.
name|logger
argument_list|,
literal|".client"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|channelPipeline
return|;
block|}
block|}
DECL|method|configureServerChannelPipelineFactory
specifier|public
name|ChannelPipelineFactory
name|configureServerChannelPipelineFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
return|return
operator|new
name|ServerChannelPipelineFactory
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
return|;
block|}
DECL|class|ServerChannelPipelineFactory
specifier|protected
specifier|static
class|class
name|ServerChannelPipelineFactory
implements|implements
name|ChannelPipelineFactory
block|{
DECL|field|nettyTransport
specifier|protected
specifier|final
name|NettyTransport
name|nettyTransport
decl_stmt|;
DECL|field|name
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|settings
specifier|protected
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|method|ServerChannelPipelineFactory
specifier|public
name|ServerChannelPipelineFactory
parameter_list|(
name|NettyTransport
name|nettyTransport
parameter_list|,
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|nettyTransport
operator|=
name|nettyTransport
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPipeline
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|channelPipeline
init|=
name|Channels
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|channelPipeline
operator|.
name|addLast
argument_list|(
literal|"openChannels"
argument_list|,
name|nettyTransport
operator|.
name|serverOpenChannels
argument_list|)
expr_stmt|;
name|SizeHeaderFrameDecoder
name|sizeHeader
init|=
operator|new
name|SizeHeaderFrameDecoder
argument_list|()
decl_stmt|;
if|if
condition|(
name|nettyTransport
operator|.
name|maxCumulationBufferCapacity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nettyTransport
operator|.
name|maxCumulationBufferCapacity
operator|.
name|bytes
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferCapacity
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferCapacity
argument_list|(
operator|(
name|int
operator|)
name|nettyTransport
operator|.
name|maxCumulationBufferCapacity
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nettyTransport
operator|.
name|maxCompositeBufferComponents
operator|!=
operator|-
literal|1
condition|)
block|{
name|sizeHeader
operator|.
name|setMaxCumulationBufferComponents
argument_list|(
name|nettyTransport
operator|.
name|maxCompositeBufferComponents
argument_list|)
expr_stmt|;
block|}
name|channelPipeline
operator|.
name|addLast
argument_list|(
literal|"size"
argument_list|,
name|sizeHeader
argument_list|)
expr_stmt|;
name|channelPipeline
operator|.
name|addLast
argument_list|(
literal|"dispatcher"
argument_list|,
operator|new
name|MessageChannelHandler
argument_list|(
name|nettyTransport
argument_list|,
name|nettyTransport
operator|.
name|logger
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|channelPipeline
return|;
block|}
block|}
DECL|class|ChannelCloseListener
specifier|protected
class|class
name|ChannelCloseListener
implements|implements
name|ChannelFutureListener
block|{
DECL|field|node
specifier|private
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
DECL|method|ChannelCloseListener
specifier|private
name|ChannelCloseListener
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|operationComplete
specifier|public
name|void
name|operationComplete
parameter_list|(
specifier|final
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeChannels
name|nodeChannels
init|=
name|connectedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeChannels
operator|!=
literal|null
operator|&&
name|nodeChannels
operator|.
name|hasChannel
argument_list|(
name|future
operator|.
name|getChannel
argument_list|()
argument_list|)
condition|)
block|{
name|threadPool
argument_list|()
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|disconnectFromNode
argument_list|(
name|node
argument_list|,
name|future
operator|.
name|getChannel
argument_list|()
argument_list|,
literal|"channel closed event"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|NodeChannels
specifier|public
specifier|static
class|class
name|NodeChannels
block|{
DECL|field|allChannels
name|List
argument_list|<
name|Channel
argument_list|>
name|allChannels
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|recovery
specifier|private
name|Channel
index|[]
name|recovery
decl_stmt|;
DECL|field|recoveryCounter
specifier|private
specifier|final
name|AtomicInteger
name|recoveryCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|bulk
specifier|private
name|Channel
index|[]
name|bulk
decl_stmt|;
DECL|field|bulkCounter
specifier|private
specifier|final
name|AtomicInteger
name|bulkCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|reg
specifier|private
name|Channel
index|[]
name|reg
decl_stmt|;
DECL|field|regCounter
specifier|private
specifier|final
name|AtomicInteger
name|regCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|state
specifier|private
name|Channel
index|[]
name|state
decl_stmt|;
DECL|field|stateCounter
specifier|private
specifier|final
name|AtomicInteger
name|stateCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|ping
specifier|private
name|Channel
index|[]
name|ping
decl_stmt|;
DECL|field|pingCounter
specifier|private
specifier|final
name|AtomicInteger
name|pingCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|NodeChannels
specifier|public
name|NodeChannels
parameter_list|(
name|Channel
index|[]
name|recovery
parameter_list|,
name|Channel
index|[]
name|bulk
parameter_list|,
name|Channel
index|[]
name|reg
parameter_list|,
name|Channel
index|[]
name|state
parameter_list|,
name|Channel
index|[]
name|ping
parameter_list|)
block|{
name|this
operator|.
name|recovery
operator|=
name|recovery
expr_stmt|;
name|this
operator|.
name|bulk
operator|=
name|bulk
expr_stmt|;
name|this
operator|.
name|reg
operator|=
name|reg
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|ping
operator|=
name|ping
expr_stmt|;
block|}
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
block|{
name|List
argument_list|<
name|Channel
argument_list|>
name|newAllChannels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|newAllChannels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|recovery
argument_list|)
argument_list|)
expr_stmt|;
name|newAllChannels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|bulk
argument_list|)
argument_list|)
expr_stmt|;
name|newAllChannels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|reg
argument_list|)
argument_list|)
expr_stmt|;
name|newAllChannels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
name|newAllChannels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ping
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|allChannels
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|allChannels
argument_list|)
expr_stmt|;
block|}
DECL|method|hasChannel
specifier|public
name|boolean
name|hasChannel
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
for|for
control|(
name|Channel
name|channel1
range|:
name|allChannels
control|)
block|{
if|if
condition|(
name|channel
operator|.
name|equals
argument_list|(
name|channel1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|channel
specifier|public
name|Channel
name|channel
parameter_list|(
name|TransportRequestOptions
operator|.
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
condition|)
block|{
return|return
name|reg
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|regCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|reg
operator|.
name|length
argument_list|)
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|STATE
condition|)
block|{
return|return
name|state
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|stateCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|state
operator|.
name|length
argument_list|)
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|PING
condition|)
block|{
return|return
name|ping
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|pingCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|ping
operator|.
name|length
argument_list|)
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|BULK
condition|)
block|{
return|return
name|bulk
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|bulkCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|bulk
operator|.
name|length
argument_list|)
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
condition|)
block|{
return|return
name|recovery
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|recoveryCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|recovery
operator|.
name|length
argument_list|)
index|]
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no type channel for ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|List
argument_list|<
name|ChannelFuture
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Channel
name|channel
range|:
name|allChannels
control|)
block|{
try|try
block|{
if|if
condition|(
name|channel
operator|!=
literal|null
operator|&&
name|channel
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|channel
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
for|for
control|(
name|ChannelFuture
name|future
range|:
name|futures
control|)
block|{
name|future
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|ScheduledPing
class|class
name|ScheduledPing
extends|extends
name|AbstractRunnable
block|{
DECL|field|successfulPings
specifier|final
name|CounterMetric
name|successfulPings
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
DECL|field|failedPings
specifier|final
name|CounterMetric
name|failedPings
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|doRun
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DiscoveryNode
argument_list|,
name|NodeChannels
argument_list|>
name|entry
range|:
name|connectedNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NodeChannels
name|channels
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Channel
name|channel
range|:
name|channels
operator|.
name|allChannels
control|)
block|{
try|try
block|{
name|ChannelFuture
name|future
init|=
name|channel
operator|.
name|write
argument_list|(
name|NettyHeader
operator|.
name|pingHeader
argument_list|()
argument_list|)
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
name|successfulPings
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|channel
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] failed to send ping transport message"
argument_list|,
name|t
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|failedPings
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] failed to send ping transport message (channel closed)"
argument_list|,
name|t
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|threadPool
operator|.
name|schedule
argument_list|(
name|pingSchedule
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] failed to send ping transport message"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to send ping transport message"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

