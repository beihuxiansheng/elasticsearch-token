begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|local
operator|.
name|LocalTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
operator|.
name|NettyTransport
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TransportModule
specifier|public
class|class
name|TransportModule
extends|extends
name|AbstractModule
block|{
DECL|field|TRANSPORT_TYPE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|TRANSPORT_TYPE_KEY
init|=
literal|"transport.type"
decl_stmt|;
DECL|field|TRANSPORT_SERVICE_TYPE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|TRANSPORT_SERVICE_TYPE_KEY
init|=
literal|"transport.service.type"
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|configuredTransportService
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|TransportService
argument_list|>
name|configuredTransportService
decl_stmt|;
DECL|field|configuredTransport
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|configuredTransport
decl_stmt|;
DECL|field|configuredTransportServiceSource
specifier|private
name|String
name|configuredTransportServiceSource
decl_stmt|;
DECL|field|configuredTransportSource
specifier|private
name|String
name|configuredTransportSource
decl_stmt|;
DECL|method|TransportModule
specifier|public
name|TransportModule
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
if|if
condition|(
name|configuredTransportService
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Using [{}] as transport service, overridden by [{}]"
argument_list|,
name|configuredTransportService
operator|.
name|getName
argument_list|()
argument_list|,
name|configuredTransportServiceSource
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|configuredTransportService
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
extends|extends
name|TransportService
argument_list|>
name|defaultTransportService
init|=
name|TransportService
operator|.
name|class
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|TransportService
argument_list|>
name|transportService
init|=
name|settings
operator|.
name|getAsClass
argument_list|(
name|TRANSPORT_SERVICE_TYPE_KEY
argument_list|,
name|defaultTransportService
argument_list|,
literal|"org.elasticsearch.transport."
argument_list|,
literal|"TransportService"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|TransportService
operator|.
name|class
operator|.
name|equals
argument_list|(
name|transportService
argument_list|)
condition|)
block|{
name|bind
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|transportService
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bind
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
block|}
name|bind
argument_list|(
name|NamedWriteableRegistry
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
if|if
condition|(
name|configuredTransport
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Using [{}] as transport, overridden by [{}]"
argument_list|,
name|configuredTransport
operator|.
name|getName
argument_list|()
argument_list|,
name|configuredTransportSource
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|Transport
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|configuredTransport
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|defaultTransport
init|=
name|DiscoveryNode
operator|.
name|localNode
argument_list|(
name|settings
argument_list|)
condition|?
name|LocalTransport
operator|.
name|class
else|:
name|NettyTransport
operator|.
name|class
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|transport
init|=
name|settings
operator|.
name|getAsClass
argument_list|(
name|TRANSPORT_TYPE_KEY
argument_list|,
name|defaultTransport
argument_list|,
literal|"org.elasticsearch.transport."
argument_list|,
literal|"Transport"
argument_list|)
decl_stmt|;
name|bind
argument_list|(
name|Transport
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|transport
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setTransportService
specifier|public
name|void
name|setTransportService
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|TransportService
argument_list|>
name|transportService
parameter_list|,
name|String
name|source
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|transportService
argument_list|,
literal|"Configured transport service may not be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|source
argument_list|,
literal|"Plugin, that changes transport service may not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuredTransportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|configuredTransportServiceSource
operator|=
name|source
expr_stmt|;
block|}
DECL|method|setTransport
specifier|public
name|void
name|setTransport
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|transport
parameter_list|,
name|String
name|source
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|transport
argument_list|,
literal|"Configured transport may not be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|source
argument_list|,
literal|"Plugin, that changes transport may not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuredTransport
operator|=
name|transport
expr_stmt|;
name|this
operator|.
name|configuredTransportSource
operator|=
name|source
expr_stmt|;
block|}
block|}
end_class

end_unit

