begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DeflaterOutputStream
import|;
end_import

begin_comment
comment|/**  * This class exists to provide a stream with optional compression. This is useful as using compression  * requires that the underlying {@link DeflaterOutputStream} be closed to write EOS bytes. However, the  * {@link BytesStream} should not be closed yet, as we have not used the bytes. This class handles these  * intricacies.  *  * {@link CompressibleBytesOutputStream#materializeBytes()} should be called when all the bytes have been  * written to this stream. If compression is enabled, the proper EOS bytes will be written at that point.  * The underlying {@link BytesReference} will be returned.  *  * {@link CompressibleBytesOutputStream#close()} should be called when the bytes are no longer needed and  * can be safely released.  */
end_comment

begin_class
DECL|class|CompressibleBytesOutputStream
specifier|final
class|class
name|CompressibleBytesOutputStream
extends|extends
name|StreamOutput
implements|implements
name|Releasable
block|{
DECL|field|stream
specifier|private
specifier|final
name|StreamOutput
name|stream
decl_stmt|;
DECL|field|bytesStreamOutput
specifier|private
specifier|final
name|BytesStream
name|bytesStreamOutput
decl_stmt|;
DECL|field|shouldCompress
specifier|private
specifier|final
name|boolean
name|shouldCompress
decl_stmt|;
DECL|method|CompressibleBytesOutputStream
name|CompressibleBytesOutputStream
parameter_list|(
name|BytesStream
name|bytesStreamOutput
parameter_list|,
name|boolean
name|shouldCompress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|bytesStreamOutput
operator|=
name|bytesStreamOutput
expr_stmt|;
name|this
operator|.
name|shouldCompress
operator|=
name|shouldCompress
expr_stmt|;
if|if
condition|(
name|shouldCompress
condition|)
block|{
name|this
operator|.
name|stream
operator|=
name|CompressorFactory
operator|.
name|COMPRESSOR
operator|.
name|streamOutput
argument_list|(
name|Streams
operator|.
name|flushOnCloseStream
argument_list|(
name|bytesStreamOutput
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|stream
operator|=
name|bytesStreamOutput
expr_stmt|;
block|}
block|}
comment|/**      * This method ensures that compression is complete and returns the underlying bytes.      *      * @return bytes underlying the stream      * @throws IOException if an exception occurs when writing or flushing      */
DECL|method|materializeBytes
name|BytesReference
name|materializeBytes
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If we are using compression the stream needs to be closed to ensure that EOS marker bytes are written.
comment|// The actual ReleasableBytesStreamOutput will not be closed yet as it is wrapped in flushOnCloseStream when
comment|// passed to the deflater stream.
if|if
condition|(
name|shouldCompress
condition|)
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|bytesStreamOutput
operator|.
name|bytes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeByte
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBytes
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|writeBytes
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|==
name|bytesStreamOutput
condition|)
block|{
assert|assert
name|shouldCompress
operator|==
literal|false
operator|:
literal|"If the streams are the same we should not be compressing"
assert|;
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|shouldCompress
operator|:
literal|"If the streams are different we should be compressing"
assert|;
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|stream
argument_list|,
name|bytesStreamOutput
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

