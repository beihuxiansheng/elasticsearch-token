begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|LifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|BoundTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_interface
DECL|interface|Transport
specifier|public
interface|interface
name|Transport
extends|extends
name|LifecycleComponent
argument_list|<
name|Transport
argument_list|>
block|{
DECL|field|TRANSPORT_TCP_COMPRESS
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|TRANSPORT_TCP_COMPRESS
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"transport.tcp.compress"
argument_list|,
literal|false
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|method|transportServiceAdapter
name|void
name|transportServiceAdapter
parameter_list|(
name|TransportServiceAdapter
name|service
parameter_list|)
function_decl|;
comment|/**      * The address the transport is bound on.      */
DECL|method|boundAddress
name|BoundTransportAddress
name|boundAddress
parameter_list|()
function_decl|;
comment|/**      * Further profile bound addresses      * @return Should return null if transport does not support profiles, otherwise a map with name of profile and its bound transport address      */
DECL|method|profileBoundAddresses
name|Map
argument_list|<
name|String
argument_list|,
name|BoundTransportAddress
argument_list|>
name|profileBoundAddresses
parameter_list|()
function_decl|;
comment|/**      * Returns an address from its string representation.      */
DECL|method|addressesFromString
name|TransportAddress
index|[]
name|addressesFromString
parameter_list|(
name|String
name|address
parameter_list|,
name|int
name|perAddressLimit
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Is the address type supported.      */
DECL|method|addressSupported
name|boolean
name|addressSupported
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|TransportAddress
argument_list|>
name|address
parameter_list|)
function_decl|;
comment|/**      * Returns<tt>true</tt> if the node is connected.      */
DECL|method|nodeConnected
name|boolean
name|nodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
function_decl|;
comment|/**      * Connects to the given node, if already connected, does nothing.      */
DECL|method|connectToNode
name|void
name|connectToNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
throws|throws
name|ConnectTransportException
function_decl|;
comment|/**      * Connects to a node in a light manner. Used when just connecting for ping and then      * disconnecting.      */
DECL|method|connectToNodeLight
name|void
name|connectToNodeLight
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
throws|throws
name|ConnectTransportException
function_decl|;
comment|/**      * Disconnected from the given node, if not connected, will do nothing.      */
DECL|method|disconnectFromNode
name|void
name|disconnectFromNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
function_decl|;
comment|/**      * Sends the request to the node.      */
DECL|method|sendRequest
name|void
name|sendRequest
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransportException
function_decl|;
comment|/**      * Returns count of currently open connections      */
DECL|method|serverOpen
name|long
name|serverOpen
parameter_list|()
function_decl|;
DECL|method|getLocalAddresses
name|List
argument_list|<
name|String
argument_list|>
name|getLocalAddresses
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

