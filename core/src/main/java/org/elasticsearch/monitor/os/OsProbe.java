begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.os
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|Probes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|OperatingSystemMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|OsProbe
specifier|public
class|class
name|OsProbe
block|{
DECL|field|osMxBean
specifier|private
specifier|static
specifier|final
name|OperatingSystemMXBean
name|osMxBean
init|=
name|ManagementFactory
operator|.
name|getOperatingSystemMXBean
argument_list|()
decl_stmt|;
DECL|field|getFreePhysicalMemorySize
specifier|private
specifier|static
specifier|final
name|Method
name|getFreePhysicalMemorySize
decl_stmt|;
DECL|field|getTotalPhysicalMemorySize
specifier|private
specifier|static
specifier|final
name|Method
name|getTotalPhysicalMemorySize
decl_stmt|;
DECL|field|getFreeSwapSpaceSize
specifier|private
specifier|static
specifier|final
name|Method
name|getFreeSwapSpaceSize
decl_stmt|;
DECL|field|getTotalSwapSpaceSize
specifier|private
specifier|static
specifier|final
name|Method
name|getTotalSwapSpaceSize
decl_stmt|;
DECL|field|getSystemLoadAverage
specifier|private
specifier|static
specifier|final
name|Method
name|getSystemLoadAverage
decl_stmt|;
DECL|field|getSystemCpuLoad
specifier|private
specifier|static
specifier|final
name|Method
name|getSystemCpuLoad
decl_stmt|;
static|static
block|{
name|getFreePhysicalMemorySize
operator|=
name|getMethod
argument_list|(
literal|"getFreePhysicalMemorySize"
argument_list|)
expr_stmt|;
name|getTotalPhysicalMemorySize
operator|=
name|getMethod
argument_list|(
literal|"getTotalPhysicalMemorySize"
argument_list|)
expr_stmt|;
name|getFreeSwapSpaceSize
operator|=
name|getMethod
argument_list|(
literal|"getFreeSwapSpaceSize"
argument_list|)
expr_stmt|;
name|getTotalSwapSpaceSize
operator|=
name|getMethod
argument_list|(
literal|"getTotalSwapSpaceSize"
argument_list|)
expr_stmt|;
name|getSystemLoadAverage
operator|=
name|getMethod
argument_list|(
literal|"getSystemLoadAverage"
argument_list|)
expr_stmt|;
name|getSystemCpuLoad
operator|=
name|getMethod
argument_list|(
literal|"getSystemCpuLoad"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the amount of free physical memory in bytes.      */
DECL|method|getFreePhysicalMemorySize
specifier|public
name|long
name|getFreePhysicalMemorySize
parameter_list|()
block|{
if|if
condition|(
name|getFreePhysicalMemorySize
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
return|return
operator|(
name|long
operator|)
name|getFreePhysicalMemorySize
operator|.
name|invoke
argument_list|(
name|osMxBean
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Returns the total amount of physical memory in bytes.      */
DECL|method|getTotalPhysicalMemorySize
specifier|public
name|long
name|getTotalPhysicalMemorySize
parameter_list|()
block|{
if|if
condition|(
name|getTotalPhysicalMemorySize
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
return|return
operator|(
name|long
operator|)
name|getTotalPhysicalMemorySize
operator|.
name|invoke
argument_list|(
name|osMxBean
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Returns the amount of free swap space in bytes.      */
DECL|method|getFreeSwapSpaceSize
specifier|public
name|long
name|getFreeSwapSpaceSize
parameter_list|()
block|{
if|if
condition|(
name|getFreeSwapSpaceSize
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
return|return
operator|(
name|long
operator|)
name|getFreeSwapSpaceSize
operator|.
name|invoke
argument_list|(
name|osMxBean
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Returns the total amount of swap space in bytes.      */
DECL|method|getTotalSwapSpaceSize
specifier|public
name|long
name|getTotalSwapSpaceSize
parameter_list|()
block|{
if|if
condition|(
name|getTotalSwapSpaceSize
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
return|return
operator|(
name|long
operator|)
name|getTotalSwapSpaceSize
operator|.
name|invoke
argument_list|(
name|osMxBean
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * The system load averages as an array.      *      * On Windows, this method returns {@code null}.      *      * On Linux, this method returns the 1, 5, and 15-minute load averages.      *      * On macOS, this method should return the 1-minute load average.      *      * @return the available system load averages or {@code null}      */
DECL|method|getSystemLoadAverage
specifier|final
name|double
index|[]
name|getSystemLoadAverage
parameter_list|()
block|{
if|if
condition|(
name|Constants
operator|.
name|WINDOWS
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|Constants
operator|.
name|LINUX
condition|)
block|{
try|try
block|{
specifier|final
name|String
name|procLoadAvg
init|=
name|readProcLoadavg
argument_list|()
decl_stmt|;
assert|assert
name|procLoadAvg
operator|.
name|matches
argument_list|(
literal|"(\\d+\\.\\d+\\s+){3}\\d+/\\d+\\s+\\d+"
argument_list|)
assert|;
specifier|final
name|String
index|[]
name|fields
init|=
name|procLoadAvg
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
return|return
operator|new
name|double
index|[]
block|{
name|Double
operator|.
name|parseDouble
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
block|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
block|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|fields
index|[
literal|2
index|]
argument_list|)
block|}
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"error reading /proc/loadavg"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
assert|assert
name|Constants
operator|.
name|MAC_OS_X
assert|;
if|if
condition|(
name|getSystemLoadAverage
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
specifier|final
name|double
name|oneMinuteLoadAverage
init|=
operator|(
name|double
operator|)
name|getSystemLoadAverage
operator|.
name|invoke
argument_list|(
name|osMxBean
argument_list|)
decl_stmt|;
return|return
operator|new
name|double
index|[]
block|{
name|oneMinuteLoadAverage
operator|>=
literal|0
condition|?
name|oneMinuteLoadAverage
else|:
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"error reading one minute load average from operating system"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/**      * The line from {@code /proc/loadavg}. The first three fields are the load averages averaged over 1, 5, and 15 minutes. The fourth      * field is two numbers separated by a slash, the first is the number of currently runnable scheduling entities, the second is the      * number of scheduling entities on the system. The fifth field is the PID of the most recently created process.      *      * @return the line from {@code /proc/loadavg} or {@code null}      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"access /proc/loadavg"
argument_list|)
DECL|method|readProcLoadavg
name|String
name|readProcLoadavg
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readSingleLine
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/proc/loadavg"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSystemCpuPercent
specifier|public
name|short
name|getSystemCpuPercent
parameter_list|()
block|{
return|return
name|Probes
operator|.
name|getLoadAndScaleToPercent
argument_list|(
name|getSystemCpuLoad
argument_list|,
name|osMxBean
argument_list|)
return|;
block|}
comment|/**      * Reads a file containing a single line.      *      * @param path path to the file to read      * @return the single line      * @throws IOException if an I/O exception occurs reading the file      */
DECL|method|readSingleLine
specifier|private
name|String
name|readSingleLine
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|path
argument_list|)
decl_stmt|;
assert|assert
name|lines
operator|!=
literal|null
operator|&&
name|lines
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
return|return
name|lines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// pattern for lines in /proc/self/cgroup
DECL|field|CONTROL_GROUP_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|CONTROL_GROUP_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\d+:([^:]+):(/.*)"
argument_list|)
decl_stmt|;
comment|// this property is to support a hack to workaround an issue with Docker containers mounting the cgroups hierarchy inconsistently with
comment|// respect to /proc/self/cgroup; for Docker containers this should be set to "/"
DECL|field|CONTROL_GROUPS_HIERARCHY_OVERRIDE
specifier|private
specifier|static
specifier|final
name|String
name|CONTROL_GROUPS_HIERARCHY_OVERRIDE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"es.cgroups.hierarchy.override"
argument_list|)
decl_stmt|;
comment|/**      * A map of the control groups to which the Elasticsearch process belongs. Note that this is a map because the control groups can vary      * from subsystem to subsystem. Additionally, this map can not be cached because a running process can be reclassified.      *      * @return a map from subsystems to the control group for the Elasticsearch process.      * @throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup}      */
DECL|method|getControlGroups
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getControlGroups
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|readProcSelfCgroup
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|controllerMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|line
range|:
name|lines
control|)
block|{
specifier|final
name|Matcher
name|matcher
init|=
name|CONTROL_GROUP_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
comment|// Matcher#matches must be invoked as matching is lazy; this can not happen in an assert as assertions might not be enabled
specifier|final
name|boolean
name|matches
init|=
name|matcher
operator|.
name|matches
argument_list|()
decl_stmt|;
assert|assert
name|matches
operator|:
name|line
assert|;
comment|// at this point we have captured the subsystems and the control group
specifier|final
name|String
index|[]
name|controllers
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|controller
range|:
name|controllers
control|)
block|{
if|if
condition|(
name|CONTROL_GROUPS_HIERARCHY_OVERRIDE
operator|!=
literal|null
condition|)
block|{
comment|/*                      * Docker violates the relationship between /proc/self/cgroup and the /sys/fs/cgroup hierarchy. It's possible that this                      * will be fixed in future versions of Docker with cgroup namespaces, but this requires modern kernels. Thus, we provide                      * an undocumented hack for overriding the control group path. Do not rely on this hack, it will be removed.                      */
name|controllerMap
operator|.
name|put
argument_list|(
name|controller
argument_list|,
name|CONTROL_GROUPS_HIERARCHY_OVERRIDE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|controllerMap
operator|.
name|put
argument_list|(
name|controller
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|controllerMap
return|;
block|}
comment|/**      * The lines from {@code /proc/self/cgroup}. This file represents the control groups to which the Elasticsearch process belongs. Each      * line in this file represents a control group hierarchy of the form      *<p>      * {@code \d+:([^:,]+(?:,[^:,]+)?):(/.*)}      *<p>      * with the first field representing the hierarchy ID, the second field representing a comma-separated list of the subsystems bound to      * the hierarchy, and the last field representing the control group.      *      * @return the lines from {@code /proc/self/cgroup}      * @throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup}      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"access /proc/self/cgroup"
argument_list|)
DECL|method|readProcSelfCgroup
name|List
argument_list|<
name|String
argument_list|>
name|readProcSelfCgroup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/proc/self/cgroup"
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|lines
operator|!=
literal|null
operator|&&
operator|!
name|lines
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|lines
return|;
block|}
comment|/**      * The total CPU time in nanoseconds consumed by all tasks in the cgroup to which the Elasticsearch process belongs for the {@code      * cpuacct} subsystem.      *      * @param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem      * @return the total CPU time in nanoseconds      * @throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group      */
DECL|method|getCgroupCpuAcctUsageNanos
specifier|private
name|long
name|getCgroupCpuAcctUsageNanos
parameter_list|(
specifier|final
name|String
name|controlGroup
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|readSysFsCgroupCpuAcctCpuAcctUsage
argument_list|(
name|controlGroup
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the line from {@code cpuacct.usage} for the control group to which the Elasticsearch process belongs for the {@code cpuacct}      * subsystem. This line represents the total CPU time in nanoseconds consumed by all tasks in the same control group.      *      * @param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpuacct} subsystem      * @return the line from {@code cpuacct.usage}      * @throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"access /sys/fs/cgroup/cpuacct"
argument_list|)
DECL|method|readSysFsCgroupCpuAcctCpuAcctUsage
name|String
name|readSysFsCgroupCpuAcctCpuAcctUsage
parameter_list|(
specifier|final
name|String
name|controlGroup
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readSingleLine
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/sys/fs/cgroup/cpuacct"
argument_list|,
name|controlGroup
argument_list|,
literal|"cpuacct.usage"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * The total period of time in microseconds for how frequently the Elasticsearch control group's access to CPU resources will be      * reallocated.      *      * @param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem      * @return the CFS quota period in microseconds      * @throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group      */
DECL|method|getCgroupCpuAcctCpuCfsPeriodMicros
specifier|private
name|long
name|getCgroupCpuAcctCpuCfsPeriodMicros
parameter_list|(
specifier|final
name|String
name|controlGroup
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|readSysFsCgroupCpuAcctCpuCfsPeriod
argument_list|(
name|controlGroup
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the line from {@code cpu.cfs_period_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}      * subsystem. This line represents the period of time in microseconds for how frequently the control group's access to CPU resources      * will be reallocated.      *      * @param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem      * @return the line from {@code cpu.cfs_period_us}      * @throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"access /sys/fs/cgroup/cpu"
argument_list|)
DECL|method|readSysFsCgroupCpuAcctCpuCfsPeriod
name|String
name|readSysFsCgroupCpuAcctCpuCfsPeriod
parameter_list|(
specifier|final
name|String
name|controlGroup
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readSingleLine
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/sys/fs/cgroup/cpu"
argument_list|,
name|controlGroup
argument_list|,
literal|"cpu.cfs_period_us"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * The total time in microseconds that all tasks in the Elasticsearch control group can run during one period as specified by {@code      * cpu.cfs_period_us}.      *      * @param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem      * @return the CFS quota in microseconds      * @throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group      */
DECL|method|getCgroupCpuAcctCpuCfsQuotaMicros
specifier|private
name|long
name|getCgroupCpuAcctCpuCfsQuotaMicros
parameter_list|(
specifier|final
name|String
name|controlGroup
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|readSysFsCgroupCpuAcctCpuAcctCfsQuota
argument_list|(
name|controlGroup
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the line from {@code cpu.cfs_quota_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}      * subsystem. This line represents the total time in microseconds that all tasks in the control group can run during one period as      * specified by {@code cpu.cfs_period_us}.      *      * @param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem      * @return the line from {@code cpu.cfs_quota_us}      * @throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"access /sys/fs/cgroup/cpu"
argument_list|)
DECL|method|readSysFsCgroupCpuAcctCpuAcctCfsQuota
name|String
name|readSysFsCgroupCpuAcctCpuAcctCfsQuota
parameter_list|(
specifier|final
name|String
name|controlGroup
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readSingleLine
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/sys/fs/cgroup/cpu"
argument_list|,
name|controlGroup
argument_list|,
literal|"cpu.cfs_quota_us"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * The CPU time statistics for all tasks in the Elasticsearch control group.      *      * @param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem      * @return the CPU time statistics      * @throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group      */
DECL|method|getCgroupCpuAcctCpuStat
specifier|private
name|OsStats
operator|.
name|Cgroup
operator|.
name|CpuStat
name|getCgroupCpuAcctCpuStat
parameter_list|(
specifier|final
name|String
name|controlGroup
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|readSysFsCgroupCpuAcctCpuStat
argument_list|(
name|controlGroup
argument_list|)
decl_stmt|;
name|long
name|numberOfPeriods
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|numberOfTimesThrottled
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|timeThrottledNanos
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|line
range|:
name|lines
control|)
block|{
specifier|final
name|String
index|[]
name|fields
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|fields
index|[
literal|0
index|]
condition|)
block|{
case|case
literal|"nr_periods"
case|:
name|numberOfPeriods
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"nr_throttled"
case|:
name|numberOfTimesThrottled
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"throttled_time"
case|:
name|timeThrottledNanos
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
assert|assert
name|numberOfPeriods
operator|!=
operator|-
literal|1
assert|;
assert|assert
name|numberOfTimesThrottled
operator|!=
operator|-
literal|1
assert|;
assert|assert
name|timeThrottledNanos
operator|!=
operator|-
literal|1
assert|;
return|return
operator|new
name|OsStats
operator|.
name|Cgroup
operator|.
name|CpuStat
argument_list|(
name|numberOfPeriods
argument_list|,
name|numberOfTimesThrottled
argument_list|,
name|timeThrottledNanos
argument_list|)
return|;
block|}
comment|/**      * Returns the lines from {@code cpu.stat} for the control group to which the Elasticsearch process belongs for the {@code cpu}      * subsystem. These lines represent the CPU time statistics and have the form      *<blockquote><pre>      * nr_periods \d+      * nr_throttled \d+      * throttled_time \d+      *</pre></blockquote>      * where {@code nr_periods} is the number of period intervals as specified by {@code cpu.cfs_period_us} that have elapsed, {@code      * nr_throttled} is the number of times tasks in the given control group have been throttled, and {@code throttled_time} is the total      * time in nanoseconds for which tasks in the given control group have been throttled.      *      * @param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem      * @return the lines from {@code cpu.stat}      * @throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"access /sys/fs/cgroup/cpu"
argument_list|)
DECL|method|readSysFsCgroupCpuAcctCpuStat
name|List
argument_list|<
name|String
argument_list|>
name|readSysFsCgroupCpuAcctCpuStat
parameter_list|(
specifier|final
name|String
name|controlGroup
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/sys/fs/cgroup/cpu"
argument_list|,
name|controlGroup
argument_list|,
literal|"cpu.stat"
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|lines
operator|!=
literal|null
operator|&&
name|lines
operator|.
name|size
argument_list|()
operator|==
literal|3
assert|;
return|return
name|lines
return|;
block|}
comment|/**      * Checks if cgroup stats are available by checking for the existence of {@code /proc/self/cgroup}, {@code /sys/fs/cgroup/cpu}, and      * {@code /sys/fs/cgroup/cpuacct}.      *      * @return {@code true} if the stats are available, otherwise {@code false}      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"access /proc/self/cgroup, /sys/fs/cgroup/cpu, and /sys/fs/cgroup/cpuacct"
argument_list|)
DECL|method|areCgroupStatsAvailable
name|boolean
name|areCgroupStatsAvailable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/proc/self/cgroup"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/sys/fs/cgroup/cpu"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/sys/fs/cgroup/cpuacct"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Basic cgroup stats.      *      * @return basic cgroup stats, or {@code null} if an I/O exception occurred reading the cgroup stats      */
DECL|method|getCgroup
specifier|private
name|OsStats
operator|.
name|Cgroup
name|getCgroup
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|!
name|areCgroupStatsAvailable
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|controllerMap
init|=
name|getControlGroups
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|controllerMap
operator|.
name|isEmpty
argument_list|()
assert|;
specifier|final
name|String
name|cpuAcctControlGroup
init|=
name|controllerMap
operator|.
name|get
argument_list|(
literal|"cpuacct"
argument_list|)
decl_stmt|;
assert|assert
name|cpuAcctControlGroup
operator|!=
literal|null
assert|;
specifier|final
name|long
name|cgroupCpuAcctUsageNanos
init|=
name|getCgroupCpuAcctUsageNanos
argument_list|(
name|cpuAcctControlGroup
argument_list|)
decl_stmt|;
specifier|final
name|String
name|cpuControlGroup
init|=
name|controllerMap
operator|.
name|get
argument_list|(
literal|"cpu"
argument_list|)
decl_stmt|;
assert|assert
name|cpuControlGroup
operator|!=
literal|null
assert|;
specifier|final
name|long
name|cgroupCpuAcctCpuCfsPeriodMicros
init|=
name|getCgroupCpuAcctCpuCfsPeriodMicros
argument_list|(
name|cpuControlGroup
argument_list|)
decl_stmt|;
specifier|final
name|long
name|cgroupCpuAcctCpuCfsQuotaMicros
init|=
name|getCgroupCpuAcctCpuCfsQuotaMicros
argument_list|(
name|cpuControlGroup
argument_list|)
decl_stmt|;
specifier|final
name|OsStats
operator|.
name|Cgroup
operator|.
name|CpuStat
name|cpuStat
init|=
name|getCgroupCpuAcctCpuStat
argument_list|(
name|cpuControlGroup
argument_list|)
decl_stmt|;
return|return
operator|new
name|OsStats
operator|.
name|Cgroup
argument_list|(
name|cpuAcctControlGroup
argument_list|,
name|cgroupCpuAcctUsageNanos
argument_list|,
name|cpuControlGroup
argument_list|,
name|cgroupCpuAcctCpuCfsPeriodMicros
argument_list|,
name|cgroupCpuAcctCpuCfsQuotaMicros
argument_list|,
name|cpuStat
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"error reading control group stats"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|class|OsProbeHolder
specifier|private
specifier|static
class|class
name|OsProbeHolder
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|OsProbe
name|INSTANCE
init|=
operator|new
name|OsProbe
argument_list|()
decl_stmt|;
block|}
DECL|method|getInstance
specifier|public
specifier|static
name|OsProbe
name|getInstance
parameter_list|()
block|{
return|return
name|OsProbeHolder
operator|.
name|INSTANCE
return|;
block|}
DECL|method|OsProbe
name|OsProbe
parameter_list|()
block|{      }
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|osInfo
specifier|public
name|OsInfo
name|osInfo
parameter_list|(
name|long
name|refreshInterval
parameter_list|,
name|int
name|allocatedProcessors
parameter_list|)
block|{
return|return
operator|new
name|OsInfo
argument_list|(
name|refreshInterval
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|,
name|allocatedProcessors
argument_list|,
name|Constants
operator|.
name|OS_NAME
argument_list|,
name|Constants
operator|.
name|OS_ARCH
argument_list|,
name|Constants
operator|.
name|OS_VERSION
argument_list|)
return|;
block|}
DECL|method|osStats
specifier|public
name|OsStats
name|osStats
parameter_list|()
block|{
specifier|final
name|OsStats
operator|.
name|Cpu
name|cpu
init|=
operator|new
name|OsStats
operator|.
name|Cpu
argument_list|(
name|getSystemCpuPercent
argument_list|()
argument_list|,
name|getSystemLoadAverage
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|OsStats
operator|.
name|Mem
name|mem
init|=
operator|new
name|OsStats
operator|.
name|Mem
argument_list|(
name|getTotalPhysicalMemorySize
argument_list|()
argument_list|,
name|getFreePhysicalMemorySize
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|OsStats
operator|.
name|Swap
name|swap
init|=
operator|new
name|OsStats
operator|.
name|Swap
argument_list|(
name|getTotalSwapSpaceSize
argument_list|()
argument_list|,
name|getFreeSwapSpaceSize
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|OsStats
operator|.
name|Cgroup
name|cgroup
init|=
name|Constants
operator|.
name|LINUX
condition|?
name|getCgroup
argument_list|()
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|OsStats
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|cpu
argument_list|,
name|mem
argument_list|,
name|swap
argument_list|,
name|cgroup
argument_list|)
return|;
block|}
comment|/**      * Returns a given method of the OperatingSystemMXBean, or null if the method is not found or unavailable.      */
DECL|method|getMethod
specifier|private
specifier|static
name|Method
name|getMethod
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.management.OperatingSystemMXBean"
argument_list|)
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// not available
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

