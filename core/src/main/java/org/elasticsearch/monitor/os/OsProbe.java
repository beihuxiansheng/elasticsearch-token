begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.os
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|Probes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|OperatingSystemMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|OsProbe
specifier|public
class|class
name|OsProbe
block|{
DECL|field|osMxBean
specifier|private
specifier|static
specifier|final
name|OperatingSystemMXBean
name|osMxBean
init|=
name|ManagementFactory
operator|.
name|getOperatingSystemMXBean
argument_list|()
decl_stmt|;
DECL|field|getFreePhysicalMemorySize
specifier|private
specifier|static
specifier|final
name|Method
name|getFreePhysicalMemorySize
decl_stmt|;
DECL|field|getTotalPhysicalMemorySize
specifier|private
specifier|static
specifier|final
name|Method
name|getTotalPhysicalMemorySize
decl_stmt|;
DECL|field|getFreeSwapSpaceSize
specifier|private
specifier|static
specifier|final
name|Method
name|getFreeSwapSpaceSize
decl_stmt|;
DECL|field|getTotalSwapSpaceSize
specifier|private
specifier|static
specifier|final
name|Method
name|getTotalSwapSpaceSize
decl_stmt|;
DECL|field|getSystemLoadAverage
specifier|private
specifier|static
specifier|final
name|Method
name|getSystemLoadAverage
decl_stmt|;
DECL|field|getSystemCpuLoad
specifier|private
specifier|static
specifier|final
name|Method
name|getSystemCpuLoad
decl_stmt|;
static|static
block|{
name|getFreePhysicalMemorySize
operator|=
name|getMethod
argument_list|(
literal|"getFreePhysicalMemorySize"
argument_list|)
expr_stmt|;
name|getTotalPhysicalMemorySize
operator|=
name|getMethod
argument_list|(
literal|"getTotalPhysicalMemorySize"
argument_list|)
expr_stmt|;
name|getFreeSwapSpaceSize
operator|=
name|getMethod
argument_list|(
literal|"getFreeSwapSpaceSize"
argument_list|)
expr_stmt|;
name|getTotalSwapSpaceSize
operator|=
name|getMethod
argument_list|(
literal|"getTotalSwapSpaceSize"
argument_list|)
expr_stmt|;
name|getSystemLoadAverage
operator|=
name|getMethod
argument_list|(
literal|"getSystemLoadAverage"
argument_list|)
expr_stmt|;
name|getSystemCpuLoad
operator|=
name|getMethod
argument_list|(
literal|"getSystemCpuLoad"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the amount of free physical memory in bytes.      */
DECL|method|getFreePhysicalMemorySize
specifier|public
name|long
name|getFreePhysicalMemorySize
parameter_list|()
block|{
if|if
condition|(
name|getFreePhysicalMemorySize
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
return|return
operator|(
name|long
operator|)
name|getFreePhysicalMemorySize
operator|.
name|invoke
argument_list|(
name|osMxBean
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Returns the total amount of physical memory in bytes.      */
DECL|method|getTotalPhysicalMemorySize
specifier|public
name|long
name|getTotalPhysicalMemorySize
parameter_list|()
block|{
if|if
condition|(
name|getTotalPhysicalMemorySize
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
return|return
operator|(
name|long
operator|)
name|getTotalPhysicalMemorySize
operator|.
name|invoke
argument_list|(
name|osMxBean
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Returns the amount of free swap space in bytes.      */
DECL|method|getFreeSwapSpaceSize
specifier|public
name|long
name|getFreeSwapSpaceSize
parameter_list|()
block|{
if|if
condition|(
name|getFreeSwapSpaceSize
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
return|return
operator|(
name|long
operator|)
name|getFreeSwapSpaceSize
operator|.
name|invoke
argument_list|(
name|osMxBean
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Returns the total amount of swap space in bytes.      */
DECL|method|getTotalSwapSpaceSize
specifier|public
name|long
name|getTotalSwapSpaceSize
parameter_list|()
block|{
if|if
condition|(
name|getTotalSwapSpaceSize
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
return|return
operator|(
name|long
operator|)
name|getTotalSwapSpaceSize
operator|.
name|invoke
argument_list|(
name|osMxBean
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * The system load averages as an array.      *      * On Windows, this method returns {@code null}.      *      * On Linux, this method should return the 1, 5, and 15-minute load      * averages. If obtaining these values from {@code /proc/loadavg}      * fails, the method will fallback to obtaining the 1-minute load      * average.      *      * On macOS, this method should return the 1-minute load average.      *      * @return the available system load averages or {@code null}      */
DECL|method|getSystemLoadAverage
specifier|final
name|double
index|[]
name|getSystemLoadAverage
parameter_list|()
block|{
if|if
condition|(
name|Constants
operator|.
name|WINDOWS
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|Constants
operator|.
name|LINUX
condition|)
block|{
specifier|final
name|String
name|procLoadAvg
init|=
name|readProcLoadavg
argument_list|()
decl_stmt|;
if|if
condition|(
name|procLoadAvg
operator|!=
literal|null
condition|)
block|{
assert|assert
name|procLoadAvg
operator|.
name|matches
argument_list|(
literal|"(\\d+\\.\\d+\\s+){3}\\d+/\\d+\\s+\\d+"
argument_list|)
assert|;
specifier|final
name|String
index|[]
name|fields
init|=
name|procLoadAvg
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|double
index|[]
block|{
name|Double
operator|.
name|parseDouble
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
block|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
block|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|fields
index|[
literal|2
index|]
argument_list|)
block|}
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"error parsing /proc/loadavg [{}]"
argument_list|,
name|procLoadAvg
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// fallback
block|}
if|if
condition|(
name|getSystemLoadAverage
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
specifier|final
name|double
name|oneMinuteLoadAverage
init|=
operator|(
name|double
operator|)
name|getSystemLoadAverage
operator|.
name|invoke
argument_list|(
name|osMxBean
argument_list|)
decl_stmt|;
return|return
operator|new
name|double
index|[]
block|{
name|oneMinuteLoadAverage
operator|>=
literal|0
condition|?
name|oneMinuteLoadAverage
else|:
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"error obtaining system load average"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * The line from {@code /proc/loadavg}. The first three fields are      * the load averages averaged over 1, 5, and 15 minutes. The fourth      * field is two numbers separated by a slash, the first is the      * number of currently runnable scheduling entities, the second is      * the number of scheduling entities on the system. The fifth field      * is the PID of the most recently created process.      *      * @return the line from {@code /proc/loadavg} or {@code null}      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"access /proc/loadavg"
argument_list|)
DECL|method|readProcLoadavg
name|String
name|readProcLoadavg
parameter_list|()
block|{
try|try
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/proc/loadavg"
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|lines
operator|!=
literal|null
operator|&&
name|lines
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
return|return
name|lines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"error reading /proc/loadavg"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|getSystemCpuPercent
specifier|public
name|short
name|getSystemCpuPercent
parameter_list|()
block|{
return|return
name|Probes
operator|.
name|getLoadAndScaleToPercent
argument_list|(
name|getSystemCpuLoad
argument_list|,
name|osMxBean
argument_list|)
return|;
block|}
DECL|class|OsProbeHolder
specifier|private
specifier|static
class|class
name|OsProbeHolder
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|OsProbe
name|INSTANCE
init|=
operator|new
name|OsProbe
argument_list|()
decl_stmt|;
block|}
DECL|method|getInstance
specifier|public
specifier|static
name|OsProbe
name|getInstance
parameter_list|()
block|{
return|return
name|OsProbeHolder
operator|.
name|INSTANCE
return|;
block|}
DECL|method|OsProbe
name|OsProbe
parameter_list|()
block|{     }
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|osInfo
specifier|public
name|OsInfo
name|osInfo
parameter_list|(
name|long
name|refreshInterval
parameter_list|,
name|int
name|allocatedProcessors
parameter_list|)
block|{
return|return
operator|new
name|OsInfo
argument_list|(
name|refreshInterval
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|,
name|allocatedProcessors
argument_list|,
name|Constants
operator|.
name|OS_NAME
argument_list|,
name|Constants
operator|.
name|OS_ARCH
argument_list|,
name|Constants
operator|.
name|OS_VERSION
argument_list|)
return|;
block|}
DECL|method|osStats
specifier|public
name|OsStats
name|osStats
parameter_list|()
block|{
name|OsStats
operator|.
name|Cpu
name|cpu
init|=
operator|new
name|OsStats
operator|.
name|Cpu
argument_list|(
name|getSystemCpuPercent
argument_list|()
argument_list|,
name|getSystemLoadAverage
argument_list|()
argument_list|)
decl_stmt|;
name|OsStats
operator|.
name|Mem
name|mem
init|=
operator|new
name|OsStats
operator|.
name|Mem
argument_list|(
name|getTotalPhysicalMemorySize
argument_list|()
argument_list|,
name|getFreePhysicalMemorySize
argument_list|()
argument_list|)
decl_stmt|;
name|OsStats
operator|.
name|Swap
name|swap
init|=
operator|new
name|OsStats
operator|.
name|Swap
argument_list|(
name|getTotalSwapSpaceSize
argument_list|()
argument_list|,
name|getFreeSwapSpaceSize
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|OsStats
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|cpu
argument_list|,
name|mem
argument_list|,
name|swap
argument_list|)
return|;
block|}
comment|/**      * Returns a given method of the OperatingSystemMXBean,      * or null if the method is not found or unavailable.      */
DECL|method|getMethod
specifier|private
specifier|static
name|Method
name|getMethod
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.management.OperatingSystemMXBean"
argument_list|)
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// not available
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

