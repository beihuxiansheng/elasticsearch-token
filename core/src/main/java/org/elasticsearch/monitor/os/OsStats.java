begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.os
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|OsStats
specifier|public
class|class
name|OsStats
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|timestamp
name|long
name|timestamp
decl_stmt|;
DECL|field|loadAverage
name|double
name|loadAverage
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|mem
name|Mem
name|mem
init|=
literal|null
decl_stmt|;
DECL|field|swap
name|Swap
name|swap
init|=
literal|null
decl_stmt|;
DECL|method|OsStats
name|OsStats
parameter_list|()
block|{     }
DECL|method|getTimestamp
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
DECL|method|getLoadAverage
specifier|public
name|double
name|getLoadAverage
parameter_list|()
block|{
return|return
name|loadAverage
return|;
block|}
DECL|method|getMem
specifier|public
name|Mem
name|getMem
parameter_list|()
block|{
return|return
name|mem
return|;
block|}
DECL|method|getSwap
specifier|public
name|Swap
name|getSwap
parameter_list|()
block|{
return|return
name|swap
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|OS
specifier|static
specifier|final
name|XContentBuilderString
name|OS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"os"
argument_list|)
decl_stmt|;
DECL|field|TIMESTAMP
specifier|static
specifier|final
name|XContentBuilderString
name|TIMESTAMP
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"timestamp"
argument_list|)
decl_stmt|;
DECL|field|LOAD_AVERAGE
specifier|static
specifier|final
name|XContentBuilderString
name|LOAD_AVERAGE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"load_average"
argument_list|)
decl_stmt|;
DECL|field|MEM
specifier|static
specifier|final
name|XContentBuilderString
name|MEM
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"mem"
argument_list|)
decl_stmt|;
DECL|field|SWAP
specifier|static
specifier|final
name|XContentBuilderString
name|SWAP
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"swap"
argument_list|)
decl_stmt|;
DECL|field|FREE
specifier|static
specifier|final
name|XContentBuilderString
name|FREE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"free"
argument_list|)
decl_stmt|;
DECL|field|FREE_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|FREE_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"free_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|USED
specifier|static
specifier|final
name|XContentBuilderString
name|USED
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"used"
argument_list|)
decl_stmt|;
DECL|field|USED_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|USED_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"used_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|TOTAL
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
DECL|field|TOTAL_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|FREE_PERCENT
specifier|static
specifier|final
name|XContentBuilderString
name|FREE_PERCENT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"free_percent"
argument_list|)
decl_stmt|;
DECL|field|USED_PERCENT
specifier|static
specifier|final
name|XContentBuilderString
name|USED_PERCENT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"used_percent"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|OS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TIMESTAMP
argument_list|,
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|LOAD_AVERAGE
argument_list|,
name|getLoadAverage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mem
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|MEM
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|TOTAL_IN_BYTES
argument_list|,
name|Fields
operator|.
name|TOTAL
argument_list|,
name|mem
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|FREE_IN_BYTES
argument_list|,
name|Fields
operator|.
name|FREE
argument_list|,
name|mem
operator|.
name|getFree
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|USED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|USED
argument_list|,
name|mem
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|FREE_PERCENT
argument_list|,
name|mem
operator|.
name|getFreePercent
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|USED_PERCENT
argument_list|,
name|mem
operator|.
name|getUsedPercent
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|swap
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|SWAP
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|TOTAL_IN_BYTES
argument_list|,
name|Fields
operator|.
name|TOTAL
argument_list|,
name|swap
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|FREE_IN_BYTES
argument_list|,
name|Fields
operator|.
name|FREE
argument_list|,
name|swap
operator|.
name|getFree
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|USED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|USED
argument_list|,
name|swap
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|readOsStats
specifier|public
specifier|static
name|OsStats
name|readOsStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|OsStats
name|stats
init|=
operator|new
name|OsStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|timestamp
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|loadAverage
operator|=
name|in
operator|.
name|readDouble
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|mem
operator|=
name|Mem
operator|.
name|readMem
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|swap
operator|=
name|Swap
operator|.
name|readSwap
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
name|loadAverage
argument_list|)
expr_stmt|;
if|if
condition|(
name|mem
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mem
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|swap
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|swap
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Swap
specifier|public
specifier|static
class|class
name|Swap
implements|implements
name|Streamable
block|{
DECL|field|total
name|long
name|total
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|free
name|long
name|free
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|getFree
specifier|public
name|ByteSizeValue
name|getFree
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|free
argument_list|)
return|;
block|}
DECL|method|getUsed
specifier|public
name|ByteSizeValue
name|getUsed
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|total
operator|-
name|free
argument_list|)
return|;
block|}
DECL|method|getTotal
specifier|public
name|ByteSizeValue
name|getTotal
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|total
argument_list|)
return|;
block|}
DECL|method|readSwap
specifier|public
specifier|static
name|Swap
name|readSwap
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Swap
name|swap
init|=
operator|new
name|Swap
argument_list|()
decl_stmt|;
name|swap
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|swap
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|total
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|free
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Mem
specifier|public
specifier|static
class|class
name|Mem
implements|implements
name|Streamable
block|{
DECL|field|total
name|long
name|total
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|free
name|long
name|free
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|readMem
specifier|public
specifier|static
name|Mem
name|readMem
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Mem
name|mem
init|=
operator|new
name|Mem
argument_list|()
decl_stmt|;
name|mem
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|mem
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|total
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|free
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
DECL|method|getTotal
specifier|public
name|ByteSizeValue
name|getTotal
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|total
argument_list|)
return|;
block|}
DECL|method|getUsed
specifier|public
name|ByteSizeValue
name|getUsed
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|total
operator|-
name|free
argument_list|)
return|;
block|}
DECL|method|getUsedPercent
specifier|public
name|short
name|getUsedPercent
parameter_list|()
block|{
return|return
name|calculatePercentage
argument_list|(
name|getUsed
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|getTotal
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getFree
specifier|public
name|ByteSizeValue
name|getFree
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|free
argument_list|)
return|;
block|}
DECL|method|getFreePercent
specifier|public
name|short
name|getFreePercent
parameter_list|()
block|{
return|return
name|calculatePercentage
argument_list|(
name|getFree
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|getTotal
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|calculatePercentage
specifier|private
specifier|static
name|short
name|calculatePercentage
parameter_list|(
name|long
name|used
parameter_list|,
name|long
name|max
parameter_list|)
block|{
return|return
name|max
operator|<=
literal|0
condition|?
literal|0
else|:
call|(
name|short
call|)
argument_list|(
name|Math
operator|.
name|round
argument_list|(
operator|(
literal|100d
operator|*
name|used
operator|)
operator|/
name|max
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

