begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.os
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|OsStats
specifier|public
class|class
name|OsStats
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|timestamp
specifier|private
specifier|final
name|long
name|timestamp
decl_stmt|;
DECL|field|cpu
specifier|private
specifier|final
name|Cpu
name|cpu
decl_stmt|;
DECL|field|mem
specifier|private
specifier|final
name|Mem
name|mem
decl_stmt|;
DECL|field|swap
specifier|private
specifier|final
name|Swap
name|swap
decl_stmt|;
DECL|field|cgroup
specifier|private
specifier|final
name|Cgroup
name|cgroup
decl_stmt|;
DECL|method|OsStats
specifier|public
name|OsStats
parameter_list|(
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|Cpu
name|cpu
parameter_list|,
specifier|final
name|Mem
name|mem
parameter_list|,
specifier|final
name|Swap
name|swap
parameter_list|,
specifier|final
name|Cgroup
name|cgroup
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|cpu
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|cpu
argument_list|)
expr_stmt|;
name|this
operator|.
name|mem
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|mem
argument_list|)
expr_stmt|;
name|this
operator|.
name|swap
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|swap
argument_list|)
expr_stmt|;
name|this
operator|.
name|cgroup
operator|=
name|cgroup
expr_stmt|;
block|}
DECL|method|OsStats
specifier|public
name|OsStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|timestamp
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|cpu
operator|=
operator|new
name|Cpu
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|mem
operator|=
operator|new
name|Mem
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|swap
operator|=
operator|new
name|Swap
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_1_1
argument_list|)
condition|)
block|{
name|this
operator|.
name|cgroup
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|Cgroup
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|cgroup
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|cpu
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|mem
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|swap
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_1_1
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|cgroup
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTimestamp
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
DECL|method|getCpu
specifier|public
name|Cpu
name|getCpu
parameter_list|()
block|{
return|return
name|cpu
return|;
block|}
DECL|method|getMem
specifier|public
name|Mem
name|getMem
parameter_list|()
block|{
return|return
name|mem
return|;
block|}
DECL|method|getSwap
specifier|public
name|Swap
name|getSwap
parameter_list|()
block|{
return|return
name|swap
return|;
block|}
DECL|method|getCgroup
specifier|public
name|Cgroup
name|getCgroup
parameter_list|()
block|{
return|return
name|cgroup
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|OS
specifier|static
specifier|final
name|String
name|OS
init|=
literal|"os"
decl_stmt|;
DECL|field|TIMESTAMP
specifier|static
specifier|final
name|String
name|TIMESTAMP
init|=
literal|"timestamp"
decl_stmt|;
DECL|field|CPU
specifier|static
specifier|final
name|String
name|CPU
init|=
literal|"cpu"
decl_stmt|;
DECL|field|PERCENT
specifier|static
specifier|final
name|String
name|PERCENT
init|=
literal|"percent"
decl_stmt|;
DECL|field|LOAD_AVERAGE
specifier|static
specifier|final
name|String
name|LOAD_AVERAGE
init|=
literal|"load_average"
decl_stmt|;
DECL|field|LOAD_AVERAGE_1M
specifier|static
specifier|final
name|String
name|LOAD_AVERAGE_1M
init|=
literal|"1m"
decl_stmt|;
DECL|field|LOAD_AVERAGE_5M
specifier|static
specifier|final
name|String
name|LOAD_AVERAGE_5M
init|=
literal|"5m"
decl_stmt|;
DECL|field|LOAD_AVERAGE_15M
specifier|static
specifier|final
name|String
name|LOAD_AVERAGE_15M
init|=
literal|"15m"
decl_stmt|;
DECL|field|MEM
specifier|static
specifier|final
name|String
name|MEM
init|=
literal|"mem"
decl_stmt|;
DECL|field|SWAP
specifier|static
specifier|final
name|String
name|SWAP
init|=
literal|"swap"
decl_stmt|;
DECL|field|FREE
specifier|static
specifier|final
name|String
name|FREE
init|=
literal|"free"
decl_stmt|;
DECL|field|FREE_IN_BYTES
specifier|static
specifier|final
name|String
name|FREE_IN_BYTES
init|=
literal|"free_in_bytes"
decl_stmt|;
DECL|field|USED
specifier|static
specifier|final
name|String
name|USED
init|=
literal|"used"
decl_stmt|;
DECL|field|USED_IN_BYTES
specifier|static
specifier|final
name|String
name|USED_IN_BYTES
init|=
literal|"used_in_bytes"
decl_stmt|;
DECL|field|TOTAL
specifier|static
specifier|final
name|String
name|TOTAL
init|=
literal|"total"
decl_stmt|;
DECL|field|TOTAL_IN_BYTES
specifier|static
specifier|final
name|String
name|TOTAL_IN_BYTES
init|=
literal|"total_in_bytes"
decl_stmt|;
DECL|field|FREE_PERCENT
specifier|static
specifier|final
name|String
name|FREE_PERCENT
init|=
literal|"free_percent"
decl_stmt|;
DECL|field|USED_PERCENT
specifier|static
specifier|final
name|String
name|USED_PERCENT
init|=
literal|"used_percent"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|OS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TIMESTAMP
argument_list|,
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|cpu
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|mem
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|swap
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|cgroup
operator|!=
literal|null
condition|)
block|{
name|cgroup
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Cpu
specifier|public
specifier|static
class|class
name|Cpu
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|percent
specifier|private
specifier|final
name|short
name|percent
decl_stmt|;
DECL|field|loadAverage
specifier|private
specifier|final
name|double
index|[]
name|loadAverage
decl_stmt|;
DECL|method|Cpu
specifier|public
name|Cpu
parameter_list|(
name|short
name|systemCpuPercent
parameter_list|,
name|double
index|[]
name|systemLoadAverage
parameter_list|)
block|{
name|this
operator|.
name|percent
operator|=
name|systemCpuPercent
expr_stmt|;
name|this
operator|.
name|loadAverage
operator|=
name|systemLoadAverage
expr_stmt|;
block|}
DECL|method|Cpu
specifier|public
name|Cpu
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|percent
operator|=
name|in
operator|.
name|readShort
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|this
operator|.
name|loadAverage
operator|=
name|in
operator|.
name|readDoubleArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|loadAverage
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeShort
argument_list|(
name|percent
argument_list|)
expr_stmt|;
if|if
condition|(
name|loadAverage
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeDoubleArray
argument_list|(
name|loadAverage
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPercent
specifier|public
name|short
name|getPercent
parameter_list|()
block|{
return|return
name|percent
return|;
block|}
DECL|method|getLoadAverage
specifier|public
name|double
index|[]
name|getLoadAverage
parameter_list|()
block|{
return|return
name|loadAverage
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|CPU
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PERCENT
argument_list|,
name|getPercent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLoadAverage
argument_list|()
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|stream
argument_list|(
name|getLoadAverage
argument_list|()
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|load
lambda|->
name|load
operator|!=
operator|-
literal|1
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|LOAD_AVERAGE
argument_list|)
block|;
if|if
condition|(
name|getLoadAverage
argument_list|()
index|[
literal|0
index|]
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|LOAD_AVERAGE_1M
argument_list|,
name|getLoadAverage
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLoadAverage
argument_list|()
index|[
literal|1
index|]
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|LOAD_AVERAGE_5M
argument_list|,
name|getLoadAverage
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLoadAverage
argument_list|()
index|[
literal|2
index|]
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|LOAD_AVERAGE_15M
argument_list|,
name|getLoadAverage
argument_list|()
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
parameter_list|()
constructor_decl|;
return|return
name|builder
return|;
block|}
block|}
end_class

begin_class
DECL|class|Swap
specifier|public
specifier|static
class|class
name|Swap
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|total
specifier|private
specifier|final
name|long
name|total
decl_stmt|;
DECL|field|free
specifier|private
specifier|final
name|long
name|free
decl_stmt|;
DECL|method|Swap
specifier|public
name|Swap
parameter_list|(
name|long
name|total
parameter_list|,
name|long
name|free
parameter_list|)
block|{
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
name|this
operator|.
name|free
operator|=
name|free
expr_stmt|;
block|}
DECL|method|Swap
specifier|public
name|Swap
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|total
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|free
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
DECL|method|getFree
specifier|public
name|ByteSizeValue
name|getFree
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|free
argument_list|)
return|;
block|}
DECL|method|getUsed
specifier|public
name|ByteSizeValue
name|getUsed
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|total
operator|-
name|free
argument_list|)
return|;
block|}
DECL|method|getTotal
specifier|public
name|ByteSizeValue
name|getTotal
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|total
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|SWAP
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|TOTAL_IN_BYTES
argument_list|,
name|Fields
operator|.
name|TOTAL
argument_list|,
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|FREE_IN_BYTES
argument_list|,
name|Fields
operator|.
name|FREE
argument_list|,
name|getFree
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|USED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|USED
argument_list|,
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

begin_class
DECL|class|Mem
specifier|public
specifier|static
class|class
name|Mem
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|total
specifier|private
specifier|final
name|long
name|total
decl_stmt|;
DECL|field|free
specifier|private
specifier|final
name|long
name|free
decl_stmt|;
DECL|method|Mem
specifier|public
name|Mem
parameter_list|(
name|long
name|total
parameter_list|,
name|long
name|free
parameter_list|)
block|{
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
name|this
operator|.
name|free
operator|=
name|free
expr_stmt|;
block|}
DECL|method|Mem
specifier|public
name|Mem
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|total
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|free
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
DECL|method|getTotal
specifier|public
name|ByteSizeValue
name|getTotal
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|total
argument_list|)
return|;
block|}
DECL|method|getUsed
specifier|public
name|ByteSizeValue
name|getUsed
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|total
operator|-
name|free
argument_list|)
return|;
block|}
DECL|method|getUsedPercent
specifier|public
name|short
name|getUsedPercent
parameter_list|()
block|{
return|return
name|calculatePercentage
argument_list|(
name|getUsed
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|total
argument_list|)
return|;
block|}
DECL|method|getFree
specifier|public
name|ByteSizeValue
name|getFree
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|free
argument_list|)
return|;
block|}
DECL|method|getFreePercent
specifier|public
name|short
name|getFreePercent
parameter_list|()
block|{
return|return
name|calculatePercentage
argument_list|(
name|free
argument_list|,
name|total
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|MEM
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|TOTAL_IN_BYTES
argument_list|,
name|Fields
operator|.
name|TOTAL
argument_list|,
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|FREE_IN_BYTES
argument_list|,
name|Fields
operator|.
name|FREE
argument_list|,
name|getFree
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|USED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|USED
argument_list|,
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|FREE_PERCENT
argument_list|,
name|getFreePercent
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|USED_PERCENT
argument_list|,
name|getUsedPercent
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

begin_comment
comment|/**      * Encapsulates basic cgroup statistics.      */
end_comment

begin_class
DECL|class|Cgroup
specifier|public
specifier|static
class|class
name|Cgroup
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|cpuAcctControlGroup
specifier|private
specifier|final
name|String
name|cpuAcctControlGroup
decl_stmt|;
DECL|field|cpuAcctUsageNanos
specifier|private
specifier|final
name|long
name|cpuAcctUsageNanos
decl_stmt|;
DECL|field|cpuControlGroup
specifier|private
specifier|final
name|String
name|cpuControlGroup
decl_stmt|;
DECL|field|cpuCfsPeriodMicros
specifier|private
specifier|final
name|long
name|cpuCfsPeriodMicros
decl_stmt|;
DECL|field|cpuCfsQuotaMicros
specifier|private
specifier|final
name|long
name|cpuCfsQuotaMicros
decl_stmt|;
DECL|field|cpuStat
specifier|private
specifier|final
name|CpuStat
name|cpuStat
decl_stmt|;
comment|/**          * The control group for the {@code cpuacct} subsystem.          *          * @return the control group          */
DECL|method|getCpuAcctControlGroup
specifier|public
name|String
name|getCpuAcctControlGroup
parameter_list|()
block|{
return|return
name|cpuAcctControlGroup
return|;
block|}
comment|/**          * The total CPU time consumed by all tasks in the          * {@code cpuacct} control group from          * {@link Cgroup#cpuAcctControlGroup}.          *          * @return the total CPU time in nanoseconds          */
DECL|method|getCpuAcctUsageNanos
specifier|public
name|long
name|getCpuAcctUsageNanos
parameter_list|()
block|{
return|return
name|cpuAcctUsageNanos
return|;
block|}
comment|/**          * The control group for the {@code cpu} subsystem.          *          * @return the control group          */
DECL|method|getCpuControlGroup
specifier|public
name|String
name|getCpuControlGroup
parameter_list|()
block|{
return|return
name|cpuControlGroup
return|;
block|}
comment|/**          * The period of time for how frequently the control group from          * {@link Cgroup#cpuControlGroup} has its access to CPU          * resources reallocated.          *          * @return the period of time in microseconds          */
DECL|method|getCpuCfsPeriodMicros
specifier|public
name|long
name|getCpuCfsPeriodMicros
parameter_list|()
block|{
return|return
name|cpuCfsPeriodMicros
return|;
block|}
comment|/**          * The total amount of time for which all tasks in the control          * group from {@link Cgroup#cpuControlGroup} can run in one          * period as represented by {@link Cgroup#cpuCfsPeriodMicros}.          *          * @return the total amount of time in microseconds          */
DECL|method|getCpuCfsQuotaMicros
specifier|public
name|long
name|getCpuCfsQuotaMicros
parameter_list|()
block|{
return|return
name|cpuCfsQuotaMicros
return|;
block|}
comment|/**          * The CPU time statistics. See {@link CpuStat}.          *          * @return the CPU time statistics.          */
DECL|method|getCpuStat
specifier|public
name|CpuStat
name|getCpuStat
parameter_list|()
block|{
return|return
name|cpuStat
return|;
block|}
DECL|method|Cgroup
specifier|public
name|Cgroup
parameter_list|(
specifier|final
name|String
name|cpuAcctControlGroup
parameter_list|,
specifier|final
name|long
name|cpuAcctUsageNanos
parameter_list|,
specifier|final
name|String
name|cpuControlGroup
parameter_list|,
specifier|final
name|long
name|cpuCfsPeriodMicros
parameter_list|,
specifier|final
name|long
name|cpuCfsQuotaMicros
parameter_list|,
specifier|final
name|CpuStat
name|cpuStat
parameter_list|)
block|{
name|this
operator|.
name|cpuAcctControlGroup
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|cpuAcctControlGroup
argument_list|)
expr_stmt|;
name|this
operator|.
name|cpuAcctUsageNanos
operator|=
name|cpuAcctUsageNanos
expr_stmt|;
name|this
operator|.
name|cpuControlGroup
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|cpuControlGroup
argument_list|)
expr_stmt|;
name|this
operator|.
name|cpuCfsPeriodMicros
operator|=
name|cpuCfsPeriodMicros
expr_stmt|;
name|this
operator|.
name|cpuCfsQuotaMicros
operator|=
name|cpuCfsQuotaMicros
expr_stmt|;
name|this
operator|.
name|cpuStat
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|cpuStat
argument_list|)
expr_stmt|;
block|}
DECL|method|Cgroup
name|Cgroup
parameter_list|(
specifier|final
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|cpuAcctControlGroup
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|cpuAcctUsageNanos
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|cpuControlGroup
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|cpuCfsPeriodMicros
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|cpuCfsQuotaMicros
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|cpuStat
operator|=
operator|new
name|CpuStat
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
specifier|final
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|cpuAcctControlGroup
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|cpuAcctUsageNanos
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|cpuControlGroup
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|cpuCfsPeriodMicros
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|cpuCfsQuotaMicros
argument_list|)
expr_stmt|;
name|cpuStat
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
specifier|final
name|XContentBuilder
name|builder
parameter_list|,
specifier|final
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"cgroup"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"cpuacct"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"control_group"
argument_list|,
name|cpuAcctControlGroup
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"usage_nanos"
argument_list|,
name|cpuAcctUsageNanos
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"cpu"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"control_group"
argument_list|,
name|cpuControlGroup
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"cfs_period_micros"
argument_list|,
name|cpuCfsPeriodMicros
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"cfs_quota_micros"
argument_list|,
name|cpuCfsQuotaMicros
argument_list|)
expr_stmt|;
name|cpuStat
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**          * Encapsulates CPU time statistics.          */
DECL|class|CpuStat
specifier|public
specifier|static
class|class
name|CpuStat
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|numberOfElapsedPeriods
specifier|private
specifier|final
name|long
name|numberOfElapsedPeriods
decl_stmt|;
DECL|field|numberOfTimesThrottled
specifier|private
specifier|final
name|long
name|numberOfTimesThrottled
decl_stmt|;
DECL|field|timeThrottledNanos
specifier|private
specifier|final
name|long
name|timeThrottledNanos
decl_stmt|;
comment|/**              * The number of elapsed periods.              *              * @return the number of elapsed periods as measured by              * {@code cpu.cfs_period_us}              */
DECL|method|getNumberOfElapsedPeriods
specifier|public
name|long
name|getNumberOfElapsedPeriods
parameter_list|()
block|{
return|return
name|numberOfElapsedPeriods
return|;
block|}
comment|/**              * The number of times tasks in the control group have been              * throttled.              *              * @return the number of times              */
DECL|method|getNumberOfTimesThrottled
specifier|public
name|long
name|getNumberOfTimesThrottled
parameter_list|()
block|{
return|return
name|numberOfTimesThrottled
return|;
block|}
comment|/**              * The total time duration for which tasks in the control              * group have been throttled.              *              * @return the total time in nanoseconds              */
DECL|method|getTimeThrottledNanos
specifier|public
name|long
name|getTimeThrottledNanos
parameter_list|()
block|{
return|return
name|timeThrottledNanos
return|;
block|}
DECL|method|CpuStat
specifier|public
name|CpuStat
parameter_list|(
specifier|final
name|long
name|numberOfElapsedPeriods
parameter_list|,
specifier|final
name|long
name|numberOfTimesThrottled
parameter_list|,
specifier|final
name|long
name|timeThrottledNanos
parameter_list|)
block|{
name|this
operator|.
name|numberOfElapsedPeriods
operator|=
name|numberOfElapsedPeriods
expr_stmt|;
name|this
operator|.
name|numberOfTimesThrottled
operator|=
name|numberOfTimesThrottled
expr_stmt|;
name|this
operator|.
name|timeThrottledNanos
operator|=
name|timeThrottledNanos
expr_stmt|;
block|}
DECL|method|CpuStat
name|CpuStat
parameter_list|(
specifier|final
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|numberOfElapsedPeriods
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|numberOfTimesThrottled
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|timeThrottledNanos
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
specifier|final
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|numberOfElapsedPeriods
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|numberOfTimesThrottled
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|timeThrottledNanos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"stat"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"number_of_elapsed_periods"
argument_list|,
name|numberOfElapsedPeriods
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"number_of_times_throttled"
argument_list|,
name|numberOfTimesThrottled
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"time_throttled_nanos"
argument_list|,
name|timeThrottledNanos
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

begin_function
DECL|method|calculatePercentage
specifier|public
specifier|static
name|short
name|calculatePercentage
parameter_list|(
name|long
name|used
parameter_list|,
name|long
name|max
parameter_list|)
block|{
return|return
name|max
operator|<=
literal|0
condition|?
literal|0
else|:
call|(
name|short
call|)
argument_list|(
name|Math
operator|.
name|round
argument_list|(
operator|(
literal|100d
operator|*
name|used
operator|)
operator|/
name|max
argument_list|)
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

