begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.jvm
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|GarbageCollectorMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryPoolMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|PlatformManagedObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|RuntimeMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|JvmInfo
specifier|public
class|class
name|JvmInfo
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
name|JvmInfo
name|INSTANCE
decl_stmt|;
static|static
block|{
name|RuntimeMXBean
name|runtimeMXBean
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
decl_stmt|;
name|MemoryMXBean
name|memoryMXBean
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
decl_stmt|;
comment|// returns the<process id>@<host>
name|long
name|pid
decl_stmt|;
name|String
name|xPid
init|=
name|runtimeMXBean
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|xPid
operator|=
name|xPid
operator|.
name|split
argument_list|(
literal|"@"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|pid
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|xPid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|pid
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|long
name|heapInit
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getInit
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getInit
argument_list|()
decl_stmt|;
name|long
name|heapMax
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
decl_stmt|;
name|long
name|nonHeapInit
init|=
name|memoryMXBean
operator|.
name|getNonHeapMemoryUsage
argument_list|()
operator|.
name|getInit
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|memoryMXBean
operator|.
name|getNonHeapMemoryUsage
argument_list|()
operator|.
name|getInit
argument_list|()
decl_stmt|;
name|long
name|nonHeapMax
init|=
name|memoryMXBean
operator|.
name|getNonHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|memoryMXBean
operator|.
name|getNonHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
decl_stmt|;
name|long
name|directMemoryMax
init|=
literal|0
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|vmClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.VM"
argument_list|)
decl_stmt|;
name|directMemoryMax
operator|=
operator|(
name|Long
operator|)
name|vmClass
operator|.
name|getMethod
argument_list|(
literal|"maxDirectMemory"
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
comment|// ignore
block|}
name|String
index|[]
name|inputArguments
init|=
name|runtimeMXBean
operator|.
name|getInputArguments
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|runtimeMXBean
operator|.
name|getInputArguments
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Mem
name|mem
init|=
operator|new
name|Mem
argument_list|(
name|heapInit
argument_list|,
name|heapMax
argument_list|,
name|nonHeapInit
argument_list|,
name|nonHeapMax
argument_list|,
name|directMemoryMax
argument_list|)
decl_stmt|;
name|String
name|bootClassPath
decl_stmt|;
try|try
block|{
name|bootClassPath
operator|=
name|runtimeMXBean
operator|.
name|getBootClassPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// oracle java 9
name|bootClassPath
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.boot.class.path"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bootClassPath
operator|==
literal|null
condition|)
block|{
comment|// something else
name|bootClassPath
operator|=
literal|"<unknown>"
expr_stmt|;
block|}
block|}
name|String
name|classPath
init|=
name|runtimeMXBean
operator|.
name|getClassPath
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|systemProperties
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|runtimeMXBean
operator|.
name|getSystemProperties
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|GarbageCollectorMXBean
argument_list|>
name|gcMxBeans
init|=
name|ManagementFactory
operator|.
name|getGarbageCollectorMXBeans
argument_list|()
decl_stmt|;
name|String
index|[]
name|gcCollectors
init|=
operator|new
name|String
index|[
name|gcMxBeans
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gcMxBeans
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|GarbageCollectorMXBean
name|gcMxBean
init|=
name|gcMxBeans
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|gcCollectors
index|[
name|i
index|]
operator|=
name|gcMxBean
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|MemoryPoolMXBean
argument_list|>
name|memoryPoolMXBeans
init|=
name|ManagementFactory
operator|.
name|getMemoryPoolMXBeans
argument_list|()
decl_stmt|;
name|String
index|[]
name|memoryPools
init|=
operator|new
name|String
index|[
name|memoryPoolMXBeans
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|memoryPoolMXBeans
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MemoryPoolMXBean
name|memoryPoolMXBean
init|=
name|memoryPoolMXBeans
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|memoryPools
index|[
name|i
index|]
operator|=
name|memoryPoolMXBean
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|String
name|onError
init|=
literal|null
decl_stmt|;
name|String
name|onOutOfMemoryError
init|=
literal|null
decl_stmt|;
name|String
name|useCompressedOops
init|=
literal|"unknown"
decl_stmt|;
name|String
name|useG1GC
init|=
literal|"unknown"
decl_stmt|;
name|String
name|useSerialGC
init|=
literal|"unknown"
decl_stmt|;
name|long
name|configuredInitialHeapSize
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|configuredMaxHeapSize
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|PlatformManagedObject
argument_list|>
name|clazz
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|PlatformManagedObject
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.management.HotSpotDiagnosticMXBean"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|vmOptionClazz
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.management.VMOption"
argument_list|)
decl_stmt|;
name|PlatformManagedObject
name|hotSpotDiagnosticMXBean
init|=
name|ManagementFactory
operator|.
name|getPlatformMXBean
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|Method
name|vmOptionMethod
init|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getVMOption"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|valueMethod
init|=
name|vmOptionClazz
operator|.
name|getMethod
argument_list|(
literal|"getValue"
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|onErrorObject
init|=
name|vmOptionMethod
operator|.
name|invoke
argument_list|(
name|hotSpotDiagnosticMXBean
argument_list|,
literal|"OnError"
argument_list|)
decl_stmt|;
name|onError
operator|=
operator|(
name|String
operator|)
name|valueMethod
operator|.
name|invoke
argument_list|(
name|onErrorObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|Object
name|onOutOfMemoryErrorObject
init|=
name|vmOptionMethod
operator|.
name|invoke
argument_list|(
name|hotSpotDiagnosticMXBean
argument_list|,
literal|"OnOutOfMemoryError"
argument_list|)
decl_stmt|;
name|onOutOfMemoryError
operator|=
operator|(
name|String
operator|)
name|valueMethod
operator|.
name|invoke
argument_list|(
name|onOutOfMemoryErrorObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|Object
name|useCompressedOopsVmOptionObject
init|=
name|vmOptionMethod
operator|.
name|invoke
argument_list|(
name|hotSpotDiagnosticMXBean
argument_list|,
literal|"UseCompressedOops"
argument_list|)
decl_stmt|;
name|useCompressedOops
operator|=
operator|(
name|String
operator|)
name|valueMethod
operator|.
name|invoke
argument_list|(
name|useCompressedOopsVmOptionObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|Object
name|useG1GCVmOptionObject
init|=
name|vmOptionMethod
operator|.
name|invoke
argument_list|(
name|hotSpotDiagnosticMXBean
argument_list|,
literal|"UseG1GC"
argument_list|)
decl_stmt|;
name|useG1GC
operator|=
operator|(
name|String
operator|)
name|valueMethod
operator|.
name|invoke
argument_list|(
name|useG1GCVmOptionObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|Object
name|initialHeapSizeVmOptionObject
init|=
name|vmOptionMethod
operator|.
name|invoke
argument_list|(
name|hotSpotDiagnosticMXBean
argument_list|,
literal|"InitialHeapSize"
argument_list|)
decl_stmt|;
name|configuredInitialHeapSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|valueMethod
operator|.
name|invoke
argument_list|(
name|initialHeapSizeVmOptionObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|Object
name|maxHeapSizeVmOptionObject
init|=
name|vmOptionMethod
operator|.
name|invoke
argument_list|(
name|hotSpotDiagnosticMXBean
argument_list|,
literal|"MaxHeapSize"
argument_list|)
decl_stmt|;
name|configuredMaxHeapSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|valueMethod
operator|.
name|invoke
argument_list|(
name|maxHeapSizeVmOptionObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|Object
name|useSerialGCVmOptionObject
init|=
name|vmOptionMethod
operator|.
name|invoke
argument_list|(
name|hotSpotDiagnosticMXBean
argument_list|,
literal|"UseSerialGC"
argument_list|)
decl_stmt|;
name|useSerialGC
operator|=
operator|(
name|String
operator|)
name|valueMethod
operator|.
name|invoke
argument_list|(
name|useSerialGCVmOptionObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{             }
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{          }
name|INSTANCE
operator|=
operator|new
name|JvmInfo
argument_list|(
name|pid
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
argument_list|,
name|runtimeMXBean
operator|.
name|getVmName
argument_list|()
argument_list|,
name|runtimeMXBean
operator|.
name|getVmVersion
argument_list|()
argument_list|,
name|runtimeMXBean
operator|.
name|getVmVendor
argument_list|()
argument_list|,
name|runtimeMXBean
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|configuredInitialHeapSize
argument_list|,
name|configuredMaxHeapSize
argument_list|,
name|mem
argument_list|,
name|inputArguments
argument_list|,
name|bootClassPath
argument_list|,
name|classPath
argument_list|,
name|systemProperties
argument_list|,
name|gcCollectors
argument_list|,
name|memoryPools
argument_list|,
name|onError
argument_list|,
name|onOutOfMemoryError
argument_list|,
name|useCompressedOops
argument_list|,
name|useG1GC
argument_list|,
name|useSerialGC
argument_list|)
expr_stmt|;
block|}
DECL|method|jvmInfo
specifier|public
specifier|static
name|JvmInfo
name|jvmInfo
parameter_list|()
block|{
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
name|sm
operator|.
name|checkPermission
argument_list|(
operator|new
name|ManagementPermission
argument_list|(
literal|"monitor"
argument_list|)
argument_list|)
expr_stmt|;
name|sm
operator|.
name|checkPropertyAccess
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
return|return
name|INSTANCE
return|;
block|}
DECL|field|pid
specifier|private
specifier|final
name|long
name|pid
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|String
name|version
decl_stmt|;
DECL|field|vmName
specifier|private
specifier|final
name|String
name|vmName
decl_stmt|;
DECL|field|vmVersion
specifier|private
specifier|final
name|String
name|vmVersion
decl_stmt|;
DECL|field|vmVendor
specifier|private
specifier|final
name|String
name|vmVendor
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|configuredInitialHeapSize
specifier|private
specifier|final
name|long
name|configuredInitialHeapSize
decl_stmt|;
DECL|field|configuredMaxHeapSize
specifier|private
specifier|final
name|long
name|configuredMaxHeapSize
decl_stmt|;
DECL|field|mem
specifier|private
specifier|final
name|Mem
name|mem
decl_stmt|;
DECL|field|inputArguments
specifier|private
specifier|final
name|String
index|[]
name|inputArguments
decl_stmt|;
DECL|field|bootClassPath
specifier|private
specifier|final
name|String
name|bootClassPath
decl_stmt|;
DECL|field|classPath
specifier|private
specifier|final
name|String
name|classPath
decl_stmt|;
DECL|field|systemProperties
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|systemProperties
decl_stmt|;
DECL|field|gcCollectors
specifier|private
specifier|final
name|String
index|[]
name|gcCollectors
decl_stmt|;
DECL|field|memoryPools
specifier|private
specifier|final
name|String
index|[]
name|memoryPools
decl_stmt|;
DECL|field|onError
specifier|private
specifier|final
name|String
name|onError
decl_stmt|;
DECL|field|onOutOfMemoryError
specifier|private
specifier|final
name|String
name|onOutOfMemoryError
decl_stmt|;
DECL|field|useCompressedOops
specifier|private
specifier|final
name|String
name|useCompressedOops
decl_stmt|;
DECL|field|useG1GC
specifier|private
specifier|final
name|String
name|useG1GC
decl_stmt|;
DECL|field|useSerialGC
specifier|private
specifier|final
name|String
name|useSerialGC
decl_stmt|;
DECL|method|JvmInfo
specifier|private
name|JvmInfo
parameter_list|(
name|long
name|pid
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|vmName
parameter_list|,
name|String
name|vmVersion
parameter_list|,
name|String
name|vmVendor
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|configuredInitialHeapSize
parameter_list|,
name|long
name|configuredMaxHeapSize
parameter_list|,
name|Mem
name|mem
parameter_list|,
name|String
index|[]
name|inputArguments
parameter_list|,
name|String
name|bootClassPath
parameter_list|,
name|String
name|classPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|systemProperties
parameter_list|,
name|String
index|[]
name|gcCollectors
parameter_list|,
name|String
index|[]
name|memoryPools
parameter_list|,
name|String
name|onError
parameter_list|,
name|String
name|onOutOfMemoryError
parameter_list|,
name|String
name|useCompressedOops
parameter_list|,
name|String
name|useG1GC
parameter_list|,
name|String
name|useSerialGC
parameter_list|)
block|{
name|this
operator|.
name|pid
operator|=
name|pid
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|vmName
operator|=
name|vmName
expr_stmt|;
name|this
operator|.
name|vmVersion
operator|=
name|vmVersion
expr_stmt|;
name|this
operator|.
name|vmVendor
operator|=
name|vmVendor
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|configuredInitialHeapSize
operator|=
name|configuredInitialHeapSize
expr_stmt|;
name|this
operator|.
name|configuredMaxHeapSize
operator|=
name|configuredMaxHeapSize
expr_stmt|;
name|this
operator|.
name|mem
operator|=
name|mem
expr_stmt|;
name|this
operator|.
name|inputArguments
operator|=
name|inputArguments
expr_stmt|;
name|this
operator|.
name|bootClassPath
operator|=
name|bootClassPath
expr_stmt|;
name|this
operator|.
name|classPath
operator|=
name|classPath
expr_stmt|;
name|this
operator|.
name|systemProperties
operator|=
name|systemProperties
expr_stmt|;
name|this
operator|.
name|gcCollectors
operator|=
name|gcCollectors
expr_stmt|;
name|this
operator|.
name|memoryPools
operator|=
name|memoryPools
expr_stmt|;
name|this
operator|.
name|onError
operator|=
name|onError
expr_stmt|;
name|this
operator|.
name|onOutOfMemoryError
operator|=
name|onOutOfMemoryError
expr_stmt|;
name|this
operator|.
name|useCompressedOops
operator|=
name|useCompressedOops
expr_stmt|;
name|this
operator|.
name|useG1GC
operator|=
name|useG1GC
expr_stmt|;
name|this
operator|.
name|useSerialGC
operator|=
name|useSerialGC
expr_stmt|;
block|}
DECL|method|JvmInfo
specifier|public
name|JvmInfo
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|pid
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|vmName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|vmVersion
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|vmVendor
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|startTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|inputArguments
operator|=
operator|new
name|String
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputArguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inputArguments
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
name|bootClassPath
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|classPath
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|systemProperties
operator|=
name|in
operator|.
name|readMap
argument_list|(
name|StreamInput
operator|::
name|readString
argument_list|,
name|StreamInput
operator|::
name|readString
argument_list|)
expr_stmt|;
name|mem
operator|=
operator|new
name|Mem
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|gcCollectors
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
name|memoryPools
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
name|useCompressedOops
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
comment|//the following members are only used locally for bootstrap checks, never serialized nor printed out
name|this
operator|.
name|configuredMaxHeapSize
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|configuredInitialHeapSize
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|onError
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|onOutOfMemoryError
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|useG1GC
operator|=
literal|"unknown"
expr_stmt|;
name|this
operator|.
name|useSerialGC
operator|=
literal|"unknown"
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|vmName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|vmVersion
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|vmVendor
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|inputArguments
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|inputArgument
range|:
name|inputArguments
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|inputArgument
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeString
argument_list|(
name|bootClassPath
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|classPath
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|systemProperties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|systemProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mem
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|gcCollectors
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|memoryPools
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|useCompressedOops
argument_list|)
expr_stmt|;
block|}
comment|/**      * The process id.      */
DECL|method|pid
specifier|public
name|long
name|pid
parameter_list|()
block|{
return|return
name|this
operator|.
name|pid
return|;
block|}
comment|/**      * The process id.      */
DECL|method|getPid
specifier|public
name|long
name|getPid
parameter_list|()
block|{
return|return
name|pid
return|;
block|}
DECL|method|version
specifier|public
name|String
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|versionAsInteger
specifier|public
name|int
name|versionAsInteger
parameter_list|()
block|{
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|sVersion
init|=
literal|""
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|version
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&&
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|sVersion
operator|+=
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|sVersion
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|method|versionUpdatePack
specifier|public
name|int
name|versionUpdatePack
parameter_list|()
block|{
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|sVersion
init|=
literal|""
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|version
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&&
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|sVersion
operator|+=
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|Integer
operator|.
name|parseInt
argument_list|(
name|sVersion
argument_list|)
expr_stmt|;
name|int
name|from
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'_'
condition|)
block|{
comment|// 1.7.0_4
name|from
operator|=
operator|++
name|i
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'-'
operator|&&
name|version
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'u'
condition|)
block|{
comment|// 1.7.0-u2-b21
name|i
operator|=
name|i
operator|+
literal|2
expr_stmt|;
name|from
operator|=
name|i
expr_stmt|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|version
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&&
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|from
operator|==
name|i
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|version
operator|.
name|substring
argument_list|(
name|from
argument_list|,
name|i
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|method|getVmName
specifier|public
name|String
name|getVmName
parameter_list|()
block|{
return|return
name|this
operator|.
name|vmName
return|;
block|}
DECL|method|getVmVersion
specifier|public
name|String
name|getVmVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|vmVersion
return|;
block|}
DECL|method|getVmVendor
specifier|public
name|String
name|getVmVendor
parameter_list|()
block|{
return|return
name|this
operator|.
name|vmVendor
return|;
block|}
DECL|method|getStartTime
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
DECL|method|getMem
specifier|public
name|Mem
name|getMem
parameter_list|()
block|{
return|return
name|this
operator|.
name|mem
return|;
block|}
DECL|method|getInputArguments
specifier|public
name|String
index|[]
name|getInputArguments
parameter_list|()
block|{
return|return
name|this
operator|.
name|inputArguments
return|;
block|}
DECL|method|getBootClassPath
specifier|public
name|String
name|getBootClassPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|bootClassPath
return|;
block|}
DECL|method|getClassPath
specifier|public
name|String
name|getClassPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|classPath
return|;
block|}
DECL|method|getSystemProperties
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSystemProperties
parameter_list|()
block|{
return|return
name|this
operator|.
name|systemProperties
return|;
block|}
DECL|method|getConfiguredInitialHeapSize
specifier|public
name|long
name|getConfiguredInitialHeapSize
parameter_list|()
block|{
return|return
name|configuredInitialHeapSize
return|;
block|}
DECL|method|getConfiguredMaxHeapSize
specifier|public
name|long
name|getConfiguredMaxHeapSize
parameter_list|()
block|{
return|return
name|configuredMaxHeapSize
return|;
block|}
DECL|method|onError
specifier|public
name|String
name|onError
parameter_list|()
block|{
return|return
name|onError
return|;
block|}
DECL|method|onOutOfMemoryError
specifier|public
name|String
name|onOutOfMemoryError
parameter_list|()
block|{
return|return
name|onOutOfMemoryError
return|;
block|}
comment|/**      * The value of the JVM flag UseCompressedOops, if available otherwise      * "unknown". The value "unknown" indicates that an attempt was      * made to obtain the value of the flag on this JVM and the attempt      * failed.      *      * @return the value of the JVM flag UseCompressedOops or "unknown"      */
DECL|method|useCompressedOops
specifier|public
name|String
name|useCompressedOops
parameter_list|()
block|{
return|return
name|this
operator|.
name|useCompressedOops
return|;
block|}
DECL|method|useG1GC
specifier|public
name|String
name|useG1GC
parameter_list|()
block|{
return|return
name|this
operator|.
name|useG1GC
return|;
block|}
DECL|method|useSerialGC
specifier|public
name|String
name|useSerialGC
parameter_list|()
block|{
return|return
name|this
operator|.
name|useSerialGC
return|;
block|}
DECL|method|getGcCollectors
specifier|public
name|String
index|[]
name|getGcCollectors
parameter_list|()
block|{
return|return
name|gcCollectors
return|;
block|}
DECL|method|getMemoryPools
specifier|public
name|String
index|[]
name|getMemoryPools
parameter_list|()
block|{
return|return
name|memoryPools
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|JVM
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PID
argument_list|,
name|pid
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VM_NAME
argument_list|,
name|vmName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VM_VERSION
argument_list|,
name|vmVersion
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VM_VENDOR
argument_list|,
name|vmVendor
argument_list|)
expr_stmt|;
name|builder
operator|.
name|dateField
argument_list|(
name|Fields
operator|.
name|START_TIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|START_TIME
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|MEM
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|HEAP_INIT_IN_BYTES
argument_list|,
name|Fields
operator|.
name|HEAP_INIT
argument_list|,
name|mem
operator|.
name|heapInit
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|HEAP_MAX_IN_BYTES
argument_list|,
name|Fields
operator|.
name|HEAP_MAX
argument_list|,
name|mem
operator|.
name|heapMax
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|NON_HEAP_INIT_IN_BYTES
argument_list|,
name|Fields
operator|.
name|NON_HEAP_INIT
argument_list|,
name|mem
operator|.
name|nonHeapInit
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|NON_HEAP_MAX_IN_BYTES
argument_list|,
name|Fields
operator|.
name|NON_HEAP_MAX
argument_list|,
name|mem
operator|.
name|nonHeapMax
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|DIRECT_MAX_IN_BYTES
argument_list|,
name|Fields
operator|.
name|DIRECT_MAX
argument_list|,
name|mem
operator|.
name|directMemoryMax
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|array
argument_list|(
name|Fields
operator|.
name|GC_COLLECTORS
argument_list|,
name|gcCollectors
argument_list|)
expr_stmt|;
name|builder
operator|.
name|array
argument_list|(
name|Fields
operator|.
name|MEMORY_POOLS
argument_list|,
name|memoryPools
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|USING_COMPRESSED_OOPS
argument_list|,
name|useCompressedOops
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|JVM
specifier|static
specifier|final
name|String
name|JVM
init|=
literal|"jvm"
decl_stmt|;
DECL|field|PID
specifier|static
specifier|final
name|String
name|PID
init|=
literal|"pid"
decl_stmt|;
DECL|field|VERSION
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"version"
decl_stmt|;
DECL|field|VM_NAME
specifier|static
specifier|final
name|String
name|VM_NAME
init|=
literal|"vm_name"
decl_stmt|;
DECL|field|VM_VERSION
specifier|static
specifier|final
name|String
name|VM_VERSION
init|=
literal|"vm_version"
decl_stmt|;
DECL|field|VM_VENDOR
specifier|static
specifier|final
name|String
name|VM_VENDOR
init|=
literal|"vm_vendor"
decl_stmt|;
DECL|field|START_TIME
specifier|static
specifier|final
name|String
name|START_TIME
init|=
literal|"start_time"
decl_stmt|;
DECL|field|START_TIME_IN_MILLIS
specifier|static
specifier|final
name|String
name|START_TIME_IN_MILLIS
init|=
literal|"start_time_in_millis"
decl_stmt|;
DECL|field|MEM
specifier|static
specifier|final
name|String
name|MEM
init|=
literal|"mem"
decl_stmt|;
DECL|field|HEAP_INIT
specifier|static
specifier|final
name|String
name|HEAP_INIT
init|=
literal|"heap_init"
decl_stmt|;
DECL|field|HEAP_INIT_IN_BYTES
specifier|static
specifier|final
name|String
name|HEAP_INIT_IN_BYTES
init|=
literal|"heap_init_in_bytes"
decl_stmt|;
DECL|field|HEAP_MAX
specifier|static
specifier|final
name|String
name|HEAP_MAX
init|=
literal|"heap_max"
decl_stmt|;
DECL|field|HEAP_MAX_IN_BYTES
specifier|static
specifier|final
name|String
name|HEAP_MAX_IN_BYTES
init|=
literal|"heap_max_in_bytes"
decl_stmt|;
DECL|field|NON_HEAP_INIT
specifier|static
specifier|final
name|String
name|NON_HEAP_INIT
init|=
literal|"non_heap_init"
decl_stmt|;
DECL|field|NON_HEAP_INIT_IN_BYTES
specifier|static
specifier|final
name|String
name|NON_HEAP_INIT_IN_BYTES
init|=
literal|"non_heap_init_in_bytes"
decl_stmt|;
DECL|field|NON_HEAP_MAX
specifier|static
specifier|final
name|String
name|NON_HEAP_MAX
init|=
literal|"non_heap_max"
decl_stmt|;
DECL|field|NON_HEAP_MAX_IN_BYTES
specifier|static
specifier|final
name|String
name|NON_HEAP_MAX_IN_BYTES
init|=
literal|"non_heap_max_in_bytes"
decl_stmt|;
DECL|field|DIRECT_MAX
specifier|static
specifier|final
name|String
name|DIRECT_MAX
init|=
literal|"direct_max"
decl_stmt|;
DECL|field|DIRECT_MAX_IN_BYTES
specifier|static
specifier|final
name|String
name|DIRECT_MAX_IN_BYTES
init|=
literal|"direct_max_in_bytes"
decl_stmt|;
DECL|field|GC_COLLECTORS
specifier|static
specifier|final
name|String
name|GC_COLLECTORS
init|=
literal|"gc_collectors"
decl_stmt|;
DECL|field|MEMORY_POOLS
specifier|static
specifier|final
name|String
name|MEMORY_POOLS
init|=
literal|"memory_pools"
decl_stmt|;
DECL|field|USING_COMPRESSED_OOPS
specifier|static
specifier|final
name|String
name|USING_COMPRESSED_OOPS
init|=
literal|"using_compressed_ordinary_object_pointers"
decl_stmt|;
block|}
DECL|class|Mem
specifier|public
specifier|static
class|class
name|Mem
implements|implements
name|Writeable
block|{
DECL|field|heapInit
specifier|private
specifier|final
name|long
name|heapInit
decl_stmt|;
DECL|field|heapMax
specifier|private
specifier|final
name|long
name|heapMax
decl_stmt|;
DECL|field|nonHeapInit
specifier|private
specifier|final
name|long
name|nonHeapInit
decl_stmt|;
DECL|field|nonHeapMax
specifier|private
specifier|final
name|long
name|nonHeapMax
decl_stmt|;
DECL|field|directMemoryMax
specifier|private
specifier|final
name|long
name|directMemoryMax
decl_stmt|;
DECL|method|Mem
specifier|public
name|Mem
parameter_list|(
name|long
name|heapInit
parameter_list|,
name|long
name|heapMax
parameter_list|,
name|long
name|nonHeapInit
parameter_list|,
name|long
name|nonHeapMax
parameter_list|,
name|long
name|directMemoryMax
parameter_list|)
block|{
name|this
operator|.
name|heapInit
operator|=
name|heapInit
expr_stmt|;
name|this
operator|.
name|heapMax
operator|=
name|heapMax
expr_stmt|;
name|this
operator|.
name|nonHeapInit
operator|=
name|nonHeapInit
expr_stmt|;
name|this
operator|.
name|nonHeapMax
operator|=
name|nonHeapMax
expr_stmt|;
name|this
operator|.
name|directMemoryMax
operator|=
name|directMemoryMax
expr_stmt|;
block|}
DECL|method|Mem
specifier|public
name|Mem
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|heapInit
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|heapMax
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|nonHeapInit
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|nonHeapMax
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|directMemoryMax
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|heapInit
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|heapMax
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|nonHeapInit
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|nonHeapMax
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|directMemoryMax
argument_list|)
expr_stmt|;
block|}
DECL|method|getHeapInit
specifier|public
name|ByteSizeValue
name|getHeapInit
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|heapInit
argument_list|)
return|;
block|}
DECL|method|getHeapMax
specifier|public
name|ByteSizeValue
name|getHeapMax
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|heapMax
argument_list|)
return|;
block|}
DECL|method|getNonHeapInit
specifier|public
name|ByteSizeValue
name|getNonHeapInit
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|nonHeapInit
argument_list|)
return|;
block|}
DECL|method|getNonHeapMax
specifier|public
name|ByteSizeValue
name|getNonHeapMax
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|nonHeapMax
argument_list|)
return|;
block|}
DECL|method|getDirectMemoryMax
specifier|public
name|ByteSizeValue
name|getDirectMemoryMax
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|directMemoryMax
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

