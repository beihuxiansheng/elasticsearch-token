begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.jvm
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|BufferPoolMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ClassLoadingMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|GarbageCollectorMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryPoolMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|RuntimeMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|JvmStats
specifier|public
class|class
name|JvmStats
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|runtimeMXBean
specifier|private
specifier|final
specifier|static
name|RuntimeMXBean
name|runtimeMXBean
decl_stmt|;
DECL|field|memoryMXBean
specifier|private
specifier|final
specifier|static
name|MemoryMXBean
name|memoryMXBean
decl_stmt|;
DECL|field|threadMXBean
specifier|private
specifier|final
specifier|static
name|ThreadMXBean
name|threadMXBean
decl_stmt|;
DECL|field|classLoadingMXBean
specifier|private
specifier|final
specifier|static
name|ClassLoadingMXBean
name|classLoadingMXBean
decl_stmt|;
static|static
block|{
name|runtimeMXBean
operator|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
expr_stmt|;
name|memoryMXBean
operator|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
expr_stmt|;
name|threadMXBean
operator|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
expr_stmt|;
name|classLoadingMXBean
operator|=
name|ManagementFactory
operator|.
name|getClassLoadingMXBean
argument_list|()
expr_stmt|;
block|}
DECL|method|jvmStats
specifier|public
specifier|static
name|JvmStats
name|jvmStats
parameter_list|()
block|{
name|JvmStats
name|stats
init|=
operator|new
name|JvmStats
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|runtimeMXBean
operator|.
name|getUptime
argument_list|()
argument_list|)
decl_stmt|;
name|stats
operator|.
name|mem
operator|=
operator|new
name|Mem
argument_list|()
expr_stmt|;
name|MemoryUsage
name|memUsage
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
decl_stmt|;
name|stats
operator|.
name|mem
operator|.
name|heapUsed
operator|=
name|memUsage
operator|.
name|getUsed
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|memUsage
operator|.
name|getUsed
argument_list|()
expr_stmt|;
name|stats
operator|.
name|mem
operator|.
name|heapCommitted
operator|=
name|memUsage
operator|.
name|getCommitted
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|memUsage
operator|.
name|getCommitted
argument_list|()
expr_stmt|;
name|stats
operator|.
name|mem
operator|.
name|heapMax
operator|=
name|memUsage
operator|.
name|getMax
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|memUsage
operator|.
name|getMax
argument_list|()
expr_stmt|;
name|memUsage
operator|=
name|memoryMXBean
operator|.
name|getNonHeapMemoryUsage
argument_list|()
expr_stmt|;
name|stats
operator|.
name|mem
operator|.
name|nonHeapUsed
operator|=
name|memUsage
operator|.
name|getUsed
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|memUsage
operator|.
name|getUsed
argument_list|()
expr_stmt|;
name|stats
operator|.
name|mem
operator|.
name|nonHeapCommitted
operator|=
name|memUsage
operator|.
name|getCommitted
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|memUsage
operator|.
name|getCommitted
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MemoryPoolMXBean
argument_list|>
name|memoryPoolMXBeans
init|=
name|ManagementFactory
operator|.
name|getMemoryPoolMXBeans
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MemoryPool
argument_list|>
name|pools
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|memoryPoolMXBeans
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|MemoryPoolMXBean
name|memoryPoolMXBean
init|=
name|memoryPoolMXBeans
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|MemoryUsage
name|usage
init|=
name|memoryPoolMXBean
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|MemoryUsage
name|peakUsage
init|=
name|memoryPoolMXBean
operator|.
name|getPeakUsage
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|GcNames
operator|.
name|getByMemoryPoolName
argument_list|(
name|memoryPoolMXBean
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|// if we can't resolve it, its not interesting.... (Per Gen, Code Cache)
continue|continue;
block|}
name|pools
operator|.
name|add
argument_list|(
operator|new
name|MemoryPool
argument_list|(
name|name
argument_list|,
name|usage
operator|.
name|getUsed
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|usage
operator|.
name|getUsed
argument_list|()
argument_list|,
name|usage
operator|.
name|getMax
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|usage
operator|.
name|getMax
argument_list|()
argument_list|,
name|peakUsage
operator|.
name|getUsed
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|peakUsage
operator|.
name|getUsed
argument_list|()
argument_list|,
name|peakUsage
operator|.
name|getMax
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|peakUsage
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|err
parameter_list|)
block|{
throw|throw
name|err
throw|;
comment|// rethrow
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|/* ignore some JVMs might barf here with:                  * java.lang.InternalError: Memory Pool not found                  * we just omit the pool in that case!*/
block|}
block|}
name|stats
operator|.
name|mem
operator|.
name|pools
operator|=
name|pools
operator|.
name|toArray
argument_list|(
operator|new
name|MemoryPool
index|[
name|pools
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|stats
operator|.
name|threads
operator|=
operator|new
name|Threads
argument_list|()
expr_stmt|;
name|stats
operator|.
name|threads
operator|.
name|count
operator|=
name|threadMXBean
operator|.
name|getThreadCount
argument_list|()
expr_stmt|;
name|stats
operator|.
name|threads
operator|.
name|peakCount
operator|=
name|threadMXBean
operator|.
name|getPeakThreadCount
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|GarbageCollectorMXBean
argument_list|>
name|gcMxBeans
init|=
name|ManagementFactory
operator|.
name|getGarbageCollectorMXBeans
argument_list|()
decl_stmt|;
name|stats
operator|.
name|gc
operator|=
operator|new
name|GarbageCollectors
argument_list|()
expr_stmt|;
name|stats
operator|.
name|gc
operator|.
name|collectors
operator|=
operator|new
name|GarbageCollector
index|[
name|gcMxBeans
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|gc
operator|.
name|collectors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|GarbageCollectorMXBean
name|gcMxBean
init|=
name|gcMxBeans
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|stats
operator|.
name|gc
operator|.
name|collectors
index|[
name|i
index|]
operator|=
operator|new
name|GarbageCollector
argument_list|()
expr_stmt|;
name|stats
operator|.
name|gc
operator|.
name|collectors
index|[
name|i
index|]
operator|.
name|name
operator|=
name|GcNames
operator|.
name|getByGcName
argument_list|(
name|gcMxBean
operator|.
name|getName
argument_list|()
argument_list|,
name|gcMxBean
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|gc
operator|.
name|collectors
index|[
name|i
index|]
operator|.
name|collectionCount
operator|=
name|gcMxBean
operator|.
name|getCollectionCount
argument_list|()
expr_stmt|;
name|stats
operator|.
name|gc
operator|.
name|collectors
index|[
name|i
index|]
operator|.
name|collectionTime
operator|=
name|gcMxBean
operator|.
name|getCollectionTime
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|List
argument_list|<
name|BufferPoolMXBean
argument_list|>
name|bufferPools
init|=
name|ManagementFactory
operator|.
name|getPlatformMXBeans
argument_list|(
name|BufferPoolMXBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|stats
operator|.
name|bufferPools
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bufferPools
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BufferPoolMXBean
name|bufferPool
range|:
name|bufferPools
control|)
block|{
name|stats
operator|.
name|bufferPools
operator|.
name|add
argument_list|(
operator|new
name|BufferPool
argument_list|(
name|bufferPool
operator|.
name|getName
argument_list|()
argument_list|,
name|bufferPool
operator|.
name|getCount
argument_list|()
argument_list|,
name|bufferPool
operator|.
name|getTotalCapacity
argument_list|()
argument_list|,
name|bufferPool
operator|.
name|getMemoryUsed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// buffer pools are not available
block|}
name|stats
operator|.
name|classes
operator|=
operator|new
name|Classes
argument_list|()
expr_stmt|;
name|stats
operator|.
name|classes
operator|.
name|loadedClassCount
operator|=
name|classLoadingMXBean
operator|.
name|getLoadedClassCount
argument_list|()
expr_stmt|;
name|stats
operator|.
name|classes
operator|.
name|totalLoadedClassCount
operator|=
name|classLoadingMXBean
operator|.
name|getTotalLoadedClassCount
argument_list|()
expr_stmt|;
name|stats
operator|.
name|classes
operator|.
name|unloadedClassCount
operator|=
name|classLoadingMXBean
operator|.
name|getUnloadedClassCount
argument_list|()
expr_stmt|;
return|return
name|stats
return|;
block|}
DECL|field|timestamp
name|long
name|timestamp
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|uptime
name|long
name|uptime
decl_stmt|;
DECL|field|mem
name|Mem
name|mem
decl_stmt|;
DECL|field|threads
name|Threads
name|threads
decl_stmt|;
DECL|field|gc
name|GarbageCollectors
name|gc
decl_stmt|;
DECL|field|bufferPools
name|List
argument_list|<
name|BufferPool
argument_list|>
name|bufferPools
decl_stmt|;
DECL|field|classes
name|Classes
name|classes
decl_stmt|;
DECL|method|JvmStats
specifier|private
name|JvmStats
parameter_list|()
block|{     }
DECL|method|JvmStats
specifier|public
name|JvmStats
parameter_list|(
name|long
name|timestamp
parameter_list|,
name|long
name|uptime
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|uptime
operator|=
name|uptime
expr_stmt|;
block|}
DECL|method|getTimestamp
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
DECL|method|getUptime
specifier|public
name|TimeValue
name|getUptime
parameter_list|()
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|uptime
argument_list|)
return|;
block|}
DECL|method|getMem
specifier|public
name|Mem
name|getMem
parameter_list|()
block|{
return|return
name|this
operator|.
name|mem
return|;
block|}
DECL|method|getThreads
specifier|public
name|Threads
name|getThreads
parameter_list|()
block|{
return|return
name|threads
return|;
block|}
DECL|method|getGc
specifier|public
name|GarbageCollectors
name|getGc
parameter_list|()
block|{
return|return
name|gc
return|;
block|}
DECL|method|getBufferPools
specifier|public
name|List
argument_list|<
name|BufferPool
argument_list|>
name|getBufferPools
parameter_list|()
block|{
return|return
name|bufferPools
return|;
block|}
DECL|method|getClasses
specifier|public
name|Classes
name|getClasses
parameter_list|()
block|{
return|return
name|classes
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|JVM
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TIMESTAMP
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
name|Fields
operator|.
name|UPTIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|UPTIME
argument_list|,
name|uptime
argument_list|)
expr_stmt|;
if|if
condition|(
name|mem
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|MEM
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|HEAP_USED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|HEAP_USED
argument_list|,
name|mem
operator|.
name|heapUsed
argument_list|)
expr_stmt|;
if|if
condition|(
name|mem
operator|.
name|getHeapUsedPercent
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|HEAP_USED_PERCENT
argument_list|,
name|mem
operator|.
name|getHeapUsedPercent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|HEAP_COMMITTED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|HEAP_COMMITTED
argument_list|,
name|mem
operator|.
name|heapCommitted
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|HEAP_MAX_IN_BYTES
argument_list|,
name|Fields
operator|.
name|HEAP_MAX
argument_list|,
name|mem
operator|.
name|heapMax
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|NON_HEAP_USED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|NON_HEAP_USED
argument_list|,
name|mem
operator|.
name|nonHeapUsed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|NON_HEAP_COMMITTED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|NON_HEAP_COMMITTED
argument_list|,
name|mem
operator|.
name|nonHeapCommitted
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|POOLS
argument_list|)
expr_stmt|;
for|for
control|(
name|MemoryPool
name|pool
range|:
name|mem
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|pool
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|USED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|USED
argument_list|,
name|pool
operator|.
name|used
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|MAX_IN_BYTES
argument_list|,
name|Fields
operator|.
name|MAX
argument_list|,
name|pool
operator|.
name|max
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|PEAK_USED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|PEAK_USED
argument_list|,
name|pool
operator|.
name|peakUsed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|PEAK_MAX_IN_BYTES
argument_list|,
name|Fields
operator|.
name|PEAK_MAX
argument_list|,
name|pool
operator|.
name|peakMax
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|threads
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|THREADS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|COUNT
argument_list|,
name|threads
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PEAK_COUNT
argument_list|,
name|threads
operator|.
name|getPeakCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|gc
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|GC
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|COLLECTORS
argument_list|)
expr_stmt|;
for|for
control|(
name|GarbageCollector
name|collector
range|:
name|gc
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|collector
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|COLLECTION_COUNT
argument_list|,
name|collector
operator|.
name|getCollectionCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
name|Fields
operator|.
name|COLLECTION_TIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|COLLECTION_TIME
argument_list|,
name|collector
operator|.
name|collectionTime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bufferPools
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|BUFFER_POOLS
argument_list|)
expr_stmt|;
for|for
control|(
name|BufferPool
name|bufferPool
range|:
name|bufferPools
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|bufferPool
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|COUNT
argument_list|,
name|bufferPool
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|USED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|USED
argument_list|,
name|bufferPool
operator|.
name|used
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|TOTAL_CAPACITY_IN_BYTES
argument_list|,
name|Fields
operator|.
name|TOTAL_CAPACITY
argument_list|,
name|bufferPool
operator|.
name|totalCapacity
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|classes
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|CLASSES
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|CURRENT_LOADED_COUNT
argument_list|,
name|classes
operator|.
name|getLoadedClassCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL_LOADED_COUNT
argument_list|,
name|classes
operator|.
name|getTotalLoadedClassCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL_UNLOADED_COUNT
argument_list|,
name|classes
operator|.
name|getUnloadedClassCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|JVM
specifier|static
specifier|final
name|String
name|JVM
init|=
literal|"jvm"
decl_stmt|;
DECL|field|TIMESTAMP
specifier|static
specifier|final
name|String
name|TIMESTAMP
init|=
literal|"timestamp"
decl_stmt|;
DECL|field|UPTIME
specifier|static
specifier|final
name|String
name|UPTIME
init|=
literal|"uptime"
decl_stmt|;
DECL|field|UPTIME_IN_MILLIS
specifier|static
specifier|final
name|String
name|UPTIME_IN_MILLIS
init|=
literal|"uptime_in_millis"
decl_stmt|;
DECL|field|MEM
specifier|static
specifier|final
name|String
name|MEM
init|=
literal|"mem"
decl_stmt|;
DECL|field|HEAP_USED
specifier|static
specifier|final
name|String
name|HEAP_USED
init|=
literal|"heap_used"
decl_stmt|;
DECL|field|HEAP_USED_IN_BYTES
specifier|static
specifier|final
name|String
name|HEAP_USED_IN_BYTES
init|=
literal|"heap_used_in_bytes"
decl_stmt|;
DECL|field|HEAP_USED_PERCENT
specifier|static
specifier|final
name|String
name|HEAP_USED_PERCENT
init|=
literal|"heap_used_percent"
decl_stmt|;
DECL|field|HEAP_MAX
specifier|static
specifier|final
name|String
name|HEAP_MAX
init|=
literal|"heap_max"
decl_stmt|;
DECL|field|HEAP_MAX_IN_BYTES
specifier|static
specifier|final
name|String
name|HEAP_MAX_IN_BYTES
init|=
literal|"heap_max_in_bytes"
decl_stmt|;
DECL|field|HEAP_COMMITTED
specifier|static
specifier|final
name|String
name|HEAP_COMMITTED
init|=
literal|"heap_committed"
decl_stmt|;
DECL|field|HEAP_COMMITTED_IN_BYTES
specifier|static
specifier|final
name|String
name|HEAP_COMMITTED_IN_BYTES
init|=
literal|"heap_committed_in_bytes"
decl_stmt|;
DECL|field|NON_HEAP_USED
specifier|static
specifier|final
name|String
name|NON_HEAP_USED
init|=
literal|"non_heap_used"
decl_stmt|;
DECL|field|NON_HEAP_USED_IN_BYTES
specifier|static
specifier|final
name|String
name|NON_HEAP_USED_IN_BYTES
init|=
literal|"non_heap_used_in_bytes"
decl_stmt|;
DECL|field|NON_HEAP_COMMITTED
specifier|static
specifier|final
name|String
name|NON_HEAP_COMMITTED
init|=
literal|"non_heap_committed"
decl_stmt|;
DECL|field|NON_HEAP_COMMITTED_IN_BYTES
specifier|static
specifier|final
name|String
name|NON_HEAP_COMMITTED_IN_BYTES
init|=
literal|"non_heap_committed_in_bytes"
decl_stmt|;
DECL|field|POOLS
specifier|static
specifier|final
name|String
name|POOLS
init|=
literal|"pools"
decl_stmt|;
DECL|field|USED
specifier|static
specifier|final
name|String
name|USED
init|=
literal|"used"
decl_stmt|;
DECL|field|USED_IN_BYTES
specifier|static
specifier|final
name|String
name|USED_IN_BYTES
init|=
literal|"used_in_bytes"
decl_stmt|;
DECL|field|MAX
specifier|static
specifier|final
name|String
name|MAX
init|=
literal|"max"
decl_stmt|;
DECL|field|MAX_IN_BYTES
specifier|static
specifier|final
name|String
name|MAX_IN_BYTES
init|=
literal|"max_in_bytes"
decl_stmt|;
DECL|field|PEAK_USED
specifier|static
specifier|final
name|String
name|PEAK_USED
init|=
literal|"peak_used"
decl_stmt|;
DECL|field|PEAK_USED_IN_BYTES
specifier|static
specifier|final
name|String
name|PEAK_USED_IN_BYTES
init|=
literal|"peak_used_in_bytes"
decl_stmt|;
DECL|field|PEAK_MAX
specifier|static
specifier|final
name|String
name|PEAK_MAX
init|=
literal|"peak_max"
decl_stmt|;
DECL|field|PEAK_MAX_IN_BYTES
specifier|static
specifier|final
name|String
name|PEAK_MAX_IN_BYTES
init|=
literal|"peak_max_in_bytes"
decl_stmt|;
DECL|field|THREADS
specifier|static
specifier|final
name|String
name|THREADS
init|=
literal|"threads"
decl_stmt|;
DECL|field|COUNT
specifier|static
specifier|final
name|String
name|COUNT
init|=
literal|"count"
decl_stmt|;
DECL|field|PEAK_COUNT
specifier|static
specifier|final
name|String
name|PEAK_COUNT
init|=
literal|"peak_count"
decl_stmt|;
DECL|field|GC
specifier|static
specifier|final
name|String
name|GC
init|=
literal|"gc"
decl_stmt|;
DECL|field|COLLECTORS
specifier|static
specifier|final
name|String
name|COLLECTORS
init|=
literal|"collectors"
decl_stmt|;
DECL|field|COLLECTION_COUNT
specifier|static
specifier|final
name|String
name|COLLECTION_COUNT
init|=
literal|"collection_count"
decl_stmt|;
DECL|field|COLLECTION_TIME
specifier|static
specifier|final
name|String
name|COLLECTION_TIME
init|=
literal|"collection_time"
decl_stmt|;
DECL|field|COLLECTION_TIME_IN_MILLIS
specifier|static
specifier|final
name|String
name|COLLECTION_TIME_IN_MILLIS
init|=
literal|"collection_time_in_millis"
decl_stmt|;
DECL|field|BUFFER_POOLS
specifier|static
specifier|final
name|String
name|BUFFER_POOLS
init|=
literal|"buffer_pools"
decl_stmt|;
DECL|field|NAME
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|TOTAL_CAPACITY
specifier|static
specifier|final
name|String
name|TOTAL_CAPACITY
init|=
literal|"total_capacity"
decl_stmt|;
DECL|field|TOTAL_CAPACITY_IN_BYTES
specifier|static
specifier|final
name|String
name|TOTAL_CAPACITY_IN_BYTES
init|=
literal|"total_capacity_in_bytes"
decl_stmt|;
DECL|field|CLASSES
specifier|static
specifier|final
name|String
name|CLASSES
init|=
literal|"classes"
decl_stmt|;
DECL|field|CURRENT_LOADED_COUNT
specifier|static
specifier|final
name|String
name|CURRENT_LOADED_COUNT
init|=
literal|"current_loaded_count"
decl_stmt|;
DECL|field|TOTAL_LOADED_COUNT
specifier|static
specifier|final
name|String
name|TOTAL_LOADED_COUNT
init|=
literal|"total_loaded_count"
decl_stmt|;
DECL|field|TOTAL_UNLOADED_COUNT
specifier|static
specifier|final
name|String
name|TOTAL_UNLOADED_COUNT
init|=
literal|"total_unloaded_count"
decl_stmt|;
block|}
DECL|method|readJvmStats
specifier|public
specifier|static
name|JvmStats
name|readJvmStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|JvmStats
name|jvmStats
init|=
operator|new
name|JvmStats
argument_list|()
decl_stmt|;
name|jvmStats
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|jvmStats
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|timestamp
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|uptime
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|mem
operator|=
name|Mem
operator|.
name|readMem
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|threads
operator|=
name|Threads
operator|.
name|readThreads
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|gc
operator|=
name|GarbageCollectors
operator|.
name|readGarbageCollectors
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|bufferPools
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|BufferPool
name|bufferPool
init|=
operator|new
name|BufferPool
argument_list|()
decl_stmt|;
name|bufferPool
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|bufferPools
operator|.
name|add
argument_list|(
name|bufferPool
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|uptime
argument_list|)
expr_stmt|;
name|mem
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|threads
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|gc
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|bufferPools
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|bufferPools
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BufferPool
name|bufferPool
range|:
name|bufferPools
control|)
block|{
name|bufferPool
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|GarbageCollectors
specifier|public
specifier|static
class|class
name|GarbageCollectors
implements|implements
name|Streamable
implements|,
name|Iterable
argument_list|<
name|GarbageCollector
argument_list|>
block|{
DECL|field|collectors
name|GarbageCollector
index|[]
name|collectors
decl_stmt|;
DECL|method|GarbageCollectors
name|GarbageCollectors
parameter_list|()
block|{         }
DECL|method|readGarbageCollectors
specifier|public
specifier|static
name|GarbageCollectors
name|readGarbageCollectors
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|GarbageCollectors
name|collectors
init|=
operator|new
name|GarbageCollectors
argument_list|()
decl_stmt|;
name|collectors
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|collectors
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|collectors
operator|=
operator|new
name|GarbageCollector
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collectors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|collectors
index|[
name|i
index|]
operator|=
name|GarbageCollector
operator|.
name|readGarbageCollector
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|collectors
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|GarbageCollector
name|gc
range|:
name|collectors
control|)
block|{
name|gc
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCollectors
specifier|public
name|GarbageCollector
index|[]
name|getCollectors
parameter_list|()
block|{
return|return
name|this
operator|.
name|collectors
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|GarbageCollector
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|collectors
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
DECL|class|GarbageCollector
specifier|public
specifier|static
class|class
name|GarbageCollector
implements|implements
name|Streamable
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|collectionCount
name|long
name|collectionCount
decl_stmt|;
DECL|field|collectionTime
name|long
name|collectionTime
decl_stmt|;
DECL|method|GarbageCollector
name|GarbageCollector
parameter_list|()
block|{         }
DECL|method|readGarbageCollector
specifier|public
specifier|static
name|GarbageCollector
name|readGarbageCollector
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|GarbageCollector
name|gc
init|=
operator|new
name|GarbageCollector
argument_list|()
decl_stmt|;
name|gc
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|gc
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|collectionCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|collectionTime
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|collectionCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|collectionTime
argument_list|)
expr_stmt|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|getCollectionCount
specifier|public
name|long
name|getCollectionCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|collectionCount
return|;
block|}
DECL|method|getCollectionTime
specifier|public
name|TimeValue
name|getCollectionTime
parameter_list|()
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|collectionTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
DECL|class|Threads
specifier|public
specifier|static
class|class
name|Threads
implements|implements
name|Streamable
block|{
DECL|field|count
name|int
name|count
decl_stmt|;
DECL|field|peakCount
name|int
name|peakCount
decl_stmt|;
DECL|method|Threads
name|Threads
parameter_list|()
block|{         }
DECL|method|getCount
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|getPeakCount
specifier|public
name|int
name|getPeakCount
parameter_list|()
block|{
return|return
name|peakCount
return|;
block|}
DECL|method|readThreads
specifier|public
specifier|static
name|Threads
name|readThreads
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Threads
name|threads
init|=
operator|new
name|Threads
argument_list|()
decl_stmt|;
name|threads
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|threads
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|count
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|peakCount
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|peakCount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MemoryPool
specifier|public
specifier|static
class|class
name|MemoryPool
implements|implements
name|Streamable
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|used
name|long
name|used
decl_stmt|;
DECL|field|max
name|long
name|max
decl_stmt|;
DECL|field|peakUsed
name|long
name|peakUsed
decl_stmt|;
DECL|field|peakMax
name|long
name|peakMax
decl_stmt|;
DECL|method|MemoryPool
name|MemoryPool
parameter_list|()
block|{          }
DECL|method|MemoryPool
specifier|public
name|MemoryPool
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|used
parameter_list|,
name|long
name|max
parameter_list|,
name|long
name|peakUsed
parameter_list|,
name|long
name|peakMax
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|used
operator|=
name|used
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|peakUsed
operator|=
name|peakUsed
expr_stmt|;
name|this
operator|.
name|peakMax
operator|=
name|peakMax
expr_stmt|;
block|}
DECL|method|readMemoryPool
specifier|public
specifier|static
name|MemoryPool
name|readMemoryPool
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|MemoryPool
name|pool
init|=
operator|new
name|MemoryPool
argument_list|()
decl_stmt|;
name|pool
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|pool
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|getUsed
specifier|public
name|ByteSizeValue
name|getUsed
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|used
argument_list|)
return|;
block|}
DECL|method|getMax
specifier|public
name|ByteSizeValue
name|getMax
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|max
argument_list|)
return|;
block|}
DECL|method|getPeakUsed
specifier|public
name|ByteSizeValue
name|getPeakUsed
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|peakUsed
argument_list|)
return|;
block|}
DECL|method|getPeakMax
specifier|public
name|ByteSizeValue
name|getPeakMax
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|peakMax
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|used
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|max
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|peakUsed
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|peakMax
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|used
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|peakUsed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|peakMax
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Mem
specifier|public
specifier|static
class|class
name|Mem
implements|implements
name|Streamable
implements|,
name|Iterable
argument_list|<
name|MemoryPool
argument_list|>
block|{
DECL|field|heapCommitted
name|long
name|heapCommitted
decl_stmt|;
DECL|field|heapUsed
name|long
name|heapUsed
decl_stmt|;
DECL|field|heapMax
name|long
name|heapMax
decl_stmt|;
DECL|field|nonHeapCommitted
name|long
name|nonHeapCommitted
decl_stmt|;
DECL|field|nonHeapUsed
name|long
name|nonHeapUsed
decl_stmt|;
DECL|field|pools
name|MemoryPool
index|[]
name|pools
init|=
operator|new
name|MemoryPool
index|[
literal|0
index|]
decl_stmt|;
DECL|method|Mem
name|Mem
parameter_list|()
block|{         }
DECL|method|readMem
specifier|public
specifier|static
name|Mem
name|readMem
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Mem
name|mem
init|=
operator|new
name|Mem
argument_list|()
decl_stmt|;
name|mem
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|mem
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|MemoryPool
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|pools
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|heapCommitted
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|heapUsed
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|nonHeapCommitted
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|nonHeapUsed
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|heapMax
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|pools
operator|=
operator|new
name|MemoryPool
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pools
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pools
index|[
name|i
index|]
operator|=
name|MemoryPool
operator|.
name|readMemoryPool
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|heapCommitted
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|heapUsed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|nonHeapCommitted
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|nonHeapUsed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|heapMax
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|pools
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|MemoryPool
name|pool
range|:
name|pools
control|)
block|{
name|pool
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHeapCommitted
specifier|public
name|ByteSizeValue
name|getHeapCommitted
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|heapCommitted
argument_list|)
return|;
block|}
DECL|method|getHeapUsed
specifier|public
name|ByteSizeValue
name|getHeapUsed
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|heapUsed
argument_list|)
return|;
block|}
comment|/**          * returns the maximum heap size. 0 bytes signals unknown.          */
DECL|method|getHeapMax
specifier|public
name|ByteSizeValue
name|getHeapMax
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|heapMax
argument_list|)
return|;
block|}
comment|/**          * returns the heap usage in percent. -1 signals unknown.          */
DECL|method|getHeapUsedPercent
specifier|public
name|short
name|getHeapUsedPercent
parameter_list|()
block|{
if|if
condition|(
name|heapMax
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
call|(
name|short
call|)
argument_list|(
name|heapUsed
operator|*
literal|100
operator|/
name|heapMax
argument_list|)
return|;
block|}
DECL|method|getNonHeapCommitted
specifier|public
name|ByteSizeValue
name|getNonHeapCommitted
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|nonHeapCommitted
argument_list|)
return|;
block|}
DECL|method|getNonHeapUsed
specifier|public
name|ByteSizeValue
name|getNonHeapUsed
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|nonHeapUsed
argument_list|)
return|;
block|}
block|}
DECL|class|BufferPool
specifier|public
specifier|static
class|class
name|BufferPool
implements|implements
name|Streamable
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|count
name|long
name|count
decl_stmt|;
DECL|field|totalCapacity
name|long
name|totalCapacity
decl_stmt|;
DECL|field|used
name|long
name|used
decl_stmt|;
DECL|method|BufferPool
name|BufferPool
parameter_list|()
block|{         }
DECL|method|BufferPool
specifier|public
name|BufferPool
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|count
parameter_list|,
name|long
name|totalCapacity
parameter_list|,
name|long
name|used
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|totalCapacity
operator|=
name|totalCapacity
expr_stmt|;
name|this
operator|.
name|used
operator|=
name|used
expr_stmt|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|getCount
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|count
return|;
block|}
DECL|method|getTotalCapacity
specifier|public
name|ByteSizeValue
name|getTotalCapacity
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|totalCapacity
argument_list|)
return|;
block|}
DECL|method|getUsed
specifier|public
name|ByteSizeValue
name|getUsed
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|used
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|count
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|totalCapacity
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|used
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|totalCapacity
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|used
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Classes
specifier|public
specifier|static
class|class
name|Classes
implements|implements
name|Streamable
block|{
DECL|field|loadedClassCount
name|long
name|loadedClassCount
decl_stmt|;
DECL|field|totalLoadedClassCount
name|long
name|totalLoadedClassCount
decl_stmt|;
DECL|field|unloadedClassCount
name|long
name|unloadedClassCount
decl_stmt|;
DECL|method|Classes
name|Classes
parameter_list|()
block|{         }
DECL|method|Classes
specifier|public
name|Classes
parameter_list|(
name|long
name|loadedClassCount
parameter_list|,
name|long
name|totalLoadedClassCount
parameter_list|,
name|long
name|unloadedClassCount
parameter_list|)
block|{
name|this
operator|.
name|loadedClassCount
operator|=
name|loadedClassCount
expr_stmt|;
name|this
operator|.
name|totalLoadedClassCount
operator|=
name|totalLoadedClassCount
expr_stmt|;
name|this
operator|.
name|unloadedClassCount
operator|=
name|unloadedClassCount
expr_stmt|;
block|}
DECL|method|getLoadedClassCount
specifier|public
name|long
name|getLoadedClassCount
parameter_list|()
block|{
return|return
name|loadedClassCount
return|;
block|}
DECL|method|getTotalLoadedClassCount
specifier|public
name|long
name|getTotalLoadedClassCount
parameter_list|()
block|{
return|return
name|totalLoadedClassCount
return|;
block|}
DECL|method|getUnloadedClassCount
specifier|public
name|long
name|getUnloadedClassCount
parameter_list|()
block|{
return|return
name|unloadedClassCount
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|loadedClassCount
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|totalLoadedClassCount
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|unloadedClassCount
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|loadedClassCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|totalLoadedClassCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|unloadedClassCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

