begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.jvm
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmStats
operator|.
name|GarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_class
DECL|class|JvmGcMonitorService
specifier|public
class|class
name|JvmGcMonitorService
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|JvmGcMonitorService
argument_list|>
block|{
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|enabled
specifier|private
specifier|final
name|boolean
name|enabled
decl_stmt|;
DECL|field|interval
specifier|private
specifier|final
name|TimeValue
name|interval
decl_stmt|;
DECL|field|gcThresholds
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|GcThreshold
argument_list|>
name|gcThresholds
decl_stmt|;
DECL|field|gcOverheadThreshold
specifier|private
specifier|final
name|GcOverheadThreshold
name|gcOverheadThreshold
decl_stmt|;
DECL|field|scheduledFuture
specifier|private
specifier|volatile
name|ScheduledFuture
name|scheduledFuture
decl_stmt|;
DECL|field|ENABLED_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|ENABLED_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"monitor.jvm.gc.enabled"
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|REFRESH_INTERVAL_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|REFRESH_INTERVAL_SETTING
init|=
name|Setting
operator|.
name|timeSetting
argument_list|(
literal|"monitor.jvm.gc.refresh_interval"
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|GC_COLLECTOR_PREFIX
specifier|private
specifier|static
name|String
name|GC_COLLECTOR_PREFIX
init|=
literal|"monitor.jvm.gc.collector."
decl_stmt|;
DECL|field|GC_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Settings
argument_list|>
name|GC_SETTING
init|=
name|Setting
operator|.
name|groupSetting
argument_list|(
name|GC_COLLECTOR_PREFIX
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|GC_OVERHEAD_WARN_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|GC_OVERHEAD_WARN_SETTING
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"monitor.jvm.gc.overhead.warn"
argument_list|,
literal|50
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|GC_OVERHEAD_INFO_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|GC_OVERHEAD_INFO_SETTING
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"monitor.jvm.gc.overhead.info"
argument_list|,
literal|25
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|GC_OVERHEAD_DEBUG_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|GC_OVERHEAD_DEBUG_SETTING
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"monitor.jvm.gc.overhead.debug"
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|class|GcOverheadThreshold
specifier|static
class|class
name|GcOverheadThreshold
block|{
DECL|field|warnThreshold
specifier|final
name|int
name|warnThreshold
decl_stmt|;
DECL|field|infoThreshold
specifier|final
name|int
name|infoThreshold
decl_stmt|;
DECL|field|debugThreshold
specifier|final
name|int
name|debugThreshold
decl_stmt|;
DECL|method|GcOverheadThreshold
specifier|public
name|GcOverheadThreshold
parameter_list|(
specifier|final
name|int
name|warnThreshold
parameter_list|,
specifier|final
name|int
name|infoThreshold
parameter_list|,
specifier|final
name|int
name|debugThreshold
parameter_list|)
block|{
name|this
operator|.
name|warnThreshold
operator|=
name|warnThreshold
expr_stmt|;
name|this
operator|.
name|infoThreshold
operator|=
name|infoThreshold
expr_stmt|;
name|this
operator|.
name|debugThreshold
operator|=
name|debugThreshold
expr_stmt|;
block|}
block|}
DECL|class|GcThreshold
specifier|static
class|class
name|GcThreshold
block|{
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|warnThreshold
specifier|public
specifier|final
name|long
name|warnThreshold
decl_stmt|;
DECL|field|infoThreshold
specifier|public
specifier|final
name|long
name|infoThreshold
decl_stmt|;
DECL|field|debugThreshold
specifier|public
specifier|final
name|long
name|debugThreshold
decl_stmt|;
DECL|method|GcThreshold
name|GcThreshold
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|warnThreshold
parameter_list|,
name|long
name|infoThreshold
parameter_list|,
name|long
name|debugThreshold
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|warnThreshold
operator|=
name|warnThreshold
expr_stmt|;
name|this
operator|.
name|infoThreshold
operator|=
name|infoThreshold
expr_stmt|;
name|this
operator|.
name|debugThreshold
operator|=
name|debugThreshold
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"GcThreshold{"
operator|+
literal|"name='"
operator|+
name|name
operator|+
literal|'\''
operator|+
literal|", warnThreshold="
operator|+
name|warnThreshold
operator|+
literal|", infoThreshold="
operator|+
name|infoThreshold
operator|+
literal|", debugThreshold="
operator|+
name|debugThreshold
operator|+
literal|'}'
return|;
block|}
block|}
DECL|method|JvmGcMonitorService
specifier|public
name|JvmGcMonitorService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|enabled
operator|=
name|ENABLED_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|REFRESH_INTERVAL_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GcThreshold
argument_list|>
name|gcThresholds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|gcThresholdGroups
init|=
name|GC_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|getAsGroups
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|gcThresholdGroups
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TimeValue
name|warn
init|=
name|getValidThreshold
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"warn"
argument_list|)
decl_stmt|;
name|TimeValue
name|info
init|=
name|getValidThreshold
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"info"
argument_list|)
decl_stmt|;
name|TimeValue
name|debug
init|=
name|getValidThreshold
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"debug"
argument_list|)
decl_stmt|;
name|gcThresholds
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|GcThreshold
argument_list|(
name|name
argument_list|,
name|warn
operator|.
name|millis
argument_list|()
argument_list|,
name|info
operator|.
name|millis
argument_list|()
argument_list|,
name|debug
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|gcThresholds
operator|.
name|putIfAbsent
argument_list|(
name|GcNames
operator|.
name|YOUNG
argument_list|,
operator|new
name|GcThreshold
argument_list|(
name|GcNames
operator|.
name|YOUNG
argument_list|,
literal|1000
argument_list|,
literal|700
argument_list|,
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|gcThresholds
operator|.
name|putIfAbsent
argument_list|(
name|GcNames
operator|.
name|OLD
argument_list|,
operator|new
name|GcThreshold
argument_list|(
name|GcNames
operator|.
name|OLD
argument_list|,
literal|10000
argument_list|,
literal|5000
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|gcThresholds
operator|.
name|putIfAbsent
argument_list|(
literal|"default"
argument_list|,
operator|new
name|GcThreshold
argument_list|(
literal|"default"
argument_list|,
literal|10000
argument_list|,
literal|5000
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|gcThresholds
operator|=
name|unmodifiableMap
argument_list|(
name|gcThresholds
argument_list|)
expr_stmt|;
if|if
condition|(
name|GC_OVERHEAD_WARN_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|<=
name|GC_OVERHEAD_INFO_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%s] must be greater than [%s] [%d] but was [%d]"
argument_list|,
name|GC_OVERHEAD_WARN_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|GC_OVERHEAD_INFO_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|GC_OVERHEAD_INFO_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|GC_OVERHEAD_WARN_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|GC_OVERHEAD_INFO_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|<=
name|GC_OVERHEAD_DEBUG_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%s] must be greater than [%s] [%d] but was [%d]"
argument_list|,
name|GC_OVERHEAD_INFO_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|GC_OVERHEAD_DEBUG_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|GC_OVERHEAD_DEBUG_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|GC_OVERHEAD_INFO_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|this
operator|.
name|gcOverheadThreshold
operator|=
operator|new
name|GcOverheadThreshold
argument_list|(
name|GC_OVERHEAD_WARN_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|GC_OVERHEAD_INFO_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|GC_OVERHEAD_DEBUG_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"enabled [{}], interval [{}], gc_threshold [{}], overhead [{}, {}, {}]"
argument_list|,
name|this
operator|.
name|enabled
argument_list|,
name|this
operator|.
name|interval
argument_list|,
name|this
operator|.
name|gcThresholds
argument_list|,
name|this
operator|.
name|gcOverheadThreshold
operator|.
name|warnThreshold
argument_list|,
name|this
operator|.
name|gcOverheadThreshold
operator|.
name|infoThreshold
argument_list|,
name|this
operator|.
name|gcOverheadThreshold
operator|.
name|debugThreshold
argument_list|)
expr_stmt|;
block|}
DECL|method|getValidThreshold
specifier|private
specifier|static
name|TimeValue
name|getValidThreshold
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|level
parameter_list|)
block|{
name|TimeValue
name|threshold
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|level
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|threshold
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"missing gc_threshold for ["
operator|+
name|getThresholdName
argument_list|(
name|key
argument_list|,
name|level
argument_list|)
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|threshold
operator|.
name|nanos
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid gc_threshold ["
operator|+
name|threshold
operator|+
literal|"] for ["
operator|+
name|getThresholdName
argument_list|(
name|key
argument_list|,
name|level
argument_list|)
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|threshold
return|;
block|}
DECL|method|getThresholdName
specifier|private
specifier|static
name|String
name|getThresholdName
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|level
parameter_list|)
block|{
return|return
name|GC_COLLECTOR_PREFIX
operator|+
name|key
operator|+
literal|"."
operator|+
name|level
return|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
name|scheduledFuture
operator|=
name|threadPool
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|JvmMonitor
argument_list|(
name|gcThresholds
argument_list|,
name|gcOverheadThreshold
argument_list|)
block|{
annotation|@
name|Override
name|void
name|onMonitorFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to monitor"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onSlowGc
parameter_list|(
specifier|final
name|Threshold
name|threshold
parameter_list|,
specifier|final
name|long
name|seq
parameter_list|,
specifier|final
name|SlowGcEvent
name|slowGcEvent
parameter_list|)
block|{
name|logSlowGc
argument_list|(
name|logger
argument_list|,
name|threshold
argument_list|,
name|seq
argument_list|,
name|slowGcEvent
argument_list|,
name|JvmGcMonitorService
operator|::
name|buildPools
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onGcOverhead
parameter_list|(
specifier|final
name|Threshold
name|threshold
parameter_list|,
specifier|final
name|long
name|current
parameter_list|,
specifier|final
name|long
name|elapsed
parameter_list|,
specifier|final
name|long
name|seq
parameter_list|)
block|{
name|logGcOverhead
argument_list|(
name|logger
argument_list|,
name|threshold
argument_list|,
name|current
argument_list|,
name|elapsed
argument_list|,
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
DECL|field|SLOW_GC_LOG_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|SLOW_GC_LOG_MESSAGE
init|=
literal|"[gc][{}][{}][{}] duration [{}], collections [{}]/[{}], total [{}]/[{}], memory [{}]->[{}]/[{}], all_pools {}"
decl_stmt|;
DECL|method|logSlowGc
specifier|static
name|void
name|logSlowGc
parameter_list|(
specifier|final
name|ESLogger
name|logger
parameter_list|,
specifier|final
name|JvmMonitor
operator|.
name|Threshold
name|threshold
parameter_list|,
specifier|final
name|long
name|seq
parameter_list|,
specifier|final
name|JvmMonitor
operator|.
name|SlowGcEvent
name|slowGcEvent
parameter_list|,
name|BiFunction
argument_list|<
name|JvmStats
argument_list|,
name|JvmStats
argument_list|,
name|String
argument_list|>
name|pools
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|slowGcEvent
operator|.
name|currentGc
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|long
name|elapsed
init|=
name|slowGcEvent
operator|.
name|elapsed
decl_stmt|;
specifier|final
name|long
name|totalGcCollectionCount
init|=
name|slowGcEvent
operator|.
name|currentGc
operator|.
name|getCollectionCount
argument_list|()
decl_stmt|;
specifier|final
name|long
name|currentGcCollectionCount
init|=
name|slowGcEvent
operator|.
name|collectionCount
decl_stmt|;
specifier|final
name|TimeValue
name|totalGcCollectionTime
init|=
name|slowGcEvent
operator|.
name|currentGc
operator|.
name|getCollectionTime
argument_list|()
decl_stmt|;
specifier|final
name|TimeValue
name|currentGcCollectionTime
init|=
name|slowGcEvent
operator|.
name|collectionTime
decl_stmt|;
specifier|final
name|JvmStats
name|lastJvmStats
init|=
name|slowGcEvent
operator|.
name|lastJvmStats
decl_stmt|;
specifier|final
name|JvmStats
name|currentJvmStats
init|=
name|slowGcEvent
operator|.
name|currentJvmStats
decl_stmt|;
specifier|final
name|ByteSizeValue
name|maxHeapUsed
init|=
name|slowGcEvent
operator|.
name|maxHeapUsed
decl_stmt|;
switch|switch
condition|(
name|threshold
condition|)
block|{
case|case
name|WARN
case|:
if|if
condition|(
name|logger
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|SLOW_GC_LOG_MESSAGE
argument_list|,
name|name
argument_list|,
name|seq
argument_list|,
name|totalGcCollectionCount
argument_list|,
name|currentGcCollectionTime
argument_list|,
name|currentGcCollectionCount
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|elapsed
argument_list|)
argument_list|,
name|currentGcCollectionTime
argument_list|,
name|totalGcCollectionTime
argument_list|,
name|lastJvmStats
operator|.
name|getMem
argument_list|()
operator|.
name|getHeapUsed
argument_list|()
argument_list|,
name|currentJvmStats
operator|.
name|getMem
argument_list|()
operator|.
name|getHeapUsed
argument_list|()
argument_list|,
name|maxHeapUsed
argument_list|,
name|pools
operator|.
name|apply
argument_list|(
name|lastJvmStats
argument_list|,
name|currentJvmStats
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INFO
case|:
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|SLOW_GC_LOG_MESSAGE
argument_list|,
name|name
argument_list|,
name|seq
argument_list|,
name|totalGcCollectionCount
argument_list|,
name|currentGcCollectionTime
argument_list|,
name|currentGcCollectionCount
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|elapsed
argument_list|)
argument_list|,
name|currentGcCollectionTime
argument_list|,
name|totalGcCollectionTime
argument_list|,
name|lastJvmStats
operator|.
name|getMem
argument_list|()
operator|.
name|getHeapUsed
argument_list|()
argument_list|,
name|currentJvmStats
operator|.
name|getMem
argument_list|()
operator|.
name|getHeapUsed
argument_list|()
argument_list|,
name|maxHeapUsed
argument_list|,
name|pools
operator|.
name|apply
argument_list|(
name|lastJvmStats
argument_list|,
name|currentJvmStats
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DEBUG
case|:
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|SLOW_GC_LOG_MESSAGE
argument_list|,
name|name
argument_list|,
name|seq
argument_list|,
name|totalGcCollectionCount
argument_list|,
name|currentGcCollectionTime
argument_list|,
name|currentGcCollectionCount
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|elapsed
argument_list|)
argument_list|,
name|currentGcCollectionTime
argument_list|,
name|totalGcCollectionTime
argument_list|,
name|lastJvmStats
operator|.
name|getMem
argument_list|()
operator|.
name|getHeapUsed
argument_list|()
argument_list|,
name|currentJvmStats
operator|.
name|getMem
argument_list|()
operator|.
name|getHeapUsed
argument_list|()
argument_list|,
name|maxHeapUsed
argument_list|,
name|pools
operator|.
name|apply
argument_list|(
name|lastJvmStats
argument_list|,
name|currentJvmStats
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|buildPools
specifier|static
name|String
name|buildPools
parameter_list|(
name|JvmStats
name|last
parameter_list|,
name|JvmStats
name|current
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|JvmStats
operator|.
name|MemoryPool
name|currentPool
range|:
name|current
operator|.
name|getMem
argument_list|()
control|)
block|{
name|JvmStats
operator|.
name|MemoryPool
name|prevPool
init|=
literal|null
decl_stmt|;
for|for
control|(
name|JvmStats
operator|.
name|MemoryPool
name|pool
range|:
name|last
operator|.
name|getMem
argument_list|()
control|)
block|{
if|if
condition|(
name|pool
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|currentPool
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|prevPool
operator|=
name|pool
expr_stmt|;
break|break;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"{["
argument_list|)
operator|.
name|append
argument_list|(
name|currentPool
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] ["
argument_list|)
operator|.
name|append
argument_list|(
name|prevPool
operator|==
literal|null
condition|?
literal|"?"
else|:
name|prevPool
operator|.
name|getUsed
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]->["
argument_list|)
operator|.
name|append
argument_list|(
name|currentPool
operator|.
name|getUsed
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]/["
argument_list|)
operator|.
name|append
argument_list|(
name|currentPool
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]}"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|OVERHEAD_LOG_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|OVERHEAD_LOG_MESSAGE
init|=
literal|"[gc][{}] overhead, spent [{}] collecting in the last [{}]"
decl_stmt|;
DECL|method|logGcOverhead
specifier|static
name|void
name|logGcOverhead
parameter_list|(
specifier|final
name|ESLogger
name|logger
parameter_list|,
specifier|final
name|JvmMonitor
operator|.
name|Threshold
name|threshold
parameter_list|,
specifier|final
name|long
name|current
parameter_list|,
specifier|final
name|long
name|elapsed
parameter_list|,
specifier|final
name|long
name|seq
parameter_list|)
block|{
switch|switch
condition|(
name|threshold
condition|)
block|{
case|case
name|WARN
case|:
if|if
condition|(
name|logger
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|OVERHEAD_LOG_MESSAGE
argument_list|,
name|seq
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|current
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|elapsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INFO
case|:
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|OVERHEAD_LOG_MESSAGE
argument_list|,
name|seq
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|current
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|elapsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DEBUG
case|:
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|OVERHEAD_LOG_MESSAGE
argument_list|,
name|seq
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|current
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|elapsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|scheduledFuture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{     }
DECL|class|JvmMonitor
specifier|abstract
specifier|static
class|class
name|JvmMonitor
implements|implements
name|Runnable
block|{
DECL|enum|Threshold
DECL|enum constant|DEBUG
DECL|enum constant|INFO
DECL|enum constant|WARN
enum|enum
name|Threshold
block|{
name|DEBUG
block|,
name|INFO
block|,
name|WARN
block|}
DECL|class|SlowGcEvent
specifier|static
class|class
name|SlowGcEvent
block|{
DECL|field|currentGc
specifier|final
name|GarbageCollector
name|currentGc
decl_stmt|;
DECL|field|collectionCount
specifier|final
name|long
name|collectionCount
decl_stmt|;
DECL|field|collectionTime
specifier|final
name|TimeValue
name|collectionTime
decl_stmt|;
DECL|field|elapsed
specifier|final
name|long
name|elapsed
decl_stmt|;
DECL|field|lastJvmStats
specifier|final
name|JvmStats
name|lastJvmStats
decl_stmt|;
DECL|field|currentJvmStats
specifier|final
name|JvmStats
name|currentJvmStats
decl_stmt|;
DECL|field|maxHeapUsed
specifier|final
name|ByteSizeValue
name|maxHeapUsed
decl_stmt|;
DECL|method|SlowGcEvent
specifier|public
name|SlowGcEvent
parameter_list|(
specifier|final
name|GarbageCollector
name|currentGc
parameter_list|,
specifier|final
name|long
name|collectionCount
parameter_list|,
specifier|final
name|TimeValue
name|collectionTime
parameter_list|,
specifier|final
name|long
name|elapsed
parameter_list|,
specifier|final
name|JvmStats
name|lastJvmStats
parameter_list|,
specifier|final
name|JvmStats
name|currentJvmStats
parameter_list|,
specifier|final
name|ByteSizeValue
name|maxHeapUsed
parameter_list|)
block|{
name|this
operator|.
name|currentGc
operator|=
name|currentGc
expr_stmt|;
name|this
operator|.
name|collectionCount
operator|=
name|collectionCount
expr_stmt|;
name|this
operator|.
name|collectionTime
operator|=
name|collectionTime
expr_stmt|;
name|this
operator|.
name|elapsed
operator|=
name|elapsed
expr_stmt|;
name|this
operator|.
name|lastJvmStats
operator|=
name|lastJvmStats
expr_stmt|;
name|this
operator|.
name|currentJvmStats
operator|=
name|currentJvmStats
expr_stmt|;
name|this
operator|.
name|maxHeapUsed
operator|=
name|maxHeapUsed
expr_stmt|;
block|}
block|}
DECL|field|lastTime
specifier|private
name|long
name|lastTime
init|=
name|now
argument_list|()
decl_stmt|;
DECL|field|lastJvmStats
specifier|private
name|JvmStats
name|lastJvmStats
init|=
name|jvmStats
argument_list|()
decl_stmt|;
DECL|field|seq
specifier|private
name|long
name|seq
init|=
literal|0
decl_stmt|;
DECL|field|gcThresholds
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JvmGcMonitorService
operator|.
name|GcThreshold
argument_list|>
name|gcThresholds
decl_stmt|;
DECL|field|gcOverheadThreshold
specifier|final
name|GcOverheadThreshold
name|gcOverheadThreshold
decl_stmt|;
DECL|method|JvmMonitor
specifier|public
name|JvmMonitor
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|GcThreshold
argument_list|>
name|gcThresholds
parameter_list|,
specifier|final
name|GcOverheadThreshold
name|gcOverheadThreshold
parameter_list|)
block|{
name|this
operator|.
name|gcThresholds
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|gcThresholds
argument_list|)
expr_stmt|;
name|this
operator|.
name|gcOverheadThreshold
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|gcOverheadThreshold
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|monitorGc
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|onMonitorFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onMonitorFailure
specifier|abstract
name|void
name|onMonitorFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
DECL|method|monitorGc
specifier|synchronized
name|void
name|monitorGc
parameter_list|()
block|{
name|seq
operator|++
expr_stmt|;
specifier|final
name|long
name|currentTime
init|=
name|now
argument_list|()
decl_stmt|;
name|JvmStats
name|currentJvmStats
init|=
name|jvmStats
argument_list|()
decl_stmt|;
specifier|final
name|long
name|elapsed
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|currentTime
operator|-
name|lastTime
argument_list|)
decl_stmt|;
name|monitorSlowGc
argument_list|(
name|currentJvmStats
argument_list|,
name|elapsed
argument_list|)
expr_stmt|;
name|monitorGcOverhead
argument_list|(
name|currentJvmStats
argument_list|,
name|elapsed
argument_list|)
expr_stmt|;
name|lastTime
operator|=
name|currentTime
expr_stmt|;
name|lastJvmStats
operator|=
name|currentJvmStats
expr_stmt|;
block|}
DECL|method|monitorSlowGc
specifier|final
name|void
name|monitorSlowGc
parameter_list|(
name|JvmStats
name|currentJvmStats
parameter_list|,
name|long
name|elapsed
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentJvmStats
operator|.
name|getGc
argument_list|()
operator|.
name|getCollectors
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|GarbageCollector
name|gc
init|=
name|currentJvmStats
operator|.
name|getGc
argument_list|()
operator|.
name|getCollectors
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|GarbageCollector
name|prevGc
init|=
name|lastJvmStats
operator|.
name|getGc
argument_list|()
operator|.
name|getCollectors
argument_list|()
index|[
name|i
index|]
decl_stmt|;
comment|// no collection has happened
name|long
name|collections
init|=
name|gc
operator|.
name|getCollectionCount
argument_list|()
operator|-
name|prevGc
operator|.
name|getCollectionCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|collections
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|long
name|collectionTime
init|=
name|gc
operator|.
name|getCollectionTime
argument_list|()
operator|.
name|millis
argument_list|()
operator|-
name|prevGc
operator|.
name|getCollectionTime
argument_list|()
operator|.
name|millis
argument_list|()
decl_stmt|;
if|if
condition|(
name|collectionTime
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|GcThreshold
name|gcThreshold
init|=
name|gcThresholds
operator|.
name|get
argument_list|(
name|gc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|gcThreshold
operator|==
literal|null
condition|)
block|{
name|gcThreshold
operator|=
name|gcThresholds
operator|.
name|get
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
block|}
name|long
name|avgCollectionTime
init|=
name|collectionTime
operator|/
name|collections
decl_stmt|;
name|Threshold
name|threshold
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|avgCollectionTime
operator|>
name|gcThreshold
operator|.
name|warnThreshold
condition|)
block|{
name|threshold
operator|=
name|Threshold
operator|.
name|WARN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|avgCollectionTime
operator|>
name|gcThreshold
operator|.
name|infoThreshold
condition|)
block|{
name|threshold
operator|=
name|Threshold
operator|.
name|INFO
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|avgCollectionTime
operator|>
name|gcThreshold
operator|.
name|debugThreshold
condition|)
block|{
name|threshold
operator|=
name|Threshold
operator|.
name|DEBUG
expr_stmt|;
block|}
if|if
condition|(
name|threshold
operator|!=
literal|null
condition|)
block|{
name|onSlowGc
argument_list|(
name|threshold
argument_list|,
name|seq
argument_list|,
operator|new
name|SlowGcEvent
argument_list|(
name|gc
argument_list|,
name|collections
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|collectionTime
argument_list|)
argument_list|,
name|elapsed
argument_list|,
name|lastJvmStats
argument_list|,
name|currentJvmStats
argument_list|,
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getHeapMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|monitorGcOverhead
specifier|final
name|void
name|monitorGcOverhead
parameter_list|(
specifier|final
name|JvmStats
name|currentJvmStats
parameter_list|,
specifier|final
name|long
name|elapsed
parameter_list|)
block|{
name|long
name|current
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentJvmStats
operator|.
name|getGc
argument_list|()
operator|.
name|getCollectors
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|GarbageCollector
name|gc
init|=
name|currentJvmStats
operator|.
name|getGc
argument_list|()
operator|.
name|getCollectors
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|GarbageCollector
name|prevGc
init|=
name|lastJvmStats
operator|.
name|getGc
argument_list|()
operator|.
name|getCollectors
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|current
operator|+=
name|gc
operator|.
name|getCollectionTime
argument_list|()
operator|.
name|millis
argument_list|()
operator|-
name|prevGc
operator|.
name|getCollectionTime
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
block|}
name|checkGcOverhead
argument_list|(
name|current
argument_list|,
name|elapsed
argument_list|,
name|seq
argument_list|)
expr_stmt|;
block|}
DECL|method|checkGcOverhead
name|void
name|checkGcOverhead
parameter_list|(
specifier|final
name|long
name|current
parameter_list|,
specifier|final
name|long
name|elapsed
parameter_list|,
specifier|final
name|long
name|seq
parameter_list|)
block|{
specifier|final
name|int
name|fraction
init|=
call|(
name|int
call|)
argument_list|(
operator|(
literal|100
operator|*
name|current
operator|)
operator|/
operator|(
name|double
operator|)
name|elapsed
argument_list|)
decl_stmt|;
name|Threshold
name|overheadThreshold
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fraction
operator|>=
name|gcOverheadThreshold
operator|.
name|warnThreshold
condition|)
block|{
name|overheadThreshold
operator|=
name|Threshold
operator|.
name|WARN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fraction
operator|>=
name|gcOverheadThreshold
operator|.
name|infoThreshold
condition|)
block|{
name|overheadThreshold
operator|=
name|Threshold
operator|.
name|INFO
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fraction
operator|>=
name|gcOverheadThreshold
operator|.
name|debugThreshold
condition|)
block|{
name|overheadThreshold
operator|=
name|Threshold
operator|.
name|DEBUG
expr_stmt|;
block|}
if|if
condition|(
name|overheadThreshold
operator|!=
literal|null
condition|)
block|{
name|onGcOverhead
argument_list|(
name|overheadThreshold
argument_list|,
name|current
argument_list|,
name|elapsed
argument_list|,
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|jvmStats
name|JvmStats
name|jvmStats
parameter_list|()
block|{
return|return
name|JvmStats
operator|.
name|jvmStats
argument_list|()
return|;
block|}
DECL|method|now
name|long
name|now
parameter_list|()
block|{
return|return
name|System
operator|.
name|nanoTime
argument_list|()
return|;
block|}
DECL|method|onSlowGc
specifier|abstract
name|void
name|onSlowGc
parameter_list|(
specifier|final
name|Threshold
name|threshold
parameter_list|,
specifier|final
name|long
name|seq
parameter_list|,
specifier|final
name|SlowGcEvent
name|slowGcEvent
parameter_list|)
function_decl|;
DECL|method|onGcOverhead
specifier|abstract
name|void
name|onGcOverhead
parameter_list|(
specifier|final
name|Threshold
name|threshold
parameter_list|,
specifier|final
name|long
name|total
parameter_list|,
specifier|final
name|long
name|elapsed
parameter_list|,
specifier|final
name|long
name|seq
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

