begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|DiskUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|FsProbe
specifier|public
class|class
name|FsProbe
extends|extends
name|AbstractComponent
block|{
DECL|field|nodeEnv
specifier|private
specifier|final
name|NodeEnvironment
name|nodeEnv
decl_stmt|;
DECL|method|FsProbe
specifier|public
name|FsProbe
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|NodeEnvironment
name|nodeEnv
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeEnv
operator|=
name|nodeEnv
expr_stmt|;
block|}
DECL|method|stats
specifier|public
name|FsInfo
name|stats
parameter_list|(
name|FsInfo
name|previous
parameter_list|,
annotation|@
name|Nullable
name|ClusterInfo
name|clusterInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nodeEnv
operator|.
name|hasNodeFile
argument_list|()
condition|)
block|{
return|return
operator|new
name|FsInfo
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|FsInfo
operator|.
name|Path
index|[
literal|0
index|]
argument_list|)
return|;
block|}
name|NodePath
index|[]
name|dataLocations
init|=
name|nodeEnv
operator|.
name|nodePaths
argument_list|()
decl_stmt|;
name|FsInfo
operator|.
name|Path
index|[]
name|paths
init|=
operator|new
name|FsInfo
operator|.
name|Path
index|[
name|dataLocations
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataLocations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
name|getFSInfo
argument_list|(
name|dataLocations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|FsInfo
operator|.
name|IoStats
name|ioStats
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|LINUX
condition|)
block|{
name|Set
argument_list|<
name|Tuple
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|devicesNumbers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataLocations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dataLocations
index|[
name|i
index|]
operator|.
name|majorDeviceNumber
operator|!=
operator|-
literal|1
operator|&&
name|dataLocations
index|[
name|i
index|]
operator|.
name|minorDeviceNumber
operator|!=
operator|-
literal|1
condition|)
block|{
name|devicesNumbers
operator|.
name|add
argument_list|(
name|Tuple
operator|.
name|tuple
argument_list|(
name|dataLocations
index|[
name|i
index|]
operator|.
name|majorDeviceNumber
argument_list|,
name|dataLocations
index|[
name|i
index|]
operator|.
name|minorDeviceNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ioStats
operator|=
name|ioStats
argument_list|(
name|devicesNumbers
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
name|DiskUsage
name|leastDiskEstimate
init|=
literal|null
decl_stmt|;
name|DiskUsage
name|mostDiskEstimate
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|clusterInfo
operator|!=
literal|null
condition|)
block|{
name|leastDiskEstimate
operator|=
name|clusterInfo
operator|.
name|getNodeLeastAvailableDiskUsages
argument_list|()
operator|.
name|get
argument_list|(
name|nodeEnv
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
name|mostDiskEstimate
operator|=
name|clusterInfo
operator|.
name|getNodeMostAvailableDiskUsages
argument_list|()
operator|.
name|get
argument_list|(
name|nodeEnv
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FsInfo
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|ioStats
argument_list|,
name|paths
argument_list|,
name|leastDiskEstimate
argument_list|,
name|mostDiskEstimate
argument_list|)
return|;
block|}
DECL|method|ioStats
specifier|final
name|FsInfo
operator|.
name|IoStats
name|ioStats
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Tuple
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|devicesNumbers
parameter_list|,
specifier|final
name|FsInfo
name|previous
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Map
argument_list|<
name|Tuple
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|FsInfo
operator|.
name|DeviceStats
argument_list|>
name|deviceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
operator|&&
name|previous
operator|.
name|getIoStats
argument_list|()
operator|!=
literal|null
operator|&&
name|previous
operator|.
name|getIoStats
argument_list|()
operator|.
name|devicesStats
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|previous
operator|.
name|getIoStats
argument_list|()
operator|.
name|devicesStats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FsInfo
operator|.
name|DeviceStats
name|deviceStats
init|=
name|previous
operator|.
name|getIoStats
argument_list|()
operator|.
name|devicesStats
index|[
name|i
index|]
decl_stmt|;
name|deviceMap
operator|.
name|put
argument_list|(
name|Tuple
operator|.
name|tuple
argument_list|(
name|deviceStats
operator|.
name|majorDeviceNumber
argument_list|,
name|deviceStats
operator|.
name|minorDeviceNumber
argument_list|)
argument_list|,
name|deviceStats
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|FsInfo
operator|.
name|DeviceStats
argument_list|>
name|devicesStats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|readProcDiskStats
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|String
name|fields
index|[]
init|=
name|line
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|majorDeviceNumber
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|int
name|minorDeviceNumber
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|devicesNumbers
operator|.
name|contains
argument_list|(
name|Tuple
operator|.
name|tuple
argument_list|(
name|majorDeviceNumber
argument_list|,
name|minorDeviceNumber
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|String
name|deviceName
init|=
name|fields
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|long
name|readsCompleted
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fields
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sectorsRead
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fields
index|[
literal|5
index|]
argument_list|)
decl_stmt|;
specifier|final
name|long
name|writesCompleted
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fields
index|[
literal|7
index|]
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sectorsWritten
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fields
index|[
literal|9
index|]
argument_list|)
decl_stmt|;
specifier|final
name|FsInfo
operator|.
name|DeviceStats
name|deviceStats
init|=
operator|new
name|FsInfo
operator|.
name|DeviceStats
argument_list|(
name|majorDeviceNumber
argument_list|,
name|minorDeviceNumber
argument_list|,
name|deviceName
argument_list|,
name|readsCompleted
argument_list|,
name|sectorsRead
argument_list|,
name|writesCompleted
argument_list|,
name|sectorsWritten
argument_list|,
name|deviceMap
operator|.
name|get
argument_list|(
name|Tuple
operator|.
name|tuple
argument_list|(
name|majorDeviceNumber
argument_list|,
name|minorDeviceNumber
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|devicesStats
operator|.
name|add
argument_list|(
name|deviceStats
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|FsInfo
operator|.
name|IoStats
argument_list|(
name|devicesStats
operator|.
name|toArray
argument_list|(
operator|new
name|FsInfo
operator|.
name|DeviceStats
index|[
name|devicesStats
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do not fail Elasticsearch if something unexpected
comment|// happens here
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"unexpected exception processing /proc/diskstats for devices {}"
argument_list|,
name|devicesNumbers
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"read /proc/diskstats"
argument_list|)
DECL|method|readProcDiskStats
name|List
argument_list|<
name|String
argument_list|>
name|readProcDiskStats
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Files
operator|.
name|readAllLines
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/proc/diskstats"
argument_list|)
argument_list|)
return|;
block|}
comment|/* See: https://bugs.openjdk.java.net/browse/JDK-8162520 */
comment|/**      * Take a large value intended to be positive, and if it has overflowed,      * return {@code Long.MAX_VALUE} instead of a negative number.      */
DECL|method|adjustForHugeFilesystems
specifier|static
name|long
name|adjustForHugeFilesystems
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|<
literal|0
condition|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
return|return
name|bytes
return|;
block|}
DECL|method|getFSInfo
specifier|public
specifier|static
name|FsInfo
operator|.
name|Path
name|getFSInfo
parameter_list|(
name|NodePath
name|nodePath
parameter_list|)
throws|throws
name|IOException
block|{
name|FsInfo
operator|.
name|Path
name|fsPath
init|=
operator|new
name|FsInfo
operator|.
name|Path
argument_list|()
decl_stmt|;
name|fsPath
operator|.
name|path
operator|=
name|nodePath
operator|.
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// NOTE: we use already cached (on node startup) FileStore and spins
comment|// since recomputing these once per second (default) could be costly,
comment|// and they should not change:
name|fsPath
operator|.
name|total
operator|=
name|adjustForHugeFilesystems
argument_list|(
name|nodePath
operator|.
name|fileStore
operator|.
name|getTotalSpace
argument_list|()
argument_list|)
expr_stmt|;
name|fsPath
operator|.
name|free
operator|=
name|nodePath
operator|.
name|fileStore
operator|.
name|getUnallocatedSpace
argument_list|()
expr_stmt|;
name|fsPath
operator|.
name|available
operator|=
name|nodePath
operator|.
name|fileStore
operator|.
name|getUsableSpace
argument_list|()
expr_stmt|;
name|fsPath
operator|.
name|type
operator|=
name|nodePath
operator|.
name|fileStore
operator|.
name|type
argument_list|()
expr_stmt|;
name|fsPath
operator|.
name|mount
operator|=
name|nodePath
operator|.
name|fileStore
operator|.
name|toString
argument_list|()
expr_stmt|;
name|fsPath
operator|.
name|spins
operator|=
name|nodePath
operator|.
name|spins
expr_stmt|;
return|return
name|fsPath
return|;
block|}
block|}
end_class

end_unit

