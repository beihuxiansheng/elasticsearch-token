begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|FsInfo
specifier|public
class|class
name|FsInfo
implements|implements
name|Iterable
argument_list|<
name|FsInfo
operator|.
name|Path
argument_list|>
implements|,
name|Streamable
implements|,
name|ToXContent
block|{
DECL|class|Path
specifier|public
specifier|static
class|class
name|Path
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|path
name|String
name|path
decl_stmt|;
annotation|@
name|Nullable
DECL|field|mount
name|String
name|mount
decl_stmt|;
comment|/** File system type from {@code java.nio.file.FileStore type()}, if available. */
annotation|@
name|Nullable
DECL|field|type
name|String
name|type
decl_stmt|;
DECL|field|total
name|long
name|total
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|free
name|long
name|free
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|available
name|long
name|available
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Uses Lucene's {@code IOUtils.spins} method to try to determine if the device backed by spinning media.          *  This is null if we could not determine it, true if it possibly spins, else false. */
DECL|field|spins
name|Boolean
name|spins
init|=
literal|null
decl_stmt|;
DECL|method|Path
specifier|public
name|Path
parameter_list|()
block|{         }
DECL|method|Path
specifier|public
name|Path
parameter_list|(
name|String
name|path
parameter_list|,
annotation|@
name|Nullable
name|String
name|mount
parameter_list|,
name|long
name|total
parameter_list|,
name|long
name|free
parameter_list|,
name|long
name|available
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|mount
operator|=
name|mount
expr_stmt|;
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
name|this
operator|.
name|free
operator|=
name|free
expr_stmt|;
name|this
operator|.
name|available
operator|=
name|available
expr_stmt|;
block|}
DECL|method|readInfoFrom
specifier|static
specifier|public
name|Path
name|readInfoFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|i
init|=
operator|new
name|Path
argument_list|()
decl_stmt|;
name|i
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|path
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|mount
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|total
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|free
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|available
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|spins
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// total aggregates do not have a path
name|out
operator|.
name|writeOptionalString
argument_list|(
name|mount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|free
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|spins
argument_list|)
expr_stmt|;
block|}
DECL|method|getPath
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getMount
specifier|public
name|String
name|getMount
parameter_list|()
block|{
return|return
name|mount
return|;
block|}
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getTotal
specifier|public
name|ByteSizeValue
name|getTotal
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|total
argument_list|)
return|;
block|}
DECL|method|getFree
specifier|public
name|ByteSizeValue
name|getFree
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|free
argument_list|)
return|;
block|}
DECL|method|getAvailable
specifier|public
name|ByteSizeValue
name|getAvailable
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|available
argument_list|)
return|;
block|}
DECL|method|getSpins
specifier|public
name|Boolean
name|getSpins
parameter_list|()
block|{
return|return
name|spins
return|;
block|}
DECL|method|addLong
specifier|private
name|long
name|addLong
parameter_list|(
name|long
name|current
parameter_list|,
name|long
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|current
return|;
block|}
if|if
condition|(
name|current
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|other
return|;
block|}
return|return
name|current
operator|+
name|other
return|;
block|}
DECL|method|addDouble
specifier|private
name|double
name|addDouble
parameter_list|(
name|double
name|current
parameter_list|,
name|double
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|current
return|;
block|}
if|if
condition|(
name|current
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|other
return|;
block|}
return|return
name|current
operator|+
name|other
return|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|total
operator|=
name|addLong
argument_list|(
name|total
argument_list|,
name|path
operator|.
name|total
argument_list|)
expr_stmt|;
name|free
operator|=
name|addLong
argument_list|(
name|free
argument_list|,
name|path
operator|.
name|free
argument_list|)
expr_stmt|;
name|available
operator|=
name|addLong
argument_list|(
name|available
argument_list|,
name|path
operator|.
name|available
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|spins
operator|!=
literal|null
operator|&&
name|path
operator|.
name|spins
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
comment|// Spinning is contagious!
name|spins
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|PATH
specifier|static
specifier|final
name|XContentBuilderString
name|PATH
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
DECL|field|MOUNT
specifier|static
specifier|final
name|XContentBuilderString
name|MOUNT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"mount"
argument_list|)
decl_stmt|;
DECL|field|TYPE
specifier|static
specifier|final
name|XContentBuilderString
name|TYPE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
DECL|field|TOTAL
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
DECL|field|TOTAL_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|FREE
specifier|static
specifier|final
name|XContentBuilderString
name|FREE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"free"
argument_list|)
decl_stmt|;
DECL|field|FREE_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|FREE_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"free_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|AVAILABLE
specifier|static
specifier|final
name|XContentBuilderString
name|AVAILABLE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"available"
argument_list|)
decl_stmt|;
DECL|field|AVAILABLE_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|AVAILABLE_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"available_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|SPINS
specifier|static
specifier|final
name|XContentBuilderString
name|SPINS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"spins"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PATH
argument_list|,
name|path
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mount
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MOUNT
argument_list|,
name|mount
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TYPE
argument_list|,
name|type
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|total
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|TOTAL_IN_BYTES
argument_list|,
name|Fields
operator|.
name|TOTAL
argument_list|,
name|total
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|free
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|FREE_IN_BYTES
argument_list|,
name|Fields
operator|.
name|FREE
argument_list|,
name|free
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|available
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|AVAILABLE_IN_BYTES
argument_list|,
name|Fields
operator|.
name|AVAILABLE
argument_list|,
name|available
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spins
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|SPINS
argument_list|,
name|spins
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
DECL|field|timestamp
name|long
name|timestamp
decl_stmt|;
DECL|field|total
name|Path
name|total
decl_stmt|;
DECL|field|paths
name|Path
index|[]
name|paths
decl_stmt|;
DECL|method|FsInfo
name|FsInfo
parameter_list|()
block|{      }
DECL|method|FsInfo
specifier|public
name|FsInfo
parameter_list|(
name|long
name|timestamp
parameter_list|,
name|Path
index|[]
name|paths
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
name|this
operator|.
name|total
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getTotal
specifier|public
name|Path
name|getTotal
parameter_list|()
block|{
return|return
name|total
argument_list|()
return|;
block|}
DECL|method|total
specifier|public
name|Path
name|total
parameter_list|()
block|{
if|if
condition|(
name|total
operator|!=
literal|null
condition|)
block|{
return|return
name|total
return|;
block|}
name|Path
name|res
init|=
operator|new
name|Path
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|seenDevices
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|paths
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|subPath
range|:
name|paths
control|)
block|{
if|if
condition|(
name|subPath
operator|.
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|seenDevices
operator|.
name|add
argument_list|(
name|subPath
operator|.
name|path
argument_list|)
condition|)
block|{
continue|continue;
comment|// already added numbers for this device;
block|}
block|}
name|res
operator|.
name|add
argument_list|(
name|subPath
argument_list|)
expr_stmt|;
block|}
name|total
operator|=
name|res
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|getTimestamp
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Path
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|paths
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|readFsInfo
specifier|public
specifier|static
name|FsInfo
name|readFsInfo
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|FsInfo
name|stats
init|=
operator|new
name|FsInfo
argument_list|()
decl_stmt|;
name|stats
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|timestamp
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|paths
operator|=
operator|new
name|Path
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
name|Path
operator|.
name|readInfoFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|path
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|FS
specifier|static
specifier|final
name|XContentBuilderString
name|FS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"fs"
argument_list|)
decl_stmt|;
DECL|field|TIMESTAMP
specifier|static
specifier|final
name|XContentBuilderString
name|TIMESTAMP
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"timestamp"
argument_list|)
decl_stmt|;
DECL|field|DATA
specifier|static
specifier|final
name|XContentBuilderString
name|DATA
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
DECL|field|TOTAL
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|FS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TIMESTAMP
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL
argument_list|)
expr_stmt|;
name|total
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|DATA
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|path
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

