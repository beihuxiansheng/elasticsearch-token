begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RestoreSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRestoreFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_comment
comment|/**  * This package private utility class encapsulates the logic to recover an index shard from either an existing index on  * disk or from a snapshot in a repository.  */
end_comment

begin_class
DECL|class|StoreRecovery
specifier|final
class|class
name|StoreRecovery
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|method|StoreRecovery
name|StoreRecovery
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
block|}
comment|/**      * Recovers a shard from it's local file system store. This method required pre-knowledge about if the shard should      * exist on disk ie. has been previously allocated or if the shard is a brand new allocation without pre-existing index      * files / transaction logs. This      * @param indexShard the index shard instance to recovery the shard into      * @param indexShouldExists<code>true</code> iff the index should exist on disk ie. has the shard been allocated previously on the shards store.      * @param localNode the reference to the local node      * @return<code>true</code> if the the shard has been recovered successfully,<code>false</code> if the recovery      * has been ignored due to a concurrent modification of if the clusters state has changed due to async updates.      * @see Store      */
DECL|method|recoverFromStore
name|boolean
name|recoverFromStore
parameter_list|(
specifier|final
name|IndexShard
name|indexShard
parameter_list|,
specifier|final
name|boolean
name|indexShouldExists
parameter_list|,
name|DiscoveryNode
name|localNode
parameter_list|)
block|{
if|if
condition|(
name|canRecover
argument_list|(
name|indexShard
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|restoreSource
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't recover - restore source is not null"
argument_list|)
throw|;
block|}
try|try
block|{
name|indexShard
operator|.
name|recovering
argument_list|(
literal|"from store"
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|STORE
argument_list|,
name|localNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{
comment|// that's fine, since we might be called concurrently, just ignore this, we are already recovering
return|return
literal|false
return|;
block|}
return|return
name|executeRecovery
argument_list|(
name|indexShard
argument_list|,
parameter_list|()
lambda|->
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"starting recovery from store ..."
argument_list|)
expr_stmt|;
name|internalRecoverFromStore
argument_list|(
name|indexShard
argument_list|,
name|indexShouldExists
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Recovers an index from a given {@link IndexShardRepository}. This method restores a      * previously created index snapshot into an existing initializing shard.      * @param indexShard the index shard instance to recovery the snapshot from      * @param repository the repository holding the physical files the shard should be recovered from      * @return<code>true</code> if the the shard has been recovered successfully,<code>false</code> if the recovery      * has been ignored due to a concurrent modification of if the clusters state has changed due to async updates.      */
DECL|method|recoverFromRepository
name|boolean
name|recoverFromRepository
parameter_list|(
specifier|final
name|IndexShard
name|indexShard
parameter_list|,
name|IndexShardRepository
name|repository
parameter_list|)
block|{
if|if
condition|(
name|canRecover
argument_list|(
name|indexShard
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|restoreSource
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't restore - restore source is null"
argument_list|)
throw|;
block|}
try|try
block|{
name|indexShard
operator|.
name|recovering
argument_list|(
literal|"from snapshot"
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|SNAPSHOT
argument_list|,
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|restoreSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{
comment|// that's fine, since we might be called concurrently, just ignore this, we are already recovering
return|return
literal|false
return|;
block|}
return|return
name|executeRecovery
argument_list|(
name|indexShard
argument_list|,
parameter_list|()
lambda|->
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"restoring from {} ..."
argument_list|,
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|restoreSource
argument_list|()
argument_list|)
expr_stmt|;
name|restore
argument_list|(
name|indexShard
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|canRecover
specifier|private
name|boolean
name|canRecover
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|)
block|{
if|if
condition|(
name|indexShard
operator|.
name|state
argument_list|()
operator|==
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
comment|// got closed on us, just ignore this recovery
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexShardRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"Trying to recover when the shard is in backup state"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Recovers the state of the shard from the store.      */
DECL|method|executeRecovery
specifier|private
name|boolean
name|executeRecovery
parameter_list|(
specifier|final
name|IndexShard
name|indexShard
parameter_list|,
name|Runnable
name|recoveryRunnable
parameter_list|)
throws|throws
name|IndexShardRecoveryException
block|{
try|try
block|{
name|recoveryRunnable
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Check that the gateway didn't leave the shard in init or recovering stage. it is up to the gateway
comment|// to call post recovery.
specifier|final
name|IndexShardState
name|shardState
init|=
name|indexShard
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|RecoveryState
name|recoveryState
init|=
name|indexShard
operator|.
name|recoveryState
argument_list|()
decl_stmt|;
assert|assert
name|shardState
operator|!=
name|IndexShardState
operator|.
name|CREATED
operator|&&
name|shardState
operator|!=
name|IndexShardState
operator|.
name|RECOVERING
operator|:
literal|"recovery process of "
operator|+
name|shardId
operator|+
literal|" didn't get to post_recovery. shardState ["
operator|+
name|shardState
operator|+
literal|"]"
assert|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"recovery completed from "
argument_list|)
operator|.
name|append
argument_list|(
literal|"shard_store"
argument_list|)
operator|.
name|append
argument_list|(
literal|", took ["
argument_list|)
operator|.
name|append
argument_list|(
name|timeValueMillis
argument_list|(
name|recoveryState
operator|.
name|getTimer
argument_list|()
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|RecoveryState
operator|.
name|Index
name|index
init|=
name|recoveryState
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    index    : files           ["
argument_list|)
operator|.
name|append
argument_list|(
name|index
operator|.
name|totalFileCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] with total_size ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
name|index
operator|.
name|totalBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"], took["
argument_list|)
operator|.
name|append
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|index
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"             : recovered_files ["
argument_list|)
operator|.
name|append
argument_list|(
name|index
operator|.
name|recoveredFileCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] with total_size ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
name|index
operator|.
name|recoveredBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"             : reusing_files   ["
argument_list|)
operator|.
name|append
argument_list|(
name|index
operator|.
name|reusedFileCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] with total_size ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
name|index
operator|.
name|reusedBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    verify_index    : took ["
argument_list|)
operator|.
name|append
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|recoveryState
operator|.
name|getVerifyIndex
argument_list|()
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"], check_index ["
argument_list|)
operator|.
name|append
argument_list|(
name|timeValueMillis
argument_list|(
name|recoveryState
operator|.
name|getVerifyIndex
argument_list|()
operator|.
name|checkIndexTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    translog : number_of_operations ["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryState
operator|.
name|getTranslog
argument_list|()
operator|.
name|recoveredOperations
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"], took ["
argument_list|)
operator|.
name|append
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|recoveryState
operator|.
name|getTranslog
argument_list|()
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"recovery completed from [shard_store], took [{}]"
argument_list|,
name|timeValueMillis
argument_list|(
name|recoveryState
operator|.
name|getTimer
argument_list|()
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IndexShardRecoveryException
name|e
parameter_list|)
block|{
if|if
condition|(
name|indexShard
operator|.
name|state
argument_list|()
operator|==
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
comment|// got closed on us, just ignore this recovery
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IndexShardClosedException
operator|)
operator|||
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IndexShardNotStartedException
operator|)
condition|)
block|{
comment|// got closed on us, just ignore this recovery
return|return
literal|false
return|;
block|}
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IndexShardClosedException
decl||
name|IndexShardNotStartedException
name|e
parameter_list|)
block|{         }
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|indexShard
operator|.
name|state
argument_list|()
operator|==
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
comment|// got closed on us, just ignore this recovery
return|return
literal|false
return|;
block|}
throw|throw
operator|new
name|IndexShardRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"failed recovery"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Recovers the state of the shard from the store.      */
DECL|method|internalRecoverFromStore
specifier|private
name|void
name|internalRecoverFromStore
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
name|boolean
name|indexShouldExists
parameter_list|)
throws|throws
name|IndexShardRecoveryException
block|{
specifier|final
name|RecoveryState
name|recoveryState
init|=
name|indexShard
operator|.
name|recoveryState
argument_list|()
decl_stmt|;
name|indexShard
operator|.
name|prepareForIndexRecovery
argument_list|()
expr_stmt|;
name|long
name|version
init|=
operator|-
literal|1
decl_stmt|;
name|SegmentInfos
name|si
init|=
literal|null
decl_stmt|;
specifier|final
name|Store
name|store
init|=
name|indexShard
operator|.
name|store
argument_list|()
decl_stmt|;
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|store
operator|.
name|failIfCorrupted
argument_list|()
expr_stmt|;
try|try
block|{
name|si
operator|=
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|String
name|files
init|=
literal|"_unknown_"
decl_stmt|;
try|try
block|{
name|files
operator|=
name|Arrays
operator|.
name|toString
argument_list|(
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
name|files
operator|+=
literal|" (failure="
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e1
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
if|if
condition|(
name|indexShouldExists
condition|)
block|{
throw|throw
operator|new
name|IndexShardRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"shard allocated for local recovery (post api), should exist, but doesn't, current files: "
operator|+
name|files
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|si
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|indexShouldExists
condition|)
block|{
name|version
operator|=
name|si
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// it exists on the directory, but shouldn't exist on the FS, its a leftover (possibly dangling)
comment|// its a "new index create" API, we have to do something, so better to clean it than use same data
name|logger
operator|.
name|trace
argument_list|(
literal|"cleaning existing shard, shouldn't exists"
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|recoveryState
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"failed to fetch index version after copying it over"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|updateVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
comment|// since we recover from local, just fill the files and size
try|try
block|{
specifier|final
name|RecoveryState
operator|.
name|Index
name|index
init|=
name|recoveryState
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|si
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Directory
name|directory
init|=
name|store
operator|.
name|directory
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|Lucene
operator|.
name|files
argument_list|(
name|si
argument_list|)
control|)
block|{
name|long
name|length
init|=
name|directory
operator|.
name|fileLength
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|index
operator|.
name|addFileDetail
argument_list|(
name|name
argument_list|,
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to list file details"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexShouldExists
operator|==
literal|false
condition|)
block|{
name|recoveryState
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperationsOnStart
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|indexShard
operator|.
name|performTranslogRecovery
argument_list|(
name|indexShouldExists
argument_list|)
expr_stmt|;
name|indexShard
operator|.
name|finalizeRecovery
argument_list|()
expr_stmt|;
name|indexShard
operator|.
name|postRecovery
argument_list|(
literal|"post recovery from shard_store"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"failed to recovery from gateway"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Restores shard from {@link RestoreSource} associated with this shard in routing table      */
DECL|method|restore
specifier|private
name|void
name|restore
parameter_list|(
specifier|final
name|IndexShard
name|indexShard
parameter_list|,
specifier|final
name|IndexShardRepository
name|indexShardRepository
parameter_list|)
block|{
name|RestoreSource
name|restoreSource
init|=
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|restoreSource
argument_list|()
decl_stmt|;
specifier|final
name|RecoveryState
operator|.
name|Translog
name|translogState
init|=
name|indexShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
decl_stmt|;
if|if
condition|(
name|restoreSource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexShardRestoreFailedException
argument_list|(
name|shardId
argument_list|,
literal|"empty restore source"
argument_list|)
throw|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] restoring shard [{}]"
argument_list|,
name|restoreSource
operator|.
name|snapshotId
argument_list|()
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|translogState
operator|.
name|totalOperations
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|translogState
operator|.
name|totalOperationsOnStart
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|indexShard
operator|.
name|prepareForIndexRecovery
argument_list|()
expr_stmt|;
name|ShardId
name|snapshotShardId
init|=
name|shardId
decl_stmt|;
if|if
condition|(
operator|!
name|shardId
operator|.
name|getIndex
argument_list|()
operator|.
name|equals
argument_list|(
name|restoreSource
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|snapshotShardId
operator|=
operator|new
name|ShardId
argument_list|(
name|restoreSource
operator|.
name|index
argument_list|()
argument_list|,
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexShardRepository
operator|.
name|restore
argument_list|(
name|restoreSource
operator|.
name|snapshotId
argument_list|()
argument_list|,
name|restoreSource
operator|.
name|version
argument_list|()
argument_list|,
name|shardId
argument_list|,
name|snapshotShardId
argument_list|,
name|indexShard
operator|.
name|recoveryState
argument_list|()
argument_list|)
expr_stmt|;
name|indexShard
operator|.
name|skipTranslogRecovery
argument_list|()
expr_stmt|;
name|indexShard
operator|.
name|finalizeRecovery
argument_list|()
expr_stmt|;
name|indexShard
operator|.
name|postRecovery
argument_list|(
literal|"restore done"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardRestoreFailedException
argument_list|(
name|shardId
argument_list|,
literal|"restore failed"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

