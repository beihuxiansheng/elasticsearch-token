begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryCachingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A {@link QueryCachingPolicy} that does not cache {@link TermQuery}s.  */
end_comment

begin_class
DECL|class|ElasticsearchQueryCachingPolicy
specifier|final
class|class
name|ElasticsearchQueryCachingPolicy
implements|implements
name|QueryCachingPolicy
block|{
DECL|field|in
specifier|private
specifier|final
name|QueryCachingPolicy
name|in
decl_stmt|;
DECL|method|ElasticsearchQueryCachingPolicy
name|ElasticsearchQueryCachingPolicy
parameter_list|(
name|QueryCachingPolicy
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUse
specifier|public
name|void
name|onUse
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|.
name|getClass
argument_list|()
operator|!=
name|TermQuery
operator|.
name|class
condition|)
block|{
comment|// Do not waste space in the history for term queries. The assumption
comment|// is that these queries are very fast so not worth caching
name|in
operator|.
name|onUse
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|shouldCache
specifier|public
name|boolean
name|shouldCache
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|query
operator|.
name|getClass
argument_list|()
operator|==
name|TermQuery
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|in
operator|.
name|shouldCache
argument_list|(
name|query
argument_list|)
return|;
block|}
block|}
end_class

end_unit

