begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ConcurrentMergeScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|MergeSchedulerConfig
specifier|public
specifier|final
class|class
name|MergeSchedulerConfig
block|{
DECL|field|MAX_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|MAX_THREAD_COUNT
init|=
literal|"index.merge.scheduler.max_thread_count"
decl_stmt|;
DECL|field|MAX_MERGE_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|MAX_MERGE_COUNT
init|=
literal|"index.merge.scheduler.max_merge_count"
decl_stmt|;
DECL|field|AUTO_THROTTLE
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_THROTTLE
init|=
literal|"index.merge.scheduler.auto_throttle"
decl_stmt|;
DECL|field|NOTIFY_ON_MERGE_FAILURE
specifier|public
specifier|static
specifier|final
name|String
name|NOTIFY_ON_MERGE_FAILURE
init|=
literal|"index.merge.scheduler.notify_on_failure"
decl_stmt|;
comment|// why would we not wanna do this?
DECL|field|autoThrottle
specifier|private
specifier|volatile
name|boolean
name|autoThrottle
decl_stmt|;
DECL|field|maxThreadCount
specifier|private
specifier|volatile
name|int
name|maxThreadCount
decl_stmt|;
DECL|field|maxMergeCount
specifier|private
specifier|volatile
name|int
name|maxMergeCount
decl_stmt|;
DECL|field|notifyOnMergeFailure
specifier|private
specifier|final
name|boolean
name|notifyOnMergeFailure
decl_stmt|;
DECL|method|MergeSchedulerConfig
specifier|public
name|MergeSchedulerConfig
parameter_list|(
name|Settings
name|indexSettings
parameter_list|)
block|{
name|maxThreadCount
operator|=
name|indexSettings
operator|.
name|getAsInt
argument_list|(
name|MAX_THREAD_COUNT
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|4
argument_list|,
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|indexSettings
argument_list|)
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|maxMergeCount
operator|=
name|indexSettings
operator|.
name|getAsInt
argument_list|(
name|MAX_MERGE_COUNT
argument_list|,
name|maxThreadCount
operator|+
literal|5
argument_list|)
expr_stmt|;
name|this
operator|.
name|autoThrottle
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|AUTO_THROTTLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|notifyOnMergeFailure
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|NOTIFY_ON_MERGE_FAILURE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> iff auto throttle is enabled.      * @see ConcurrentMergeScheduler#enableAutoIOThrottle()      */
DECL|method|isAutoThrottle
specifier|public
name|boolean
name|isAutoThrottle
parameter_list|()
block|{
return|return
name|autoThrottle
return|;
block|}
comment|/**      * Enables / disables auto throttling on the {@link ConcurrentMergeScheduler}      */
DECL|method|setAutoThrottle
specifier|public
name|void
name|setAutoThrottle
parameter_list|(
name|boolean
name|autoThrottle
parameter_list|)
block|{
name|this
operator|.
name|autoThrottle
operator|=
name|autoThrottle
expr_stmt|;
block|}
comment|/**      * Returns {@code maxThreadCount}.      */
DECL|method|getMaxThreadCount
specifier|public
name|int
name|getMaxThreadCount
parameter_list|()
block|{
return|return
name|maxThreadCount
return|;
block|}
comment|/**      * Expert: directly set the maximum number of merge threads and      * simultaneous merges allowed.      */
DECL|method|setMaxThreadCount
specifier|public
name|void
name|setMaxThreadCount
parameter_list|(
name|int
name|maxThreadCount
parameter_list|)
block|{
name|this
operator|.
name|maxThreadCount
operator|=
name|maxThreadCount
expr_stmt|;
block|}
comment|/**      * Returns {@code maxMergeCount}.      */
DECL|method|getMaxMergeCount
specifier|public
name|int
name|getMaxMergeCount
parameter_list|()
block|{
return|return
name|maxMergeCount
return|;
block|}
comment|/**      *      * Expert: set the maximum number of simultaneous merges allowed.      */
DECL|method|setMaxMergeCount
specifier|public
name|void
name|setMaxMergeCount
parameter_list|(
name|int
name|maxMergeCount
parameter_list|)
block|{
name|this
operator|.
name|maxMergeCount
operator|=
name|maxMergeCount
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> iff we fail the engine on a merge failure. Default is<code>true</code>      */
DECL|method|isNotifyOnMergeFailure
specifier|public
name|boolean
name|isNotifyOnMergeFailure
parameter_list|()
block|{
return|return
name|notifyOnMergeFailure
return|;
block|}
block|}
end_class

end_unit

