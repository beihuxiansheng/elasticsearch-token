begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|ShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ShardPath
specifier|public
specifier|final
class|class
name|ShardPath
block|{
DECL|field|INDEX_FOLDER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_FOLDER_NAME
init|=
literal|"index"
decl_stmt|;
DECL|field|TRANSLOG_FOLDER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|TRANSLOG_FOLDER_NAME
init|=
literal|"translog"
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|shardStatePath
specifier|private
specifier|final
name|Path
name|shardStatePath
decl_stmt|;
DECL|field|isCustomDataPath
specifier|private
specifier|final
name|boolean
name|isCustomDataPath
decl_stmt|;
DECL|method|ShardPath
specifier|public
name|ShardPath
parameter_list|(
name|boolean
name|isCustomDataPath
parameter_list|,
name|Path
name|dataPath
parameter_list|,
name|Path
name|shardStatePath
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
block|{
assert|assert
name|dataPath
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
operator|:
literal|"dataPath must end with the shard ID but didn't: "
operator|+
name|dataPath
operator|.
name|toString
argument_list|()
assert|;
assert|assert
name|shardStatePath
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
operator|:
literal|"shardStatePath must end with the shard ID but didn't: "
operator|+
name|dataPath
operator|.
name|toString
argument_list|()
assert|;
assert|assert
name|dataPath
operator|.
name|getParent
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|:
literal|"dataPath must end with index path id but didn't: "
operator|+
name|dataPath
operator|.
name|toString
argument_list|()
assert|;
assert|assert
name|shardStatePath
operator|.
name|getParent
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|:
literal|"shardStatePath must end with index path id but didn't: "
operator|+
name|dataPath
operator|.
name|toString
argument_list|()
assert|;
if|if
condition|(
name|isCustomDataPath
operator|&&
name|dataPath
operator|.
name|equals
argument_list|(
name|shardStatePath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"shard state path must be different to the data path when using custom data paths"
argument_list|)
throw|;
block|}
name|this
operator|.
name|isCustomDataPath
operator|=
name|isCustomDataPath
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|dataPath
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|shardStatePath
operator|=
name|shardStatePath
expr_stmt|;
block|}
DECL|method|resolveTranslog
specifier|public
name|Path
name|resolveTranslog
parameter_list|()
block|{
return|return
name|path
operator|.
name|resolve
argument_list|(
name|TRANSLOG_FOLDER_NAME
argument_list|)
return|;
block|}
DECL|method|resolveIndex
specifier|public
name|Path
name|resolveIndex
parameter_list|()
block|{
return|return
name|path
operator|.
name|resolve
argument_list|(
name|INDEX_FOLDER_NAME
argument_list|)
return|;
block|}
DECL|method|getDataPath
specifier|public
name|Path
name|getDataPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|getShardId
specifier|public
name|ShardId
name|getShardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
DECL|method|getShardStatePath
specifier|public
name|Path
name|getShardStatePath
parameter_list|()
block|{
return|return
name|shardStatePath
return|;
block|}
comment|/**      * Returns the data-path root for this shard. The root is a parent of {@link #getDataPath()} without the index name      * and the shard ID.      */
DECL|method|getRootDataPath
specifier|public
name|Path
name|getRootDataPath
parameter_list|()
block|{
name|Path
name|noIndexShardId
init|=
name|getDataPath
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
return|return
name|isCustomDataPath
condition|?
name|noIndexShardId
else|:
name|noIndexShardId
operator|.
name|getParent
argument_list|()
return|;
comment|// also strip the indices folder
block|}
comment|/**      * Returns the state-path root for this shard. The root is a parent of {@link #getRootStatePath()} ()} without the index name      * and the shard ID.      */
DECL|method|getRootStatePath
specifier|public
name|Path
name|getRootStatePath
parameter_list|()
block|{
return|return
name|getShardStatePath
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
return|;
comment|// also strip the indices folder
block|}
comment|/**      * Returns<code>true</code> iff the data location is a custom data location and therefore outside of the nodes configured data paths.      */
DECL|method|isCustomDataPath
specifier|public
name|boolean
name|isCustomDataPath
parameter_list|()
block|{
return|return
name|isCustomDataPath
return|;
block|}
comment|/**      * This method walks through the nodes shard paths to find the data and state path for the given shard. If multiple      * directories with a valid shard state exist the one with the highest version will be used.      *<b>Note:</b> this method resolves custom data locations for the shard.      */
DECL|method|loadShardPath
specifier|public
specifier|static
name|ShardPath
name|loadShardPath
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|NodeEnvironment
name|env
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|indexUUID
init|=
name|indexSettings
operator|.
name|getUUID
argument_list|()
decl_stmt|;
specifier|final
name|Path
index|[]
name|paths
init|=
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|Path
name|loadedPath
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|ShardStateMetaData
name|load
init|=
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|load
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|load
operator|.
name|indexUUID
operator|.
name|equals
argument_list|(
name|indexUUID
argument_list|)
operator|==
literal|false
operator|&&
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
operator|.
name|equals
argument_list|(
name|load
operator|.
name|indexUUID
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} found shard on path: [{}] with a different index UUID - this shard seems to be leftover from a different index with the same name. Remove the leftover shard in order to reuse the path with the current index"
argument_list|,
name|shardId
argument_list|,
name|path
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|shardId
operator|+
literal|" index UUID in shard state was: "
operator|+
name|load
operator|.
name|indexUUID
operator|+
literal|" expected: "
operator|+
name|indexUUID
operator|+
literal|" on shard path: "
operator|+
name|path
argument_list|)
throw|;
block|}
if|if
condition|(
name|loadedPath
operator|==
literal|null
condition|)
block|{
name|loadedPath
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|shardId
operator|+
literal|" more than one shard state found"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|loadedPath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
specifier|final
name|Path
name|dataPath
decl_stmt|;
specifier|final
name|Path
name|statePath
init|=
name|loadedPath
decl_stmt|;
if|if
condition|(
name|indexSettings
operator|.
name|hasCustomDataPath
argument_list|()
condition|)
block|{
name|dataPath
operator|=
name|env
operator|.
name|resolveCustomLocation
argument_list|(
name|indexSettings
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataPath
operator|=
name|statePath
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"{} loaded data path [{}], state path [{}]"
argument_list|,
name|shardId
argument_list|,
name|dataPath
argument_list|,
name|statePath
argument_list|)
expr_stmt|;
return|return
operator|new
name|ShardPath
argument_list|(
name|indexSettings
operator|.
name|hasCustomDataPath
argument_list|()
argument_list|,
name|dataPath
argument_list|,
name|statePath
argument_list|,
name|shardId
argument_list|)
return|;
block|}
block|}
comment|/**      * This method tries to delete left-over shards where the index name has been reused but the UUID is different      * to allow the new shard to be allocated.      */
DECL|method|deleteLeftoverShardDirectory
specifier|public
specifier|static
name|void
name|deleteLeftoverShardDirectory
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|NodeEnvironment
name|env
parameter_list|,
name|ShardLock
name|lock
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|indexUUID
init|=
name|indexSettings
operator|.
name|getUUID
argument_list|()
decl_stmt|;
specifier|final
name|Path
index|[]
name|paths
init|=
name|env
operator|.
name|availableShardPaths
argument_list|(
name|lock
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|ShardStateMetaData
name|load
init|=
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|load
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|load
operator|.
name|indexUUID
operator|.
name|equals
argument_list|(
name|indexUUID
argument_list|)
operator|==
literal|false
operator|&&
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
operator|.
name|equals
argument_list|(
name|load
operator|.
name|indexUUID
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} deleting leftover shard on path: [{}] with a different index UUID"
argument_list|,
name|lock
operator|.
name|getShardId
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
assert|assert
name|Files
operator|.
name|isDirectory
argument_list|(
name|path
argument_list|)
operator|:
name|path
operator|+
literal|" is not a directory"
assert|;
name|NodeEnvironment
operator|.
name|acquireFSLockForPaths
argument_list|(
name|indexSettings
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|selectNewPathForShard
specifier|public
specifier|static
name|ShardPath
name|selectNewPathForShard
parameter_list|(
name|NodeEnvironment
name|env
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|,
name|long
name|avgShardSizeInBytes
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|Integer
argument_list|>
name|dataPathToShardCount
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|dataPath
decl_stmt|;
specifier|final
name|Path
name|statePath
decl_stmt|;
if|if
condition|(
name|indexSettings
operator|.
name|hasCustomDataPath
argument_list|()
condition|)
block|{
name|dataPath
operator|=
name|env
operator|.
name|resolveCustomLocation
argument_list|(
name|indexSettings
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|statePath
operator|=
name|env
operator|.
name|nodePaths
argument_list|()
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BigInteger
name|totFreeSpace
init|=
name|BigInteger
operator|.
name|ZERO
decl_stmt|;
for|for
control|(
name|NodeEnvironment
operator|.
name|NodePath
name|nodePath
range|:
name|env
operator|.
name|nodePaths
argument_list|()
control|)
block|{
name|totFreeSpace
operator|=
name|totFreeSpace
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|nodePath
operator|.
name|fileStore
operator|.
name|getUsableSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: this is a hack!!  We should instead keep track of incoming (relocated) shards since we know
comment|// how large they will be once they're done copying, instead of a silly guess for such cases:
comment|// Very rough heuristic of how much disk space we expect the shard will use over its lifetime, the max of current average
comment|// shard size across the cluster and 5% of the total available free space on this node:
name|BigInteger
name|estShardSizeInBytes
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|avgShardSizeInBytes
argument_list|)
operator|.
name|max
argument_list|(
name|totFreeSpace
operator|.
name|divide
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|20
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO - do we need something more extensible? Yet, this does the job for now...
specifier|final
name|NodeEnvironment
operator|.
name|NodePath
index|[]
name|paths
init|=
name|env
operator|.
name|nodePaths
argument_list|()
decl_stmt|;
name|NodeEnvironment
operator|.
name|NodePath
name|bestPath
init|=
literal|null
decl_stmt|;
name|BigInteger
name|maxUsableBytes
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeEnvironment
operator|.
name|NodePath
name|nodePath
range|:
name|paths
control|)
block|{
name|FileStore
name|fileStore
init|=
name|nodePath
operator|.
name|fileStore
decl_stmt|;
name|BigInteger
name|usableBytes
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|fileStore
operator|.
name|getUsableSpace
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|usableBytes
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|>=
literal|0
assert|;
comment|// Deduct estimated reserved bytes from usable space:
name|Integer
name|count
init|=
name|dataPathToShardCount
operator|.
name|get
argument_list|(
name|nodePath
operator|.
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|usableBytes
operator|=
name|usableBytes
operator|.
name|subtract
argument_list|(
name|estShardSizeInBytes
operator|.
name|multiply
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|count
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bestPath
operator|==
literal|null
operator|||
name|usableBytes
operator|.
name|compareTo
argument_list|(
name|maxUsableBytes
argument_list|)
operator|>
literal|0
condition|)
block|{
name|maxUsableBytes
operator|=
name|usableBytes
expr_stmt|;
name|bestPath
operator|=
name|nodePath
expr_stmt|;
block|}
block|}
name|statePath
operator|=
name|bestPath
operator|.
name|resolve
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
name|dataPath
operator|=
name|statePath
expr_stmt|;
block|}
return|return
operator|new
name|ShardPath
argument_list|(
name|indexSettings
operator|.
name|hasCustomDataPath
argument_list|()
argument_list|,
name|dataPath
argument_list|,
name|statePath
argument_list|,
name|shardId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ShardPath
name|shardPath
init|=
operator|(
name|ShardPath
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|?
operator|!
name|shardId
operator|.
name|equals
argument_list|(
name|shardPath
operator|.
name|shardId
argument_list|)
else|:
name|shardPath
operator|.
name|shardId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|?
operator|!
name|path
operator|.
name|equals
argument_list|(
name|shardPath
operator|.
name|path
argument_list|)
else|:
name|shardPath
operator|.
name|path
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|path
operator|!=
literal|null
condition|?
name|path
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|shardId
operator|!=
literal|null
condition|?
name|shardId
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ShardPath{"
operator|+
literal|"path="
operator|+
name|path
operator|+
literal|", shard="
operator|+
name|shardId
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

