begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ContextPreservingActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ThreadedActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
operator|.
name|StoredContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Tracks shard operation permits. Each operation on the shard obtains a permit. When we need to block operations (e.g., to transition  * between terms) we immediately delay all operations to a queue, obtain all available permits, and wait for outstanding operations to drain  * and return their permits. Delayed operations will acquire permits and be completed after the operation that blocked all operations has  * completed.  */
end_comment

begin_class
DECL|class|IndexShardOperationPermits
specifier|final
class|class
name|IndexShardOperationPermits
implements|implements
name|Closeable
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|TOTAL_PERMITS
specifier|static
specifier|final
name|int
name|TOTAL_PERMITS
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|semaphore
specifier|final
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
name|TOTAL_PERMITS
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// fair to ensure a blocking thread is not starved
DECL|field|delayedOperations
specifier|private
specifier|final
name|List
argument_list|<
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
argument_list|>
name|delayedOperations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// operations that are delayed
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
DECL|field|delayed
specifier|private
name|boolean
name|delayed
decl_stmt|;
comment|// does not need to be volatile as all accesses are done under a lock on this
comment|/**      * Construct operation permits for the specified shards.      *      * @param shardId    the shard      * @param logger     the logger for the shard      * @param threadPool the thread pool (used to execute delayed operations)      */
DECL|method|IndexShardOperationPermits
name|IndexShardOperationPermits
parameter_list|(
specifier|final
name|ShardId
name|shardId
parameter_list|,
specifier|final
name|Logger
name|logger
parameter_list|,
specifier|final
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Wait for in-flight operations to finish and executes {@code onBlocked} under the guarantee that no new operations are started. Queues      * operations that are occurring in the meanwhile and runs them once {@code onBlocked} has executed.      *      * @param timeout   the maximum time to wait for the in-flight operations block      * @param timeUnit  the time unit of the {@code timeout} argument      * @param onBlocked the action to run once the block has been acquired      * @param<E>       the type of checked exception thrown by {@code onBlocked}      * @throws InterruptedException      if calling thread is interrupted      * @throws TimeoutException          if timed out waiting for in-flight operations to finish      * @throws IndexShardClosedException if operation permit has been closed      */
DECL|method|blockOperations
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|void
name|blockOperations
parameter_list|(
specifier|final
name|long
name|timeout
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|,
specifier|final
name|CheckedRunnable
argument_list|<
name|E
argument_list|>
name|onBlocked
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|E
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
name|delayOperations
argument_list|()
expr_stmt|;
try|try
block|{
name|doBlockOperations
argument_list|(
name|timeout
argument_list|,
name|timeUnit
argument_list|,
name|onBlocked
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseDelayedOperations
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Immediately delays operations and on another thread waits for in-flight operations to finish and then executes {@code onBlocked}      * under the guarantee that no new operations are started. Delayed operations are run after {@code onBlocked} has executed. After      * operations are delayed and the blocking is forked to another thread, returns to the caller. If a failure occurs while blocking      * operations or executing {@code onBlocked} then the {@code onFailure} handler will be invoked.      *      * @param timeout   the maximum time to wait for the in-flight operations block      * @param timeUnit  the time unit of the {@code timeout} argument      * @param onBlocked the action to run once the block has been acquired      * @param onFailure the action to run if a failure occurs while blocking operations      * @param<E>       the type of checked exception thrown by {@code onBlocked} (not thrown on the calling thread)      */
DECL|method|asyncBlockOperations
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|void
name|asyncBlockOperations
parameter_list|(
specifier|final
name|long
name|timeout
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|,
specifier|final
name|CheckedRunnable
argument_list|<
name|E
argument_list|>
name|onBlocked
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onFailure
parameter_list|)
block|{
name|delayOperations
argument_list|()
expr_stmt|;
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|onFailure
operator|.
name|accept
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|doBlockOperations
argument_list|(
name|timeout
argument_list|,
name|timeUnit
argument_list|,
name|onBlocked
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAfter
parameter_list|()
block|{
name|releaseDelayedOperations
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|delayOperations
specifier|private
name|void
name|delayOperations
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|delayed
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"operations are already delayed"
argument_list|)
throw|;
block|}
else|else
block|{
assert|assert
name|delayedOperations
operator|.
name|isEmpty
argument_list|()
assert|;
name|delayed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|method|doBlockOperations
specifier|private
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|void
name|doBlockOperations
parameter_list|(
specifier|final
name|long
name|timeout
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|,
specifier|final
name|CheckedRunnable
argument_list|<
name|E
argument_list|>
name|onBlocked
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|E
block|{
if|if
condition|(
name|Assertions
operator|.
name|ENABLED
condition|)
block|{
comment|// since delayed is not volatile, we have to synchronize even here for visibility
synchronized|synchronized
init|(
name|this
init|)
block|{
assert|assert
name|delayed
assert|;
block|}
block|}
if|if
condition|(
name|semaphore
operator|.
name|tryAcquire
argument_list|(
name|TOTAL_PERMITS
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
condition|)
block|{
assert|assert
name|semaphore
operator|.
name|availablePermits
argument_list|()
operator|==
literal|0
assert|;
try|try
block|{
name|onBlocked
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|semaphore
operator|.
name|release
argument_list|(
name|TOTAL_PERMITS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"timeout while blocking operations"
argument_list|)
throw|;
block|}
block|}
DECL|method|releaseDelayedOperations
specifier|private
name|void
name|releaseDelayedOperations
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
argument_list|>
name|queuedActions
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
assert|assert
name|delayed
assert|;
name|queuedActions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|delayedOperations
argument_list|)
expr_stmt|;
name|delayedOperations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|delayed
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|queuedActions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|/*              * Try acquiring permits on fresh thread (for two reasons):              *   - blockOperations can be called on a recovery thread which can be expected to be interrupted when recovery is cancelled;              *     interruptions are bad here as permit acquisition will throw an interrupted exception which will be swallowed by              *     the threaded action listener if the queue of the thread pool on which it submits is full              *   - if a permit is acquired and the queue of the thread pool which the the threaded action listener uses is full, the              *     onFailure handler is executed on the calling thread; this should not be the recovery thread as it would delay the              *     recovery              */
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|)
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
name|queuedAction
range|:
name|queuedActions
control|)
block|{
name|acquire
argument_list|(
name|queuedAction
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Acquires a permit whenever permit acquisition is not blocked. If the permit is directly available, the provided      * {@link ActionListener} will be called on the calling thread. During calls of      * {@link #blockOperations(long, TimeUnit, CheckedRunnable)}, permit acquisition can be delayed. The provided {@link ActionListener}      * will then be called using the provided executor once operations are no longer blocked.      *      * @param onAcquired      {@link ActionListener} that is invoked once acquisition is successful or failed      * @param executorOnDelay executor to use for delayed call      * @param forceExecution  whether the runnable should force its execution in case it gets rejected      */
DECL|method|acquire
specifier|public
name|void
name|acquire
parameter_list|(
specifier|final
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
name|onAcquired
parameter_list|,
specifier|final
name|String
name|executorOnDelay
parameter_list|,
specifier|final
name|boolean
name|forceExecution
parameter_list|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
name|onAcquired
operator|.
name|onFailure
argument_list|(
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Releasable
name|releasable
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|delayed
condition|)
block|{
specifier|final
name|Supplier
argument_list|<
name|StoredContext
argument_list|>
name|contextSupplier
init|=
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|newRestorableContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|executorOnDelay
operator|!=
literal|null
condition|)
block|{
name|delayedOperations
operator|.
name|add
argument_list|(
operator|new
name|ThreadedActionListener
argument_list|<>
argument_list|(
name|logger
argument_list|,
name|threadPool
argument_list|,
name|executorOnDelay
argument_list|,
operator|new
name|ContextPreservingActionListener
argument_list|<>
argument_list|(
name|contextSupplier
argument_list|,
name|onAcquired
argument_list|)
argument_list|,
name|forceExecution
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delayedOperations
operator|.
name|add
argument_list|(
operator|new
name|ContextPreservingActionListener
argument_list|<>
argument_list|(
name|contextSupplier
argument_list|,
name|onAcquired
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
name|releasable
operator|=
name|acquire
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|onAcquired
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// execute this outside the synchronized block!
name|onAcquired
operator|.
name|onResponse
argument_list|(
name|releasable
argument_list|)
expr_stmt|;
block|}
DECL|method|acquire
specifier|private
name|Releasable
name|acquire
parameter_list|()
throws|throws
name|InterruptedException
block|{
assert|assert
name|Thread
operator|.
name|holdsLock
argument_list|(
name|this
argument_list|)
assert|;
if|if
condition|(
name|semaphore
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
comment|// the un-timed tryAcquire methods do not honor the fairness setting
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
return|return
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|semaphore
operator|.
name|release
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
else|else
block|{
comment|// this should never happen, if it does something is deeply wrong
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"failed to obtain permit but operations are not delayed"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Obtain the active operation count, or zero if all permits are held (even if there are outstanding operations in flight).      *      * @return the active operation count, or zero when all permits ar eheld      */
DECL|method|getActiveOperationsCount
name|int
name|getActiveOperationsCount
parameter_list|()
block|{
name|int
name|availablePermits
init|=
name|semaphore
operator|.
name|availablePermits
argument_list|()
decl_stmt|;
if|if
condition|(
name|availablePermits
operator|==
literal|0
condition|)
block|{
comment|/*              * This occurs when either doBlockOperations is holding all the permits or there are outstanding operations in flight and the              * remainder of the permits are held by doBlockOperations. We do not distinguish between these two cases and simply say that              * the active operations count is zero.              */
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|TOTAL_PERMITS
operator|-
name|availablePermits
return|;
block|}
block|}
block|}
end_class

end_unit

