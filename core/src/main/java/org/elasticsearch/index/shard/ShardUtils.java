begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|index
operator|.
name|ElasticsearchDirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|index
operator|.
name|ElasticsearchLeafReader
import|;
end_import

begin_class
DECL|class|ShardUtils
specifier|public
specifier|final
class|class
name|ShardUtils
block|{
DECL|method|ShardUtils
specifier|private
name|ShardUtils
parameter_list|()
block|{}
comment|/**      * Tries to extract the shard id from a reader if possible, when its not possible,      * will return null.      */
annotation|@
name|Nullable
DECL|method|extractShardId
specifier|public
specifier|static
name|ShardId
name|extractShardId
parameter_list|(
name|LeafReader
name|reader
parameter_list|)
block|{
specifier|final
name|ElasticsearchLeafReader
name|esReader
init|=
name|getElasticsearchLeafReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|esReader
operator|!=
literal|null
condition|)
block|{
assert|assert
name|reader
operator|.
name|getRefCount
argument_list|()
operator|>
literal|0
operator|:
literal|"ElasticsearchLeafReader is already closed"
assert|;
return|return
name|esReader
operator|.
name|shardId
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Tries to extract the shard id from a reader if possible, when its not possible,      * will return null.      */
annotation|@
name|Nullable
DECL|method|extractShardId
specifier|public
specifier|static
name|ShardId
name|extractShardId
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
specifier|final
name|ElasticsearchDirectoryReader
name|esReader
init|=
name|getElasticsearchDirectoryReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|esReader
operator|!=
literal|null
condition|)
block|{
return|return
name|esReader
operator|.
name|shardId
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|extractShardId
argument_list|(
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getElasticsearchLeafReader
specifier|private
specifier|static
name|ElasticsearchLeafReader
name|getElasticsearchLeafReader
parameter_list|(
name|LeafReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|FilterLeafReader
condition|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|ElasticsearchLeafReader
condition|)
block|{
return|return
operator|(
name|ElasticsearchLeafReader
operator|)
name|reader
return|;
block|}
else|else
block|{
comment|// We need to use FilterLeafReader#getDelegate and not FilterLeafReader#unwrap, because
comment|// If there are multiple levels of filtered leaf readers then with the unwrap() method it immediately
comment|// returns the most inner leaf reader and thus skipping of over any other filtered leaf reader that
comment|// may be instance of ElasticsearchLeafReader. This can cause us to miss the shardId.
return|return
name|getElasticsearchLeafReader
argument_list|(
operator|(
operator|(
name|FilterLeafReader
operator|)
name|reader
operator|)
operator|.
name|getDelegate
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getElasticsearchDirectoryReader
specifier|private
specifier|static
name|ElasticsearchDirectoryReader
name|getElasticsearchDirectoryReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|FilterDirectoryReader
condition|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|ElasticsearchDirectoryReader
condition|)
block|{
return|return
operator|(
name|ElasticsearchDirectoryReader
operator|)
name|reader
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
comment|// lucene needs a getDelegate method on FilteredDirectoryReader - not a big deal here
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

