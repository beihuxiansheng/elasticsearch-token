begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ThreadedActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
DECL|class|IndexShardOperationsLock
specifier|public
class|class
name|IndexShardOperationsLock
implements|implements
name|Closeable
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|TOTAL_PERMITS
specifier|private
specifier|static
specifier|final
name|int
name|TOTAL_PERMITS
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// fair semaphore to ensure that blockOperations() does not starve under thread contention
DECL|field|semaphore
specifier|final
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
name|TOTAL_PERMITS
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|delayedOperations
annotation|@
name|Nullable
specifier|private
name|List
argument_list|<
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
argument_list|>
name|delayedOperations
decl_stmt|;
comment|// operations that are delayed due to relocation hand-off
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
DECL|method|IndexShardOperationsLock
specifier|public
name|IndexShardOperationsLock
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"operation lock on [{}] closed"
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Wait for in-flight operations to finish and executes onBlocked under the guarantee that no new operations are started. Queues      * operations that are occurring in the meanwhile and runs them once onBlocked has executed.      *      * @param timeout the maximum time to wait for the in-flight operations block      * @param timeUnit the time unit of the {@code timeout} argument      * @param onBlocked the action to run once the block has been acquired      * @throws InterruptedException if calling thread is interrupted      * @throws TimeoutException if timed out waiting for in-flight operations to finish      * @throws IndexShardClosedException if operation lock has been closed      */
DECL|method|blockOperations
specifier|public
name|void
name|blockOperations
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|,
name|Runnable
name|onBlocked
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|semaphore
operator|.
name|tryAcquire
argument_list|(
name|TOTAL_PERMITS
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
condition|)
block|{
try|try
block|{
name|onBlocked
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|semaphore
operator|.
name|release
argument_list|(
name|TOTAL_PERMITS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"timed out during blockOperations"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
specifier|final
name|List
argument_list|<
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
argument_list|>
name|queuedActions
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|queuedActions
operator|=
name|delayedOperations
expr_stmt|;
name|delayedOperations
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|queuedActions
operator|!=
literal|null
condition|)
block|{
comment|// Try acquiring permits on fresh thread (for two reasons):
comment|// - blockOperations is called on recovery thread which can be expected to be interrupted when recovery is cancelled.
comment|//   Interruptions are bad here as permit acquisition will throw an InterruptedException which will be swallowed by
comment|//   ThreadedActionListener if the queue of the thread pool on which it submits is full.
comment|// - if permit is acquired and queue of the thread pool which the ThreadedActionListener uses is full, the onFailure
comment|//   handler is executed on the calling thread. This should not be the recovery thread as it would delay the recovery.
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|)
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
name|queuedAction
range|:
name|queuedActions
control|)
block|{
name|acquire
argument_list|(
name|queuedAction
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Acquires a lock whenever lock acquisition is not blocked. If the lock is directly available, the provided      * ActionListener will be called on the calling thread. During calls of {@link #blockOperations(long, TimeUnit, Runnable)}, lock      * acquisition can be delayed. The provided ActionListener will then be called using the provided executor once blockOperations      * terminates.      *      * @param onAcquired ActionListener that is invoked once acquisition is successful or failed      * @param executorOnDelay executor to use for delayed call      * @param forceExecution whether the runnable should force its execution in case it gets rejected      */
DECL|method|acquire
specifier|public
name|void
name|acquire
parameter_list|(
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
name|onAcquired
parameter_list|,
name|String
name|executorOnDelay
parameter_list|,
name|boolean
name|forceExecution
parameter_list|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
name|onAcquired
operator|.
name|onFailure
argument_list|(
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Releasable
name|releasable
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|releasable
operator|=
name|tryAcquire
argument_list|(
name|onAcquired
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|releasable
operator|==
literal|null
condition|)
block|{
comment|// blockOperations is executing, this operation will be retried by blockOperations once it finishes
if|if
condition|(
name|delayedOperations
operator|==
literal|null
condition|)
block|{
name|delayedOperations
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|executorOnDelay
operator|!=
literal|null
condition|)
block|{
name|delayedOperations
operator|.
name|add
argument_list|(
operator|new
name|ThreadedActionListener
argument_list|<>
argument_list|(
name|logger
argument_list|,
name|threadPool
argument_list|,
name|executorOnDelay
argument_list|,
name|onAcquired
argument_list|,
name|forceExecution
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delayedOperations
operator|.
name|add
argument_list|(
name|onAcquired
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|onAcquired
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|onAcquired
operator|.
name|onResponse
argument_list|(
name|releasable
argument_list|)
expr_stmt|;
block|}
DECL|method|tryAcquire
annotation|@
name|Nullable
specifier|private
name|Releasable
name|tryAcquire
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|semaphore
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
comment|// the untimed tryAcquire methods do not honor the fairness setting
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"acquired operation lock on [{}] for resource [{}]"
argument_list|,
name|shardId
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|semaphore
operator|.
name|release
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"released operation lock on [{}] for resource [{}]"
argument_list|,
name|shardId
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getActiveOperationsCount
specifier|public
name|int
name|getActiveOperationsCount
parameter_list|()
block|{
name|int
name|availablePermits
init|=
name|semaphore
operator|.
name|availablePermits
argument_list|()
decl_stmt|;
if|if
condition|(
name|availablePermits
operator|==
literal|0
condition|)
block|{
comment|// when blockOperations is holding all permits
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|TOTAL_PERMITS
operator|-
name|availablePermits
return|;
block|}
block|}
block|}
end_class

end_unit

