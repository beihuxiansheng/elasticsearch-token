begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapperForType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SourceToParse
operator|.
name|source
import|;
end_import

begin_comment
comment|/**  * The TranslogOpToEngineOpConverter encapsulates all the logic needed to transform a translog entry into an  * indexing operation including source parsing and field creation from the source.  */
end_comment

begin_class
DECL|class|TranslogOpToEngineOpConverter
specifier|public
class|class
name|TranslogOpToEngineOpConverter
block|{
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|method|TranslogOpToEngineOpConverter
specifier|protected
name|TranslogOpToEngineOpConverter
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|MapperService
name|mapperService
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
block|}
DECL|method|docMapper
specifier|protected
name|DocumentMapperForType
name|docMapper
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|mapperService
operator|.
name|documentMapperWithAutoCreate
argument_list|(
name|type
argument_list|)
return|;
comment|// protected for testing
block|}
DECL|method|convertToEngineOp
specifier|public
name|Engine
operator|.
name|Operation
name|convertToEngineOp
parameter_list|(
name|Translog
operator|.
name|Operation
name|operation
parameter_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
name|origin
parameter_list|)
block|{
switch|switch
condition|(
name|operation
operator|.
name|opType
argument_list|()
condition|)
block|{
case|case
name|INDEX
case|:
specifier|final
name|Translog
operator|.
name|Index
name|index
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|operation
decl_stmt|;
comment|// we set canHaveDuplicates to true all the time such that we de-optimze the translog case and ensure that all
comment|// autoGeneratedID docs that are coming from the primary are updated correctly.
specifier|final
name|Engine
operator|.
name|Index
name|engineIndex
init|=
name|IndexShard
operator|.
name|prepareIndex
argument_list|(
name|docMapper
argument_list|(
name|index
operator|.
name|type
argument_list|()
argument_list|)
argument_list|,
name|source
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|index
operator|.
name|type
argument_list|()
argument_list|,
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|index
operator|.
name|source
argument_list|()
argument_list|,
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|index
operator|.
name|source
argument_list|()
argument_list|)
argument_list|)
operator|.
name|routing
argument_list|(
name|index
operator|.
name|routing
argument_list|()
argument_list|)
operator|.
name|parent
argument_list|(
name|index
operator|.
name|parent
argument_list|()
argument_list|)
argument_list|,
name|index
operator|.
name|seqNo
argument_list|()
argument_list|,
name|index
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|origin
argument_list|,
name|index
operator|.
name|getAutoGeneratedIdTimestamp
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|engineIndex
return|;
case|case
name|DELETE
case|:
specifier|final
name|Translog
operator|.
name|Delete
name|delete
init|=
operator|(
name|Translog
operator|.
name|Delete
operator|)
name|operation
decl_stmt|;
specifier|final
name|Engine
operator|.
name|Delete
name|engineDelete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
name|delete
operator|.
name|type
argument_list|()
argument_list|,
name|delete
operator|.
name|id
argument_list|()
argument_list|,
name|delete
operator|.
name|uid
argument_list|()
argument_list|,
name|delete
operator|.
name|seqNo
argument_list|()
argument_list|,
name|delete
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|delete
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|origin
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|engineDelete
return|;
case|case
name|NO_OP
case|:
specifier|final
name|Translog
operator|.
name|NoOp
name|noOp
init|=
operator|(
name|Translog
operator|.
name|NoOp
operator|)
name|operation
decl_stmt|;
specifier|final
name|Engine
operator|.
name|NoOp
name|engineNoOp
init|=
operator|new
name|Engine
operator|.
name|NoOp
argument_list|(
name|noOp
operator|.
name|seqNo
argument_list|()
argument_list|,
name|noOp
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|origin
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|noOp
operator|.
name|reason
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|engineNoOp
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No operation defined for ["
operator|+
name|operation
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

