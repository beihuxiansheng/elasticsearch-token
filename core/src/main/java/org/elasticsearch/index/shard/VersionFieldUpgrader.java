begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CodecReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterCodecReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|GrowableWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Numbers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|VersionFieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * Converts 0.90.x _uid payloads to _version docvalues  */
end_comment

begin_class
DECL|class|VersionFieldUpgrader
class|class
name|VersionFieldUpgrader
extends|extends
name|FilterCodecReader
block|{
DECL|field|infos
specifier|final
name|FieldInfos
name|infos
decl_stmt|;
DECL|method|VersionFieldUpgrader
name|VersionFieldUpgrader
parameter_list|(
name|CodecReader
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Find a free field number
name|int
name|fieldNumber
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldInfo
name|fi
range|:
name|in
operator|.
name|getFieldInfos
argument_list|()
control|)
block|{
name|fieldNumber
operator|=
name|Math
operator|.
name|max
argument_list|(
name|fieldNumber
argument_list|,
name|fi
operator|.
name|number
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// TODO: lots of things can wrong here...
name|FieldInfo
name|newInfo
init|=
operator|new
name|FieldInfo
argument_list|(
name|VersionFieldMapper
operator|.
name|NAME
argument_list|,
comment|// field name
name|fieldNumber
argument_list|,
comment|// field number
literal|false
argument_list|,
comment|// store term vectors
literal|false
argument_list|,
comment|// omit norms
literal|false
argument_list|,
comment|// store payloads
name|IndexOptions
operator|.
name|NONE
argument_list|,
comment|// index options
name|DocValuesType
operator|.
name|NUMERIC
argument_list|,
comment|// docvalues
operator|-
literal|1
argument_list|,
comment|// docvalues generation
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
comment|// attributes
argument_list|)
decl_stmt|;
name|newInfo
operator|.
name|checkConsistency
argument_list|()
expr_stmt|;
comment|// fail merge immediately if above code is wrong
specifier|final
name|ArrayList
argument_list|<
name|FieldInfo
argument_list|>
name|fieldInfoList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldInfo
name|info
range|:
name|in
operator|.
name|getFieldInfos
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|info
operator|.
name|name
operator|.
name|equals
argument_list|(
name|VersionFieldMapper
operator|.
name|NAME
argument_list|)
condition|)
block|{
name|fieldInfoList
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
name|fieldInfoList
operator|.
name|add
argument_list|(
name|newInfo
argument_list|)
expr_stmt|;
name|infos
operator|=
operator|new
name|FieldInfos
argument_list|(
name|fieldInfoList
operator|.
name|toArray
argument_list|(
operator|new
name|FieldInfo
index|[
name|fieldInfoList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|wrap
specifier|static
name|CodecReader
name|wrap
parameter_list|(
name|CodecReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FieldInfos
name|fieldInfos
init|=
name|reader
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
specifier|final
name|FieldInfo
name|versionInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|VersionFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionInfo
operator|!=
literal|null
operator|&&
name|versionInfo
operator|.
name|getDocValuesType
argument_list|()
operator|!=
name|DocValuesType
operator|.
name|NONE
condition|)
block|{
comment|// the reader is a recent one, it has versions and they are stored
comment|// in a numeric doc values field
return|return
name|reader
return|;
block|}
comment|// The segment is an old one, look at the _uid field
specifier|final
name|Terms
name|terms
init|=
name|reader
operator|.
name|terms
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
operator|||
operator|!
name|terms
operator|.
name|hasPayloads
argument_list|()
condition|)
block|{
comment|// The segment doesn't have an _uid field or doesn't have payloads
comment|// don't try to do anything clever. If any other segment has versions
comment|// all versions of this segment will be initialized to 0
return|return
name|reader
return|;
block|}
comment|// convert _uid payloads -> _version docvalues
return|return
operator|new
name|VersionFieldUpgrader
argument_list|(
name|reader
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFieldInfos
specifier|public
name|FieldInfos
name|getFieldInfos
parameter_list|()
block|{
return|return
name|infos
return|;
block|}
annotation|@
name|Override
DECL|method|getDocValuesReader
specifier|public
name|DocValuesProducer
name|getDocValuesReader
parameter_list|()
block|{
name|DocValuesProducer
name|producer
init|=
name|in
operator|.
name|getDocValuesReader
argument_list|()
decl_stmt|;
comment|// TODO: move this nullness stuff out
if|if
condition|(
name|producer
operator|==
literal|null
condition|)
block|{
name|producer
operator|=
name|FilterDocValuesProducer
operator|.
name|EMPTY
expr_stmt|;
block|}
return|return
operator|new
name|UninvertedVersions
argument_list|(
name|producer
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|class|UninvertedVersions
specifier|static
class|class
name|UninvertedVersions
extends|extends
name|FilterDocValuesProducer
block|{
DECL|field|reader
specifier|final
name|CodecReader
name|reader
decl_stmt|;
DECL|method|UninvertedVersions
name|UninvertedVersions
parameter_list|(
name|DocValuesProducer
name|in
parameter_list|,
name|CodecReader
name|reader
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNumeric
specifier|public
name|NumericDocValues
name|getNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VersionFieldMapper
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|field
operator|.
name|name
argument_list|)
condition|)
block|{
comment|// uninvert into a packed ints and expose as docvalues
specifier|final
name|Terms
name|terms
init|=
name|reader
operator|.
name|terms
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
specifier|final
name|TermsEnum
name|uids
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|GrowableWriter
name|versions
init|=
operator|new
name|GrowableWriter
argument_list|(
literal|2
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|PackedInts
operator|.
name|COMPACT
argument_list|)
decl_stmt|;
name|PostingsEnum
name|dpe
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BytesRef
name|uid
init|=
name|uids
operator|.
name|next
argument_list|()
init|;
name|uid
operator|!=
literal|null
condition|;
name|uid
operator|=
name|uids
operator|.
name|next
argument_list|()
control|)
block|{
name|dpe
operator|=
name|uids
operator|.
name|postings
argument_list|(
name|dpe
argument_list|,
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
expr_stmt|;
assert|assert
name|terms
operator|.
name|hasPayloads
argument_list|()
operator|:
literal|"field has payloads"
assert|;
specifier|final
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|dpe
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|dpe
operator|.
name|nextDoc
argument_list|()
control|)
block|{
if|if
condition|(
name|liveDocs
operator|!=
literal|null
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
operator|==
literal|false
condition|)
block|{
continue|continue;
block|}
name|dpe
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
specifier|final
name|BytesRef
name|payload
init|=
name|dpe
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
operator|&&
name|payload
operator|.
name|length
operator|==
literal|8
condition|)
block|{
specifier|final
name|long
name|version
init|=
name|Numbers
operator|.
name|bytesToLong
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|versions
operator|.
name|set
argument_list|(
name|doc
argument_list|,
name|version
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|versions
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|getNumeric
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDocsWithField
specifier|public
name|Bits
name|getDocsWithField
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VersionFieldMapper
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|field
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|getDocsWithField
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMergeInstance
specifier|public
name|DocValuesProducer
name|getMergeInstance
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|UninvertedVersions
argument_list|(
name|in
operator|.
name|getMergeInstance
argument_list|()
argument_list|,
name|reader
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

