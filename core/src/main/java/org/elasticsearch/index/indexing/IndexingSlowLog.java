begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.indexing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Booleans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|IndexingSlowLog
specifier|public
specifier|final
class|class
name|IndexingSlowLog
block|{
DECL|field|reformat
specifier|private
name|boolean
name|reformat
decl_stmt|;
DECL|field|indexWarnThreshold
specifier|private
name|long
name|indexWarnThreshold
decl_stmt|;
DECL|field|indexInfoThreshold
specifier|private
name|long
name|indexInfoThreshold
decl_stmt|;
DECL|field|indexDebugThreshold
specifier|private
name|long
name|indexDebugThreshold
decl_stmt|;
DECL|field|indexTraceThreshold
specifier|private
name|long
name|indexTraceThreshold
decl_stmt|;
comment|/**      * How much of the source to log in the slowlog - 0 means log none and      * anything greater than 0 means log at least that many<em>characters</em>      * of the source.      */
DECL|field|maxSourceCharsToLog
specifier|private
name|int
name|maxSourceCharsToLog
decl_stmt|;
DECL|field|level
specifier|private
name|String
name|level
decl_stmt|;
DECL|field|indexLogger
specifier|private
specifier|final
name|ESLogger
name|indexLogger
decl_stmt|;
DECL|field|deleteLogger
specifier|private
specifier|final
name|ESLogger
name|deleteLogger
decl_stmt|;
DECL|field|INDEX_INDEXING_SLOWLOG_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_INDEXING_SLOWLOG_PREFIX
init|=
literal|"index.indexing.slowlog"
decl_stmt|;
DECL|field|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN
init|=
name|INDEX_INDEXING_SLOWLOG_PREFIX
operator|+
literal|".threshold.index.warn"
decl_stmt|;
DECL|field|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO
init|=
name|INDEX_INDEXING_SLOWLOG_PREFIX
operator|+
literal|".threshold.index.info"
decl_stmt|;
DECL|field|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG
init|=
name|INDEX_INDEXING_SLOWLOG_PREFIX
operator|+
literal|".threshold.index.debug"
decl_stmt|;
DECL|field|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE
init|=
name|INDEX_INDEXING_SLOWLOG_PREFIX
operator|+
literal|".threshold.index.trace"
decl_stmt|;
DECL|field|INDEX_INDEXING_SLOWLOG_REFORMAT
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_INDEXING_SLOWLOG_REFORMAT
init|=
name|INDEX_INDEXING_SLOWLOG_PREFIX
operator|+
literal|".reformat"
decl_stmt|;
DECL|field|INDEX_INDEXING_SLOWLOG_LEVEL
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_INDEXING_SLOWLOG_LEVEL
init|=
name|INDEX_INDEXING_SLOWLOG_PREFIX
operator|+
literal|".level"
decl_stmt|;
DECL|field|INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG
init|=
name|INDEX_INDEXING_SLOWLOG_PREFIX
operator|+
literal|".source"
decl_stmt|;
DECL|method|IndexingSlowLog
name|IndexingSlowLog
parameter_list|(
name|Settings
name|indexSettings
parameter_list|)
block|{
name|this
argument_list|(
name|indexSettings
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|INDEX_INDEXING_SLOWLOG_PREFIX
operator|+
literal|".index"
argument_list|)
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|INDEX_INDEXING_SLOWLOG_PREFIX
operator|+
literal|".delete"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Build with the specified loggers. Only used to testing.      */
DECL|method|IndexingSlowLog
name|IndexingSlowLog
parameter_list|(
name|Settings
name|indexSettings
parameter_list|,
name|ESLogger
name|indexLogger
parameter_list|,
name|ESLogger
name|deleteLogger
parameter_list|)
block|{
name|this
operator|.
name|indexLogger
operator|=
name|indexLogger
expr_stmt|;
name|this
operator|.
name|deleteLogger
operator|=
name|deleteLogger
expr_stmt|;
name|this
operator|.
name|reformat
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_INDEXING_SLOWLOG_REFORMAT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexWarnThreshold
operator|=
name|indexSettings
operator|.
name|getAsTime
argument_list|(
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexInfoThreshold
operator|=
name|indexSettings
operator|.
name|getAsTime
argument_list|(
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexDebugThreshold
operator|=
name|indexSettings
operator|.
name|getAsTime
argument_list|(
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexTraceThreshold
operator|=
name|indexSettings
operator|.
name|getAsTime
argument_list|(
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
name|this
operator|.
name|level
operator|=
name|indexSettings
operator|.
name|get
argument_list|(
name|INDEX_INDEXING_SLOWLOG_LEVEL
argument_list|,
literal|"TRACE"
argument_list|)
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxSourceCharsToLog
operator|=
name|readSourceToLog
argument_list|(
name|indexSettings
argument_list|)
expr_stmt|;
name|indexLogger
operator|.
name|setLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|deleteLogger
operator|.
name|setLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
DECL|method|onRefreshSettings
specifier|synchronized
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|long
name|indexWarnThreshold
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|this
operator|.
name|indexWarnThreshold
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexWarnThreshold
operator|!=
name|this
operator|.
name|indexWarnThreshold
condition|)
block|{
name|this
operator|.
name|indexWarnThreshold
operator|=
name|indexWarnThreshold
expr_stmt|;
block|}
name|long
name|indexInfoThreshold
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|this
operator|.
name|indexInfoThreshold
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexInfoThreshold
operator|!=
name|this
operator|.
name|indexInfoThreshold
condition|)
block|{
name|this
operator|.
name|indexInfoThreshold
operator|=
name|indexInfoThreshold
expr_stmt|;
block|}
name|long
name|indexDebugThreshold
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|this
operator|.
name|indexDebugThreshold
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexDebugThreshold
operator|!=
name|this
operator|.
name|indexDebugThreshold
condition|)
block|{
name|this
operator|.
name|indexDebugThreshold
operator|=
name|indexDebugThreshold
expr_stmt|;
block|}
name|long
name|indexTraceThreshold
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|this
operator|.
name|indexTraceThreshold
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexTraceThreshold
operator|!=
name|this
operator|.
name|indexTraceThreshold
condition|)
block|{
name|this
operator|.
name|indexTraceThreshold
operator|=
name|indexTraceThreshold
expr_stmt|;
block|}
name|String
name|level
init|=
name|settings
operator|.
name|get
argument_list|(
name|INDEX_INDEXING_SLOWLOG_LEVEL
argument_list|,
name|this
operator|.
name|level
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|level
operator|.
name|equals
argument_list|(
name|this
operator|.
name|level
argument_list|)
condition|)
block|{
name|this
operator|.
name|indexLogger
operator|.
name|setLevel
argument_list|(
name|level
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteLogger
operator|.
name|setLevel
argument_list|(
name|level
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
name|boolean
name|reformat
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_INDEXING_SLOWLOG_REFORMAT
argument_list|,
name|this
operator|.
name|reformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|reformat
operator|!=
name|this
operator|.
name|reformat
condition|)
block|{
name|this
operator|.
name|reformat
operator|=
name|reformat
expr_stmt|;
block|}
name|int
name|maxSourceCharsToLog
init|=
name|readSourceToLog
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxSourceCharsToLog
operator|!=
name|this
operator|.
name|maxSourceCharsToLog
condition|)
block|{
name|this
operator|.
name|maxSourceCharsToLog
operator|=
name|maxSourceCharsToLog
expr_stmt|;
block|}
block|}
DECL|method|postIndex
name|void
name|postIndex
parameter_list|(
name|Engine
operator|.
name|Index
name|index
parameter_list|,
name|long
name|tookInNanos
parameter_list|)
block|{
name|postIndexing
argument_list|(
name|index
operator|.
name|parsedDoc
argument_list|()
argument_list|,
name|tookInNanos
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads how much of the source to log. The user can specify any value they      * like and numbers are interpreted the maximum number of characters to log      * and everything else is interpreted as Elasticsearch interprets booleans      * which is then converted to 0 for false and Integer.MAX_VALUE for true.      */
DECL|method|readSourceToLog
specifier|private
name|int
name|readSourceToLog
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|String
name|sourceToLog
init|=
name|settings
operator|.
name|get
argument_list|(
name|INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG
argument_list|,
literal|"1000"
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|sourceToLog
argument_list|,
literal|10
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|sourceToLog
argument_list|,
literal|true
argument_list|)
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
literal|0
return|;
block|}
block|}
DECL|method|postIndexing
specifier|private
name|void
name|postIndexing
parameter_list|(
name|ParsedDocument
name|doc
parameter_list|,
name|long
name|tookInNanos
parameter_list|)
block|{
if|if
condition|(
name|indexWarnThreshold
operator|>=
literal|0
operator|&&
name|tookInNanos
operator|>
name|indexWarnThreshold
condition|)
block|{
name|indexLogger
operator|.
name|warn
argument_list|(
literal|"{}"
argument_list|,
operator|new
name|SlowLogParsedDocumentPrinter
argument_list|(
name|doc
argument_list|,
name|tookInNanos
argument_list|,
name|reformat
argument_list|,
name|maxSourceCharsToLog
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexInfoThreshold
operator|>=
literal|0
operator|&&
name|tookInNanos
operator|>
name|indexInfoThreshold
condition|)
block|{
name|indexLogger
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
operator|new
name|SlowLogParsedDocumentPrinter
argument_list|(
name|doc
argument_list|,
name|tookInNanos
argument_list|,
name|reformat
argument_list|,
name|maxSourceCharsToLog
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexDebugThreshold
operator|>=
literal|0
operator|&&
name|tookInNanos
operator|>
name|indexDebugThreshold
condition|)
block|{
name|indexLogger
operator|.
name|debug
argument_list|(
literal|"{}"
argument_list|,
operator|new
name|SlowLogParsedDocumentPrinter
argument_list|(
name|doc
argument_list|,
name|tookInNanos
argument_list|,
name|reformat
argument_list|,
name|maxSourceCharsToLog
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexTraceThreshold
operator|>=
literal|0
operator|&&
name|tookInNanos
operator|>
name|indexTraceThreshold
condition|)
block|{
name|indexLogger
operator|.
name|trace
argument_list|(
literal|"{}"
argument_list|,
operator|new
name|SlowLogParsedDocumentPrinter
argument_list|(
name|doc
argument_list|,
name|tookInNanos
argument_list|,
name|reformat
argument_list|,
name|maxSourceCharsToLog
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SlowLogParsedDocumentPrinter
specifier|static
specifier|final
class|class
name|SlowLogParsedDocumentPrinter
block|{
DECL|field|doc
specifier|private
specifier|final
name|ParsedDocument
name|doc
decl_stmt|;
DECL|field|tookInNanos
specifier|private
specifier|final
name|long
name|tookInNanos
decl_stmt|;
DECL|field|reformat
specifier|private
specifier|final
name|boolean
name|reformat
decl_stmt|;
DECL|field|maxSourceCharsToLog
specifier|private
specifier|final
name|int
name|maxSourceCharsToLog
decl_stmt|;
DECL|method|SlowLogParsedDocumentPrinter
name|SlowLogParsedDocumentPrinter
parameter_list|(
name|ParsedDocument
name|doc
parameter_list|,
name|long
name|tookInNanos
parameter_list|,
name|boolean
name|reformat
parameter_list|,
name|int
name|maxSourceCharsToLog
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|tookInNanos
operator|=
name|tookInNanos
expr_stmt|;
name|this
operator|.
name|reformat
operator|=
name|reformat
expr_stmt|;
name|this
operator|.
name|maxSourceCharsToLog
operator|=
name|maxSourceCharsToLog
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"took["
argument_list|)
operator|.
name|append
argument_list|(
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|tookInNanos
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"], took_millis["
argument_list|)
operator|.
name|append
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|tookInNanos
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"], "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"type["
argument_list|)
operator|.
name|append
argument_list|(
name|doc
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"], "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id["
argument_list|)
operator|.
name|append
argument_list|(
name|doc
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"], "
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|routing
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"routing[] "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"routing["
argument_list|)
operator|.
name|append
argument_list|(
name|doc
operator|.
name|routing
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxSourceCharsToLog
operator|==
literal|0
operator|||
name|doc
operator|.
name|source
argument_list|()
operator|==
literal|null
operator|||
name|doc
operator|.
name|source
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
try|try
block|{
name|String
name|source
init|=
name|XContentHelper
operator|.
name|convertToJson
argument_list|(
name|doc
operator|.
name|source
argument_list|()
argument_list|,
name|reformat
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", source["
argument_list|)
operator|.
name|append
argument_list|(
name|Strings
operator|.
name|cleanTruncate
argument_list|(
name|source
argument_list|,
name|maxSourceCharsToLog
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", source[_failed_to_convert_]"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

