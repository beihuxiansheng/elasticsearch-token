begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexOrDocValuesQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PointRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ObjectMapper
import|;
end_import

begin_comment
comment|/** Utility class to filter parent and children clauses when building nested  * queries. */
end_comment

begin_class
DECL|class|NestedHelper
specifier|public
specifier|final
class|class
name|NestedHelper
block|{
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|method|NestedHelper
specifier|public
name|NestedHelper
parameter_list|(
name|MapperService
name|mapperService
parameter_list|)
block|{
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
block|}
comment|/** Returns true if the given query might match nested documents. */
DECL|method|mightMatchNestedDocs
specifier|public
name|boolean
name|mightMatchNestedDocs
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|ConstantScoreQuery
condition|)
block|{
return|return
name|mightMatchNestedDocs
argument_list|(
operator|(
operator|(
name|ConstantScoreQuery
operator|)
name|query
operator|)
operator|.
name|getQuery
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|BoostQuery
condition|)
block|{
return|return
name|mightMatchNestedDocs
argument_list|(
operator|(
operator|(
name|BoostQuery
operator|)
name|query
operator|)
operator|.
name|getQuery
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|MatchAllDocsQuery
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|MatchNoDocsQuery
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|TermQuery
condition|)
block|{
comment|// We only handle term queries and range queries, which should already
comment|// cover a high majority of use-cases
return|return
name|mightMatchNestedDocs
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|query
operator|)
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|PointRangeQuery
condition|)
block|{
return|return
name|mightMatchNestedDocs
argument_list|(
operator|(
operator|(
name|PointRangeQuery
operator|)
name|query
operator|)
operator|.
name|getField
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|IndexOrDocValuesQuery
condition|)
block|{
return|return
name|mightMatchNestedDocs
argument_list|(
operator|(
operator|(
name|IndexOrDocValuesQuery
operator|)
name|query
operator|)
operator|.
name|getIndexQuery
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|BooleanQuery
condition|)
block|{
specifier|final
name|BooleanQuery
name|bq
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
specifier|final
name|boolean
name|hasRequiredClauses
init|=
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|BooleanClause
operator|::
name|isRequired
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasRequiredClauses
condition|)
block|{
return|return
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|BooleanClause
operator|::
name|isRequired
argument_list|)
operator|.
name|map
argument_list|(
name|BooleanClause
operator|::
name|getQuery
argument_list|)
operator|.
name|allMatch
argument_list|(
name|this
operator|::
name|mightMatchNestedDocs
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getOccur
argument_list|()
operator|==
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|map
argument_list|(
name|BooleanClause
operator|::
name|getQuery
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|this
operator|::
name|mightMatchNestedDocs
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|ESToParentBlockJoinQuery
condition|)
block|{
return|return
operator|(
operator|(
name|ESToParentBlockJoinQuery
operator|)
name|query
operator|)
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Returns true if a query on the given field might match nested documents. */
DECL|method|mightMatchNestedDocs
name|boolean
name|mightMatchNestedDocs
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
block|{
comment|// meta field. Every meta field behaves differently, eg. nested
comment|// documents have the same _uid as their parent, put their path in
comment|// the _type field but do not have _field_names. So we just ignore
comment|// meta fields and return true, which is always safe, it just means
comment|// we might add a nested filter when it is nor required.
return|return
literal|true
return|;
block|}
if|if
condition|(
name|mapperService
operator|.
name|fullName
argument_list|(
name|field
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// field does not exist
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|parent
init|=
name|parentObject
argument_list|(
name|field
argument_list|)
init|;
name|parent
operator|!=
literal|null
condition|;
name|parent
operator|=
name|parentObject
argument_list|(
name|parent
argument_list|)
control|)
block|{
name|ObjectMapper
name|mapper
init|=
name|mapperService
operator|.
name|getObjectMapper
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
operator|&&
name|mapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns true if the given query might match parent documents or documents      *  that are nested under a different path. */
DECL|method|mightMatchNonNestedDocs
specifier|public
name|boolean
name|mightMatchNonNestedDocs
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|nestedPath
parameter_list|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|ConstantScoreQuery
condition|)
block|{
return|return
name|mightMatchNonNestedDocs
argument_list|(
operator|(
operator|(
name|ConstantScoreQuery
operator|)
name|query
operator|)
operator|.
name|getQuery
argument_list|()
argument_list|,
name|nestedPath
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|BoostQuery
condition|)
block|{
return|return
name|mightMatchNonNestedDocs
argument_list|(
operator|(
operator|(
name|BoostQuery
operator|)
name|query
operator|)
operator|.
name|getQuery
argument_list|()
argument_list|,
name|nestedPath
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|MatchAllDocsQuery
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|MatchNoDocsQuery
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|TermQuery
condition|)
block|{
return|return
name|mightMatchNonNestedDocs
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|query
operator|)
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|,
name|nestedPath
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|PointRangeQuery
condition|)
block|{
return|return
name|mightMatchNonNestedDocs
argument_list|(
operator|(
operator|(
name|PointRangeQuery
operator|)
name|query
operator|)
operator|.
name|getField
argument_list|()
argument_list|,
name|nestedPath
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|IndexOrDocValuesQuery
condition|)
block|{
return|return
name|mightMatchNonNestedDocs
argument_list|(
operator|(
operator|(
name|IndexOrDocValuesQuery
operator|)
name|query
operator|)
operator|.
name|getIndexQuery
argument_list|()
argument_list|,
name|nestedPath
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|BooleanQuery
condition|)
block|{
specifier|final
name|BooleanQuery
name|bq
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
specifier|final
name|boolean
name|hasRequiredClauses
init|=
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|BooleanClause
operator|::
name|isRequired
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasRequiredClauses
condition|)
block|{
return|return
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|BooleanClause
operator|::
name|isRequired
argument_list|)
operator|.
name|map
argument_list|(
name|BooleanClause
operator|::
name|getQuery
argument_list|)
operator|.
name|allMatch
argument_list|(
name|q
lambda|->
name|mightMatchNonNestedDocs
argument_list|(
name|q
argument_list|,
name|nestedPath
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getOccur
argument_list|()
operator|==
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|map
argument_list|(
name|BooleanClause
operator|::
name|getQuery
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|q
lambda|->
name|mightMatchNonNestedDocs
argument_list|(
name|q
argument_list|,
name|nestedPath
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Returns true if a query on the given field might match parent documents      *  or documents that are nested under a different path. */
DECL|method|mightMatchNonNestedDocs
name|boolean
name|mightMatchNonNestedDocs
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|nestedPath
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
block|{
comment|// meta field. Every meta field behaves differently, eg. nested
comment|// documents have the same _uid as their parent, put their path in
comment|// the _type field but do not have _field_names. So we just ignore
comment|// meta fields and return true, which is always safe, it just means
comment|// we might add a nested filter when it is nor required.
return|return
literal|true
return|;
block|}
if|if
condition|(
name|mapperService
operator|.
name|fullName
argument_list|(
name|field
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|parent
init|=
name|parentObject
argument_list|(
name|field
argument_list|)
init|;
name|parent
operator|!=
literal|null
condition|;
name|parent
operator|=
name|parentObject
argument_list|(
name|parent
argument_list|)
control|)
block|{
name|ObjectMapper
name|mapper
init|=
name|mapperService
operator|.
name|getObjectMapper
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
operator|&&
name|mapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
if|if
condition|(
name|mapper
operator|.
name|fullPath
argument_list|()
operator|.
name|equals
argument_list|(
name|nestedPath
argument_list|)
condition|)
block|{
comment|// If the mapper does not include in its parent or in the root object then
comment|// the query might only match nested documents with the given path
return|return
name|mapper
operator|.
name|nested
argument_list|()
operator|.
name|isIncludeInParent
argument_list|()
operator|||
name|mapper
operator|.
name|nested
argument_list|()
operator|.
name|isIncludeInRoot
argument_list|()
return|;
block|}
else|else
block|{
comment|// the first parent nested mapper does not have the expected path
comment|// It might be misconfiguration or a sub nested mapper
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
comment|// the field is not a sub field of the nested path
block|}
DECL|method|parentObject
specifier|private
specifier|static
name|String
name|parentObject
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|int
name|lastDot
init|=
name|field
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastDot
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|field
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastDot
argument_list|)
return|;
block|}
block|}
end_class

end_unit

