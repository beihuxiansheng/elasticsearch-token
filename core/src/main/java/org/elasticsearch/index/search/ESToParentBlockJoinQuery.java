begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BitSetProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ToParentBlockJoinQuery
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** A {@link ToParentBlockJoinQuery} that allows to retrieve its nested path. */
end_comment

begin_class
DECL|class|ESToParentBlockJoinQuery
specifier|public
specifier|final
class|class
name|ESToParentBlockJoinQuery
extends|extends
name|Query
block|{
DECL|field|query
specifier|private
specifier|final
name|ToParentBlockJoinQuery
name|query
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|method|ESToParentBlockJoinQuery
specifier|public
name|ESToParentBlockJoinQuery
parameter_list|(
name|Query
name|childQuery
parameter_list|,
name|BitSetProducer
name|parentsFilter
parameter_list|,
name|ScoreMode
name|scoreMode
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ToParentBlockJoinQuery
argument_list|(
name|childQuery
argument_list|,
name|parentsFilter
argument_list|,
name|scoreMode
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|ESToParentBlockJoinQuery
specifier|private
name|ESToParentBlockJoinQuery
parameter_list|(
name|ToParentBlockJoinQuery
name|query
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
comment|/** Return the child query. */
DECL|method|getChildQuery
specifier|public
name|Query
name|getChildQuery
parameter_list|()
block|{
return|return
name|query
operator|.
name|getChildQuery
argument_list|()
return|;
block|}
comment|/** Return the path of results of this query, or {@code null} if matches are at the root level. */
DECL|method|getPath
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|innerRewrite
init|=
name|query
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerRewrite
operator|!=
name|query
condition|)
block|{
comment|// Right now ToParentBlockJoinQuery always rewrites to a ToParentBlockJoinQuery
comment|// so the else block will never be used. It is useful in the case that
comment|// ToParentBlockJoinQuery one day starts to rewrite to a different query, eg.
comment|// a MatchNoDocsQuery if it realizes that it cannot match any docs and rewrites
comment|// to a MatchNoDocsQuery. In that case it would be fine to lose information
comment|// about the nested path.
if|if
condition|(
name|innerRewrite
operator|instanceof
name|ToParentBlockJoinQuery
condition|)
block|{
return|return
operator|new
name|ESToParentBlockJoinQuery
argument_list|(
operator|(
name|ToParentBlockJoinQuery
operator|)
name|innerRewrite
argument_list|,
name|path
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|innerRewrite
return|;
block|}
block|}
return|return
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|query
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|sameClassAs
argument_list|(
name|obj
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ESToParentBlockJoinQuery
name|that
init|=
operator|(
name|ESToParentBlockJoinQuery
operator|)
name|obj
decl_stmt|;
return|return
name|query
operator|.
name|equals
argument_list|(
name|that
operator|.
name|query
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|path
argument_list|,
name|that
operator|.
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|query
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|query
operator|.
name|toString
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
end_class

end_unit

