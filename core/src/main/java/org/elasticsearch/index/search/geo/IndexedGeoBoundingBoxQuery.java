begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|geo
operator|.
name|GeoPointFieldMapperLegacy
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|IndexedGeoBoundingBoxQuery
specifier|public
class|class
name|IndexedGeoBoundingBoxQuery
block|{
DECL|method|create
specifier|public
specifier|static
name|Query
name|create
parameter_list|(
name|GeoPoint
name|topLeft
parameter_list|,
name|GeoPoint
name|bottomRight
parameter_list|,
name|GeoPointFieldMapperLegacy
operator|.
name|GeoPointFieldType
name|fieldType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fieldType
operator|.
name|isLatLonEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"lat/lon is not enabled (indexed) for field ["
operator|+
name|fieldType
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
operator|+
literal|"], can't use indexed filter on it"
argument_list|)
throw|;
block|}
comment|//checks to see if bounding box crosses 180 degrees
if|if
condition|(
name|topLeft
operator|.
name|lon
argument_list|()
operator|>
name|bottomRight
operator|.
name|lon
argument_list|()
condition|)
block|{
return|return
name|westGeoBoundingBoxFilter
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|,
name|fieldType
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|eastGeoBoundingBoxFilter
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|,
name|fieldType
argument_list|)
return|;
block|}
block|}
DECL|method|westGeoBoundingBoxFilter
specifier|private
specifier|static
name|Query
name|westGeoBoundingBoxFilter
parameter_list|(
name|GeoPoint
name|topLeft
parameter_list|,
name|GeoPoint
name|bottomRight
parameter_list|,
name|GeoPointFieldMapperLegacy
operator|.
name|GeoPointFieldType
name|fieldType
parameter_list|)
block|{
name|BooleanQuery
operator|.
name|Builder
name|filter
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|fieldType
operator|.
name|lonFieldType
argument_list|()
operator|.
name|rangeQuery
argument_list|(
literal|null
argument_list|,
name|bottomRight
operator|.
name|lon
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|fieldType
operator|.
name|lonFieldType
argument_list|()
operator|.
name|rangeQuery
argument_list|(
name|topLeft
operator|.
name|lon
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|fieldType
operator|.
name|latFieldType
argument_list|()
operator|.
name|rangeQuery
argument_list|(
name|bottomRight
operator|.
name|lat
argument_list|()
argument_list|,
name|topLeft
operator|.
name|lat
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|filter
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|eastGeoBoundingBoxFilter
specifier|private
specifier|static
name|Query
name|eastGeoBoundingBoxFilter
parameter_list|(
name|GeoPoint
name|topLeft
parameter_list|,
name|GeoPoint
name|bottomRight
parameter_list|,
name|GeoPointFieldMapperLegacy
operator|.
name|GeoPointFieldType
name|fieldType
parameter_list|)
block|{
name|BooleanQuery
operator|.
name|Builder
name|filter
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|fieldType
operator|.
name|lonFieldType
argument_list|()
operator|.
name|rangeQuery
argument_list|(
name|topLeft
operator|.
name|lon
argument_list|()
argument_list|,
name|bottomRight
operator|.
name|lon
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|fieldType
operator|.
name|latFieldType
argument_list|()
operator|.
name|rangeQuery
argument_list|(
name|bottomRight
operator|.
name|lat
argument_list|()
argument_list|,
name|topLeft
operator|.
name|lat
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|filter
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

