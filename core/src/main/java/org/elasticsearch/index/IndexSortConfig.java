begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedNumericSortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Holds all the information that is used to build the sort order of an index.  *  * The index sort settings are<b>final</b> and can be defined only at index creation.  * These settings are divided in four lists that are merged during the initialization of this class:  *<ul>  *<li>`index.sort.field`: the field or a list of field to use for the sort</li>  *<li>`index.sort.order` the {@link SortOrder} to use for the field or a list of {@link SortOrder}  *          for each field defined in `index.sort.field`.  *</li>  *<li>`index.sort.mode`: the {@link MultiValueMode} to use for the field or a list of orders  *          for each field defined in `index.sort.field`.  *</li>  *<li>`index.sort.missing`: the missing value to use for the field or a list of missing values  *          for each field defined in `index.sort.field`  *</li>  *</ul>  * **/
end_comment

begin_class
DECL|class|IndexSortConfig
specifier|public
specifier|final
class|class
name|IndexSortConfig
block|{
comment|/**      * The list of field names      */
DECL|field|INDEX_SORT_FIELD_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|INDEX_SORT_FIELD_SETTING
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"index.sort.field"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|IndexScope
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Final
argument_list|)
decl_stmt|;
comment|/**      * The {@link SortOrder} for each specified sort field (ie.<b>asc</b> or<b>desc</b>).      */
DECL|field|INDEX_SORT_ORDER_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|List
argument_list|<
name|SortOrder
argument_list|>
argument_list|>
name|INDEX_SORT_ORDER_SETTING
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"index.sort.order"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|IndexSortConfig
operator|::
name|parseOrderMode
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|IndexScope
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Final
argument_list|)
decl_stmt|;
comment|/**      * The {@link MultiValueMode} for each specified sort field (ie.<b>max</b> or<b>min</b>).      */
DECL|field|INDEX_SORT_MODE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|List
argument_list|<
name|MultiValueMode
argument_list|>
argument_list|>
name|INDEX_SORT_MODE_SETTING
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"index.sort.mode"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|IndexSortConfig
operator|::
name|parseMultiValueMode
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|IndexScope
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Final
argument_list|)
decl_stmt|;
comment|/**      * The missing value for each specified sort field (ie.<b>_first</b> or<b>_last</b>)      */
DECL|field|INDEX_SORT_MISSING_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|INDEX_SORT_MISSING_SETTING
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"index.sort.missing"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|IndexSortConfig
operator|::
name|validateMissingValue
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|IndexScope
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Final
argument_list|)
decl_stmt|;
DECL|method|validateMissingValue
specifier|private
specifier|static
name|String
name|validateMissingValue
parameter_list|(
name|String
name|missing
parameter_list|)
block|{
if|if
condition|(
literal|"_last"
operator|.
name|equals
argument_list|(
name|missing
argument_list|)
operator|==
literal|false
operator|&&
literal|"_first"
operator|.
name|equals
argument_list|(
name|missing
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal missing value:["
operator|+
name|missing
operator|+
literal|"], "
operator|+
literal|"must be one of [_last, _first]"
argument_list|)
throw|;
block|}
return|return
name|missing
return|;
block|}
DECL|method|parseOrderMode
specifier|private
specifier|static
name|SortOrder
name|parseOrderMode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|SortOrder
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal sort order:"
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
DECL|method|parseMultiValueMode
specifier|private
specifier|static
name|MultiValueMode
name|parseMultiValueMode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|MultiValueMode
name|mode
init|=
name|MultiValueMode
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
name|MultiValueMode
operator|.
name|MAX
operator|&&
name|mode
operator|!=
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal index sort mode:["
operator|+
name|mode
operator|+
literal|"], "
operator|+
literal|"must be one of ["
operator|+
name|MultiValueMode
operator|.
name|MAX
operator|+
literal|", "
operator|+
name|MultiValueMode
operator|.
name|MIN
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|mode
return|;
block|}
comment|// visible for tests
DECL|field|sortSpecs
specifier|final
name|FieldSortSpec
index|[]
name|sortSpecs
decl_stmt|;
DECL|method|IndexSortConfig
specifier|public
name|IndexSortConfig
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|)
block|{
specifier|final
name|Settings
name|settings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|INDEX_SORT_FIELD_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|this
operator|.
name|sortSpecs
operator|=
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
parameter_list|(
name|name
parameter_list|)
lambda|->
operator|new
name|FieldSortSpec
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|FieldSortSpec
index|[]
operator|::
operator|new
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortSpecs
operator|.
name|length
operator|>
literal|0
operator|&&
name|indexSettings
operator|.
name|getIndexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1
argument_list|)
condition|)
block|{
comment|/**              * This index might be assigned to a node where the index sorting feature is not available              * (ie. versions prior to {@link Version.V_6_0_0_alpha1_UNRELEASED}) so we must fail here rather than later.              */
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unsupported index.version.created:"
operator|+
name|indexSettings
operator|.
name|getIndexVersionCreated
argument_list|()
operator|+
literal|", can't set index.sort on versions prior to "
operator|+
name|Version
operator|.
name|V_6_0_0_alpha1
argument_list|)
throw|;
block|}
if|if
condition|(
name|INDEX_SORT_ORDER_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|SortOrder
argument_list|>
name|orders
init|=
name|INDEX_SORT_ORDER_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|orders
operator|.
name|size
argument_list|()
operator|!=
name|sortSpecs
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"index.sort.field:"
operator|+
name|fields
operator|+
literal|" index.sort.order:"
operator|+
name|orders
operator|.
name|toString
argument_list|()
operator|+
literal|", size mismatch"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortSpecs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sortSpecs
index|[
name|i
index|]
operator|.
name|order
operator|=
name|orders
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|INDEX_SORT_MODE_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|MultiValueMode
argument_list|>
name|modes
init|=
name|INDEX_SORT_MODE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|modes
operator|.
name|size
argument_list|()
operator|!=
name|sortSpecs
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"index.sort.field:"
operator|+
name|fields
operator|+
literal|" index.sort.mode:"
operator|+
name|modes
operator|+
literal|", size mismatch"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortSpecs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sortSpecs
index|[
name|i
index|]
operator|.
name|mode
operator|=
name|modes
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|INDEX_SORT_MISSING_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|missingValues
init|=
name|INDEX_SORT_MISSING_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|missingValues
operator|.
name|size
argument_list|()
operator|!=
name|sortSpecs
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"index.sort.field:"
operator|+
name|fields
operator|+
literal|" index.sort.missing:"
operator|+
name|missingValues
operator|+
literal|", size mismatch"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortSpecs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sortSpecs
index|[
name|i
index|]
operator|.
name|missingValue
operator|=
name|missingValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns true if the index should be sorted      */
DECL|method|hasIndexSort
specifier|public
name|boolean
name|hasIndexSort
parameter_list|()
block|{
return|return
name|sortSpecs
operator|.
name|length
operator|>
literal|0
return|;
block|}
comment|/**      * Builds the {@link Sort} order from the settings for this index      * or returns null if this index has no sort.      */
DECL|method|buildIndexSort
specifier|public
name|Sort
name|buildIndexSort
parameter_list|(
name|Function
argument_list|<
name|String
argument_list|,
name|MappedFieldType
argument_list|>
name|fieldTypeLookup
parameter_list|,
name|Function
argument_list|<
name|MappedFieldType
argument_list|,
name|IndexFieldData
argument_list|<
name|?
argument_list|>
argument_list|>
name|fieldDataLookup
parameter_list|)
block|{
if|if
condition|(
name|hasIndexSort
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|SortField
index|[]
name|sortFields
init|=
operator|new
name|SortField
index|[
name|sortSpecs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortSpecs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FieldSortSpec
name|sortSpec
init|=
name|sortSpecs
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|MappedFieldType
name|ft
init|=
name|fieldTypeLookup
operator|.
name|apply
argument_list|(
name|sortSpec
operator|.
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown index sort field:["
operator|+
name|sortSpec
operator|.
name|field
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|boolean
name|reverse
init|=
name|sortSpec
operator|.
name|order
operator|==
literal|null
condition|?
literal|false
else|:
operator|(
name|sortSpec
operator|.
name|order
operator|==
name|SortOrder
operator|.
name|DESC
operator|)
decl_stmt|;
name|MultiValueMode
name|mode
init|=
name|sortSpec
operator|.
name|mode
decl_stmt|;
if|if
condition|(
name|mode
operator|==
literal|null
condition|)
block|{
name|mode
operator|=
name|reverse
condition|?
name|MultiValueMode
operator|.
name|MAX
else|:
name|MultiValueMode
operator|.
name|MIN
expr_stmt|;
block|}
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|fieldData
decl_stmt|;
try|try
block|{
name|fieldData
operator|=
name|fieldDataLookup
operator|.
name|apply
argument_list|(
name|ft
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"docvalues not found for index sort field:["
operator|+
name|sortSpec
operator|.
name|field
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"docvalues not found for index sort field:["
operator|+
name|sortSpec
operator|.
name|field
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|sortFields
index|[
name|i
index|]
operator|=
name|fieldData
operator|.
name|sortField
argument_list|(
name|sortSpec
operator|.
name|missingValue
argument_list|,
name|mode
argument_list|,
literal|null
argument_list|,
name|reverse
argument_list|)
expr_stmt|;
name|validateIndexSortField
argument_list|(
name|sortFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Sort
argument_list|(
name|sortFields
argument_list|)
return|;
block|}
DECL|method|validateIndexSortField
specifier|private
name|void
name|validateIndexSortField
parameter_list|(
name|SortField
name|sortField
parameter_list|)
block|{
name|SortField
operator|.
name|Type
name|type
init|=
name|getSortFieldType
argument_list|(
name|sortField
argument_list|)
decl_stmt|;
if|if
condition|(
name|ALLOWED_INDEX_SORT_TYPES
operator|.
name|contains
argument_list|(
name|type
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid index sort field:["
operator|+
name|sortField
operator|.
name|getField
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|class|FieldSortSpec
specifier|static
class|class
name|FieldSortSpec
block|{
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|order
name|SortOrder
name|order
decl_stmt|;
DECL|field|mode
name|MultiValueMode
name|mode
decl_stmt|;
DECL|field|missingValue
name|String
name|missingValue
decl_stmt|;
DECL|method|FieldSortSpec
name|FieldSortSpec
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
block|}
comment|/** We only allow index sorting on these types */
DECL|field|ALLOWED_INDEX_SORT_TYPES
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|SortField
operator|.
name|Type
argument_list|>
name|ALLOWED_INDEX_SORT_TYPES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|SortField
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|DOUBLE
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
DECL|method|getSortFieldType
specifier|static
name|SortField
operator|.
name|Type
name|getSortFieldType
parameter_list|(
name|SortField
name|sortField
parameter_list|)
block|{
if|if
condition|(
name|sortField
operator|instanceof
name|SortedSetSortField
condition|)
block|{
return|return
name|SortField
operator|.
name|Type
operator|.
name|STRING
return|;
block|}
elseif|else
if|if
condition|(
name|sortField
operator|instanceof
name|SortedNumericSortField
condition|)
block|{
return|return
operator|(
operator|(
name|SortedNumericSortField
operator|)
name|sortField
operator|)
operator|.
name|getNumericType
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|sortField
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

