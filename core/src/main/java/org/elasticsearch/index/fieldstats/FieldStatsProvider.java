begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fieldstats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fieldstats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|FieldStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|IndexConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|IndexConstraint
operator|.
name|Comparison
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|IndexConstraint
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|DateMathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Searcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|DateFieldMapper
operator|.
name|DateFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ip
operator|.
name|IpFieldMapper
operator|.
name|IpFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Provides a service for gettings the {@link FieldStats} for a given field from  * the index.  */
end_comment

begin_class
DECL|class|FieldStatsProvider
specifier|public
class|class
name|FieldStatsProvider
block|{
DECL|field|searcher
specifier|private
specifier|final
name|Searcher
name|searcher
decl_stmt|;
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
comment|/**      * @param searcher      *            the {@link Searcher}to use when retrieving the      *            {@link FieldStats}      * @param mapperService      *            the {@link MapperService}      */
DECL|method|FieldStatsProvider
specifier|public
name|FieldStatsProvider
parameter_list|(
name|Searcher
name|searcher
parameter_list|,
name|MapperService
name|mapperService
parameter_list|)
block|{
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
block|}
comment|/**      * @param field      *            the name of the field to return {@link FieldStats} for.      * @return a {@link FieldStats} object for the given field      * @throws IOException      *             if the field statistics cannot be read      */
DECL|method|get
specifier|public
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|FieldStats
argument_list|<
name|T
argument_list|>
name|get
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|MappedFieldType
name|mappedFieldType
init|=
name|mapperService
operator|.
name|fullName
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappedFieldType
operator|!=
literal|null
condition|)
block|{
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|reader
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
return|return
name|mappedFieldType
operator|.
name|stats
argument_list|(
name|terms
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param fieldName      *            the fieldName to check      * @param from      *            the minimum value for the query      * @param to      *            the maximum value for the query      * @param includeLower      *            whether the from value is inclusive      * @param includeUpper      *            whether the to value is inclusive      * @param timeZone      *            the timeZone to use for date fields      * @param dateMathParser      *            the {@link DateMathParser} to use for date fields      * @return A {@link Relation} indicating the overlap of the range of terms      *         for the field with the query range. This method will return:      *<ul>      *<li>{@link Relation#WITHIN} if the range of terms for the field      *         in the shard is completely within the query range</li>      *<li>{@link Relation#DISJOINT} if the range of terms for the field      *         in the shard is completely outside the query range</li>      *<li>{@link Relation#INTERSECTS} if the range of terms for the      *         field in the shard intersects with the query range</li>      *</ul>      * @throws IOException      *             if the index cannot be read      */
DECL|method|isFieldWithinQuery
specifier|public
name|Relation
name|isFieldWithinQuery
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
name|from
parameter_list|,
name|Object
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|,
name|DateMathParser
name|dateMathParser
parameter_list|)
throws|throws
name|IOException
block|{
name|MappedFieldType
name|mappedFieldType
init|=
name|mapperService
operator|.
name|fullName
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|FieldStats
argument_list|<
name|?
argument_list|>
name|fieldStats
init|=
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldStats
operator|==
literal|null
condition|)
block|{
comment|// No fieldStats for the field so the field doesn't exist on
comment|// this shard, so relation is DISJOINT
return|return
name|Relation
operator|.
name|DISJOINT
return|;
block|}
else|else
block|{
comment|// Convert the from and to values to Strings so they can be used
comment|// in the IndexConstraints. Since DateTime is represented as a
comment|// Long field in Lucene we need to use the millisecond value of
comment|// the DateTime in that case
name|String
name|fromString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mappedFieldType
operator|instanceof
name|DateFieldType
condition|)
block|{
name|long
name|millis
init|=
operator|(
operator|(
name|DateFieldType
operator|)
name|mappedFieldType
operator|)
operator|.
name|parseToMilliseconds
argument_list|(
name|from
argument_list|,
operator|!
name|includeLower
argument_list|,
name|timeZone
argument_list|,
name|dateMathParser
argument_list|)
decl_stmt|;
name|fromString
operator|=
name|fieldStats
operator|.
name|stringValueOf
argument_list|(
name|millis
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mappedFieldType
operator|instanceof
name|IpFieldType
condition|)
block|{
if|if
condition|(
name|from
operator|instanceof
name|BytesRef
condition|)
block|{
name|from
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|from
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
name|long
name|ipAsLong
init|=
operator|(
operator|(
name|IpFieldType
operator|)
name|mappedFieldType
operator|)
operator|.
name|value
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|fromString
operator|=
name|fieldStats
operator|.
name|stringValueOf
argument_list|(
name|ipAsLong
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fromString
operator|=
name|fieldStats
operator|.
name|stringValueOf
argument_list|(
name|from
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|toString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|to
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mappedFieldType
operator|instanceof
name|DateFieldType
condition|)
block|{
name|long
name|millis
init|=
operator|(
operator|(
name|DateFieldType
operator|)
name|mappedFieldType
operator|)
operator|.
name|parseToMilliseconds
argument_list|(
name|to
argument_list|,
name|includeUpper
argument_list|,
name|timeZone
argument_list|,
name|dateMathParser
argument_list|)
decl_stmt|;
name|toString
operator|=
name|fieldStats
operator|.
name|stringValueOf
argument_list|(
name|millis
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mappedFieldType
operator|instanceof
name|IpFieldType
condition|)
block|{
if|if
condition|(
name|to
operator|instanceof
name|BytesRef
condition|)
block|{
name|to
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|to
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
name|long
name|ipAsLong
init|=
operator|(
operator|(
name|IpFieldType
operator|)
name|mappedFieldType
operator|)
operator|.
name|value
argument_list|(
name|to
argument_list|)
decl_stmt|;
name|toString
operator|=
name|fieldStats
operator|.
name|stringValueOf
argument_list|(
name|ipAsLong
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toString
operator|=
name|fieldStats
operator|.
name|stringValueOf
argument_list|(
name|to
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|from
operator|==
literal|null
operator|||
name|fieldStats
operator|.
name|match
argument_list|(
operator|new
name|IndexConstraint
argument_list|(
name|fieldName
argument_list|,
name|Property
operator|.
name|MIN
argument_list|,
name|includeLower
condition|?
name|Comparison
operator|.
name|GTE
else|:
name|Comparison
operator|.
name|GT
argument_list|,
name|fromString
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|to
operator|==
literal|null
operator|||
name|fieldStats
operator|.
name|match
argument_list|(
operator|new
name|IndexConstraint
argument_list|(
name|fieldName
argument_list|,
name|Property
operator|.
name|MAX
argument_list|,
name|includeUpper
condition|?
name|Comparison
operator|.
name|LTE
else|:
name|Comparison
operator|.
name|LT
argument_list|,
name|toString
argument_list|)
argument_list|)
operator|)
condition|)
block|{
comment|// If the min and max terms for the field are both within
comment|// the query range then all documents will match so relation is
comment|// WITHIN
return|return
name|Relation
operator|.
name|WITHIN
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|to
operator|!=
literal|null
operator|&&
name|fieldStats
operator|.
name|match
argument_list|(
operator|new
name|IndexConstraint
argument_list|(
name|fieldName
argument_list|,
name|Property
operator|.
name|MIN
argument_list|,
name|includeUpper
condition|?
name|Comparison
operator|.
name|GT
else|:
name|Comparison
operator|.
name|GTE
argument_list|,
name|toString
argument_list|)
argument_list|)
operator|)
operator|||
operator|(
name|from
operator|!=
literal|null
operator|&&
name|fieldStats
operator|.
name|match
argument_list|(
operator|new
name|IndexConstraint
argument_list|(
name|fieldName
argument_list|,
name|Property
operator|.
name|MAX
argument_list|,
name|includeLower
condition|?
name|Comparison
operator|.
name|LT
else|:
name|Comparison
operator|.
name|LTE
argument_list|,
name|fromString
argument_list|)
argument_list|)
operator|)
condition|)
block|{
comment|// If the min and max terms are both outside the query range
comment|// then no document will match so relation is DISJOINT (N.B.
comment|// since from<= to we only need
comment|// to check one bould for each side of the query range)
return|return
name|Relation
operator|.
name|DISJOINT
return|;
block|}
block|}
comment|// Range of terms doesn't match any of the constraints so must INTERSECT
return|return
name|Relation
operator|.
name|INTERSECTS
return|;
block|}
comment|/**      * An enum used to describe the relation between the range of terms in a      * shard when compared with a query range      */
DECL|enum|Relation
specifier|public
specifier|static
enum|enum
name|Relation
block|{
DECL|enum constant|WITHIN
DECL|enum constant|INTERSECTS
DECL|enum constant|DISJOINT
name|WITHIN
block|,
name|INTERSECTS
block|,
name|DISJOINT
block|;     }
block|}
end_class

end_unit

