begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.seqno
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A utility class for handling sequence numbers.  */
end_comment

begin_class
DECL|class|SequenceNumbers
specifier|public
class|class
name|SequenceNumbers
block|{
DECL|field|LOCAL_CHECKPOINT_KEY
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_CHECKPOINT_KEY
init|=
literal|"local_checkpoint"
decl_stmt|;
DECL|field|MAX_SEQ_NO
specifier|public
specifier|static
specifier|final
name|String
name|MAX_SEQ_NO
init|=
literal|"max_seq_no"
decl_stmt|;
comment|/**      * Reads the sequence number stats from the commit data (maximum sequence number and local checkpoint) and uses the specified global      * checkpoint.      *      * @param globalCheckpoint the global checkpoint to use      * @param commitData       the commit data      * @return the sequence number stats      */
DECL|method|loadSeqNoStatsFromLuceneCommit
specifier|public
specifier|static
name|SeqNoStats
name|loadSeqNoStatsFromLuceneCommit
parameter_list|(
specifier|final
name|long
name|globalCheckpoint
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|commitData
parameter_list|)
block|{
name|long
name|maxSeqNo
init|=
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
decl_stmt|;
name|long
name|localCheckpoint
init|=
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|commitData
control|)
block|{
specifier|final
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|SequenceNumbers
operator|.
name|LOCAL_CHECKPOINT_KEY
argument_list|)
condition|)
block|{
assert|assert
name|localCheckpoint
operator|==
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
operator|:
name|localCheckpoint
assert|;
name|localCheckpoint
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|SequenceNumbers
operator|.
name|MAX_SEQ_NO
argument_list|)
condition|)
block|{
assert|assert
name|maxSeqNo
operator|==
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
operator|:
name|maxSeqNo
assert|;
name|maxSeqNo
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SeqNoStats
argument_list|(
name|maxSeqNo
argument_list|,
name|localCheckpoint
argument_list|,
name|globalCheckpoint
argument_list|)
return|;
block|}
comment|/**      * Compute the minimum of the given current minimum sequence number and the specified sequence number, accounting for the fact that the      * current minimum sequence number could be {@link SequenceNumbersService#NO_OPS_PERFORMED} or      * {@link SequenceNumbersService#UNASSIGNED_SEQ_NO}. When the current minimum sequence number is not      * {@link SequenceNumbersService#NO_OPS_PERFORMED} nor {@link SequenceNumbersService#UNASSIGNED_SEQ_NO}, the specified sequence number      * must not be {@link SequenceNumbersService#UNASSIGNED_SEQ_NO}.      *      * @param minSeqNo the current minimum sequence number      * @param seqNo the specified sequence number      * @return the new minimum sequence number      */
DECL|method|min
specifier|public
specifier|static
name|long
name|min
parameter_list|(
specifier|final
name|long
name|minSeqNo
parameter_list|,
specifier|final
name|long
name|seqNo
parameter_list|)
block|{
if|if
condition|(
name|minSeqNo
operator|==
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
condition|)
block|{
return|return
name|seqNo
return|;
block|}
elseif|else
if|if
condition|(
name|minSeqNo
operator|==
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
condition|)
block|{
return|return
name|seqNo
return|;
block|}
else|else
block|{
if|if
condition|(
name|seqNo
operator|==
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sequence number must be assigned"
argument_list|)
throw|;
block|}
return|return
name|Math
operator|.
name|min
argument_list|(
name|minSeqNo
argument_list|,
name|seqNo
argument_list|)
return|;
block|}
block|}
comment|/**      * Compute the maximum of the given current maximum sequence number and the specified sequence number, accounting for the fact that the      * current maximum sequence number could be {@link SequenceNumbersService#NO_OPS_PERFORMED} or      * {@link SequenceNumbersService#UNASSIGNED_SEQ_NO}. When the current maximum sequence number is not      * {@link SequenceNumbersService#NO_OPS_PERFORMED} nor {@link SequenceNumbersService#UNASSIGNED_SEQ_NO}, the specified sequence number      * must not be {@link SequenceNumbersService#UNASSIGNED_SEQ_NO}.      *      * @param maxSeqNo the current maximum sequence number      * @param seqNo the specified sequence number      * @return the new maximum sequence number      */
DECL|method|max
specifier|public
specifier|static
name|long
name|max
parameter_list|(
specifier|final
name|long
name|maxSeqNo
parameter_list|,
specifier|final
name|long
name|seqNo
parameter_list|)
block|{
if|if
condition|(
name|maxSeqNo
operator|==
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
condition|)
block|{
return|return
name|seqNo
return|;
block|}
elseif|else
if|if
condition|(
name|maxSeqNo
operator|==
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
condition|)
block|{
return|return
name|seqNo
return|;
block|}
else|else
block|{
if|if
condition|(
name|seqNo
operator|==
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sequence number must be assigned"
argument_list|)
throw|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
name|maxSeqNo
argument_list|,
name|seqNo
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

