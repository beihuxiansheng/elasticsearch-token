begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.seqno
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|SeqNoStats
specifier|public
class|class
name|SeqNoStats
implements|implements
name|ToXContent
implements|,
name|Writeable
block|{
DECL|field|SEQ_NO
specifier|private
specifier|static
specifier|final
name|String
name|SEQ_NO
init|=
literal|"seq_no"
decl_stmt|;
DECL|field|MAX_SEQ_NO
specifier|private
specifier|static
specifier|final
name|String
name|MAX_SEQ_NO
init|=
literal|"max"
decl_stmt|;
DECL|field|LOCAL_CHECKPOINT
specifier|private
specifier|static
specifier|final
name|String
name|LOCAL_CHECKPOINT
init|=
literal|"local_checkpoint"
decl_stmt|;
DECL|field|PROTO
specifier|public
specifier|static
specifier|final
name|SeqNoStats
name|PROTO
init|=
operator|new
name|SeqNoStats
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|maxSeqNo
specifier|final
name|long
name|maxSeqNo
decl_stmt|;
DECL|field|localCheckpoint
specifier|final
name|long
name|localCheckpoint
decl_stmt|;
DECL|method|SeqNoStats
specifier|public
name|SeqNoStats
parameter_list|(
name|long
name|maxSeqNo
parameter_list|,
name|long
name|localCheckpoint
parameter_list|)
block|{
name|this
operator|.
name|maxSeqNo
operator|=
name|maxSeqNo
expr_stmt|;
name|this
operator|.
name|localCheckpoint
operator|=
name|localCheckpoint
expr_stmt|;
block|}
DECL|method|SeqNoStats
specifier|public
name|SeqNoStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|in
operator|.
name|readZLong
argument_list|()
argument_list|,
name|in
operator|.
name|readZLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** the maximum sequence number seen so far */
DECL|method|getMaxSeqNo
specifier|public
name|long
name|getMaxSeqNo
parameter_list|()
block|{
return|return
name|maxSeqNo
return|;
block|}
comment|/** the maximum sequence number for which all previous operations (including) have been completed */
DECL|method|getLocalCheckpoint
specifier|public
name|long
name|getLocalCheckpoint
parameter_list|()
block|{
return|return
name|localCheckpoint
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeZLong
argument_list|(
name|maxSeqNo
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeZLong
argument_list|(
name|localCheckpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|SEQ_NO
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MAX_SEQ_NO
argument_list|,
name|maxSeqNo
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|LOCAL_CHECKPOINT
argument_list|,
name|localCheckpoint
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

