begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|StringAndBytesText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ReleasableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapping
operator|.
name|SourceTransform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|AllFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|FieldNamesFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|IdFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|IndexFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|ParentFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|RoutingFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|SourceFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TTLFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TimestampFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|VersionFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|RootObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|DocumentMapper
specifier|public
class|class
name|DocumentMapper
implements|implements
name|ToXContent
block|{
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|rootMappers
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|MetadataFieldMapper
argument_list|>
argument_list|,
name|MetadataFieldMapper
argument_list|>
name|rootMappers
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sourceTransforms
specifier|private
name|List
argument_list|<
name|SourceTransform
argument_list|>
name|sourceTransforms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|indexSettings
specifier|private
specifier|final
name|Settings
name|indexSettings
decl_stmt|;
DECL|field|rootObjectMapper
specifier|private
specifier|final
name|RootObjectMapper
name|rootObjectMapper
decl_stmt|;
DECL|field|meta
specifier|private
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|builderContext
specifier|private
specifier|final
name|Mapper
operator|.
name|BuilderContext
name|builderContext
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|Settings
name|indexSettings
parameter_list|,
name|RootObjectMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|MapperService
name|mapperService
parameter_list|)
block|{
name|this
operator|.
name|indexSettings
operator|=
name|indexSettings
expr_stmt|;
name|this
operator|.
name|builderContext
operator|=
operator|new
name|Mapper
operator|.
name|BuilderContext
argument_list|(
name|indexSettings
argument_list|,
operator|new
name|ContentPath
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootObjectMapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
comment|// TODO: find a cleaner way to handle existing root mappings and using their field type as the default.
comment|// the vast majority of these root mappers only need the existing type for backwards compatibility, since
comment|// the pre 2.0 field type settings could be modified
comment|// UID first so it will be the first stored field to load (so will benefit from "fields: []" early termination
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|UidFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|UidFieldMapper
argument_list|(
name|indexSettings
argument_list|,
name|mapperService
operator|.
name|fullName
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|IdFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|IdFieldMapper
argument_list|(
name|indexSettings
argument_list|,
name|mapperService
operator|.
name|fullName
argument_list|(
name|IdFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|RoutingFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|RoutingFieldMapper
argument_list|(
name|indexSettings
argument_list|,
name|mapperService
operator|.
name|fullName
argument_list|(
name|RoutingFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// add default mappers, order is important (for example analyzer should come before the rest to set context.analyzer)
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|IndexFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|IndexFieldMapper
argument_list|(
name|indexSettings
argument_list|,
name|mapperService
operator|.
name|fullName
argument_list|(
name|IndexFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|SourceFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|SourceFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|TypeFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|TypeFieldMapper
argument_list|(
name|indexSettings
argument_list|,
name|mapperService
operator|.
name|fullName
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|AllFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|AllFieldMapper
argument_list|(
name|indexSettings
argument_list|,
name|mapperService
operator|.
name|fullName
argument_list|(
name|AllFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|TimestampFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|TimestampFieldMapper
argument_list|(
name|indexSettings
argument_list|,
name|mapperService
operator|.
name|fullName
argument_list|(
name|TimestampFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|TTLFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|TTLFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|VersionFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|VersionFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|ParentFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|ParentFieldMapper
argument_list|(
name|indexSettings
argument_list|,
name|mapperService
operator|.
name|fullName
argument_list|(
name|ParentFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|,
comment|/* parent type */
name|builder
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// _field_names last so that it can see all other fields
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|FieldNamesFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|FieldNamesFieldMapper
argument_list|(
name|indexSettings
argument_list|,
name|mapperService
operator|.
name|fullName
argument_list|(
name|FieldNamesFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|meta
specifier|public
name|Builder
name|meta
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
parameter_list|)
block|{
name|this
operator|.
name|meta
operator|=
name|meta
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|MetadataFieldMapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mapper
parameter_list|)
block|{
name|MetadataFieldMapper
name|metadataMapper
init|=
name|mapper
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
decl_stmt|;
name|rootMappers
operator|.
name|put
argument_list|(
name|metadataMapper
operator|.
name|getClass
argument_list|()
argument_list|,
name|metadataMapper
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|transform
specifier|public
name|Builder
name|transform
parameter_list|(
name|ScriptService
name|scriptService
parameter_list|,
name|Script
name|script
parameter_list|)
block|{
name|sourceTransforms
operator|.
name|add
argument_list|(
operator|new
name|ScriptTransform
argument_list|(
name|scriptService
argument_list|,
name|script
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * @deprecated Use {@link #transform(ScriptService, Script)} instead.          */
annotation|@
name|Deprecated
DECL|method|transform
specifier|public
name|Builder
name|transform
parameter_list|(
name|ScriptService
name|scriptService
parameter_list|,
name|String
name|script
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|,
name|String
name|language
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|sourceTransforms
operator|.
name|add
argument_list|(
operator|new
name|ScriptTransform
argument_list|(
name|scriptService
argument_list|,
operator|new
name|Script
argument_list|(
name|script
argument_list|,
name|scriptType
argument_list|,
name|language
argument_list|,
name|parameters
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|DocumentMapper
name|build
parameter_list|(
name|MapperService
name|mapperService
parameter_list|,
name|DocumentMapperParser
name|docMapperParser
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rootObjectMapper
argument_list|,
literal|"Mapper builder must have the root object mapper set"
argument_list|)
expr_stmt|;
return|return
operator|new
name|DocumentMapper
argument_list|(
name|mapperService
argument_list|,
name|indexSettings
argument_list|,
name|docMapperParser
argument_list|,
name|rootObjectMapper
argument_list|,
name|meta
argument_list|,
name|rootMappers
argument_list|,
name|sourceTransforms
argument_list|,
name|mapperService
operator|.
name|mappingLock
argument_list|)
return|;
block|}
block|}
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|typeText
specifier|private
specifier|final
name|StringAndBytesText
name|typeText
decl_stmt|;
DECL|field|mappingSource
specifier|private
specifier|volatile
name|CompressedXContent
name|mappingSource
decl_stmt|;
DECL|field|mapping
specifier|private
specifier|final
name|Mapping
name|mapping
decl_stmt|;
DECL|field|documentParser
specifier|private
specifier|final
name|DocumentParser
name|documentParser
decl_stmt|;
DECL|field|fieldMappers
specifier|private
specifier|volatile
name|DocumentFieldMappers
name|fieldMappers
decl_stmt|;
DECL|field|objectMappers
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectMapper
argument_list|>
name|objectMappers
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
DECL|field|hasNestedObjects
specifier|private
name|boolean
name|hasNestedObjects
init|=
literal|false
decl_stmt|;
DECL|field|mappingWriteLock
specifier|private
specifier|final
name|ReleasableLock
name|mappingWriteLock
decl_stmt|;
DECL|field|mappingLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|mappingLock
decl_stmt|;
DECL|method|DocumentMapper
specifier|public
name|DocumentMapper
parameter_list|(
name|MapperService
name|mapperService
parameter_list|,
annotation|@
name|Nullable
name|Settings
name|indexSettings
parameter_list|,
name|DocumentMapperParser
name|docMapperParser
parameter_list|,
name|RootObjectMapper
name|rootObjectMapper
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|MetadataFieldMapper
argument_list|>
argument_list|,
name|MetadataFieldMapper
argument_list|>
name|rootMappers
parameter_list|,
name|List
argument_list|<
name|SourceTransform
argument_list|>
name|sourceTransforms
parameter_list|,
name|ReentrantReadWriteLock
name|mappingLock
parameter_list|)
block|{
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|rootObjectMapper
operator|.
name|name
argument_list|()
expr_stmt|;
name|this
operator|.
name|typeText
operator|=
operator|new
name|StringAndBytesText
argument_list|(
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
operator|new
name|Mapping
argument_list|(
name|Version
operator|.
name|indexCreated
argument_list|(
name|indexSettings
argument_list|)
argument_list|,
name|rootObjectMapper
argument_list|,
name|rootMappers
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|MetadataFieldMapper
index|[
name|rootMappers
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|sourceTransforms
operator|.
name|toArray
argument_list|(
operator|new
name|SourceTransform
index|[
name|sourceTransforms
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|meta
argument_list|)
expr_stmt|;
name|this
operator|.
name|documentParser
operator|=
operator|new
name|DocumentParser
argument_list|(
name|indexSettings
argument_list|,
name|docMapperParser
argument_list|,
name|this
argument_list|,
operator|new
name|ReleasableLock
argument_list|(
name|mappingLock
operator|.
name|readLock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|mappingWriteLock
operator|=
operator|new
name|ReleasableLock
argument_list|(
name|mappingLock
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|mappingLock
operator|=
name|mappingLock
expr_stmt|;
if|if
condition|(
name|rootMapper
argument_list|(
name|ParentFieldMapper
operator|.
name|class
argument_list|)
operator|.
name|active
argument_list|()
condition|)
block|{
comment|// mark the routing field mapper as required
name|rootMapper
argument_list|(
name|RoutingFieldMapper
operator|.
name|class
argument_list|)
operator|.
name|markAsRequired
argument_list|()
expr_stmt|;
block|}
comment|// collect all the mappers for this type
name|List
argument_list|<
name|ObjectMapper
argument_list|>
name|newObjectMappers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldMapper
argument_list|>
name|newFieldMappers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetadataFieldMapper
name|metadataMapper
range|:
name|this
operator|.
name|mapping
operator|.
name|metadataMappers
control|)
block|{
if|if
condition|(
name|metadataMapper
operator|instanceof
name|FieldMapper
condition|)
block|{
name|newFieldMappers
operator|.
name|add
argument_list|(
name|metadataMapper
argument_list|)
expr_stmt|;
block|}
block|}
name|MapperUtils
operator|.
name|collect
argument_list|(
name|this
operator|.
name|mapping
operator|.
name|root
argument_list|,
name|newObjectMappers
argument_list|,
name|newFieldMappers
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldMappers
operator|=
operator|new
name|DocumentFieldMappers
argument_list|(
name|docMapperParser
operator|.
name|analysisService
argument_list|)
operator|.
name|copyAndAllAll
argument_list|(
name|newFieldMappers
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectMapper
argument_list|>
name|builder
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectMapper
name|objectMapper
range|:
name|newObjectMappers
control|)
block|{
name|ObjectMapper
name|previous
init|=
name|builder
operator|.
name|put
argument_list|(
name|objectMapper
operator|.
name|fullPath
argument_list|()
argument_list|,
name|objectMapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"duplicate key "
operator|+
name|objectMapper
operator|.
name|fullPath
argument_list|()
operator|+
literal|" encountered"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|objectMappers
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|builder
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectMapper
name|objectMapper
range|:
name|newObjectMappers
control|)
block|{
if|if
condition|(
name|objectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
name|hasNestedObjects
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|refreshSource
argument_list|()
expr_stmt|;
block|}
DECL|method|mapping
specifier|public
name|Mapping
name|mapping
parameter_list|()
block|{
return|return
name|mapping
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|typeText
specifier|public
name|Text
name|typeText
parameter_list|()
block|{
return|return
name|this
operator|.
name|typeText
return|;
block|}
DECL|method|meta
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
parameter_list|()
block|{
return|return
name|mapping
operator|.
name|meta
return|;
block|}
DECL|method|mappingSource
specifier|public
name|CompressedXContent
name|mappingSource
parameter_list|()
block|{
return|return
name|this
operator|.
name|mappingSource
return|;
block|}
DECL|method|root
specifier|public
name|RootObjectMapper
name|root
parameter_list|()
block|{
return|return
name|mapping
operator|.
name|root
return|;
block|}
DECL|method|uidMapper
specifier|public
name|UidFieldMapper
name|uidMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|UidFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|rootMapper
specifier|public
parameter_list|<
name|T
extends|extends
name|MetadataFieldMapper
parameter_list|>
name|T
name|rootMapper
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|mapping
operator|.
name|rootMapper
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|indexMapper
specifier|public
name|IndexFieldMapper
name|indexMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|IndexFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|typeMapper
specifier|public
name|TypeFieldMapper
name|typeMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|TypeFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|sourceMapper
specifier|public
name|SourceFieldMapper
name|sourceMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|SourceFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|allFieldMapper
specifier|public
name|AllFieldMapper
name|allFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|AllFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|idFieldMapper
specifier|public
name|IdFieldMapper
name|idFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|IdFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|routingFieldMapper
specifier|public
name|RoutingFieldMapper
name|routingFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|RoutingFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|parentFieldMapper
specifier|public
name|ParentFieldMapper
name|parentFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|ParentFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|timestampFieldMapper
specifier|public
name|TimestampFieldMapper
name|timestampFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|TimestampFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|TTLFieldMapper
specifier|public
name|TTLFieldMapper
name|TTLFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|TTLFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|IndexFieldMapper
specifier|public
name|IndexFieldMapper
name|IndexFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|IndexFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|typeFilter
specifier|public
name|Query
name|typeFilter
parameter_list|()
block|{
return|return
name|typeMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|termQuery
argument_list|(
name|type
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|hasNestedObjects
specifier|public
name|boolean
name|hasNestedObjects
parameter_list|()
block|{
return|return
name|hasNestedObjects
return|;
block|}
DECL|method|mappers
specifier|public
name|DocumentFieldMappers
name|mappers
parameter_list|()
block|{
return|return
name|this
operator|.
name|fieldMappers
return|;
block|}
DECL|method|objectMappers
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectMapper
argument_list|>
name|objectMappers
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectMappers
return|;
block|}
DECL|method|parse
specifier|public
name|ParsedDocument
name|parse
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|BytesReference
name|source
parameter_list|)
throws|throws
name|MapperParsingException
block|{
return|return
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
operator|.
name|id
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
name|ParsedDocument
name|parse
parameter_list|(
name|SourceToParse
name|source
parameter_list|)
throws|throws
name|MapperParsingException
block|{
return|return
name|documentParser
operator|.
name|parseDocument
argument_list|(
name|source
argument_list|)
return|;
block|}
comment|/**      * Returns the best nested {@link ObjectMapper} instances that is in the scope of the specified nested docId.      */
DECL|method|findNestedObjectMapper
specifier|public
name|ObjectMapper
name|findNestedObjectMapper
parameter_list|(
name|int
name|nestedDocId
parameter_list|,
name|SearchContext
name|sc
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|nestedObjectMapper
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ObjectMapper
name|objectMapper
range|:
name|objectMappers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|objectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Filter
name|filter
init|=
name|objectMapper
operator|.
name|nestedTypeFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// We can pass down 'null' as acceptedDocs, because nestedDocId is a doc to be fetched and
comment|// therefor is guaranteed to be a live doc.
name|DocIdSet
name|nestedTypeSet
init|=
name|filter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|nestedTypeSet
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|DocIdSetIterator
name|iterator
init|=
name|nestedTypeSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|iterator
operator|.
name|advance
argument_list|(
name|nestedDocId
argument_list|)
operator|==
name|nestedDocId
condition|)
block|{
if|if
condition|(
name|nestedObjectMapper
operator|==
literal|null
condition|)
block|{
name|nestedObjectMapper
operator|=
name|objectMapper
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|nestedObjectMapper
operator|.
name|fullPath
argument_list|()
operator|.
name|length
argument_list|()
operator|<
name|objectMapper
operator|.
name|fullPath
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|nestedObjectMapper
operator|=
name|objectMapper
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|nestedObjectMapper
return|;
block|}
comment|/**      * Returns the parent {@link ObjectMapper} instance of the specified object mapper or<code>null</code> if there      * isn't any.      */
comment|// TODO: We should add: ObjectMapper#getParentObjectMapper()
DECL|method|findParentObjectMapper
specifier|public
name|ObjectMapper
name|findParentObjectMapper
parameter_list|(
name|ObjectMapper
name|objectMapper
parameter_list|)
block|{
name|int
name|indexOfLastDot
init|=
name|objectMapper
operator|.
name|fullPath
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOfLastDot
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|parentNestObjectPath
init|=
name|objectMapper
operator|.
name|fullPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfLastDot
argument_list|)
decl_stmt|;
return|return
name|objectMappers
argument_list|()
operator|.
name|get
argument_list|(
name|parentNestObjectPath
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Transform the source when it is expressed as a map.  This is public so it can be transformed the source is loaded.      * @param sourceAsMap source to transform.  This may be mutated by the script.      * @return transformed version of transformMe.  This may actually be the same object as sourceAsMap      */
DECL|method|transformSourceAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|transformSourceAsMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
parameter_list|)
block|{
return|return
name|DocumentParser
operator|.
name|transformSourceAsMap
argument_list|(
name|mapping
argument_list|,
name|sourceAsMap
argument_list|)
return|;
block|}
DECL|method|isParent
specifier|public
name|boolean
name|isParent
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|mapperService
operator|.
name|getParentTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|addMappers
specifier|private
name|void
name|addMappers
parameter_list|(
name|Collection
argument_list|<
name|ObjectMapper
argument_list|>
name|objectMappers
parameter_list|,
name|Collection
argument_list|<
name|FieldMapper
argument_list|>
name|fieldMappers
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
assert|assert
name|mappingLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
assert|;
comment|// first ensure we don't have any incompatible new fields
name|mapperService
operator|.
name|checkNewMappersCompatibility
argument_list|(
name|objectMappers
argument_list|,
name|fieldMappers
argument_list|,
name|updateAllTypes
argument_list|)
expr_stmt|;
comment|// update mappers for this document type
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectMapper
argument_list|>
name|builder
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|objectMappers
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectMapper
name|objectMapper
range|:
name|objectMappers
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|objectMapper
operator|.
name|fullPath
argument_list|()
argument_list|,
name|objectMapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
name|hasNestedObjects
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|this
operator|.
name|objectMappers
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldMappers
operator|=
name|this
operator|.
name|fieldMappers
operator|.
name|copyAndAllAll
argument_list|(
name|fieldMappers
argument_list|)
expr_stmt|;
comment|// finally update for the entire index
name|mapperService
operator|.
name|addMappers
argument_list|(
name|objectMappers
argument_list|,
name|fieldMappers
argument_list|)
expr_stmt|;
block|}
DECL|method|merge
specifier|public
name|MergeResult
name|merge
parameter_list|(
name|Mapping
name|mapping
parameter_list|,
name|boolean
name|simulate
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|mappingWriteLock
operator|.
name|acquire
argument_list|()
init|)
block|{
specifier|final
name|MergeResult
name|mergeResult
init|=
operator|new
name|MergeResult
argument_list|(
name|simulate
argument_list|,
name|updateAllTypes
argument_list|)
decl_stmt|;
name|this
operator|.
name|mapping
operator|.
name|merge
argument_list|(
name|mapping
argument_list|,
name|mergeResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|simulate
operator|==
literal|false
condition|)
block|{
name|addMappers
argument_list|(
name|mergeResult
operator|.
name|getNewObjectMappers
argument_list|()
argument_list|,
name|mergeResult
operator|.
name|getNewFieldMappers
argument_list|()
argument_list|,
name|updateAllTypes
argument_list|)
expr_stmt|;
name|refreshSource
argument_list|()
expr_stmt|;
block|}
return|return
name|mergeResult
return|;
block|}
block|}
DECL|method|refreshSource
specifier|private
name|void
name|refreshSource
parameter_list|()
throws|throws
name|ElasticsearchGenerationException
block|{
try|try
block|{
name|mappingSource
operator|=
operator|new
name|CompressedXContent
argument_list|(
name|this
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchGenerationException
argument_list|(
literal|"failed to serialize source for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|documentParser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mapping
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/**      * Script based source transformation.      */
DECL|class|ScriptTransform
specifier|private
specifier|static
class|class
name|ScriptTransform
implements|implements
name|SourceTransform
block|{
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
comment|/**          * The script to transform the source document before indexing.          */
DECL|field|script
specifier|private
specifier|final
name|Script
name|script
decl_stmt|;
DECL|method|ScriptTransform
specifier|public
name|ScriptTransform
parameter_list|(
name|ScriptService
name|scriptService
parameter_list|,
name|Script
name|script
parameter_list|)
block|{
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|transformSourceAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|transformSourceAsMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
parameter_list|)
block|{
try|try
block|{
comment|// We use the ctx variable and the _source name to be consistent with the update api.
name|ExecutableScript
name|executable
init|=
name|scriptService
operator|.
name|executable
argument_list|(
name|script
argument_list|,
name|ScriptContext
operator|.
name|Standard
operator|.
name|MAPPING
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|put
argument_list|(
literal|"_source"
argument_list|,
name|sourceAsMap
argument_list|)
expr_stmt|;
name|executable
operator|.
name|setNextVar
argument_list|(
literal|"ctx"
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|executable
operator|.
name|run
argument_list|()
expr_stmt|;
name|ctx
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|executable
operator|.
name|unwrap
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ctx
operator|.
name|get
argument_list|(
literal|"_source"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to execute script"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|script
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

