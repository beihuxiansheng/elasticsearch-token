begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.core
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ContentPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MergeMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MergeResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|AllFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityLookupService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
operator|.
name|DOC_VALUES
import|;
end_import

begin_class
DECL|class|AbstractFieldMapper
specifier|public
specifier|abstract
class|class
name|AbstractFieldMapper
implements|implements
name|FieldMapper
block|{
DECL|class|Defaults
specifier|public
specifier|static
class|class
name|Defaults
block|{
DECL|field|FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|MappedFieldType
name|FIELD_TYPE
init|=
operator|new
name|MappedFieldType
argument_list|()
decl_stmt|;
static|static
block|{
name|FIELD_TYPE
operator|.
name|setTokenized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setStored
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setStoreTermVectors
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setOmitNorms
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setBoost
argument_list|(
name|Defaults
operator|.
name|BOOST
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|field|BOOST
specifier|public
specifier|static
specifier|final
name|float
name|BOOST
init|=
literal|1.0f
decl_stmt|;
DECL|field|PATH_TYPE
specifier|public
specifier|static
specifier|final
name|ContentPath
operator|.
name|Type
name|PATH_TYPE
init|=
name|ContentPath
operator|.
name|Type
operator|.
name|FULL
decl_stmt|;
block|}
DECL|class|Builder
specifier|public
specifier|abstract
specifier|static
class|class
name|Builder
parameter_list|<
name|T
extends|extends
name|Builder
parameter_list|,
name|Y
extends|extends
name|AbstractFieldMapper
parameter_list|>
extends|extends
name|Mapper
operator|.
name|Builder
argument_list|<
name|T
argument_list|,
name|Y
argument_list|>
block|{
DECL|field|fieldType
specifier|protected
specifier|final
name|MappedFieldType
name|fieldType
decl_stmt|;
DECL|field|defaultOptions
specifier|private
specifier|final
name|IndexOptions
name|defaultOptions
decl_stmt|;
DECL|field|docValues
specifier|protected
name|Boolean
name|docValues
decl_stmt|;
DECL|field|omitNormsSet
specifier|protected
name|boolean
name|omitNormsSet
init|=
literal|false
decl_stmt|;
DECL|field|indexName
specifier|protected
name|String
name|indexName
decl_stmt|;
DECL|field|includeInAll
specifier|protected
name|Boolean
name|includeInAll
decl_stmt|;
DECL|field|indexOptionsSet
specifier|protected
name|boolean
name|indexOptionsSet
init|=
literal|false
decl_stmt|;
annotation|@
name|Nullable
DECL|field|fieldDataSettings
specifier|protected
name|Settings
name|fieldDataSettings
decl_stmt|;
DECL|field|multiFieldsBuilder
specifier|protected
specifier|final
name|MultiFields
operator|.
name|Builder
name|multiFieldsBuilder
decl_stmt|;
DECL|field|copyTo
specifier|protected
name|CopyTo
name|copyTo
decl_stmt|;
DECL|method|Builder
specifier|protected
name|Builder
parameter_list|(
name|String
name|name
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldType
operator|=
name|fieldType
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|defaultOptions
operator|=
name|fieldType
operator|.
name|indexOptions
argument_list|()
expr_stmt|;
comment|// we have to store it the fieldType is mutable
name|multiFieldsBuilder
operator|=
operator|new
name|MultiFields
operator|.
name|Builder
argument_list|()
expr_stmt|;
block|}
DECL|method|index
specifier|public
name|T
name|index
parameter_list|(
name|boolean
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
condition|)
block|{
if|if
condition|(
name|fieldType
operator|.
name|indexOptions
argument_list|()
operator|==
name|IndexOptions
operator|.
name|NONE
condition|)
block|{
comment|/*                      * the logic here is to reset to the default options only if we are not indexed ie. options are null                      * if the fieldType has a non-null option we are all good it might have been set through a different                      * call.                      */
specifier|final
name|IndexOptions
name|options
init|=
name|getDefaultIndexOption
argument_list|()
decl_stmt|;
assert|assert
name|options
operator|!=
name|IndexOptions
operator|.
name|NONE
operator|:
literal|"default IndexOptions is NONE can't enable indexing"
assert|;
name|fieldType
operator|.
name|setIndexOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fieldType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|getDefaultIndexOption
specifier|protected
name|IndexOptions
name|getDefaultIndexOption
parameter_list|()
block|{
return|return
name|defaultOptions
return|;
block|}
DECL|method|store
specifier|public
name|T
name|store
parameter_list|(
name|boolean
name|store
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setStored
argument_list|(
name|store
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|docValues
specifier|public
name|T
name|docValues
parameter_list|(
name|boolean
name|docValues
parameter_list|)
block|{
name|this
operator|.
name|docValues
operator|=
name|docValues
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|storeTermVectors
specifier|public
name|T
name|storeTermVectors
parameter_list|(
name|boolean
name|termVectors
parameter_list|)
block|{
if|if
condition|(
name|termVectors
condition|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setStoreTermVectors
argument_list|(
name|termVectors
argument_list|)
expr_stmt|;
block|}
comment|// don't set it to false, it is default and might be flipped by a more specific option
return|return
name|builder
return|;
block|}
DECL|method|storeTermVectorOffsets
specifier|public
name|T
name|storeTermVectorOffsets
parameter_list|(
name|boolean
name|termVectorOffsets
parameter_list|)
block|{
if|if
condition|(
name|termVectorOffsets
condition|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setStoreTermVectors
argument_list|(
name|termVectorOffsets
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fieldType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
name|termVectorOffsets
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|storeTermVectorPositions
specifier|public
name|T
name|storeTermVectorPositions
parameter_list|(
name|boolean
name|termVectorPositions
parameter_list|)
block|{
if|if
condition|(
name|termVectorPositions
condition|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setStoreTermVectors
argument_list|(
name|termVectorPositions
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fieldType
operator|.
name|setStoreTermVectorPositions
argument_list|(
name|termVectorPositions
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|storeTermVectorPayloads
specifier|public
name|T
name|storeTermVectorPayloads
parameter_list|(
name|boolean
name|termVectorPayloads
parameter_list|)
block|{
if|if
condition|(
name|termVectorPayloads
condition|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setStoreTermVectors
argument_list|(
name|termVectorPayloads
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fieldType
operator|.
name|setStoreTermVectorPayloads
argument_list|(
name|termVectorPayloads
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|tokenized
specifier|public
name|T
name|tokenized
parameter_list|(
name|boolean
name|tokenized
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setTokenized
argument_list|(
name|tokenized
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|boost
specifier|public
name|T
name|boost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|omitNorms
specifier|public
name|T
name|omitNorms
parameter_list|(
name|boolean
name|omitNorms
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setOmitNorms
argument_list|(
name|omitNorms
argument_list|)
expr_stmt|;
name|this
operator|.
name|omitNormsSet
operator|=
literal|true
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|indexOptions
specifier|public
name|T
name|indexOptions
parameter_list|(
name|IndexOptions
name|indexOptions
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setIndexOptions
argument_list|(
name|indexOptions
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexOptionsSet
operator|=
literal|true
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|indexName
specifier|public
name|T
name|indexName
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|indexAnalyzer
specifier|public
name|T
name|indexAnalyzer
parameter_list|(
name|NamedAnalyzer
name|indexAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setIndexAnalyzer
argument_list|(
name|indexAnalyzer
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|searchAnalyzer
specifier|public
name|T
name|searchAnalyzer
parameter_list|(
name|NamedAnalyzer
name|searchAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setSearchAnalyzer
argument_list|(
name|searchAnalyzer
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|includeInAll
specifier|public
name|T
name|includeInAll
parameter_list|(
name|Boolean
name|includeInAll
parameter_list|)
block|{
name|this
operator|.
name|includeInAll
operator|=
name|includeInAll
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|similarity
specifier|public
name|T
name|similarity
parameter_list|(
name|SimilarityProvider
name|similarity
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setSimilarity
argument_list|(
name|similarity
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|normsLoading
specifier|public
name|T
name|normsLoading
parameter_list|(
name|MappedFieldType
operator|.
name|Loading
name|normsLoading
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setNormsLoading
argument_list|(
name|normsLoading
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|fieldDataSettings
specifier|public
name|T
name|fieldDataSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|fieldDataSettings
operator|=
name|settings
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|nullValue
specifier|public
name|Builder
name|nullValue
parameter_list|(
name|Object
name|nullValue
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|.
name|setNullValue
argument_list|(
name|nullValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|multiFieldPathType
specifier|public
name|T
name|multiFieldPathType
parameter_list|(
name|ContentPath
operator|.
name|Type
name|pathType
parameter_list|)
block|{
name|multiFieldsBuilder
operator|.
name|pathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|addMultiField
specifier|public
name|T
name|addMultiField
parameter_list|(
name|Mapper
operator|.
name|Builder
name|mapperBuilder
parameter_list|)
block|{
name|multiFieldsBuilder
operator|.
name|add
argument_list|(
name|mapperBuilder
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|copyTo
specifier|public
name|T
name|copyTo
parameter_list|(
name|CopyTo
name|copyTo
parameter_list|)
block|{
name|this
operator|.
name|copyTo
operator|=
name|copyTo
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|buildNames
specifier|protected
name|MappedFieldType
operator|.
name|Names
name|buildNames
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MappedFieldType
operator|.
name|Names
argument_list|(
name|name
argument_list|,
name|buildIndexName
argument_list|(
name|context
argument_list|)
argument_list|,
name|buildIndexNameClean
argument_list|(
name|context
argument_list|)
argument_list|,
name|buildFullName
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
DECL|method|buildIndexName
specifier|protected
name|String
name|buildIndexName
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|indexCreatedVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|)
condition|)
block|{
return|return
name|buildFullName
argument_list|(
name|context
argument_list|)
return|;
block|}
name|String
name|actualIndexName
init|=
name|indexName
operator|==
literal|null
condition|?
name|name
else|:
name|indexName
decl_stmt|;
return|return
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathAsText
argument_list|(
name|actualIndexName
argument_list|)
return|;
block|}
DECL|method|buildIndexNameClean
specifier|protected
name|String
name|buildIndexNameClean
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|indexCreatedVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|)
condition|)
block|{
return|return
name|buildFullName
argument_list|(
name|context
argument_list|)
return|;
block|}
return|return
name|indexName
operator|==
literal|null
condition|?
name|name
else|:
name|indexName
return|;
block|}
DECL|method|buildFullName
specifier|protected
name|String
name|buildFullName
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|path
argument_list|()
operator|.
name|fullPathAsText
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|setupFieldType
specifier|protected
name|void
name|setupFieldType
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|fieldType
operator|.
name|setNames
argument_list|(
name|buildNames
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|fieldType
specifier|protected
name|MappedFieldType
name|fieldType
decl_stmt|;
DECL|field|hasDefaultDocValues
specifier|protected
specifier|final
name|boolean
name|hasDefaultDocValues
decl_stmt|;
DECL|field|customFieldDataSettings
specifier|protected
name|Settings
name|customFieldDataSettings
decl_stmt|;
DECL|field|multiFields
specifier|protected
specifier|final
name|MultiFields
name|multiFields
decl_stmt|;
DECL|field|copyTo
specifier|protected
name|CopyTo
name|copyTo
decl_stmt|;
DECL|field|indexCreatedBefore2x
specifier|protected
specifier|final
name|boolean
name|indexCreatedBefore2x
decl_stmt|;
DECL|method|AbstractFieldMapper
specifier|protected
name|AbstractFieldMapper
parameter_list|(
name|MappedFieldType
name|fieldType
parameter_list|,
name|Boolean
name|docValues
parameter_list|,
annotation|@
name|Nullable
name|Settings
name|fieldDataSettings
parameter_list|,
name|Settings
name|indexSettings
parameter_list|)
block|{
name|this
argument_list|(
name|fieldType
argument_list|,
name|docValues
argument_list|,
name|fieldDataSettings
argument_list|,
name|indexSettings
argument_list|,
name|MultiFields
operator|.
name|empty
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AbstractFieldMapper
specifier|protected
name|AbstractFieldMapper
parameter_list|(
name|MappedFieldType
name|fieldType
parameter_list|,
name|Boolean
name|docValues
parameter_list|,
annotation|@
name|Nullable
name|Settings
name|fieldDataSettings
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|MultiFields
name|multiFields
parameter_list|,
name|CopyTo
name|copyTo
parameter_list|)
block|{
assert|assert
name|indexSettings
operator|!=
literal|null
assert|;
name|this
operator|.
name|indexCreatedBefore2x
operator|=
name|Version
operator|.
name|indexCreated
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|)
expr_stmt|;
name|this
operator|.
name|customFieldDataSettings
operator|=
name|fieldDataSettings
expr_stmt|;
name|FieldDataType
name|fieldDataType
decl_stmt|;
if|if
condition|(
name|fieldDataSettings
operator|==
literal|null
condition|)
block|{
name|fieldDataType
operator|=
name|defaultFieldDataType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// create a new field data type, with the default settings as well as the "new ones"
name|fieldDataType
operator|=
operator|new
name|FieldDataType
argument_list|(
name|defaultFieldDataType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|defaultFieldDataType
argument_list|()
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|fieldDataSettings
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: hasDocValues should just be set directly on the field type by callers of this ctor, but
comment|// then we need to eliminate defaultDocValues() (only needed by geo, which needs to be fixed with passing
comment|// doc values setting down to lat/lon) and get rid of specifying doc values in fielddata (which
comment|// complicates whether we can just compare to the default value to know whether to write the setting)
if|if
condition|(
name|docValues
operator|==
literal|null
operator|&&
name|fieldDataType
operator|!=
literal|null
operator|&&
name|FieldDataType
operator|.
name|DOC_VALUES_FORMAT_VALUE
operator|.
name|equals
argument_list|(
name|fieldDataType
operator|.
name|getFormat
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
condition|)
block|{
name|docValues
operator|=
literal|true
expr_stmt|;
block|}
name|hasDefaultDocValues
operator|=
name|docValues
operator|==
literal|null
expr_stmt|;
name|this
operator|.
name|fieldType
operator|=
name|fieldType
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|fieldType
operator|.
name|indexAnalyzer
argument_list|()
operator|==
literal|null
operator|&&
name|fieldType
operator|.
name|tokenized
argument_list|()
operator|==
literal|false
operator|&&
name|fieldType
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
condition|)
block|{
name|this
operator|.
name|fieldType
argument_list|()
operator|.
name|setIndexAnalyzer
argument_list|(
name|Lucene
operator|.
name|KEYWORD_ANALYZER
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldType
argument_list|()
operator|.
name|setSearchAnalyzer
argument_list|(
name|Lucene
operator|.
name|KEYWORD_ANALYZER
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fieldType
argument_list|()
operator|.
name|setHasDocValues
argument_list|(
name|docValues
operator|==
literal|null
condition|?
name|defaultDocValues
argument_list|()
else|:
name|docValues
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldType
argument_list|()
operator|.
name|setFieldDataType
argument_list|(
name|fieldDataType
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldType
argument_list|()
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|this
operator|.
name|multiFields
operator|=
name|multiFields
expr_stmt|;
name|this
operator|.
name|copyTo
operator|=
name|copyTo
expr_stmt|;
block|}
DECL|method|defaultDocValues
specifier|protected
name|boolean
name|defaultDocValues
parameter_list|()
block|{
if|if
condition|(
name|indexCreatedBefore2x
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|fieldType
argument_list|()
operator|.
name|tokenized
argument_list|()
operator|==
literal|false
operator|&&
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
comment|// TODO: cleanup names so Mapper knows about paths, so that it is always clear whether we are using short or full name
return|return
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|shortName
argument_list|()
return|;
block|}
DECL|method|defaultFieldType
specifier|public
specifier|abstract
name|MappedFieldType
name|defaultFieldType
parameter_list|()
function_decl|;
DECL|method|defaultFieldDataType
specifier|public
specifier|abstract
name|FieldDataType
name|defaultFieldDataType
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|MappedFieldType
name|fieldType
parameter_list|()
block|{
return|return
name|fieldType
return|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|CopyTo
name|copyTo
parameter_list|()
block|{
return|return
name|copyTo
return|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
name|parse
parameter_list|(
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|parseCreateField
argument_list|(
name|context
argument_list|,
name|fields
argument_list|)
expr_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|!
name|customBoost
argument_list|()
condition|)
block|{
name|field
operator|.
name|setBoost
argument_list|(
name|fieldType
argument_list|()
operator|.
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"failed to parse ["
operator|+
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|multiFields
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Parse the field value and populate<code>fields</code>.      */
DECL|method|parseCreateField
specifier|protected
specifier|abstract
name|void
name|parseCreateField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Derived classes can override it to specify that boost value is set by derived classes.      */
DECL|method|customBoost
specifier|protected
name|boolean
name|customBoost
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Mapper
argument_list|>
name|iterator
parameter_list|()
block|{
if|if
condition|(
name|multiFields
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
return|return
name|multiFields
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|MergeResult
name|mergeResult
parameter_list|)
throws|throws
name|MergeMappingException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|mergeWith
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|mergedType
init|=
name|mergeWith
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeWith
operator|instanceof
name|AbstractFieldMapper
condition|)
block|{
name|mergedType
operator|=
operator|(
operator|(
name|AbstractFieldMapper
operator|)
name|mergeWith
operator|)
operator|.
name|contentType
argument_list|()
expr_stmt|;
block|}
name|mergeResult
operator|.
name|addConflict
argument_list|(
literal|"mapper ["
operator|+
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
operator|+
literal|"] of different type, current_type ["
operator|+
name|contentType
argument_list|()
operator|+
literal|"], merged_type ["
operator|+
name|mergedType
operator|+
literal|"]"
argument_list|)
expr_stmt|;
comment|// different types, return
return|return;
block|}
name|AbstractFieldMapper
name|fieldMergeWith
init|=
operator|(
name|AbstractFieldMapper
operator|)
name|mergeWith
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|subConflicts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO: just expose list from MergeResult?
name|fieldType
argument_list|()
operator|.
name|validateCompatible
argument_list|(
name|fieldMergeWith
operator|.
name|fieldType
argument_list|()
argument_list|,
name|subConflicts
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|conflict
range|:
name|subConflicts
control|)
block|{
name|mergeResult
operator|.
name|addConflict
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
block|}
name|multiFields
operator|.
name|merge
argument_list|(
name|mergeWith
argument_list|,
name|mergeResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeResult
operator|.
name|simulate
argument_list|()
operator|==
literal|false
operator|&&
name|mergeResult
operator|.
name|hasConflicts
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// apply changeable values
name|this
operator|.
name|fieldType
operator|=
name|fieldMergeWith
operator|.
name|fieldType
argument_list|()
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|fieldType
argument_list|()
operator|.
name|freeze
argument_list|()
expr_stmt|;
if|if
condition|(
name|fieldMergeWith
operator|.
name|customFieldDataSettings
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|fieldMergeWith
operator|.
name|customFieldDataSettings
argument_list|,
name|this
operator|.
name|customFieldDataSettings
argument_list|)
condition|)
block|{
name|this
operator|.
name|customFieldDataSettings
operator|=
name|fieldMergeWith
operator|.
name|customFieldDataSettings
expr_stmt|;
block|}
block|}
name|this
operator|.
name|copyTo
operator|=
name|fieldMergeWith
operator|.
name|copyTo
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|shortName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|includeDefaults
init|=
name|params
operator|.
name|paramAsBoolean
argument_list|(
literal|"include_defaults"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|doXContentBody
argument_list|(
name|builder
argument_list|,
name|includeDefaults
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|doXContentBody
specifier|protected
name|void
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|contentType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexCreatedBefore2x
operator|&&
operator|(
name|includeDefaults
operator|||
operator|!
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|shortName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|originalIndexName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"index_name"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|originalIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|boost
argument_list|()
operator|!=
literal|1.0f
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"boost"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FieldType
name|defaultFieldType
init|=
name|defaultFieldType
argument_list|()
decl_stmt|;
name|boolean
name|indexed
init|=
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
decl_stmt|;
name|boolean
name|defaultIndexed
init|=
name|defaultFieldType
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
decl_stmt|;
if|if
condition|(
name|includeDefaults
operator|||
name|indexed
operator|!=
name|defaultIndexed
operator|||
name|fieldType
argument_list|()
operator|.
name|tokenized
argument_list|()
operator|!=
name|defaultFieldType
operator|.
name|tokenized
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|indexTokenizeOptionToString
argument_list|(
name|indexed
argument_list|,
name|fieldType
argument_list|()
operator|.
name|tokenized
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
operator|!=
name|defaultFieldType
operator|.
name|stored
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doXContentDocValues
argument_list|(
name|builder
argument_list|,
name|includeDefaults
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|storeTermVectors
argument_list|()
operator|!=
name|defaultFieldType
operator|.
name|storeTermVectors
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
name|termVectorOptionsToString
argument_list|(
name|fieldType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|omitNorms
argument_list|()
operator|!=
name|defaultFieldType
operator|.
name|omitNorms
argument_list|()
operator|||
name|fieldType
argument_list|()
operator|.
name|normsLoading
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"norms"
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|omitNorms
argument_list|()
operator|!=
name|defaultFieldType
operator|.
name|omitNorms
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
operator|!
name|fieldType
argument_list|()
operator|.
name|omitNorms
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|normsLoading
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MappedFieldType
operator|.
name|Loading
operator|.
name|KEY
argument_list|,
name|fieldType
argument_list|()
operator|.
name|normsLoading
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|indexed
operator|&&
operator|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|!=
name|defaultFieldType
operator|.
name|indexOptions
argument_list|()
operator|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
name|indexOptionToString
argument_list|(
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doXContentAnalyzers
argument_list|(
name|builder
argument_list|,
name|includeDefaults
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|similarity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"similarity"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|similarity
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeDefaults
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"similarity"
argument_list|,
name|SimilarityLookupService
operator|.
name|DEFAULT_SIMILARITY
argument_list|)
expr_stmt|;
block|}
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|orderedFielddataSettings
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|customFieldDataSettings
operator|!=
literal|null
condition|)
block|{
name|orderedFielddataSettings
operator|.
name|putAll
argument_list|(
name|customFieldDataSettings
operator|.
name|getAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
name|orderedFielddataSettings
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeDefaults
condition|)
block|{
name|orderedFielddataSettings
operator|.
name|putAll
argument_list|(
name|fieldType
argument_list|()
operator|.
name|fieldDataType
argument_list|()
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
name|orderedFielddataSettings
argument_list|)
expr_stmt|;
block|}
name|multiFields
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|copyTo
operator|!=
literal|null
condition|)
block|{
name|copyTo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doXContentAnalyzers
specifier|protected
name|void
name|doXContentAnalyzers
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|includeDefaults
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|==
literal|false
operator|&&
name|fieldType
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doXContentDocValues
specifier|protected
name|void
name|doXContentDocValues
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|includeDefaults
operator|||
name|hasDefaultDocValues
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|DOC_VALUES
argument_list|,
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|indexOptionToString
specifier|protected
specifier|static
name|String
name|indexOptionToString
parameter_list|(
name|IndexOptions
name|indexOption
parameter_list|)
block|{
switch|switch
condition|(
name|indexOption
condition|)
block|{
case|case
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
case|:
return|return
name|TypeParsers
operator|.
name|INDEX_OPTIONS_OFFSETS
return|;
case|case
name|DOCS_AND_FREQS
case|:
return|return
name|TypeParsers
operator|.
name|INDEX_OPTIONS_FREQS
return|;
case|case
name|DOCS_AND_FREQS_AND_POSITIONS
case|:
return|return
name|TypeParsers
operator|.
name|INDEX_OPTIONS_POSITIONS
return|;
case|case
name|DOCS
case|:
return|return
name|TypeParsers
operator|.
name|INDEX_OPTIONS_DOCS
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown IndexOptions ["
operator|+
name|indexOption
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|termVectorOptionsToString
specifier|public
specifier|static
name|String
name|termVectorOptionsToString
parameter_list|(
name|FieldType
name|fieldType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fieldType
operator|.
name|storeTermVectors
argument_list|()
condition|)
block|{
return|return
literal|"no"
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fieldType
operator|.
name|storeTermVectorOffsets
argument_list|()
operator|&&
operator|!
name|fieldType
operator|.
name|storeTermVectorPositions
argument_list|()
condition|)
block|{
return|return
literal|"yes"
return|;
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|.
name|storeTermVectorOffsets
argument_list|()
operator|&&
operator|!
name|fieldType
operator|.
name|storeTermVectorPositions
argument_list|()
condition|)
block|{
return|return
literal|"with_offsets"
return|;
block|}
else|else
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"with"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|.
name|storeTermVectorPositions
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"_positions"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldType
operator|.
name|storeTermVectorOffsets
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"_offsets"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldType
operator|.
name|storeTermVectorPayloads
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"_payloads"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|indexTokenizeOptionToString
specifier|protected
specifier|static
name|String
name|indexTokenizeOptionToString
parameter_list|(
name|boolean
name|indexed
parameter_list|,
name|boolean
name|tokenized
parameter_list|)
block|{
if|if
condition|(
operator|!
name|indexed
condition|)
block|{
return|return
literal|"no"
return|;
block|}
elseif|else
if|if
condition|(
name|tokenized
condition|)
block|{
return|return
literal|"analyzed"
return|;
block|}
else|else
block|{
return|return
literal|"not_analyzed"
return|;
block|}
block|}
DECL|method|contentType
specifier|protected
specifier|abstract
name|String
name|contentType
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|multiFields
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|MultiFields
specifier|public
specifier|static
class|class
name|MultiFields
block|{
DECL|method|empty
specifier|public
specifier|static
name|MultiFields
name|empty
parameter_list|()
block|{
return|return
operator|new
name|MultiFields
argument_list|(
name|Defaults
operator|.
name|PATH_TYPE
argument_list|,
name|ImmutableOpenMap
operator|.
expr|<
name|String
argument_list|,
name|FieldMapper
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|mapperBuilders
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Mapper
operator|.
name|Builder
argument_list|>
name|mapperBuilders
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
DECL|field|pathType
specifier|private
name|ContentPath
operator|.
name|Type
name|pathType
init|=
name|Defaults
operator|.
name|PATH_TYPE
decl_stmt|;
DECL|method|pathType
specifier|public
name|Builder
name|pathType
parameter_list|(
name|ContentPath
operator|.
name|Type
name|pathType
parameter_list|)
block|{
name|this
operator|.
name|pathType
operator|=
name|pathType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|add
specifier|public
name|Builder
name|add
parameter_list|(
name|Mapper
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|mapperBuilders
operator|.
name|put
argument_list|(
name|builder
operator|.
name|name
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|build
specifier|public
name|MultiFields
name|build
parameter_list|(
name|AbstractFieldMapper
operator|.
name|Builder
name|mainFieldBuilder
parameter_list|,
name|BuilderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|pathType
operator|==
name|Defaults
operator|.
name|PATH_TYPE
operator|&&
name|mapperBuilders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|empty
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|mapperBuilders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|MultiFields
argument_list|(
name|pathType
argument_list|,
name|ImmutableOpenMap
operator|.
expr|<
name|String
argument_list|,
name|FieldMapper
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|ContentPath
operator|.
name|Type
name|origPathType
init|=
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|()
decl_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|add
argument_list|(
name|mainFieldBuilder
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
name|mapperBuilders
init|=
name|this
operator|.
name|mapperBuilders
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Mapper
operator|.
name|Builder
argument_list|>
name|cursor
range|:
name|this
operator|.
name|mapperBuilders
control|)
block|{
name|String
name|key
init|=
name|cursor
operator|.
name|key
decl_stmt|;
name|Mapper
operator|.
name|Builder
name|value
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|Mapper
name|mapper
init|=
name|value
operator|.
name|build
argument_list|(
name|context
argument_list|)
decl_stmt|;
assert|assert
name|mapper
operator|instanceof
name|FieldMapper
assert|;
name|mapperBuilders
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|path
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|origPathType
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|FieldMapper
argument_list|>
name|mappers
init|=
name|mapperBuilders
operator|.
name|cast
argument_list|()
decl_stmt|;
return|return
operator|new
name|MultiFields
argument_list|(
name|pathType
argument_list|,
name|mappers
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
DECL|field|pathType
specifier|private
specifier|final
name|ContentPath
operator|.
name|Type
name|pathType
decl_stmt|;
DECL|field|mappers
specifier|private
specifier|volatile
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|FieldMapper
argument_list|>
name|mappers
decl_stmt|;
DECL|method|MultiFields
specifier|public
name|MultiFields
parameter_list|(
name|ContentPath
operator|.
name|Type
name|pathType
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|FieldMapper
argument_list|>
name|mappers
parameter_list|)
block|{
name|this
operator|.
name|pathType
operator|=
name|pathType
expr_stmt|;
name|this
operator|.
name|mappers
operator|=
name|mappers
expr_stmt|;
comment|// we disable the all in multi-field mappers
for|for
control|(
name|ObjectCursor
argument_list|<
name|FieldMapper
argument_list|>
name|cursor
range|:
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
name|FieldMapper
name|mapper
init|=
name|cursor
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|mapper
operator|instanceof
name|AllFieldMapper
operator|.
name|IncludeInAll
condition|)
block|{
operator|(
operator|(
name|AllFieldMapper
operator|.
name|IncludeInAll
operator|)
name|mapper
operator|)
operator|.
name|unsetIncludeInAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|parse
specifier|public
name|void
name|parse
parameter_list|(
name|AbstractFieldMapper
name|mainField
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: multi fields are really just copy fields, we just need to expose "sub fields" or something that can be part of the mappings
if|if
condition|(
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|context
operator|=
name|context
operator|.
name|createMultiFieldContext
argument_list|()
expr_stmt|;
name|ContentPath
operator|.
name|Type
name|origPathType
init|=
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|()
decl_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|add
argument_list|(
name|mainField
operator|.
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|shortName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|FieldMapper
argument_list|>
name|cursor
range|:
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
name|cursor
operator|.
name|value
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|path
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|origPathType
argument_list|)
expr_stmt|;
block|}
comment|// No need for locking, because locking is taken care of in ObjectMapper#merge and DocumentMapper#merge
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|MergeResult
name|mergeResult
parameter_list|)
throws|throws
name|MergeMappingException
block|{
name|AbstractFieldMapper
name|mergeWithMultiField
init|=
operator|(
name|AbstractFieldMapper
operator|)
name|mergeWith
decl_stmt|;
name|List
argument_list|<
name|FieldMapper
argument_list|>
name|newFieldMappers
init|=
literal|null
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|FieldMapper
argument_list|>
name|newMappersBuilder
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|FieldMapper
argument_list|>
name|cursor
range|:
name|mergeWithMultiField
operator|.
name|multiFields
operator|.
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
name|FieldMapper
name|mergeWithMapper
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|Mapper
name|mergeIntoMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|mergeWithMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|shortName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeIntoMapper
operator|==
literal|null
condition|)
block|{
comment|// no mapping, simply add it if not simulating
if|if
condition|(
operator|!
name|mergeResult
operator|.
name|simulate
argument_list|()
condition|)
block|{
comment|// we disable the all in multi-field mappers
if|if
condition|(
name|mergeWithMapper
operator|instanceof
name|AllFieldMapper
operator|.
name|IncludeInAll
condition|)
block|{
operator|(
operator|(
name|AllFieldMapper
operator|.
name|IncludeInAll
operator|)
name|mergeWithMapper
operator|)
operator|.
name|unsetIncludeInAll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newMappersBuilder
operator|==
literal|null
condition|)
block|{
name|newMappersBuilder
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|mappers
argument_list|)
expr_stmt|;
block|}
name|newMappersBuilder
operator|.
name|put
argument_list|(
name|mergeWithMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|shortName
argument_list|()
argument_list|,
name|mergeWithMapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeWithMapper
operator|instanceof
name|AbstractFieldMapper
condition|)
block|{
if|if
condition|(
name|newFieldMappers
operator|==
literal|null
condition|)
block|{
name|newFieldMappers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|newFieldMappers
operator|.
name|add
argument_list|(
name|mergeWithMapper
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|mergeIntoMapper
operator|.
name|merge
argument_list|(
name|mergeWithMapper
argument_list|,
name|mergeResult
argument_list|)
expr_stmt|;
block|}
block|}
comment|// first add all field mappers
if|if
condition|(
name|newFieldMappers
operator|!=
literal|null
condition|)
block|{
name|mergeResult
operator|.
name|addFieldMappers
argument_list|(
name|newFieldMappers
argument_list|)
expr_stmt|;
block|}
comment|// now publish mappers
if|if
condition|(
name|newMappersBuilder
operator|!=
literal|null
condition|)
block|{
name|mappers
operator|=
name|newMappersBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Mapper
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|mappers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|ObjectCursor
argument_list|<
name|FieldMapper
argument_list|>
argument_list|,
name|Mapper
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Mapper
name|apply
parameter_list|(
annotation|@
name|Nullable
name|ObjectCursor
argument_list|<
name|FieldMapper
argument_list|>
name|cursor
parameter_list|)
block|{
return|return
name|cursor
operator|.
name|value
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|ObjectCursor
argument_list|<
name|FieldMapper
argument_list|>
name|cursor
range|:
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
name|cursor
operator|.
name|value
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pathType
operator|!=
name|Defaults
operator|.
name|PATH_TYPE
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
name|pathType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// sort the mappers so we get consistent serialization format
name|Mapper
index|[]
name|sortedMappers
init|=
name|mappers
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|Mapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|sortedMappers
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Mapper
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Mapper
name|o1
parameter_list|,
name|Mapper
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|name
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
expr_stmt|;
for|for
control|(
name|Mapper
name|mapper
range|:
name|sortedMappers
control|)
block|{
name|mapper
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
comment|/**      * Represents a list of fields with optional boost factor where the current field should be copied to      */
DECL|class|CopyTo
specifier|public
specifier|static
class|class
name|CopyTo
block|{
DECL|field|copyToFields
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|copyToFields
decl_stmt|;
DECL|method|CopyTo
specifier|private
name|CopyTo
parameter_list|(
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|copyToFields
parameter_list|)
block|{
name|this
operator|.
name|copyToFields
operator|=
name|copyToFields
expr_stmt|;
block|}
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|copyToFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"copy_to"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|copyToFields
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|copyToBuilders
specifier|private
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|copyToBuilders
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
DECL|method|add
specifier|public
name|Builder
name|add
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|copyToBuilders
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|CopyTo
name|build
parameter_list|()
block|{
return|return
operator|new
name|CopyTo
argument_list|(
name|copyToBuilders
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|copyToFields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|copyToFields
parameter_list|()
block|{
return|return
name|copyToFields
return|;
block|}
block|}
comment|/**      * Returns if this field is only generated when indexing. For example, the field of type token_count      */
annotation|@
name|Override
DECL|method|isGenerated
specifier|public
name|boolean
name|isGenerated
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

