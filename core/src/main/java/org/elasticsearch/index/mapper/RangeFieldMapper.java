begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYDa  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleRangeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatRangeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntRangeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongRangeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Explicit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|ShapeRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|DateMathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|FormatDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|LocaleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|NumberFieldMapper
operator|.
name|NumberType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|TypeParsers
operator|.
name|parseDateTimeFormatter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|RangeQueryBuilder
operator|.
name|GT_FIELD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|RangeQueryBuilder
operator|.
name|GTE_FIELD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|RangeQueryBuilder
operator|.
name|LT_FIELD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|RangeQueryBuilder
operator|.
name|LTE_FIELD
import|;
end_import

begin_comment
comment|/** A {@link FieldMapper} for indexing numeric and date ranges, and creating queries */
end_comment

begin_class
DECL|class|RangeFieldMapper
specifier|public
class|class
name|RangeFieldMapper
extends|extends
name|FieldMapper
block|{
DECL|field|DEFAULT_INCLUDE_UPPER
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_INCLUDE_UPPER
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_INCLUDE_LOWER
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_INCLUDE_LOWER
init|=
literal|true
decl_stmt|;
DECL|class|Defaults
specifier|public
specifier|static
class|class
name|Defaults
block|{
DECL|field|COERCE
specifier|public
specifier|static
specifier|final
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|COERCE
init|=
operator|new
name|Explicit
argument_list|<>
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
block|}
comment|// this is private since it has a different default
DECL|field|COERCE_SETTING
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|COERCE_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"index.mapping.coerce"
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|IndexScope
argument_list|)
decl_stmt|;
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|FieldMapper
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|,
name|RangeFieldMapper
argument_list|>
block|{
DECL|field|coerce
specifier|private
name|Boolean
name|coerce
decl_stmt|;
DECL|field|locale
specifier|private
name|Locale
name|locale
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|,
name|RangeType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
operator|new
name|RangeFieldType
argument_list|(
name|type
argument_list|)
argument_list|,
operator|new
name|RangeFieldType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|this
expr_stmt|;
name|locale
operator|=
name|Locale
operator|.
name|ROOT
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|RangeFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|RangeFieldType
operator|)
name|fieldType
return|;
block|}
annotation|@
name|Override
DECL|method|docValues
specifier|public
name|Builder
name|docValues
parameter_list|(
name|boolean
name|docValues
parameter_list|)
block|{
if|if
condition|(
name|docValues
operator|==
literal|true
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field ["
operator|+
name|name
operator|+
literal|"] does not currently support "
operator|+
name|TypeParsers
operator|.
name|DOC_VALUES
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|docValues
argument_list|(
name|docValues
argument_list|)
return|;
block|}
DECL|method|coerce
specifier|public
name|Builder
name|coerce
parameter_list|(
name|boolean
name|coerce
parameter_list|)
block|{
name|this
operator|.
name|coerce
operator|=
name|coerce
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|coerce
specifier|protected
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|coerce
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|coerce
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|coerce
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|context
operator|.
name|indexSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|COERCE_SETTING
operator|.
name|get
argument_list|(
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
name|Defaults
operator|.
name|COERCE
return|;
block|}
DECL|method|dateTimeFormatter
specifier|public
name|Builder
name|dateTimeFormatter
parameter_list|(
name|FormatDateTimeFormatter
name|dateTimeFormatter
parameter_list|)
block|{
name|fieldType
argument_list|()
operator|.
name|setDateTimeFormatter
argument_list|(
name|dateTimeFormatter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nullValue
specifier|public
name|Builder
name|nullValue
parameter_list|(
name|Object
name|nullValue
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field ["
operator|+
name|name
argument_list|()
operator|+
literal|"] does not support null value."
argument_list|)
throw|;
block|}
DECL|method|locale
specifier|public
name|void
name|locale
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setupFieldType
specifier|protected
name|void
name|setupFieldType
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|super
operator|.
name|setupFieldType
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|FormatDateTimeFormatter
name|dateTimeFormatter
init|=
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
decl_stmt|;
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|rangeType
operator|==
name|RangeType
operator|.
name|DATE
condition|)
block|{
if|if
condition|(
operator|!
name|locale
operator|.
name|equals
argument_list|(
name|dateTimeFormatter
operator|.
name|locale
argument_list|()
argument_list|)
condition|)
block|{
name|fieldType
argument_list|()
operator|.
name|setDateTimeFormatter
argument_list|(
operator|new
name|FormatDateTimeFormatter
argument_list|(
name|dateTimeFormatter
operator|.
name|format
argument_list|()
argument_list|,
name|dateTimeFormatter
operator|.
name|parser
argument_list|()
argument_list|,
name|dateTimeFormatter
operator|.
name|printer
argument_list|()
argument_list|,
name|locale
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dateTimeFormatter
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field ["
operator|+
name|name
argument_list|()
operator|+
literal|"] of type ["
operator|+
name|fieldType
argument_list|()
operator|.
name|rangeType
operator|+
literal|"] should not define a dateTimeFormatter unless it is a "
operator|+
name|RangeType
operator|.
name|DATE
operator|+
literal|" type"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|RangeFieldMapper
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|setupFieldType
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
operator|new
name|RangeFieldMapper
argument_list|(
name|name
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|coerce
argument_list|(
name|context
argument_list|)
argument_list|,
name|includeInAll
argument_list|,
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|,
name|multiFieldsBuilder
operator|.
name|build
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
argument_list|,
name|copyTo
argument_list|)
return|;
block|}
block|}
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
DECL|field|type
specifier|final
name|RangeType
name|type
decl_stmt|;
DECL|method|TypeParser
specifier|public
name|TypeParser
parameter_list|(
name|RangeType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|TypeParsers
operator|.
name|parseField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|node
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|node
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"null_value"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Property [null_value] is not supported for ["
operator|+
name|this
operator|.
name|type
operator|.
name|name
operator|+
literal|"] field types."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"coerce"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|coerce
argument_list|(
name|TypeParsers
operator|.
name|nodeBooleanValue
argument_list|(
name|name
argument_list|,
literal|"coerce"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"locale"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|locale
argument_list|(
name|LocaleUtils
operator|.
name|parse
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"format"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|dateTimeFormatter
argument_list|(
name|parseDateTimeFormatter
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TypeParsers
operator|.
name|parseMultiField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|parserContext
argument_list|,
name|propName
argument_list|,
name|propNode
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|RangeFieldType
specifier|public
specifier|static
specifier|final
class|class
name|RangeFieldType
extends|extends
name|MappedFieldType
block|{
DECL|field|rangeType
specifier|protected
name|RangeType
name|rangeType
decl_stmt|;
DECL|field|dateTimeFormatter
specifier|protected
name|FormatDateTimeFormatter
name|dateTimeFormatter
decl_stmt|;
DECL|field|dateMathParser
specifier|protected
name|DateMathParser
name|dateMathParser
decl_stmt|;
DECL|method|RangeFieldType
specifier|public
name|RangeFieldType
parameter_list|(
name|RangeType
name|type
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|rangeType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setHasDocValues
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeType
operator|==
name|RangeType
operator|.
name|DATE
condition|)
block|{
name|setDateTimeFormatter
argument_list|(
name|DateFieldMapper
operator|.
name|DEFAULT_DATE_TIME_FORMATTER
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|RangeFieldType
specifier|public
name|RangeFieldType
parameter_list|(
name|RangeFieldType
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|this
operator|.
name|rangeType
operator|=
name|other
operator|.
name|rangeType
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|dateTimeFormatter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setDateTimeFormatter
argument_list|(
name|other
operator|.
name|dateTimeFormatter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|MappedFieldType
name|clone
parameter_list|()
block|{
return|return
operator|new
name|RangeFieldType
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|RangeFieldType
name|that
init|=
operator|(
name|RangeFieldType
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|rangeType
argument_list|,
name|that
operator|.
name|rangeType
argument_list|)
operator|&&
operator|(
name|rangeType
operator|==
name|RangeType
operator|.
name|DATE
operator|)
condition|?
name|Objects
operator|.
name|equals
argument_list|(
name|dateTimeFormatter
operator|.
name|format
argument_list|()
argument_list|,
name|that
operator|.
name|dateTimeFormatter
operator|.
name|format
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|dateTimeFormatter
operator|.
name|locale
argument_list|()
argument_list|,
name|that
operator|.
name|dateTimeFormatter
operator|.
name|locale
argument_list|()
argument_list|)
else|:
name|dateTimeFormatter
operator|==
literal|null
operator|&&
name|that
operator|.
name|dateTimeFormatter
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|dateTimeFormatter
operator|==
literal|null
operator|)
condition|?
name|Objects
operator|.
name|hash
argument_list|(
name|super
operator|.
name|hashCode
argument_list|()
argument_list|,
name|rangeType
argument_list|)
else|:
name|Objects
operator|.
name|hash
argument_list|(
name|super
operator|.
name|hashCode
argument_list|()
argument_list|,
name|rangeType
argument_list|,
name|dateTimeFormatter
operator|.
name|format
argument_list|()
argument_list|,
name|dateTimeFormatter
operator|.
name|locale
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|typeName
specifier|public
name|String
name|typeName
parameter_list|()
block|{
return|return
name|rangeType
operator|.
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|checkCompatibility
specifier|public
name|void
name|checkCompatibility
parameter_list|(
name|MappedFieldType
name|fieldType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
name|super
operator|.
name|checkCompatibility
argument_list|(
name|fieldType
argument_list|,
name|conflicts
argument_list|,
name|strict
argument_list|)
expr_stmt|;
if|if
condition|(
name|strict
condition|)
block|{
name|RangeFieldType
name|other
init|=
operator|(
name|RangeFieldType
operator|)
name|fieldType
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|rangeType
operator|!=
name|other
operator|.
name|rangeType
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is attempting to update from type ["
operator|+
name|rangeType
operator|.
name|name
operator|+
literal|"] to incompatible type ["
operator|+
name|other
operator|.
name|rangeType
operator|.
name|name
operator|+
literal|"]."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rangeType
operator|==
name|RangeType
operator|.
name|DATE
condition|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|,
name|other
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is used by multiple types. Set update_all_types to true to update [format] across all types."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|dateTimeFormatter
argument_list|()
operator|.
name|locale
argument_list|()
argument_list|,
name|other
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|locale
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is used by multiple types. Set update_all_types to true to update [locale] across all types."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|dateTimeFormatter
specifier|public
name|FormatDateTimeFormatter
name|dateTimeFormatter
parameter_list|()
block|{
return|return
name|dateTimeFormatter
return|;
block|}
DECL|method|setDateTimeFormatter
specifier|public
name|void
name|setDateTimeFormatter
parameter_list|(
name|FormatDateTimeFormatter
name|dateTimeFormatter
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|dateTimeFormatter
operator|=
name|dateTimeFormatter
expr_stmt|;
name|this
operator|.
name|dateMathParser
operator|=
operator|new
name|DateMathParser
argument_list|(
name|dateTimeFormatter
argument_list|)
expr_stmt|;
block|}
DECL|method|dateMathParser
specifier|protected
name|DateMathParser
name|dateMathParser
parameter_list|()
block|{
return|return
name|dateMathParser
return|;
block|}
annotation|@
name|Override
DECL|method|termQuery
specifier|public
name|Query
name|termQuery
parameter_list|(
name|Object
name|value
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|Query
name|query
init|=
name|rangeQuery
argument_list|(
name|value
argument_list|,
name|value
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|boost
argument_list|()
operator|!=
literal|1f
condition|)
block|{
name|query
operator|=
operator|new
name|BoostQuery
argument_list|(
name|query
argument_list|,
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|rangeQuery
specifier|public
name|Query
name|rangeQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
return|return
name|rangeQuery
argument_list|(
name|lowerTerm
argument_list|,
name|upperTerm
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
name|ShapeRelation
operator|.
name|INTERSECTS
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|rangeQuery
specifier|public
name|Query
name|rangeQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
name|ShapeRelation
name|relation
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|failIfNotIndexed
argument_list|()
expr_stmt|;
return|return
name|rangeQuery
argument_list|(
name|lowerTerm
argument_list|,
name|upperTerm
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
name|relation
argument_list|,
literal|null
argument_list|,
name|dateMathParser
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|rangeQuery
specifier|public
name|Query
name|rangeQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
name|ShapeRelation
name|relation
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|,
name|DateMathParser
name|parser
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
return|return
name|rangeType
operator|.
name|rangeQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|lowerTerm
argument_list|,
name|upperTerm
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
name|relation
argument_list|,
name|timeZone
argument_list|,
name|parser
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
DECL|field|includeInAll
specifier|private
name|Boolean
name|includeInAll
decl_stmt|;
DECL|field|coerce
specifier|private
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|coerce
decl_stmt|;
DECL|method|RangeFieldMapper
specifier|private
name|RangeFieldMapper
parameter_list|(
name|String
name|simpleName
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|,
name|MappedFieldType
name|defaultFieldType
parameter_list|,
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|coerce
parameter_list|,
name|Boolean
name|includeInAll
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|MultiFields
name|multiFields
parameter_list|,
name|CopyTo
name|copyTo
parameter_list|)
block|{
name|super
argument_list|(
name|simpleName
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|indexSettings
argument_list|,
name|multiFields
argument_list|,
name|copyTo
argument_list|)
expr_stmt|;
name|this
operator|.
name|coerce
operator|=
name|coerce
expr_stmt|;
name|this
operator|.
name|includeInAll
operator|=
name|includeInAll
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|RangeFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|RangeFieldType
operator|)
name|super
operator|.
name|fieldType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contentType
specifier|protected
name|String
name|contentType
parameter_list|()
block|{
return|return
name|fieldType
operator|.
name|typeName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|protected
name|RangeFieldMapper
name|clone
parameter_list|()
block|{
return|return
operator|(
name|RangeFieldMapper
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|parseCreateField
specifier|protected
name|void
name|parseCreateField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|IndexableField
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|includeInAll
init|=
name|context
operator|.
name|includeInAll
argument_list|(
name|this
operator|.
name|includeInAll
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|Range
name|range
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|externalValueSet
argument_list|()
condition|)
block|{
name|range
operator|=
name|context
operator|.
name|parseExternalValue
argument_list|(
name|Range
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|RangeFieldType
name|fieldType
init|=
name|fieldType
argument_list|()
decl_stmt|;
name|RangeType
name|rangeType
init|=
name|fieldType
operator|.
name|rangeType
decl_stmt|;
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
name|Number
name|from
init|=
name|rangeType
operator|.
name|minValue
argument_list|()
decl_stmt|;
name|Number
name|to
init|=
name|rangeType
operator|.
name|maxValue
argument_list|()
decl_stmt|;
name|boolean
name|includeFrom
init|=
name|DEFAULT_INCLUDE_LOWER
decl_stmt|;
name|boolean
name|includeTo
init|=
name|DEFAULT_INCLUDE_UPPER
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|fieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|GT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
condition|)
block|{
name|includeFrom
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|from
operator|=
name|rangeType
operator|.
name|parseFrom
argument_list|(
name|fieldType
argument_list|,
name|parser
argument_list|,
name|coerce
operator|.
name|value
argument_list|()
argument_list|,
name|includeFrom
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|GTE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
condition|)
block|{
name|includeFrom
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|from
operator|=
name|rangeType
operator|.
name|parseFrom
argument_list|(
name|fieldType
argument_list|,
name|parser
argument_list|,
name|coerce
operator|.
name|value
argument_list|()
argument_list|,
name|includeFrom
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|LT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
condition|)
block|{
name|includeTo
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|to
operator|=
name|rangeType
operator|.
name|parseTo
argument_list|(
name|fieldType
argument_list|,
name|parser
argument_list|,
name|coerce
operator|.
name|value
argument_list|()
argument_list|,
name|includeTo
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|LTE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
condition|)
block|{
name|includeTo
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|to
operator|=
name|rangeType
operator|.
name|parseTo
argument_list|(
name|fieldType
argument_list|,
name|parser
argument_list|,
name|coerce
operator|.
name|value
argument_list|()
argument_list|,
name|includeTo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"error parsing field ["
operator|+
name|name
argument_list|()
operator|+
literal|"], with unknown parameter ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
name|range
operator|=
operator|new
name|Range
argument_list|(
name|rangeType
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|includeFrom
argument_list|,
name|includeTo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"error parsing field ["
operator|+
name|name
argument_list|()
operator|+
literal|"], expected an object but got "
operator|+
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|includeInAll
condition|)
block|{
name|context
operator|.
name|allEntries
argument_list|()
operator|.
name|addText
argument_list|(
name|fieldType
operator|.
name|name
argument_list|()
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|,
name|fieldType
operator|.
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|indexed
init|=
name|fieldType
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
decl_stmt|;
name|boolean
name|docValued
init|=
name|fieldType
operator|.
name|hasDocValues
argument_list|()
decl_stmt|;
name|boolean
name|stored
init|=
name|fieldType
operator|.
name|stored
argument_list|()
decl_stmt|;
name|fields
operator|.
name|addAll
argument_list|(
name|fieldType
argument_list|()
operator|.
name|rangeType
operator|.
name|createFields
argument_list|(
name|name
argument_list|()
argument_list|,
name|range
argument_list|,
name|indexed
argument_list|,
name|docValued
argument_list|,
name|stored
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doMerge
specifier|protected
name|void
name|doMerge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
name|super
operator|.
name|doMerge
argument_list|(
name|mergeWith
argument_list|,
name|updateAllTypes
argument_list|)
expr_stmt|;
name|RangeFieldMapper
name|other
init|=
operator|(
name|RangeFieldMapper
operator|)
name|mergeWith
decl_stmt|;
name|this
operator|.
name|includeInAll
operator|=
name|other
operator|.
name|includeInAll
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|coerce
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|this
operator|.
name|coerce
operator|=
name|other
operator|.
name|coerce
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|void
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|doXContentBody
argument_list|(
name|builder
argument_list|,
name|includeDefaults
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDefaults
operator|||
operator|(
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|!=
literal|null
operator|&&
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
operator|.
name|equals
argument_list|(
name|DateFieldMapper
operator|.
name|DEFAULT_DATE_TIME_FORMATTER
operator|.
name|format
argument_list|()
argument_list|)
operator|==
literal|false
operator|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
operator|(
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|!=
literal|null
operator|&&
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|locale
argument_list|()
operator|!=
name|Locale
operator|.
name|ROOT
operator|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"locale"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|locale
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|coerce
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"coerce"
argument_list|,
name|coerce
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeInAll
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
name|includeInAll
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeDefaults
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Enum defining the type of range */
DECL|enum|RangeType
specifier|public
enum|enum
name|RangeType
block|{
DECL|enum constant|DATE
name|DATE
argument_list|(
literal|"date_range"
argument_list|,
name|NumberType
operator|.
name|LONG
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Field
name|getRangeField
parameter_list|(
name|String
name|name
parameter_list|,
name|Range
name|r
parameter_list|)
block|{
return|return
operator|new
name|LongRangeField
argument_list|(
name|name
argument_list|,
operator|new
name|long
index|[]
block|{
name|r
operator|.
name|from
operator|.
name|longValue
argument_list|()
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|r
operator|.
name|to
operator|.
name|longValue
argument_list|()
block|}
argument_list|)
return|;
block|}
specifier|private
name|Number
name|parse
parameter_list|(
name|DateMathParser
name|dateMathParser
parameter_list|,
name|String
name|dateStr
parameter_list|)
block|{
return|return
name|dateMathParser
operator|.
name|parse
argument_list|(
name|dateStr
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"now is not used at indexing time"
argument_list|)
throw|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|parseFrom
parameter_list|(
name|RangeFieldType
name|fieldType
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|,
name|boolean
name|included
parameter_list|)
throws|throws
name|IOException
block|{
name|Number
name|value
init|=
name|parse
argument_list|(
name|fieldType
operator|.
name|dateMathParser
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|included
condition|?
name|value
else|:
name|nextUp
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|parseTo
parameter_list|(
name|RangeFieldType
name|fieldType
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|,
name|boolean
name|included
parameter_list|)
throws|throws
name|IOException
block|{
name|Number
name|value
init|=
name|parse
argument_list|(
name|fieldType
operator|.
name|dateMathParser
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|included
condition|?
name|value
else|:
name|nextDown
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|minValue
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|maxValue
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|nextUp
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|LONG
operator|.
name|nextUp
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|nextDown
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|LONG
operator|.
name|nextDown
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|Range
name|r
parameter_list|)
block|{
return|return
name|LONG
operator|.
name|getBytes
argument_list|(
name|r
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|rangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
name|ShapeRelation
name|relation
parameter_list|,
annotation|@
name|Nullable
name|DateTimeZone
name|timeZone
parameter_list|,
annotation|@
name|Nullable
name|DateMathParser
name|parser
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|DateTimeZone
name|zone
init|=
operator|(
name|timeZone
operator|==
literal|null
operator|)
condition|?
name|DateTimeZone
operator|.
name|UTC
else|:
name|timeZone
decl_stmt|;
name|DateMathParser
name|dateMathParser
init|=
operator|(
name|parser
operator|==
literal|null
operator|)
condition|?
operator|new
name|DateMathParser
argument_list|(
name|DateFieldMapper
operator|.
name|DEFAULT_DATE_TIME_FORMATTER
argument_list|)
else|:
name|parser
decl_stmt|;
name|Long
name|low
init|=
name|lowerTerm
operator|==
literal|null
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|dateMathParser
operator|.
name|parse
argument_list|(
name|lowerTerm
operator|instanceof
name|BytesRef
condition|?
operator|(
operator|(
name|BytesRef
operator|)
name|lowerTerm
operator|)
operator|.
name|utf8ToString
argument_list|()
else|:
name|lowerTerm
operator|.
name|toString
argument_list|()
argument_list|,
name|context
operator|::
name|nowInMillis
argument_list|,
literal|false
argument_list|,
name|zone
argument_list|)
decl_stmt|;
name|Long
name|high
init|=
name|upperTerm
operator|==
literal|null
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|dateMathParser
operator|.
name|parse
argument_list|(
name|upperTerm
operator|instanceof
name|BytesRef
condition|?
operator|(
operator|(
name|BytesRef
operator|)
name|upperTerm
operator|)
operator|.
name|utf8ToString
argument_list|()
else|:
name|upperTerm
operator|.
name|toString
argument_list|()
argument_list|,
name|context
operator|::
name|nowInMillis
argument_list|,
literal|false
argument_list|,
name|zone
argument_list|)
decl_stmt|;
return|return
name|super
operator|.
name|rangeQuery
argument_list|(
name|field
argument_list|,
name|low
argument_list|,
name|high
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
name|relation
argument_list|,
name|zone
argument_list|,
name|dateMathParser
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|withinQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|LONG
operator|.
name|withinQuery
argument_list|(
name|field
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|containsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|LONG
operator|.
name|containsQuery
argument_list|(
name|field
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|intersectsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|LONG
operator|.
name|intersectsQuery
argument_list|(
name|field
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
block|}
block|,
comment|// todo support half_float
DECL|enum constant|FLOAT
name|FLOAT
argument_list|(
literal|"float_range"
argument_list|,
name|NumberType
operator|.
name|FLOAT
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Float
name|minValue
parameter_list|()
block|{
return|return
name|Float
operator|.
name|NEGATIVE_INFINITY
return|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|maxValue
parameter_list|()
block|{
return|return
name|Float
operator|.
name|POSITIVE_INFINITY
return|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|nextUp
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|Math
operator|.
name|nextUp
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Float
name|nextDown
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|Math
operator|.
name|nextDown
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Field
name|getRangeField
parameter_list|(
name|String
name|name
parameter_list|,
name|Range
name|r
parameter_list|)
block|{
return|return
operator|new
name|FloatRangeField
argument_list|(
name|name
argument_list|,
operator|new
name|float
index|[]
block|{
name|r
operator|.
name|from
operator|.
name|floatValue
argument_list|()
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
name|r
operator|.
name|to
operator|.
name|floatValue
argument_list|()
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|Range
name|r
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|Float
operator|.
name|BYTES
operator|*
literal|2
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|r
operator|.
name|from
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|r
operator|.
name|to
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|,
name|b
argument_list|,
name|Float
operator|.
name|BYTES
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|withinQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|FloatRangeField
operator|.
name|newWithinQuery
argument_list|(
name|field
argument_list|,
operator|new
name|float
index|[]
block|{
name|includeFrom
condition|?
operator|(
name|Float
operator|)
name|from
else|:
name|Math
operator|.
name|nextUp
argument_list|(
operator|(
name|Float
operator|)
name|from
argument_list|)
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
name|includeTo
condition|?
operator|(
name|Float
operator|)
name|to
else|:
name|Math
operator|.
name|nextDown
argument_list|(
operator|(
name|Float
operator|)
name|to
argument_list|)
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|containsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|FloatRangeField
operator|.
name|newContainsQuery
argument_list|(
name|field
argument_list|,
operator|new
name|float
index|[]
block|{
name|includeFrom
condition|?
operator|(
name|Float
operator|)
name|from
else|:
name|Math
operator|.
name|nextUp
argument_list|(
operator|(
name|Float
operator|)
name|from
argument_list|)
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
name|includeTo
condition|?
operator|(
name|Float
operator|)
name|to
else|:
name|Math
operator|.
name|nextDown
argument_list|(
operator|(
name|Float
operator|)
name|to
argument_list|)
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|intersectsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|FloatRangeField
operator|.
name|newIntersectsQuery
argument_list|(
name|field
argument_list|,
operator|new
name|float
index|[]
block|{
name|includeFrom
condition|?
operator|(
name|Float
operator|)
name|from
else|:
name|Math
operator|.
name|nextUp
argument_list|(
operator|(
name|Float
operator|)
name|from
argument_list|)
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
name|includeTo
condition|?
operator|(
name|Float
operator|)
name|to
else|:
name|Math
operator|.
name|nextDown
argument_list|(
operator|(
name|Float
operator|)
name|to
argument_list|)
block|}
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|DOUBLE
name|DOUBLE
argument_list|(
literal|"double_range"
argument_list|,
name|NumberType
operator|.
name|DOUBLE
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Double
name|minValue
parameter_list|()
block|{
return|return
name|Double
operator|.
name|NEGATIVE_INFINITY
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|maxValue
parameter_list|()
block|{
return|return
name|Double
operator|.
name|POSITIVE_INFINITY
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|nextUp
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|Math
operator|.
name|nextUp
argument_list|(
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|nextDown
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|Math
operator|.
name|nextDown
argument_list|(
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Field
name|getRangeField
parameter_list|(
name|String
name|name
parameter_list|,
name|Range
name|r
parameter_list|)
block|{
return|return
operator|new
name|DoubleRangeField
argument_list|(
name|name
argument_list|,
operator|new
name|double
index|[]
block|{
name|r
operator|.
name|from
operator|.
name|doubleValue
argument_list|()
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|r
operator|.
name|to
operator|.
name|doubleValue
argument_list|()
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|Range
name|r
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|Double
operator|.
name|BYTES
operator|*
literal|2
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|r
operator|.
name|from
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|r
operator|.
name|to
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|,
name|b
argument_list|,
name|Double
operator|.
name|BYTES
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|withinQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|DoubleRangeField
operator|.
name|newWithinQuery
argument_list|(
name|field
argument_list|,
operator|new
name|double
index|[]
block|{
name|includeFrom
condition|?
operator|(
name|Double
operator|)
name|from
else|:
name|Math
operator|.
name|nextUp
argument_list|(
operator|(
name|Double
operator|)
name|from
argument_list|)
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|includeTo
condition|?
operator|(
name|Double
operator|)
name|to
else|:
name|Math
operator|.
name|nextDown
argument_list|(
operator|(
name|Double
operator|)
name|to
argument_list|)
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|containsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|DoubleRangeField
operator|.
name|newContainsQuery
argument_list|(
name|field
argument_list|,
operator|new
name|double
index|[]
block|{
name|includeFrom
condition|?
operator|(
name|Double
operator|)
name|from
else|:
name|Math
operator|.
name|nextUp
argument_list|(
operator|(
name|Double
operator|)
name|from
argument_list|)
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|includeTo
condition|?
operator|(
name|Double
operator|)
name|to
else|:
name|Math
operator|.
name|nextDown
argument_list|(
operator|(
name|Double
operator|)
name|to
argument_list|)
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|intersectsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|DoubleRangeField
operator|.
name|newIntersectsQuery
argument_list|(
name|field
argument_list|,
operator|new
name|double
index|[]
block|{
name|includeFrom
condition|?
operator|(
name|Double
operator|)
name|from
else|:
name|Math
operator|.
name|nextUp
argument_list|(
operator|(
name|Double
operator|)
name|from
argument_list|)
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|includeTo
condition|?
operator|(
name|Double
operator|)
name|to
else|:
name|Math
operator|.
name|nextDown
argument_list|(
operator|(
name|Double
operator|)
name|to
argument_list|)
block|}
argument_list|)
return|;
block|}
block|}
block|,
comment|// todo add BYTE support
comment|// todo add SHORT support
DECL|enum constant|INTEGER
name|INTEGER
argument_list|(
literal|"integer_range"
argument_list|,
name|NumberType
operator|.
name|INTEGER
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|minValue
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MIN_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|maxValue
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|nextUp
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|intValue
argument_list|()
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|nextDown
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|intValue
argument_list|()
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Field
name|getRangeField
parameter_list|(
name|String
name|name
parameter_list|,
name|Range
name|r
parameter_list|)
block|{
return|return
operator|new
name|IntRangeField
argument_list|(
name|name
argument_list|,
operator|new
name|int
index|[]
block|{
name|r
operator|.
name|from
operator|.
name|intValue
argument_list|()
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|r
operator|.
name|to
operator|.
name|intValue
argument_list|()
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|Range
name|r
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|Integer
operator|.
name|BYTES
operator|*
literal|2
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|r
operator|.
name|from
operator|.
name|intValue
argument_list|()
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|r
operator|.
name|to
operator|.
name|intValue
argument_list|()
argument_list|,
name|b
argument_list|,
name|Integer
operator|.
name|BYTES
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|withinQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|IntRangeField
operator|.
name|newWithinQuery
argument_list|(
name|field
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|Integer
operator|)
name|from
operator|+
operator|(
name|includeFrom
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|Integer
operator|)
name|to
operator|-
operator|(
name|includeTo
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|containsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|IntRangeField
operator|.
name|newContainsQuery
argument_list|(
name|field
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|Integer
operator|)
name|from
operator|+
operator|(
name|includeFrom
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|Integer
operator|)
name|to
operator|-
operator|(
name|includeTo
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|intersectsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|IntRangeField
operator|.
name|newIntersectsQuery
argument_list|(
name|field
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|Integer
operator|)
name|from
operator|+
operator|(
name|includeFrom
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|Integer
operator|)
name|to
operator|-
operator|(
name|includeTo
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|LONG
name|LONG
argument_list|(
literal|"long_range"
argument_list|,
name|NumberType
operator|.
name|LONG
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Long
name|minValue
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|maxValue
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|nextUp
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|longValue
argument_list|()
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|nextDown
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|longValue
argument_list|()
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Field
name|getRangeField
parameter_list|(
name|String
name|name
parameter_list|,
name|Range
name|r
parameter_list|)
block|{
return|return
operator|new
name|LongRangeField
argument_list|(
name|name
argument_list|,
operator|new
name|long
index|[]
block|{
name|r
operator|.
name|from
operator|.
name|longValue
argument_list|()
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|r
operator|.
name|to
operator|.
name|longValue
argument_list|()
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|Range
name|r
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|Long
operator|.
name|BYTES
operator|*
literal|2
index|]
decl_stmt|;
name|long
name|from
init|=
name|r
operator|.
name|from
operator|==
literal|null
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|r
operator|.
name|from
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|to
init|=
name|r
operator|.
name|to
operator|==
literal|null
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|r
operator|.
name|to
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|from
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|longToSortableBytes
argument_list|(
name|to
argument_list|,
name|b
argument_list|,
name|Long
operator|.
name|BYTES
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|withinQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|LongRangeField
operator|.
name|newWithinQuery
argument_list|(
name|field
argument_list|,
operator|new
name|long
index|[]
block|{
operator|(
name|Long
operator|)
name|from
operator|+
operator|(
name|includeFrom
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
operator|(
name|Long
operator|)
name|to
operator|-
operator|(
name|includeTo
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|containsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|LongRangeField
operator|.
name|newContainsQuery
argument_list|(
name|field
argument_list|,
operator|new
name|long
index|[]
block|{
operator|(
name|Long
operator|)
name|from
operator|+
operator|(
name|includeFrom
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
operator|(
name|Long
operator|)
name|to
operator|-
operator|(
name|includeTo
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|intersectsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
return|return
name|LongRangeField
operator|.
name|newIntersectsQuery
argument_list|(
name|field
argument_list|,
operator|new
name|long
index|[]
block|{
operator|(
name|Long
operator|)
name|from
operator|+
operator|(
name|includeFrom
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
operator|(
name|Long
operator|)
name|to
operator|-
operator|(
name|includeTo
condition|?
literal|0
else|:
literal|1
operator|)
block|}
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|RangeType
name|RangeType
parameter_list|(
name|String
name|name
parameter_list|,
name|NumberType
name|type
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|numberType
operator|=
name|type
expr_stmt|;
block|}
comment|/** Get the associated type name. */
DECL|method|typeName
specifier|public
specifier|final
name|String
name|typeName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getBytes
specifier|protected
specifier|abstract
name|byte
index|[]
name|getBytes
parameter_list|(
name|Range
name|range
parameter_list|)
function_decl|;
DECL|method|getRangeField
specifier|public
specifier|abstract
name|Field
name|getRangeField
parameter_list|(
name|String
name|name
parameter_list|,
name|Range
name|range
parameter_list|)
function_decl|;
DECL|method|createFields
specifier|public
name|List
argument_list|<
name|IndexableField
argument_list|>
name|createFields
parameter_list|(
name|String
name|name
parameter_list|,
name|Range
name|range
parameter_list|,
name|boolean
name|indexed
parameter_list|,
name|boolean
name|docValued
parameter_list|,
name|boolean
name|stored
parameter_list|)
block|{
assert|assert
name|range
operator|!=
literal|null
operator|:
literal|"range cannot be null when creating fields"
assert|;
name|List
argument_list|<
name|IndexableField
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexed
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|getRangeField
argument_list|(
name|name
argument_list|,
name|range
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// todo add docValues ranges once aggregations are supported
if|if
condition|(
name|stored
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
name|name
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
comment|/** parses from value. rounds according to included flag */
DECL|method|parseFrom
specifier|public
name|Number
name|parseFrom
parameter_list|(
name|RangeFieldType
name|fieldType
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|,
name|boolean
name|included
parameter_list|)
throws|throws
name|IOException
block|{
name|Number
name|value
init|=
name|numberType
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|coerce
argument_list|)
decl_stmt|;
return|return
name|included
condition|?
name|value
else|:
name|nextUp
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/** parses to value. rounds according to included flag */
DECL|method|parseTo
specifier|public
name|Number
name|parseTo
parameter_list|(
name|RangeFieldType
name|fieldType
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|,
name|boolean
name|included
parameter_list|)
throws|throws
name|IOException
block|{
name|Number
name|value
init|=
name|numberType
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|coerce
argument_list|)
decl_stmt|;
return|return
name|included
condition|?
name|value
else|:
name|nextDown
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|minValue
specifier|public
specifier|abstract
name|Number
name|minValue
parameter_list|()
function_decl|;
DECL|method|maxValue
specifier|public
specifier|abstract
name|Number
name|maxValue
parameter_list|()
function_decl|;
DECL|method|nextUp
specifier|public
specifier|abstract
name|Number
name|nextUp
parameter_list|(
name|Number
name|value
parameter_list|)
function_decl|;
DECL|method|nextDown
specifier|public
specifier|abstract
name|Number
name|nextDown
parameter_list|(
name|Number
name|value
parameter_list|)
function_decl|;
DECL|method|withinQuery
specifier|public
specifier|abstract
name|Query
name|withinQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
function_decl|;
DECL|method|containsQuery
specifier|public
specifier|abstract
name|Query
name|containsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
function_decl|;
DECL|method|intersectsQuery
specifier|public
specifier|abstract
name|Query
name|intersectsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
function_decl|;
DECL|method|rangeQuery
specifier|public
name|Query
name|rangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|from
parameter_list|,
name|Object
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|,
name|ShapeRelation
name|relation
parameter_list|,
annotation|@
name|Nullable
name|DateTimeZone
name|timeZone
parameter_list|,
annotation|@
name|Nullable
name|DateMathParser
name|dateMathParser
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|Number
name|lower
init|=
name|from
operator|==
literal|null
condition|?
name|minValue
argument_list|()
else|:
name|numberType
operator|.
name|parse
argument_list|(
name|from
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Number
name|upper
init|=
name|to
operator|==
literal|null
condition|?
name|maxValue
argument_list|()
else|:
name|numberType
operator|.
name|parse
argument_list|(
name|to
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|relation
operator|==
name|ShapeRelation
operator|.
name|WITHIN
condition|)
block|{
return|return
name|withinQuery
argument_list|(
name|field
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|,
name|includeFrom
argument_list|,
name|includeTo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|relation
operator|==
name|ShapeRelation
operator|.
name|CONTAINS
condition|)
block|{
return|return
name|containsQuery
argument_list|(
name|field
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|,
name|includeFrom
argument_list|,
name|includeTo
argument_list|)
return|;
block|}
return|return
name|intersectsQuery
argument_list|(
name|field
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|,
name|includeFrom
argument_list|,
name|includeTo
argument_list|)
return|;
block|}
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|numberType
specifier|private
specifier|final
name|NumberType
name|numberType
decl_stmt|;
block|}
comment|/** Class defining a range */
DECL|class|Range
specifier|public
specifier|static
class|class
name|Range
block|{
DECL|field|type
name|RangeType
name|type
decl_stmt|;
DECL|field|from
specifier|private
name|Number
name|from
decl_stmt|;
DECL|field|to
specifier|private
name|Number
name|to
decl_stmt|;
DECL|field|includeFrom
specifier|private
name|boolean
name|includeFrom
decl_stmt|;
DECL|field|includeTo
specifier|private
name|boolean
name|includeTo
decl_stmt|;
DECL|method|Range
specifier|public
name|Range
parameter_list|(
name|RangeType
name|type
parameter_list|,
name|Number
name|from
parameter_list|,
name|Number
name|to
parameter_list|,
name|boolean
name|includeFrom
parameter_list|,
name|boolean
name|includeTo
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|to
operator|=
name|to
expr_stmt|;
name|this
operator|.
name|includeFrom
operator|=
name|includeFrom
expr_stmt|;
name|this
operator|.
name|includeTo
operator|=
name|includeTo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|includeFrom
condition|?
literal|'['
else|:
literal|'('
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|includeFrom
operator|||
name|from
operator|.
name|equals
argument_list|(
name|type
operator|.
name|minValue
argument_list|()
argument_list|)
condition|?
name|from
else|:
name|type
operator|.
name|nextDown
argument_list|(
name|from
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|includeTo
operator|||
name|to
operator|.
name|equals
argument_list|(
name|type
operator|.
name|maxValue
argument_list|()
argument_list|)
condition|?
name|to
else|:
name|type
operator|.
name|nextUp
argument_list|(
name|to
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|includeTo
condition|?
literal|']'
else|:
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

