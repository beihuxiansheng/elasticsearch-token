begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_enum
DECL|enum|MapperUtils
enum|enum
name|MapperUtils
block|{     ;
comment|/** Split mapper and its descendants into object and field mappers. */
DECL|method|collect
specifier|public
specifier|static
name|void
name|collect
parameter_list|(
name|Mapper
name|mapper
parameter_list|,
name|Collection
argument_list|<
name|ObjectMapper
argument_list|>
name|objectMappers
parameter_list|,
name|Collection
argument_list|<
name|FieldMapper
argument_list|>
name|fieldMappers
parameter_list|)
block|{
if|if
condition|(
name|mapper
operator|instanceof
name|RootObjectMapper
condition|)
block|{
comment|// root mapper isn't really an object mapper
block|}
elseif|else
if|if
condition|(
name|mapper
operator|instanceof
name|ObjectMapper
condition|)
block|{
name|objectMappers
operator|.
name|add
argument_list|(
operator|(
name|ObjectMapper
operator|)
name|mapper
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mapper
operator|instanceof
name|FieldMapper
condition|)
block|{
name|fieldMappers
operator|.
name|add
argument_list|(
operator|(
name|FieldMapper
operator|)
name|mapper
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Mapper
name|child
range|:
name|mapper
control|)
block|{
name|collect
argument_list|(
name|child
argument_list|,
name|objectMappers
argument_list|,
name|fieldMappers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_enum

end_unit

