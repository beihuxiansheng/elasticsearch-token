begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|FieldStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|DateMathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|BytesRefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * This defines the core properties and functions to operate on a field.  */
end_comment

begin_class
DECL|class|MappedFieldType
specifier|public
specifier|abstract
class|class
name|MappedFieldType
extends|extends
name|FieldType
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|boost
specifier|private
name|float
name|boost
decl_stmt|;
comment|// TODO: remove this docvalues flag and use docValuesType
DECL|field|docValues
specifier|private
name|boolean
name|docValues
decl_stmt|;
DECL|field|indexAnalyzer
specifier|private
name|NamedAnalyzer
name|indexAnalyzer
decl_stmt|;
DECL|field|searchAnalyzer
specifier|private
name|NamedAnalyzer
name|searchAnalyzer
decl_stmt|;
DECL|field|searchQuoteAnalyzer
specifier|private
name|NamedAnalyzer
name|searchQuoteAnalyzer
decl_stmt|;
DECL|field|similarity
specifier|private
name|SimilarityProvider
name|similarity
decl_stmt|;
DECL|field|nullValue
specifier|private
name|Object
name|nullValue
decl_stmt|;
DECL|field|nullValueAsString
specifier|private
name|String
name|nullValueAsString
decl_stmt|;
comment|// for sending null value to _all field
DECL|field|eagerGlobalOrdinals
specifier|private
name|boolean
name|eagerGlobalOrdinals
decl_stmt|;
DECL|method|MappedFieldType
specifier|protected
name|MappedFieldType
parameter_list|(
name|MappedFieldType
name|ref
parameter_list|)
block|{
name|super
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|ref
operator|.
name|name
argument_list|()
expr_stmt|;
name|this
operator|.
name|boost
operator|=
name|ref
operator|.
name|boost
argument_list|()
expr_stmt|;
name|this
operator|.
name|docValues
operator|=
name|ref
operator|.
name|hasDocValues
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexAnalyzer
operator|=
name|ref
operator|.
name|indexAnalyzer
argument_list|()
expr_stmt|;
name|this
operator|.
name|searchAnalyzer
operator|=
name|ref
operator|.
name|searchAnalyzer
argument_list|()
expr_stmt|;
name|this
operator|.
name|searchQuoteAnalyzer
operator|=
name|ref
operator|.
name|searchQuoteAnalyzer
argument_list|()
expr_stmt|;
name|this
operator|.
name|similarity
operator|=
name|ref
operator|.
name|similarity
argument_list|()
expr_stmt|;
name|this
operator|.
name|nullValue
operator|=
name|ref
operator|.
name|nullValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|nullValueAsString
operator|=
name|ref
operator|.
name|nullValueAsString
argument_list|()
expr_stmt|;
name|this
operator|.
name|eagerGlobalOrdinals
operator|=
name|ref
operator|.
name|eagerGlobalOrdinals
expr_stmt|;
block|}
DECL|method|MappedFieldType
specifier|public
name|MappedFieldType
parameter_list|()
block|{
name|setTokenized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setStored
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setStoreTermVectors
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setOmitNorms
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
expr_stmt|;
name|setBoost
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
specifier|abstract
name|MappedFieldType
name|clone
parameter_list|()
function_decl|;
comment|/** Return a fielddata builder for this field. */
DECL|method|fielddataBuilder
specifier|public
name|IndexFieldData
operator|.
name|Builder
name|fielddataBuilder
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Fielddata is not supported on fields of type ["
operator|+
name|typeName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|MappedFieldType
name|fieldType
init|=
operator|(
name|MappedFieldType
operator|)
name|o
decl_stmt|;
comment|// check similarity first because we need to check the name, and it might be null
comment|// TODO: SimilarityProvider should have equals?
if|if
condition|(
name|similarity
operator|==
literal|null
operator|||
name|fieldType
operator|.
name|similarity
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|similarity
operator|!=
name|fieldType
operator|.
name|similarity
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|similarity
operator|.
name|name
argument_list|()
argument_list|,
name|fieldType
operator|.
name|similarity
operator|.
name|name
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|boost
operator|==
name|fieldType
operator|.
name|boost
operator|&&
name|docValues
operator|==
name|fieldType
operator|.
name|docValues
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|fieldType
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|indexAnalyzer
argument_list|,
name|fieldType
operator|.
name|indexAnalyzer
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|searchAnalyzer
argument_list|,
name|fieldType
operator|.
name|searchAnalyzer
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|searchQuoteAnalyzer
argument_list|()
argument_list|,
name|fieldType
operator|.
name|searchQuoteAnalyzer
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|eagerGlobalOrdinals
argument_list|,
name|fieldType
operator|.
name|eagerGlobalOrdinals
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|nullValue
argument_list|,
name|fieldType
operator|.
name|nullValue
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|nullValueAsString
argument_list|,
name|fieldType
operator|.
name|nullValueAsString
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|super
operator|.
name|hashCode
argument_list|()
argument_list|,
name|name
argument_list|,
name|boost
argument_list|,
name|docValues
argument_list|,
name|indexAnalyzer
argument_list|,
name|searchAnalyzer
argument_list|,
name|searchQuoteAnalyzer
argument_list|,
name|eagerGlobalOrdinals
argument_list|,
name|similarity
operator|==
literal|null
condition|?
literal|null
else|:
name|similarity
operator|.
name|name
argument_list|()
argument_list|,
name|nullValue
argument_list|,
name|nullValueAsString
argument_list|)
return|;
block|}
comment|// norelease: we need to override freeze() and add safety checks that all settings are actually set
comment|/** Returns the name of this type, as would be specified in mapping properties */
DECL|method|typeName
specifier|public
specifier|abstract
name|String
name|typeName
parameter_list|()
function_decl|;
comment|/** Checks this type is the same type as other. Adds a conflict if they are different. */
DECL|method|checkTypeName
specifier|private
specifier|final
name|void
name|checkTypeName
parameter_list|(
name|MappedFieldType
name|other
parameter_list|)
block|{
if|if
condition|(
name|typeName
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|typeName
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mapper ["
operator|+
name|name
operator|+
literal|"] cannot be changed from type ["
operator|+
name|typeName
argument_list|()
operator|+
literal|"] to ["
operator|+
name|other
operator|.
name|typeName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|other
operator|.
name|getClass
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Type names equal for class "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" and "
operator|+
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Checks for any conflicts between this field type and other.      * If strict is true, all properties must be equal.      * Otherwise, only properties which must never change in an index are checked.      */
DECL|method|checkCompatibility
specifier|public
name|void
name|checkCompatibility
parameter_list|(
name|MappedFieldType
name|other
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
name|checkTypeName
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|boolean
name|indexed
init|=
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
decl_stmt|;
name|boolean
name|mergeWithIndexed
init|=
name|other
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
decl_stmt|;
comment|// TODO: should be validating if index options go "up" (but "down" is ok)
if|if
condition|(
name|indexed
operator|!=
name|mergeWithIndexed
operator|||
name|tokenized
argument_list|()
operator|!=
name|other
operator|.
name|tokenized
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [index] values"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stored
argument_list|()
operator|!=
name|other
operator|.
name|stored
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [store] values"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasDocValues
argument_list|()
operator|!=
name|other
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [doc_values] values"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|omitNorms
argument_list|()
operator|&&
operator|!
name|other
operator|.
name|omitNorms
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [norms] values, cannot change from disable to enabled"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|storeTermVectors
argument_list|()
operator|!=
name|other
operator|.
name|storeTermVectors
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [store_term_vector] values"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|storeTermVectorOffsets
argument_list|()
operator|!=
name|other
operator|.
name|storeTermVectorOffsets
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [store_term_vector_offsets] values"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|storeTermVectorPositions
argument_list|()
operator|!=
name|other
operator|.
name|storeTermVectorPositions
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [store_term_vector_positions] values"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|storeTermVectorPayloads
argument_list|()
operator|!=
name|other
operator|.
name|storeTermVectorPayloads
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [store_term_vector_payloads] values"
argument_list|)
expr_stmt|;
block|}
comment|// null and "default"-named index analyzers both mean the default is used
if|if
condition|(
name|indexAnalyzer
argument_list|()
operator|==
literal|null
operator|||
literal|"default"
operator|.
name|equals
argument_list|(
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|indexAnalyzer
argument_list|()
operator|!=
literal|null
operator|&&
literal|"default"
operator|.
name|equals
argument_list|(
name|other
operator|.
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [analyzer]"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|other
operator|.
name|indexAnalyzer
argument_list|()
operator|==
literal|null
operator|||
literal|"default"
operator|.
name|equals
argument_list|(
name|other
operator|.
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [analyzer]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [analyzer]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|similarity
argument_list|()
argument_list|,
name|other
operator|.
name|similarity
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [similarity]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|strict
condition|)
block|{
if|if
condition|(
name|omitNorms
argument_list|()
operator|!=
name|other
operator|.
name|omitNorms
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is used by multiple types. Set update_all_types to true to update [omit_norms] across all types."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boost
argument_list|()
operator|!=
name|other
operator|.
name|boost
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is used by multiple types. Set update_all_types to true to update [boost] across all types."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|searchAnalyzer
argument_list|()
argument_list|,
name|other
operator|.
name|searchAnalyzer
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is used by multiple types. Set update_all_types to true to update [search_analyzer] across all types."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|searchQuoteAnalyzer
argument_list|()
argument_list|,
name|other
operator|.
name|searchQuoteAnalyzer
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is used by multiple types. Set update_all_types to true to update [search_quote_analyzer] across all types."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|nullValue
argument_list|()
argument_list|,
name|other
operator|.
name|nullValue
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is used by multiple types. Set update_all_types to true to update [null_value] across all types."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eagerGlobalOrdinals
argument_list|()
operator|!=
name|other
operator|.
name|eagerGlobalOrdinals
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is used by multiple types. Set update_all_types to true to update [eager_global_ordinals] across all types."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isNumeric
specifier|public
name|boolean
name|isNumeric
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|isSortable
specifier|public
name|boolean
name|isSortable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|boost
specifier|public
name|float
name|boost
parameter_list|()
block|{
return|return
name|boost
return|;
block|}
DECL|method|setBoost
specifier|public
name|void
name|setBoost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
DECL|method|hasDocValues
specifier|public
name|boolean
name|hasDocValues
parameter_list|()
block|{
return|return
name|docValues
return|;
block|}
DECL|method|setHasDocValues
specifier|public
name|void
name|setHasDocValues
parameter_list|(
name|boolean
name|hasDocValues
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|docValues
operator|=
name|hasDocValues
expr_stmt|;
block|}
DECL|method|indexAnalyzer
specifier|public
name|NamedAnalyzer
name|indexAnalyzer
parameter_list|()
block|{
return|return
name|indexAnalyzer
return|;
block|}
DECL|method|setIndexAnalyzer
specifier|public
name|void
name|setIndexAnalyzer
parameter_list|(
name|NamedAnalyzer
name|analyzer
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexAnalyzer
operator|=
name|analyzer
expr_stmt|;
block|}
DECL|method|searchAnalyzer
specifier|public
name|NamedAnalyzer
name|searchAnalyzer
parameter_list|()
block|{
return|return
name|searchAnalyzer
return|;
block|}
DECL|method|setSearchAnalyzer
specifier|public
name|void
name|setSearchAnalyzer
parameter_list|(
name|NamedAnalyzer
name|analyzer
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|searchAnalyzer
operator|=
name|analyzer
expr_stmt|;
block|}
DECL|method|searchQuoteAnalyzer
specifier|public
name|NamedAnalyzer
name|searchQuoteAnalyzer
parameter_list|()
block|{
return|return
name|searchQuoteAnalyzer
operator|==
literal|null
condition|?
name|searchAnalyzer
else|:
name|searchQuoteAnalyzer
return|;
block|}
DECL|method|setSearchQuoteAnalyzer
specifier|public
name|void
name|setSearchQuoteAnalyzer
parameter_list|(
name|NamedAnalyzer
name|analyzer
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|searchQuoteAnalyzer
operator|=
name|analyzer
expr_stmt|;
block|}
DECL|method|similarity
specifier|public
name|SimilarityProvider
name|similarity
parameter_list|()
block|{
return|return
name|similarity
return|;
block|}
DECL|method|setSimilarity
specifier|public
name|void
name|setSimilarity
parameter_list|(
name|SimilarityProvider
name|similarity
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|similarity
operator|=
name|similarity
expr_stmt|;
block|}
comment|/** Returns the value that should be added when JSON null is found, or null if no value should be added */
DECL|method|nullValue
specifier|public
name|Object
name|nullValue
parameter_list|()
block|{
return|return
name|nullValue
return|;
block|}
comment|/** Returns the null value stringified, so it can be used for e.g. _all field, or null if there is no null value */
DECL|method|nullValueAsString
specifier|public
name|String
name|nullValueAsString
parameter_list|()
block|{
return|return
name|nullValueAsString
return|;
block|}
comment|/** Sets the null value and initializes the string version */
DECL|method|setNullValue
specifier|public
name|void
name|setNullValue
parameter_list|(
name|Object
name|nullValue
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|nullValue
operator|=
name|nullValue
expr_stmt|;
name|this
operator|.
name|nullValueAsString
operator|=
name|nullValue
operator|==
literal|null
condition|?
literal|null
else|:
name|nullValue
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|/** Returns the actual value of the field. */
DECL|method|value
specifier|public
name|Object
name|value
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
comment|/** Returns the value that will be used as a result for search. Can be only of specific types... */
DECL|method|valueForSearch
specifier|public
name|Object
name|valueForSearch
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
comment|/** Returns the indexed value used to construct search "values". */
DECL|method|indexedValueForSearch
specifier|public
name|BytesRef
name|indexedValueForSearch
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|BytesRefs
operator|.
name|toBytesRef
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Should the field query {@link #termQuery(Object, org.elasticsearch.index.query.QueryShardContext)}  be used when detecting this      * field in query string.      */
DECL|method|useTermQueryWithQueryString
specifier|public
name|boolean
name|useTermQueryWithQueryString
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Creates a term associated with the field of this mapper for the given      * value. Its important to use termQuery when building term queries because      * things like ParentFieldMapper override it to make more interesting      * queries.      */
DECL|method|createTerm
specifier|protected
name|Term
name|createTerm
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|Term
argument_list|(
name|name
argument_list|()
argument_list|,
name|indexedValueForSearch
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|termQuery
specifier|public
name|Query
name|termQuery
parameter_list|(
name|Object
name|value
parameter_list|,
annotation|@
name|Nullable
name|QueryShardContext
name|context
parameter_list|)
block|{
name|TermQuery
name|query
init|=
operator|new
name|TermQuery
argument_list|(
name|createTerm
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|boost
operator|==
literal|1f
operator|||
operator|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
operator|)
condition|)
block|{
return|return
name|query
return|;
block|}
return|return
operator|new
name|BoostQuery
argument_list|(
name|query
argument_list|,
name|boost
argument_list|)
return|;
block|}
DECL|method|termsQuery
specifier|public
name|Query
name|termsQuery
parameter_list|(
name|List
name|values
parameter_list|,
annotation|@
name|Nullable
name|QueryShardContext
name|context
parameter_list|)
block|{
name|BytesRef
index|[]
name|bytesRefs
init|=
operator|new
name|BytesRef
index|[
name|values
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesRefs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytesRefs
index|[
name|i
index|]
operator|=
name|indexedValueForSearch
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TermsQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|bytesRefs
argument_list|)
return|;
block|}
DECL|method|rangeQuery
specifier|public
name|Query
name|rangeQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|TermRangeQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|lowerTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|indexedValueForSearch
argument_list|(
name|lowerTerm
argument_list|)
argument_list|,
name|upperTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|indexedValueForSearch
argument_list|(
name|upperTerm
argument_list|)
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
DECL|method|fuzzyQuery
specifier|public
name|Query
name|fuzzyQuery
parameter_list|(
name|Object
name|value
parameter_list|,
name|Fuzziness
name|fuzziness
parameter_list|,
name|int
name|prefixLength
parameter_list|,
name|int
name|maxExpansions
parameter_list|,
name|boolean
name|transpositions
parameter_list|)
block|{
return|return
operator|new
name|FuzzyQuery
argument_list|(
name|createTerm
argument_list|(
name|value
argument_list|)
argument_list|,
name|fuzziness
operator|.
name|asDistance
argument_list|(
name|BytesRefs
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|,
name|prefixLength
argument_list|,
name|maxExpansions
argument_list|,
name|transpositions
argument_list|)
return|;
block|}
DECL|method|prefixQuery
specifier|public
name|Query
name|prefixQuery
parameter_list|(
name|String
name|value
parameter_list|,
annotation|@
name|Nullable
name|MultiTermQuery
operator|.
name|RewriteMethod
name|method
parameter_list|,
annotation|@
name|Nullable
name|QueryShardContext
name|context
parameter_list|)
block|{
name|PrefixQuery
name|query
init|=
operator|new
name|PrefixQuery
argument_list|(
name|createTerm
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
DECL|method|regexpQuery
specifier|public
name|Query
name|regexpQuery
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|maxDeterminizedStates
parameter_list|,
annotation|@
name|Nullable
name|MultiTermQuery
operator|.
name|RewriteMethod
name|method
parameter_list|,
annotation|@
name|Nullable
name|QueryShardContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|numericType
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryShardException
argument_list|(
name|context
argument_list|,
literal|"Cannot use regular expression to filter numeric field ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|RegexpQuery
name|query
init|=
operator|new
name|RegexpQuery
argument_list|(
name|createTerm
argument_list|(
name|value
argument_list|)
argument_list|,
name|flags
argument_list|,
name|maxDeterminizedStates
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
DECL|method|nullValueQuery
specifier|public
name|Query
name|nullValueQuery
parameter_list|()
block|{
if|if
condition|(
name|nullValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|termQuery
argument_list|(
name|nullValue
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @return a {@link FieldStats} instance that maps to the type of this      * field or {@code null} if the provided index has no stats about the      * current field      */
DECL|method|stats
specifier|public
name|FieldStats
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|FieldStats
operator|.
name|Text
argument_list|(
name|maxDoc
argument_list|,
name|terms
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|terms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|,
name|terms
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|,
name|terms
operator|.
name|getMin
argument_list|()
argument_list|,
name|terms
operator|.
name|getMax
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * An enum used to describe the relation between the range of terms in a      * shard when compared with a query range      */
DECL|enum|Relation
specifier|public
specifier|static
enum|enum
name|Relation
block|{
DECL|enum constant|WITHIN
name|WITHIN
block|,
DECL|enum constant|INTERSECTS
name|INTERSECTS
block|,
DECL|enum constant|DISJOINT
name|DISJOINT
block|;     }
comment|/** Return whether all values of the given {@link IndexReader} are within the range,      *  outside the range or cross the range. The default implementation returns      *  {@link Relation#INTERSECTS}, which is always fine to return when there is      *  no way to check whether values are actually within bounds. */
DECL|method|isFieldWithinQuery
specifier|public
name|Relation
name|isFieldWithinQuery
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Object
name|from
parameter_list|,
name|Object
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|,
name|DateMathParser
name|dateMathParser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Relation
operator|.
name|INTERSECTS
return|;
block|}
comment|/** A term query to use when parsing a query string. Can return<tt>null</tt>. */
annotation|@
name|Nullable
DECL|method|queryStringTermQuery
specifier|public
name|Query
name|queryStringTermQuery
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|failIfNoDocValues
specifier|protected
specifier|final
name|void
name|failIfNoDocValues
parameter_list|()
block|{
if|if
condition|(
name|hasDocValues
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't load fielddata on ["
operator|+
name|name
argument_list|()
operator|+
literal|"] because fielddata is unsupported on fields of type ["
operator|+
name|typeName
argument_list|()
operator|+
literal|"]. Use doc values instead."
argument_list|)
throw|;
block|}
block|}
DECL|method|eagerGlobalOrdinals
specifier|public
name|boolean
name|eagerGlobalOrdinals
parameter_list|()
block|{
return|return
name|eagerGlobalOrdinals
return|;
block|}
DECL|method|setEagerGlobalOrdinals
specifier|public
name|void
name|setEagerGlobalOrdinals
parameter_list|(
name|boolean
name|eagerGlobalOrdinals
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|eagerGlobalOrdinals
operator|=
name|eagerGlobalOrdinals
expr_stmt|;
block|}
comment|/** Return a {@link DocValueFormat} that can be used to display and parse      *  values as returned by the fielddata API.      *  The default implementation returns a {@link DocValueFormat#RAW}. */
DECL|method|docValueFormat
specifier|public
name|DocValueFormat
name|docValueFormat
parameter_list|(
annotation|@
name|Nullable
name|String
name|format
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field ["
operator|+
name|name
argument_list|()
operator|+
literal|"] of type ["
operator|+
name|typeName
argument_list|()
operator|+
literal|"] does not support custom formats"
argument_list|)
throw|;
block|}
if|if
condition|(
name|timeZone
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field ["
operator|+
name|name
argument_list|()
operator|+
literal|"] of type ["
operator|+
name|typeName
argument_list|()
operator|+
literal|"] does not support custom time zones"
argument_list|)
throw|;
block|}
return|return
name|DocValueFormat
operator|.
name|RAW
return|;
block|}
block|}
end_class

end_unit

