begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.core
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|Completion50PostingsFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|CompletionAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|CompletionQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|FuzzyCompletionQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|PrefixCompletionQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|RegexCompletionQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|document
operator|.
name|SuggestField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|NumberType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ArrayValueMapperParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|ContextMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|ContextMappings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperBuilders
operator|.
name|completionField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
operator|.
name|parseMultiField
import|;
end_import

begin_comment
comment|/**  * Mapper for completion field. The field values are indexed as a weighted FST for  * fast auto-completion/search-as-you-type functionality.<br>  *  * Type properties:<br>  *<ul>  *<li>"analyzer": "simple", (default)</li>  *<li>"search_analyzer": "simple", (default)</li>  *<li>"preserve_separators" : true, (default)</li>  *<li>"preserve_position_increments" : true (default)</li>  *<li>"min_input_length": 50 (default)</li>  *<li>"contexts" : CONTEXTS</li>  *</ul>  * see {@link ContextMappings#load(Object, Version)} for CONTEXTS<br>  * see {@link #parse(ParseContext)} for acceptable inputs for indexing<br>  *<p>  *  This field type constructs completion queries that are run  *  against the weighted FST index by the {@link CompletionSuggester}.  *  This field can also be extended to add search criteria to suggestions  *  for query-time filtering and boosting (see {@link ContextMappings}  */
end_comment

begin_class
DECL|class|CompletionFieldMapper
specifier|public
class|class
name|CompletionFieldMapper
extends|extends
name|FieldMapper
implements|implements
name|ArrayValueMapperParser
block|{
DECL|field|CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"completion"
decl_stmt|;
DECL|class|Defaults
specifier|public
specifier|static
class|class
name|Defaults
block|{
DECL|field|FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|MappedFieldType
name|FIELD_TYPE
init|=
operator|new
name|CompletionFieldType
argument_list|()
decl_stmt|;
static|static
block|{
name|FIELD_TYPE
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|field|DEFAULT_PRESERVE_SEPARATORS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_PRESERVE_SEPARATORS
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_POSITION_INCREMENTS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_POSITION_INCREMENTS
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_MAX_INPUT_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_INPUT_LENGTH
init|=
literal|50
decl_stmt|;
block|}
DECL|class|Fields
specifier|public
specifier|static
class|class
name|Fields
block|{
comment|// Mapping field names
DECL|field|ANALYZER
specifier|public
specifier|static
specifier|final
name|ParseField
name|ANALYZER
init|=
operator|new
name|ParseField
argument_list|(
literal|"analyzer"
argument_list|)
decl_stmt|;
DECL|field|SEARCH_ANALYZER
specifier|public
specifier|static
specifier|final
name|ParseField
name|SEARCH_ANALYZER
init|=
operator|new
name|ParseField
argument_list|(
literal|"search_analyzer"
argument_list|)
decl_stmt|;
DECL|field|PRESERVE_SEPARATORS
specifier|public
specifier|static
specifier|final
name|ParseField
name|PRESERVE_SEPARATORS
init|=
operator|new
name|ParseField
argument_list|(
literal|"preserve_separators"
argument_list|)
decl_stmt|;
DECL|field|PRESERVE_POSITION_INCREMENTS
specifier|public
specifier|static
specifier|final
name|ParseField
name|PRESERVE_POSITION_INCREMENTS
init|=
operator|new
name|ParseField
argument_list|(
literal|"preserve_position_increments"
argument_list|)
decl_stmt|;
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|ParseField
name|TYPE
init|=
operator|new
name|ParseField
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
DECL|field|CONTEXTS
specifier|public
specifier|static
specifier|final
name|ParseField
name|CONTEXTS
init|=
operator|new
name|ParseField
argument_list|(
literal|"contexts"
argument_list|)
decl_stmt|;
DECL|field|MAX_INPUT_LENGTH
specifier|public
specifier|static
specifier|final
name|ParseField
name|MAX_INPUT_LENGTH
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_input_length"
argument_list|,
literal|"max_input_len"
argument_list|)
decl_stmt|;
comment|// Content field names
DECL|field|CONTENT_FIELD_NAME_INPUT
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_FIELD_NAME_INPUT
init|=
literal|"input"
decl_stmt|;
DECL|field|CONTENT_FIELD_NAME_WEIGHT
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_FIELD_NAME_WEIGHT
init|=
literal|"weight"
decl_stmt|;
DECL|field|CONTENT_FIELD_NAME_CONTEXTS
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_FIELD_NAME_CONTEXTS
init|=
literal|"contexts"
decl_stmt|;
block|}
DECL|field|ALLOWED_CONTENT_FIELD_NAMES
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ALLOWED_CONTENT_FIELD_NAMES
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_INPUT
argument_list|,
name|Fields
operator|.
name|CONTENT_FIELD_NAME_WEIGHT
argument_list|,
name|Fields
operator|.
name|CONTENT_FIELD_NAME_CONTEXTS
argument_list|)
decl_stmt|;
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|CompletionFieldMapper
operator|.
name|Builder
name|builder
init|=
name|completionField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|NamedAnalyzer
name|indexAnalyzer
init|=
literal|null
decl_stmt|;
name|NamedAnalyzer
name|searchAnalyzer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|node
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|fieldName
argument_list|,
name|Fields
operator|.
name|ANALYZER
argument_list|)
condition|)
block|{
name|indexAnalyzer
operator|=
name|getNamedAnalyzer
argument_list|(
name|parserContext
argument_list|,
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|fieldName
argument_list|,
name|Fields
operator|.
name|SEARCH_ANALYZER
argument_list|)
condition|)
block|{
name|searchAnalyzer
operator|=
name|getNamedAnalyzer
argument_list|(
name|parserContext
argument_list|,
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|fieldName
argument_list|,
name|Fields
operator|.
name|PRESERVE_SEPARATORS
argument_list|)
condition|)
block|{
name|builder
operator|.
name|preserveSeparators
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|fieldName
argument_list|,
name|Fields
operator|.
name|PRESERVE_POSITION_INCREMENTS
argument_list|)
condition|)
block|{
name|builder
operator|.
name|preservePositionIncrements
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|fieldName
argument_list|,
name|Fields
operator|.
name|MAX_INPUT_LENGTH
argument_list|)
condition|)
block|{
name|builder
operator|.
name|maxInputLength
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|fieldName
argument_list|,
name|Fields
operator|.
name|CONTEXTS
argument_list|)
condition|)
block|{
name|builder
operator|.
name|contextMappings
argument_list|(
name|ContextMappings
operator|.
name|load
argument_list|(
name|fieldNode
argument_list|,
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseMultiField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|parserContext
argument_list|,
name|fieldName
argument_list|,
name|fieldNode
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexAnalyzer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|searchAnalyzer
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"analyzer on completion field ["
operator|+
name|name
operator|+
literal|"] must be set when search_analyzer is set"
argument_list|)
throw|;
block|}
name|indexAnalyzer
operator|=
name|searchAnalyzer
operator|=
name|parserContext
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchAnalyzer
operator|==
literal|null
condition|)
block|{
name|searchAnalyzer
operator|=
name|indexAnalyzer
expr_stmt|;
block|}
name|builder
operator|.
name|indexAnalyzer
argument_list|(
name|indexAnalyzer
argument_list|)
expr_stmt|;
name|builder
operator|.
name|searchAnalyzer
argument_list|(
name|searchAnalyzer
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|getNamedAnalyzer
specifier|private
name|NamedAnalyzer
name|getNamedAnalyzer
parameter_list|(
name|ParserContext
name|parserContext
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NamedAnalyzer
name|analyzer
init|=
name|parserContext
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find default or mapped analyzer with name ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|analyzer
return|;
block|}
block|}
DECL|class|CompletionFieldType
specifier|public
specifier|static
specifier|final
class|class
name|CompletionFieldType
extends|extends
name|MappedFieldType
block|{
DECL|field|postingsFormat
specifier|private
specifier|static
name|PostingsFormat
name|postingsFormat
decl_stmt|;
DECL|field|preserveSep
specifier|private
name|boolean
name|preserveSep
init|=
name|Defaults
operator|.
name|DEFAULT_PRESERVE_SEPARATORS
decl_stmt|;
DECL|field|preservePositionIncrements
specifier|private
name|boolean
name|preservePositionIncrements
init|=
name|Defaults
operator|.
name|DEFAULT_POSITION_INCREMENTS
decl_stmt|;
DECL|field|contextMappings
specifier|private
name|ContextMappings
name|contextMappings
init|=
literal|null
decl_stmt|;
DECL|method|CompletionFieldType
specifier|public
name|CompletionFieldType
parameter_list|()
block|{
name|setFieldDataType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|CompletionFieldType
specifier|private
name|CompletionFieldType
parameter_list|(
name|CompletionFieldType
name|ref
parameter_list|)
block|{
name|super
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|this
operator|.
name|contextMappings
operator|=
name|ref
operator|.
name|contextMappings
expr_stmt|;
name|this
operator|.
name|preserveSep
operator|=
name|ref
operator|.
name|preserveSep
expr_stmt|;
name|this
operator|.
name|preservePositionIncrements
operator|=
name|ref
operator|.
name|preservePositionIncrements
expr_stmt|;
block|}
DECL|method|setPreserveSep
specifier|public
name|void
name|setPreserveSep
parameter_list|(
name|boolean
name|preserveSep
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|preserveSep
operator|=
name|preserveSep
expr_stmt|;
block|}
DECL|method|setPreservePositionIncrements
specifier|public
name|void
name|setPreservePositionIncrements
parameter_list|(
name|boolean
name|preservePositionIncrements
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|preservePositionIncrements
operator|=
name|preservePositionIncrements
expr_stmt|;
block|}
DECL|method|setContextMappings
specifier|public
name|void
name|setContextMappings
parameter_list|(
name|ContextMappings
name|contextMappings
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|contextMappings
operator|=
name|contextMappings
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|indexAnalyzer
specifier|public
name|NamedAnalyzer
name|indexAnalyzer
parameter_list|()
block|{
specifier|final
name|NamedAnalyzer
name|indexAnalyzer
init|=
name|super
operator|.
name|indexAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexAnalyzer
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|indexAnalyzer
operator|.
name|analyzer
argument_list|()
operator|instanceof
name|CompletionAnalyzer
operator|)
condition|)
block|{
return|return
operator|new
name|NamedAnalyzer
argument_list|(
name|indexAnalyzer
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|CompletionAnalyzer
argument_list|(
name|indexAnalyzer
argument_list|,
name|preserveSep
argument_list|,
name|preservePositionIncrements
argument_list|)
argument_list|)
return|;
block|}
return|return
name|indexAnalyzer
return|;
block|}
annotation|@
name|Override
DECL|method|searchAnalyzer
specifier|public
name|NamedAnalyzer
name|searchAnalyzer
parameter_list|()
block|{
specifier|final
name|NamedAnalyzer
name|searchAnalyzer
init|=
name|super
operator|.
name|searchAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|searchAnalyzer
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|searchAnalyzer
operator|.
name|analyzer
argument_list|()
operator|instanceof
name|CompletionAnalyzer
operator|)
condition|)
block|{
return|return
operator|new
name|NamedAnalyzer
argument_list|(
name|searchAnalyzer
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|CompletionAnalyzer
argument_list|(
name|searchAnalyzer
argument_list|,
name|preserveSep
argument_list|,
name|preservePositionIncrements
argument_list|)
argument_list|)
return|;
block|}
return|return
name|searchAnalyzer
return|;
block|}
comment|/**          * @return true if there are one or more context mappings defined          * for this field type          */
DECL|method|hasContextMappings
specifier|public
name|boolean
name|hasContextMappings
parameter_list|()
block|{
return|return
name|contextMappings
operator|!=
literal|null
return|;
block|}
comment|/**          * @return associated context mappings for this field type          */
DECL|method|getContextMappings
specifier|public
name|ContextMappings
name|getContextMappings
parameter_list|()
block|{
return|return
name|contextMappings
return|;
block|}
DECL|method|preserveSep
specifier|public
name|boolean
name|preserveSep
parameter_list|()
block|{
return|return
name|preserveSep
return|;
block|}
DECL|method|preservePositionIncrements
specifier|public
name|boolean
name|preservePositionIncrements
parameter_list|()
block|{
return|return
name|preservePositionIncrements
return|;
block|}
comment|/**          * @return postings format to use for this field-type          */
DECL|method|postingsFormat
specifier|public
specifier|static
specifier|synchronized
name|PostingsFormat
name|postingsFormat
parameter_list|()
block|{
if|if
condition|(
name|postingsFormat
operator|==
literal|null
condition|)
block|{
name|postingsFormat
operator|=
operator|new
name|Completion50PostingsFormat
argument_list|()
expr_stmt|;
block|}
return|return
name|postingsFormat
return|;
block|}
comment|/**          * Completion prefix query          */
DECL|method|prefixQuery
specifier|public
name|CompletionQuery
name|prefixQuery
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|PrefixCompletionQuery
argument_list|(
name|searchAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|createTerm
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Completion prefix regular expression query          */
DECL|method|regexpQuery
specifier|public
name|CompletionQuery
name|regexpQuery
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|maxDeterminizedStates
parameter_list|)
block|{
return|return
operator|new
name|RegexCompletionQuery
argument_list|(
name|createTerm
argument_list|(
name|value
argument_list|)
argument_list|,
name|flags
argument_list|,
name|maxDeterminizedStates
argument_list|)
return|;
block|}
comment|/**          * Completion prefix fuzzy query          */
DECL|method|fuzzyQuery
specifier|public
name|CompletionQuery
name|fuzzyQuery
parameter_list|(
name|String
name|value
parameter_list|,
name|Fuzziness
name|fuzziness
parameter_list|,
name|int
name|nonFuzzyPrefixLength
parameter_list|,
name|int
name|minFuzzyPrefixLength
parameter_list|,
name|int
name|maxExpansions
parameter_list|,
name|boolean
name|transpositions
parameter_list|,
name|boolean
name|unicodeAware
parameter_list|)
block|{
return|return
operator|new
name|FuzzyCompletionQuery
argument_list|(
name|searchAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|createTerm
argument_list|(
name|value
argument_list|)
argument_list|,
literal|null
argument_list|,
name|fuzziness
operator|.
name|asDistance
argument_list|()
argument_list|,
name|transpositions
argument_list|,
name|nonFuzzyPrefixLength
argument_list|,
name|minFuzzyPrefixLength
argument_list|,
name|unicodeAware
argument_list|,
name|maxExpansions
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|CompletionFieldType
name|that
init|=
operator|(
name|CompletionFieldType
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|preserveSep
operator|!=
name|that
operator|.
name|preserveSep
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|preservePositionIncrements
operator|!=
name|that
operator|.
name|preservePositionIncrements
condition|)
return|return
literal|false
return|;
return|return
operator|!
operator|(
name|contextMappings
operator|!=
literal|null
condition|?
operator|!
name|contextMappings
operator|.
name|equals
argument_list|(
name|that
operator|.
name|contextMappings
argument_list|)
else|:
name|that
operator|.
name|contextMappings
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|super
operator|.
name|hashCode
argument_list|()
argument_list|,
name|preserveSep
argument_list|,
name|preservePositionIncrements
argument_list|,
name|contextMappings
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|CompletionFieldType
name|clone
parameter_list|()
block|{
return|return
operator|new
name|CompletionFieldType
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|typeName
specifier|public
name|String
name|typeName
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|checkCompatibility
specifier|public
name|void
name|checkCompatibility
parameter_list|(
name|MappedFieldType
name|fieldType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
name|super
operator|.
name|checkCompatibility
argument_list|(
name|fieldType
argument_list|,
name|conflicts
argument_list|,
name|strict
argument_list|)
expr_stmt|;
name|CompletionFieldType
name|other
init|=
operator|(
name|CompletionFieldType
operator|)
name|fieldType
decl_stmt|;
if|if
condition|(
name|preservePositionIncrements
operator|!=
name|other
operator|.
name|preservePositionIncrements
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different [preserve_position_increments] values"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preserveSep
operator|!=
name|other
operator|.
name|preserveSep
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different [preserve_separators] values"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasContextMappings
argument_list|()
operator|!=
name|other
operator|.
name|hasContextMappings
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different [context_mappings] values"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasContextMappings
argument_list|()
operator|&&
name|contextMappings
operator|.
name|equals
argument_list|(
name|other
operator|.
name|contextMappings
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different [context_mappings] values"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|String
name|value
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isSortable
specifier|public
name|boolean
name|isSortable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Builder for {@link CompletionFieldMapper}      */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|FieldMapper
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|,
name|CompletionFieldMapper
argument_list|>
block|{
DECL|field|maxInputLength
specifier|private
name|int
name|maxInputLength
init|=
name|Defaults
operator|.
name|DEFAULT_MAX_INPUT_LENGTH
decl_stmt|;
DECL|field|contextMappings
specifier|private
name|ContextMappings
name|contextMappings
init|=
literal|null
decl_stmt|;
DECL|field|preserveSeparators
specifier|private
name|boolean
name|preserveSeparators
init|=
name|Defaults
operator|.
name|DEFAULT_PRESERVE_SEPARATORS
decl_stmt|;
DECL|field|preservePositionIncrements
specifier|private
name|boolean
name|preservePositionIncrements
init|=
name|Defaults
operator|.
name|DEFAULT_POSITION_INCREMENTS
decl_stmt|;
comment|/**          * @param name of the completion field to build          */
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
operator|new
name|CompletionFieldType
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|=
name|this
expr_stmt|;
block|}
comment|/**          * @param maxInputLength maximum expected prefix length          *                       NOTE: prefixes longer than this will          *                       be truncated          */
DECL|method|maxInputLength
specifier|public
name|Builder
name|maxInputLength
parameter_list|(
name|int
name|maxInputLength
parameter_list|)
block|{
if|if
condition|(
name|maxInputLength
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|Fields
operator|.
name|MAX_INPUT_LENGTH
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|" must be> 0 but was ["
operator|+
name|maxInputLength
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxInputLength
operator|=
name|maxInputLength
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Add context mapping to this field          * @param contextMappings see {@link ContextMappings#load(Object, Version)}          */
DECL|method|contextMappings
specifier|public
name|Builder
name|contextMappings
parameter_list|(
name|ContextMappings
name|contextMappings
parameter_list|)
block|{
name|this
operator|.
name|contextMappings
operator|=
name|contextMappings
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|preserveSeparators
specifier|public
name|Builder
name|preserveSeparators
parameter_list|(
name|boolean
name|preserveSeparators
parameter_list|)
block|{
name|this
operator|.
name|preserveSeparators
operator|=
name|preserveSeparators
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|preservePositionIncrements
specifier|public
name|Builder
name|preservePositionIncrements
parameter_list|(
name|boolean
name|preservePositionIncrements
parameter_list|)
block|{
name|this
operator|.
name|preservePositionIncrements
operator|=
name|preservePositionIncrements
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|CompletionFieldMapper
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|setupFieldType
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|CompletionFieldType
name|completionFieldType
init|=
operator|(
name|CompletionFieldType
operator|)
name|this
operator|.
name|fieldType
decl_stmt|;
name|completionFieldType
operator|.
name|setContextMappings
argument_list|(
name|contextMappings
argument_list|)
expr_stmt|;
name|completionFieldType
operator|.
name|setPreservePositionIncrements
argument_list|(
name|preservePositionIncrements
argument_list|)
expr_stmt|;
name|completionFieldType
operator|.
name|setPreserveSep
argument_list|(
name|preserveSeparators
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompletionFieldMapper
argument_list|(
name|name
argument_list|,
name|this
operator|.
name|fieldType
argument_list|,
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|,
name|multiFieldsBuilder
operator|.
name|build
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
argument_list|,
name|copyTo
argument_list|,
name|maxInputLength
argument_list|)
return|;
block|}
block|}
DECL|field|maxInputLength
specifier|private
name|int
name|maxInputLength
decl_stmt|;
DECL|method|CompletionFieldMapper
specifier|public
name|CompletionFieldMapper
parameter_list|(
name|String
name|simpleName
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|MultiFields
name|multiFields
parameter_list|,
name|CopyTo
name|copyTo
parameter_list|,
name|int
name|maxInputLength
parameter_list|)
block|{
name|super
argument_list|(
name|simpleName
argument_list|,
name|fieldType
argument_list|,
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|,
name|indexSettings
argument_list|,
name|multiFields
argument_list|,
name|copyTo
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxInputLength
operator|=
name|maxInputLength
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|CompletionFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|CompletionFieldType
operator|)
name|super
operator|.
name|fieldType
argument_list|()
return|;
block|}
comment|/**      * Parses and indexes inputs      *      * Parsing:      *  Acceptable format:      *   "STRING" - interpreted as field value (input)      *   "ARRAY" - each element can be one of "OBJECT" (see below)      *   "OBJECT" - { "input": STRING|ARRAY, "weight": STRING|INT, "contexts": ARRAY|OBJECT }      *      * Indexing:      *  if context mappings are defined, delegates to {@link ContextMappings#addField(ParseContext.Document, String, String, int, Map)}      *  else adds inputs as a {@link org.apache.lucene.search.suggest.document.SuggestField}      */
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
name|parse
parameter_list|(
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// parse
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CompletionInputMetaData
argument_list|>
name|inputMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"completion field ["
operator|+
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
operator|+
literal|"] does not support null values"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|parse
argument_list|(
name|context
argument_list|,
name|token
argument_list|,
name|parser
argument_list|,
name|inputMap
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|parse
argument_list|(
name|context
argument_list|,
name|token
argument_list|,
name|parser
argument_list|,
name|inputMap
argument_list|)
expr_stmt|;
block|}
comment|// index
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CompletionInputMetaData
argument_list|>
name|completionInput
range|:
name|inputMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|input
init|=
name|completionInput
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// truncate input
if|if
condition|(
name|input
operator|.
name|length
argument_list|()
operator|>
name|maxInputLength
condition|)
block|{
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxInputLength
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isHighSurrogate
argument_list|(
name|input
operator|.
name|charAt
argument_list|(
name|len
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
assert|assert
name|input
operator|.
name|length
argument_list|()
operator|>=
name|len
operator|+
literal|1
operator|&&
name|Character
operator|.
name|isLowSurrogate
argument_list|(
name|input
operator|.
name|charAt
argument_list|(
name|len
argument_list|)
argument_list|)
assert|;
name|len
operator|+=
literal|1
expr_stmt|;
block|}
name|input
operator|=
name|input
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|CompletionInputMetaData
name|metaData
init|=
name|completionInput
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|hasContextMappings
argument_list|()
condition|)
block|{
name|fieldType
argument_list|()
operator|.
name|getContextMappings
argument_list|()
operator|.
name|addField
argument_list|(
name|context
operator|.
name|doc
argument_list|()
argument_list|,
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|input
argument_list|,
name|metaData
operator|.
name|weight
argument_list|,
name|metaData
operator|.
name|contexts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|doc
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SuggestField
argument_list|(
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|input
argument_list|,
name|metaData
operator|.
name|weight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|multiFields
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Acceptable inputs:      *  "STRING" - interpreted as the field value (input)      *  "OBJECT" - { "input": STRING|ARRAY, "weight": STRING|INT, "contexts": ARRAY|OBJECT }      */
DECL|method|parse
specifier|private
name|void
name|parse
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|,
name|Token
name|token
parameter_list|,
name|XContentParser
name|parser
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CompletionInputMetaData
argument_list|>
name|inputMap
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|inputMap
operator|.
name|put
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|,
operator|new
name|CompletionInputMetaData
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Set
argument_list|<
name|CharSequence
argument_list|>
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|inputs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|weight
init|=
literal|1
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|CharSequence
argument_list|>
argument_list|>
name|contextsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ALLOWED_CONTENT_FIELD_NAMES
operator|.
name|contains
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown field name ["
operator|+
name|currentFieldName
operator|+
literal|"], must be one of "
operator|+
name|ALLOWED_CONTENT_FIELD_NAMES
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_INPUT
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"input array must have string values, but was ["
operator|+
name|token
operator|.
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"input must be a string or array, but was ["
operator|+
name|token
operator|.
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_WEIGHT
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
specifier|final
name|Number
name|weightValue
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
try|try
block|{
name|weightValue
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"weight must be an integer, but was ["
operator|+
name|parser
operator|.
name|text
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|NumberType
name|numberType
init|=
name|parser
operator|.
name|numberType
argument_list|()
decl_stmt|;
if|if
condition|(
name|NumberType
operator|.
name|LONG
operator|!=
name|numberType
operator|&&
name|NumberType
operator|.
name|INT
operator|!=
name|numberType
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"weight must be an integer, but was ["
operator|+
name|parser
operator|.
name|numberValue
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|weightValue
operator|=
name|parser
operator|.
name|numberValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"weight must be a number or string, but was ["
operator|+
name|token
operator|.
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|weightValue
operator|.
name|longValue
argument_list|()
operator|<
literal|0
operator|||
name|weightValue
operator|.
name|longValue
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// always parse a long to make sure we don't get overflow
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"weight must be in the interval [0..2147483647], but was ["
operator|+
name|weightValue
operator|.
name|longValue
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|weight
operator|=
name|weightValue
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_CONTEXTS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|hasContextMappings
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"contexts field is not supported for field: ["
operator|+
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|ContextMappings
name|contextMappings
init|=
name|fieldType
argument_list|()
operator|.
name|getContextMappings
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|currentToken
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentToken
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|ContextMapping
name|contextMapping
init|=
literal|null
decl_stmt|;
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|currentToken
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|currentToken
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|fieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
name|contextMapping
operator|=
name|contextMappings
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentToken
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
operator|||
name|currentToken
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
operator|||
name|currentToken
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
assert|assert
name|fieldName
operator|!=
literal|null
assert|;
assert|assert
operator|!
name|contextsMap
operator|.
name|containsKey
argument_list|(
name|fieldName
argument_list|)
assert|;
name|contextsMap
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|contextMapping
operator|.
name|parseContext
argument_list|(
name|parseContext
argument_list|,
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"contexts must be an object or an array , but was ["
operator|+
name|currentToken
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"contexts must be an object or an array , but was ["
operator|+
name|currentToken
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|input
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|inputMap
operator|.
name|containsKey
argument_list|(
name|input
argument_list|)
operator|==
literal|false
operator|||
name|inputMap
operator|.
name|get
argument_list|(
name|input
argument_list|)
operator|.
name|weight
operator|<
name|weight
condition|)
block|{
name|inputMap
operator|.
name|put
argument_list|(
name|input
argument_list|,
operator|new
name|CompletionInputMetaData
argument_list|(
name|contextsMap
argument_list|,
name|weight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse expected text or object got"
operator|+
name|token
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|class|CompletionInputMetaData
specifier|static
class|class
name|CompletionInputMetaData
block|{
DECL|field|contexts
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|CharSequence
argument_list|>
argument_list|>
name|contexts
decl_stmt|;
DECL|field|weight
specifier|public
specifier|final
name|int
name|weight
decl_stmt|;
DECL|method|CompletionInputMetaData
name|CompletionInputMetaData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|CharSequence
argument_list|>
argument_list|>
name|contexts
parameter_list|,
name|int
name|weight
parameter_list|)
block|{
name|this
operator|.
name|contexts
operator|=
name|contexts
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|simpleName
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TYPE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ANALYZER
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fieldType
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|SEARCH_ANALYZER
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fieldType
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PRESERVE_SEPARATORS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fieldType
argument_list|()
operator|.
name|preserveSep
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PRESERVE_POSITION_INCREMENTS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fieldType
argument_list|()
operator|.
name|preservePositionIncrements
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MAX_INPUT_LENGTH
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|maxInputLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|hasContextMappings
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|CONTEXTS
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|fieldType
argument_list|()
operator|.
name|getContextMappings
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|multiFields
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|parseCreateField
specifier|protected
name|void
name|parseCreateField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no-op
block|}
annotation|@
name|Override
DECL|method|contentType
specifier|protected
name|String
name|contentType
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|MergeResult
name|mergeResult
parameter_list|)
throws|throws
name|MergeMappingException
block|{
name|super
operator|.
name|merge
argument_list|(
name|mergeWith
argument_list|,
name|mergeResult
argument_list|)
expr_stmt|;
name|CompletionFieldMapper
name|fieldMergeWith
init|=
operator|(
name|CompletionFieldMapper
operator|)
name|mergeWith
decl_stmt|;
if|if
condition|(
operator|!
name|mergeResult
operator|.
name|simulate
argument_list|()
condition|)
block|{
name|this
operator|.
name|maxInputLength
operator|=
name|fieldMergeWith
operator|.
name|maxInputLength
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

