begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|FormatDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
operator|.
name|isArray
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
operator|.
name|lenientNodeBooleanValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
operator|.
name|nodeFloatValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
operator|.
name|nodeIntegerValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
operator|.
name|nodeMapValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
operator|.
name|nodeStringValue
import|;
end_import

begin_class
DECL|class|TypeParsers
specifier|public
class|class
name|TypeParsers
block|{
DECL|field|DOC_VALUES
specifier|public
specifier|static
specifier|final
name|String
name|DOC_VALUES
init|=
literal|"doc_values"
decl_stmt|;
DECL|field|INDEX_OPTIONS_DOCS
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_OPTIONS_DOCS
init|=
literal|"docs"
decl_stmt|;
DECL|field|INDEX_OPTIONS_FREQS
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_OPTIONS_FREQS
init|=
literal|"freqs"
decl_stmt|;
DECL|field|INDEX_OPTIONS_POSITIONS
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_OPTIONS_POSITIONS
init|=
literal|"positions"
decl_stmt|;
DECL|field|INDEX_OPTIONS_OFFSETS
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_OPTIONS_OFFSETS
init|=
literal|"offsets"
decl_stmt|;
DECL|field|DEPRECATION_LOGGER
specifier|private
specifier|static
specifier|final
name|DeprecationLogger
name|DEPRECATION_LOGGER
init|=
operator|new
name|DeprecationLogger
argument_list|(
name|Loggers
operator|.
name|getLogger
argument_list|(
name|TypeParsers
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|BOOLEAN_STRINGS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|BOOLEAN_STRINGS
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"true"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|nodeBooleanValue
specifier|public
specifier|static
name|boolean
name|nodeBooleanValue
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|node
parameter_list|,
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
block|{
comment|// Hook onto ParseFieldMatcher so that parsing becomes strict when setting index.query.parse.strict
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|isStrict
argument_list|()
condition|)
block|{
return|return
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|node
argument_list|)
return|;
block|}
else|else
block|{
comment|// TODO: remove this leniency in 6.0
if|if
condition|(
name|BOOLEAN_STRINGS
operator|.
name|contains
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|DEPRECATION_LOGGER
operator|.
name|deprecated
argument_list|(
literal|"Expected a boolean for property [{}] but got [{}]"
argument_list|,
name|name
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|XContentMapValues
operator|.
name|lenientNodeBooleanValue
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
DECL|method|parseAnalyzersAndTermVectors
specifier|private
specifier|static
name|void
name|parseAnalyzersAndTermVectors
parameter_list|(
name|FieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldNode
parameter_list|,
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
block|{
name|NamedAnalyzer
name|indexAnalyzer
init|=
literal|null
decl_stmt|;
name|NamedAnalyzer
name|searchAnalyzer
init|=
literal|null
decl_stmt|;
name|NamedAnalyzer
name|searchQuoteAnalyzer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|fieldNode
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"term_vector"
argument_list|)
condition|)
block|{
name|parseTermVector
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|toString
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store_term_vectors"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectors
argument_list|(
name|nodeBooleanValue
argument_list|(
literal|"store_term_vectors"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store_term_vector_offsets"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorOffsets
argument_list|(
name|nodeBooleanValue
argument_list|(
literal|"store_term_vector_offsets"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store_term_vector_positions"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPositions
argument_list|(
name|nodeBooleanValue
argument_list|(
literal|"store_term_vector_positions"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store_term_vector_payloads"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPayloads
argument_list|(
name|nodeBooleanValue
argument_list|(
literal|"store_term_vector_payloads"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"analyzer"
argument_list|)
condition|)
block|{
name|NamedAnalyzer
name|analyzer
init|=
name|parserContext
operator|.
name|getIndexAnalyzers
argument_list|()
operator|.
name|get
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"analyzer ["
operator|+
name|propNode
operator|.
name|toString
argument_list|()
operator|+
literal|"] not found for field ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|indexAnalyzer
operator|=
name|analyzer
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"search_analyzer"
argument_list|)
condition|)
block|{
name|NamedAnalyzer
name|analyzer
init|=
name|parserContext
operator|.
name|getIndexAnalyzers
argument_list|()
operator|.
name|get
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"analyzer ["
operator|+
name|propNode
operator|.
name|toString
argument_list|()
operator|+
literal|"] not found for field ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|searchAnalyzer
operator|=
name|analyzer
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"search_quote_analyzer"
argument_list|)
condition|)
block|{
name|NamedAnalyzer
name|analyzer
init|=
name|parserContext
operator|.
name|getIndexAnalyzers
argument_list|()
operator|.
name|get
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"analyzer ["
operator|+
name|propNode
operator|.
name|toString
argument_list|()
operator|+
literal|"] not found for field ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|searchQuoteAnalyzer
operator|=
name|analyzer
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexAnalyzer
operator|==
literal|null
operator|&&
name|searchAnalyzer
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"analyzer on field ["
operator|+
name|name
operator|+
literal|"] must be set when search_analyzer is set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|searchAnalyzer
operator|==
literal|null
operator|&&
name|searchQuoteAnalyzer
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"analyzer and search_analyzer on field ["
operator|+
name|name
operator|+
literal|"] must be set when search_quote_analyzer is set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|searchAnalyzer
operator|==
literal|null
condition|)
block|{
name|searchAnalyzer
operator|=
name|indexAnalyzer
expr_stmt|;
block|}
if|if
condition|(
name|searchQuoteAnalyzer
operator|==
literal|null
condition|)
block|{
name|searchQuoteAnalyzer
operator|=
name|searchAnalyzer
expr_stmt|;
block|}
if|if
condition|(
name|indexAnalyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|indexAnalyzer
argument_list|(
name|indexAnalyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchAnalyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|searchAnalyzer
argument_list|(
name|searchAnalyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchQuoteAnalyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|searchQuoteAnalyzer
argument_list|(
name|searchQuoteAnalyzer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseNorms
specifier|public
specifier|static
name|boolean
name|parseNorms
parameter_list|(
name|FieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|propName
parameter_list|,
name|Object
name|propNode
parameter_list|,
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
block|{
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"norms"
argument_list|)
condition|)
block|{
if|if
condition|(
name|propNode
operator|instanceof
name|Map
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|nodeMapValue
argument_list|(
name|propNode
argument_list|,
literal|"norms"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|propsIterator
init|=
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propsIterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry2
init|=
name|propsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|propName2
init|=
name|entry2
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|propNode2
init|=
name|entry2
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName2
operator|.
name|equals
argument_list|(
literal|"enabled"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|omitNorms
argument_list|(
operator|!
name|lenientNodeBooleanValue
argument_list|(
name|propNode2
argument_list|)
argument_list|)
expr_stmt|;
name|propsIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName2
operator|.
name|equals
argument_list|(
literal|"loading"
argument_list|)
condition|)
block|{
comment|// ignore for bw compat
name|propsIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|DocumentMapperParser
operator|.
name|checkNoRemainingFields
argument_list|(
name|propName
argument_list|,
name|properties
argument_list|,
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
argument_list|)
expr_stmt|;
name|DEPRECATION_LOGGER
operator|.
name|deprecated
argument_list|(
literal|"The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|omitNorms
argument_list|(
name|nodeBooleanValue
argument_list|(
literal|"norms"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"omit_norms"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|omitNorms
argument_list|(
name|nodeBooleanValue
argument_list|(
literal|"norms"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|DEPRECATION_LOGGER
operator|.
name|deprecated
argument_list|(
literal|"[omit_norms] is deprecated, please use [norms] instead with the opposite boolean value"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Parse text field attributes. In addition to {@link #parseField common attributes}      * this will parse analysis and term-vectors related settings.      */
DECL|method|parseTextField
specifier|public
specifier|static
name|void
name|parseTextField
parameter_list|(
name|FieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldNode
parameter_list|,
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
block|{
name|parseField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|fieldNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
name|parseAnalyzersAndTermVectors
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|fieldNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|fieldNode
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|parseNorms
argument_list|(
name|builder
argument_list|,
name|propName
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Parse common field attributes such as {@code doc_values} or {@code store}.      */
DECL|method|parseField
specifier|public
specifier|static
name|void
name|parseField
parameter_list|(
name|FieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldNode
parameter_list|,
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
block|{
name|Version
name|indexVersionCreated
init|=
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|fieldNode
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|false
operator|==
name|propName
operator|.
name|equals
argument_list|(
literal|"null_value"
argument_list|)
operator|&&
name|propNode
operator|==
literal|null
condition|)
block|{
comment|/*                  * No properties *except* null_value are allowed to have null. So we catch it here and tell the user something useful rather                  * than send them a null pointer exception later.                  */
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"["
operator|+
name|propName
operator|+
literal|"] must not have a [null] value"
argument_list|)
throw|;
block|}
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|store
argument_list|(
name|parseStore
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|toString
argument_list|()
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"index"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|index
argument_list|(
name|parseIndex
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|toString
argument_list|()
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
name|DOC_VALUES
argument_list|)
condition|)
block|{
name|builder
operator|.
name|docValues
argument_list|(
name|nodeBooleanValue
argument_list|(
name|DOC_VALUES
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"boost"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|boost
argument_list|(
name|nodeFloatValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
operator|&&
name|parseNorms
argument_list|(
name|builder
argument_list|,
name|propName
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"index_options"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|indexOptions
argument_list|(
name|nodeIndexOptionValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"include_in_all"
argument_list|)
condition|)
block|{
if|if
condition|(
name|parserContext
operator|.
name|isWithinMultiField
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"include_in_all in multi fields is not allowed. Found the include_in_all in field ["
operator|+
name|name
operator|+
literal|"] which is within a multi field."
argument_list|)
throw|;
block|}
else|else
block|{
name|builder
operator|.
name|includeInAll
argument_list|(
name|nodeBooleanValue
argument_list|(
literal|"include_in_all"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"similarity"
argument_list|)
condition|)
block|{
name|SimilarityProvider
name|similarityProvider
init|=
name|resolveSimilarity
argument_list|(
name|parserContext
argument_list|,
name|name
argument_list|,
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|similarity
argument_list|(
name|similarityProvider
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"fielddata"
argument_list|)
operator|&&
name|propNode
operator|instanceof
name|Map
operator|&&
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
condition|)
block|{
comment|// ignore for bw compat
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseMultiField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|parserContext
argument_list|,
name|propName
argument_list|,
name|propNode
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"copy_to"
argument_list|)
condition|)
block|{
if|if
condition|(
name|parserContext
operator|.
name|isWithinMultiField
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"copy_to in multi fields is not allowed. Found the copy_to in field ["
operator|+
name|name
operator|+
literal|"] which is within a multi field."
argument_list|)
throw|;
block|}
else|else
block|{
name|parseCopyFields
argument_list|(
name|propNode
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseMultiField
specifier|public
specifier|static
name|boolean
name|parseMultiField
parameter_list|(
name|FieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|,
name|String
name|propName
parameter_list|,
name|Object
name|propNode
parameter_list|)
block|{
name|parserContext
operator|=
name|parserContext
operator|.
name|createMultiFieldContext
argument_list|(
name|parserContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"fields"
argument_list|)
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|multiFieldsPropNodes
decl_stmt|;
if|if
condition|(
name|propNode
operator|instanceof
name|List
operator|&&
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|propNode
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|multiFieldsPropNodes
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propNode
operator|instanceof
name|Map
condition|)
block|{
name|multiFieldsPropNodes
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|propNode
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"expected map for property [fields] on field ["
operator|+
name|propNode
operator|+
literal|"] or "
operator|+
literal|"["
operator|+
name|propName
operator|+
literal|"] but got a "
operator|+
name|propNode
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|multiFieldEntry
range|:
name|multiFieldsPropNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|multiFieldName
init|=
name|multiFieldEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|multiFieldName
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Field name ["
operator|+
name|multiFieldName
operator|+
literal|"] which is a multi field of ["
operator|+
name|name
operator|+
literal|"] cannot contain '.'"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|multiFieldEntry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
operator|)
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"illegal field ["
operator|+
name|multiFieldName
operator|+
literal|"], only fields can be specified inside fields"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|multiFieldNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|multiFieldEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|type
decl_stmt|;
name|Object
name|typeNode
init|=
name|multiFieldNodes
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeNode
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|typeNode
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"no type specified for property ["
operator|+
name|multiFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|ObjectMapper
operator|.
name|CONTENT_TYPE
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|ObjectMapper
operator|.
name|NESTED_CONTENT_TYPE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Type ["
operator|+
name|type
operator|+
literal|"] cannot be used in multi field"
argument_list|)
throw|;
block|}
name|Mapper
operator|.
name|TypeParser
name|typeParser
init|=
name|parserContext
operator|.
name|typeParser
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"no handler for type ["
operator|+
name|type
operator|+
literal|"] declared on field ["
operator|+
name|multiFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|addMultiField
argument_list|(
name|typeParser
operator|.
name|parse
argument_list|(
name|multiFieldName
argument_list|,
name|multiFieldNodes
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|multiFieldNodes
operator|.
name|remove
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|DocumentMapperParser
operator|.
name|checkNoRemainingFields
argument_list|(
name|propName
argument_list|,
name|multiFieldNodes
argument_list|,
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|nodeIndexOptionValue
specifier|private
specifier|static
name|IndexOptions
name|nodeIndexOptionValue
parameter_list|(
specifier|final
name|Object
name|propNode
parameter_list|)
block|{
specifier|final
name|String
name|value
init|=
name|propNode
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|INDEX_OPTIONS_OFFSETS
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
return|;
block|}
elseif|else
if|if
condition|(
name|INDEX_OPTIONS_POSITIONS
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
return|;
block|}
elseif|else
if|if
condition|(
name|INDEX_OPTIONS_FREQS
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
return|;
block|}
elseif|else
if|if
condition|(
name|INDEX_OPTIONS_DOCS
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|IndexOptions
operator|.
name|DOCS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse index option [{}]"
argument_list|,
name|value
argument_list|)
throw|;
block|}
block|}
DECL|method|parseDateTimeFormatter
specifier|public
specifier|static
name|FormatDateTimeFormatter
name|parseDateTimeFormatter
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|Joda
operator|.
name|forPattern
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parseTermVector
specifier|public
specifier|static
name|void
name|parseTermVector
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|termVector
parameter_list|,
name|FieldMapper
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectors
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"with_offsets"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions_offsets"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|storeTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions_payloads"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|storeTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions_offsets_payloads"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|storeTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|storeTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"wrong value for termVector ["
operator|+
name|termVector
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseIndex
specifier|public
specifier|static
name|boolean
name|parseIndex
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|index
parameter_list|,
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|"true"
case|:
return|return
literal|true
return|;
case|case
literal|"false"
case|:
return|return
literal|false
return|;
case|case
literal|"not_analyzed"
case|:
case|case
literal|"analyzed"
case|:
case|case
literal|"no"
case|:
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|isStrict
argument_list|()
operator|==
literal|false
condition|)
block|{
name|DEPRECATION_LOGGER
operator|.
name|deprecated
argument_list|(
literal|"Expected a boolean for property [index] but got [{}]"
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
literal|"no"
operator|.
name|equals
argument_list|(
name|index
argument_list|)
operator|==
literal|false
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't parse [index] value ["
operator|+
name|index
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"], expected [true] or [false]"
argument_list|)
throw|;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't parse [index] value ["
operator|+
name|index
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"], expected [true] or [false]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseStore
specifier|public
specifier|static
name|boolean
name|parseStore
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|store
parameter_list|,
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|isStrict
argument_list|()
condition|)
block|{
return|return
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|store
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|BOOLEAN_STRINGS
operator|.
name|contains
argument_list|(
name|store
argument_list|)
operator|==
literal|false
condition|)
block|{
name|DEPRECATION_LOGGER
operator|.
name|deprecated
argument_list|(
literal|"Expected a boolean for property [store] but got [{}]"
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|store
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|store
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|lenientNodeBooleanValue
argument_list|(
name|store
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|parseCopyFields
specifier|public
specifier|static
name|void
name|parseCopyFields
parameter_list|(
name|Object
name|propNode
parameter_list|,
name|FieldMapper
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|FieldMapper
operator|.
name|CopyTo
operator|.
name|Builder
name|copyToBuilder
init|=
operator|new
name|FieldMapper
operator|.
name|CopyTo
operator|.
name|Builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|isArray
argument_list|(
name|propNode
argument_list|)
condition|)
block|{
for|for
control|(
name|Object
name|node
range|:
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|propNode
control|)
block|{
name|copyToBuilder
operator|.
name|add
argument_list|(
name|nodeStringValue
argument_list|(
name|node
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|copyToBuilder
operator|.
name|add
argument_list|(
name|nodeStringValue
argument_list|(
name|propNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|copyTo
argument_list|(
name|copyToBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|resolveSimilarity
specifier|private
specifier|static
name|SimilarityProvider
name|resolveSimilarity
parameter_list|(
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
operator|&&
literal|"default"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// "default" similarity has been renamed into "classic" in 3.x.
name|value
operator|=
literal|"classic"
expr_stmt|;
block|}
name|SimilarityProvider
name|similarityProvider
init|=
name|parserContext
operator|.
name|getSimilarity
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|similarityProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Unknown Similarity type ["
operator|+
name|value
operator|+
literal|"] for field ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|similarityProvider
return|;
block|}
block|}
end_class

end_unit

