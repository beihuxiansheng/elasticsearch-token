begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
operator|.
name|XAnalyzingSuggester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|NumberType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion2x
operator|.
name|AnalyzingCompletionLookupProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion2x
operator|.
name|Completion090PostingsFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion2x
operator|.
name|CompletionTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion2x
operator|.
name|context
operator|.
name|ContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion2x
operator|.
name|context
operator|.
name|ContextMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion2x
operator|.
name|context
operator|.
name|ContextMapping
operator|.
name|ContextConfig
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|TypeParsers
operator|.
name|parseMultiField
import|;
end_import

begin_class
DECL|class|CompletionFieldMapper2x
specifier|public
class|class
name|CompletionFieldMapper2x
extends|extends
name|FieldMapper
block|{
DECL|field|CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"completion"
decl_stmt|;
DECL|class|Defaults
specifier|public
specifier|static
class|class
name|Defaults
block|{
DECL|field|FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|CompletionFieldType
name|FIELD_TYPE
init|=
operator|new
name|CompletionFieldType
argument_list|()
decl_stmt|;
static|static
block|{
name|FIELD_TYPE
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|field|DEFAULT_PRESERVE_SEPARATORS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_PRESERVE_SEPARATORS
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_POSITION_INCREMENTS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_POSITION_INCREMENTS
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_HAS_PAYLOADS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_HAS_PAYLOADS
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_MAX_INPUT_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_INPUT_LENGTH
init|=
literal|50
decl_stmt|;
block|}
DECL|class|Fields
specifier|public
specifier|static
class|class
name|Fields
block|{
comment|// Mapping field names
DECL|field|ANALYZER
specifier|public
specifier|static
specifier|final
name|String
name|ANALYZER
init|=
literal|"analyzer"
decl_stmt|;
DECL|field|SEARCH_ANALYZER
specifier|public
specifier|static
specifier|final
name|ParseField
name|SEARCH_ANALYZER
init|=
operator|new
name|ParseField
argument_list|(
literal|"search_analyzer"
argument_list|)
decl_stmt|;
DECL|field|PRESERVE_SEPARATORS
specifier|public
specifier|static
specifier|final
name|ParseField
name|PRESERVE_SEPARATORS
init|=
operator|new
name|ParseField
argument_list|(
literal|"preserve_separators"
argument_list|)
decl_stmt|;
DECL|field|PRESERVE_POSITION_INCREMENTS
specifier|public
specifier|static
specifier|final
name|ParseField
name|PRESERVE_POSITION_INCREMENTS
init|=
operator|new
name|ParseField
argument_list|(
literal|"preserve_position_increments"
argument_list|)
decl_stmt|;
DECL|field|PAYLOADS
specifier|public
specifier|static
specifier|final
name|String
name|PAYLOADS
init|=
literal|"payloads"
decl_stmt|;
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"type"
decl_stmt|;
DECL|field|MAX_INPUT_LENGTH
specifier|public
specifier|static
specifier|final
name|ParseField
name|MAX_INPUT_LENGTH
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_input_length"
argument_list|,
literal|"max_input_len"
argument_list|)
decl_stmt|;
comment|// Content field names
DECL|field|CONTENT_FIELD_NAME_INPUT
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_FIELD_NAME_INPUT
init|=
literal|"input"
decl_stmt|;
DECL|field|CONTENT_FIELD_NAME_OUTPUT
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_FIELD_NAME_OUTPUT
init|=
literal|"output"
decl_stmt|;
DECL|field|CONTENT_FIELD_NAME_PAYLOAD
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_FIELD_NAME_PAYLOAD
init|=
literal|"payload"
decl_stmt|;
DECL|field|CONTENT_FIELD_NAME_WEIGHT
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_FIELD_NAME_WEIGHT
init|=
literal|"weight"
decl_stmt|;
DECL|field|CONTEXT
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT
init|=
literal|"context"
decl_stmt|;
block|}
DECL|field|ALLOWED_CONTENT_FIELD_NAMES
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ALLOWED_CONTENT_FIELD_NAMES
decl_stmt|;
static|static
block|{
name|ALLOWED_CONTENT_FIELD_NAMES
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|ALLOWED_CONTENT_FIELD_NAMES
operator|.
name|add
argument_list|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_INPUT
argument_list|)
expr_stmt|;
name|ALLOWED_CONTENT_FIELD_NAMES
operator|.
name|add
argument_list|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_OUTPUT
argument_list|)
expr_stmt|;
name|ALLOWED_CONTENT_FIELD_NAMES
operator|.
name|add
argument_list|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_PAYLOAD
argument_list|)
expr_stmt|;
name|ALLOWED_CONTENT_FIELD_NAMES
operator|.
name|add
argument_list|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_WEIGHT
argument_list|)
expr_stmt|;
name|ALLOWED_CONTENT_FIELD_NAMES
operator|.
name|add
argument_list|(
name|Fields
operator|.
name|CONTEXT
argument_list|)
expr_stmt|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|FieldMapper
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|,
name|CompletionFieldMapper2x
argument_list|>
block|{
DECL|field|preserveSeparators
specifier|private
name|boolean
name|preserveSeparators
init|=
name|Defaults
operator|.
name|DEFAULT_PRESERVE_SEPARATORS
decl_stmt|;
DECL|field|payloads
specifier|private
name|boolean
name|payloads
init|=
name|Defaults
operator|.
name|DEFAULT_HAS_PAYLOADS
decl_stmt|;
DECL|field|preservePositionIncrements
specifier|private
name|boolean
name|preservePositionIncrements
init|=
name|Defaults
operator|.
name|DEFAULT_POSITION_INCREMENTS
decl_stmt|;
DECL|field|maxInputLength
specifier|private
name|int
name|maxInputLength
init|=
name|Defaults
operator|.
name|DEFAULT_MAX_INPUT_LENGTH
decl_stmt|;
DECL|field|contextMapping
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ContextMapping
argument_list|>
name|contextMapping
init|=
name|ContextMapping
operator|.
name|EMPTY_MAPPING
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|,
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
expr_stmt|;
name|builder
operator|=
name|this
expr_stmt|;
block|}
DECL|method|payloads
specifier|public
name|Builder
name|payloads
parameter_list|(
name|boolean
name|payloads
parameter_list|)
block|{
name|this
operator|.
name|payloads
operator|=
name|payloads
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|preserveSeparators
specifier|public
name|Builder
name|preserveSeparators
parameter_list|(
name|boolean
name|preserveSeparators
parameter_list|)
block|{
name|this
operator|.
name|preserveSeparators
operator|=
name|preserveSeparators
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|preservePositionIncrements
specifier|public
name|Builder
name|preservePositionIncrements
parameter_list|(
name|boolean
name|preservePositionIncrements
parameter_list|)
block|{
name|this
operator|.
name|preservePositionIncrements
operator|=
name|preservePositionIncrements
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxInputLength
specifier|public
name|Builder
name|maxInputLength
parameter_list|(
name|int
name|maxInputLength
parameter_list|)
block|{
if|if
condition|(
name|maxInputLength
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|Fields
operator|.
name|MAX_INPUT_LENGTH
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|" must be> 0 but was ["
operator|+
name|maxInputLength
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxInputLength
operator|=
name|maxInputLength
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|contextMapping
specifier|public
name|Builder
name|contextMapping
parameter_list|(
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ContextMapping
argument_list|>
name|contextMapping
parameter_list|)
block|{
name|this
operator|.
name|contextMapping
operator|=
name|contextMapping
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|CompletionFieldMapper2x
name|build
parameter_list|(
name|Mapper
operator|.
name|BuilderContext
name|context
parameter_list|)
block|{
name|setupFieldType
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|CompletionFieldType
name|completionFieldType
init|=
operator|(
name|CompletionFieldType
operator|)
name|fieldType
decl_stmt|;
name|completionFieldType
operator|.
name|setProvider
argument_list|(
operator|new
name|AnalyzingCompletionLookupProvider
argument_list|(
name|preserveSeparators
argument_list|,
name|preservePositionIncrements
argument_list|,
name|payloads
argument_list|)
argument_list|)
expr_stmt|;
name|completionFieldType
operator|.
name|setContextMapping
argument_list|(
name|contextMapping
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompletionFieldMapper2x
argument_list|(
name|name
argument_list|,
name|fieldType
argument_list|,
name|maxInputLength
argument_list|,
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|,
name|multiFieldsBuilder
operator|.
name|build
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
argument_list|,
name|copyTo
argument_list|)
return|;
block|}
block|}
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|CompletionFieldMapper2x
operator|.
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|NamedAnalyzer
name|indexAnalyzer
init|=
literal|null
decl_stmt|;
name|NamedAnalyzer
name|searchAnalyzer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|node
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|Fields
operator|.
name|ANALYZER
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
comment|// index_analyzer is for backcompat, remove for v3.0
name|fieldName
operator|.
name|equals
argument_list|(
literal|"index_analyzer"
argument_list|)
operator|&&
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|)
condition|)
block|{
name|indexAnalyzer
operator|=
name|getNamedAnalyzer
argument_list|(
name|parserContext
argument_list|,
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|fieldName
argument_list|,
name|Fields
operator|.
name|SEARCH_ANALYZER
argument_list|)
condition|)
block|{
name|searchAnalyzer
operator|=
name|getNamedAnalyzer
argument_list|(
name|parserContext
argument_list|,
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|Fields
operator|.
name|PAYLOADS
argument_list|)
condition|)
block|{
name|builder
operator|.
name|payloads
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|fieldName
argument_list|,
name|Fields
operator|.
name|PRESERVE_SEPARATORS
argument_list|)
condition|)
block|{
name|builder
operator|.
name|preserveSeparators
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|fieldName
argument_list|,
name|Fields
operator|.
name|PRESERVE_POSITION_INCREMENTS
argument_list|)
condition|)
block|{
name|builder
operator|.
name|preservePositionIncrements
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parserContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|fieldName
argument_list|,
name|Fields
operator|.
name|MAX_INPUT_LENGTH
argument_list|)
condition|)
block|{
name|builder
operator|.
name|maxInputLength
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseMultiField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|parserContext
argument_list|,
name|fieldName
argument_list|,
name|fieldNode
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|Fields
operator|.
name|CONTEXT
argument_list|)
condition|)
block|{
name|builder
operator|.
name|contextMapping
argument_list|(
name|ContextBuilder
operator|.
name|loadMappings
argument_list|(
name|fieldNode
argument_list|,
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexAnalyzer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|searchAnalyzer
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"analyzer on completion field ["
operator|+
name|name
operator|+
literal|"] must be set when search_analyzer is set"
argument_list|)
throw|;
block|}
name|indexAnalyzer
operator|=
name|searchAnalyzer
operator|=
name|parserContext
operator|.
name|getIndexAnalyzers
argument_list|()
operator|.
name|get
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchAnalyzer
operator|==
literal|null
condition|)
block|{
name|searchAnalyzer
operator|=
name|indexAnalyzer
expr_stmt|;
block|}
name|builder
operator|.
name|indexAnalyzer
argument_list|(
name|indexAnalyzer
argument_list|)
expr_stmt|;
name|builder
operator|.
name|searchAnalyzer
argument_list|(
name|searchAnalyzer
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|getNamedAnalyzer
specifier|private
name|NamedAnalyzer
name|getNamedAnalyzer
parameter_list|(
name|ParserContext
name|parserContext
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NamedAnalyzer
name|analyzer
init|=
name|parserContext
operator|.
name|getIndexAnalyzers
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find default or mapped analyzer with name ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|analyzer
return|;
block|}
block|}
DECL|class|CompletionFieldType
specifier|public
specifier|static
specifier|final
class|class
name|CompletionFieldType
extends|extends
name|TermBasedFieldType
block|{
DECL|field|postingsFormat
specifier|private
name|PostingsFormat
name|postingsFormat
decl_stmt|;
DECL|field|analyzingSuggestLookupProvider
specifier|private
name|AnalyzingCompletionLookupProvider
name|analyzingSuggestLookupProvider
decl_stmt|;
DECL|field|contextMapping
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ContextMapping
argument_list|>
name|contextMapping
init|=
name|ContextMapping
operator|.
name|EMPTY_MAPPING
decl_stmt|;
DECL|method|CompletionFieldType
specifier|public
name|CompletionFieldType
parameter_list|()
block|{         }
DECL|method|CompletionFieldType
specifier|protected
name|CompletionFieldType
parameter_list|(
name|CompletionFieldType
name|ref
parameter_list|)
block|{
name|super
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|this
operator|.
name|postingsFormat
operator|=
name|ref
operator|.
name|postingsFormat
expr_stmt|;
name|this
operator|.
name|analyzingSuggestLookupProvider
operator|=
name|ref
operator|.
name|analyzingSuggestLookupProvider
expr_stmt|;
name|this
operator|.
name|contextMapping
operator|=
name|ref
operator|.
name|contextMapping
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|CompletionFieldType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|CompletionFieldType
name|fieldType
init|=
operator|(
name|CompletionFieldType
operator|)
name|o
decl_stmt|;
return|return
name|analyzingSuggestLookupProvider
operator|.
name|getPreserveSep
argument_list|()
operator|==
name|fieldType
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|getPreserveSep
argument_list|()
operator|&&
name|analyzingSuggestLookupProvider
operator|.
name|getPreservePositionsIncrements
argument_list|()
operator|==
name|fieldType
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|getPreservePositionsIncrements
argument_list|()
operator|&&
name|analyzingSuggestLookupProvider
operator|.
name|hasPayloads
argument_list|()
operator|==
name|fieldType
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|hasPayloads
argument_list|()
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|getContextMapping
argument_list|()
argument_list|,
name|fieldType
operator|.
name|getContextMapping
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|super
operator|.
name|hashCode
argument_list|()
argument_list|,
name|analyzingSuggestLookupProvider
operator|.
name|getPreserveSep
argument_list|()
argument_list|,
name|analyzingSuggestLookupProvider
operator|.
name|getPreservePositionsIncrements
argument_list|()
argument_list|,
name|analyzingSuggestLookupProvider
operator|.
name|hasPayloads
argument_list|()
argument_list|,
name|getContextMapping
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|CompletionFieldType
name|clone
parameter_list|()
block|{
return|return
operator|new
name|CompletionFieldType
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|typeName
specifier|public
name|String
name|typeName
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|checkCompatibility
specifier|public
name|void
name|checkCompatibility
parameter_list|(
name|MappedFieldType
name|fieldType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
name|super
operator|.
name|checkCompatibility
argument_list|(
name|fieldType
argument_list|,
name|conflicts
argument_list|,
name|strict
argument_list|)
expr_stmt|;
name|CompletionFieldType
name|other
init|=
operator|(
name|CompletionFieldType
operator|)
name|fieldType
decl_stmt|;
if|if
condition|(
name|analyzingSuggestLookupProvider
operator|.
name|hasPayloads
argument_list|()
operator|!=
name|other
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|hasPayloads
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [payload] values"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|analyzingSuggestLookupProvider
operator|.
name|getPreservePositionsIncrements
argument_list|()
operator|!=
name|other
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|getPreservePositionsIncrements
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [preserve_position_increments] values"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|analyzingSuggestLookupProvider
operator|.
name|getPreserveSep
argument_list|()
operator|!=
name|other
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|getPreserveSep
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [preserve_separators] values"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ContextMapping
operator|.
name|mappingsAreEqual
argument_list|(
name|getContextMapping
argument_list|()
argument_list|,
name|other
operator|.
name|getContextMapping
argument_list|()
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [context_mapping] values"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setProvider
specifier|public
name|void
name|setProvider
parameter_list|(
name|AnalyzingCompletionLookupProvider
name|provider
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|analyzingSuggestLookupProvider
operator|=
name|provider
expr_stmt|;
block|}
DECL|method|postingsFormat
specifier|public
specifier|synchronized
name|PostingsFormat
name|postingsFormat
parameter_list|(
name|PostingsFormat
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|instanceof
name|Completion090PostingsFormat
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Double wrapping of "
operator|+
name|Completion090PostingsFormat
operator|.
name|class
argument_list|)
throw|;
block|}
if|if
condition|(
name|postingsFormat
operator|==
literal|null
condition|)
block|{
name|postingsFormat
operator|=
operator|new
name|Completion090PostingsFormat
argument_list|(
name|in
argument_list|,
name|analyzingSuggestLookupProvider
argument_list|)
expr_stmt|;
block|}
return|return
name|postingsFormat
return|;
block|}
DECL|method|setContextMapping
specifier|public
name|void
name|setContextMapping
parameter_list|(
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ContextMapping
argument_list|>
name|contextMapping
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|contextMapping
operator|=
name|contextMapping
expr_stmt|;
block|}
comment|/**          * Get the context mapping associated with this completion field          */
DECL|method|getContextMapping
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ContextMapping
argument_list|>
name|getContextMapping
parameter_list|()
block|{
return|return
name|contextMapping
return|;
block|}
comment|/**          * @return true if a context mapping has been defined          */
DECL|method|requiresContext
specifier|public
name|boolean
name|requiresContext
parameter_list|()
block|{
return|return
name|contextMapping
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
return|;
block|}
block|}
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|BytesRef
name|EMPTY
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|maxInputLength
specifier|private
name|int
name|maxInputLength
decl_stmt|;
DECL|method|CompletionFieldMapper2x
specifier|public
name|CompletionFieldMapper2x
parameter_list|(
name|String
name|simpleName
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|,
name|int
name|maxInputLength
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|MultiFields
name|multiFields
parameter_list|,
name|CopyTo
name|copyTo
parameter_list|)
block|{
name|super
argument_list|(
name|simpleName
argument_list|,
name|fieldType
argument_list|,
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|,
name|indexSettings
argument_list|,
name|multiFields
argument_list|,
name|copyTo
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxInputLength
operator|=
name|maxInputLength
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|CompletionFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|CompletionFieldType
operator|)
name|super
operator|.
name|fieldType
argument_list|()
return|;
block|}
comment|/**      * Parses and indexes inputs      * Parsing:      * Acceptable format:      * "STRING" - interpreted as field value (input)      * "ARRAY" - each element can be one of "OBJECT" (see below)      * "OBJECT" - { "input": STRING|ARRAY, "weight": STRING|INT, "contexts": ARRAY|OBJECT }      */
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
name|parse
parameter_list|(
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"completion field ["
operator|+
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|"] does not support null values"
argument_list|)
throw|;
block|}
name|String
name|surfaceForm
init|=
literal|null
decl_stmt|;
name|BytesRef
name|payload
init|=
literal|null
decl_stmt|;
name|long
name|weight
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|inputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ContextConfig
argument_list|>
name|contextConfig
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|multiFields
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ALLOWED_CONTENT_FIELD_NAMES
operator|.
name|contains
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown field name["
operator|+
name|currentFieldName
operator|+
literal|"], must be one of "
operator|+
name|ALLOWED_CONTENT_FIELD_NAMES
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|CONTEXT
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ContextConfig
argument_list|>
name|configs
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|String
name|name
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|ContextMapping
name|mapping
init|=
name|fieldType
argument_list|()
operator|.
name|getContextMapping
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"context [{}] is not defined"
argument_list|,
name|name
argument_list|)
throw|;
block|}
else|else
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|mapping
operator|.
name|parseContext
argument_list|(
name|context
argument_list|,
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|contextConfig
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|ContextMapping
name|mapping
range|:
name|fieldType
argument_list|()
operator|.
name|getContextMapping
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|ContextConfig
name|config
init|=
name|configs
operator|.
name|get
argument_list|(
name|mapping
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|contextConfig
operator|.
name|put
argument_list|(
name|mapping
operator|.
name|name
argument_list|()
argument_list|,
name|config
operator|==
literal|null
condition|?
name|mapping
operator|.
name|defaultConfig
argument_list|()
else|:
name|config
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"context must be an object"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_PAYLOAD
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isStoringPayloads
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MapperException
argument_list|(
literal|"Payloads disabled in mapping"
argument_list|)
throw|;
block|}
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|XContentBuilder
name|payloadBuilder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|parser
operator|.
name|contentType
argument_list|()
argument_list|)
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|payload
operator|=
name|payloadBuilder
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesRef
argument_list|()
expr_stmt|;
name|payloadBuilder
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
name|payload
operator|=
name|parser
operator|.
name|utf8BytesOrNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperException
argument_list|(
literal|"payload doesn't support type "
operator|+
name|token
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
if|if
condition|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_OUTPUT
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|surfaceForm
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_INPUT
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_WEIGHT
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|Number
name|weightValue
decl_stmt|;
try|try
block|{
name|weightValue
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Weight must be a string representing a numeric value, but was ["
operator|+
name|parser
operator|.
name|text
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|weight
operator|=
name|weightValue
operator|.
name|longValue
argument_list|()
expr_stmt|;
comment|// always parse a long to make sure we don't get overflow
name|checkWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
if|if
condition|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_WEIGHT
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|NumberType
name|numberType
init|=
name|parser
operator|.
name|numberType
argument_list|()
decl_stmt|;
if|if
condition|(
name|NumberType
operator|.
name|LONG
operator|!=
name|numberType
operator|&&
name|NumberType
operator|.
name|INT
operator|!=
name|numberType
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Weight must be an integer, but was ["
operator|+
name|parser
operator|.
name|numberValue
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|weight
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
comment|// always parse a long to make sure we don't get overflow
name|checkWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|Fields
operator|.
name|CONTENT_FIELD_NAME_INPUT
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|contextConfig
operator|==
literal|null
condition|)
block|{
name|contextConfig
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|ContextMapping
name|mapping
range|:
name|fieldType
argument_list|()
operator|.
name|getContextMapping
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|contextConfig
operator|.
name|put
argument_list|(
name|mapping
operator|.
name|name
argument_list|()
argument_list|,
name|mapping
operator|.
name|defaultConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ContextMapping
operator|.
name|Context
name|ctx
init|=
operator|new
name|ContextMapping
operator|.
name|Context
argument_list|(
name|contextConfig
argument_list|,
name|context
operator|.
name|doc
argument_list|()
argument_list|)
decl_stmt|;
name|payload
operator|=
name|payload
operator|==
literal|null
condition|?
name|EMPTY
else|:
name|payload
expr_stmt|;
if|if
condition|(
name|surfaceForm
operator|==
literal|null
condition|)
block|{
comment|// no surface form use the input
for|for
control|(
name|String
name|input
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|input
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|BytesRef
name|suggestPayload
init|=
name|fieldType
argument_list|()
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|buildPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|input
argument_list|)
argument_list|,
name|weight
argument_list|,
name|payload
argument_list|)
decl_stmt|;
name|context
operator|.
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|getCompletionField
argument_list|(
name|ctx
argument_list|,
name|input
argument_list|,
name|suggestPayload
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|BytesRef
name|suggestPayload
init|=
name|fieldType
argument_list|()
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|buildPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|surfaceForm
argument_list|)
argument_list|,
name|weight
argument_list|,
name|payload
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|input
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|input
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|context
operator|.
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|getCompletionField
argument_list|(
name|ctx
argument_list|,
name|input
argument_list|,
name|suggestPayload
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|checkWeight
specifier|private
name|void
name|checkWeight
parameter_list|(
name|long
name|weight
parameter_list|)
block|{
if|if
condition|(
name|weight
argument_list|<
literal|0
operator|||
name|weight
argument_list|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Weight must be in the interval [0..2147483647], but was ["
operator|+
name|weight
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|getCompletionField
specifier|public
name|Field
name|getCompletionField
parameter_list|(
name|ContextMapping
operator|.
name|Context
name|ctx
parameter_list|,
name|String
name|input
parameter_list|,
name|BytesRef
name|payload
parameter_list|)
block|{
specifier|final
name|String
name|originalInput
init|=
name|input
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|length
argument_list|()
operator|>
name|maxInputLength
condition|)
block|{
specifier|final
name|int
name|len
init|=
name|correctSubStringLen
argument_list|(
name|input
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxInputLength
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|input
operator|=
name|input
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isReservedChar
argument_list|(
name|input
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal input ["
operator|+
name|originalInput
operator|+
literal|"] UTF-16 codepoint  [0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|input
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|+
literal|"] at position "
operator|+
name|i
operator|+
literal|" is a reserved character"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|SuggestField
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|ctx
argument_list|,
name|input
argument_list|,
name|fieldType
argument_list|()
argument_list|,
name|payload
argument_list|,
name|fieldType
argument_list|()
operator|.
name|analyzingSuggestLookupProvider
argument_list|)
return|;
block|}
DECL|method|correctSubStringLen
specifier|public
specifier|static
name|int
name|correctSubStringLen
parameter_list|(
name|String
name|input
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|Character
operator|.
name|isHighSurrogate
argument_list|(
name|input
operator|.
name|charAt
argument_list|(
name|len
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
assert|assert
name|input
operator|.
name|length
argument_list|()
operator|>=
name|len
operator|+
literal|1
operator|&&
name|Character
operator|.
name|isLowSurrogate
argument_list|(
name|input
operator|.
name|charAt
argument_list|(
name|len
argument_list|)
argument_list|)
assert|;
return|return
name|len
operator|+
literal|1
return|;
block|}
return|return
name|len
return|;
block|}
DECL|method|buildPayload
specifier|public
name|BytesRef
name|buildPayload
parameter_list|(
name|BytesRef
name|surfaceForm
parameter_list|,
name|long
name|weight
parameter_list|,
name|BytesRef
name|payload
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fieldType
argument_list|()
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|buildPayload
argument_list|(
name|surfaceForm
argument_list|,
name|weight
argument_list|,
name|payload
argument_list|)
return|;
block|}
DECL|class|SuggestField
specifier|private
specifier|static
specifier|final
class|class
name|SuggestField
extends|extends
name|Field
block|{
DECL|field|payload
specifier|private
specifier|final
name|BytesRef
name|payload
decl_stmt|;
DECL|field|toFiniteStrings
specifier|private
specifier|final
name|CompletionTokenStream
operator|.
name|ToFiniteStrings
name|toFiniteStrings
decl_stmt|;
DECL|field|ctx
specifier|private
specifier|final
name|ContextMapping
operator|.
name|Context
name|ctx
decl_stmt|;
DECL|method|SuggestField
specifier|public
name|SuggestField
parameter_list|(
name|String
name|name
parameter_list|,
name|ContextMapping
operator|.
name|Context
name|ctx
parameter_list|,
name|String
name|value
parameter_list|,
name|MappedFieldType
name|type
parameter_list|,
name|BytesRef
name|payload
parameter_list|,
name|CompletionTokenStream
operator|.
name|ToFiniteStrings
name|toFiniteStrings
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|payload
operator|=
name|payload
expr_stmt|;
name|this
operator|.
name|toFiniteStrings
operator|=
name|toFiniteStrings
expr_stmt|;
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tokenStream
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|TokenStream
name|previous
parameter_list|)
block|{
name|TokenStream
name|ts
init|=
name|ctx
operator|.
name|wrapTokenStream
argument_list|(
name|super
operator|.
name|tokenStream
argument_list|(
name|analyzer
argument_list|,
name|previous
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompletionTokenStream
argument_list|(
name|ts
argument_list|,
name|payload
argument_list|,
name|toFiniteStrings
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|simpleName
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TYPE
argument_list|,
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ANALYZER
argument_list|,
name|fieldType
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|SEARCH_ANALYZER
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fieldType
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PAYLOADS
argument_list|,
name|fieldType
argument_list|()
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|hasPayloads
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PRESERVE_SEPARATORS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fieldType
argument_list|()
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|getPreserveSep
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PRESERVE_POSITION_INCREMENTS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fieldType
argument_list|()
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|getPreservePositionsIncrements
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MAX_INPUT_LENGTH
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|maxInputLength
argument_list|)
expr_stmt|;
name|multiFields
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|requiresContext
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|CONTEXT
argument_list|)
expr_stmt|;
for|for
control|(
name|ContextMapping
name|mapping
range|:
name|fieldType
argument_list|()
operator|.
name|getContextMapping
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|parseCreateField
specifier|protected
name|void
name|parseCreateField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|IndexableField
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|contentType
specifier|protected
name|String
name|contentType
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
DECL|method|isStoringPayloads
specifier|public
name|boolean
name|isStoringPayloads
parameter_list|()
block|{
return|return
name|fieldType
argument_list|()
operator|.
name|analyzingSuggestLookupProvider
operator|.
name|hasPayloads
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doMerge
specifier|protected
name|void
name|doMerge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
name|super
operator|.
name|doMerge
argument_list|(
name|mergeWith
argument_list|,
name|updateAllTypes
argument_list|)
expr_stmt|;
name|CompletionFieldMapper2x
name|fieldMergeWith
init|=
operator|(
name|CompletionFieldMapper2x
operator|)
name|mergeWith
decl_stmt|;
name|this
operator|.
name|maxInputLength
operator|=
name|fieldMergeWith
operator|.
name|maxInputLength
expr_stmt|;
block|}
comment|// this should be package private but our tests don't allow it.
DECL|method|isReservedChar
specifier|public
specifier|static
name|boolean
name|isReservedChar
parameter_list|(
name|char
name|character
parameter_list|)
block|{
comment|/*  we use 0x001F as a SEP_LABEL in the suggester but we can use the UTF-16 representation since they          *  are equivalent. We also don't need to convert the input character to UTF-8 here to check for          *  the 0x00 end label since all multi-byte  UTF-8 chars start with 0x10 binary so if the UTF-16 CP is == 0x00          *  it's the single byte UTF-8 CP */
assert|assert
name|XAnalyzingSuggester
operator|.
name|PAYLOAD_SEP
operator|==
name|XAnalyzingSuggester
operator|.
name|SEP_LABEL
assert|;
comment|// ensure they are the same!
switch|switch
condition|(
name|character
condition|)
block|{
case|case
name|XAnalyzingSuggester
operator|.
name|END_BYTE
case|:
case|case
name|XAnalyzingSuggester
operator|.
name|SEP_LABEL
case|:
case|case
name|XAnalyzingSuggester
operator|.
name|HOLE_CHARACTER
case|:
case|case
name|ContextMapping
operator|.
name|SEPARATOR
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

