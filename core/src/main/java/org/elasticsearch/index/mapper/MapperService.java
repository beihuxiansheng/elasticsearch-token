begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|DelegatingAnalyzerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ReleasableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
operator|.
name|BuilderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityLookupService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidTypeNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|TypeMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|PercolatorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
operator|.
name|newMapBuilder
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|MapperService
specifier|public
class|class
name|MapperService
extends|extends
name|AbstractIndexComponent
implements|implements
name|Closeable
block|{
DECL|field|DEFAULT_MAPPING
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_MAPPING
init|=
literal|"_default_"
decl_stmt|;
DECL|field|META_FIELDS
specifier|private
specifier|static
name|ObjectHashSet
argument_list|<
name|String
argument_list|>
name|META_FIELDS
init|=
name|ObjectHashSet
operator|.
name|from
argument_list|(
literal|"_uid"
argument_list|,
literal|"_id"
argument_list|,
literal|"_type"
argument_list|,
literal|"_all"
argument_list|,
literal|"_parent"
argument_list|,
literal|"_routing"
argument_list|,
literal|"_index"
argument_list|,
literal|"_size"
argument_list|,
literal|"_timestamp"
argument_list|,
literal|"_ttl"
argument_list|)
decl_stmt|;
DECL|field|INDEX_ANALYZER_EXTRACTOR
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|MappedFieldType
argument_list|,
name|Analyzer
argument_list|>
name|INDEX_ANALYZER_EXTRACTOR
init|=
operator|new
name|Function
argument_list|<
name|MappedFieldType
argument_list|,
name|Analyzer
argument_list|>
argument_list|()
block|{
specifier|public
name|Analyzer
name|apply
parameter_list|(
name|MappedFieldType
name|fieldType
parameter_list|)
block|{
return|return
name|fieldType
operator|.
name|indexAnalyzer
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|SEARCH_ANALYZER_EXTRACTOR
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|MappedFieldType
argument_list|,
name|Analyzer
argument_list|>
name|SEARCH_ANALYZER_EXTRACTOR
init|=
operator|new
name|Function
argument_list|<
name|MappedFieldType
argument_list|,
name|Analyzer
argument_list|>
argument_list|()
block|{
specifier|public
name|Analyzer
name|apply
parameter_list|(
name|MappedFieldType
name|fieldType
parameter_list|)
block|{
return|return
name|fieldType
operator|.
name|searchAnalyzer
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|SEARCH_QUOTE_ANALYZER_EXTRACTOR
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|MappedFieldType
argument_list|,
name|Analyzer
argument_list|>
name|SEARCH_QUOTE_ANALYZER_EXTRACTOR
init|=
operator|new
name|Function
argument_list|<
name|MappedFieldType
argument_list|,
name|Analyzer
argument_list|>
argument_list|()
block|{
specifier|public
name|Analyzer
name|apply
parameter_list|(
name|MappedFieldType
name|fieldType
parameter_list|)
block|{
return|return
name|fieldType
operator|.
name|searchQuoteAnalyzer
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|analysisService
specifier|private
specifier|final
name|AnalysisService
name|analysisService
decl_stmt|;
comment|/**      * Will create types automatically if they do not exists in the mapping definition yet      */
DECL|field|dynamic
specifier|private
specifier|final
name|boolean
name|dynamic
decl_stmt|;
DECL|field|defaultMappingSource
specifier|private
specifier|volatile
name|String
name|defaultMappingSource
decl_stmt|;
DECL|field|defaultPercolatorMappingSource
specifier|private
specifier|volatile
name|String
name|defaultPercolatorMappingSource
decl_stmt|;
DECL|field|mappers
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|DocumentMapper
argument_list|>
name|mappers
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
comment|// A lock for mappings: modifications (put mapping) need to be performed
comment|// under the write lock and read operations (document parsing) need to be
comment|// performed under the read lock
DECL|field|mappingLock
specifier|final
name|ReentrantReadWriteLock
name|mappingLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|mappingWriteLock
specifier|private
specifier|final
name|ReleasableLock
name|mappingWriteLock
init|=
operator|new
name|ReleasableLock
argument_list|(
name|mappingLock
operator|.
name|writeLock
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|fieldTypes
specifier|private
specifier|volatile
name|FieldTypeLookup
name|fieldTypes
decl_stmt|;
DECL|field|fullPathObjectMappers
specifier|private
specifier|volatile
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ObjectMapper
argument_list|>
name|fullPathObjectMappers
init|=
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|hasNested
specifier|private
name|boolean
name|hasNested
init|=
literal|false
decl_stmt|;
comment|// updated dynamically to true when a nested object is added
DECL|field|documentParser
specifier|private
specifier|final
name|DocumentMapperParser
name|documentParser
decl_stmt|;
DECL|field|indexAnalyzer
specifier|private
specifier|final
name|MapperAnalyzerWrapper
name|indexAnalyzer
decl_stmt|;
DECL|field|searchAnalyzer
specifier|private
specifier|final
name|MapperAnalyzerWrapper
name|searchAnalyzer
decl_stmt|;
DECL|field|searchQuoteAnalyzer
specifier|private
specifier|final
name|MapperAnalyzerWrapper
name|searchQuoteAnalyzer
decl_stmt|;
DECL|field|typeListeners
specifier|private
specifier|final
name|List
argument_list|<
name|DocumentTypeListener
argument_list|>
name|typeListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|unmappedFieldTypes
specifier|private
specifier|volatile
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|MappedFieldType
argument_list|>
name|unmappedFieldTypes
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|parentTypes
specifier|private
specifier|volatile
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|parentTypes
init|=
name|ImmutableSet
operator|.
name|of
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|MapperService
specifier|public
name|MapperService
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|AnalysisService
name|analysisService
parameter_list|,
name|SimilarityLookupService
name|similarityLookupService
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|analysisService
operator|=
name|analysisService
expr_stmt|;
name|this
operator|.
name|fieldTypes
operator|=
operator|new
name|FieldTypeLookup
argument_list|()
expr_stmt|;
name|this
operator|.
name|documentParser
operator|=
operator|new
name|DocumentMapperParser
argument_list|(
name|indexSettings
argument_list|,
name|this
argument_list|,
name|analysisService
argument_list|,
name|similarityLookupService
argument_list|,
name|scriptService
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexAnalyzer
operator|=
operator|new
name|MapperAnalyzerWrapper
argument_list|(
name|analysisService
operator|.
name|defaultIndexAnalyzer
argument_list|()
argument_list|,
name|INDEX_ANALYZER_EXTRACTOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|searchAnalyzer
operator|=
operator|new
name|MapperAnalyzerWrapper
argument_list|(
name|analysisService
operator|.
name|defaultSearchAnalyzer
argument_list|()
argument_list|,
name|SEARCH_ANALYZER_EXTRACTOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|searchQuoteAnalyzer
operator|=
operator|new
name|MapperAnalyzerWrapper
argument_list|(
name|analysisService
operator|.
name|defaultSearchQuoteAnalyzer
argument_list|()
argument_list|,
name|SEARCH_QUOTE_ANALYZER_EXTRACTOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|dynamic
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"index.mapper.dynamic"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defaultPercolatorMappingSource
operator|=
literal|"{\n"
operator|+
literal|"\"_default_\":{\n"
operator|+
literal|"\"properties\" : {\n"
operator|+
literal|"\"query\" : {\n"
operator|+
literal|"\"type\" : \"object\",\n"
operator|+
literal|"\"enabled\" : false\n"
operator|+
literal|"}\n"
operator|+
literal|"}\n"
operator|+
literal|"}\n"
operator|+
literal|"}"
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INDEX
argument_list|)
condition|)
block|{
name|defaultMappingSource
operator|=
literal|"{"
operator|+
literal|"\"_default_\": {"
operator|+
literal|"\"properties\": {"
operator|+
literal|"\"script\": { \"enabled\": false },"
operator|+
literal|"\"template\": { \"enabled\": false }"
operator|+
literal|"}"
operator|+
literal|"}"
operator|+
literal|"}"
expr_stmt|;
block|}
else|else
block|{
name|defaultMappingSource
operator|=
literal|"{\"_default_\":{}}"
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"using dynamic[{}], default mapping source[{}], default percolator mapping source[{}]"
argument_list|,
name|dynamic
argument_list|,
name|defaultMappingSource
argument_list|,
name|defaultPercolatorMappingSource
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"using dynamic[{}]"
argument_list|,
name|dynamic
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|DocumentMapper
name|documentMapper
range|:
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
name|documentMapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|hasNested
specifier|public
name|boolean
name|hasNested
parameter_list|()
block|{
return|return
name|this
operator|.
name|hasNested
return|;
block|}
comment|/**      * returns an immutable iterator over current document mappers.      *      * @param includingDefaultMapping indicates whether the iterator should contain the {@link #DEFAULT_MAPPING} document mapper.      *                                As is this not really an active type, you would typically set this to false      */
DECL|method|docMappers
specifier|public
name|Iterable
argument_list|<
name|DocumentMapper
argument_list|>
name|docMappers
parameter_list|(
specifier|final
name|boolean
name|includingDefaultMapping
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|DocumentMapper
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DocumentMapper
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|DocumentMapper
argument_list|>
name|iterator
decl_stmt|;
if|if
condition|(
name|includingDefaultMapping
condition|)
block|{
name|iterator
operator|=
name|mappers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iterator
operator|=
name|Iterators
operator|.
name|filter
argument_list|(
name|mappers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|NOT_A_DEFAULT_DOC_MAPPER
argument_list|)
expr_stmt|;
block|}
return|return
name|Iterators
operator|.
name|unmodifiableIterator
argument_list|(
name|iterator
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|field|NOT_A_DEFAULT_DOC_MAPPER
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|DocumentMapper
argument_list|>
name|NOT_A_DEFAULT_DOC_MAPPER
init|=
operator|new
name|Predicate
argument_list|<
name|DocumentMapper
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|DocumentMapper
name|input
parameter_list|)
block|{
return|return
operator|!
name|DEFAULT_MAPPING
operator|.
name|equals
argument_list|(
name|input
operator|.
name|type
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|analysisService
specifier|public
name|AnalysisService
name|analysisService
parameter_list|()
block|{
return|return
name|this
operator|.
name|analysisService
return|;
block|}
DECL|method|documentMapperParser
specifier|public
name|DocumentMapperParser
name|documentMapperParser
parameter_list|()
block|{
return|return
name|this
operator|.
name|documentParser
return|;
block|}
DECL|method|addTypeListener
specifier|public
name|void
name|addTypeListener
parameter_list|(
name|DocumentTypeListener
name|listener
parameter_list|)
block|{
name|typeListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeTypeListener
specifier|public
name|void
name|removeTypeListener
parameter_list|(
name|DocumentTypeListener
name|listener
parameter_list|)
block|{
name|typeListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|merge
specifier|public
name|DocumentMapper
name|merge
parameter_list|(
name|String
name|type
parameter_list|,
name|CompressedXContent
name|mappingSource
parameter_list|,
name|boolean
name|applyDefault
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
if|if
condition|(
name|DEFAULT_MAPPING
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// verify we can parse it
name|DocumentMapper
name|mapper
init|=
name|documentParser
operator|.
name|parseCompressed
argument_list|(
name|type
argument_list|,
name|mappingSource
argument_list|)
decl_stmt|;
comment|// still add it as a document mapper so we have it registered and, for example, persisted back into
comment|// the cluster meta data if needed, or checked for existence
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|mappingWriteLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|mappers
operator|=
name|newMapBuilder
argument_list|(
name|mappers
argument_list|)
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|mapper
argument_list|)
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|defaultMappingSource
operator|=
name|mappingSource
operator|.
name|string
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchGenerationException
argument_list|(
literal|"failed to un-compress"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|mapper
return|;
block|}
else|else
block|{
return|return
name|merge
argument_list|(
name|parse
argument_list|(
name|type
argument_list|,
name|mappingSource
argument_list|,
name|applyDefault
argument_list|)
argument_list|,
name|updateAllTypes
argument_list|)
return|;
block|}
block|}
comment|// never expose this to the outside world, we need to reparse the doc mapper so we get fresh
comment|// instances of field mappers to properly remove existing doc mapper
DECL|method|merge
specifier|private
name|DocumentMapper
name|merge
parameter_list|(
name|DocumentMapper
name|mapper
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|mappingWriteLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidTypeNameException
argument_list|(
literal|"mapping type name is empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Version
operator|.
name|indexCreated
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|)
operator|&&
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|255
condition|)
block|{
throw|throw
operator|new
name|InvalidTypeNameException
argument_list|(
literal|"mapping type name ["
operator|+
name|mapper
operator|.
name|type
argument_list|()
operator|+
literal|"] is too long; limit is length 255 but was ["
operator|+
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'_'
condition|)
block|{
throw|throw
operator|new
name|InvalidTypeNameException
argument_list|(
literal|"mapping type name ["
operator|+
name|mapper
operator|.
name|type
argument_list|()
operator|+
literal|"] can't start with '_'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidTypeNameException
argument_list|(
literal|"mapping type name ["
operator|+
name|mapper
operator|.
name|type
argument_list|()
operator|+
literal|"] should not include '#' in it"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidTypeNameException
argument_list|(
literal|"mapping type name ["
operator|+
name|mapper
operator|.
name|type
argument_list|()
operator|+
literal|"] should not include ',' in it"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Version
operator|.
name|indexCreated
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|)
operator|&&
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|mapper
operator|.
name|parentFieldMapper
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The [_parent.type] option can't point to the same type"
argument_list|)
throw|;
block|}
if|if
condition|(
name|typeNameStartsWithIllegalDot
argument_list|(
name|mapper
argument_list|)
condition|)
block|{
if|if
condition|(
name|Version
operator|.
name|indexCreated
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mapping type name ["
operator|+
name|mapper
operator|.
name|type
argument_list|()
operator|+
literal|"] must not start with a '.'"
argument_list|)
throw|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Type [{}] starts with a '.', it is recommended not to start a type name with a '.'"
argument_list|,
name|mapper
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we can add new field/object mappers while the old ones are there
comment|// since we get new instances of those, and when we remove, we remove
comment|// by instance equality
name|DocumentMapper
name|oldMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldMapper
operator|!=
literal|null
condition|)
block|{
name|MergeResult
name|result
init|=
name|oldMapper
operator|.
name|merge
argument_list|(
name|mapper
operator|.
name|mapping
argument_list|()
argument_list|,
literal|false
argument_list|,
name|updateAllTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
comment|// TODO: What should we do???
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"merging mapping for type [{}] resulted in conflicts: [{}]"
argument_list|,
name|mapper
operator|.
name|type
argument_list|()
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|buildConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|oldMapper
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|ObjectMapper
argument_list|>
name|newObjectMappers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldMapper
argument_list|>
name|newFieldMappers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetadataFieldMapper
name|metadataMapper
range|:
name|mapper
operator|.
name|mapping
argument_list|()
operator|.
name|metadataMappers
control|)
block|{
name|newFieldMappers
operator|.
name|add
argument_list|(
name|metadataMapper
argument_list|)
expr_stmt|;
block|}
name|MapperUtils
operator|.
name|collect
argument_list|(
name|mapper
operator|.
name|mapping
argument_list|()
operator|.
name|root
argument_list|,
name|newObjectMappers
argument_list|,
name|newFieldMappers
argument_list|)
expr_stmt|;
name|checkNewMappersCompatibility
argument_list|(
name|newObjectMappers
argument_list|,
name|newFieldMappers
argument_list|,
name|updateAllTypes
argument_list|)
expr_stmt|;
name|addMappers
argument_list|(
name|newObjectMappers
argument_list|,
name|newFieldMappers
argument_list|)
expr_stmt|;
for|for
control|(
name|DocumentTypeListener
name|typeListener
range|:
name|typeListeners
control|)
block|{
name|typeListener
operator|.
name|beforeCreate
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
name|mappers
operator|=
name|newMapBuilder
argument_list|(
name|mappers
argument_list|)
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|,
name|mapper
argument_list|)
operator|.
name|map
argument_list|()
expr_stmt|;
if|if
condition|(
name|mapper
operator|.
name|parentFieldMapper
argument_list|()
operator|.
name|active
argument_list|()
condition|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|parentTypesCopy
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|parentTypesCopy
operator|.
name|addAll
argument_list|(
name|parentTypes
argument_list|)
expr_stmt|;
name|parentTypesCopy
operator|.
name|add
argument_list|(
name|mapper
operator|.
name|parentFieldMapper
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|parentTypes
operator|=
name|parentTypesCopy
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
assert|assert
name|assertSerialization
argument_list|(
name|mapper
argument_list|)
assert|;
return|return
name|mapper
return|;
block|}
block|}
block|}
DECL|method|typeNameStartsWithIllegalDot
specifier|private
name|boolean
name|typeNameStartsWithIllegalDot
parameter_list|(
name|DocumentMapper
name|mapper
parameter_list|)
block|{
return|return
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
operator|&&
operator|!
name|PercolatorService
operator|.
name|TYPE_NAME
operator|.
name|equals
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|)
return|;
block|}
DECL|method|assertSerialization
specifier|private
name|boolean
name|assertSerialization
parameter_list|(
name|DocumentMapper
name|mapper
parameter_list|)
block|{
comment|// capture the source now, it may change due to concurrent parsing
specifier|final
name|CompressedXContent
name|mappingSource
init|=
name|mapper
operator|.
name|mappingSource
argument_list|()
decl_stmt|;
name|DocumentMapper
name|newMapper
init|=
name|parse
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|,
name|mappingSource
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|equals
argument_list|(
name|mappingSource
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"DocumentMapper serialization result is different from source. \n--> Source ["
operator|+
name|mappingSource
operator|+
literal|"]\n--> Result ["
operator|+
name|newMapper
operator|.
name|mappingSource
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|checkNewMappersCompatibility
specifier|protected
name|void
name|checkNewMappersCompatibility
parameter_list|(
name|Collection
argument_list|<
name|ObjectMapper
argument_list|>
name|newObjectMappers
parameter_list|,
name|Collection
argument_list|<
name|FieldMapper
argument_list|>
name|newFieldMappers
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
assert|assert
name|mappingLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
assert|;
for|for
control|(
name|ObjectMapper
name|newObjectMapper
range|:
name|newObjectMappers
control|)
block|{
name|ObjectMapper
name|existingObjectMapper
init|=
name|fullPathObjectMappers
operator|.
name|get
argument_list|(
name|newObjectMapper
operator|.
name|fullPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingObjectMapper
operator|!=
literal|null
condition|)
block|{
name|MergeResult
name|result
init|=
operator|new
name|MergeResult
argument_list|(
literal|true
argument_list|,
name|updateAllTypes
argument_list|)
decl_stmt|;
name|existingObjectMapper
operator|.
name|merge
argument_list|(
name|newObjectMapper
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Mapper for ["
operator|+
name|newObjectMapper
operator|.
name|fullPath
argument_list|()
operator|+
literal|"] conflicts with existing mapping in other types"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|buildConflicts
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
name|fieldTypes
operator|.
name|checkCompatibility
argument_list|(
name|newFieldMappers
argument_list|,
name|updateAllTypes
argument_list|)
expr_stmt|;
block|}
DECL|method|addMappers
specifier|protected
name|void
name|addMappers
parameter_list|(
name|Collection
argument_list|<
name|ObjectMapper
argument_list|>
name|objectMappers
parameter_list|,
name|Collection
argument_list|<
name|FieldMapper
argument_list|>
name|fieldMappers
parameter_list|)
block|{
assert|assert
name|mappingLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
assert|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ObjectMapper
argument_list|>
name|fullPathObjectMappers
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|this
operator|.
name|fullPathObjectMappers
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectMapper
name|objectMapper
range|:
name|objectMappers
control|)
block|{
name|fullPathObjectMappers
operator|.
name|put
argument_list|(
name|objectMapper
operator|.
name|fullPath
argument_list|()
argument_list|,
name|objectMapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
name|hasNested
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|this
operator|.
name|fullPathObjectMappers
operator|=
name|fullPathObjectMappers
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|fieldTypes
operator|=
name|this
operator|.
name|fieldTypes
operator|.
name|copyAndAddAll
argument_list|(
name|fieldMappers
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|public
name|DocumentMapper
name|parse
parameter_list|(
name|String
name|mappingType
parameter_list|,
name|CompressedXContent
name|mappingSource
parameter_list|,
name|boolean
name|applyDefault
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|String
name|defaultMappingSource
decl_stmt|;
if|if
condition|(
name|PercolatorService
operator|.
name|TYPE_NAME
operator|.
name|equals
argument_list|(
name|mappingType
argument_list|)
condition|)
block|{
name|defaultMappingSource
operator|=
name|this
operator|.
name|defaultPercolatorMappingSource
expr_stmt|;
block|}
else|else
block|{
name|defaultMappingSource
operator|=
name|this
operator|.
name|defaultMappingSource
expr_stmt|;
block|}
return|return
name|documentParser
operator|.
name|parseCompressed
argument_list|(
name|mappingType
argument_list|,
name|mappingSource
argument_list|,
name|applyDefault
condition|?
name|defaultMappingSource
else|:
literal|null
argument_list|)
return|;
block|}
DECL|method|hasMapping
specifier|public
name|boolean
name|hasMapping
parameter_list|(
name|String
name|mappingType
parameter_list|)
block|{
return|return
name|mappers
operator|.
name|containsKey
argument_list|(
name|mappingType
argument_list|)
return|;
block|}
DECL|method|types
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|types
parameter_list|()
block|{
return|return
name|mappers
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|documentMapper
specifier|public
name|DocumentMapper
name|documentMapper
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|mappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Returns the document mapper created, including a mapping update if the      * type has been dynamically created.      */
DECL|method|documentMapperWithAutoCreate
specifier|public
name|Tuple
argument_list|<
name|DocumentMapper
argument_list|,
name|Mapping
argument_list|>
name|documentMapperWithAutoCreate
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|DocumentMapper
name|mapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
name|mapper
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|dynamic
condition|)
block|{
throw|throw
operator|new
name|TypeMissingException
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"trying to auto create mapping, but dynamic mapping is disabled"
argument_list|)
throw|;
block|}
name|mapper
operator|=
name|parse
argument_list|(
name|type
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
name|mapper
argument_list|,
name|mapper
operator|.
name|mapping
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * A filter for search. If a filter is required, will return it, otherwise, will return<tt>null</tt>.      */
annotation|@
name|Nullable
DECL|method|searchFilter
specifier|public
name|Query
name|searchFilter
parameter_list|(
name|String
modifier|...
name|types
parameter_list|)
block|{
name|boolean
name|filterPercolateType
init|=
name|hasMapping
argument_list|(
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
name|filterPercolateType
condition|)
block|{
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|PercolatorService
operator|.
name|TYPE_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|filterPercolateType
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Query
name|percolatorType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filterPercolateType
condition|)
block|{
name|percolatorType
operator|=
name|documentMapper
argument_list|(
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|)
operator|.
name|typeFilter
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|hasNested
operator|&&
name|filterPercolateType
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|percolatorType
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|Queries
operator|.
name|newNonNestedFilter
argument_list|()
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|bq
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hasNested
condition|)
block|{
return|return
name|Queries
operator|.
name|newNonNestedFilter
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|filterPercolateType
condition|)
block|{
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|Queries
operator|.
name|not
argument_list|(
name|percolatorType
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// if we filter by types, we don't need to filter by non nested docs
comment|// since they have different types (starting with __)
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|DocumentMapper
name|docMapper
init|=
name|documentMapper
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Query
name|filter
init|=
name|docMapper
operator|!=
literal|null
condition|?
name|docMapper
operator|.
name|typeFilter
argument_list|()
else|:
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|types
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterPercolateType
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|percolatorType
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|filter
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|bq
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|filter
return|;
block|}
block|}
comment|// see if we can use terms filter
name|boolean
name|useTermsFilter
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|DocumentMapper
name|docMapper
init|=
name|documentMapper
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
name|useTermsFilter
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|docMapper
operator|.
name|typeMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|==
name|IndexOptions
operator|.
name|NONE
condition|)
block|{
name|useTermsFilter
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// We only use terms filter is there is a type filter, this means we don't need to check for hasNested here
if|if
condition|(
name|useTermsFilter
condition|)
block|{
name|BytesRef
index|[]
name|typesBytes
init|=
operator|new
name|BytesRef
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typesBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|typesBytes
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|types
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|TermsQuery
name|termsFilter
init|=
operator|new
name|TermsQuery
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|typesBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterPercolateType
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|percolatorType
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|termsFilter
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|bq
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|termsFilter
return|;
block|}
block|}
else|else
block|{
comment|// Current bool filter requires that at least one should clause matches, even with a must clause.
name|BooleanQuery
name|bool
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|DocumentMapper
name|docMapper
init|=
name|documentMapper
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
name|bool
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|type
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bool
operator|.
name|add
argument_list|(
name|docMapper
operator|.
name|typeFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filterPercolateType
condition|)
block|{
name|bool
operator|.
name|add
argument_list|(
name|percolatorType
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasNested
condition|)
block|{
name|bool
operator|.
name|add
argument_list|(
name|Queries
operator|.
name|newNonNestedFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|bool
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns an {@link MappedFieldType} which has the given index name.      *      * If multiple types have fields with the same index name, the first is returned.      */
DECL|method|indexName
specifier|public
name|MappedFieldType
name|indexName
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
return|return
name|fieldTypes
operator|.
name|getByIndexName
argument_list|(
name|indexName
argument_list|)
return|;
block|}
comment|/**      * Returns the {@link MappedFieldType} for the give fullName.      *      * If multiple types have fields with the same full name, the first is returned.      */
DECL|method|fullName
specifier|public
name|MappedFieldType
name|fullName
parameter_list|(
name|String
name|fullName
parameter_list|)
block|{
return|return
name|fieldTypes
operator|.
name|get
argument_list|(
name|fullName
argument_list|)
return|;
block|}
comment|/**      * Returns all the fields that match the given pattern. If the pattern is prefixed with a type      * then the fields will be returned with a type prefix.      */
DECL|method|simpleMatchToIndexNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|simpleMatchToIndexNames
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|pattern
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// no wildcards
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|pattern
argument_list|)
return|;
block|}
return|return
name|fieldTypes
operator|.
name|simpleMatchToIndexNames
argument_list|(
name|pattern
argument_list|)
return|;
block|}
comment|// TODO: remove this since the underlying index names are now the same across all types
DECL|method|simpleMatchToIndexNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|simpleMatchToIndexNames
parameter_list|(
name|String
name|pattern
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|types
parameter_list|)
block|{
return|return
name|simpleMatchToIndexNames
argument_list|(
name|pattern
argument_list|)
return|;
block|}
comment|// TODO: remove types param, since the object mapper must be the same across all types
DECL|method|getObjectMapper
specifier|public
name|ObjectMapper
name|getObjectMapper
parameter_list|(
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|types
parameter_list|)
block|{
return|return
name|fullPathObjectMappers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|smartNameFieldType
specifier|public
name|MappedFieldType
name|smartNameFieldType
parameter_list|(
name|String
name|smartName
parameter_list|)
block|{
name|MappedFieldType
name|fieldType
init|=
name|fullName
argument_list|(
name|smartName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
condition|)
block|{
return|return
name|fieldType
return|;
block|}
return|return
name|indexName
argument_list|(
name|smartName
argument_list|)
return|;
block|}
comment|// TODO: remove this since the underlying index names are now the same across all types
DECL|method|smartNameFieldType
specifier|public
name|MappedFieldType
name|smartNameFieldType
parameter_list|(
name|String
name|smartName
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|types
parameter_list|)
block|{
return|return
name|smartNameFieldType
argument_list|(
name|smartName
argument_list|)
return|;
block|}
comment|/**      * Given a type (eg. long, string, ...), return an anonymous field mapper that can be used for search operations.      */
DECL|method|unmappedFieldType
specifier|public
name|MappedFieldType
name|unmappedFieldType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|MappedFieldType
argument_list|>
name|unmappedFieldMappers
init|=
name|this
operator|.
name|unmappedFieldTypes
decl_stmt|;
name|MappedFieldType
name|fieldType
init|=
name|unmappedFieldMappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|==
literal|null
condition|)
block|{
specifier|final
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
init|=
name|documentMapperParser
argument_list|()
operator|.
name|parserContext
argument_list|()
decl_stmt|;
name|Mapper
operator|.
name|TypeParser
name|typeParser
init|=
name|parserContext
operator|.
name|typeParser
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No mapper found for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|builder
init|=
name|typeParser
operator|.
name|parse
argument_list|(
literal|"__anonymous_"
operator|+
name|type
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|,
name|parserContext
argument_list|)
decl_stmt|;
specifier|final
name|BuilderContext
name|builderContext
init|=
operator|new
name|BuilderContext
argument_list|(
name|indexSettings
argument_list|,
operator|new
name|ContentPath
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|fieldType
operator|=
operator|(
operator|(
name|FieldMapper
operator|)
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
operator|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
comment|// There is no need to synchronize writes here. In the case of concurrent access, we could just
comment|// compute some mappers several times, which is not a big deal
name|this
operator|.
name|unmappedFieldTypes
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|MappedFieldType
operator|>
name|builder
argument_list|()
operator|.
name|putAll
argument_list|(
name|unmappedFieldMappers
argument_list|)
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|fieldType
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|fieldType
return|;
block|}
DECL|method|indexAnalyzer
specifier|public
name|Analyzer
name|indexAnalyzer
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexAnalyzer
return|;
block|}
DECL|method|searchAnalyzer
specifier|public
name|Analyzer
name|searchAnalyzer
parameter_list|()
block|{
return|return
name|this
operator|.
name|searchAnalyzer
return|;
block|}
DECL|method|searchQuoteAnalyzer
specifier|public
name|Analyzer
name|searchQuoteAnalyzer
parameter_list|()
block|{
return|return
name|this
operator|.
name|searchQuoteAnalyzer
return|;
block|}
comment|/**      * Resolves the closest inherited {@link ObjectMapper} that is nested.      */
DECL|method|resolveClosestNestedObjectMapper
specifier|public
name|ObjectMapper
name|resolveClosestNestedObjectMapper
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|int
name|indexOf
init|=
name|fieldName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOf
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
do|do
block|{
name|String
name|objectPath
init|=
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOf
argument_list|)
decl_stmt|;
name|ObjectMapper
name|objectMapper
init|=
name|fullPathObjectMappers
operator|.
name|get
argument_list|(
name|objectPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectMapper
operator|==
literal|null
condition|)
block|{
name|indexOf
operator|=
name|objectPath
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|objectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
return|return
name|objectMapper
return|;
block|}
name|indexOf
operator|=
name|objectPath
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|indexOf
operator|!=
operator|-
literal|1
condition|)
do|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getParentTypes
specifier|public
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|getParentTypes
parameter_list|()
block|{
return|return
name|parentTypes
return|;
block|}
comment|/**      * @return Whether a field is a metadata field.      */
DECL|method|isMetadataField
specifier|public
specifier|static
name|boolean
name|isMetadataField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|META_FIELDS
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
DECL|method|getAllMetaFields
specifier|public
specifier|static
name|String
index|[]
name|getAllMetaFields
parameter_list|()
block|{
return|return
name|META_FIELDS
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/** An analyzer wrapper that can lookup fields within the index mappings */
DECL|class|MapperAnalyzerWrapper
specifier|final
class|class
name|MapperAnalyzerWrapper
extends|extends
name|DelegatingAnalyzerWrapper
block|{
DECL|field|defaultAnalyzer
specifier|private
specifier|final
name|Analyzer
name|defaultAnalyzer
decl_stmt|;
DECL|field|extractAnalyzer
specifier|private
specifier|final
name|Function
argument_list|<
name|MappedFieldType
argument_list|,
name|Analyzer
argument_list|>
name|extractAnalyzer
decl_stmt|;
DECL|method|MapperAnalyzerWrapper
name|MapperAnalyzerWrapper
parameter_list|(
name|Analyzer
name|defaultAnalyzer
parameter_list|,
name|Function
argument_list|<
name|MappedFieldType
argument_list|,
name|Analyzer
argument_list|>
name|extractAnalyzer
parameter_list|)
block|{
name|super
argument_list|(
name|Analyzer
operator|.
name|PER_FIELD_REUSE_STRATEGY
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultAnalyzer
operator|=
name|defaultAnalyzer
expr_stmt|;
name|this
operator|.
name|extractAnalyzer
operator|=
name|extractAnalyzer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWrappedAnalyzer
specifier|protected
name|Analyzer
name|getWrappedAnalyzer
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|MappedFieldType
name|fieldType
init|=
name|smartNameFieldType
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
condition|)
block|{
name|Analyzer
name|analyzer
init|=
name|extractAnalyzer
operator|.
name|apply
argument_list|(
name|fieldType
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
return|return
name|analyzer
return|;
block|}
block|}
return|return
name|defaultAnalyzer
return|;
block|}
block|}
block|}
end_class

end_unit

