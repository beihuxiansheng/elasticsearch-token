begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** A container for tracking results of a mapping merge. */
end_comment

begin_class
DECL|class|MergeResult
specifier|public
class|class
name|MergeResult
block|{
DECL|field|simulate
specifier|private
specifier|final
name|boolean
name|simulate
decl_stmt|;
DECL|field|updateAllTypes
specifier|private
specifier|final
name|boolean
name|updateAllTypes
decl_stmt|;
DECL|field|conflicts
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|newFieldMappers
specifier|private
specifier|final
name|List
argument_list|<
name|FieldMapper
argument_list|>
name|newFieldMappers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|newObjectMappers
specifier|private
specifier|final
name|List
argument_list|<
name|ObjectMapper
argument_list|>
name|newObjectMappers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MergeResult
specifier|public
name|MergeResult
parameter_list|(
name|boolean
name|simulate
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
name|this
operator|.
name|simulate
operator|=
name|simulate
expr_stmt|;
name|this
operator|.
name|updateAllTypes
operator|=
name|updateAllTypes
expr_stmt|;
block|}
DECL|method|addFieldMappers
specifier|public
name|void
name|addFieldMappers
parameter_list|(
name|Collection
argument_list|<
name|FieldMapper
argument_list|>
name|fieldMappers
parameter_list|)
block|{
assert|assert
name|simulate
argument_list|()
operator|==
literal|false
assert|;
name|newFieldMappers
operator|.
name|addAll
argument_list|(
name|fieldMappers
argument_list|)
expr_stmt|;
block|}
DECL|method|addObjectMappers
specifier|public
name|void
name|addObjectMappers
parameter_list|(
name|Collection
argument_list|<
name|ObjectMapper
argument_list|>
name|objectMappers
parameter_list|)
block|{
assert|assert
name|simulate
argument_list|()
operator|==
literal|false
assert|;
name|newObjectMappers
operator|.
name|addAll
argument_list|(
name|objectMappers
argument_list|)
expr_stmt|;
block|}
DECL|method|getNewFieldMappers
specifier|public
name|Collection
argument_list|<
name|FieldMapper
argument_list|>
name|getNewFieldMappers
parameter_list|()
block|{
return|return
name|newFieldMappers
return|;
block|}
DECL|method|getNewObjectMappers
specifier|public
name|Collection
argument_list|<
name|ObjectMapper
argument_list|>
name|getNewObjectMappers
parameter_list|()
block|{
return|return
name|newObjectMappers
return|;
block|}
DECL|method|simulate
specifier|public
name|boolean
name|simulate
parameter_list|()
block|{
return|return
name|simulate
return|;
block|}
DECL|method|updateAllTypes
specifier|public
name|boolean
name|updateAllTypes
parameter_list|()
block|{
return|return
name|updateAllTypes
return|;
block|}
DECL|method|addConflict
specifier|public
name|void
name|addConflict
parameter_list|(
name|String
name|mergeFailure
parameter_list|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|mergeFailure
argument_list|)
expr_stmt|;
block|}
DECL|method|hasConflicts
specifier|public
name|boolean
name|hasConflicts
parameter_list|()
block|{
return|return
name|conflicts
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
return|;
block|}
DECL|method|buildConflicts
specifier|public
name|String
index|[]
name|buildConflicts
parameter_list|()
block|{
return|return
name|conflicts
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
return|;
block|}
block|}
end_class

end_unit

