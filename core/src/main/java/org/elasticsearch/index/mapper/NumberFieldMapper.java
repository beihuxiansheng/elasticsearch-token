begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoublePoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|HalfFloatPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|FieldStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Explicit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
operator|.
name|NumericType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
operator|.
name|DocValuesIndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** A {@link FieldMapper} for numeric types: byte, short, int, long, float and double. */
end_comment

begin_class
DECL|class|NumberFieldMapper
specifier|public
class|class
name|NumberFieldMapper
extends|extends
name|FieldMapper
block|{
comment|// this is private since it has a different default
DECL|field|COERCE_SETTING
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|COERCE_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"index.mapping.coerce"
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
decl_stmt|;
DECL|class|Defaults
specifier|public
specifier|static
class|class
name|Defaults
block|{
DECL|field|IGNORE_MALFORMED
specifier|public
specifier|static
specifier|final
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|IGNORE_MALFORMED
init|=
operator|new
name|Explicit
argument_list|<>
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|COERCE
specifier|public
specifier|static
specifier|final
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|COERCE
init|=
operator|new
name|Explicit
argument_list|<>
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|FieldMapper
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|,
name|NumberFieldMapper
argument_list|>
block|{
DECL|field|ignoreMalformed
specifier|private
name|Boolean
name|ignoreMalformed
decl_stmt|;
DECL|field|coerce
specifier|private
name|Boolean
name|coerce
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|,
name|NumberType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
operator|new
name|NumberFieldType
argument_list|(
name|type
argument_list|)
argument_list|,
operator|new
name|NumberFieldType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|this
expr_stmt|;
block|}
DECL|method|ignoreMalformed
specifier|public
name|Builder
name|ignoreMalformed
parameter_list|(
name|boolean
name|ignoreMalformed
parameter_list|)
block|{
name|this
operator|.
name|ignoreMalformed
operator|=
name|ignoreMalformed
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|ignoreMalformed
specifier|protected
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|ignoreMalformed
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|ignoreMalformed
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|ignoreMalformed
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|context
operator|.
name|indexSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|IGNORE_MALFORMED_SETTING
operator|.
name|get
argument_list|(
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
name|Defaults
operator|.
name|IGNORE_MALFORMED
return|;
block|}
DECL|method|coerce
specifier|public
name|Builder
name|coerce
parameter_list|(
name|boolean
name|coerce
parameter_list|)
block|{
name|this
operator|.
name|coerce
operator|=
name|coerce
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|coerce
specifier|protected
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|coerce
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|coerce
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|coerce
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|context
operator|.
name|indexSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|COERCE_SETTING
operator|.
name|get
argument_list|(
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
name|Defaults
operator|.
name|COERCE
return|;
block|}
annotation|@
name|Override
DECL|method|setupFieldType
specifier|protected
name|void
name|setupFieldType
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|super
operator|.
name|setupFieldType
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|NumberFieldMapper
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|setupFieldType
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
operator|new
name|NumberFieldMapper
argument_list|(
name|name
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|ignoreMalformed
argument_list|(
name|context
argument_list|)
argument_list|,
name|coerce
argument_list|(
name|context
argument_list|)
argument_list|,
name|includeInAll
argument_list|,
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|,
name|multiFieldsBuilder
operator|.
name|build
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
argument_list|,
name|copyTo
argument_list|)
return|;
block|}
block|}
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
DECL|field|type
specifier|final
name|NumberType
name|type
decl_stmt|;
DECL|method|TypeParser
specifier|public
name|TypeParser
parameter_list|(
name|NumberType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|TypeParsers
operator|.
name|parseField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|node
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|node
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"null_value"
argument_list|)
condition|)
block|{
if|if
condition|(
name|propNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Property [null_value] cannot be null."
argument_list|)
throw|;
block|}
name|builder
operator|.
name|nullValue
argument_list|(
name|type
operator|.
name|parse
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"ignore_malformed"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|ignoreMalformed
argument_list|(
name|TypeParsers
operator|.
name|nodeBooleanValue
argument_list|(
literal|"ignore_malformed"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"coerce"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|coerce
argument_list|(
name|TypeParsers
operator|.
name|nodeBooleanValue
argument_list|(
literal|"coerce"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|enum|NumberType
specifier|public
enum|enum
name|NumberType
block|{
DECL|enum constant|HALF_FLOAT
name|HALF_FLOAT
argument_list|(
literal|"half_float"
argument_list|,
name|NumericType
operator|.
name|HALF_FLOAT
argument_list|)
block|{
annotation|@
name|Override
name|Float
name|parse
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Float
operator|)
name|FLOAT
operator|.
name|parse
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Float
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parser
operator|.
name|floatValue
argument_list|(
name|coerce
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|float
name|v
init|=
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|HalfFloatPoint
operator|.
name|newExactQuery
argument_list|(
name|field
argument_list|,
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
name|float
index|[]
name|v
init|=
operator|new
name|float
index|[
name|values
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|v
index|[
name|i
index|]
operator|=
name|parse
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|HalfFloatPoint
operator|.
name|newSetQuery
argument_list|(
name|field
argument_list|,
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|rangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|float
name|l
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|float
name|u
init|=
name|Float
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
if|if
condition|(
name|lowerTerm
operator|!=
literal|null
condition|)
block|{
name|l
operator|=
name|parse
argument_list|(
name|lowerTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeLower
condition|)
block|{
name|l
operator|=
name|Math
operator|.
name|nextDown
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|=
name|HalfFloatPoint
operator|.
name|nextUp
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upperTerm
operator|!=
literal|null
condition|)
block|{
name|u
operator|=
name|parse
argument_list|(
name|upperTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeUpper
condition|)
block|{
name|u
operator|=
name|Math
operator|.
name|nextUp
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
name|u
operator|=
name|HalfFloatPoint
operator|.
name|nextDown
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
return|return
name|HalfFloatPoint
operator|.
name|newRangeQuery
argument_list|(
name|field
argument_list|,
name|l
argument_list|,
name|u
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|createFields
parameter_list|(
name|String
name|name
parameter_list|,
name|Number
name|value
parameter_list|,
name|boolean
name|indexed
parameter_list|,
name|boolean
name|docValued
parameter_list|,
name|boolean
name|stored
parameter_list|)
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexed
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|HalfFloatPoint
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docValued
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
name|name
argument_list|,
name|HalfFloatPoint
operator|.
name|halfFloatToSortableShort
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stored
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
annotation|@
name|Override
name|FieldStats
operator|.
name|Double
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|size
init|=
name|PointValues
operator|.
name|size
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|docCount
init|=
name|PointValues
operator|.
name|getDocCount
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|min
init|=
name|PointValues
operator|.
name|getMinPackedValue
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|max
init|=
name|PointValues
operator|.
name|getMaxPackedValue
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldStats
operator|.
name|Double
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|docCount
argument_list|,
operator|-
literal|1L
argument_list|,
name|size
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|HalfFloatPoint
operator|.
name|decodeDimension
argument_list|(
name|min
argument_list|,
literal|0
argument_list|)
argument_list|,
name|HalfFloatPoint
operator|.
name|decodeDimension
argument_list|(
name|max
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|FLOAT
name|FLOAT
argument_list|(
literal|"float"
argument_list|,
name|NumericType
operator|.
name|FLOAT
argument_list|)
block|{
annotation|@
name|Override
name|Float
name|parse
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|value
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Float
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parser
operator|.
name|floatValue
argument_list|(
name|coerce
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|float
name|v
init|=
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|FloatPoint
operator|.
name|newExactQuery
argument_list|(
name|field
argument_list|,
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
name|float
index|[]
name|v
init|=
operator|new
name|float
index|[
name|values
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|v
index|[
name|i
index|]
operator|=
name|parse
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|FloatPoint
operator|.
name|newSetQuery
argument_list|(
name|field
argument_list|,
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|rangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|float
name|l
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|float
name|u
init|=
name|Float
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
if|if
condition|(
name|lowerTerm
operator|!=
literal|null
condition|)
block|{
name|l
operator|=
name|parse
argument_list|(
name|lowerTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeLower
operator|==
literal|false
condition|)
block|{
name|l
operator|=
name|Math
operator|.
name|nextUp
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|upperTerm
operator|!=
literal|null
condition|)
block|{
name|u
operator|=
name|parse
argument_list|(
name|upperTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeUpper
operator|==
literal|false
condition|)
block|{
name|u
operator|=
name|Math
operator|.
name|nextDown
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|FloatPoint
operator|.
name|newRangeQuery
argument_list|(
name|field
argument_list|,
name|l
argument_list|,
name|u
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|createFields
parameter_list|(
name|String
name|name
parameter_list|,
name|Number
name|value
parameter_list|,
name|boolean
name|indexed
parameter_list|,
name|boolean
name|docValued
parameter_list|,
name|boolean
name|stored
parameter_list|)
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexed
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docValued
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
name|name
argument_list|,
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stored
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
annotation|@
name|Override
name|FieldStats
operator|.
name|Double
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|size
init|=
name|PointValues
operator|.
name|size
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|docCount
init|=
name|PointValues
operator|.
name|getDocCount
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|min
init|=
name|PointValues
operator|.
name|getMinPackedValue
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|max
init|=
name|PointValues
operator|.
name|getMaxPackedValue
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldStats
operator|.
name|Double
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|docCount
argument_list|,
operator|-
literal|1L
argument_list|,
name|size
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|FloatPoint
operator|.
name|decodeDimension
argument_list|(
name|min
argument_list|,
literal|0
argument_list|)
argument_list|,
name|FloatPoint
operator|.
name|decodeDimension
argument_list|(
name|max
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|DOUBLE
name|DOUBLE
argument_list|(
literal|"double"
argument_list|,
name|NumericType
operator|.
name|DOUBLE
argument_list|)
block|{
annotation|@
name|Override
name|Double
name|parse
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|value
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Double
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parser
operator|.
name|doubleValue
argument_list|(
name|coerce
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|double
name|v
init|=
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|DoublePoint
operator|.
name|newExactQuery
argument_list|(
name|field
argument_list|,
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
name|double
index|[]
name|v
init|=
operator|new
name|double
index|[
name|values
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|v
index|[
name|i
index|]
operator|=
name|parse
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|DoublePoint
operator|.
name|newSetQuery
argument_list|(
name|field
argument_list|,
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|rangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|double
name|l
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|double
name|u
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
if|if
condition|(
name|lowerTerm
operator|!=
literal|null
condition|)
block|{
name|l
operator|=
name|parse
argument_list|(
name|lowerTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeLower
operator|==
literal|false
condition|)
block|{
name|l
operator|=
name|Math
operator|.
name|nextUp
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|upperTerm
operator|!=
literal|null
condition|)
block|{
name|u
operator|=
name|parse
argument_list|(
name|upperTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeUpper
operator|==
literal|false
condition|)
block|{
name|u
operator|=
name|Math
operator|.
name|nextDown
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|DoublePoint
operator|.
name|newRangeQuery
argument_list|(
name|field
argument_list|,
name|l
argument_list|,
name|u
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|createFields
parameter_list|(
name|String
name|name
parameter_list|,
name|Number
name|value
parameter_list|,
name|boolean
name|indexed
parameter_list|,
name|boolean
name|docValued
parameter_list|,
name|boolean
name|stored
parameter_list|)
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexed
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docValued
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
name|name
argument_list|,
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stored
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
annotation|@
name|Override
name|FieldStats
operator|.
name|Double
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|size
init|=
name|PointValues
operator|.
name|size
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|docCount
init|=
name|PointValues
operator|.
name|getDocCount
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|min
init|=
name|PointValues
operator|.
name|getMinPackedValue
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|max
init|=
name|PointValues
operator|.
name|getMaxPackedValue
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldStats
operator|.
name|Double
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|docCount
argument_list|,
operator|-
literal|1L
argument_list|,
name|size
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|DoublePoint
operator|.
name|decodeDimension
argument_list|(
name|min
argument_list|,
literal|0
argument_list|)
argument_list|,
name|DoublePoint
operator|.
name|decodeDimension
argument_list|(
name|max
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|BYTE
name|BYTE
argument_list|(
literal|"byte"
argument_list|,
name|NumericType
operator|.
name|BYTE
argument_list|)
block|{
annotation|@
name|Override
name|Byte
name|parse
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|double
name|doubleValue
init|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|doubleValue
argument_list|<
name|Byte
operator|.
name|MIN_VALUE
operator|||
name|doubleValue
argument_list|>
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value ["
operator|+
name|value
operator|+
literal|"] is out of range for a byte"
argument_list|)
throw|;
block|}
if|if
condition|(
name|doubleValue
operator|%
literal|1
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value ["
operator|+
name|value
operator|+
literal|"] has a decimal part"
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|byteValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|value
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
return|return
name|Byte
operator|.
name|parseByte
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Short
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|value
init|=
name|parser
operator|.
name|intValue
argument_list|(
name|coerce
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
argument_list|<
name|Byte
operator|.
name|MIN_VALUE
operator|||
name|value
argument_list|>
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value ["
operator|+
name|value
operator|+
literal|"] is out of range for a byte"
argument_list|)
throw|;
block|}
return|return
operator|(
name|short
operator|)
name|value
return|;
block|}
annotation|@
name|Override
name|Query
name|termQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|INTEGER
operator|.
name|termQuery
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|INTEGER
operator|.
name|termsQuery
argument_list|(
name|field
argument_list|,
name|values
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|rangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|INTEGER
operator|.
name|rangeQuery
argument_list|(
name|field
argument_list|,
name|lowerTerm
argument_list|,
name|upperTerm
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|createFields
parameter_list|(
name|String
name|name
parameter_list|,
name|Number
name|value
parameter_list|,
name|boolean
name|indexed
parameter_list|,
name|boolean
name|docValued
parameter_list|,
name|boolean
name|stored
parameter_list|)
block|{
return|return
name|INTEGER
operator|.
name|createFields
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|indexed
argument_list|,
name|docValued
argument_list|,
name|stored
argument_list|)
return|;
block|}
annotation|@
name|Override
name|FieldStats
operator|.
name|Long
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|FieldStats
operator|.
name|Long
operator|)
name|INTEGER
operator|.
name|stats
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Number
name|valueForSearch
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|byteValue
argument_list|()
return|;
block|}
block|}
block|,
DECL|enum constant|SHORT
name|SHORT
argument_list|(
literal|"short"
argument_list|,
name|NumericType
operator|.
name|SHORT
argument_list|)
block|{
annotation|@
name|Override
name|Short
name|parse
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|double
name|doubleValue
init|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|doubleValue
argument_list|<
name|Short
operator|.
name|MIN_VALUE
operator|||
name|doubleValue
argument_list|>
name|Short
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value ["
operator|+
name|value
operator|+
literal|"] is out of range for a short"
argument_list|)
throw|;
block|}
if|if
condition|(
name|doubleValue
operator|%
literal|1
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value ["
operator|+
name|value
operator|+
literal|"] has a decimal part"
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|shortValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|value
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
return|return
name|Short
operator|.
name|parseShort
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Short
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|value
init|=
name|parser
operator|.
name|intValue
argument_list|(
name|coerce
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
argument_list|<
name|Short
operator|.
name|MIN_VALUE
operator|||
name|value
argument_list|>
name|Short
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value ["
operator|+
name|value
operator|+
literal|"] is out of range for a short"
argument_list|)
throw|;
block|}
return|return
operator|(
name|short
operator|)
name|value
return|;
block|}
annotation|@
name|Override
name|Query
name|termQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|INTEGER
operator|.
name|termQuery
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|INTEGER
operator|.
name|termsQuery
argument_list|(
name|field
argument_list|,
name|values
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|rangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|INTEGER
operator|.
name|rangeQuery
argument_list|(
name|field
argument_list|,
name|lowerTerm
argument_list|,
name|upperTerm
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|createFields
parameter_list|(
name|String
name|name
parameter_list|,
name|Number
name|value
parameter_list|,
name|boolean
name|indexed
parameter_list|,
name|boolean
name|docValued
parameter_list|,
name|boolean
name|stored
parameter_list|)
block|{
return|return
name|INTEGER
operator|.
name|createFields
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|indexed
argument_list|,
name|docValued
argument_list|,
name|stored
argument_list|)
return|;
block|}
annotation|@
name|Override
name|FieldStats
operator|.
name|Long
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|FieldStats
operator|.
name|Long
operator|)
name|INTEGER
operator|.
name|stats
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Number
name|valueForSearch
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|shortValue
argument_list|()
return|;
block|}
block|}
block|,
DECL|enum constant|INTEGER
name|INTEGER
argument_list|(
literal|"integer"
argument_list|,
name|NumericType
operator|.
name|INT
argument_list|)
block|{
annotation|@
name|Override
name|Integer
name|parse
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|double
name|doubleValue
init|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|doubleValue
argument_list|<
name|Integer
operator|.
name|MIN_VALUE
operator|||
name|doubleValue
argument_list|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value ["
operator|+
name|value
operator|+
literal|"] is out of range for an integer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|doubleValue
operator|%
literal|1
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value ["
operator|+
name|value
operator|+
literal|"] has a decimal part"
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|value
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Integer
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parser
operator|.
name|intValue
argument_list|(
name|coerce
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|int
name|v
init|=
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|IntPoint
operator|.
name|newExactQuery
argument_list|(
name|field
argument_list|,
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
name|int
index|[]
name|v
init|=
operator|new
name|int
index|[
name|values
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|v
index|[
name|i
index|]
operator|=
name|parse
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
name|field
argument_list|,
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|rangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|int
name|l
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
name|int
name|u
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|lowerTerm
operator|!=
literal|null
condition|)
block|{
name|l
operator|=
name|parse
argument_list|(
name|lowerTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeLower
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|l
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
operator|new
name|MatchNoDocsQuery
argument_list|()
return|;
block|}
operator|++
name|l
expr_stmt|;
block|}
block|}
if|if
condition|(
name|upperTerm
operator|!=
literal|null
condition|)
block|{
name|u
operator|=
name|parse
argument_list|(
name|upperTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeUpper
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|u
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
operator|new
name|MatchNoDocsQuery
argument_list|()
return|;
block|}
operator|--
name|u
expr_stmt|;
block|}
block|}
return|return
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
name|field
argument_list|,
name|l
argument_list|,
name|u
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|createFields
parameter_list|(
name|String
name|name
parameter_list|,
name|Number
name|value
parameter_list|,
name|boolean
name|indexed
parameter_list|,
name|boolean
name|docValued
parameter_list|,
name|boolean
name|stored
parameter_list|)
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexed
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|IntPoint
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docValued
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stored
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
annotation|@
name|Override
name|FieldStats
operator|.
name|Long
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|size
init|=
name|PointValues
operator|.
name|size
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|docCount
init|=
name|PointValues
operator|.
name|getDocCount
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|min
init|=
name|PointValues
operator|.
name|getMinPackedValue
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|max
init|=
name|PointValues
operator|.
name|getMaxPackedValue
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldStats
operator|.
name|Long
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|docCount
argument_list|,
operator|-
literal|1L
argument_list|,
name|size
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|IntPoint
operator|.
name|decodeDimension
argument_list|(
name|min
argument_list|,
literal|0
argument_list|)
argument_list|,
name|IntPoint
operator|.
name|decodeDimension
argument_list|(
name|max
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|LONG
name|LONG
argument_list|(
literal|"long"
argument_list|,
name|NumericType
operator|.
name|LONG
argument_list|)
block|{
annotation|@
name|Override
name|Long
name|parse
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|double
name|doubleValue
init|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|doubleValue
argument_list|<
name|Long
operator|.
name|MIN_VALUE
operator|||
name|doubleValue
argument_list|>
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value ["
operator|+
name|value
operator|+
literal|"] is out of range for a long"
argument_list|)
throw|;
block|}
if|if
condition|(
name|doubleValue
operator|%
literal|1
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value ["
operator|+
name|value
operator|+
literal|"] has a decimal part"
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|value
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Long
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parser
operator|.
name|longValue
argument_list|(
name|coerce
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|long
name|v
init|=
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
name|field
argument_list|,
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|termsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
name|long
index|[]
name|v
init|=
operator|new
name|long
index|[
name|values
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|v
index|[
name|i
index|]
operator|=
name|parse
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
name|field
argument_list|,
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Query
name|rangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|long
name|l
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|long
name|u
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|lowerTerm
operator|!=
literal|null
condition|)
block|{
name|l
operator|=
name|parse
argument_list|(
name|lowerTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeLower
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|l
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
operator|new
name|MatchNoDocsQuery
argument_list|()
return|;
block|}
operator|++
name|l
expr_stmt|;
block|}
block|}
if|if
condition|(
name|upperTerm
operator|!=
literal|null
condition|)
block|{
name|u
operator|=
name|parse
argument_list|(
name|upperTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeUpper
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|u
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
operator|new
name|MatchNoDocsQuery
argument_list|()
return|;
block|}
operator|--
name|u
expr_stmt|;
block|}
block|}
return|return
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
name|field
argument_list|,
name|l
argument_list|,
name|u
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|createFields
parameter_list|(
name|String
name|name
parameter_list|,
name|Number
name|value
parameter_list|,
name|boolean
name|indexed
parameter_list|,
name|boolean
name|docValued
parameter_list|,
name|boolean
name|stored
parameter_list|)
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexed
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docValued
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stored
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
annotation|@
name|Override
name|FieldStats
operator|.
name|Long
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|size
init|=
name|PointValues
operator|.
name|size
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|docCount
init|=
name|PointValues
operator|.
name|getDocCount
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|min
init|=
name|PointValues
operator|.
name|getMinPackedValue
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|max
init|=
name|PointValues
operator|.
name|getMaxPackedValue
argument_list|(
name|reader
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldStats
operator|.
name|Long
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|docCount
argument_list|,
operator|-
literal|1L
argument_list|,
name|size
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|LongPoint
operator|.
name|decodeDimension
argument_list|(
name|min
argument_list|,
literal|0
argument_list|)
argument_list|,
name|LongPoint
operator|.
name|decodeDimension
argument_list|(
name|max
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
block|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|numericType
specifier|private
specifier|final
name|NumericType
name|numericType
decl_stmt|;
DECL|method|NumberType
name|NumberType
parameter_list|(
name|String
name|name
parameter_list|,
name|NumericType
name|numericType
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|numericType
operator|=
name|numericType
expr_stmt|;
block|}
comment|/** Get the associated type name. */
DECL|method|typeName
specifier|public
specifier|final
name|String
name|typeName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/** Get the associated numerit type */
DECL|method|numericType
specifier|final
name|NumericType
name|numericType
parameter_list|()
block|{
return|return
name|numericType
return|;
block|}
DECL|method|termQuery
specifier|abstract
name|Query
name|termQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
function_decl|;
DECL|method|termsQuery
specifier|abstract
name|Query
name|termsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
function_decl|;
DECL|method|rangeQuery
specifier|abstract
name|Query
name|rangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
function_decl|;
DECL|method|parse
specifier|abstract
name|Number
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|coerce
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|parse
specifier|abstract
name|Number
name|parse
parameter_list|(
name|Object
name|value
parameter_list|)
function_decl|;
DECL|method|createFields
specifier|public
specifier|abstract
name|List
argument_list|<
name|Field
argument_list|>
name|createFields
parameter_list|(
name|String
name|name
parameter_list|,
name|Number
name|value
parameter_list|,
name|boolean
name|indexed
parameter_list|,
name|boolean
name|docValued
parameter_list|,
name|boolean
name|stored
parameter_list|)
function_decl|;
DECL|method|stats
specifier|abstract
name|FieldStats
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|valueForSearch
name|Number
name|valueForSearch
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
block|}
DECL|class|NumberFieldType
specifier|public
specifier|static
specifier|final
class|class
name|NumberFieldType
extends|extends
name|MappedFieldType
block|{
DECL|field|type
name|NumberType
name|type
decl_stmt|;
DECL|method|NumberFieldType
specifier|public
name|NumberFieldType
parameter_list|(
name|NumberType
name|type
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|NumberFieldType
name|NumberFieldType
parameter_list|(
name|NumberFieldType
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|other
operator|.
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|MappedFieldType
name|clone
parameter_list|()
block|{
return|return
operator|new
name|NumberFieldType
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|typeName
specifier|public
name|String
name|typeName
parameter_list|()
block|{
return|return
name|type
operator|.
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|termQuery
specifier|public
name|Query
name|termQuery
parameter_list|(
name|Object
name|value
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|failIfNotIndexed
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|type
operator|.
name|termQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|boost
argument_list|()
operator|!=
literal|1f
condition|)
block|{
name|query
operator|=
operator|new
name|BoostQuery
argument_list|(
name|query
argument_list|,
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|termsQuery
specifier|public
name|Query
name|termsQuery
parameter_list|(
name|List
name|values
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|failIfNotIndexed
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|type
operator|.
name|termsQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|boost
argument_list|()
operator|!=
literal|1f
condition|)
block|{
name|query
operator|=
operator|new
name|BoostQuery
argument_list|(
name|query
argument_list|,
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|rangeQuery
specifier|public
name|Query
name|rangeQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|failIfNotIndexed
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|type
operator|.
name|rangeQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|lowerTerm
argument_list|,
name|upperTerm
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
decl_stmt|;
if|if
condition|(
name|boost
argument_list|()
operator|!=
literal|1f
condition|)
block|{
name|query
operator|=
operator|new
name|BoostQuery
argument_list|(
name|query
argument_list|,
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|stats
specifier|public
name|FieldStats
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|type
operator|.
name|stats
argument_list|(
name|reader
argument_list|,
name|name
argument_list|()
argument_list|,
name|isSearchable
argument_list|()
argument_list|,
name|isAggregatable
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fielddataBuilder
specifier|public
name|IndexFieldData
operator|.
name|Builder
name|fielddataBuilder
parameter_list|()
block|{
name|failIfNoDocValues
argument_list|()
expr_stmt|;
return|return
operator|new
name|DocValuesIndexFieldData
operator|.
name|Builder
argument_list|()
operator|.
name|numericType
argument_list|(
name|type
operator|.
name|numericType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|valueForDisplay
specifier|public
name|Object
name|valueForDisplay
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|type
operator|.
name|valueForSearch
argument_list|(
operator|(
name|Number
operator|)
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docValueFormat
specifier|public
name|DocValueFormat
name|docValueFormat
parameter_list|(
name|String
name|format
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
if|if
condition|(
name|timeZone
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field ["
operator|+
name|name
argument_list|()
operator|+
literal|"] of type ["
operator|+
name|typeName
argument_list|()
operator|+
literal|"] does not support custom time zones"
argument_list|)
throw|;
block|}
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
return|return
name|DocValueFormat
operator|.
name|RAW
return|;
block|}
else|else
block|{
return|return
operator|new
name|DocValueFormat
operator|.
name|Decimal
argument_list|(
name|format
argument_list|)
return|;
block|}
block|}
block|}
DECL|field|includeInAll
specifier|private
name|Boolean
name|includeInAll
decl_stmt|;
DECL|field|ignoreMalformed
specifier|private
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|ignoreMalformed
decl_stmt|;
DECL|field|coerce
specifier|private
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|coerce
decl_stmt|;
DECL|method|NumberFieldMapper
specifier|private
name|NumberFieldMapper
parameter_list|(
name|String
name|simpleName
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|,
name|MappedFieldType
name|defaultFieldType
parameter_list|,
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|ignoreMalformed
parameter_list|,
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|coerce
parameter_list|,
name|Boolean
name|includeInAll
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|MultiFields
name|multiFields
parameter_list|,
name|CopyTo
name|copyTo
parameter_list|)
block|{
name|super
argument_list|(
name|simpleName
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|indexSettings
argument_list|,
name|multiFields
argument_list|,
name|copyTo
argument_list|)
expr_stmt|;
name|this
operator|.
name|ignoreMalformed
operator|=
name|ignoreMalformed
expr_stmt|;
name|this
operator|.
name|coerce
operator|=
name|coerce
expr_stmt|;
name|this
operator|.
name|includeInAll
operator|=
name|includeInAll
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|NumberFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|NumberFieldType
operator|)
name|super
operator|.
name|fieldType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contentType
specifier|protected
name|String
name|contentType
parameter_list|()
block|{
return|return
name|fieldType
operator|.
name|typeName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|protected
name|NumberFieldMapper
name|clone
parameter_list|()
block|{
return|return
operator|(
name|NumberFieldMapper
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|parseCreateField
specifier|protected
name|void
name|parseCreateField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|IndexableField
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|includeInAll
init|=
name|context
operator|.
name|includeInAll
argument_list|(
name|this
operator|.
name|includeInAll
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|Object
name|value
decl_stmt|;
name|Number
name|numericValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|externalValueSet
argument_list|()
condition|)
block|{
name|value
operator|=
name|context
operator|.
name|externalValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|coerce
operator|.
name|value
argument_list|()
operator|&&
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_STRING
operator|&&
name|parser
operator|.
name|textLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|numericValue
operator|=
name|fieldType
argument_list|()
operator|.
name|type
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|coerce
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|ignoreMalformed
operator|.
name|value
argument_list|()
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|includeInAll
condition|)
block|{
name|value
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
comment|// preserve formatting
block|}
else|else
block|{
name|value
operator|=
name|numericValue
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|fieldType
argument_list|()
operator|.
name|nullValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|numericValue
operator|==
literal|null
condition|)
block|{
name|numericValue
operator|=
name|fieldType
argument_list|()
operator|.
name|type
operator|.
name|parse
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeInAll
condition|)
block|{
name|context
operator|.
name|allEntries
argument_list|()
operator|.
name|addText
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|fieldType
argument_list|()
operator|.
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|indexed
init|=
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
decl_stmt|;
name|boolean
name|docValued
init|=
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
decl_stmt|;
name|boolean
name|stored
init|=
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
decl_stmt|;
name|fields
operator|.
name|addAll
argument_list|(
name|fieldType
argument_list|()
operator|.
name|type
operator|.
name|createFields
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|numericValue
argument_list|,
name|indexed
argument_list|,
name|docValued
argument_list|,
name|stored
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doMerge
specifier|protected
name|void
name|doMerge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
name|super
operator|.
name|doMerge
argument_list|(
name|mergeWith
argument_list|,
name|updateAllTypes
argument_list|)
expr_stmt|;
name|NumberFieldMapper
name|other
init|=
operator|(
name|NumberFieldMapper
operator|)
name|mergeWith
decl_stmt|;
name|this
operator|.
name|includeInAll
operator|=
name|other
operator|.
name|includeInAll
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|ignoreMalformed
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|this
operator|.
name|ignoreMalformed
operator|=
name|other
operator|.
name|ignoreMalformed
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|coerce
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|this
operator|.
name|coerce
operator|=
name|other
operator|.
name|coerce
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|void
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|doXContentBody
argument_list|(
name|builder
argument_list|,
name|includeDefaults
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDefaults
operator|||
name|ignoreMalformed
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"ignore_malformed"
argument_list|,
name|ignoreMalformed
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|coerce
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"coerce"
argument_list|,
name|coerce
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|nullValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"null_value"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeInAll
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
name|includeInAll
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeDefaults
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

