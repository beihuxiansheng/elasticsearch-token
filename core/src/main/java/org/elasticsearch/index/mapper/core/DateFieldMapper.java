begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.core
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LegacyNumericRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LegacyNumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|FieldStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Explicit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Numbers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|DateMathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|FormatDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|LocaleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NumericDateAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
operator|.
name|NumericType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
operator|.
name|DocValuesIndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|LongFieldMapper
operator|.
name|CustomLongNumericField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
operator|.
name|parseDateTimeFormatter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
operator|.
name|parseNumberField
import|;
end_import

begin_class
DECL|class|DateFieldMapper
specifier|public
class|class
name|DateFieldMapper
extends|extends
name|NumberFieldMapper
block|{
DECL|field|CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"date"
decl_stmt|;
DECL|class|Defaults
specifier|public
specifier|static
class|class
name|Defaults
extends|extends
name|NumberFieldMapper
operator|.
name|Defaults
block|{
DECL|field|DATE_TIME_FORMATTER
specifier|public
specifier|static
specifier|final
name|FormatDateTimeFormatter
name|DATE_TIME_FORMATTER
init|=
name|Joda
operator|.
name|forPattern
argument_list|(
literal|"strict_date_optional_time||epoch_millis"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
DECL|field|TIME_UNIT
specifier|public
specifier|static
specifier|final
name|TimeUnit
name|TIME_UNIT
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
decl_stmt|;
DECL|field|FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|DateFieldType
name|FIELD_TYPE
init|=
operator|new
name|DateFieldType
argument_list|()
decl_stmt|;
static|static
block|{
name|FIELD_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|field|NULL_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|NULL_VALUE
init|=
literal|null
decl_stmt|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|NumberFieldMapper
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|,
name|DateFieldMapper
argument_list|>
block|{
DECL|field|nullValue
specifier|protected
name|String
name|nullValue
init|=
name|Defaults
operator|.
name|NULL_VALUE
decl_stmt|;
DECL|field|locale
specifier|private
name|Locale
name|locale
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|,
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
argument_list|)
expr_stmt|;
name|builder
operator|=
name|this
expr_stmt|;
comment|// do *NOT* rely on the default locale
name|locale
operator|=
name|Locale
operator|.
name|ROOT
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|DateFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|DateFieldType
operator|)
name|fieldType
return|;
block|}
DECL|method|timeUnit
specifier|public
name|Builder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|fieldType
argument_list|()
operator|.
name|setTimeUnit
argument_list|(
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|nullValue
specifier|public
name|Builder
name|nullValue
parameter_list|(
name|String
name|nullValue
parameter_list|)
block|{
name|this
operator|.
name|nullValue
operator|=
name|nullValue
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|dateTimeFormatter
specifier|public
name|Builder
name|dateTimeFormatter
parameter_list|(
name|FormatDateTimeFormatter
name|dateTimeFormatter
parameter_list|)
block|{
name|fieldType
argument_list|()
operator|.
name|setDateTimeFormatter
argument_list|(
name|dateTimeFormatter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|DateFieldMapper
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|setupFieldType
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setNullValue
argument_list|(
name|nullValue
argument_list|)
expr_stmt|;
name|DateFieldMapper
name|fieldMapper
init|=
operator|new
name|DateFieldMapper
argument_list|(
name|name
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|ignoreMalformed
argument_list|(
name|context
argument_list|)
argument_list|,
name|coerce
argument_list|(
name|context
argument_list|)
argument_list|,
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|,
name|multiFieldsBuilder
operator|.
name|build
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
argument_list|,
name|copyTo
argument_list|)
decl_stmt|;
return|return
operator|(
name|DateFieldMapper
operator|)
name|fieldMapper
operator|.
name|includeInAll
argument_list|(
name|includeInAll
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setupFieldType
specifier|protected
name|void
name|setupFieldType
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|FormatDateTimeFormatter
name|dateTimeFormatter
init|=
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
decl_stmt|;
if|if
condition|(
operator|!
name|locale
operator|.
name|equals
argument_list|(
name|dateTimeFormatter
operator|.
name|locale
argument_list|()
argument_list|)
condition|)
block|{
name|fieldType
argument_list|()
operator|.
name|setDateTimeFormatter
argument_list|(
operator|new
name|FormatDateTimeFormatter
argument_list|(
name|dateTimeFormatter
operator|.
name|format
argument_list|()
argument_list|,
name|dateTimeFormatter
operator|.
name|parser
argument_list|()
argument_list|,
name|dateTimeFormatter
operator|.
name|printer
argument_list|()
argument_list|,
name|locale
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setupFieldType
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|locale
specifier|public
name|Builder
name|locale
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|makeNumberAnalyzer
specifier|protected
name|NamedAnalyzer
name|makeNumberAnalyzer
parameter_list|(
name|int
name|precisionStep
parameter_list|)
block|{
return|return
name|NumericDateAnalyzer
operator|.
name|buildNamedAnalyzer
argument_list|(
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|,
name|precisionStep
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|maxPrecisionStep
specifier|protected
name|int
name|maxPrecisionStep
parameter_list|()
block|{
return|return
literal|64
return|;
block|}
block|}
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|DateFieldMapper
operator|.
name|Builder
name|builder
init|=
operator|new
name|DateFieldMapper
operator|.
name|Builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseNumberField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|node
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
name|boolean
name|configuredFormat
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|node
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"null_value"
argument_list|)
condition|)
block|{
if|if
condition|(
name|propNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Property [null_value] cannot be null."
argument_list|)
throw|;
block|}
name|builder
operator|.
name|nullValue
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"format"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|dateTimeFormatter
argument_list|(
name|parseDateTimeFormatter
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
name|configuredFormat
operator|=
literal|true
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"numeric_resolution"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|timeUnit
argument_list|(
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"locale"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|locale
argument_list|(
name|LocaleUtils
operator|.
name|parse
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|configuredFormat
condition|)
block|{
name|builder
operator|.
name|dateTimeFormatter
argument_list|(
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|DateFieldType
specifier|public
specifier|static
class|class
name|DateFieldType
extends|extends
name|NumberFieldType
block|{
DECL|class|LateParsingQuery
specifier|final
class|class
name|LateParsingQuery
extends|extends
name|Query
block|{
DECL|field|lowerTerm
specifier|final
name|Object
name|lowerTerm
decl_stmt|;
DECL|field|upperTerm
specifier|final
name|Object
name|upperTerm
decl_stmt|;
DECL|field|includeLower
specifier|final
name|boolean
name|includeLower
decl_stmt|;
DECL|field|includeUpper
specifier|final
name|boolean
name|includeUpper
decl_stmt|;
DECL|field|timeZone
specifier|final
name|DateTimeZone
name|timeZone
decl_stmt|;
DECL|field|forcedDateParser
specifier|final
name|DateMathParser
name|forcedDateParser
decl_stmt|;
DECL|method|LateParsingQuery
specifier|public
name|LateParsingQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|,
name|DateMathParser
name|forcedDateParser
parameter_list|)
block|{
name|this
operator|.
name|lowerTerm
operator|=
name|lowerTerm
expr_stmt|;
name|this
operator|.
name|upperTerm
operator|=
name|upperTerm
expr_stmt|;
name|this
operator|.
name|includeLower
operator|=
name|includeLower
expr_stmt|;
name|this
operator|.
name|includeUpper
operator|=
name|includeUpper
expr_stmt|;
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
name|this
operator|.
name|forcedDateParser
operator|=
name|forcedDateParser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|rewritten
init|=
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|rewritten
operator|!=
name|this
condition|)
block|{
return|return
name|rewritten
return|;
block|}
return|return
name|innerRangeQuery
argument_list|(
name|lowerTerm
argument_list|,
name|upperTerm
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
name|timeZone
argument_list|,
name|forcedDateParser
argument_list|)
return|;
block|}
comment|// Even though we only cache rewritten queries it is good to let all queries implement hashCode() and equals():
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|LateParsingQuery
name|that
init|=
operator|(
name|LateParsingQuery
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|includeLower
operator|!=
name|that
operator|.
name|includeLower
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|includeUpper
operator|!=
name|that
operator|.
name|includeUpper
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|lowerTerm
operator|!=
literal|null
condition|?
operator|!
name|lowerTerm
operator|.
name|equals
argument_list|(
name|that
operator|.
name|lowerTerm
argument_list|)
else|:
name|that
operator|.
name|lowerTerm
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|upperTerm
operator|!=
literal|null
condition|?
operator|!
name|upperTerm
operator|.
name|equals
argument_list|(
name|that
operator|.
name|upperTerm
argument_list|)
else|:
name|that
operator|.
name|upperTerm
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|timeZone
operator|!=
literal|null
condition|?
operator|!
name|timeZone
operator|.
name|equals
argument_list|(
name|that
operator|.
name|timeZone
argument_list|)
else|:
name|that
operator|.
name|timeZone
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|super
operator|.
name|hashCode
argument_list|()
argument_list|,
name|lowerTerm
argument_list|,
name|upperTerm
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|includeLower
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|lowerTerm
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|lowerTerm
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|upperTerm
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|upperTerm
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|includeUpper
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|field|dateTimeFormatter
specifier|protected
name|FormatDateTimeFormatter
name|dateTimeFormatter
init|=
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
decl_stmt|;
DECL|field|timeUnit
specifier|protected
name|TimeUnit
name|timeUnit
init|=
name|Defaults
operator|.
name|TIME_UNIT
decl_stmt|;
DECL|field|dateMathParser
specifier|protected
name|DateMathParser
name|dateMathParser
init|=
operator|new
name|DateMathParser
argument_list|(
name|dateTimeFormatter
argument_list|)
decl_stmt|;
DECL|method|DateFieldType
specifier|public
name|DateFieldType
parameter_list|()
block|{
name|super
argument_list|(
name|LegacyNumericType
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
DECL|method|DateFieldType
specifier|protected
name|DateFieldType
parameter_list|(
name|DateFieldType
name|ref
parameter_list|)
block|{
name|super
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|this
operator|.
name|dateTimeFormatter
operator|=
name|ref
operator|.
name|dateTimeFormatter
expr_stmt|;
name|this
operator|.
name|timeUnit
operator|=
name|ref
operator|.
name|timeUnit
expr_stmt|;
name|this
operator|.
name|dateMathParser
operator|=
name|ref
operator|.
name|dateMathParser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|DateFieldType
name|clone
parameter_list|()
block|{
return|return
operator|new
name|DateFieldType
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|DateFieldType
name|that
init|=
operator|(
name|DateFieldType
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|dateTimeFormatter
operator|.
name|format
argument_list|()
argument_list|,
name|that
operator|.
name|dateTimeFormatter
operator|.
name|format
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|dateTimeFormatter
operator|.
name|locale
argument_list|()
argument_list|,
name|that
operator|.
name|dateTimeFormatter
operator|.
name|locale
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|timeUnit
argument_list|,
name|that
operator|.
name|timeUnit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|super
operator|.
name|hashCode
argument_list|()
argument_list|,
name|dateTimeFormatter
operator|.
name|format
argument_list|()
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|typeName
specifier|public
name|String
name|typeName
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|checkCompatibility
specifier|public
name|void
name|checkCompatibility
parameter_list|(
name|MappedFieldType
name|fieldType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
name|super
operator|.
name|checkCompatibility
argument_list|(
name|fieldType
argument_list|,
name|conflicts
argument_list|,
name|strict
argument_list|)
expr_stmt|;
if|if
condition|(
name|strict
condition|)
block|{
name|DateFieldType
name|other
init|=
operator|(
name|DateFieldType
operator|)
name|fieldType
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|,
name|other
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is used by multiple types. Set update_all_types to true to update [format] across all types."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|dateTimeFormatter
argument_list|()
operator|.
name|locale
argument_list|()
argument_list|,
name|other
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|locale
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is used by multiple types. Set update_all_types to true to update [locale] across all types."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|timeUnit
argument_list|()
argument_list|,
name|other
operator|.
name|timeUnit
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] is used by multiple types. Set update_all_types to true to update [numeric_resolution] across all types."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|dateTimeFormatter
specifier|public
name|FormatDateTimeFormatter
name|dateTimeFormatter
parameter_list|()
block|{
return|return
name|dateTimeFormatter
return|;
block|}
DECL|method|setDateTimeFormatter
specifier|public
name|void
name|setDateTimeFormatter
parameter_list|(
name|FormatDateTimeFormatter
name|dateTimeFormatter
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|dateTimeFormatter
operator|=
name|dateTimeFormatter
expr_stmt|;
name|this
operator|.
name|dateMathParser
operator|=
operator|new
name|DateMathParser
argument_list|(
name|dateTimeFormatter
argument_list|)
expr_stmt|;
block|}
DECL|method|timeUnit
specifier|public
name|TimeUnit
name|timeUnit
parameter_list|()
block|{
return|return
name|timeUnit
return|;
block|}
DECL|method|setTimeUnit
specifier|public
name|void
name|setTimeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|timeUnit
operator|=
name|timeUnit
expr_stmt|;
name|this
operator|.
name|dateMathParser
operator|=
operator|new
name|DateMathParser
argument_list|(
name|dateTimeFormatter
argument_list|)
expr_stmt|;
block|}
DECL|method|dateMathParser
specifier|protected
name|DateMathParser
name|dateMathParser
parameter_list|()
block|{
return|return
name|dateMathParser
return|;
block|}
DECL|method|parseValue
specifier|private
name|long
name|parseValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
return|return
name|dateTimeFormatter
argument_list|()
operator|.
name|parser
argument_list|()
operator|.
name|parseMillis
argument_list|(
operator|(
operator|(
name|BytesRef
operator|)
name|value
operator|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|dateTimeFormatter
argument_list|()
operator|.
name|parser
argument_list|()
operator|.
name|parseMillis
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parseStringValue
specifier|protected
name|long
name|parseStringValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|dateTimeFormatter
argument_list|()
operator|.
name|parser
argument_list|()
operator|.
name|parseMillis
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Long
name|value
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
return|return
name|Numbers
operator|.
name|bytesToLong
argument_list|(
operator|(
name|BytesRef
operator|)
name|value
argument_list|)
return|;
block|}
return|return
name|parseStringValue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|indexedValueForSearch
specifier|public
name|BytesRef
name|indexedValueForSearch
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|BytesRefBuilder
name|bytesRef
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|LegacyNumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|parseValue
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0
argument_list|,
name|bytesRef
argument_list|)
expr_stmt|;
comment|// 0 because of exact match
return|return
name|bytesRef
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|valueForSearch
specifier|public
name|Object
name|valueForSearch
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
comment|// assume its the string that was indexed, just return it... (for example, with get)
return|return
name|value
return|;
block|}
name|Long
name|val
init|=
name|value
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|dateTimeFormatter
argument_list|()
operator|.
name|printer
argument_list|()
operator|.
name|print
argument_list|(
name|val
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rangeQuery
specifier|public
name|Query
name|rangeQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|rangeQuery
argument_list|(
name|lowerTerm
argument_list|,
name|upperTerm
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fuzzyQuery
specifier|public
name|Query
name|fuzzyQuery
parameter_list|(
name|Object
name|value
parameter_list|,
name|Fuzziness
name|fuzziness
parameter_list|,
name|int
name|prefixLength
parameter_list|,
name|int
name|maxExpansions
parameter_list|,
name|boolean
name|transpositions
parameter_list|)
block|{
name|long
name|iValue
init|=
name|parseValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|long
name|iSim
decl_stmt|;
try|try
block|{
name|iSim
operator|=
name|fuzziness
operator|.
name|asTimeValue
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// not a time format
name|iSim
operator|=
name|fuzziness
operator|.
name|asLong
argument_list|()
expr_stmt|;
block|}
return|return
name|LegacyNumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|name
argument_list|()
argument_list|,
name|numericPrecisionStep
argument_list|()
argument_list|,
name|iValue
operator|-
name|iSim
argument_list|,
name|iValue
operator|+
name|iSim
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|stats
specifier|public
name|FieldStats
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|minValue
init|=
name|LegacyNumericUtils
operator|.
name|getMinLong
argument_list|(
name|terms
argument_list|)
decl_stmt|;
name|long
name|maxValue
init|=
name|LegacyNumericUtils
operator|.
name|getMaxLong
argument_list|(
name|terms
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldStats
operator|.
name|Date
argument_list|(
name|maxDoc
argument_list|,
name|terms
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|terms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|,
name|terms
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|,
name|dateTimeFormatter
argument_list|()
argument_list|)
return|;
block|}
DECL|method|rangeQuery
specifier|public
name|Query
name|rangeQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
annotation|@
name|Nullable
name|DateTimeZone
name|timeZone
parameter_list|,
annotation|@
name|Nullable
name|DateMathParser
name|forcedDateParser
parameter_list|)
block|{
return|return
operator|new
name|LateParsingQuery
argument_list|(
name|lowerTerm
argument_list|,
name|upperTerm
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
name|timeZone
argument_list|,
name|forcedDateParser
argument_list|)
return|;
block|}
DECL|method|innerRangeQuery
specifier|private
name|Query
name|innerRangeQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
annotation|@
name|Nullable
name|DateTimeZone
name|timeZone
parameter_list|,
annotation|@
name|Nullable
name|DateMathParser
name|forcedDateParser
parameter_list|)
block|{
return|return
name|LegacyNumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|name
argument_list|()
argument_list|,
name|numericPrecisionStep
argument_list|()
argument_list|,
name|lowerTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|parseToMilliseconds
argument_list|(
name|lowerTerm
argument_list|,
operator|!
name|includeLower
argument_list|,
name|timeZone
argument_list|,
name|forcedDateParser
operator|==
literal|null
condition|?
name|dateMathParser
else|:
name|forcedDateParser
argument_list|)
argument_list|,
name|upperTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|parseToMilliseconds
argument_list|(
name|upperTerm
argument_list|,
name|includeUpper
argument_list|,
name|timeZone
argument_list|,
name|forcedDateParser
operator|==
literal|null
condition|?
name|dateMathParser
else|:
name|forcedDateParser
argument_list|)
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isFieldWithinQuery
specifier|public
name|Relation
name|isFieldWithinQuery
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Object
name|from
parameter_list|,
name|Object
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|,
name|DateMathParser
name|dateParser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dateParser
operator|==
literal|null
condition|)
block|{
name|dateParser
operator|=
name|this
operator|.
name|dateMathParser
expr_stmt|;
block|}
name|Terms
name|terms
init|=
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
comment|// no terms, so nothing matches
return|return
name|Relation
operator|.
name|DISJOINT
return|;
block|}
name|long
name|minValue
init|=
name|LegacyNumericUtils
operator|.
name|getMinLong
argument_list|(
name|terms
argument_list|)
decl_stmt|;
name|long
name|maxValue
init|=
name|LegacyNumericUtils
operator|.
name|getMaxLong
argument_list|(
name|terms
argument_list|)
decl_stmt|;
name|long
name|fromInclusive
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|fromInclusive
operator|=
name|parseToMilliseconds
argument_list|(
name|from
argument_list|,
operator|!
name|includeLower
argument_list|,
name|timeZone
argument_list|,
name|dateParser
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeLower
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|fromInclusive
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|Relation
operator|.
name|DISJOINT
return|;
block|}
operator|++
name|fromInclusive
expr_stmt|;
block|}
block|}
name|long
name|toInclusive
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|to
operator|!=
literal|null
condition|)
block|{
name|toInclusive
operator|=
name|parseToMilliseconds
argument_list|(
name|to
argument_list|,
name|includeUpper
argument_list|,
name|timeZone
argument_list|,
name|dateParser
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeUpper
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|toInclusive
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|Relation
operator|.
name|DISJOINT
return|;
block|}
operator|--
name|toInclusive
expr_stmt|;
block|}
block|}
if|if
condition|(
name|minValue
operator|>=
name|fromInclusive
operator|&&
name|maxValue
operator|<=
name|toInclusive
condition|)
block|{
return|return
name|Relation
operator|.
name|WITHIN
return|;
block|}
elseif|else
if|if
condition|(
name|maxValue
argument_list|<
name|fromInclusive
operator|||
name|minValue
argument_list|>
name|toInclusive
condition|)
block|{
return|return
name|Relation
operator|.
name|DISJOINT
return|;
block|}
else|else
block|{
return|return
name|Relation
operator|.
name|INTERSECTS
return|;
block|}
block|}
DECL|method|parseToMilliseconds
specifier|public
name|long
name|parseToMilliseconds
parameter_list|(
name|Object
name|value
parameter_list|,
name|boolean
name|inclusive
parameter_list|,
annotation|@
name|Nullable
name|DateTimeZone
name|zone
parameter_list|,
annotation|@
name|Nullable
name|DateMathParser
name|forcedDateParser
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
return|return
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
name|DateMathParser
name|dateParser
init|=
name|dateMathParser
argument_list|()
decl_stmt|;
if|if
condition|(
name|forcedDateParser
operator|!=
literal|null
condition|)
block|{
name|dateParser
operator|=
name|forcedDateParser
expr_stmt|;
block|}
name|String
name|strValue
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
name|strValue
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|value
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|strValue
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|dateParser
operator|.
name|parse
argument_list|(
name|strValue
argument_list|,
name|now
argument_list|()
argument_list|,
name|inclusive
argument_list|,
name|zone
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fielddataBuilder
specifier|public
name|IndexFieldData
operator|.
name|Builder
name|fielddataBuilder
parameter_list|()
block|{
name|failIfNoDocValues
argument_list|()
expr_stmt|;
return|return
operator|new
name|DocValuesIndexFieldData
operator|.
name|Builder
argument_list|()
operator|.
name|numericType
argument_list|(
name|NumericType
operator|.
name|LONG
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docValueFormat
specifier|public
name|DocValueFormat
name|docValueFormat
parameter_list|(
annotation|@
name|Nullable
name|String
name|format
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
name|FormatDateTimeFormatter
name|dateTimeFormatter
init|=
name|this
operator|.
name|dateTimeFormatter
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|dateTimeFormatter
operator|=
name|Joda
operator|.
name|forPattern
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeZone
operator|==
literal|null
condition|)
block|{
name|timeZone
operator|=
name|DateTimeZone
operator|.
name|UTC
expr_stmt|;
block|}
return|return
operator|new
name|DocValueFormat
operator|.
name|DateTime
argument_list|(
name|dateTimeFormatter
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
block|}
DECL|method|DateFieldMapper
specifier|protected
name|DateFieldMapper
parameter_list|(
name|String
name|simpleName
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|,
name|MappedFieldType
name|defaultFieldType
parameter_list|,
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|ignoreMalformed
parameter_list|,
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|coerce
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|MultiFields
name|multiFields
parameter_list|,
name|CopyTo
name|copyTo
parameter_list|)
block|{
name|super
argument_list|(
name|simpleName
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|ignoreMalformed
argument_list|,
name|coerce
argument_list|,
name|indexSettings
argument_list|,
name|multiFields
argument_list|,
name|copyTo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|DateFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|DateFieldType
operator|)
name|super
operator|.
name|fieldType
argument_list|()
return|;
block|}
DECL|method|now
specifier|private
specifier|static
name|Callable
argument_list|<
name|Long
argument_list|>
name|now
parameter_list|()
block|{
return|return
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
block|{
specifier|final
name|SearchContext
name|context
init|=
name|SearchContext
operator|.
name|current
argument_list|()
decl_stmt|;
return|return
name|context
operator|!=
literal|null
condition|?
name|context
operator|.
name|nowInMillis
argument_list|()
else|:
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|customBoost
specifier|protected
name|boolean
name|customBoost
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|innerParseCreateField
specifier|protected
name|void
name|innerParseCreateField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dateAsString
init|=
literal|null
decl_stmt|;
name|float
name|boost
init|=
name|fieldType
argument_list|()
operator|.
name|boost
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|externalValueSet
argument_list|()
condition|)
block|{
name|Object
name|externalValue
init|=
name|context
operator|.
name|externalValue
argument_list|()
decl_stmt|;
name|dateAsString
operator|=
operator|(
name|String
operator|)
name|externalValue
expr_stmt|;
if|if
condition|(
name|dateAsString
operator|==
literal|null
condition|)
block|{
name|dateAsString
operator|=
name|fieldType
argument_list|()
operator|.
name|nullValueAsString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|dateAsString
operator|=
name|fieldType
argument_list|()
operator|.
name|nullValueAsString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|dateAsString
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|&&
name|Version
operator|.
name|indexCreated
argument_list|(
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
condition|)
block|{
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"value"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"_value"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|dateAsString
operator|=
name|fieldType
argument_list|()
operator|.
name|nullValueAsString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dateAsString
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"boost"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"_boost"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|boost
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown property ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
name|dateAsString
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
block|}
name|Long
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dateAsString
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|includeInAll
argument_list|(
name|includeInAll
argument_list|,
name|this
argument_list|)
condition|)
block|{
name|context
operator|.
name|allEntries
argument_list|()
operator|.
name|addText
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|dateAsString
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|fieldType
argument_list|()
operator|.
name|parseStringValue
argument_list|(
name|dateAsString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
operator|||
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
condition|)
block|{
name|CustomLongNumericField
name|field
init|=
operator|new
name|CustomLongNumericField
argument_list|(
name|value
argument_list|,
name|fieldType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|boost
operator|!=
literal|1f
operator|&&
name|Version
operator|.
name|indexCreated
argument_list|(
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
condition|)
block|{
name|field
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
name|addDocValue
argument_list|(
name|context
argument_list|,
name|fields
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|contentType
specifier|protected
name|String
name|contentType
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|void
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|doXContentBody
argument_list|(
name|builder
argument_list|,
name|includeDefaults
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|numericPrecisionStep
argument_list|()
operator|!=
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"precision_step"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|numericPrecisionStep
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|nullValueAsString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"null_value"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|nullValueAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeInAll
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
name|includeInAll
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeDefaults
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|timeUnit
argument_list|()
operator|!=
name|Defaults
operator|.
name|TIME_UNIT
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"numeric_resolution"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|timeUnit
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// only serialize locale if needed, ROOT is the default, so no need to serialize that case as well...
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|locale
argument_list|()
operator|!=
literal|null
operator|&&
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|locale
argument_list|()
operator|!=
name|Locale
operator|.
name|ROOT
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"locale"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|locale
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeDefaults
condition|)
block|{
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|locale
argument_list|()
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"locale"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"locale"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|locale
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

