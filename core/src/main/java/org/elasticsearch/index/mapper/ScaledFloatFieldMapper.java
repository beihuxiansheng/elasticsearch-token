begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|FieldStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Explicit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
operator|.
name|XFieldComparatorSource
operator|.
name|Nested
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|NumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ScriptDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
operator|.
name|DoubleValuesComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
operator|.
name|DocValuesIndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|LegacyNumberFieldMapper
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** A {@link FieldMapper} for scaled floats. Values are internally multiplied  *  by a scaling factor and rounded to the closest long. */
end_comment

begin_class
DECL|class|ScaledFloatFieldMapper
specifier|public
class|class
name|ScaledFloatFieldMapper
extends|extends
name|FieldMapper
block|{
DECL|field|CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"scaled_float"
decl_stmt|;
comment|// use the same default as numbers
DECL|field|COERCE_SETTING
specifier|private
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|COERCE_SETTING
init|=
name|NumberFieldMapper
operator|.
name|COERCE_SETTING
decl_stmt|;
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|FieldMapper
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|,
name|ScaledFloatFieldMapper
argument_list|>
block|{
DECL|field|scalingFactorSet
specifier|private
name|boolean
name|scalingFactorSet
init|=
literal|false
decl_stmt|;
DECL|field|ignoreMalformed
specifier|private
name|Boolean
name|ignoreMalformed
decl_stmt|;
DECL|field|coerce
specifier|private
name|Boolean
name|coerce
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
operator|new
name|ScaledFloatFieldType
argument_list|()
argument_list|,
operator|new
name|ScaledFloatFieldType
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|=
name|this
expr_stmt|;
block|}
DECL|method|ignoreMalformed
specifier|public
name|Builder
name|ignoreMalformed
parameter_list|(
name|boolean
name|ignoreMalformed
parameter_list|)
block|{
name|this
operator|.
name|ignoreMalformed
operator|=
name|ignoreMalformed
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|ignoreMalformed
specifier|protected
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|ignoreMalformed
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|ignoreMalformed
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|ignoreMalformed
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|context
operator|.
name|indexSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|IGNORE_MALFORMED_SETTING
operator|.
name|get
argument_list|(
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
name|Defaults
operator|.
name|IGNORE_MALFORMED
return|;
block|}
DECL|method|coerce
specifier|public
name|Builder
name|coerce
parameter_list|(
name|boolean
name|coerce
parameter_list|)
block|{
name|this
operator|.
name|coerce
operator|=
name|coerce
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|scalingFactor
specifier|public
name|Builder
name|scalingFactor
parameter_list|(
name|double
name|scalingFactor
parameter_list|)
block|{
operator|(
operator|(
name|ScaledFloatFieldType
operator|)
name|fieldType
operator|)
operator|.
name|setScalingFactor
argument_list|(
name|scalingFactor
argument_list|)
expr_stmt|;
name|scalingFactorSet
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|coerce
specifier|protected
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|coerce
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|coerce
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|coerce
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|context
operator|.
name|indexSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|COERCE_SETTING
operator|.
name|get
argument_list|(
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
name|Defaults
operator|.
name|COERCE
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|ScaledFloatFieldMapper
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|scalingFactorSet
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field ["
operator|+
name|name
operator|+
literal|"] misses required parameter [scaling_factor]"
argument_list|)
throw|;
block|}
name|setupFieldType
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
operator|new
name|ScaledFloatFieldMapper
argument_list|(
name|name
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|ignoreMalformed
argument_list|(
name|context
argument_list|)
argument_list|,
name|coerce
argument_list|(
name|context
argument_list|)
argument_list|,
name|includeInAll
argument_list|,
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|,
name|multiFieldsBuilder
operator|.
name|build
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
argument_list|,
name|copyTo
argument_list|)
return|;
block|}
block|}
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|TypeParsers
operator|.
name|parseField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|node
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|node
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"null_value"
argument_list|)
condition|)
block|{
if|if
condition|(
name|propNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Property [null_value] cannot be null."
argument_list|)
throw|;
block|}
name|builder
operator|.
name|nullValue
argument_list|(
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|DOUBLE
operator|.
name|parse
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"ignore_malformed"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|ignoreMalformed
argument_list|(
name|TypeParsers
operator|.
name|nodeBooleanValue
argument_list|(
literal|"ignore_malformed"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"coerce"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|coerce
argument_list|(
name|TypeParsers
operator|.
name|nodeBooleanValue
argument_list|(
literal|"coerce"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"scaling_factor"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|scalingFactor
argument_list|(
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|DOUBLE
operator|.
name|parse
argument_list|(
name|propNode
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|ScaledFloatFieldType
specifier|public
specifier|static
specifier|final
class|class
name|ScaledFloatFieldType
extends|extends
name|MappedFieldType
block|{
DECL|field|scalingFactor
specifier|private
name|double
name|scalingFactor
decl_stmt|;
DECL|method|ScaledFloatFieldType
specifier|public
name|ScaledFloatFieldType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|ScaledFloatFieldType
name|ScaledFloatFieldType
parameter_list|(
name|ScaledFloatFieldType
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|this
operator|.
name|scalingFactor
operator|=
name|other
operator|.
name|scalingFactor
expr_stmt|;
block|}
DECL|method|getScalingFactor
specifier|public
name|double
name|getScalingFactor
parameter_list|()
block|{
return|return
name|scalingFactor
return|;
block|}
DECL|method|setScalingFactor
specifier|public
name|void
name|setScalingFactor
parameter_list|(
name|double
name|scalingFactor
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|scalingFactor
operator|=
name|scalingFactor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|MappedFieldType
name|clone
parameter_list|()
block|{
return|return
operator|new
name|ScaledFloatFieldType
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|typeName
specifier|public
name|String
name|typeName
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|checkCompatibility
specifier|public
name|void
name|checkCompatibility
parameter_list|(
name|MappedFieldType
name|other
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
name|super
operator|.
name|checkCompatibility
argument_list|(
name|other
argument_list|,
name|conflicts
argument_list|,
name|strict
argument_list|)
expr_stmt|;
if|if
condition|(
name|scalingFactor
operator|!=
operator|(
operator|(
name|ScaledFloatFieldType
operator|)
name|other
operator|)
operator|.
name|getScalingFactor
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [scaling_factor] values"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|termQuery
specifier|public
name|Query
name|termQuery
parameter_list|(
name|Object
name|value
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|failIfNotIndexed
argument_list|()
expr_stmt|;
name|double
name|queryValue
init|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|DOUBLE
operator|.
name|parse
argument_list|(
name|value
argument_list|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|long
name|scaledValue
init|=
name|Math
operator|.
name|round
argument_list|(
name|queryValue
operator|*
name|scalingFactor
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
operator|.
name|termQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|scaledValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|boost
argument_list|()
operator|!=
literal|1f
condition|)
block|{
name|query
operator|=
operator|new
name|BoostQuery
argument_list|(
name|query
argument_list|,
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|termsQuery
specifier|public
name|Query
name|termsQuery
parameter_list|(
name|List
name|values
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|failIfNotIndexed
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|scaledValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|double
name|queryValue
init|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|DOUBLE
operator|.
name|parse
argument_list|(
name|value
argument_list|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|long
name|scaledValue
init|=
name|Math
operator|.
name|round
argument_list|(
name|queryValue
operator|*
name|scalingFactor
argument_list|)
decl_stmt|;
name|scaledValues
operator|.
name|add
argument_list|(
name|scaledValue
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
operator|.
name|termsQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|scaledValues
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|boost
argument_list|()
operator|!=
literal|1f
condition|)
block|{
name|query
operator|=
operator|new
name|BoostQuery
argument_list|(
name|query
argument_list|,
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|rangeQuery
specifier|public
name|Query
name|rangeQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|failIfNotIndexed
argument_list|()
expr_stmt|;
name|Long
name|lo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|lowerTerm
operator|!=
literal|null
condition|)
block|{
name|double
name|dValue
init|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|DOUBLE
operator|.
name|parse
argument_list|(
name|lowerTerm
argument_list|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeLower
operator|==
literal|false
condition|)
block|{
name|dValue
operator|=
name|Math
operator|.
name|nextUp
argument_list|(
name|dValue
argument_list|)
expr_stmt|;
block|}
name|lo
operator|=
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
name|dValue
operator|*
name|scalingFactor
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Long
name|hi
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|upperTerm
operator|!=
literal|null
condition|)
block|{
name|double
name|dValue
init|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|DOUBLE
operator|.
name|parse
argument_list|(
name|upperTerm
argument_list|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeUpper
operator|==
literal|false
condition|)
block|{
name|dValue
operator|=
name|Math
operator|.
name|nextDown
argument_list|(
name|dValue
argument_list|)
expr_stmt|;
block|}
name|hi
operator|=
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|floor
argument_list|(
name|dValue
operator|*
name|scalingFactor
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
operator|.
name|rangeQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|boost
argument_list|()
operator|!=
literal|1f
condition|)
block|{
name|query
operator|=
operator|new
name|BoostQuery
argument_list|(
name|query
argument_list|,
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|stats
specifier|public
name|FieldStats
argument_list|<
name|?
argument_list|>
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldStats
operator|.
name|Long
name|stats
init|=
operator|(
name|FieldStats
operator|.
name|Long
operator|)
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
operator|.
name|stats
argument_list|(
name|reader
argument_list|,
name|name
argument_list|()
argument_list|,
name|isSearchable
argument_list|()
argument_list|,
name|isAggregatable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|FieldStats
operator|.
name|Double
argument_list|(
name|stats
operator|.
name|getMaxDoc
argument_list|()
argument_list|,
name|stats
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|stats
operator|.
name|getSumDocFreq
argument_list|()
argument_list|,
name|stats
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|,
name|stats
operator|.
name|isSearchable
argument_list|()
argument_list|,
name|stats
operator|.
name|isAggregatable
argument_list|()
argument_list|,
name|stats
operator|.
name|getMinValue
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|stats
operator|.
name|getMinValue
argument_list|()
operator|/
name|scalingFactor
argument_list|,
name|stats
operator|.
name|getMaxValue
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|stats
operator|.
name|getMaxValue
argument_list|()
operator|/
name|scalingFactor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fielddataBuilder
specifier|public
name|IndexFieldData
operator|.
name|Builder
name|fielddataBuilder
parameter_list|()
block|{
name|failIfNoDocValues
argument_list|()
expr_stmt|;
return|return
operator|new
name|IndexFieldData
operator|.
name|Builder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|build
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|,
name|IndexFieldDataCache
name|cache
parameter_list|,
name|CircuitBreakerService
name|breakerService
parameter_list|,
name|MapperService
name|mapperService
parameter_list|)
block|{
specifier|final
name|IndexNumericFieldData
name|scaledValues
init|=
operator|(
name|IndexNumericFieldData
operator|)
operator|new
name|DocValuesIndexFieldData
operator|.
name|Builder
argument_list|()
operator|.
name|numericType
argument_list|(
name|IndexNumericFieldData
operator|.
name|NumericType
operator|.
name|LONG
argument_list|)
operator|.
name|build
argument_list|(
name|indexSettings
argument_list|,
name|fieldType
argument_list|,
name|cache
argument_list|,
name|breakerService
argument_list|,
name|mapperService
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScaledFloatIndexFieldData
argument_list|(
name|scaledValues
argument_list|,
name|scalingFactor
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|valueForDisplay
specifier|public
name|Object
name|valueForDisplay
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
operator|/
name|scalingFactor
return|;
block|}
annotation|@
name|Override
DECL|method|docValueFormat
specifier|public
name|DocValueFormat
name|docValueFormat
parameter_list|(
name|String
name|format
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
if|if
condition|(
name|timeZone
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field ["
operator|+
name|name
argument_list|()
operator|+
literal|"] of type ["
operator|+
name|typeName
argument_list|()
operator|+
literal|"] does not support custom time zones"
argument_list|)
throw|;
block|}
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
return|return
name|DocValueFormat
operator|.
name|RAW
return|;
block|}
else|else
block|{
return|return
operator|new
name|DocValueFormat
operator|.
name|Decimal
argument_list|(
name|format
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|scalingFactor
operator|==
operator|(
operator|(
name|ScaledFloatFieldType
operator|)
name|o
operator|)
operator|.
name|scalingFactor
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|Double
operator|.
name|hashCode
argument_list|(
name|scalingFactor
argument_list|)
return|;
block|}
block|}
DECL|field|includeInAll
specifier|private
name|Boolean
name|includeInAll
decl_stmt|;
DECL|field|ignoreMalformed
specifier|private
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|ignoreMalformed
decl_stmt|;
DECL|field|coerce
specifier|private
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|coerce
decl_stmt|;
DECL|method|ScaledFloatFieldMapper
specifier|private
name|ScaledFloatFieldMapper
parameter_list|(
name|String
name|simpleName
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|,
name|MappedFieldType
name|defaultFieldType
parameter_list|,
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|ignoreMalformed
parameter_list|,
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|coerce
parameter_list|,
name|Boolean
name|includeInAll
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|MultiFields
name|multiFields
parameter_list|,
name|CopyTo
name|copyTo
parameter_list|)
block|{
name|super
argument_list|(
name|simpleName
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|indexSettings
argument_list|,
name|multiFields
argument_list|,
name|copyTo
argument_list|)
expr_stmt|;
specifier|final
name|double
name|scalingFactor
init|=
name|fieldType
argument_list|()
operator|.
name|getScalingFactor
argument_list|()
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|isFinite
argument_list|(
name|scalingFactor
argument_list|)
operator|==
literal|false
operator|||
name|scalingFactor
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[scaling_factor] must be a positive number, got ["
operator|+
name|scalingFactor
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|ignoreMalformed
operator|=
name|ignoreMalformed
expr_stmt|;
name|this
operator|.
name|coerce
operator|=
name|coerce
expr_stmt|;
name|this
operator|.
name|includeInAll
operator|=
name|includeInAll
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|ScaledFloatFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|ScaledFloatFieldType
operator|)
name|super
operator|.
name|fieldType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contentType
specifier|protected
name|String
name|contentType
parameter_list|()
block|{
return|return
name|fieldType
operator|.
name|typeName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|protected
name|ScaledFloatFieldMapper
name|clone
parameter_list|()
block|{
return|return
operator|(
name|ScaledFloatFieldMapper
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|parseCreateField
specifier|protected
name|void
name|parseCreateField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|IndexableField
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|includeInAll
init|=
name|context
operator|.
name|includeInAll
argument_list|(
name|this
operator|.
name|includeInAll
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|Object
name|value
decl_stmt|;
name|Number
name|numericValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|externalValueSet
argument_list|()
condition|)
block|{
name|value
operator|=
name|context
operator|.
name|externalValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|coerce
operator|.
name|value
argument_list|()
operator|&&
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_STRING
operator|&&
name|parser
operator|.
name|textLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|numericValue
operator|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|DOUBLE
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|coerce
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|ignoreMalformed
operator|.
name|value
argument_list|()
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|includeInAll
condition|)
block|{
name|value
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
comment|// preserve formatting
block|}
else|else
block|{
name|value
operator|=
name|numericValue
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|fieldType
argument_list|()
operator|.
name|nullValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|numericValue
operator|==
literal|null
condition|)
block|{
name|numericValue
operator|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|DOUBLE
operator|.
name|parse
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeInAll
condition|)
block|{
name|context
operator|.
name|allEntries
argument_list|()
operator|.
name|addText
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|fieldType
argument_list|()
operator|.
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|doubleValue
init|=
name|numericValue
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|isFinite
argument_list|(
name|doubleValue
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// since we encode to a long, we have no way to carry NaNs and infinities
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[scaled_float] only supports finite values, but got ["
operator|+
name|doubleValue
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|long
name|scaledValue
init|=
name|Math
operator|.
name|round
argument_list|(
name|doubleValue
operator|*
name|fieldType
argument_list|()
operator|.
name|getScalingFactor
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|indexed
init|=
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
decl_stmt|;
name|boolean
name|docValued
init|=
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
decl_stmt|;
name|boolean
name|stored
init|=
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
decl_stmt|;
name|fields
operator|.
name|addAll
argument_list|(
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
operator|.
name|createFields
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|scaledValue
argument_list|,
name|indexed
argument_list|,
name|docValued
argument_list|,
name|stored
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doMerge
specifier|protected
name|void
name|doMerge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
name|super
operator|.
name|doMerge
argument_list|(
name|mergeWith
argument_list|,
name|updateAllTypes
argument_list|)
expr_stmt|;
name|ScaledFloatFieldMapper
name|other
init|=
operator|(
name|ScaledFloatFieldMapper
operator|)
name|mergeWith
decl_stmt|;
name|this
operator|.
name|includeInAll
operator|=
name|other
operator|.
name|includeInAll
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|ignoreMalformed
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|this
operator|.
name|ignoreMalformed
operator|=
name|other
operator|.
name|ignoreMalformed
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|coerce
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|this
operator|.
name|coerce
operator|=
name|other
operator|.
name|coerce
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|void
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|doXContentBody
argument_list|(
name|builder
argument_list|,
name|includeDefaults
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"scaling_factor"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|getScalingFactor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDefaults
operator|||
name|ignoreMalformed
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"ignore_malformed"
argument_list|,
name|ignoreMalformed
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|coerce
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"coerce"
argument_list|,
name|coerce
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|nullValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"null_value"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeInAll
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
name|includeInAll
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeDefaults
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ScaledFloatIndexFieldData
specifier|private
specifier|static
class|class
name|ScaledFloatIndexFieldData
implements|implements
name|IndexNumericFieldData
block|{
DECL|field|scaledFieldData
specifier|private
specifier|final
name|IndexNumericFieldData
name|scaledFieldData
decl_stmt|;
DECL|field|scalingFactor
specifier|private
specifier|final
name|double
name|scalingFactor
decl_stmt|;
DECL|method|ScaledFloatIndexFieldData
name|ScaledFloatIndexFieldData
parameter_list|(
name|IndexNumericFieldData
name|scaledFieldData
parameter_list|,
name|double
name|scalingFactor
parameter_list|)
block|{
name|this
operator|.
name|scaledFieldData
operator|=
name|scaledFieldData
expr_stmt|;
name|this
operator|.
name|scalingFactor
operator|=
name|scalingFactor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFieldName
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|scaledFieldData
operator|.
name|getFieldName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|AtomicNumericFieldData
name|load
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ScaledFloatLeafFieldData
argument_list|(
name|scaledFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
argument_list|,
name|scalingFactor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadDirect
specifier|public
name|AtomicNumericFieldData
name|loadDirect
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ScaledFloatLeafFieldData
argument_list|(
name|scaledFieldData
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
argument_list|,
name|scalingFactor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|comparatorSource
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
operator|.
name|XFieldComparatorSource
name|comparatorSource
parameter_list|(
name|Object
name|missingValue
parameter_list|,
name|MultiValueMode
name|sortMode
parameter_list|,
name|Nested
name|nested
parameter_list|)
block|{
return|return
operator|new
name|DoubleValuesComparatorSource
argument_list|(
name|this
argument_list|,
name|missingValue
argument_list|,
name|sortMode
argument_list|,
name|nested
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|scaledFieldData
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|index
specifier|public
name|Index
name|index
parameter_list|()
block|{
return|return
name|scaledFieldData
operator|.
name|index
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNumericType
specifier|public
name|NumericType
name|getNumericType
parameter_list|()
block|{
return|return
name|scaledFieldData
operator|.
name|getNumericType
argument_list|()
return|;
block|}
block|}
DECL|class|ScaledFloatLeafFieldData
specifier|private
specifier|static
class|class
name|ScaledFloatLeafFieldData
implements|implements
name|AtomicNumericFieldData
block|{
DECL|field|scaledFieldData
specifier|private
specifier|final
name|AtomicNumericFieldData
name|scaledFieldData
decl_stmt|;
DECL|field|scalingFactorInverse
specifier|private
specifier|final
name|double
name|scalingFactorInverse
decl_stmt|;
DECL|method|ScaledFloatLeafFieldData
name|ScaledFloatLeafFieldData
parameter_list|(
name|AtomicNumericFieldData
name|scaledFieldData
parameter_list|,
name|double
name|scalingFactor
parameter_list|)
block|{
name|this
operator|.
name|scaledFieldData
operator|=
name|scaledFieldData
expr_stmt|;
name|this
operator|.
name|scalingFactorInverse
operator|=
literal|1d
operator|/
name|scalingFactor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getScriptValues
specifier|public
name|ScriptDocValues
operator|.
name|Doubles
name|getScriptValues
parameter_list|()
block|{
return|return
operator|new
name|ScriptDocValues
operator|.
name|Doubles
argument_list|(
name|getDoubleValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBytesValues
specifier|public
name|SortedBinaryDocValues
name|getBytesValues
parameter_list|()
block|{
return|return
name|FieldData
operator|.
name|toString
argument_list|(
name|getDoubleValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|scaledFieldData
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|scaledFieldData
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLongValues
specifier|public
name|SortedNumericDocValues
name|getLongValues
parameter_list|()
block|{
return|return
name|FieldData
operator|.
name|castToLong
argument_list|(
name|getDoubleValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDoubleValues
specifier|public
name|SortedNumericDoubleValues
name|getDoubleValues
parameter_list|()
block|{
specifier|final
name|SortedNumericDocValues
name|values
init|=
name|scaledFieldData
operator|.
name|getLongValues
argument_list|()
decl_stmt|;
specifier|final
name|NumericDocValues
name|singleValues
init|=
name|DocValues
operator|.
name|unwrapSingleton
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|singleValues
operator|!=
literal|null
condition|)
block|{
return|return
name|FieldData
operator|.
name|singleton
argument_list|(
operator|new
name|NumericDoubleValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|singleValues
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|*
name|scalingFactorInverse
return|;
block|}
block|}
argument_list|,
name|DocValues
operator|.
name|unwrapSingletonBits
argument_list|(
name|values
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortedNumericDoubleValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
operator|*
name|scalingFactorInverse
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|values
operator|.
name|count
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

