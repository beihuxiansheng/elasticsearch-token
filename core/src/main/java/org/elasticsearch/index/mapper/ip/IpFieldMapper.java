begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.ip
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ip
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|InetAddressPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|XInetAddressPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|FieldStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Explicit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|InetAddresses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
operator|.
name|DocValuesIndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|LegacyNumberFieldMapper
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|AllFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** A {@link FieldMapper} for ip addresses. */
end_comment

begin_class
DECL|class|IpFieldMapper
specifier|public
class|class
name|IpFieldMapper
extends|extends
name|FieldMapper
implements|implements
name|AllFieldMapper
operator|.
name|IncludeInAll
block|{
DECL|field|CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"ip"
decl_stmt|;
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|FieldMapper
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|,
name|IpFieldMapper
argument_list|>
block|{
DECL|field|ignoreMalformed
specifier|private
name|Boolean
name|ignoreMalformed
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
operator|new
name|IpFieldType
argument_list|()
argument_list|,
operator|new
name|IpFieldType
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|=
name|this
expr_stmt|;
block|}
DECL|method|ignoreMalformed
specifier|public
name|Builder
name|ignoreMalformed
parameter_list|(
name|boolean
name|ignoreMalformed
parameter_list|)
block|{
name|this
operator|.
name|ignoreMalformed
operator|=
name|ignoreMalformed
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|ignoreMalformed
specifier|protected
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|ignoreMalformed
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|ignoreMalformed
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|ignoreMalformed
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|context
operator|.
name|indexSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Explicit
argument_list|<>
argument_list|(
name|IGNORE_MALFORMED_SETTING
operator|.
name|get
argument_list|(
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
name|Defaults
operator|.
name|IGNORE_MALFORMED
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|IpFieldMapper
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|setupFieldType
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|IpFieldMapper
name|fieldMapper
init|=
operator|new
name|IpFieldMapper
argument_list|(
name|name
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|ignoreMalformed
argument_list|(
name|context
argument_list|)
argument_list|,
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|,
name|multiFieldsBuilder
operator|.
name|build
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
argument_list|,
name|copyTo
argument_list|)
decl_stmt|;
return|return
operator|(
name|IpFieldMapper
operator|)
name|fieldMapper
operator|.
name|includeInAll
argument_list|(
name|includeInAll
argument_list|)
return|;
block|}
block|}
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
DECL|method|TypeParser
specifier|public
name|TypeParser
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha2
argument_list|)
condition|)
block|{
return|return
operator|new
name|LegacyIpFieldMapper
operator|.
name|TypeParser
argument_list|()
operator|.
name|parse
argument_list|(
name|name
argument_list|,
name|node
argument_list|,
name|parserContext
argument_list|)
return|;
block|}
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|TypeParsers
operator|.
name|parseField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|node
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|node
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"null_value"
argument_list|)
condition|)
block|{
if|if
condition|(
name|propNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Property [null_value] cannot be null."
argument_list|)
throw|;
block|}
name|builder
operator|.
name|nullValue
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"ignore_malformed"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|ignoreMalformed
argument_list|(
name|TypeParsers
operator|.
name|nodeBooleanValue
argument_list|(
literal|"ignore_malformed"
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TypeParsers
operator|.
name|parseMultiField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|parserContext
argument_list|,
name|propName
argument_list|,
name|propNode
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|IpFieldType
specifier|public
specifier|static
specifier|final
class|class
name|IpFieldType
extends|extends
name|MappedFieldType
block|{
DECL|method|IpFieldType
name|IpFieldType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|IpFieldType
name|IpFieldType
parameter_list|(
name|IpFieldType
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|MappedFieldType
name|clone
parameter_list|()
block|{
return|return
operator|new
name|IpFieldType
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|typeName
specifier|public
name|String
name|typeName
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
DECL|method|parse
specifier|private
name|InetAddress
name|parse
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|InetAddress
condition|)
block|{
return|return
operator|(
name|InetAddress
operator|)
name|value
return|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|value
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
return|return
name|InetAddresses
operator|.
name|forString
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|termQuery
specifier|public
name|Query
name|termQuery
parameter_list|(
name|Object
name|value
parameter_list|,
annotation|@
name|Nullable
name|QueryShardContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|InetAddress
condition|)
block|{
return|return
name|InetAddressPoint
operator|.
name|newExactQuery
argument_list|(
name|name
argument_list|()
argument_list|,
operator|(
name|InetAddress
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|value
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
name|String
name|term
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|String
index|[]
name|fields
init|=
name|term
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|InetAddress
name|address
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|prefixLength
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
name|XInetAddressPoint
operator|.
name|newPrefixQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|address
argument_list|,
name|prefixLength
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected [ip/prefix] but was ["
operator|+
name|term
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|InetAddress
name|address
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|term
argument_list|)
decl_stmt|;
return|return
name|InetAddressPoint
operator|.
name|newExactQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|address
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|rangeQuery
specifier|public
name|Query
name|rangeQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|InetAddress
name|lower
decl_stmt|;
if|if
condition|(
name|lowerTerm
operator|==
literal|null
condition|)
block|{
name|lower
operator|=
name|XInetAddressPoint
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
else|else
block|{
name|lower
operator|=
name|parse
argument_list|(
name|lowerTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeLower
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|lower
operator|.
name|equals
argument_list|(
name|XInetAddressPoint
operator|.
name|MAX_VALUE
argument_list|)
condition|)
block|{
return|return
operator|new
name|MatchNoDocsQuery
argument_list|()
return|;
block|}
name|lower
operator|=
name|XInetAddressPoint
operator|.
name|nextUp
argument_list|(
name|lower
argument_list|)
expr_stmt|;
block|}
block|}
name|InetAddress
name|upper
decl_stmt|;
if|if
condition|(
name|upperTerm
operator|==
literal|null
condition|)
block|{
name|upper
operator|=
name|XInetAddressPoint
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|upper
operator|=
name|parse
argument_list|(
name|upperTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeUpper
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|upper
operator|.
name|equals
argument_list|(
name|XInetAddressPoint
operator|.
name|MIN_VALUE
argument_list|)
condition|)
block|{
return|return
operator|new
name|MatchNoDocsQuery
argument_list|()
return|;
block|}
name|upper
operator|=
name|XInetAddressPoint
operator|.
name|nextDown
argument_list|(
name|upper
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fuzzyQuery
specifier|public
name|Query
name|fuzzyQuery
parameter_list|(
name|Object
name|value
parameter_list|,
name|Fuzziness
name|fuzziness
parameter_list|,
name|int
name|prefixLength
parameter_list|,
name|int
name|maxExpansions
parameter_list|,
name|boolean
name|transpositions
parameter_list|)
block|{
name|InetAddress
name|base
init|=
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
name|fuzziness
operator|.
name|asInt
argument_list|()
decl_stmt|;
return|return
name|XInetAddressPoint
operator|.
name|newPrefixQuery
argument_list|(
name|name
argument_list|()
argument_list|,
name|base
argument_list|,
name|mask
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|stats
specifier|public
name|FieldStats
operator|.
name|Ip
name|stats
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|field
init|=
name|name
argument_list|()
decl_stmt|;
name|long
name|size
init|=
name|PointValues
operator|.
name|size
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|docCount
init|=
name|PointValues
operator|.
name|getDocCount
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|byte
index|[]
name|min
init|=
name|PointValues
operator|.
name|getMinPackedValue
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|byte
index|[]
name|max
init|=
name|PointValues
operator|.
name|getMaxPackedValue
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldStats
operator|.
name|Ip
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|docCount
argument_list|,
operator|-
literal|1L
argument_list|,
name|size
argument_list|,
name|InetAddressPoint
operator|.
name|decode
argument_list|(
name|min
argument_list|)
argument_list|,
name|InetAddressPoint
operator|.
name|decode
argument_list|(
name|max
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fielddataBuilder
specifier|public
name|IndexFieldData
operator|.
name|Builder
name|fielddataBuilder
parameter_list|()
block|{
name|failIfNoDocValues
argument_list|()
expr_stmt|;
return|return
operator|new
name|DocValuesIndexFieldData
operator|.
name|Builder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|valueForSearch
specifier|public
name|Object
name|valueForSearch
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|DocValueFormat
operator|.
name|IP
operator|.
name|format
argument_list|(
operator|(
name|BytesRef
operator|)
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docValueFormat
specifier|public
name|DocValueFormat
name|docValueFormat
parameter_list|(
annotation|@
name|Nullable
name|String
name|format
parameter_list|,
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field ["
operator|+
name|name
argument_list|()
operator|+
literal|"] of type ["
operator|+
name|typeName
argument_list|()
operator|+
literal|"] does not support custom formats"
argument_list|)
throw|;
block|}
if|if
condition|(
name|timeZone
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field ["
operator|+
name|name
argument_list|()
operator|+
literal|"] of type ["
operator|+
name|typeName
argument_list|()
operator|+
literal|"] does not support custom time zones"
argument_list|)
throw|;
block|}
return|return
name|DocValueFormat
operator|.
name|IP
return|;
block|}
block|}
DECL|field|includeInAll
specifier|private
name|Boolean
name|includeInAll
decl_stmt|;
DECL|field|ignoreMalformed
specifier|private
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|ignoreMalformed
decl_stmt|;
DECL|method|IpFieldMapper
specifier|private
name|IpFieldMapper
parameter_list|(
name|String
name|simpleName
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|,
name|MappedFieldType
name|defaultFieldType
parameter_list|,
name|Explicit
argument_list|<
name|Boolean
argument_list|>
name|ignoreMalformed
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|MultiFields
name|multiFields
parameter_list|,
name|CopyTo
name|copyTo
parameter_list|)
block|{
name|super
argument_list|(
name|simpleName
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|indexSettings
argument_list|,
name|multiFields
argument_list|,
name|copyTo
argument_list|)
expr_stmt|;
name|this
operator|.
name|ignoreMalformed
operator|=
name|ignoreMalformed
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|IpFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|IpFieldType
operator|)
name|super
operator|.
name|fieldType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contentType
specifier|protected
name|String
name|contentType
parameter_list|()
block|{
return|return
name|fieldType
operator|.
name|typeName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|protected
name|IpFieldMapper
name|clone
parameter_list|()
block|{
return|return
operator|(
name|IpFieldMapper
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|includeInAll
specifier|public
name|Mapper
name|includeInAll
parameter_list|(
name|Boolean
name|includeInAll
parameter_list|)
block|{
if|if
condition|(
name|includeInAll
operator|!=
literal|null
condition|)
block|{
name|IpFieldMapper
name|clone
init|=
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|includeInAll
operator|=
name|includeInAll
expr_stmt|;
return|return
name|clone
return|;
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|includeInAllIfNotSet
specifier|public
name|Mapper
name|includeInAllIfNotSet
parameter_list|(
name|Boolean
name|includeInAll
parameter_list|)
block|{
if|if
condition|(
name|includeInAll
operator|!=
literal|null
operator|&&
name|this
operator|.
name|includeInAll
operator|==
literal|null
condition|)
block|{
name|IpFieldMapper
name|clone
init|=
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|includeInAll
operator|=
name|includeInAll
expr_stmt|;
return|return
name|clone
return|;
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|unsetIncludeInAll
specifier|public
name|Mapper
name|unsetIncludeInAll
parameter_list|()
block|{
if|if
condition|(
name|includeInAll
operator|!=
literal|null
condition|)
block|{
name|IpFieldMapper
name|clone
init|=
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|includeInAll
operator|=
literal|null
expr_stmt|;
return|return
name|clone
return|;
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|parseCreateField
specifier|protected
name|void
name|parseCreateField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|addressAsObject
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|externalValueSet
argument_list|()
condition|)
block|{
name|addressAsObject
operator|=
name|context
operator|.
name|externalValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|addressAsObject
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|addressAsObject
operator|==
literal|null
condition|)
block|{
name|addressAsObject
operator|=
name|fieldType
argument_list|()
operator|.
name|nullValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|addressAsObject
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|addressAsString
init|=
name|addressAsObject
operator|.
name|toString
argument_list|()
decl_stmt|;
name|InetAddress
name|address
decl_stmt|;
if|if
condition|(
name|addressAsObject
operator|instanceof
name|InetAddress
condition|)
block|{
name|address
operator|=
operator|(
name|InetAddress
operator|)
name|addressAsObject
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|address
operator|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|addressAsString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|ignoreMalformed
operator|.
name|value
argument_list|()
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|includeInAll
argument_list|(
name|includeInAll
argument_list|,
name|this
argument_list|)
condition|)
block|{
name|context
operator|.
name|allEntries
argument_list|()
operator|.
name|addText
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|addressAsString
argument_list|,
name|fieldType
argument_list|()
operator|.
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|InetAddressPoint
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|address
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|StoredField
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|address
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doMerge
specifier|protected
name|void
name|doMerge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
name|super
operator|.
name|doMerge
argument_list|(
name|mergeWith
argument_list|,
name|updateAllTypes
argument_list|)
expr_stmt|;
name|IpFieldMapper
name|other
init|=
operator|(
name|IpFieldMapper
operator|)
name|mergeWith
decl_stmt|;
name|this
operator|.
name|includeInAll
operator|=
name|other
operator|.
name|includeInAll
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|ignoreMalformed
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|this
operator|.
name|ignoreMalformed
operator|=
name|other
operator|.
name|ignoreMalformed
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|void
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|doXContentBody
argument_list|(
name|builder
argument_list|,
name|includeDefaults
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDefaults
operator|||
name|ignoreMalformed
operator|.
name|explicit
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"ignore_malformed"
argument_list|,
name|ignoreMalformed
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeInAll
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
name|includeInAll
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeDefaults
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

