begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * The result of parsing a document.  */
end_comment

begin_class
DECL|class|ParsedDocument
specifier|public
class|class
name|ParsedDocument
block|{
DECL|field|version
specifier|private
specifier|final
name|Field
name|version
decl_stmt|;
DECL|field|id
DECL|field|type
specifier|private
specifier|final
name|String
name|id
decl_stmt|,
name|type
decl_stmt|;
DECL|field|uid
specifier|private
specifier|final
name|BytesRef
name|uid
decl_stmt|;
DECL|field|routing
specifier|private
specifier|final
name|String
name|routing
decl_stmt|;
DECL|field|timestamp
specifier|private
specifier|final
name|long
name|timestamp
decl_stmt|;
DECL|field|ttl
specifier|private
specifier|final
name|long
name|ttl
decl_stmt|;
DECL|field|documents
specifier|private
specifier|final
name|List
argument_list|<
name|Document
argument_list|>
name|documents
decl_stmt|;
DECL|field|source
specifier|private
name|BytesReference
name|source
decl_stmt|;
DECL|field|dynamicMappingsUpdate
specifier|private
name|Mapping
name|dynamicMappingsUpdate
decl_stmt|;
DECL|field|parent
specifier|private
name|String
name|parent
decl_stmt|;
DECL|method|ParsedDocument
specifier|public
name|ParsedDocument
parameter_list|(
name|Field
name|version
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|routing
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|long
name|ttl
parameter_list|,
name|List
argument_list|<
name|Document
argument_list|>
name|documents
parameter_list|,
name|BytesReference
name|source
parameter_list|,
name|Mapping
name|dynamicMappingsUpdate
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|uid
operator|=
name|Uid
operator|.
name|createUidAsBytes
argument_list|(
name|type
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
name|this
operator|.
name|documents
operator|=
name|documents
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|dynamicMappingsUpdate
operator|=
name|dynamicMappingsUpdate
expr_stmt|;
block|}
DECL|method|version
specifier|public
name|Field
name|version
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|uid
specifier|public
name|BytesRef
name|uid
parameter_list|()
block|{
return|return
name|uid
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|routing
return|;
block|}
DECL|method|timestamp
specifier|public
name|long
name|timestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
DECL|method|ttl
specifier|public
name|long
name|ttl
parameter_list|()
block|{
return|return
name|this
operator|.
name|ttl
return|;
block|}
DECL|method|rootDoc
specifier|public
name|Document
name|rootDoc
parameter_list|()
block|{
return|return
name|documents
operator|.
name|get
argument_list|(
name|documents
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|docs
specifier|public
name|List
argument_list|<
name|Document
argument_list|>
name|docs
parameter_list|()
block|{
return|return
name|this
operator|.
name|documents
return|;
block|}
DECL|method|source
specifier|public
name|BytesReference
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
DECL|method|setSource
specifier|public
name|void
name|setSource
parameter_list|(
name|BytesReference
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
DECL|method|parent
specifier|public
name|ParsedDocument
name|parent
parameter_list|(
name|String
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|parent
specifier|public
name|String
name|parent
parameter_list|()
block|{
return|return
name|this
operator|.
name|parent
return|;
block|}
comment|/**      * Return dynamic updates to mappings or {@code null} if there were no      * updates to the mappings.      */
DECL|method|dynamicMappingsUpdate
specifier|public
name|Mapping
name|dynamicMappingsUpdate
parameter_list|()
block|{
return|return
name|dynamicMappingsUpdate
return|;
block|}
DECL|method|addDynamicMappingsUpdate
specifier|public
name|void
name|addDynamicMappingsUpdate
parameter_list|(
name|Mapping
name|update
parameter_list|)
block|{
if|if
condition|(
name|dynamicMappingsUpdate
operator|==
literal|null
condition|)
block|{
name|dynamicMappingsUpdate
operator|=
name|update
expr_stmt|;
block|}
else|else
block|{
name|dynamicMappingsUpdate
operator|=
name|dynamicMappingsUpdate
operator|.
name|merge
argument_list|(
name|update
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Document "
argument_list|)
operator|.
name|append
argument_list|(
literal|"uid["
argument_list|)
operator|.
name|append
argument_list|(
name|uid
argument_list|)
operator|.
name|append
argument_list|(
literal|"] doc ["
argument_list|)
operator|.
name|append
argument_list|(
name|documents
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

