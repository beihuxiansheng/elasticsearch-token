begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|FieldStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|AbstractFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_interface
DECL|interface|FieldMapper
specifier|public
interface|interface
name|FieldMapper
extends|extends
name|Mapper
block|{
DECL|field|DOC_VALUES_FORMAT
name|String
name|DOC_VALUES_FORMAT
init|=
literal|"doc_values_format"
decl_stmt|;
DECL|method|fieldType
name|MappedFieldType
name|fieldType
parameter_list|()
function_decl|;
comment|/**      * List of fields where this field should be copied to      */
DECL|method|copyTo
name|AbstractFieldMapper
operator|.
name|CopyTo
name|copyTo
parameter_list|()
function_decl|;
comment|/**      * Returns the actual value of the field.      */
DECL|method|value
name|Object
name|value
parameter_list|(
name|Object
name|value
parameter_list|)
function_decl|;
comment|/**      * Returns the value that will be used as a result for search. Can be only of specific types... .      */
DECL|method|valueForSearch
name|Object
name|valueForSearch
parameter_list|(
name|Object
name|value
parameter_list|)
function_decl|;
comment|/**      * Returns the indexed value used to construct search "values".      */
DECL|method|indexedValueForSearch
name|BytesRef
name|indexedValueForSearch
parameter_list|(
name|Object
name|value
parameter_list|)
function_decl|;
comment|/**      * Should the field query {@link #termQuery(Object, org.elasticsearch.index.query.QueryParseContext)}  be used when detecting this      * field in query string.      */
DECL|method|useTermQueryWithQueryString
name|boolean
name|useTermQueryWithQueryString
parameter_list|()
function_decl|;
DECL|method|termQuery
name|Query
name|termQuery
parameter_list|(
name|Object
name|value
parameter_list|,
annotation|@
name|Nullable
name|QueryParseContext
name|context
parameter_list|)
function_decl|;
DECL|method|termsQuery
name|Query
name|termsQuery
parameter_list|(
name|List
name|values
parameter_list|,
annotation|@
name|Nullable
name|QueryParseContext
name|context
parameter_list|)
function_decl|;
DECL|method|rangeQuery
name|Query
name|rangeQuery
parameter_list|(
name|Object
name|lowerTerm
parameter_list|,
name|Object
name|upperTerm
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|,
annotation|@
name|Nullable
name|QueryParseContext
name|context
parameter_list|)
function_decl|;
DECL|method|fuzzyQuery
name|Query
name|fuzzyQuery
parameter_list|(
name|String
name|value
parameter_list|,
name|Fuzziness
name|fuzziness
parameter_list|,
name|int
name|prefixLength
parameter_list|,
name|int
name|maxExpansions
parameter_list|,
name|boolean
name|transpositions
parameter_list|)
function_decl|;
DECL|method|prefixQuery
name|Query
name|prefixQuery
parameter_list|(
name|Object
name|value
parameter_list|,
annotation|@
name|Nullable
name|MultiTermQuery
operator|.
name|RewriteMethod
name|method
parameter_list|,
annotation|@
name|Nullable
name|QueryParseContext
name|context
parameter_list|)
function_decl|;
DECL|method|regexpQuery
name|Query
name|regexpQuery
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|maxDeterminizedStates
parameter_list|,
annotation|@
name|Nullable
name|MultiTermQuery
operator|.
name|RewriteMethod
name|method
parameter_list|,
annotation|@
name|Nullable
name|QueryParseContext
name|context
parameter_list|)
function_decl|;
comment|/**      * A term query to use when parsing a query string. Can return<tt>null</tt>.      */
annotation|@
name|Nullable
DECL|method|queryStringTermQuery
name|Query
name|queryStringTermQuery
parameter_list|(
name|Term
name|term
parameter_list|)
function_decl|;
comment|/**      * Null value filter, returns<tt>null</tt> if there is no null value associated with the field.      */
annotation|@
name|Nullable
DECL|method|nullValueFilter
name|Query
name|nullValueFilter
parameter_list|()
function_decl|;
DECL|method|isNumeric
name|boolean
name|isNumeric
parameter_list|()
function_decl|;
DECL|method|isSortable
name|boolean
name|isSortable
parameter_list|()
function_decl|;
comment|/**      * Fields might not be available before indexing, for example _all, token_count,...      * When get is called and these fields are requested, this case needs special treatment.      *      * @return If the field is available before indexing or not.      * */
DECL|method|isGenerated
name|boolean
name|isGenerated
parameter_list|()
function_decl|;
comment|/**      * Parse using the provided {@link ParseContext} and return a mapping      * update if dynamic mappings modified the mappings, or {@code null} if      * mappings were not modified.      */
DECL|method|parse
name|Mapper
name|parse
parameter_list|(
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * @return a {@link FieldStats} instance that maps to the type of this field based on the provided {@link Terms} instance.      */
DECL|method|stats
name|FieldStats
name|stats
parameter_list|(
name|Terms
name|terms
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

