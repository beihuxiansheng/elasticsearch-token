begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.snapshots.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  *  A {@link SlicedInputStream} is a logical  * concatenation one or more input streams. In contrast to the JDKs  * {@link java.io.SequenceInputStream} this stream doesn't require the instantiation  * of all logical sub-streams ahead of time. Instead, {@link #openSlice(long)} is called  * if a new slice is required. Each slice is closed once it's been fully consumed or if  * close is called before.  */
end_comment

begin_class
DECL|class|SlicedInputStream
specifier|public
specifier|abstract
class|class
name|SlicedInputStream
extends|extends
name|InputStream
block|{
DECL|field|slice
specifier|private
name|long
name|slice
init|=
literal|0
decl_stmt|;
DECL|field|currentStream
specifier|private
name|InputStream
name|currentStream
decl_stmt|;
DECL|field|numSlices
specifier|private
specifier|final
name|long
name|numSlices
decl_stmt|;
DECL|field|initialized
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
comment|/**      * Creates a new SlicedInputStream      * @param numSlices the number of slices to consume      */
DECL|method|SlicedInputStream
specifier|protected
name|SlicedInputStream
parameter_list|(
specifier|final
name|long
name|numSlices
parameter_list|)
block|{
name|this
operator|.
name|numSlices
operator|=
name|numSlices
expr_stmt|;
block|}
DECL|method|nextStream
specifier|private
name|InputStream
name|nextStream
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|initialized
operator|==
literal|false
operator|||
name|currentStream
operator|!=
literal|null
assert|;
name|initialized
operator|=
literal|true
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|currentStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|slice
operator|<
name|numSlices
condition|)
block|{
name|currentStream
operator|=
name|openSlice
argument_list|(
name|slice
operator|++
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentStream
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|currentStream
return|;
block|}
comment|/**      * Called for each logical slice given a zero based slice ordinal.      */
DECL|method|openSlice
specifier|protected
specifier|abstract
name|InputStream
name|openSlice
parameter_list|(
name|long
name|slice
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|currentStream
specifier|private
name|InputStream
name|currentStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentStream
operator|==
literal|null
condition|)
block|{
return|return
name|initialized
condition|?
literal|null
else|:
name|nextStream
argument_list|()
return|;
block|}
return|return
name|currentStream
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
specifier|final
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
name|currentStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|int
name|read
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
name|nextStream
argument_list|()
expr_stmt|;
return|return
name|read
argument_list|()
return|;
block|}
return|return
name|read
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
specifier|final
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|InputStream
name|stream
init|=
name|currentStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|int
name|read
init|=
name|stream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|<=
literal|0
condition|)
block|{
name|nextStream
argument_list|()
expr_stmt|;
return|return
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
return|return
name|read
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|final
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|currentStream
argument_list|)
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
name|currentStream
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|available
specifier|public
specifier|final
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
name|currentStream
argument_list|()
decl_stmt|;
return|return
name|stream
operator|==
literal|null
condition|?
literal|0
else|:
name|stream
operator|.
name|available
argument_list|()
return|;
block|}
block|}
end_class

end_unit

