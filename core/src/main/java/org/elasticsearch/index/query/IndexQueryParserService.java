begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CloseableThreadLocal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|IndexCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|bitset
operator|.
name|BitsetFilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|AllFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|query
operator|.
name|IndicesQueriesRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|IndexQueryParserService
specifier|public
class|class
name|IndexQueryParserService
extends|extends
name|AbstractIndexComponent
block|{
DECL|field|DEFAULT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FIELD
init|=
literal|"index.query.default_field"
decl_stmt|;
DECL|field|QUERY_STRING_LENIENT
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_STRING_LENIENT
init|=
literal|"index.query_string.lenient"
decl_stmt|;
DECL|field|PARSE_STRICT
specifier|public
specifier|static
specifier|final
name|String
name|PARSE_STRICT
init|=
literal|"index.query.parse.strict"
decl_stmt|;
DECL|field|ALLOW_UNMAPPED
specifier|public
specifier|static
specifier|final
name|String
name|ALLOW_UNMAPPED
init|=
literal|"index.query.parse.allow_unmapped_fields"
decl_stmt|;
DECL|field|cache
specifier|private
name|CloseableThreadLocal
argument_list|<
name|QueryParseContext
argument_list|>
name|cache
init|=
operator|new
name|CloseableThreadLocal
argument_list|<
name|QueryParseContext
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|QueryParseContext
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|QueryParseContext
argument_list|(
name|index
argument_list|,
name|IndexQueryParserService
operator|.
name|this
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|analysisService
specifier|final
name|AnalysisService
name|analysisService
decl_stmt|;
DECL|field|scriptService
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|field|mapperService
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|similarityService
specifier|final
name|SimilarityService
name|similarityService
decl_stmt|;
DECL|field|indexCache
specifier|final
name|IndexCache
name|indexCache
decl_stmt|;
DECL|field|fieldDataService
specifier|final
name|IndexFieldDataService
name|fieldDataService
decl_stmt|;
DECL|field|bitsetFilterCache
specifier|final
name|BitsetFilterCache
name|bitsetFilterCache
decl_stmt|;
DECL|field|indicesQueriesRegistry
specifier|private
specifier|final
name|IndicesQueriesRegistry
name|indicesQueriesRegistry
decl_stmt|;
DECL|field|defaultField
specifier|private
name|String
name|defaultField
decl_stmt|;
DECL|field|queryStringLenient
specifier|private
name|boolean
name|queryStringLenient
decl_stmt|;
DECL|field|parseFieldMatcher
specifier|private
specifier|final
name|ParseFieldMatcher
name|parseFieldMatcher
decl_stmt|;
DECL|field|defaultAllowUnmappedFields
specifier|private
specifier|final
name|boolean
name|defaultAllowUnmappedFields
decl_stmt|;
annotation|@
name|Inject
DECL|method|IndexQueryParserService
specifier|public
name|IndexQueryParserService
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|IndicesQueriesRegistry
name|indicesQueriesRegistry
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|,
name|AnalysisService
name|analysisService
parameter_list|,
name|MapperService
name|mapperService
parameter_list|,
name|IndexCache
name|indexCache
parameter_list|,
name|IndexFieldDataService
name|fieldDataService
parameter_list|,
name|BitsetFilterCache
name|bitsetFilterCache
parameter_list|,
annotation|@
name|Nullable
name|SimilarityService
name|similarityService
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
name|this
operator|.
name|analysisService
operator|=
name|analysisService
expr_stmt|;
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
name|this
operator|.
name|similarityService
operator|=
name|similarityService
expr_stmt|;
name|this
operator|.
name|indexCache
operator|=
name|indexCache
expr_stmt|;
name|this
operator|.
name|fieldDataService
operator|=
name|fieldDataService
expr_stmt|;
name|this
operator|.
name|bitsetFilterCache
operator|=
name|bitsetFilterCache
expr_stmt|;
name|this
operator|.
name|defaultField
operator|=
name|indexSettings
operator|.
name|get
argument_list|(
name|DEFAULT_FIELD
argument_list|,
name|AllFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryStringLenient
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|QUERY_STRING_LENIENT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|parseFieldMatcher
operator|=
operator|new
name|ParseFieldMatcher
argument_list|(
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultAllowUnmappedFields
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|ALLOW_UNMAPPED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesQueriesRegistry
operator|=
name|indicesQueriesRegistry
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|defaultField
specifier|public
name|String
name|defaultField
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultField
return|;
block|}
DECL|method|queryStringLenient
specifier|public
name|boolean
name|queryStringLenient
parameter_list|()
block|{
return|return
name|this
operator|.
name|queryStringLenient
return|;
block|}
DECL|method|queryParser
specifier|public
name|QueryParser
name|queryParser
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|indicesQueriesRegistry
operator|.
name|queryParsers
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
name|ParsedQuery
name|parse
parameter_list|(
name|QueryBuilder
name|queryBuilder
parameter_list|)
block|{
name|XContentParser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|BytesReference
name|bytes
init|=
name|queryBuilder
operator|.
name|buildAsBytes
argument_list|()
decl_stmt|;
name|parser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|bytes
argument_list|)
operator|.
name|createParser
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|parse
argument_list|(
name|cache
operator|.
name|get
argument_list|()
argument_list|,
name|parser
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|getParseContext
argument_list|()
argument_list|,
literal|"Failed to parse"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|parse
specifier|public
name|ParsedQuery
name|parse
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
return|return
name|parse
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
name|ParsedQuery
name|parse
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|XContentParser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|parse
argument_list|(
name|cache
operator|.
name|get
argument_list|()
argument_list|,
name|parser
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|getParseContext
argument_list|()
argument_list|,
literal|"Failed to parse"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|parse
specifier|public
name|ParsedQuery
name|parse
parameter_list|(
name|BytesReference
name|source
parameter_list|)
block|{
return|return
name|parse
argument_list|(
name|cache
operator|.
name|get
argument_list|()
argument_list|,
name|source
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
name|ParsedQuery
name|parse
parameter_list|(
name|QueryParseContext
name|context
parameter_list|,
name|BytesReference
name|source
parameter_list|)
block|{
name|XContentParser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|innerParse
argument_list|(
name|context
argument_list|,
name|parser
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|context
argument_list|,
literal|"Failed to parse"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|parse
specifier|public
name|ParsedQuery
name|parse
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|QueryParsingException
block|{
name|XContentParser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|innerParse
argument_list|(
name|cache
operator|.
name|get
argument_list|()
argument_list|,
name|parser
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|getParseContext
argument_list|()
argument_list|,
literal|"Failed to parse ["
operator|+
name|source
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|parse
specifier|public
name|ParsedQuery
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
block|{
return|return
name|parse
argument_list|(
name|cache
operator|.
name|get
argument_list|()
argument_list|,
name|parser
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
name|ParsedQuery
name|parse
parameter_list|(
name|QueryParseContext
name|context
parameter_list|,
name|XContentParser
name|parser
parameter_list|)
block|{
try|try
block|{
return|return
name|innerParse
argument_list|(
name|context
argument_list|,
name|parser
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|context
argument_list|,
literal|"Failed to parse"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Parses an inner filter, returning null if the filter should be ignored.      */
annotation|@
name|Nullable
DECL|method|parseInnerFilter
specifier|public
name|ParsedQuery
name|parseInnerFilter
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryParseContext
name|context
init|=
name|cache
operator|.
name|get
argument_list|()
decl_stmt|;
name|context
operator|.
name|reset
argument_list|(
name|parser
argument_list|)
expr_stmt|;
try|try
block|{
name|Query
name|filter
init|=
name|context
operator|.
name|parseInnerFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ParsedQuery
argument_list|(
name|filter
argument_list|,
name|context
operator|.
name|copyNamedFilters
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|reset
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nullable
DECL|method|parseInnerQuery
specifier|public
name|Query
name|parseInnerQuery
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryParseContext
name|context
init|=
name|cache
operator|.
name|get
argument_list|()
decl_stmt|;
name|context
operator|.
name|reset
argument_list|(
name|parser
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|context
operator|.
name|parseInnerQuery
argument_list|()
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|reset
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nullable
DECL|method|parseInnerQuery
specifier|public
name|Query
name|parseInnerQuery
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|(
name|parseFieldMatcher
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|parseContext
operator|.
name|parseInnerQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
name|Queries
operator|.
name|newMatchNoDocsQuery
argument_list|()
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
DECL|method|getParseContext
specifier|public
name|QueryParseContext
name|getParseContext
parameter_list|()
block|{
return|return
name|cache
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|defaultAllowUnmappedFields
specifier|public
name|boolean
name|defaultAllowUnmappedFields
parameter_list|()
block|{
return|return
name|defaultAllowUnmappedFields
return|;
block|}
comment|/**      * @return The lowest node version in the cluster when the index was created or<code>null</code> if that was unknown      */
DECL|method|getIndexCreatedVersion
specifier|public
name|Version
name|getIndexCreatedVersion
parameter_list|()
block|{
return|return
name|Version
operator|.
name|indexCreated
argument_list|(
name|indexSettings
argument_list|)
return|;
block|}
comment|/**      * Selectively parses a query from a top level query or query_binary json field from the specified source.      */
DECL|method|parseQuery
specifier|public
name|ParsedQuery
name|parseQuery
parameter_list|(
name|BytesReference
name|source
parameter_list|)
block|{
try|try
block|{
name|ParsedQuery
name|parsedQuery
init|=
literal|null
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
decl_stmt|;
for|for
control|(
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
init|;
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|String
name|fieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"query"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|parsedQuery
operator|=
name|parse
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"query_binary"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"queryBinary"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|byte
index|[]
name|querySource
init|=
name|parser
operator|.
name|binaryValue
argument_list|()
decl_stmt|;
name|XContentParser
name|qSourceParser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|querySource
argument_list|)
operator|.
name|createParser
argument_list|(
name|querySource
argument_list|)
decl_stmt|;
name|parsedQuery
operator|=
name|parse
argument_list|(
name|qSourceParser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|getParseContext
argument_list|()
argument_list|,
literal|"request does not support ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|parsedQuery
operator|!=
literal|null
condition|)
block|{
return|return
name|parsedQuery
return|;
block|}
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|getParseContext
argument_list|()
argument_list|,
literal|"Failed to parse"
argument_list|,
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|getParseContext
argument_list|()
argument_list|,
literal|"Required query is missing"
argument_list|)
throw|;
block|}
DECL|method|innerParse
specifier|private
name|ParsedQuery
name|innerParse
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|,
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
throws|,
name|QueryParsingException
block|{
name|parseContext
operator|.
name|reset
argument_list|(
name|parser
argument_list|)
expr_stmt|;
try|try
block|{
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|(
name|parseFieldMatcher
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|parseContext
operator|.
name|parseInnerQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
name|Queries
operator|.
name|newMatchNoDocsQuery
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ParsedQuery
argument_list|(
name|query
argument_list|,
name|parseContext
operator|.
name|copyNamedFilters
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|parseContext
operator|.
name|reset
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseFieldMatcher
specifier|public
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|()
block|{
return|return
name|parseFieldMatcher
return|;
block|}
block|}
end_class

end_unit

