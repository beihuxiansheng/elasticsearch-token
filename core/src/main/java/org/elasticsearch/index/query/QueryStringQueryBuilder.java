begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|MapperQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DateFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|IpFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|KeywordFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ScaledFloatFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|TextFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
operator|.
name|QueryParsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * A query that parses a query string and runs it. There are two modes that this operates. The first,  * when no field is added (using {@link #field(String)}, will run the query once and non prefixed fields  * will use the {@link #defaultField(String)} set. The second, when one or more fields are added  * (using {@link #field(String)}), will run the parsed query against the provided fields, and combine  * them either using DisMax or a plain boolean query (see {@link #useDisMax(boolean)}).  */
end_comment

begin_class
DECL|class|QueryStringQueryBuilder
specifier|public
class|class
name|QueryStringQueryBuilder
extends|extends
name|AbstractQueryBuilder
argument_list|<
name|QueryStringQueryBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"query_string"
decl_stmt|;
DECL|field|DEFAULT_AUTO_GENERATE_PHRASE_QUERIES
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_AUTO_GENERATE_PHRASE_QUERIES
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_MAX_DETERMINED_STATES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_DETERMINED_STATES
init|=
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
decl_stmt|;
DECL|field|DEFAULT_ENABLE_POSITION_INCREMENTS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ENABLE_POSITION_INCREMENTS
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_ESCAPE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ESCAPE
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_USE_DIS_MAX
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_USE_DIS_MAX
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_FUZZY_PREFIX_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_FUZZY_PREFIX_LENGTH
init|=
name|FuzzyQuery
operator|.
name|defaultPrefixLength
decl_stmt|;
DECL|field|DEFAULT_FUZZY_MAX_EXPANSIONS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_FUZZY_MAX_EXPANSIONS
init|=
name|FuzzyQuery
operator|.
name|defaultMaxExpansions
decl_stmt|;
DECL|field|DEFAULT_PHRASE_SLOP
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PHRASE_SLOP
init|=
literal|0
decl_stmt|;
DECL|field|DEFAULT_TIE_BREAKER
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_TIE_BREAKER
init|=
literal|0.0f
decl_stmt|;
DECL|field|DEFAULT_FUZZINESS
specifier|public
specifier|static
specifier|final
name|Fuzziness
name|DEFAULT_FUZZINESS
init|=
name|Fuzziness
operator|.
name|AUTO
decl_stmt|;
DECL|field|DEFAULT_OPERATOR
specifier|public
specifier|static
specifier|final
name|Operator
name|DEFAULT_OPERATOR
init|=
name|Operator
operator|.
name|OR
decl_stmt|;
DECL|field|DEFAULT_SPLIT_ON_WHITESPACE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SPLIT_ON_WHITESPACE
init|=
literal|true
decl_stmt|;
DECL|field|QUERY_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|QUERY_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
DECL|field|FIELDS_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_FIELD_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|DEFAULT_FIELD_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"default_field"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_OPERATOR_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|DEFAULT_OPERATOR_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"default_operator"
argument_list|)
decl_stmt|;
DECL|field|ANALYZER_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|ANALYZER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"analyzer"
argument_list|)
decl_stmt|;
DECL|field|QUOTE_ANALYZER_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|QUOTE_ANALYZER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"quote_analyzer"
argument_list|)
decl_stmt|;
DECL|field|ALLOW_LEADING_WILDCARD_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|ALLOW_LEADING_WILDCARD_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"allow_leading_wildcard"
argument_list|)
decl_stmt|;
DECL|field|AUTO_GENERATE_PHRASE_QUERIES_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|AUTO_GENERATE_PHRASE_QUERIES_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"auto_generate_phrase_queries"
argument_list|)
decl_stmt|;
DECL|field|MAX_DETERMINED_STATES_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|MAX_DETERMINED_STATES_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_determined_states"
argument_list|)
decl_stmt|;
DECL|field|LOWERCASE_EXPANDED_TERMS_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|LOWERCASE_EXPANDED_TERMS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"lowercase_expanded_terms"
argument_list|)
operator|.
name|withAllDeprecated
argument_list|(
literal|"Decision is now made by the analyzer"
argument_list|)
decl_stmt|;
DECL|field|ENABLE_POSITION_INCREMENTS_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|ENABLE_POSITION_INCREMENTS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"enable_position_increment"
argument_list|)
decl_stmt|;
DECL|field|ESCAPE_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|ESCAPE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"escape"
argument_list|)
decl_stmt|;
DECL|field|USE_DIS_MAX_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|USE_DIS_MAX_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"use_dis_max"
argument_list|)
decl_stmt|;
DECL|field|FUZZY_PREFIX_LENGTH_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|FUZZY_PREFIX_LENGTH_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fuzzy_prefix_length"
argument_list|)
decl_stmt|;
DECL|field|FUZZY_MAX_EXPANSIONS_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|FUZZY_MAX_EXPANSIONS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fuzzy_max_expansions"
argument_list|)
decl_stmt|;
DECL|field|FUZZY_REWRITE_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|FUZZY_REWRITE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fuzzy_rewrite"
argument_list|)
decl_stmt|;
DECL|field|PHRASE_SLOP_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|PHRASE_SLOP_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"phrase_slop"
argument_list|)
decl_stmt|;
DECL|field|TIE_BREAKER_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|TIE_BREAKER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"tie_breaker"
argument_list|)
decl_stmt|;
DECL|field|ANALYZE_WILDCARD_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|ANALYZE_WILDCARD_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"analyze_wildcard"
argument_list|)
decl_stmt|;
DECL|field|REWRITE_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|REWRITE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"rewrite"
argument_list|)
decl_stmt|;
DECL|field|MINIMUM_SHOULD_MATCH_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|MINIMUM_SHOULD_MATCH_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"minimum_should_match"
argument_list|)
decl_stmt|;
DECL|field|QUOTE_FIELD_SUFFIX_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|QUOTE_FIELD_SUFFIX_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"quote_field_suffix"
argument_list|)
decl_stmt|;
DECL|field|LENIENT_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|LENIENT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"lenient"
argument_list|)
decl_stmt|;
DECL|field|LOCALE_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|LOCALE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"locale"
argument_list|)
operator|.
name|withAllDeprecated
argument_list|(
literal|"Decision is now made by the analyzer"
argument_list|)
decl_stmt|;
DECL|field|TIME_ZONE_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|TIME_ZONE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"time_zone"
argument_list|)
decl_stmt|;
DECL|field|SPLIT_ON_WHITESPACE
specifier|private
specifier|static
specifier|final
name|ParseField
name|SPLIT_ON_WHITESPACE
init|=
operator|new
name|ParseField
argument_list|(
literal|"split_on_whitespace"
argument_list|)
decl_stmt|;
DECL|field|ALL_FIELDS_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|ALL_FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"all_fields"
argument_list|)
decl_stmt|;
comment|// Mapping types the "all-ish" query can be executed against
DECL|field|ALLOWED_QUERY_MAPPER_TYPES
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ALLOWED_QUERY_MAPPER_TYPES
decl_stmt|;
static|static
block|{
name|ALLOWED_QUERY_MAPPER_TYPES
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|ALLOWED_QUERY_MAPPER_TYPES
operator|.
name|add
argument_list|(
name|DateFieldMapper
operator|.
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
name|ALLOWED_QUERY_MAPPER_TYPES
operator|.
name|add
argument_list|(
name|IpFieldMapper
operator|.
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
name|ALLOWED_QUERY_MAPPER_TYPES
operator|.
name|add
argument_list|(
name|KeywordFieldMapper
operator|.
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
for|for
control|(
name|NumberFieldMapper
operator|.
name|NumberType
name|nt
range|:
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|values
argument_list|()
control|)
block|{
name|ALLOWED_QUERY_MAPPER_TYPES
operator|.
name|add
argument_list|(
name|nt
operator|.
name|typeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ALLOWED_QUERY_MAPPER_TYPES
operator|.
name|add
argument_list|(
name|ScaledFloatFieldMapper
operator|.
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
name|ALLOWED_QUERY_MAPPER_TYPES
operator|.
name|add
argument_list|(
name|TextFieldMapper
operator|.
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
block|}
DECL|field|queryString
specifier|private
specifier|final
name|String
name|queryString
decl_stmt|;
DECL|field|defaultField
specifier|private
name|String
name|defaultField
decl_stmt|;
comment|/**      * Fields to query against. If left empty will query default field,      * currently _ALL. Uses a TreeMap to hold the fields so boolean clauses are      * always sorted in same order for generated Lucene query for easier      * testing.      *      * Can be changed back to HashMap once https://issues.apache.org/jira/browse/LUCENE-6305 is fixed.      */
DECL|field|fieldsAndWeights
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldsAndWeights
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|defaultOperator
specifier|private
name|Operator
name|defaultOperator
init|=
name|DEFAULT_OPERATOR
decl_stmt|;
DECL|field|analyzer
specifier|private
name|String
name|analyzer
decl_stmt|;
DECL|field|quoteAnalyzer
specifier|private
name|String
name|quoteAnalyzer
decl_stmt|;
DECL|field|quoteFieldSuffix
specifier|private
name|String
name|quoteFieldSuffix
decl_stmt|;
DECL|field|autoGeneratePhraseQueries
specifier|private
name|boolean
name|autoGeneratePhraseQueries
init|=
name|DEFAULT_AUTO_GENERATE_PHRASE_QUERIES
decl_stmt|;
DECL|field|allowLeadingWildcard
specifier|private
name|Boolean
name|allowLeadingWildcard
decl_stmt|;
DECL|field|analyzeWildcard
specifier|private
name|Boolean
name|analyzeWildcard
decl_stmt|;
DECL|field|enablePositionIncrements
specifier|private
name|boolean
name|enablePositionIncrements
init|=
name|DEFAULT_ENABLE_POSITION_INCREMENTS
decl_stmt|;
DECL|field|fuzziness
specifier|private
name|Fuzziness
name|fuzziness
init|=
name|DEFAULT_FUZZINESS
decl_stmt|;
DECL|field|fuzzyPrefixLength
specifier|private
name|int
name|fuzzyPrefixLength
init|=
name|DEFAULT_FUZZY_PREFIX_LENGTH
decl_stmt|;
DECL|field|fuzzyMaxExpansions
specifier|private
name|int
name|fuzzyMaxExpansions
init|=
name|DEFAULT_FUZZY_MAX_EXPANSIONS
decl_stmt|;
DECL|field|rewrite
specifier|private
name|String
name|rewrite
decl_stmt|;
DECL|field|fuzzyRewrite
specifier|private
name|String
name|fuzzyRewrite
decl_stmt|;
DECL|field|escape
specifier|private
name|boolean
name|escape
init|=
name|DEFAULT_ESCAPE
decl_stmt|;
DECL|field|phraseSlop
specifier|private
name|int
name|phraseSlop
init|=
name|DEFAULT_PHRASE_SLOP
decl_stmt|;
DECL|field|useDisMax
specifier|private
name|boolean
name|useDisMax
init|=
name|DEFAULT_USE_DIS_MAX
decl_stmt|;
DECL|field|tieBreaker
specifier|private
name|float
name|tieBreaker
init|=
name|DEFAULT_TIE_BREAKER
decl_stmt|;
DECL|field|minimumShouldMatch
specifier|private
name|String
name|minimumShouldMatch
decl_stmt|;
DECL|field|lenient
specifier|private
name|Boolean
name|lenient
decl_stmt|;
DECL|field|timeZone
specifier|private
name|DateTimeZone
name|timeZone
decl_stmt|;
DECL|field|useAllFields
specifier|private
name|Boolean
name|useAllFields
decl_stmt|;
comment|/** To limit effort spent determinizing regexp queries. */
DECL|field|maxDeterminizedStates
specifier|private
name|int
name|maxDeterminizedStates
init|=
name|DEFAULT_MAX_DETERMINED_STATES
decl_stmt|;
DECL|field|splitOnWhitespace
specifier|private
name|boolean
name|splitOnWhitespace
init|=
name|DEFAULT_SPLIT_ON_WHITESPACE
decl_stmt|;
DECL|method|QueryStringQueryBuilder
specifier|public
name|QueryStringQueryBuilder
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"query text missing"
argument_list|)
throw|;
block|}
name|this
operator|.
name|queryString
operator|=
name|queryString
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|QueryStringQueryBuilder
specifier|public
name|QueryStringQueryBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|queryString
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|defaultField
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|fieldsAndWeights
operator|.
name|put
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|defaultOperator
operator|=
name|Operator
operator|.
name|readFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|analyzer
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|quoteAnalyzer
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|quoteFieldSuffix
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|autoGeneratePhraseQueries
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|allowLeadingWildcard
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
name|analyzeWildcard
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_1_0_UNRELEASED
argument_list|)
condition|)
block|{
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
comment|// lowercase_expanded_terms
block|}
name|enablePositionIncrements
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_1_0_UNRELEASED
argument_list|)
condition|)
block|{
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
comment|// locale
block|}
name|fuzziness
operator|=
operator|new
name|Fuzziness
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fuzzyPrefixLength
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|fuzzyMaxExpansions
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|fuzzyRewrite
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|phraseSlop
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|useDisMax
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|tieBreaker
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|rewrite
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|minimumShouldMatch
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|lenient
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
name|timeZone
operator|=
name|in
operator|.
name|readOptionalTimeZone
argument_list|()
expr_stmt|;
name|escape
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|maxDeterminizedStates
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_1_0_UNRELEASED
argument_list|)
condition|)
block|{
name|splitOnWhitespace
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|useAllFields
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|splitOnWhitespace
operator|=
name|DEFAULT_SPLIT_ON_WHITESPACE
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|queryString
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|defaultField
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|fieldsAndWeights
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldsEntry
range|:
name|this
operator|.
name|fieldsAndWeights
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|fieldsEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|fieldsEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|defaultOperator
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|analyzer
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|quoteAnalyzer
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|quoteFieldSuffix
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|autoGeneratePhraseQueries
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|this
operator|.
name|allowLeadingWildcard
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|this
operator|.
name|analyzeWildcard
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_1_0_UNRELEASED
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// lowercase_expanded_terms
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|enablePositionIncrements
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_1_0_UNRELEASED
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|Locale
operator|.
name|ROOT
operator|.
name|toLanguageTag
argument_list|()
argument_list|)
expr_stmt|;
comment|// locale
block|}
name|this
operator|.
name|fuzziness
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|fuzzyPrefixLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|fuzzyMaxExpansions
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|fuzzyRewrite
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|phraseSlop
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|useDisMax
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|this
operator|.
name|tieBreaker
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|rewrite
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|minimumShouldMatch
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|this
operator|.
name|lenient
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalTimeZone
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|escape
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|maxDeterminizedStates
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_1_0_UNRELEASED
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|splitOnWhitespace
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|this
operator|.
name|useAllFields
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|queryString
specifier|public
name|String
name|queryString
parameter_list|()
block|{
return|return
name|this
operator|.
name|queryString
return|;
block|}
comment|/**      * The default field to run against when no prefix field is specified. Only relevant when      * not explicitly adding fields the query string will run against.      */
DECL|method|defaultField
specifier|public
name|QueryStringQueryBuilder
name|defaultField
parameter_list|(
name|String
name|defaultField
parameter_list|)
block|{
name|this
operator|.
name|defaultField
operator|=
name|defaultField
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|defaultField
specifier|public
name|String
name|defaultField
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultField
return|;
block|}
comment|/**      * Tell the query_string query to use all fields explicitly, even if _all is      * enabled. If the "default_field" parameter or "fields" are specified, they      * will be ignored.      */
DECL|method|useAllFields
specifier|public
name|QueryStringQueryBuilder
name|useAllFields
parameter_list|(
name|Boolean
name|useAllFields
parameter_list|)
block|{
name|this
operator|.
name|useAllFields
operator|=
name|useAllFields
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|useAllFields
specifier|public
name|Boolean
name|useAllFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|useAllFields
return|;
block|}
comment|/**      * Adds a field to run the query string against. The field will be associated with the      * default boost of {@link AbstractQueryBuilder#DEFAULT_BOOST}.      * Use {@link #field(String, float)} to set a specific boost for the field.      */
DECL|method|field
specifier|public
name|QueryStringQueryBuilder
name|field
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|fieldsAndWeights
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to run the query string against with a specific boost.      */
DECL|method|field
specifier|public
name|QueryStringQueryBuilder
name|field
parameter_list|(
name|String
name|field
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|fieldsAndWeights
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|boost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add several fields to run the query against with a specific boost.      */
DECL|method|fields
specifier|public
name|QueryStringQueryBuilder
name|fields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fieldsAndWeights
operator|.
name|putAll
argument_list|(
name|fields
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Returns the fields including their respective boosts to run the query against. */
DECL|method|fields
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fields
parameter_list|()
block|{
return|return
name|this
operator|.
name|fieldsAndWeights
return|;
block|}
comment|/**      * When more than one field is used with the query string, should queries be combined using      * dis max, or boolean query. Defaults to dis max (<tt>true</tt>).      */
DECL|method|useDisMax
specifier|public
name|QueryStringQueryBuilder
name|useDisMax
parameter_list|(
name|boolean
name|useDisMax
parameter_list|)
block|{
name|this
operator|.
name|useDisMax
operator|=
name|useDisMax
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|useDisMax
specifier|public
name|boolean
name|useDisMax
parameter_list|()
block|{
return|return
name|this
operator|.
name|useDisMax
return|;
block|}
comment|/**      * When more than one field is used with the query string, and combined queries are using      * dis max, control the tie breaker for it.      */
DECL|method|tieBreaker
specifier|public
name|QueryStringQueryBuilder
name|tieBreaker
parameter_list|(
name|float
name|tieBreaker
parameter_list|)
block|{
name|this
operator|.
name|tieBreaker
operator|=
name|tieBreaker
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|tieBreaker
specifier|public
name|float
name|tieBreaker
parameter_list|()
block|{
return|return
name|this
operator|.
name|tieBreaker
return|;
block|}
comment|/**      * Sets the boolean operator of the query parser used to parse the query string.      *<p>      * In default mode ({@link Operator#OR}) terms without any modifiers      * are considered optional: for example<code>capital of Hungary</code> is equal to      *<code>capital OR of OR Hungary</code>.      *<p>      * In {@link Operator#AND} mode terms are considered to be in conjunction: the      * above mentioned query is parsed as<code>capital AND of AND Hungary</code>      */
DECL|method|defaultOperator
specifier|public
name|QueryStringQueryBuilder
name|defaultOperator
parameter_list|(
name|Operator
name|defaultOperator
parameter_list|)
block|{
name|this
operator|.
name|defaultOperator
operator|=
name|defaultOperator
operator|==
literal|null
condition|?
name|DEFAULT_OPERATOR
else|:
name|defaultOperator
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|defaultOperator
specifier|public
name|Operator
name|defaultOperator
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultOperator
return|;
block|}
comment|/**      * The optional analyzer used to analyze the query string. Note, if a field has search analyzer      * defined for it, then it will be used automatically. Defaults to the smart search analyzer.      */
DECL|method|analyzer
specifier|public
name|QueryStringQueryBuilder
name|analyzer
parameter_list|(
name|String
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The optional analyzer used to analyze the query string for phrase searches. Note, if a field has search (quote) analyzer      * defined for it, then it will be used automatically. Defaults to the smart search analyzer.      */
DECL|method|quoteAnalyzer
specifier|public
name|QueryStringQueryBuilder
name|quoteAnalyzer
parameter_list|(
name|String
name|quoteAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|quoteAnalyzer
operator|=
name|quoteAnalyzer
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set to true if phrase queries will be automatically generated      * when the analyzer returns more than one term from whitespace      * delimited text.      * NOTE: this behavior may not be suitable for all languages.      *<p>      * Set to false if phrase queries should only be generated when      * surrounded by double quotes.      */
DECL|method|autoGeneratePhraseQueries
specifier|public
name|QueryStringQueryBuilder
name|autoGeneratePhraseQueries
parameter_list|(
name|boolean
name|autoGeneratePhraseQueries
parameter_list|)
block|{
name|this
operator|.
name|autoGeneratePhraseQueries
operator|=
name|autoGeneratePhraseQueries
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|autoGeneratePhraseQueries
specifier|public
name|boolean
name|autoGeneratePhraseQueries
parameter_list|()
block|{
return|return
name|this
operator|.
name|autoGeneratePhraseQueries
return|;
block|}
comment|/**      * Protects against too-difficult regular expression queries.      */
DECL|method|maxDeterminizedStates
specifier|public
name|QueryStringQueryBuilder
name|maxDeterminizedStates
parameter_list|(
name|int
name|maxDeterminizedStates
parameter_list|)
block|{
name|this
operator|.
name|maxDeterminizedStates
operator|=
name|maxDeterminizedStates
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxDeterminizedStates
specifier|public
name|int
name|maxDeterminizedStates
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxDeterminizedStates
return|;
block|}
comment|/**      * Should leading wildcards be allowed or not. Defaults to<tt>true</tt>.      */
DECL|method|allowLeadingWildcard
specifier|public
name|QueryStringQueryBuilder
name|allowLeadingWildcard
parameter_list|(
name|Boolean
name|allowLeadingWildcard
parameter_list|)
block|{
name|this
operator|.
name|allowLeadingWildcard
operator|=
name|allowLeadingWildcard
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|allowLeadingWildcard
specifier|public
name|Boolean
name|allowLeadingWildcard
parameter_list|()
block|{
return|return
name|this
operator|.
name|allowLeadingWildcard
return|;
block|}
comment|/**      * Set to<tt>true</tt> to enable position increments in result query. Defaults to      *<tt>true</tt>.      *<p>      * When set, result phrase and multi-phrase queries will be aware of position increments.      * Useful when e.g. a StopFilter increases the position increment of the token that follows an omitted token.      */
DECL|method|enablePositionIncrements
specifier|public
name|QueryStringQueryBuilder
name|enablePositionIncrements
parameter_list|(
name|boolean
name|enablePositionIncrements
parameter_list|)
block|{
name|this
operator|.
name|enablePositionIncrements
operator|=
name|enablePositionIncrements
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|enablePositionIncrements
specifier|public
name|boolean
name|enablePositionIncrements
parameter_list|()
block|{
return|return
name|this
operator|.
name|enablePositionIncrements
return|;
block|}
comment|/**      * Set the edit distance for fuzzy queries. Default is "AUTO".      */
DECL|method|fuzziness
specifier|public
name|QueryStringQueryBuilder
name|fuzziness
parameter_list|(
name|Fuzziness
name|fuzziness
parameter_list|)
block|{
name|this
operator|.
name|fuzziness
operator|=
name|fuzziness
operator|==
literal|null
condition|?
name|DEFAULT_FUZZINESS
else|:
name|fuzziness
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|fuzziness
specifier|public
name|Fuzziness
name|fuzziness
parameter_list|()
block|{
return|return
name|this
operator|.
name|fuzziness
return|;
block|}
comment|/**      * Set the minimum prefix length for fuzzy queries. Default is 1.      */
DECL|method|fuzzyPrefixLength
specifier|public
name|QueryStringQueryBuilder
name|fuzzyPrefixLength
parameter_list|(
name|int
name|fuzzyPrefixLength
parameter_list|)
block|{
name|this
operator|.
name|fuzzyPrefixLength
operator|=
name|fuzzyPrefixLength
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|fuzzyPrefixLength
specifier|public
name|int
name|fuzzyPrefixLength
parameter_list|()
block|{
return|return
name|fuzzyPrefixLength
return|;
block|}
DECL|method|fuzzyMaxExpansions
specifier|public
name|QueryStringQueryBuilder
name|fuzzyMaxExpansions
parameter_list|(
name|int
name|fuzzyMaxExpansions
parameter_list|)
block|{
name|this
operator|.
name|fuzzyMaxExpansions
operator|=
name|fuzzyMaxExpansions
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|fuzzyMaxExpansions
specifier|public
name|int
name|fuzzyMaxExpansions
parameter_list|()
block|{
return|return
name|fuzzyMaxExpansions
return|;
block|}
DECL|method|fuzzyRewrite
specifier|public
name|QueryStringQueryBuilder
name|fuzzyRewrite
parameter_list|(
name|String
name|fuzzyRewrite
parameter_list|)
block|{
name|this
operator|.
name|fuzzyRewrite
operator|=
name|fuzzyRewrite
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|fuzzyRewrite
specifier|public
name|String
name|fuzzyRewrite
parameter_list|()
block|{
return|return
name|fuzzyRewrite
return|;
block|}
comment|/**      * Sets the default slop for phrases.  If zero, then exact phrase matches      * are required. Default value is zero.      */
DECL|method|phraseSlop
specifier|public
name|QueryStringQueryBuilder
name|phraseSlop
parameter_list|(
name|int
name|phraseSlop
parameter_list|)
block|{
name|this
operator|.
name|phraseSlop
operator|=
name|phraseSlop
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|phraseSlop
specifier|public
name|int
name|phraseSlop
parameter_list|()
block|{
return|return
name|phraseSlop
return|;
block|}
DECL|method|rewrite
specifier|public
name|QueryStringQueryBuilder
name|rewrite
parameter_list|(
name|String
name|rewrite
parameter_list|)
block|{
name|this
operator|.
name|rewrite
operator|=
name|rewrite
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set to<tt>true</tt> to enable analysis on wildcard and prefix queries.      */
DECL|method|analyzeWildcard
specifier|public
name|QueryStringQueryBuilder
name|analyzeWildcard
parameter_list|(
name|Boolean
name|analyzeWildcard
parameter_list|)
block|{
name|this
operator|.
name|analyzeWildcard
operator|=
name|analyzeWildcard
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|analyzeWildcard
specifier|public
name|Boolean
name|analyzeWildcard
parameter_list|()
block|{
return|return
name|this
operator|.
name|analyzeWildcard
return|;
block|}
DECL|method|rewrite
specifier|public
name|String
name|rewrite
parameter_list|()
block|{
return|return
name|this
operator|.
name|rewrite
return|;
block|}
DECL|method|minimumShouldMatch
specifier|public
name|QueryStringQueryBuilder
name|minimumShouldMatch
parameter_list|(
name|String
name|minimumShouldMatch
parameter_list|)
block|{
name|this
operator|.
name|minimumShouldMatch
operator|=
name|minimumShouldMatch
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|minimumShouldMatch
specifier|public
name|String
name|minimumShouldMatch
parameter_list|()
block|{
return|return
name|this
operator|.
name|minimumShouldMatch
return|;
block|}
comment|/**      * An optional field name suffix to automatically try and add to the field searched when using quoted text.      */
DECL|method|quoteFieldSuffix
specifier|public
name|QueryStringQueryBuilder
name|quoteFieldSuffix
parameter_list|(
name|String
name|quoteFieldSuffix
parameter_list|)
block|{
name|this
operator|.
name|quoteFieldSuffix
operator|=
name|quoteFieldSuffix
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|quoteFieldSuffix
specifier|public
name|String
name|quoteFieldSuffix
parameter_list|()
block|{
return|return
name|this
operator|.
name|quoteFieldSuffix
return|;
block|}
comment|/**      * Sets the query string parser to be lenient when parsing field values, defaults to the index      * setting and if not set, defaults to false.      */
DECL|method|lenient
specifier|public
name|QueryStringQueryBuilder
name|lenient
parameter_list|(
name|Boolean
name|lenient
parameter_list|)
block|{
name|this
operator|.
name|lenient
operator|=
name|lenient
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|lenient
specifier|public
name|Boolean
name|lenient
parameter_list|()
block|{
return|return
name|this
operator|.
name|lenient
return|;
block|}
comment|/**      * In case of date field, we can adjust the from/to fields using a timezone      */
DECL|method|timeZone
specifier|public
name|QueryStringQueryBuilder
name|timeZone
parameter_list|(
name|String
name|timeZone
parameter_list|)
block|{
if|if
condition|(
name|timeZone
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|timeZone
operator|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|timeZone
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|timeZone
specifier|public
name|QueryStringQueryBuilder
name|timeZone
parameter_list|(
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|timeZone
specifier|public
name|DateTimeZone
name|timeZone
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeZone
return|;
block|}
comment|/**      * Set to<tt>true</tt> to enable escaping of the query string      */
DECL|method|escape
specifier|public
name|QueryStringQueryBuilder
name|escape
parameter_list|(
name|boolean
name|escape
parameter_list|)
block|{
name|this
operator|.
name|escape
operator|=
name|escape
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|escape
specifier|public
name|boolean
name|escape
parameter_list|()
block|{
return|return
name|this
operator|.
name|escape
return|;
block|}
comment|/**      * Whether query text should be split on whitespace prior to analysis.      * Default is<code>{@value #DEFAULT_SPLIT_ON_WHITESPACE}</code>.      */
DECL|method|splitOnWhitespace
specifier|public
name|QueryStringQueryBuilder
name|splitOnWhitespace
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|splitOnWhitespace
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|splitOnWhitespace
specifier|public
name|boolean
name|splitOnWhitespace
parameter_list|()
block|{
return|return
name|splitOnWhitespace
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|QUERY_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|queryString
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|defaultField
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|DEFAULT_FIELD_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|defaultField
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|startArray
argument_list|(
name|FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldEntry
range|:
name|this
operator|.
name|fieldsAndWeights
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|"^"
operator|+
name|fieldEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|USE_DIS_MAX_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|useDisMax
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|TIE_BREAKER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|tieBreaker
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|DEFAULT_OPERATOR_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|defaultOperator
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|analyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ANALYZER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|analyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|quoteAnalyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|QUOTE_ANALYZER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|quoteAnalyzer
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|AUTO_GENERATE_PHRASE_QUERIES_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|autoGeneratePhraseQueries
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MAX_DETERMINED_STATES_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|maxDeterminizedStates
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|allowLeadingWildcard
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ALLOW_LEADING_WILDCARD_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|allowLeadingWildcard
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|ENABLE_POSITION_INCREMENTS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|enablePositionIncrements
argument_list|)
expr_stmt|;
name|this
operator|.
name|fuzziness
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|FUZZY_PREFIX_LENGTH_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|fuzzyPrefixLength
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|FUZZY_MAX_EXPANSIONS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|fuzzyMaxExpansions
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|fuzzyRewrite
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FUZZY_REWRITE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|fuzzyRewrite
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|PHRASE_SLOP_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|phraseSlop
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|analyzeWildcard
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ANALYZE_WILDCARD_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|analyzeWildcard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rewrite
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|REWRITE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|rewrite
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|minimumShouldMatch
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MINIMUM_SHOULD_MATCH_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|minimumShouldMatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|quoteFieldSuffix
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|QUOTE_FIELD_SUFFIX_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|quoteFieldSuffix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|lenient
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|LENIENT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|lenient
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|timeZone
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|TIME_ZONE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|ESCAPE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|escape
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SPLIT_ON_WHITESPACE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|splitOnWhitespace
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|useAllFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ALL_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|useAllFields
argument_list|)
expr_stmt|;
block|}
name|printBoostAndQueryName
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|Optional
argument_list|<
name|QueryStringQueryBuilder
argument_list|>
name|fromXContent
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|queryString
init|=
literal|null
decl_stmt|;
name|String
name|defaultField
init|=
literal|null
decl_stmt|;
name|String
name|analyzer
init|=
literal|null
decl_stmt|;
name|String
name|quoteAnalyzer
init|=
literal|null
decl_stmt|;
name|String
name|queryName
init|=
literal|null
decl_stmt|;
name|float
name|boost
init|=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
decl_stmt|;
name|boolean
name|autoGeneratePhraseQueries
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_AUTO_GENERATE_PHRASE_QUERIES
decl_stmt|;
name|int
name|maxDeterminizedStates
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_MAX_DETERMINED_STATES
decl_stmt|;
name|boolean
name|enablePositionIncrements
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_ENABLE_POSITION_INCREMENTS
decl_stmt|;
name|boolean
name|escape
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_ESCAPE
decl_stmt|;
name|boolean
name|useDisMax
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_USE_DIS_MAX
decl_stmt|;
name|int
name|fuzzyPrefixLength
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_FUZZY_PREFIX_LENGTH
decl_stmt|;
name|int
name|fuzzyMaxExpansions
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_FUZZY_MAX_EXPANSIONS
decl_stmt|;
name|int
name|phraseSlop
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_PHRASE_SLOP
decl_stmt|;
name|float
name|tieBreaker
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_TIE_BREAKER
decl_stmt|;
name|Boolean
name|analyzeWildcard
init|=
literal|null
decl_stmt|;
name|Boolean
name|allowLeadingWildcard
init|=
literal|null
decl_stmt|;
name|String
name|minimumShouldMatch
init|=
literal|null
decl_stmt|;
name|String
name|quoteFieldSuffix
init|=
literal|null
decl_stmt|;
name|Boolean
name|lenient
init|=
literal|null
decl_stmt|;
name|Operator
name|defaultOperator
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_OPERATOR
decl_stmt|;
name|String
name|timeZone
init|=
literal|null
decl_stmt|;
name|Fuzziness
name|fuzziness
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_FUZZINESS
decl_stmt|;
name|String
name|fuzzyRewrite
init|=
literal|null
decl_stmt|;
name|String
name|rewrite
init|=
literal|null
decl_stmt|;
name|boolean
name|splitOnWhitespace
init|=
name|DEFAULT_SPLIT_ON_WHITESPACE
decl_stmt|;
name|Boolean
name|useAllFields
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldsAndWeights
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FIELDS_FIELD
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|String
name|fField
init|=
literal|null
decl_stmt|;
name|float
name|fBoost
init|=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
decl_stmt|;
name|char
index|[]
name|text
init|=
name|parser
operator|.
name|textCharacters
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|parser
operator|.
name|textOffset
argument_list|()
operator|+
name|parser
operator|.
name|textLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|parser
operator|.
name|textOffset
argument_list|()
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|text
index|[
name|i
index|]
operator|==
literal|'^'
condition|)
block|{
name|int
name|relativeLocation
init|=
name|i
operator|-
name|parser
operator|.
name|textOffset
argument_list|()
decl_stmt|;
name|fField
operator|=
operator|new
name|String
argument_list|(
name|text
argument_list|,
name|parser
operator|.
name|textOffset
argument_list|()
argument_list|,
name|relativeLocation
argument_list|)
expr_stmt|;
name|fBoost
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
operator|new
name|String
argument_list|(
name|text
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|parser
operator|.
name|textLength
argument_list|()
operator|-
name|relativeLocation
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|fField
operator|==
literal|null
condition|)
block|{
name|fField
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
name|fieldsAndWeights
operator|.
name|put
argument_list|(
name|fField
argument_list|,
name|fBoost
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"["
operator|+
name|QueryStringQueryBuilder
operator|.
name|NAME
operator|+
literal|"] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|QUERY_FIELD
argument_list|)
condition|)
block|{
name|queryString
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|DEFAULT_FIELD_FIELD
argument_list|)
condition|)
block|{
name|defaultField
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|DEFAULT_OPERATOR_FIELD
argument_list|)
condition|)
block|{
name|defaultOperator
operator|=
name|Operator
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|ANALYZER_FIELD
argument_list|)
condition|)
block|{
name|analyzer
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|QUOTE_ANALYZER_FIELD
argument_list|)
condition|)
block|{
name|quoteAnalyzer
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|ALLOW_LEADING_WILDCARD_FIELD
argument_list|)
condition|)
block|{
name|allowLeadingWildcard
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|AUTO_GENERATE_PHRASE_QUERIES_FIELD
argument_list|)
condition|)
block|{
name|autoGeneratePhraseQueries
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|MAX_DETERMINED_STATES_FIELD
argument_list|)
condition|)
block|{
name|maxDeterminizedStates
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|LOWERCASE_EXPANDED_TERMS_FIELD
argument_list|)
condition|)
block|{
comment|// ignore, deprecated setting
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|ENABLE_POSITION_INCREMENTS_FIELD
argument_list|)
condition|)
block|{
name|enablePositionIncrements
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|ESCAPE_FIELD
argument_list|)
condition|)
block|{
name|escape
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|USE_DIS_MAX_FIELD
argument_list|)
condition|)
block|{
name|useDisMax
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FUZZY_PREFIX_LENGTH_FIELD
argument_list|)
condition|)
block|{
name|fuzzyPrefixLength
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FUZZY_MAX_EXPANSIONS_FIELD
argument_list|)
condition|)
block|{
name|fuzzyMaxExpansions
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FUZZY_REWRITE_FIELD
argument_list|)
condition|)
block|{
name|fuzzyRewrite
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|PHRASE_SLOP_FIELD
argument_list|)
condition|)
block|{
name|phraseSlop
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Fuzziness
operator|.
name|FIELD
argument_list|)
condition|)
block|{
name|fuzziness
operator|=
name|Fuzziness
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|AbstractQueryBuilder
operator|.
name|BOOST_FIELD
argument_list|)
condition|)
block|{
name|boost
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TIE_BREAKER_FIELD
argument_list|)
condition|)
block|{
name|tieBreaker
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|ANALYZE_WILDCARD_FIELD
argument_list|)
condition|)
block|{
name|analyzeWildcard
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|REWRITE_FIELD
argument_list|)
condition|)
block|{
name|rewrite
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|MINIMUM_SHOULD_MATCH_FIELD
argument_list|)
condition|)
block|{
name|minimumShouldMatch
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|QUOTE_FIELD_SUFFIX_FIELD
argument_list|)
condition|)
block|{
name|quoteFieldSuffix
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|LENIENT_FIELD
argument_list|)
condition|)
block|{
name|lenient
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|LOCALE_FIELD
argument_list|)
condition|)
block|{
comment|// ignore, deprecated setting
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|ALL_FIELDS_FIELD
argument_list|)
condition|)
block|{
name|useAllFields
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TIME_ZONE_FIELD
argument_list|)
condition|)
block|{
try|try
block|{
name|timeZone
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"["
operator|+
name|QueryStringQueryBuilder
operator|.
name|NAME
operator|+
literal|"] time_zone ["
operator|+
name|parser
operator|.
name|text
argument_list|()
operator|+
literal|"] is unknown"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|AbstractQueryBuilder
operator|.
name|NAME_FIELD
argument_list|)
condition|)
block|{
name|queryName
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|SPLIT_ON_WHITESPACE
argument_list|)
condition|)
block|{
name|splitOnWhitespace
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"["
operator|+
name|QueryStringQueryBuilder
operator|.
name|NAME
operator|+
literal|"] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"["
operator|+
name|QueryStringQueryBuilder
operator|.
name|NAME
operator|+
literal|"] unknown token ["
operator|+
name|token
operator|+
literal|"] after ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"["
operator|+
name|QueryStringQueryBuilder
operator|.
name|NAME
operator|+
literal|"] must be provided with a [query]"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|useAllFields
operator|!=
literal|null
operator|&&
name|useAllFields
operator|)
operator|&&
operator|(
name|defaultField
operator|!=
literal|null
operator|||
name|fieldsAndWeights
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"cannot use [all_fields] parameter in conjunction with [default_field] or [fields]"
argument_list|)
throw|;
block|}
name|QueryStringQueryBuilder
name|queryStringQuery
init|=
operator|new
name|QueryStringQueryBuilder
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|queryStringQuery
operator|.
name|fields
argument_list|(
name|fieldsAndWeights
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|defaultField
argument_list|(
name|defaultField
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|defaultOperator
argument_list|(
name|defaultOperator
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|analyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|quoteAnalyzer
argument_list|(
name|quoteAnalyzer
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|allowLeadingWildcard
argument_list|(
name|allowLeadingWildcard
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|autoGeneratePhraseQueries
argument_list|(
name|autoGeneratePhraseQueries
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|maxDeterminizedStates
argument_list|(
name|maxDeterminizedStates
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|enablePositionIncrements
argument_list|(
name|enablePositionIncrements
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|escape
argument_list|(
name|escape
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|useDisMax
argument_list|(
name|useDisMax
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|fuzzyPrefixLength
argument_list|(
name|fuzzyPrefixLength
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|fuzzyMaxExpansions
argument_list|(
name|fuzzyMaxExpansions
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|fuzzyRewrite
argument_list|(
name|fuzzyRewrite
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|phraseSlop
argument_list|(
name|phraseSlop
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|fuzziness
argument_list|(
name|fuzziness
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|tieBreaker
argument_list|(
name|tieBreaker
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|analyzeWildcard
argument_list|(
name|analyzeWildcard
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|rewrite
argument_list|(
name|rewrite
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|minimumShouldMatch
argument_list|(
name|minimumShouldMatch
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|quoteFieldSuffix
argument_list|(
name|quoteFieldSuffix
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|lenient
argument_list|(
name|lenient
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|timeZone
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|boost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|queryName
argument_list|(
name|queryName
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|splitOnWhitespace
argument_list|(
name|splitOnWhitespace
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|useAllFields
argument_list|(
name|useAllFields
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|queryStringQuery
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|QueryStringQueryBuilder
name|other
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|queryString
argument_list|,
name|other
operator|.
name|queryString
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|defaultField
argument_list|,
name|other
operator|.
name|defaultField
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fieldsAndWeights
argument_list|,
name|other
operator|.
name|fieldsAndWeights
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|defaultOperator
argument_list|,
name|other
operator|.
name|defaultOperator
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|analyzer
argument_list|,
name|other
operator|.
name|analyzer
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|quoteAnalyzer
argument_list|,
name|other
operator|.
name|quoteAnalyzer
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|quoteFieldSuffix
argument_list|,
name|other
operator|.
name|quoteFieldSuffix
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|autoGeneratePhraseQueries
argument_list|,
name|other
operator|.
name|autoGeneratePhraseQueries
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|allowLeadingWildcard
argument_list|,
name|other
operator|.
name|allowLeadingWildcard
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|enablePositionIncrements
argument_list|,
name|other
operator|.
name|enablePositionIncrements
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|analyzeWildcard
argument_list|,
name|other
operator|.
name|analyzeWildcard
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fuzziness
argument_list|,
name|other
operator|.
name|fuzziness
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fuzzyPrefixLength
argument_list|,
name|other
operator|.
name|fuzzyPrefixLength
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fuzzyMaxExpansions
argument_list|,
name|other
operator|.
name|fuzzyMaxExpansions
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fuzzyRewrite
argument_list|,
name|other
operator|.
name|fuzzyRewrite
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|phraseSlop
argument_list|,
name|other
operator|.
name|phraseSlop
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|useDisMax
argument_list|,
name|other
operator|.
name|useDisMax
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|tieBreaker
argument_list|,
name|other
operator|.
name|tieBreaker
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|rewrite
argument_list|,
name|other
operator|.
name|rewrite
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minimumShouldMatch
argument_list|,
name|other
operator|.
name|minimumShouldMatch
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|lenient
argument_list|,
name|other
operator|.
name|lenient
argument_list|)
operator|&&
name|timeZone
operator|==
literal|null
condition|?
name|other
operator|.
name|timeZone
operator|==
literal|null
else|:
name|other
operator|.
name|timeZone
operator|!=
literal|null
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|,
name|other
operator|.
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|escape
argument_list|,
name|other
operator|.
name|escape
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|maxDeterminizedStates
argument_list|,
name|other
operator|.
name|maxDeterminizedStates
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|splitOnWhitespace
argument_list|,
name|other
operator|.
name|splitOnWhitespace
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|useAllFields
argument_list|,
name|other
operator|.
name|useAllFields
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|queryString
argument_list|,
name|defaultField
argument_list|,
name|fieldsAndWeights
argument_list|,
name|defaultOperator
argument_list|,
name|analyzer
argument_list|,
name|quoteAnalyzer
argument_list|,
name|quoteFieldSuffix
argument_list|,
name|autoGeneratePhraseQueries
argument_list|,
name|allowLeadingWildcard
argument_list|,
name|analyzeWildcard
argument_list|,
name|enablePositionIncrements
argument_list|,
name|fuzziness
argument_list|,
name|fuzzyPrefixLength
argument_list|,
name|fuzzyMaxExpansions
argument_list|,
name|fuzzyRewrite
argument_list|,
name|phraseSlop
argument_list|,
name|useDisMax
argument_list|,
name|tieBreaker
argument_list|,
name|rewrite
argument_list|,
name|minimumShouldMatch
argument_list|,
name|lenient
argument_list|,
name|timeZone
operator|==
literal|null
condition|?
literal|0
else|:
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|,
name|escape
argument_list|,
name|maxDeterminizedStates
argument_list|,
name|splitOnWhitespace
argument_list|,
name|useAllFields
argument_list|)
return|;
block|}
comment|/**      * Given a shard context, return a map of all fields in the mappings that      * can be queried. The map will be field name to a float of 1.0f.      */
DECL|method|allQueryableDefaultFields
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|allQueryableDefaultFields
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|allFields
init|=
name|context
operator|.
name|simpleMatchToIndexNames
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|allFields
control|)
block|{
if|if
condition|(
name|MapperService
operator|.
name|isMetadataField
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
comment|// Ignore our metadata fields
continue|continue;
block|}
name|MappedFieldType
name|mft
init|=
name|context
operator|.
name|fieldMapper
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
assert|assert
name|mft
operator|!=
literal|null
operator|:
literal|"should never have a null mapper for an existing field"
assert|;
comment|// Ignore fields that are not in the allowed mapper types. Some
comment|// types do not support term queries, and thus we cannot generate
comment|// a special query for them.
name|String
name|mappingType
init|=
name|mft
operator|.
name|typeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ALLOWED_QUERY_MAPPER_TYPES
operator|.
name|contains
argument_list|(
name|mappingType
argument_list|)
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
annotation|@
name|Override
DECL|method|doToQuery
specifier|protected
name|Query
name|doToQuery
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO would be nice to have all the settings in one place: some change though at query execution time
comment|//e.g. field names get expanded to concrete names, defaults get resolved sometimes to settings values etc.
if|if
condition|(
name|splitOnWhitespace
operator|==
literal|false
operator|&&
name|autoGeneratePhraseQueries
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"it is disallowed to disable [split_on_whitespace] "
operator|+
literal|"if [auto_generate_phrase_queries] is activated"
argument_list|)
throw|;
block|}
name|QueryParserSettings
name|qpSettings
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|escape
condition|)
block|{
name|qpSettings
operator|=
operator|new
name|QueryParserSettings
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParser
operator|.
name|escape
argument_list|(
name|this
operator|.
name|queryString
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qpSettings
operator|=
operator|new
name|QueryParserSettings
argument_list|(
name|this
operator|.
name|queryString
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|resolvedFields
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|useAllFields
operator|!=
literal|null
operator|&&
name|useAllFields
operator|)
operator|&&
operator|(
name|fieldsAndWeights
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|||
name|this
operator|.
name|defaultField
operator|!=
literal|null
operator|)
condition|)
block|{
throw|throw
name|addValidationError
argument_list|(
literal|"cannot use [all_fields] parameter in conjunction with [default_field] or [fields]"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
comment|// If explicitly required to use all fields, use all fields, OR:
comment|// Automatically determine the fields (to replace the _all field) if all of the following are true:
comment|// - The _all field is disabled,
comment|// - and the default_field has not been changed in the settings
comment|// - and default_field is not specified in the request
comment|// - and no fields are specified in the request
if|if
condition|(
operator|(
name|this
operator|.
name|useAllFields
operator|!=
literal|null
operator|&&
name|this
operator|.
name|useAllFields
operator|)
operator|||
operator|(
name|context
operator|.
name|getMapperService
argument_list|()
operator|.
name|allEnabled
argument_list|()
operator|==
literal|false
operator|&&
literal|"_all"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|defaultField
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|defaultField
operator|==
literal|null
operator|&&
name|this
operator|.
name|fieldsAndWeights
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
comment|// Use the automatically determined expansion of all queryable fields
name|resolvedFields
operator|=
name|allQueryableDefaultFields
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Automatically set leniency to "true" if unset so mismatched fields don't cause exceptions
name|qpSettings
operator|.
name|lenient
argument_list|(
name|lenient
operator|==
literal|null
condition|?
literal|true
else|:
name|lenient
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qpSettings
operator|.
name|defaultField
argument_list|(
name|this
operator|.
name|defaultField
operator|==
literal|null
condition|?
name|context
operator|.
name|defaultField
argument_list|()
else|:
name|this
operator|.
name|defaultField
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldsEntry
range|:
name|fieldsAndWeights
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|fieldsEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Float
name|weight
init|=
name|fieldsEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|resolvedFieldName
range|:
name|context
operator|.
name|getMapperService
argument_list|()
operator|.
name|simpleMatchToIndexNames
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|resolvedFields
operator|.
name|put
argument_list|(
name|resolvedFieldName
argument_list|,
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|resolvedFields
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
name|qpSettings
operator|.
name|lenient
argument_list|(
name|lenient
operator|==
literal|null
condition|?
name|context
operator|.
name|queryStringLenient
argument_list|()
else|:
name|lenient
argument_list|)
expr_stmt|;
block|}
name|qpSettings
operator|.
name|fieldsAndWeights
argument_list|(
name|resolvedFields
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|defaultOperator
argument_list|(
name|defaultOperator
operator|.
name|toQueryParserOperator
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
name|qpSettings
operator|.
name|defaultAnalyzer
argument_list|(
name|context
operator|.
name|getMapperService
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NamedAnalyzer
name|namedAnalyzer
init|=
name|context
operator|.
name|getIndexAnalyzers
argument_list|()
operator|.
name|get
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|namedAnalyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryShardException
argument_list|(
name|context
argument_list|,
literal|"[query_string] analyzer ["
operator|+
name|analyzer
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
name|qpSettings
operator|.
name|forceAnalyzer
argument_list|(
name|namedAnalyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|quoteAnalyzer
operator|!=
literal|null
condition|)
block|{
name|NamedAnalyzer
name|namedAnalyzer
init|=
name|context
operator|.
name|getIndexAnalyzers
argument_list|()
operator|.
name|get
argument_list|(
name|quoteAnalyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|namedAnalyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryShardException
argument_list|(
name|context
argument_list|,
literal|"[query_string] quote_analyzer ["
operator|+
name|quoteAnalyzer
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
name|qpSettings
operator|.
name|forceQuoteAnalyzer
argument_list|(
name|namedAnalyzer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
name|qpSettings
operator|.
name|forceQuoteAnalyzer
argument_list|(
name|qpSettings
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qpSettings
operator|.
name|defaultQuoteAnalyzer
argument_list|(
name|context
operator|.
name|getMapperService
argument_list|()
operator|.
name|searchQuoteAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|qpSettings
operator|.
name|quoteFieldSuffix
argument_list|(
name|quoteFieldSuffix
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|autoGeneratePhraseQueries
argument_list|(
name|autoGeneratePhraseQueries
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|allowLeadingWildcard
argument_list|(
name|allowLeadingWildcard
operator|==
literal|null
condition|?
name|context
operator|.
name|queryStringAllowLeadingWildcard
argument_list|()
else|:
name|allowLeadingWildcard
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|analyzeWildcard
argument_list|(
name|analyzeWildcard
operator|==
literal|null
condition|?
name|context
operator|.
name|queryStringAnalyzeWildcard
argument_list|()
else|:
name|analyzeWildcard
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|enablePositionIncrements
argument_list|(
name|enablePositionIncrements
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|fuzziness
argument_list|(
name|fuzziness
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|fuzzyPrefixLength
argument_list|(
name|fuzzyPrefixLength
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|fuzzyMaxExpansions
argument_list|(
name|fuzzyMaxExpansions
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|fuzzyRewriteMethod
argument_list|(
name|QueryParsers
operator|.
name|parseRewriteMethod
argument_list|(
name|context
operator|.
name|getParseFieldMatcher
argument_list|()
argument_list|,
name|this
operator|.
name|fuzzyRewrite
argument_list|)
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|phraseSlop
argument_list|(
name|phraseSlop
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|useDisMax
argument_list|(
name|useDisMax
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|tieBreaker
argument_list|(
name|tieBreaker
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|rewriteMethod
argument_list|(
name|QueryParsers
operator|.
name|parseRewriteMethod
argument_list|(
name|context
operator|.
name|getParseFieldMatcher
argument_list|()
argument_list|,
name|this
operator|.
name|rewrite
argument_list|)
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|timeZone
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|maxDeterminizedStates
argument_list|(
name|maxDeterminizedStates
argument_list|)
expr_stmt|;
name|qpSettings
operator|.
name|splitOnWhitespace
argument_list|(
name|splitOnWhitespace
argument_list|)
expr_stmt|;
name|MapperQueryParser
name|queryParser
init|=
name|context
operator|.
name|queryParser
argument_list|(
name|qpSettings
argument_list|)
decl_stmt|;
name|Query
name|query
decl_stmt|;
try|try
block|{
name|query
operator|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryShardException
argument_list|(
name|context
argument_list|,
literal|"Failed to parse query ["
operator|+
name|this
operator|.
name|queryString
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//save the BoostQuery wrapped structure if present
name|List
argument_list|<
name|Float
argument_list|>
name|boosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|query
operator|instanceof
name|BoostQuery
condition|)
block|{
name|BoostQuery
name|boostQuery
init|=
operator|(
name|BoostQuery
operator|)
name|query
decl_stmt|;
name|boosts
operator|.
name|add
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
name|boostQuery
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
name|query
operator|=
name|Queries
operator|.
name|fixNegativeQueryIfNeeded
argument_list|(
name|query
argument_list|)
expr_stmt|;
comment|// If the coordination factor is disabled on a boolean query we don't apply the minimum should match.
comment|// This is done to make sure that the minimum_should_match doesn't get applied when there is only one word
comment|// and multiple variations of the same word in the query (synonyms for instance).
if|if
condition|(
name|query
operator|instanceof
name|BooleanQuery
operator|&&
operator|!
operator|(
operator|(
name|BooleanQuery
operator|)
name|query
operator|)
operator|.
name|isCoordDisabled
argument_list|()
condition|)
block|{
name|query
operator|=
name|Queries
operator|.
name|applyMinimumShouldMatch
argument_list|(
operator|(
name|BooleanQuery
operator|)
name|query
argument_list|,
name|this
operator|.
name|minimumShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//restore the previous BoostQuery wrapping
for|for
control|(
name|int
name|i
init|=
name|boosts
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|query
operator|=
operator|new
name|BoostQuery
argument_list|(
name|query
argument_list|,
name|boosts
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
block|}
end_class

end_unit

