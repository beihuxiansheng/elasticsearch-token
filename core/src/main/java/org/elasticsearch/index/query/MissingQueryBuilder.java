begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|FieldNamesFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Constructs a filter that have only null values or no value in the original field.  */
end_comment

begin_class
DECL|class|MissingQueryBuilder
specifier|public
class|class
name|MissingQueryBuilder
extends|extends
name|AbstractQueryBuilder
argument_list|<
name|MissingQueryBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"missing"
decl_stmt|;
DECL|field|DEFAULT_NULL_VALUE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NULL_VALUE
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_EXISTENCE_VALUE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_EXISTENCE_VALUE
init|=
literal|true
decl_stmt|;
DECL|field|fieldPattern
specifier|private
specifier|final
name|String
name|fieldPattern
decl_stmt|;
DECL|field|nullValue
specifier|private
name|boolean
name|nullValue
init|=
name|DEFAULT_NULL_VALUE
decl_stmt|;
DECL|field|existence
specifier|private
name|boolean
name|existence
init|=
name|DEFAULT_EXISTENCE_VALUE
decl_stmt|;
DECL|field|PROTOTYPE
specifier|static
specifier|final
name|MissingQueryBuilder
name|PROTOTYPE
init|=
operator|new
name|MissingQueryBuilder
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|MissingQueryBuilder
specifier|public
name|MissingQueryBuilder
parameter_list|(
name|String
name|fieldPattern
parameter_list|)
block|{
name|this
operator|.
name|fieldPattern
operator|=
name|fieldPattern
expr_stmt|;
block|}
DECL|method|fieldPattern
specifier|public
name|String
name|fieldPattern
parameter_list|()
block|{
return|return
name|this
operator|.
name|fieldPattern
return|;
block|}
comment|/**      * Should the missing filter automatically include fields with null value configured in the      * mappings. Defaults to<tt>false</tt>.      */
DECL|method|nullValue
specifier|public
name|MissingQueryBuilder
name|nullValue
parameter_list|(
name|boolean
name|nullValue
parameter_list|)
block|{
name|this
operator|.
name|nullValue
operator|=
name|nullValue
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns true if the missing filter will include documents where the field contains a null value, otherwise      * these documents will not be included.      */
DECL|method|nullValue
specifier|public
name|boolean
name|nullValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|nullValue
return|;
block|}
comment|/**      * Should the missing filter include documents where the field doesn't exist in the docs.      * Defaults to<tt>true</tt>.      */
DECL|method|existence
specifier|public
name|MissingQueryBuilder
name|existence
parameter_list|(
name|boolean
name|existence
parameter_list|)
block|{
name|this
operator|.
name|existence
operator|=
name|existence
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns true if the missing filter will include documents where the field has no values, otherwise      * these documents will not be included.      */
DECL|method|existence
specifier|public
name|boolean
name|existence
parameter_list|()
block|{
return|return
name|this
operator|.
name|existence
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|fieldPattern
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"null_value"
argument_list|,
name|nullValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"existence"
argument_list|,
name|existence
argument_list|)
expr_stmt|;
name|printBoostAndQueryName
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|doToQuery
specifier|protected
name|Query
name|doToQuery
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newFilter
argument_list|(
name|context
argument_list|,
name|fieldPattern
argument_list|,
name|existence
argument_list|,
name|nullValue
argument_list|)
return|;
block|}
DECL|method|newFilter
specifier|public
specifier|static
name|Query
name|newFilter
parameter_list|(
name|QueryShardContext
name|context
parameter_list|,
name|String
name|fieldPattern
parameter_list|,
name|boolean
name|existence
parameter_list|,
name|boolean
name|nullValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|existence
operator|&&
operator|!
name|nullValue
condition|)
block|{
throw|throw
operator|new
name|QueryShardException
argument_list|(
name|context
argument_list|,
literal|"missing must have either existence, or null_value, or both set to true"
argument_list|)
throw|;
block|}
specifier|final
name|FieldNamesFieldMapper
operator|.
name|FieldNamesFieldType
name|fieldNamesFieldType
init|=
operator|(
name|FieldNamesFieldMapper
operator|.
name|FieldNamesFieldType
operator|)
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
name|FieldNamesFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldNamesFieldType
operator|==
literal|null
condition|)
block|{
comment|// can only happen when no types exist, so no docs exist either
return|return
name|Queries
operator|.
name|newMatchNoDocsQuery
argument_list|()
return|;
block|}
name|ObjectMapper
name|objectMapper
init|=
name|context
operator|.
name|getObjectMapper
argument_list|(
name|fieldPattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectMapper
operator|!=
literal|null
condition|)
block|{
comment|// automatic make the object mapper pattern
name|fieldPattern
operator|=
name|fieldPattern
operator|+
literal|".*"
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|context
operator|.
name|simpleMatchToIndexNames
argument_list|(
name|fieldPattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|existence
condition|)
block|{
comment|// if we ask for existence of fields, and we found none, then we should match on all
return|return
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
name|Query
name|existenceFilter
init|=
literal|null
decl_stmt|;
name|Query
name|nullFilter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|existence
condition|)
block|{
name|BooleanQuery
name|boolFilter
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|MappedFieldType
name|fieldType
init|=
name|context
operator|.
name|fieldMapper
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Query
name|filter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fieldNamesFieldType
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
specifier|final
name|String
name|f
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
condition|)
block|{
name|f
operator|=
name|fieldType
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
name|field
expr_stmt|;
block|}
name|filter
operator|=
name|fieldNamesFieldType
operator|.
name|termQuery
argument_list|(
name|f
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|// if _field_names are not indexed, we need to go the slow way
if|if
condition|(
name|filter
operator|==
literal|null
operator|&&
name|fieldType
operator|!=
literal|null
condition|)
block|{
name|filter
operator|=
name|fieldType
operator|.
name|rangeQuery
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|filter
operator|=
operator|new
name|TermRangeQuery
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolFilter
operator|.
name|add
argument_list|(
name|filter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|existenceFilter
operator|=
name|boolFilter
expr_stmt|;
name|existenceFilter
operator|=
name|Queries
operator|.
name|not
argument_list|(
name|existenceFilter
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|nullValue
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|MappedFieldType
name|fieldType
init|=
name|context
operator|.
name|fieldMapper
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
condition|)
block|{
name|nullFilter
operator|=
name|fieldType
operator|.
name|nullValueQuery
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|Query
name|filter
decl_stmt|;
if|if
condition|(
name|nullFilter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existenceFilter
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
name|combined
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|combined
operator|.
name|add
argument_list|(
name|existenceFilter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|combined
operator|.
name|add
argument_list|(
name|nullFilter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// cache the not filter as well, so it will be faster
name|filter
operator|=
name|combined
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
name|nullFilter
expr_stmt|;
block|}
block|}
else|else
block|{
name|filter
operator|=
name|existenceFilter
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|QueryValidationException
name|validate
parameter_list|()
block|{
name|QueryValidationException
name|validationException
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|this
operator|.
name|fieldPattern
argument_list|)
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"missing must be provided with a [field]"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|existence
operator|&&
operator|!
name|nullValue
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"missing must have either existence, or null_value, or both set to true"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
return|return
name|validationException
return|;
block|}
annotation|@
name|Override
DECL|method|doReadFrom
specifier|protected
name|MissingQueryBuilder
name|doReadFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|MissingQueryBuilder
name|missingQueryBuilder
init|=
operator|new
name|MissingQueryBuilder
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
name|missingQueryBuilder
operator|.
name|nullValue
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|missingQueryBuilder
operator|.
name|existence
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
return|return
name|missingQueryBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|fieldPattern
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|nullValue
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|existence
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|fieldPattern
argument_list|,
name|nullValue
argument_list|,
name|existence
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|MissingQueryBuilder
name|other
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|fieldPattern
argument_list|,
name|other
operator|.
name|fieldPattern
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|nullValue
argument_list|,
name|other
operator|.
name|nullValue
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|existence
argument_list|,
name|other
operator|.
name|existence
argument_list|)
return|;
block|}
block|}
end_class

end_unit

