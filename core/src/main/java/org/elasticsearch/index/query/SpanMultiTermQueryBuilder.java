begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanMultiTermQueryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Query that allows wraping a {@link MultiTermQueryBuilder} (one of wildcard, fuzzy, prefix, term, range or regexp query)  * as a {@link SpanQueryBuilder} so it can be nested.  */
end_comment

begin_class
DECL|class|SpanMultiTermQueryBuilder
specifier|public
class|class
name|SpanMultiTermQueryBuilder
extends|extends
name|AbstractQueryBuilder
argument_list|<
name|SpanMultiTermQueryBuilder
argument_list|>
implements|implements
name|SpanQueryBuilder
argument_list|<
name|SpanMultiTermQueryBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"span_multi"
decl_stmt|;
DECL|field|multiTermQueryBuilder
specifier|private
specifier|final
name|MultiTermQueryBuilder
name|multiTermQueryBuilder
decl_stmt|;
DECL|field|PROTOTYPE
specifier|static
specifier|final
name|SpanMultiTermQueryBuilder
name|PROTOTYPE
init|=
operator|new
name|SpanMultiTermQueryBuilder
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|SpanMultiTermQueryBuilder
specifier|public
name|SpanMultiTermQueryBuilder
parameter_list|(
name|MultiTermQueryBuilder
name|multiTermQueryBuilder
parameter_list|)
block|{
name|this
operator|.
name|multiTermQueryBuilder
operator|=
name|multiTermQueryBuilder
expr_stmt|;
block|}
DECL|method|multiTermQueryBuilder
specifier|public
name|MultiTermQueryBuilder
name|multiTermQueryBuilder
parameter_list|()
block|{
return|return
name|this
operator|.
name|multiTermQueryBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SpanMultiTermQueryParser
operator|.
name|MATCH_NAME
argument_list|)
expr_stmt|;
name|multiTermQueryBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doToQuery
specifier|protected
name|Query
name|doToQuery
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|subQuery
init|=
name|multiTermQueryBuilder
operator|.
name|toQuery
argument_list|(
name|parseContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|subQuery
operator|instanceof
name|MultiTermQuery
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unsupported inner query, should be "
operator|+
name|MultiTermQuery
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" but was "
operator|+
name|subQuery
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
operator|(
name|MultiTermQuery
operator|)
name|subQuery
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|QueryValidationException
name|validate
parameter_list|()
block|{
name|QueryValidationException
name|validationException
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|multiTermQueryBuilder
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"inner clause ["
operator|+
name|SpanMultiTermQueryParser
operator|.
name|MATCH_NAME
operator|+
literal|"] cannot be null."
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|validationException
operator|=
name|validateInnerQuery
argument_list|(
name|multiTermQueryBuilder
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
return|return
name|validationException
return|;
block|}
annotation|@
name|Override
DECL|method|doReadFrom
specifier|protected
name|SpanMultiTermQueryBuilder
name|doReadFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|MultiTermQueryBuilder
name|multiTermBuilder
init|=
name|in
operator|.
name|readNamedWriteable
argument_list|()
decl_stmt|;
return|return
operator|new
name|SpanMultiTermQueryBuilder
argument_list|(
name|multiTermBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|multiTermQueryBuilder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|multiTermQueryBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|SpanMultiTermQueryBuilder
name|other
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|multiTermQueryBuilder
argument_list|,
name|other
operator|.
name|multiTermQueryBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|boost
specifier|public
name|SpanMultiTermQueryBuilder
name|boost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
comment|//no-op: SpanMultiTermQueryParser doesn't support boost, we should be consistent and ignore it here too.
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|queryName
specifier|public
name|SpanMultiTermQueryBuilder
name|queryName
parameter_list|(
name|String
name|queryName
parameter_list|)
block|{
comment|//no-op: SpanMultiTermQueryParser doesn't support _name, we should be consistent and ignore it here too.
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

