begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
operator|.
name|QueryParsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|MatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|MultiMatchQuery
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Same as {@link MatchQueryBuilder} but supports multiple fields.  */
end_comment

begin_class
DECL|class|MultiMatchQueryBuilder
specifier|public
class|class
name|MultiMatchQueryBuilder
extends|extends
name|AbstractQueryBuilder
argument_list|<
name|MultiMatchQueryBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"multi_match"
decl_stmt|;
DECL|field|DEFAULT_TYPE
specifier|public
specifier|static
specifier|final
name|MultiMatchQueryBuilder
operator|.
name|Type
name|DEFAULT_TYPE
init|=
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|BEST_FIELDS
decl_stmt|;
DECL|field|DEFAULT_OPERATOR
specifier|public
specifier|static
specifier|final
name|Operator
name|DEFAULT_OPERATOR
init|=
name|Operator
operator|.
name|OR
decl_stmt|;
DECL|field|DEFAULT_PHRASE_SLOP
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PHRASE_SLOP
init|=
name|MatchQuery
operator|.
name|DEFAULT_PHRASE_SLOP
decl_stmt|;
DECL|field|DEFAULT_PREFIX_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PREFIX_LENGTH
init|=
name|FuzzyQuery
operator|.
name|defaultPrefixLength
decl_stmt|;
DECL|field|DEFAULT_MAX_EXPANSIONS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_EXPANSIONS
init|=
name|FuzzyQuery
operator|.
name|defaultMaxExpansions
decl_stmt|;
DECL|field|DEFAULT_LENIENCY
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_LENIENCY
init|=
name|MatchQuery
operator|.
name|DEFAULT_LENIENCY
decl_stmt|;
DECL|field|DEFAULT_ZERO_TERMS_QUERY
specifier|public
specifier|static
specifier|final
name|MatchQuery
operator|.
name|ZeroTermsQuery
name|DEFAULT_ZERO_TERMS_QUERY
init|=
name|MatchQuery
operator|.
name|DEFAULT_ZERO_TERMS_QUERY
decl_stmt|;
DECL|field|SLOP_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|SLOP_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"slop"
argument_list|,
literal|"phrase_slop"
argument_list|)
decl_stmt|;
DECL|field|ZERO_TERMS_QUERY_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|ZERO_TERMS_QUERY_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"zero_terms_query"
argument_list|)
decl_stmt|;
DECL|field|LENIENT_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|LENIENT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"lenient"
argument_list|)
decl_stmt|;
DECL|field|CUTOFF_FREQUENCY_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|CUTOFF_FREQUENCY_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"cutoff_frequency"
argument_list|)
decl_stmt|;
DECL|field|TIE_BREAKER_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|TIE_BREAKER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"tie_breaker"
argument_list|)
decl_stmt|;
DECL|field|USE_DIS_MAX_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|USE_DIS_MAX_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"use_dis_max"
argument_list|)
decl_stmt|;
DECL|field|FUZZY_REWRITE_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|FUZZY_REWRITE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fuzzy_rewrite"
argument_list|)
decl_stmt|;
DECL|field|MINIMUM_SHOULD_MATCH_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|MINIMUM_SHOULD_MATCH_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"minimum_should_match"
argument_list|)
decl_stmt|;
DECL|field|OPERATOR_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|OPERATOR_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"operator"
argument_list|)
decl_stmt|;
DECL|field|MAX_EXPANSIONS_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|MAX_EXPANSIONS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_expansions"
argument_list|)
decl_stmt|;
DECL|field|PREFIX_LENGTH_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|PREFIX_LENGTH_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"prefix_length"
argument_list|)
decl_stmt|;
DECL|field|ANALYZER_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|ANALYZER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"analyzer"
argument_list|)
decl_stmt|;
DECL|field|TYPE_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|TYPE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
DECL|field|QUERY_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|QUERY_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
DECL|field|FIELDS_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|FIELDS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|Object
name|value
decl_stmt|;
DECL|field|fieldsBoosts
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldsBoosts
decl_stmt|;
DECL|field|type
specifier|private
name|Type
name|type
init|=
name|DEFAULT_TYPE
decl_stmt|;
DECL|field|operator
specifier|private
name|Operator
name|operator
init|=
name|DEFAULT_OPERATOR
decl_stmt|;
DECL|field|analyzer
specifier|private
name|String
name|analyzer
decl_stmt|;
DECL|field|slop
specifier|private
name|int
name|slop
init|=
name|DEFAULT_PHRASE_SLOP
decl_stmt|;
DECL|field|fuzziness
specifier|private
name|Fuzziness
name|fuzziness
decl_stmt|;
DECL|field|prefixLength
specifier|private
name|int
name|prefixLength
init|=
name|DEFAULT_PREFIX_LENGTH
decl_stmt|;
DECL|field|maxExpansions
specifier|private
name|int
name|maxExpansions
init|=
name|DEFAULT_MAX_EXPANSIONS
decl_stmt|;
DECL|field|minimumShouldMatch
specifier|private
name|String
name|minimumShouldMatch
decl_stmt|;
DECL|field|fuzzyRewrite
specifier|private
name|String
name|fuzzyRewrite
init|=
literal|null
decl_stmt|;
DECL|field|useDisMax
specifier|private
name|Boolean
name|useDisMax
decl_stmt|;
DECL|field|tieBreaker
specifier|private
name|Float
name|tieBreaker
decl_stmt|;
DECL|field|lenient
specifier|private
name|boolean
name|lenient
init|=
name|DEFAULT_LENIENCY
decl_stmt|;
DECL|field|cutoffFrequency
specifier|private
name|Float
name|cutoffFrequency
init|=
literal|null
decl_stmt|;
DECL|field|zeroTermsQuery
specifier|private
name|MatchQuery
operator|.
name|ZeroTermsQuery
name|zeroTermsQuery
init|=
name|DEFAULT_ZERO_TERMS_QUERY
decl_stmt|;
DECL|enum|Type
specifier|public
enum|enum
name|Type
implements|implements
name|Writeable
block|{
comment|/**          * Uses the best matching boolean field as main score and uses          * a tie-breaker to adjust the score based on remaining field matches          */
DECL|enum constant|BEST_FIELDS
name|BEST_FIELDS
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|,
literal|0.0f
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"best_fields"
argument_list|,
literal|"boolean"
argument_list|)
argument_list|)
block|,
comment|/**          * Uses the sum of the matching boolean fields to score the query          */
DECL|enum constant|MOST_FIELDS
name|MOST_FIELDS
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|,
literal|1.0f
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"most_fields"
argument_list|)
argument_list|)
block|,
comment|/**          * Uses a blended DocumentFrequency to dynamically combine the queried          * fields into a single field given the configured analysis is identical.          * This type uses a tie-breaker to adjust the score based on remaining          * matches per analyzed terms          */
DECL|enum constant|CROSS_FIELDS
name|CROSS_FIELDS
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|,
literal|0.0f
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"cross_fields"
argument_list|)
argument_list|)
block|,
comment|/**          * Uses the best matching phrase field as main score and uses          * a tie-breaker to adjust the score based on remaining field matches          */
DECL|enum constant|PHRASE
name|PHRASE
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE
argument_list|,
literal|0.0f
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"phrase"
argument_list|)
argument_list|)
block|,
comment|/**          * Uses the best matching phrase-prefix field as main score and uses          * a tie-breaker to adjust the score based on remaining field matches          */
DECL|enum constant|PHRASE_PREFIX
name|PHRASE_PREFIX
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE_PREFIX
argument_list|,
literal|0.0f
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"phrase_prefix"
argument_list|)
argument_list|)
block|;
DECL|field|matchQueryType
specifier|private
name|MatchQuery
operator|.
name|Type
name|matchQueryType
decl_stmt|;
DECL|field|tieBreaker
specifier|private
specifier|final
name|float
name|tieBreaker
decl_stmt|;
DECL|field|parseField
specifier|private
specifier|final
name|ParseField
name|parseField
decl_stmt|;
DECL|method|Type
name|Type
parameter_list|(
name|MatchQuery
operator|.
name|Type
name|matchQueryType
parameter_list|,
name|float
name|tieBreaker
parameter_list|,
name|ParseField
name|parseField
parameter_list|)
block|{
name|this
operator|.
name|matchQueryType
operator|=
name|matchQueryType
expr_stmt|;
name|this
operator|.
name|tieBreaker
operator|=
name|tieBreaker
expr_stmt|;
name|this
operator|.
name|parseField
operator|=
name|parseField
expr_stmt|;
block|}
DECL|method|tieBreaker
specifier|public
name|float
name|tieBreaker
parameter_list|()
block|{
return|return
name|this
operator|.
name|tieBreaker
return|;
block|}
DECL|method|matchQueryType
specifier|public
name|MatchQuery
operator|.
name|Type
name|matchQueryType
parameter_list|()
block|{
return|return
name|matchQueryType
return|;
block|}
DECL|method|parseField
specifier|public
name|ParseField
name|parseField
parameter_list|()
block|{
return|return
name|parseField
return|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|Type
name|parse
parameter_list|(
name|String
name|value
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|)
block|{
name|MultiMatchQueryBuilder
operator|.
name|Type
index|[]
name|values
init|=
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|values
argument_list|()
decl_stmt|;
name|Type
name|type
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MultiMatchQueryBuilder
operator|.
name|Type
name|t
range|:
name|values
control|)
block|{
if|if
condition|(
name|t
operator|.
name|parseField
argument_list|()
operator|.
name|match
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse [{}] query type [{}]. unknown type."
argument_list|,
name|NAME
argument_list|,
name|value
argument_list|)
throw|;
block|}
return|return
name|type
return|;
block|}
DECL|method|readFromStream
specifier|public
specifier|static
name|Type
name|readFromStream
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Type
operator|.
name|values
argument_list|()
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the type (for testing)      */
DECL|method|getType
specifier|public
name|MultiMatchQueryBuilder
operator|.
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Constructs a new text query.      */
DECL|method|MultiMatchQueryBuilder
specifier|public
name|MultiMatchQueryBuilder
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|NAME
operator|+
literal|"] requires query value"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|NAME
operator|+
literal|"] requires fields at initialization time"
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|fieldsBoosts
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|field
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Read from a stream.      */
DECL|method|MultiMatchQueryBuilder
specifier|public
name|MultiMatchQueryBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|value
operator|=
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|fieldsBoosts
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|fieldsBoosts
operator|.
name|put
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|type
operator|=
name|Type
operator|.
name|readFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|operator
operator|=
name|Operator
operator|.
name|readFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|analyzer
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|slop
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|fuzziness
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|Fuzziness
operator|::
operator|new
argument_list|)
expr_stmt|;
name|prefixLength
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|maxExpansions
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|minimumShouldMatch
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|fuzzyRewrite
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|useDisMax
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
name|tieBreaker
operator|=
name|in
operator|.
name|readOptionalFloat
argument_list|()
expr_stmt|;
name|lenient
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|cutoffFrequency
operator|=
name|in
operator|.
name|readOptionalFloat
argument_list|()
expr_stmt|;
name|zeroTermsQuery
operator|=
name|MatchQuery
operator|.
name|ZeroTermsQuery
operator|.
name|readFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeGenericValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|fieldsBoosts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldsEntry
range|:
name|fieldsBoosts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|fieldsEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|fieldsEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|type
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|operator
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|slop
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|fuzziness
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|prefixLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|maxExpansions
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|minimumShouldMatch
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|fuzzyRewrite
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|useDisMax
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalFloat
argument_list|(
name|tieBreaker
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|lenient
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalFloat
argument_list|(
name|cutoffFrequency
argument_list|)
expr_stmt|;
name|zeroTermsQuery
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|value
specifier|public
name|Object
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * Adds a field to run the multi match against.      */
DECL|method|field
specifier|public
name|MultiMatchQueryBuilder
name|field
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"supplied field is null or empty."
argument_list|)
throw|;
block|}
name|this
operator|.
name|fieldsBoosts
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to run the multi match against with a specific boost.      */
DECL|method|field
specifier|public
name|MultiMatchQueryBuilder
name|field
parameter_list|(
name|String
name|field
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"supplied field is null or empty."
argument_list|)
throw|;
block|}
name|this
operator|.
name|fieldsBoosts
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|boost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add several fields to run the query against with a specific boost.      */
DECL|method|fields
specifier|public
name|MultiMatchQueryBuilder
name|fields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fieldsBoosts
operator|.
name|putAll
argument_list|(
name|fields
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|fields
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fields
parameter_list|()
block|{
return|return
name|fieldsBoosts
return|;
block|}
comment|/**      * Sets the type of the text query.      */
DECL|method|type
specifier|public
name|MultiMatchQueryBuilder
name|type
parameter_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|NAME
operator|+
literal|"] requires type to be non-null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the type of the text query.      */
DECL|method|type
specifier|public
name|MultiMatchQueryBuilder
name|type
parameter_list|(
name|Object
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|NAME
operator|+
literal|"] requires type to be non-null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|parse
argument_list|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|type
specifier|public
name|Type
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Sets the operator to use when using a boolean query. Defaults to<tt>OR</tt>.      */
DECL|method|operator
specifier|public
name|MultiMatchQueryBuilder
name|operator
parameter_list|(
name|Operator
name|operator
parameter_list|)
block|{
if|if
condition|(
name|operator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|NAME
operator|+
literal|"] requires operator to be non-null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|operator
specifier|public
name|Operator
name|operator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
comment|/**      * Explicitly set the analyzer to use. Defaults to use explicit mapping config for the field, or, if not      * set, the default search analyzer.      */
DECL|method|analyzer
specifier|public
name|MultiMatchQueryBuilder
name|analyzer
parameter_list|(
name|String
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|analyzer
specifier|public
name|String
name|analyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
comment|/**      * Set the phrase slop if evaluated to a phrase query type.      */
DECL|method|slop
specifier|public
name|MultiMatchQueryBuilder
name|slop
parameter_list|(
name|int
name|slop
parameter_list|)
block|{
if|if
condition|(
name|slop
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No negative slop allowed."
argument_list|)
throw|;
block|}
name|this
operator|.
name|slop
operator|=
name|slop
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|slop
specifier|public
name|int
name|slop
parameter_list|()
block|{
return|return
name|slop
return|;
block|}
comment|/**      * Sets the fuzziness used when evaluated to a fuzzy query type. Defaults to "AUTO".      */
DECL|method|fuzziness
specifier|public
name|MultiMatchQueryBuilder
name|fuzziness
parameter_list|(
name|Object
name|fuzziness
parameter_list|)
block|{
if|if
condition|(
name|fuzziness
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fuzziness
operator|=
name|Fuzziness
operator|.
name|build
argument_list|(
name|fuzziness
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|fuzziness
specifier|public
name|Fuzziness
name|fuzziness
parameter_list|()
block|{
return|return
name|fuzziness
return|;
block|}
DECL|method|prefixLength
specifier|public
name|MultiMatchQueryBuilder
name|prefixLength
parameter_list|(
name|int
name|prefixLength
parameter_list|)
block|{
if|if
condition|(
name|prefixLength
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No negative prefix length allowed."
argument_list|)
throw|;
block|}
name|this
operator|.
name|prefixLength
operator|=
name|prefixLength
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|prefixLength
specifier|public
name|int
name|prefixLength
parameter_list|()
block|{
return|return
name|prefixLength
return|;
block|}
comment|/**      * When using fuzzy or prefix type query, the number of term expansions to use. Defaults to unbounded      * so its recommended to set it to a reasonable value for faster execution.      */
DECL|method|maxExpansions
specifier|public
name|MultiMatchQueryBuilder
name|maxExpansions
parameter_list|(
name|int
name|maxExpansions
parameter_list|)
block|{
if|if
condition|(
name|maxExpansions
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Max expansions must be strictly great than zero."
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxExpansions
operator|=
name|maxExpansions
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxExpansions
specifier|public
name|int
name|maxExpansions
parameter_list|()
block|{
return|return
name|maxExpansions
return|;
block|}
DECL|method|minimumShouldMatch
specifier|public
name|MultiMatchQueryBuilder
name|minimumShouldMatch
parameter_list|(
name|String
name|minimumShouldMatch
parameter_list|)
block|{
name|this
operator|.
name|minimumShouldMatch
operator|=
name|minimumShouldMatch
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|minimumShouldMatch
specifier|public
name|String
name|minimumShouldMatch
parameter_list|()
block|{
return|return
name|minimumShouldMatch
return|;
block|}
DECL|method|fuzzyRewrite
specifier|public
name|MultiMatchQueryBuilder
name|fuzzyRewrite
parameter_list|(
name|String
name|fuzzyRewrite
parameter_list|)
block|{
name|this
operator|.
name|fuzzyRewrite
operator|=
name|fuzzyRewrite
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|fuzzyRewrite
specifier|public
name|String
name|fuzzyRewrite
parameter_list|()
block|{
return|return
name|fuzzyRewrite
return|;
block|}
comment|/**      * @deprecated use a tieBreaker of 1.0f to disable "dis-max"      * query or select the appropriate {@link Type}      */
annotation|@
name|Deprecated
DECL|method|useDisMax
specifier|public
name|MultiMatchQueryBuilder
name|useDisMax
parameter_list|(
name|Boolean
name|useDisMax
parameter_list|)
block|{
name|this
operator|.
name|useDisMax
operator|=
name|useDisMax
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|useDisMax
specifier|public
name|Boolean
name|useDisMax
parameter_list|()
block|{
return|return
name|useDisMax
return|;
block|}
comment|/**      *<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries).      * The tie breaker capability allows documents that match more than one query clause      * (in this case on more than one field) to be scored better than documents that      * match only the best of the fields, without confusing this with the better case of      * two distinct matches in the multiple fields.</p>      *      *<p>A tie-breaker value of<tt>1.0</tt> is interpreted as a signal to score queries as      * "most-match" queries where all matching query clauses are considered for scoring.</p>      *      * @see Type      */
DECL|method|tieBreaker
specifier|public
name|MultiMatchQueryBuilder
name|tieBreaker
parameter_list|(
name|float
name|tieBreaker
parameter_list|)
block|{
name|this
operator|.
name|tieBreaker
operator|=
name|tieBreaker
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries).      * The tie breaker capability allows documents that match more than one query clause      * (in this case on more than one field) to be scored better than documents that      * match only the best of the fields, without confusing this with the better case of      * two distinct matches in the multiple fields.</p>      *      *<p>A tie-breaker value of<tt>1.0</tt> is interpreted as a signal to score queries as      * "most-match" queries where all matching query clauses are considered for scoring.</p>      *      * @see Type      */
DECL|method|tieBreaker
specifier|public
name|MultiMatchQueryBuilder
name|tieBreaker
parameter_list|(
name|Float
name|tieBreaker
parameter_list|)
block|{
name|this
operator|.
name|tieBreaker
operator|=
name|tieBreaker
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|tieBreaker
specifier|public
name|Float
name|tieBreaker
parameter_list|()
block|{
return|return
name|tieBreaker
return|;
block|}
comment|/**      * Sets whether format based failures will be ignored.      */
DECL|method|lenient
specifier|public
name|MultiMatchQueryBuilder
name|lenient
parameter_list|(
name|boolean
name|lenient
parameter_list|)
block|{
name|this
operator|.
name|lenient
operator|=
name|lenient
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|lenient
specifier|public
name|boolean
name|lenient
parameter_list|()
block|{
return|return
name|lenient
return|;
block|}
comment|/**      * Set a cutoff value in [0..1] (or absolute number&gt;=1) representing the      * maximum threshold of a terms document frequency to be considered a low      * frequency term.      */
DECL|method|cutoffFrequency
specifier|public
name|MultiMatchQueryBuilder
name|cutoffFrequency
parameter_list|(
name|float
name|cutoff
parameter_list|)
block|{
name|this
operator|.
name|cutoffFrequency
operator|=
name|cutoff
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set a cutoff value in [0..1] (or absolute number&gt;=1) representing the      * maximum threshold of a terms document frequency to be considered a low      * frequency term.      */
DECL|method|cutoffFrequency
specifier|public
name|MultiMatchQueryBuilder
name|cutoffFrequency
parameter_list|(
name|Float
name|cutoff
parameter_list|)
block|{
name|this
operator|.
name|cutoffFrequency
operator|=
name|cutoff
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|cutoffFrequency
specifier|public
name|Float
name|cutoffFrequency
parameter_list|()
block|{
return|return
name|cutoffFrequency
return|;
block|}
DECL|method|zeroTermsQuery
specifier|public
name|MultiMatchQueryBuilder
name|zeroTermsQuery
parameter_list|(
name|MatchQuery
operator|.
name|ZeroTermsQuery
name|zeroTermsQuery
parameter_list|)
block|{
if|if
condition|(
name|zeroTermsQuery
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|NAME
operator|+
literal|"] requires zero terms query to be non-null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|zeroTermsQuery
operator|=
name|zeroTermsQuery
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|zeroTermsQuery
specifier|public
name|MatchQuery
operator|.
name|ZeroTermsQuery
name|zeroTermsQuery
parameter_list|()
block|{
return|return
name|zeroTermsQuery
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|public
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|QUERY_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldEntry
range|:
name|this
operator|.
name|fieldsBoosts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|"^"
operator|+
name|fieldEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|TYPE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|OPERATOR_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|operator
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|ANALYZER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|SLOP_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|slop
argument_list|)
expr_stmt|;
if|if
condition|(
name|fuzziness
operator|!=
literal|null
condition|)
block|{
name|fuzziness
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|PREFIX_LENGTH_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|prefixLength
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MAX_EXPANSIONS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxExpansions
argument_list|)
expr_stmt|;
if|if
condition|(
name|minimumShouldMatch
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MINIMUM_SHOULD_MATCH_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minimumShouldMatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fuzzyRewrite
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FUZZY_REWRITE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fuzzyRewrite
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useDisMax
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|USE_DIS_MAX_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|useDisMax
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tieBreaker
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|TIE_BREAKER_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|tieBreaker
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|LENIENT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|lenient
argument_list|)
expr_stmt|;
if|if
condition|(
name|cutoffFrequency
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|CUTOFF_FREQUENCY_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|cutoffFrequency
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|ZERO_TERMS_QUERY_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|zeroTermsQuery
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printBoostAndQueryName
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|MultiMatchQueryBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldsBoosts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MultiMatchQueryBuilder
operator|.
name|Type
name|type
init|=
name|DEFAULT_TYPE
decl_stmt|;
name|String
name|analyzer
init|=
literal|null
decl_stmt|;
name|int
name|slop
init|=
name|DEFAULT_PHRASE_SLOP
decl_stmt|;
name|Fuzziness
name|fuzziness
init|=
literal|null
decl_stmt|;
name|int
name|prefixLength
init|=
name|DEFAULT_PREFIX_LENGTH
decl_stmt|;
name|int
name|maxExpansions
init|=
name|DEFAULT_MAX_EXPANSIONS
decl_stmt|;
name|Operator
name|operator
init|=
name|DEFAULT_OPERATOR
decl_stmt|;
name|String
name|minimumShouldMatch
init|=
literal|null
decl_stmt|;
name|String
name|fuzzyRewrite
init|=
literal|null
decl_stmt|;
name|Boolean
name|useDisMax
init|=
literal|null
decl_stmt|;
name|Float
name|tieBreaker
init|=
literal|null
decl_stmt|;
name|Float
name|cutoffFrequency
init|=
literal|null
decl_stmt|;
name|boolean
name|lenient
init|=
name|DEFAULT_LENIENCY
decl_stmt|;
name|MatchQuery
operator|.
name|ZeroTermsQuery
name|zeroTermsQuery
init|=
name|DEFAULT_ZERO_TERMS_QUERY
decl_stmt|;
name|float
name|boost
init|=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
decl_stmt|;
name|String
name|queryName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FIELDS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|parseFieldAndBoost
argument_list|(
name|parser
argument_list|,
name|fieldsBoosts
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
name|parseFieldAndBoost
argument_list|(
name|parser
argument_list|,
name|fieldsBoosts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"["
operator|+
name|NAME
operator|+
literal|"] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|QUERY_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|value
operator|=
name|parser
operator|.
name|objectText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TYPE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|type
operator|=
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|parse
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|,
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANALYZER_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|analyzer
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|AbstractQueryBuilder
operator|.
name|BOOST_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|boost
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SLOP_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|slop
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Fuzziness
operator|.
name|FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|fuzziness
operator|=
name|Fuzziness
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PREFIX_LENGTH_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|prefixLength
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MAX_EXPANSIONS_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|maxExpansions
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OPERATOR_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|operator
operator|=
name|Operator
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MINIMUM_SHOULD_MATCH_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|minimumShouldMatch
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FUZZY_REWRITE_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|fuzzyRewrite
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|USE_DIS_MAX_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|useDisMax
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TIE_BREAKER_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tieBreaker
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CUTOFF_FREQUENCY_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|cutoffFrequency
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LENIENT_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|lenient
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ZERO_TERMS_QUERY_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|String
name|zeroTermsDocs
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"none"
operator|.
name|equalsIgnoreCase
argument_list|(
name|zeroTermsDocs
argument_list|)
condition|)
block|{
name|zeroTermsQuery
operator|=
name|MatchQuery
operator|.
name|ZeroTermsQuery
operator|.
name|NONE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"all"
operator|.
name|equalsIgnoreCase
argument_list|(
name|zeroTermsDocs
argument_list|)
condition|)
block|{
name|zeroTermsQuery
operator|=
name|MatchQuery
operator|.
name|ZeroTermsQuery
operator|.
name|ALL
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Unsupported zero_terms_docs value ["
operator|+
name|zeroTermsDocs
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|AbstractQueryBuilder
operator|.
name|NAME_FIELD
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|queryName
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"["
operator|+
name|NAME
operator|+
literal|"] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"["
operator|+
name|NAME
operator|+
literal|"] unknown token ["
operator|+
name|token
operator|+
literal|"] after ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"No text specified for multi_match query"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldsBoosts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"No fields specified for multi_match query"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fuzziness
operator|!=
literal|null
operator|&&
operator|(
name|type
operator|==
name|Type
operator|.
name|CROSS_FIELDS
operator|||
name|type
operator|==
name|Type
operator|.
name|PHRASE
operator|||
name|type
operator|==
name|Type
operator|.
name|PHRASE_PREFIX
operator|)
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Fuzziness not allowed for type ["
operator|+
name|type
operator|.
name|parseField
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
operator|new
name|MultiMatchQueryBuilder
argument_list|(
name|value
argument_list|)
operator|.
name|fields
argument_list|(
name|fieldsBoosts
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
operator|.
name|analyzer
argument_list|(
name|analyzer
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
name|cutoffFrequency
argument_list|)
operator|.
name|fuzziness
argument_list|(
name|fuzziness
argument_list|)
operator|.
name|fuzzyRewrite
argument_list|(
name|fuzzyRewrite
argument_list|)
operator|.
name|useDisMax
argument_list|(
name|useDisMax
argument_list|)
operator|.
name|lenient
argument_list|(
name|lenient
argument_list|)
operator|.
name|maxExpansions
argument_list|(
name|maxExpansions
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
name|minimumShouldMatch
argument_list|)
operator|.
name|operator
argument_list|(
name|operator
argument_list|)
operator|.
name|prefixLength
argument_list|(
name|prefixLength
argument_list|)
operator|.
name|slop
argument_list|(
name|slop
argument_list|)
operator|.
name|tieBreaker
argument_list|(
name|tieBreaker
argument_list|)
operator|.
name|zeroTermsQuery
argument_list|(
name|zeroTermsQuery
argument_list|)
operator|.
name|boost
argument_list|(
name|boost
argument_list|)
operator|.
name|queryName
argument_list|(
name|queryName
argument_list|)
return|;
block|}
DECL|method|parseFieldAndBoost
specifier|private
specifier|static
name|void
name|parseFieldAndBoost
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldsBoosts
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fField
init|=
literal|null
decl_stmt|;
name|Float
name|fBoost
init|=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
decl_stmt|;
name|char
index|[]
name|fieldText
init|=
name|parser
operator|.
name|textCharacters
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|parser
operator|.
name|textOffset
argument_list|()
operator|+
name|parser
operator|.
name|textLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|parser
operator|.
name|textOffset
argument_list|()
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fieldText
index|[
name|i
index|]
operator|==
literal|'^'
condition|)
block|{
name|int
name|relativeLocation
init|=
name|i
operator|-
name|parser
operator|.
name|textOffset
argument_list|()
decl_stmt|;
name|fField
operator|=
operator|new
name|String
argument_list|(
name|fieldText
argument_list|,
name|parser
operator|.
name|textOffset
argument_list|()
argument_list|,
name|relativeLocation
argument_list|)
expr_stmt|;
name|fBoost
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
operator|new
name|String
argument_list|(
name|fieldText
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|parser
operator|.
name|textLength
argument_list|()
operator|-
name|relativeLocation
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|fField
operator|==
literal|null
condition|)
block|{
name|fField
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
name|fieldsBoosts
operator|.
name|put
argument_list|(
name|fField
argument_list|,
name|fBoost
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|doToQuery
specifier|protected
name|Query
name|doToQuery
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|MultiMatchQuery
name|multiMatchQuery
init|=
operator|new
name|MultiMatchQuery
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|getIndexAnalyzers
argument_list|()
operator|.
name|get
argument_list|(
name|analyzer
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryShardException
argument_list|(
name|context
argument_list|,
literal|"["
operator|+
name|NAME
operator|+
literal|"] analyzer ["
operator|+
name|analyzer
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
name|multiMatchQuery
operator|.
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
block|}
name|multiMatchQuery
operator|.
name|setPhraseSlop
argument_list|(
name|slop
argument_list|)
expr_stmt|;
if|if
condition|(
name|fuzziness
operator|!=
literal|null
condition|)
block|{
name|multiMatchQuery
operator|.
name|setFuzziness
argument_list|(
name|fuzziness
argument_list|)
expr_stmt|;
block|}
name|multiMatchQuery
operator|.
name|setFuzzyPrefixLength
argument_list|(
name|prefixLength
argument_list|)
expr_stmt|;
name|multiMatchQuery
operator|.
name|setMaxExpansions
argument_list|(
name|maxExpansions
argument_list|)
expr_stmt|;
name|multiMatchQuery
operator|.
name|setOccur
argument_list|(
name|operator
operator|.
name|toBooleanClauseOccur
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fuzzyRewrite
operator|!=
literal|null
condition|)
block|{
name|multiMatchQuery
operator|.
name|setFuzzyRewriteMethod
argument_list|(
name|QueryParsers
operator|.
name|parseRewriteMethod
argument_list|(
name|context
operator|.
name|getParseFieldMatcher
argument_list|()
argument_list|,
name|fuzzyRewrite
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tieBreaker
operator|!=
literal|null
condition|)
block|{
name|multiMatchQuery
operator|.
name|setTieBreaker
argument_list|(
name|tieBreaker
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cutoffFrequency
operator|!=
literal|null
condition|)
block|{
name|multiMatchQuery
operator|.
name|setCommonTermsCutoff
argument_list|(
name|cutoffFrequency
argument_list|)
expr_stmt|;
block|}
name|multiMatchQuery
operator|.
name|setLenient
argument_list|(
name|lenient
argument_list|)
expr_stmt|;
name|multiMatchQuery
operator|.
name|setZeroTermsQuery
argument_list|(
name|zeroTermsQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDisMax
operator|!=
literal|null
condition|)
block|{
comment|// backwards foobar
name|boolean
name|typeUsesDismax
init|=
name|type
operator|.
name|tieBreaker
argument_list|()
operator|!=
literal|1.0f
decl_stmt|;
if|if
condition|(
name|typeUsesDismax
operator|!=
name|useDisMax
condition|)
block|{
if|if
condition|(
name|useDisMax
operator|&&
name|tieBreaker
operator|==
literal|null
condition|)
block|{
name|multiMatchQuery
operator|.
name|setTieBreaker
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multiMatchQuery
operator|.
name|setTieBreaker
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|newFieldsBoosts
init|=
name|handleFieldsMatchPattern
argument_list|(
name|context
operator|.
name|getMapperService
argument_list|()
argument_list|,
name|fieldsBoosts
argument_list|)
decl_stmt|;
return|return
name|multiMatchQuery
operator|.
name|parse
argument_list|(
name|type
argument_list|,
name|newFieldsBoosts
argument_list|,
name|value
argument_list|,
name|minimumShouldMatch
argument_list|)
return|;
block|}
DECL|method|handleFieldsMatchPattern
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|handleFieldsMatchPattern
parameter_list|(
name|MapperService
name|mapperService
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldsBoosts
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|newFieldsBoosts
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldBoost
range|:
name|fieldsBoosts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fField
init|=
name|fieldBoost
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Float
name|fBoost
init|=
name|fieldBoost
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|fField
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|mapperService
operator|.
name|simpleMatchToIndexNames
argument_list|(
name|fField
argument_list|)
control|)
block|{
name|newFieldsBoosts
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|fBoost
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|newFieldsBoosts
operator|.
name|put
argument_list|(
name|fField
argument_list|,
name|fBoost
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newFieldsBoosts
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|value
argument_list|,
name|fieldsBoosts
argument_list|,
name|type
argument_list|,
name|operator
argument_list|,
name|analyzer
argument_list|,
name|slop
argument_list|,
name|fuzziness
argument_list|,
name|prefixLength
argument_list|,
name|maxExpansions
argument_list|,
name|minimumShouldMatch
argument_list|,
name|fuzzyRewrite
argument_list|,
name|useDisMax
argument_list|,
name|tieBreaker
argument_list|,
name|lenient
argument_list|,
name|cutoffFrequency
argument_list|,
name|zeroTermsQuery
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|MultiMatchQueryBuilder
name|other
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|value
argument_list|,
name|other
operator|.
name|value
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fieldsBoosts
argument_list|,
name|other
operator|.
name|fieldsBoosts
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|type
argument_list|,
name|other
operator|.
name|type
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|operator
argument_list|,
name|other
operator|.
name|operator
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|analyzer
argument_list|,
name|other
operator|.
name|analyzer
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|slop
argument_list|,
name|other
operator|.
name|slop
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fuzziness
argument_list|,
name|other
operator|.
name|fuzziness
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|prefixLength
argument_list|,
name|other
operator|.
name|prefixLength
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|maxExpansions
argument_list|,
name|other
operator|.
name|maxExpansions
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minimumShouldMatch
argument_list|,
name|other
operator|.
name|minimumShouldMatch
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fuzzyRewrite
argument_list|,
name|other
operator|.
name|fuzzyRewrite
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|useDisMax
argument_list|,
name|other
operator|.
name|useDisMax
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|tieBreaker
argument_list|,
name|other
operator|.
name|tieBreaker
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|lenient
argument_list|,
name|other
operator|.
name|lenient
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|cutoffFrequency
argument_list|,
name|other
operator|.
name|cutoffFrequency
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|zeroTermsQuery
argument_list|,
name|other
operator|.
name|zeroTermsQuery
argument_list|)
return|;
block|}
block|}
end_class

end_unit

