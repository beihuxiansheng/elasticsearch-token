begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ToParentBlockJoinQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
operator|.
name|InnerHitsQueryParserHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
operator|.
name|NestedInnerQueryParseSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|innerhits
operator|.
name|InnerHitsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SubSearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|NestedQueryParser
specifier|public
class|class
name|NestedQueryParser
implements|implements
name|QueryParser
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"nested"
decl_stmt|;
DECL|field|FILTER_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|FILTER_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"filter"
argument_list|)
operator|.
name|withAllDeprecated
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
DECL|field|innerHitsQueryParserHelper
specifier|private
specifier|final
name|InnerHitsQueryParserHelper
name|innerHitsQueryParserHelper
decl_stmt|;
annotation|@
name|Inject
DECL|method|NestedQueryParser
specifier|public
name|NestedQueryParser
parameter_list|(
name|InnerHitsQueryParserHelper
name|innerHitsQueryParserHelper
parameter_list|)
block|{
name|this
operator|.
name|innerHitsQueryParserHelper
operator|=
name|innerHitsQueryParserHelper
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|names
specifier|public
name|String
index|[]
name|names
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|NAME
block|,
name|Strings
operator|.
name|toCamelCase
argument_list|(
name|NAME
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|QueryParsingException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
specifier|final
name|ToBlockJoinQueryBuilder
name|builder
init|=
operator|new
name|ToBlockJoinQueryBuilder
argument_list|(
name|parseContext
argument_list|)
decl_stmt|;
name|float
name|boost
init|=
literal|1.0f
decl_stmt|;
name|ScoreMode
name|scoreMode
init|=
name|ScoreMode
operator|.
name|Avg
decl_stmt|;
name|String
name|queryName
init|=
literal|null
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
literal|"query"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|query
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FILTER_FIELD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|filter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"inner_hits"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setInnerHits
argument_list|(
name|innerHitsQueryParserHelper
operator|.
name|parse
argument_list|(
name|parseContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|parseContext
argument_list|,
literal|"[nested] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"path"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setPath
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boost"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|boost
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"score_mode"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"scoreMode"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|String
name|sScoreMode
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"avg"
operator|.
name|equals
argument_list|(
name|sScoreMode
argument_list|)
condition|)
block|{
name|scoreMode
operator|=
name|ScoreMode
operator|.
name|Avg
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"min"
operator|.
name|equals
argument_list|(
name|sScoreMode
argument_list|)
condition|)
block|{
name|scoreMode
operator|=
name|ScoreMode
operator|.
name|Min
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"max"
operator|.
name|equals
argument_list|(
name|sScoreMode
argument_list|)
condition|)
block|{
name|scoreMode
operator|=
name|ScoreMode
operator|.
name|Max
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"total"
operator|.
name|equals
argument_list|(
name|sScoreMode
argument_list|)
operator|||
literal|"sum"
operator|.
name|equals
argument_list|(
name|sScoreMode
argument_list|)
condition|)
block|{
name|scoreMode
operator|=
name|ScoreMode
operator|.
name|Total
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"none"
operator|.
name|equals
argument_list|(
name|sScoreMode
argument_list|)
condition|)
block|{
name|scoreMode
operator|=
name|ScoreMode
operator|.
name|None
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|parseContext
argument_list|,
literal|"illegal score_mode for nested query ["
operator|+
name|sScoreMode
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"_name"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|queryName
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|parseContext
argument_list|,
literal|"[nested] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
name|builder
operator|.
name|setScoreMode
argument_list|(
name|scoreMode
argument_list|)
expr_stmt|;
name|ToParentBlockJoinQuery
name|joinQuery
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|joinQuery
operator|!=
literal|null
condition|)
block|{
name|joinQuery
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryName
operator|!=
literal|null
condition|)
block|{
name|parseContext
operator|.
name|addNamedQuery
argument_list|(
name|queryName
argument_list|,
name|joinQuery
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|joinQuery
return|;
block|}
DECL|class|ToBlockJoinQueryBuilder
specifier|public
specifier|static
class|class
name|ToBlockJoinQueryBuilder
extends|extends
name|NestedInnerQueryParseSupport
block|{
DECL|field|scoreMode
specifier|private
name|ScoreMode
name|scoreMode
decl_stmt|;
DECL|field|innerHits
specifier|private
name|Tuple
argument_list|<
name|String
argument_list|,
name|SubSearchContext
argument_list|>
name|innerHits
decl_stmt|;
DECL|method|ToBlockJoinQueryBuilder
specifier|public
name|ToBlockJoinQueryBuilder
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|parseContext
argument_list|)
expr_stmt|;
block|}
DECL|method|setScoreMode
specifier|public
name|void
name|setScoreMode
parameter_list|(
name|ScoreMode
name|scoreMode
parameter_list|)
block|{
name|this
operator|.
name|scoreMode
operator|=
name|scoreMode
expr_stmt|;
block|}
DECL|method|setInnerHits
specifier|public
name|void
name|setInnerHits
parameter_list|(
name|Tuple
argument_list|<
name|String
argument_list|,
name|SubSearchContext
argument_list|>
name|innerHits
parameter_list|)
block|{
name|this
operator|.
name|innerHits
operator|=
name|innerHits
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|build
specifier|public
name|ToParentBlockJoinQuery
name|build
parameter_list|()
throws|throws
name|IOException
block|{
name|Query
name|innerQuery
decl_stmt|;
if|if
condition|(
name|queryFound
condition|)
block|{
name|innerQuery
operator|=
name|getInnerQuery
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filterFound
condition|)
block|{
name|Query
name|innerFilter
init|=
name|getInnerFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|innerFilter
operator|!=
literal|null
condition|)
block|{
name|innerQuery
operator|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|getInnerFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|innerQuery
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|parseContext
argument_list|,
literal|"[nested] requires either 'query' or 'filter' field"
argument_list|)
throw|;
block|}
if|if
condition|(
name|innerHits
operator|!=
literal|null
condition|)
block|{
name|InnerHitsContext
operator|.
name|NestedInnerHits
name|nestedInnerHits
init|=
operator|new
name|InnerHitsContext
operator|.
name|NestedInnerHits
argument_list|(
name|innerHits
operator|.
name|v2
argument_list|()
argument_list|,
name|innerQuery
argument_list|,
literal|null
argument_list|,
name|getParentObjectMapper
argument_list|()
argument_list|,
name|nestedObjectMapper
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|innerHits
operator|.
name|v1
argument_list|()
operator|!=
literal|null
condition|?
name|innerHits
operator|.
name|v1
argument_list|()
else|:
name|path
decl_stmt|;
name|parseContext
operator|.
name|addInnerHits
argument_list|(
name|name
argument_list|,
name|nestedInnerHits
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|innerQuery
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ToParentBlockJoinQuery
argument_list|(
name|Queries
operator|.
name|filtered
argument_list|(
name|innerQuery
argument_list|,
name|childFilter
argument_list|)
argument_list|,
name|parentFilter
argument_list|,
name|scoreMode
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

