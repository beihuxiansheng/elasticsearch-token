begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|DelegatingAnalyzerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SlowCompositeReaderWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
operator|.
name|MemoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|FieldNameAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapperForType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
operator|.
name|PercolatorFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
operator|.
name|PercolatorQueryCache
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SourceToParse
operator|.
name|source
import|;
end_import

begin_class
DECL|class|PercolatorQueryBuilder
specifier|public
class|class
name|PercolatorQueryBuilder
extends|extends
name|AbstractQueryBuilder
argument_list|<
name|PercolatorQueryBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"percolator"
decl_stmt|;
DECL|field|QUERY_NAME_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|QUERY_NAME_FIELD
init|=
operator|new
name|ParseField
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
DECL|field|DOCUMENT_FIELD
specifier|static
specifier|final
name|ParseField
name|DOCUMENT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"document"
argument_list|)
decl_stmt|;
DECL|field|DOCUMENT_TYPE_FIELD
specifier|private
specifier|static
specifier|final
name|ParseField
name|DOCUMENT_TYPE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"document_type"
argument_list|)
decl_stmt|;
DECL|field|INDEXED_DOCUMENT_FIELD_INDEX
specifier|private
specifier|static
specifier|final
name|ParseField
name|INDEXED_DOCUMENT_FIELD_INDEX
init|=
operator|new
name|ParseField
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
DECL|field|INDEXED_DOCUMENT_FIELD_TYPE
specifier|private
specifier|static
specifier|final
name|ParseField
name|INDEXED_DOCUMENT_FIELD_TYPE
init|=
operator|new
name|ParseField
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
DECL|field|INDEXED_DOCUMENT_FIELD_ID
specifier|private
specifier|static
specifier|final
name|ParseField
name|INDEXED_DOCUMENT_FIELD_ID
init|=
operator|new
name|ParseField
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
DECL|field|INDEXED_DOCUMENT_FIELD_ROUTING
specifier|private
specifier|static
specifier|final
name|ParseField
name|INDEXED_DOCUMENT_FIELD_ROUTING
init|=
operator|new
name|ParseField
argument_list|(
literal|"routing"
argument_list|)
decl_stmt|;
DECL|field|INDEXED_DOCUMENT_FIELD_PREFERENCE
specifier|private
specifier|static
specifier|final
name|ParseField
name|INDEXED_DOCUMENT_FIELD_PREFERENCE
init|=
operator|new
name|ParseField
argument_list|(
literal|"preference"
argument_list|)
decl_stmt|;
DECL|field|INDEXED_DOCUMENT_FIELD_VERSION
specifier|private
specifier|static
specifier|final
name|ParseField
name|INDEXED_DOCUMENT_FIELD_VERSION
init|=
operator|new
name|ParseField
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
DECL|field|documentType
specifier|private
specifier|final
name|String
name|documentType
decl_stmt|;
DECL|field|document
specifier|private
specifier|final
name|BytesReference
name|document
decl_stmt|;
DECL|field|indexedDocumentIndex
specifier|private
specifier|final
name|String
name|indexedDocumentIndex
decl_stmt|;
DECL|field|indexedDocumentType
specifier|private
specifier|final
name|String
name|indexedDocumentType
decl_stmt|;
DECL|field|indexedDocumentId
specifier|private
specifier|final
name|String
name|indexedDocumentId
decl_stmt|;
DECL|field|indexedDocumentRouting
specifier|private
specifier|final
name|String
name|indexedDocumentRouting
decl_stmt|;
DECL|field|indexedDocumentPreference
specifier|private
specifier|final
name|String
name|indexedDocumentPreference
decl_stmt|;
DECL|field|indexedDocumentVersion
specifier|private
specifier|final
name|Long
name|indexedDocumentVersion
decl_stmt|;
DECL|method|PercolatorQueryBuilder
specifier|public
name|PercolatorQueryBuilder
parameter_list|(
name|String
name|documentType
parameter_list|,
name|BytesReference
name|document
parameter_list|)
block|{
if|if
condition|(
name|documentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[document_type] is a required argument"
argument_list|)
throw|;
block|}
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[document] is a required argument"
argument_list|)
throw|;
block|}
name|this
operator|.
name|documentType
operator|=
name|documentType
expr_stmt|;
name|this
operator|.
name|document
operator|=
name|document
expr_stmt|;
name|indexedDocumentIndex
operator|=
literal|null
expr_stmt|;
name|indexedDocumentType
operator|=
literal|null
expr_stmt|;
name|indexedDocumentId
operator|=
literal|null
expr_stmt|;
name|indexedDocumentRouting
operator|=
literal|null
expr_stmt|;
name|indexedDocumentPreference
operator|=
literal|null
expr_stmt|;
name|indexedDocumentVersion
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|PercolatorQueryBuilder
specifier|public
name|PercolatorQueryBuilder
parameter_list|(
name|String
name|documentType
parameter_list|,
name|String
name|indexedDocumentIndex
parameter_list|,
name|String
name|indexedDocumentType
parameter_list|,
name|String
name|indexedDocumentId
parameter_list|,
name|String
name|indexedDocumentRouting
parameter_list|,
name|String
name|indexedDocumentPreference
parameter_list|,
name|Long
name|indexedDocumentVersion
parameter_list|)
block|{
if|if
condition|(
name|documentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[document_type] is a required argument"
argument_list|)
throw|;
block|}
if|if
condition|(
name|indexedDocumentIndex
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[index] is a required argument"
argument_list|)
throw|;
block|}
if|if
condition|(
name|indexedDocumentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[type] is a required argument"
argument_list|)
throw|;
block|}
if|if
condition|(
name|indexedDocumentId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[id] is a required argument"
argument_list|)
throw|;
block|}
name|this
operator|.
name|documentType
operator|=
name|documentType
expr_stmt|;
name|this
operator|.
name|indexedDocumentIndex
operator|=
name|indexedDocumentIndex
expr_stmt|;
name|this
operator|.
name|indexedDocumentType
operator|=
name|indexedDocumentType
expr_stmt|;
name|this
operator|.
name|indexedDocumentId
operator|=
name|indexedDocumentId
expr_stmt|;
name|this
operator|.
name|indexedDocumentRouting
operator|=
name|indexedDocumentRouting
expr_stmt|;
name|this
operator|.
name|indexedDocumentPreference
operator|=
name|indexedDocumentPreference
expr_stmt|;
name|this
operator|.
name|indexedDocumentVersion
operator|=
name|indexedDocumentVersion
expr_stmt|;
name|this
operator|.
name|document
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|PercolatorQueryBuilder
specifier|public
name|PercolatorQueryBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|documentType
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|indexedDocumentIndex
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|indexedDocumentType
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|indexedDocumentId
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|indexedDocumentRouting
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|indexedDocumentPreference
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|indexedDocumentVersion
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|indexedDocumentVersion
operator|=
literal|null
expr_stmt|;
block|}
name|document
operator|=
name|in
operator|.
name|readOptionalBytesReference
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|documentType
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|indexedDocumentIndex
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|indexedDocumentType
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|indexedDocumentId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|indexedDocumentRouting
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|indexedDocumentPreference
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexedDocumentVersion
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|indexedDocumentVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalBytesReference
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|DOCUMENT_TYPE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|documentType
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|XContentType
name|contentType
init|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|document
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
name|builder
operator|.
name|contentType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
name|DOCUMENT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|contentType
argument_list|)
operator|.
name|createParser
argument_list|(
name|document
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|DOCUMENT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|indexedDocumentIndex
operator|!=
literal|null
operator|||
name|indexedDocumentType
operator|!=
literal|null
operator|||
name|indexedDocumentId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|indexedDocumentIndex
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|INDEXED_DOCUMENT_FIELD_INDEX
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|indexedDocumentIndex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexedDocumentType
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|INDEXED_DOCUMENT_FIELD_TYPE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|indexedDocumentType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexedDocumentId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|INDEXED_DOCUMENT_FIELD_ID
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|indexedDocumentId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexedDocumentRouting
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|INDEXED_DOCUMENT_FIELD_ROUTING
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|indexedDocumentRouting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexedDocumentPreference
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|INDEXED_DOCUMENT_FIELD_PREFERENCE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|indexedDocumentPreference
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexedDocumentVersion
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|INDEXED_DOCUMENT_FIELD_VERSION
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|indexedDocumentVersion
argument_list|)
expr_stmt|;
block|}
block|}
name|printBoostAndQueryName
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|PercolatorQueryBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
name|float
name|boost
init|=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
decl_stmt|;
name|String
name|documentType
init|=
literal|null
decl_stmt|;
name|String
name|indexedDocumentIndex
init|=
literal|null
decl_stmt|;
name|String
name|indexedDocumentType
init|=
literal|null
decl_stmt|;
name|String
name|indexedDocumentId
init|=
literal|null
decl_stmt|;
name|String
name|indexedDocumentRouting
init|=
literal|null
decl_stmt|;
name|String
name|indexedDocumentPreference
init|=
literal|null
decl_stmt|;
name|Long
name|indexedDocumentVersion
init|=
literal|null
decl_stmt|;
name|BytesReference
name|source
init|=
literal|null
decl_stmt|;
name|String
name|queryName
init|=
literal|null
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|DOCUMENT_FIELD
argument_list|)
condition|)
block|{
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
init|)
block|{
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|builder
operator|.
name|flush
argument_list|()
expr_stmt|;
name|source
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"["
operator|+
name|PercolatorQueryBuilder
operator|.
name|NAME
operator|+
literal|"] query does not support ["
operator|+
name|token
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|DOCUMENT_TYPE_FIELD
argument_list|)
condition|)
block|{
name|documentType
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|INDEXED_DOCUMENT_FIELD_INDEX
argument_list|)
condition|)
block|{
name|indexedDocumentIndex
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|INDEXED_DOCUMENT_FIELD_TYPE
argument_list|)
condition|)
block|{
name|indexedDocumentType
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|INDEXED_DOCUMENT_FIELD_ID
argument_list|)
condition|)
block|{
name|indexedDocumentId
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|INDEXED_DOCUMENT_FIELD_ROUTING
argument_list|)
condition|)
block|{
name|indexedDocumentRouting
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|INDEXED_DOCUMENT_FIELD_PREFERENCE
argument_list|)
condition|)
block|{
name|indexedDocumentPreference
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|INDEXED_DOCUMENT_FIELD_VERSION
argument_list|)
condition|)
block|{
name|indexedDocumentVersion
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|AbstractQueryBuilder
operator|.
name|BOOST_FIELD
argument_list|)
condition|)
block|{
name|boost
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|AbstractQueryBuilder
operator|.
name|NAME_FIELD
argument_list|)
condition|)
block|{
name|queryName
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"["
operator|+
name|PercolatorQueryBuilder
operator|.
name|NAME
operator|+
literal|"] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"["
operator|+
name|PercolatorQueryBuilder
operator|.
name|NAME
operator|+
literal|"] query does not support ["
operator|+
name|token
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|documentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|PercolatorQueryBuilder
operator|.
name|NAME
operator|+
literal|"] query is missing required ["
operator|+
name|DOCUMENT_TYPE_FIELD
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] parameter"
argument_list|)
throw|;
block|}
name|PercolatorQueryBuilder
name|queryBuilder
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|queryBuilder
operator|=
operator|new
name|PercolatorQueryBuilder
argument_list|(
name|documentType
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexedDocumentId
operator|!=
literal|null
condition|)
block|{
name|queryBuilder
operator|=
operator|new
name|PercolatorQueryBuilder
argument_list|(
name|documentType
argument_list|,
name|indexedDocumentIndex
argument_list|,
name|indexedDocumentType
argument_list|,
name|indexedDocumentId
argument_list|,
name|indexedDocumentRouting
argument_list|,
name|indexedDocumentPreference
argument_list|,
name|indexedDocumentVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|PercolatorQueryBuilder
operator|.
name|NAME
operator|+
literal|"] query, nothing to percolate"
argument_list|)
throw|;
block|}
name|queryBuilder
operator|.
name|queryName
argument_list|(
name|queryName
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|boost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
return|return
name|queryBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|PercolatorQueryBuilder
name|other
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|documentType
argument_list|,
name|other
operator|.
name|documentType
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|document
argument_list|,
name|other
operator|.
name|document
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|indexedDocumentIndex
argument_list|,
name|other
operator|.
name|indexedDocumentIndex
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|indexedDocumentType
argument_list|,
name|other
operator|.
name|indexedDocumentType
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|indexedDocumentId
argument_list|,
name|other
operator|.
name|indexedDocumentId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|documentType
argument_list|,
name|document
argument_list|,
name|indexedDocumentIndex
argument_list|,
name|indexedDocumentType
argument_list|,
name|indexedDocumentId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|doRewrite
specifier|protected
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|doRewrite
parameter_list|(
name|QueryRewriteContext
name|queryShardContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
name|GetRequest
name|getRequest
init|=
operator|new
name|GetRequest
argument_list|(
name|indexedDocumentIndex
argument_list|,
name|indexedDocumentType
argument_list|,
name|indexedDocumentId
argument_list|)
decl_stmt|;
name|getRequest
operator|.
name|preference
argument_list|(
literal|"_local"
argument_list|)
expr_stmt|;
name|getRequest
operator|.
name|routing
argument_list|(
name|indexedDocumentRouting
argument_list|)
expr_stmt|;
name|getRequest
operator|.
name|preference
argument_list|(
name|indexedDocumentPreference
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexedDocumentVersion
operator|!=
literal|null
condition|)
block|{
name|getRequest
operator|.
name|version
argument_list|(
name|indexedDocumentVersion
argument_list|)
expr_stmt|;
block|}
name|GetResponse
name|getResponse
init|=
name|queryShardContext
operator|.
name|getClient
argument_list|()
operator|.
name|get
argument_list|(
name|getRequest
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|getResponse
operator|.
name|isExists
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"indexed document [{}/{}/{}] couldn't be found"
argument_list|,
name|indexedDocumentIndex
argument_list|,
name|indexedDocumentType
argument_list|,
name|indexedDocumentId
argument_list|)
throw|;
block|}
return|return
operator|new
name|PercolatorQueryBuilder
argument_list|(
name|documentType
argument_list|,
name|getResponse
operator|.
name|getSourceAsBytesRef
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doToQuery
specifier|protected
name|Query
name|doToQuery
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|indexedDocumentIndex
operator|!=
literal|null
operator|||
name|indexedDocumentType
operator|!=
literal|null
operator|||
name|indexedDocumentId
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"query builder must be rewritten first"
argument_list|)
throw|;
block|}
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"nothing to percolator"
argument_list|)
throw|;
block|}
name|MapperService
name|mapperService
init|=
name|context
operator|.
name|getMapperService
argument_list|()
decl_stmt|;
name|DocumentMapperForType
name|docMapperForType
init|=
name|mapperService
operator|.
name|documentMapperWithAutoCreate
argument_list|(
name|documentType
argument_list|)
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|docMapperForType
operator|.
name|getDocumentMapper
argument_list|()
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|docMapper
operator|.
name|parse
argument_list|(
name|source
argument_list|(
name|document
argument_list|)
operator|.
name|index
argument_list|(
name|context
operator|.
name|index
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|id
argument_list|(
literal|"_temp_id"
argument_list|)
operator|.
name|type
argument_list|(
name|documentType
argument_list|)
argument_list|)
decl_stmt|;
name|FieldNameAnalyzer
name|fieldNameAnalyzer
init|=
operator|(
name|FieldNameAnalyzer
operator|)
name|docMapper
operator|.
name|mappers
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
decl_stmt|;
comment|// Need to this custom impl because FieldNameAnalyzer is strict and the percolator sometimes isn't when
comment|// 'index.percolator.map_unmapped_fields_as_string' is enabled:
name|Analyzer
name|analyzer
init|=
operator|new
name|DelegatingAnalyzerWrapper
argument_list|(
name|Analyzer
operator|.
name|PER_FIELD_REUSE_STRATEGY
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Analyzer
name|getWrappedAnalyzer
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Analyzer
name|analyzer
init|=
name|fieldNameAnalyzer
operator|.
name|analyzers
argument_list|()
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
return|return
name|analyzer
return|;
block|}
else|else
block|{
return|return
name|context
operator|.
name|getAnalysisService
argument_list|()
operator|.
name|defaultIndexAnalyzer
argument_list|()
return|;
block|}
block|}
block|}
decl_stmt|;
specifier|final
name|IndexSearcher
name|docSearcher
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
assert|assert
name|docMapper
operator|.
name|hasNestedObjects
argument_list|()
assert|;
name|docSearcher
operator|=
name|createMultiDocumentSearcher
argument_list|(
name|analyzer
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MemoryIndex
name|memoryIndex
init|=
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|docSearcher
operator|=
name|memoryIndex
operator|.
name|createSearcher
argument_list|()
expr_stmt|;
name|docSearcher
operator|.
name|setQueryCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|PercolatorQueryCache
name|registry
init|=
name|context
operator|.
name|getPercolatorQueryCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|registry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryShardException
argument_list|(
name|context
argument_list|,
literal|"no percolator query registry"
argument_list|)
throw|;
block|}
name|Query
name|percolateTypeQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|PercolatorFieldMapper
operator|.
name|TYPE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|PercolatorQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|PercolatorQuery
operator|.
name|Builder
argument_list|(
name|documentType
argument_list|,
name|registry
argument_list|,
name|document
argument_list|,
name|docSearcher
argument_list|,
name|percolateTypeQuery
argument_list|)
decl_stmt|;
name|Settings
name|indexSettings
init|=
name|registry
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getSettings
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexSettings
operator|.
name|getAsVersion
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
literal|null
argument_list|)
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
condition|)
block|{
name|builder
operator|.
name|extractQueryTermsQuery
argument_list|(
name|PercolatorFieldMapper
operator|.
name|EXTRACTED_TERMS_FULL_FIELD_NAME
argument_list|,
name|PercolatorFieldMapper
operator|.
name|UNKNOWN_QUERY_FULL_FIELD_NAME
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getDocumentType
specifier|public
name|String
name|getDocumentType
parameter_list|()
block|{
return|return
name|documentType
return|;
block|}
DECL|method|getDocument
specifier|public
name|BytesReference
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
DECL|method|createMultiDocumentSearcher
specifier|private
name|IndexSearcher
name|createMultiDocumentSearcher
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|)
block|{
name|IndexReader
index|[]
name|memoryIndices
init|=
operator|new
name|IndexReader
index|[
name|doc
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|ParseContext
operator|.
name|Document
argument_list|>
name|docs
init|=
name|doc
operator|.
name|docs
argument_list|()
decl_stmt|;
name|int
name|rootDocIndex
init|=
name|docs
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
assert|assert
name|rootDocIndex
operator|>
literal|0
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ParseContext
operator|.
name|Document
name|d
init|=
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|MemoryIndex
name|memoryIndex
init|=
name|MemoryIndex
operator|.
name|fromDocument
argument_list|(
name|d
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|memoryIndices
index|[
name|i
index|]
operator|=
name|memoryIndex
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|MultiReader
name|mReader
init|=
operator|new
name|MultiReader
argument_list|(
name|memoryIndices
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LeafReader
name|slowReader
init|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|mReader
argument_list|)
decl_stmt|;
specifier|final
name|IndexSearcher
name|slowSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|slowReader
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Weight
name|createNormalizedWeight
parameter_list|(
name|Query
name|query
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|Queries
operator|.
name|newNestedFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|createNormalizedWeight
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|slowSearcher
operator|.
name|setQueryCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|slowSearcher
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Failed to create index for percolator with nested document "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

