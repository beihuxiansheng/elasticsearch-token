begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @deprecated Fuzzy queries are not useful enough. This class will be removed with Elasticsearch 4.0. In most cases you may want to use  * a match query with the fuzziness parameter for strings or range queries for numeric and date fields.  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|FuzzyQueryParser
specifier|public
class|class
name|FuzzyQueryParser
implements|implements
name|QueryParser
argument_list|<
name|FuzzyQueryBuilder
argument_list|>
block|{
DECL|field|TERM_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TERM_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
DECL|field|VALUE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|VALUE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
DECL|field|PREFIX_LENGTH_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PREFIX_LENGTH_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"prefix_length"
argument_list|)
decl_stmt|;
DECL|field|MAX_EXPANSIONS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|MAX_EXPANSIONS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_expansions"
argument_list|)
decl_stmt|;
DECL|field|TRANSPOSITIONS_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TRANSPOSITIONS_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"transpositions"
argument_list|)
decl_stmt|;
DECL|field|REWRITE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|REWRITE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"rewrite"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|names
specifier|public
name|String
index|[]
name|names
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|FuzzyQueryBuilder
operator|.
name|NAME
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|fromXContent
specifier|public
name|FuzzyQueryBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"[fuzzy] query malformed, no field"
argument_list|)
throw|;
block|}
name|String
name|fieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
name|Fuzziness
name|fuzziness
init|=
name|FuzzyQueryBuilder
operator|.
name|DEFAULT_FUZZINESS
decl_stmt|;
name|int
name|prefixLength
init|=
name|FuzzyQueryBuilder
operator|.
name|DEFAULT_PREFIX_LENGTH
decl_stmt|;
name|int
name|maxExpansions
init|=
name|FuzzyQueryBuilder
operator|.
name|DEFAULT_MAX_EXPANSIONS
decl_stmt|;
name|boolean
name|transpositions
init|=
name|FuzzyQueryBuilder
operator|.
name|DEFAULT_TRANSPOSITIONS
decl_stmt|;
name|String
name|rewrite
init|=
literal|null
decl_stmt|;
name|String
name|queryName
init|=
literal|null
decl_stmt|;
name|float
name|boost
init|=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
decl_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TERM_FIELD
argument_list|)
condition|)
block|{
name|value
operator|=
name|parser
operator|.
name|objectBytes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|VALUE_FIELD
argument_list|)
condition|)
block|{
name|value
operator|=
name|parser
operator|.
name|objectBytes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|AbstractQueryBuilder
operator|.
name|BOOST_FIELD
argument_list|)
condition|)
block|{
name|boost
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Fuzziness
operator|.
name|FIELD
argument_list|)
condition|)
block|{
name|fuzziness
operator|=
name|Fuzziness
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|PREFIX_LENGTH_FIELD
argument_list|)
condition|)
block|{
name|prefixLength
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|MAX_EXPANSIONS_FIELD
argument_list|)
condition|)
block|{
name|maxExpansions
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TRANSPOSITIONS_FIELD
argument_list|)
condition|)
block|{
name|transpositions
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|REWRITE_FIELD
argument_list|)
condition|)
block|{
name|rewrite
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|AbstractQueryBuilder
operator|.
name|NAME_FIELD
argument_list|)
condition|)
block|{
name|queryName
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"[fuzzy] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|parser
operator|.
name|objectBytes
argument_list|()
expr_stmt|;
comment|// move to the next token
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"no value specified for fuzzy query"
argument_list|)
throw|;
block|}
return|return
operator|new
name|FuzzyQueryBuilder
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
operator|.
name|fuzziness
argument_list|(
name|fuzziness
argument_list|)
operator|.
name|prefixLength
argument_list|(
name|prefixLength
argument_list|)
operator|.
name|maxExpansions
argument_list|(
name|maxExpansions
argument_list|)
operator|.
name|transpositions
argument_list|(
name|transpositions
argument_list|)
operator|.
name|rewrite
argument_list|(
name|rewrite
argument_list|)
operator|.
name|boost
argument_list|(
name|boost
argument_list|)
operator|.
name|queryName
argument_list|(
name|queryName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBuilderPrototype
specifier|public
name|FuzzyQueryBuilder
name|getBuilderPrototype
parameter_list|()
block|{
return|return
name|FuzzyQueryBuilder
operator|.
name|PROTOTYPE
return|;
block|}
block|}
end_class

end_unit

