begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|GeoBoundingBoxQueryParser
specifier|public
class|class
name|GeoBoundingBoxQueryParser
implements|implements
name|QueryParser
argument_list|<
name|GeoBoundingBoxQueryBuilder
argument_list|>
block|{
DECL|field|QUERY_NAME_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|QUERY_NAME_FIELD
init|=
operator|new
name|ParseField
argument_list|(
name|GeoBoundingBoxQueryBuilder
operator|.
name|NAME
argument_list|,
literal|"geo_bbox"
argument_list|)
decl_stmt|;
DECL|field|IGNORE_MALFORMED_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|IGNORE_MALFORMED_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"ignore_malformed"
argument_list|)
decl_stmt|;
DECL|field|TYPE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TYPE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
DECL|field|VALIDATION_METHOD_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|VALIDATION_METHOD_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"validation_method"
argument_list|)
decl_stmt|;
DECL|field|COERCE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|COERCE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"coerce"
argument_list|,
literal|"normalize"
argument_list|)
decl_stmt|;
DECL|field|FIELD_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|FIELD_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
DECL|field|TOP_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TOP_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"top"
argument_list|)
decl_stmt|;
DECL|field|BOTTOM_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|BOTTOM_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"bottom"
argument_list|)
decl_stmt|;
DECL|field|LEFT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|LEFT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"left"
argument_list|)
decl_stmt|;
DECL|field|RIGHT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|RIGHT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"right"
argument_list|)
decl_stmt|;
DECL|field|TOP_LEFT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TOP_LEFT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"top_left"
argument_list|)
decl_stmt|;
DECL|field|BOTTOM_RIGHT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|BOTTOM_RIGHT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"bottom_right"
argument_list|)
decl_stmt|;
DECL|field|TOP_RIGHT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|TOP_RIGHT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"top_right"
argument_list|)
decl_stmt|;
DECL|field|BOTTOM_LEFT_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|BOTTOM_LEFT_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"bottom_left"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|fromXContent
specifier|public
name|GeoBoundingBoxQueryBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
name|double
name|top
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
name|double
name|bottom
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
name|double
name|left
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
name|double
name|right
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
name|float
name|boost
init|=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
decl_stmt|;
name|String
name|queryName
init|=
literal|null
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|boolean
name|coerce
init|=
name|GeoValidationMethod
operator|.
name|DEFAULT_LENIENT_PARSING
decl_stmt|;
name|boolean
name|ignoreMalformed
init|=
name|GeoValidationMethod
operator|.
name|DEFAULT_LENIENT_PARSING
decl_stmt|;
name|GeoValidationMethod
name|validationMethod
init|=
literal|null
decl_stmt|;
name|GeoPoint
name|sparse
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
name|String
name|type
init|=
literal|"memory"
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|fieldName
operator|=
name|currentFieldName
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|parseContext
operator|.
name|isDeprecatedSetting
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
comment|// skip
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FIELD_FIELD
argument_list|)
condition|)
block|{
name|fieldName
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TOP_FIELD
argument_list|)
condition|)
block|{
name|top
operator|=
name|parser
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|BOTTOM_FIELD
argument_list|)
condition|)
block|{
name|bottom
operator|=
name|parser
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|LEFT_FIELD
argument_list|)
condition|)
block|{
name|left
operator|=
name|parser
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|RIGHT_FIELD
argument_list|)
condition|)
block|{
name|right
operator|=
name|parser
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TOP_LEFT_FIELD
argument_list|)
condition|)
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|,
name|sparse
argument_list|)
expr_stmt|;
name|top
operator|=
name|sparse
operator|.
name|getLat
argument_list|()
expr_stmt|;
name|left
operator|=
name|sparse
operator|.
name|getLon
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|BOTTOM_RIGHT_FIELD
argument_list|)
condition|)
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|,
name|sparse
argument_list|)
expr_stmt|;
name|bottom
operator|=
name|sparse
operator|.
name|getLat
argument_list|()
expr_stmt|;
name|right
operator|=
name|sparse
operator|.
name|getLon
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TOP_RIGHT_FIELD
argument_list|)
condition|)
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|,
name|sparse
argument_list|)
expr_stmt|;
name|top
operator|=
name|sparse
operator|.
name|getLat
argument_list|()
expr_stmt|;
name|right
operator|=
name|sparse
operator|.
name|getLon
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|BOTTOM_LEFT_FIELD
argument_list|)
condition|)
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|,
name|sparse
argument_list|)
expr_stmt|;
name|bottom
operator|=
name|sparse
operator|.
name|getLat
argument_list|()
expr_stmt|;
name|left
operator|=
name|sparse
operator|.
name|getLon
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse [{}] query. unexpected field [{}]"
argument_list|,
name|QUERY_NAME_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse [{}] query. field name expected but [{}] found"
argument_list|,
name|QUERY_NAME_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|token
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|AbstractQueryBuilder
operator|.
name|NAME_FIELD
argument_list|)
condition|)
block|{
name|queryName
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|AbstractQueryBuilder
operator|.
name|BOOST_FIELD
argument_list|)
condition|)
block|{
name|boost
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|COERCE_FIELD
argument_list|)
condition|)
block|{
name|coerce
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|coerce
condition|)
block|{
name|ignoreMalformed
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|VALIDATION_METHOD_FIELD
argument_list|)
condition|)
block|{
name|validationMethod
operator|=
name|GeoValidationMethod
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|TYPE_FIELD
argument_list|)
condition|)
block|{
name|type
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|IGNORE_MALFORMED_FIELD
argument_list|)
condition|)
block|{
name|ignoreMalformed
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"failed to parse [{}] query. unexpected field [{}]"
argument_list|,
name|QUERY_NAME_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
block|}
specifier|final
name|GeoPoint
name|topLeft
init|=
name|sparse
operator|.
name|reset
argument_list|(
name|top
argument_list|,
name|left
argument_list|)
decl_stmt|;
comment|//just keep the object
specifier|final
name|GeoPoint
name|bottomRight
init|=
operator|new
name|GeoPoint
argument_list|(
name|bottom
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|GeoBoundingBoxQueryBuilder
name|builder
init|=
operator|new
name|GeoBoundingBoxQueryBuilder
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setCorners
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|)
expr_stmt|;
name|builder
operator|.
name|queryName
argument_list|(
name|queryName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|boost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
name|builder
operator|.
name|type
argument_list|(
name|GeoExecType
operator|.
name|fromString
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|validationMethod
operator|!=
literal|null
condition|)
block|{
comment|// ignore deprecated coerce/ignoreMalformed settings if validationMethod is set
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|validationMethod
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|infer
argument_list|(
name|coerce
argument_list|,
name|ignoreMalformed
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|getBuilderPrototype
specifier|public
name|GeoBoundingBoxQueryBuilder
name|getBuilderPrototype
parameter_list|()
block|{
return|return
name|GeoBoundingBoxQueryBuilder
operator|.
name|PROTOTYPE
return|;
block|}
block|}
end_class

end_unit

