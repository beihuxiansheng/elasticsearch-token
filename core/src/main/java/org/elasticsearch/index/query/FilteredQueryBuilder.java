begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A query that applies a filter to the results of another query.  * @deprecated Use {@link BoolQueryBuilder} instead.  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|FilteredQueryBuilder
specifier|public
class|class
name|FilteredQueryBuilder
extends|extends
name|AbstractQueryBuilder
argument_list|<
name|FilteredQueryBuilder
argument_list|>
block|{
comment|/** Name of the query in the REST API. */
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"filtered"
decl_stmt|;
comment|/** The query to filter. */
DECL|field|queryBuilder
specifier|private
specifier|final
name|QueryBuilder
name|queryBuilder
decl_stmt|;
comment|/** The filter to apply to the query. */
DECL|field|filterBuilder
specifier|private
specifier|final
name|QueryBuilder
name|filterBuilder
decl_stmt|;
DECL|field|PROTOTYPE
specifier|static
specifier|final
name|FilteredQueryBuilder
name|PROTOTYPE
init|=
operator|new
name|FilteredQueryBuilder
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**      * Returns a {@link MatchAllQueryBuilder} instance that will be used as      * default queryBuilder if none is supplied by the user. Feel free to      * set queryName and boost on that instance - it's always a new one.      * */
DECL|method|generateDefaultQuery
specifier|private
specifier|static
name|QueryBuilder
name|generateDefaultQuery
parameter_list|()
block|{
return|return
operator|new
name|MatchAllQueryBuilder
argument_list|()
return|;
block|}
comment|/**      * A query that applies a filter to the results of a match_all query.      * @param filterBuilder The filter to apply on the query (Can be null)      * */
DECL|method|FilteredQueryBuilder
specifier|public
name|FilteredQueryBuilder
parameter_list|(
name|QueryBuilder
name|filterBuilder
parameter_list|)
block|{
name|this
argument_list|(
name|generateDefaultQuery
argument_list|()
argument_list|,
name|filterBuilder
argument_list|)
expr_stmt|;
block|}
comment|/**      * A query that applies a filter to the results of another query.      *      * @param queryBuilder  The query to apply the filter to      * @param filterBuilder The filter to apply on the query (Can be null)      */
DECL|method|FilteredQueryBuilder
specifier|public
name|FilteredQueryBuilder
parameter_list|(
name|QueryBuilder
name|queryBuilder
parameter_list|,
name|QueryBuilder
name|filterBuilder
parameter_list|)
block|{
name|this
operator|.
name|queryBuilder
operator|=
operator|(
name|queryBuilder
operator|!=
literal|null
operator|)
condition|?
name|queryBuilder
else|:
name|generateDefaultQuery
argument_list|()
expr_stmt|;
name|this
operator|.
name|filterBuilder
operator|=
operator|(
name|filterBuilder
operator|!=
literal|null
operator|)
condition|?
name|filterBuilder
else|:
name|EmptyQueryBuilder
operator|.
name|PROTOTYPE
expr_stmt|;
block|}
comment|/** Returns the query to apply the filter to. */
DECL|method|innerQuery
specifier|public
name|QueryBuilder
name|innerQuery
parameter_list|()
block|{
return|return
name|queryBuilder
return|;
block|}
comment|/** Returns the filter to apply to the query results. */
DECL|method|innerFilter
specifier|public
name|QueryBuilder
name|innerFilter
parameter_list|()
block|{
return|return
name|filterBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|FilteredQueryBuilder
name|other
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|queryBuilder
argument_list|,
name|other
operator|.
name|queryBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|filterBuilder
argument_list|,
name|other
operator|.
name|filterBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|public
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|queryBuilder
argument_list|,
name|filterBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doToQuery
specifier|public
name|Query
name|doToQuery
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|QueryShardException
throws|,
name|IOException
block|{
name|Query
name|query
init|=
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Query
name|filter
init|=
name|filterBuilder
operator|.
name|toFilter
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
comment|// Most likely this query was generated from the JSON query DSL - it parsed to an EmptyQueryBuilder so we ignore
comment|// the whole filtered query as there is nothing to filter on. See FilteredQueryParser for an example.
return|return
literal|null
return|;
block|}
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|Queries
operator|.
name|isConstantMatchAllQuery
argument_list|(
name|filter
argument_list|)
condition|)
block|{
comment|// no filter, or match all filter
return|return
name|query
return|;
block|}
elseif|else
if|if
condition|(
name|Queries
operator|.
name|isConstantMatchAllQuery
argument_list|(
name|query
argument_list|)
condition|)
block|{
comment|// if its a match_all query, use constant_score
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|filter
argument_list|)
return|;
block|}
comment|// use a BooleanQuery
return|return
name|Queries
operator|.
name|filtered
argument_list|(
name|query
argument_list|,
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|QueryValidationException
name|validate
parameter_list|()
block|{
name|QueryValidationException
name|validationException
init|=
literal|null
decl_stmt|;
name|validationException
operator|=
name|validateInnerQuery
argument_list|(
name|queryBuilder
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
name|validationException
operator|=
name|validateInnerQuery
argument_list|(
name|filterBuilder
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
return|return
name|validationException
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"filter"
argument_list|)
expr_stmt|;
name|filterBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|printBoostAndQueryName
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|doReadFrom
specifier|public
name|FilteredQueryBuilder
name|doReadFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryBuilder
name|query
init|=
name|in
operator|.
name|readQuery
argument_list|()
decl_stmt|;
name|QueryBuilder
name|filter
init|=
name|in
operator|.
name|readQuery
argument_list|()
decl_stmt|;
name|FilteredQueryBuilder
name|qb
init|=
operator|new
name|FilteredQueryBuilder
argument_list|(
name|query
argument_list|,
name|filter
argument_list|)
decl_stmt|;
return|return
name|qb
return|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|public
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeQuery
argument_list|(
name|queryBuilder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeQuery
argument_list|(
name|filterBuilder
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

