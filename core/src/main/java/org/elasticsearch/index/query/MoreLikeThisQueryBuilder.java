begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|MultiTermVectorsItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|MultiTermVectorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|MultiTermVectorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|TermVectorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|TermVectorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|MoreLikeThisQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|XMoreLikeThis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|KeywordFieldMapper
operator|.
name|KeywordFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|StringFieldMapper
operator|.
name|StringFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TextFieldMapper
operator|.
name|TextFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
operator|.
name|createUidAsBytes
import|;
end_import

begin_comment
comment|/**  * A more like this query that finds documents that are "like" the provided set of document(s).  *  * The documents are provided as a set of strings and/or a list of {@link Item}.  */
end_comment

begin_class
DECL|class|MoreLikeThisQueryBuilder
specifier|public
class|class
name|MoreLikeThisQueryBuilder
extends|extends
name|AbstractQueryBuilder
argument_list|<
name|MoreLikeThisQueryBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"more_like_this"
decl_stmt|;
DECL|field|QUERY_NAME_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|QUERY_NAME_FIELD
init|=
operator|new
name|ParseField
argument_list|(
name|NAME
argument_list|,
literal|"mlt"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_MAX_QUERY_TERMS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_QUERY_TERMS
init|=
name|XMoreLikeThis
operator|.
name|DEFAULT_MAX_QUERY_TERMS
decl_stmt|;
DECL|field|DEFAULT_MIN_TERM_FREQ
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_TERM_FREQ
init|=
name|XMoreLikeThis
operator|.
name|DEFAULT_MIN_TERM_FREQ
decl_stmt|;
DECL|field|DEFAULT_MIN_DOC_FREQ
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_DOC_FREQ
init|=
name|XMoreLikeThis
operator|.
name|DEFAULT_MIN_DOC_FREQ
decl_stmt|;
DECL|field|DEFAULT_MAX_DOC_FREQ
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_DOC_FREQ
init|=
name|XMoreLikeThis
operator|.
name|DEFAULT_MAX_DOC_FREQ
decl_stmt|;
DECL|field|DEFAULT_MIN_WORD_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_WORD_LENGTH
init|=
name|XMoreLikeThis
operator|.
name|DEFAULT_MIN_WORD_LENGTH
decl_stmt|;
DECL|field|DEFAULT_MAX_WORD_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_WORD_LENGTH
init|=
name|XMoreLikeThis
operator|.
name|DEFAULT_MAX_WORD_LENGTH
decl_stmt|;
DECL|field|DEFAULT_MINIMUM_SHOULD_MATCH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_MINIMUM_SHOULD_MATCH
init|=
name|MoreLikeThisQuery
operator|.
name|DEFAULT_MINIMUM_SHOULD_MATCH
decl_stmt|;
DECL|field|DEFAULT_BOOST_TERMS
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_BOOST_TERMS
init|=
literal|0
decl_stmt|;
comment|// no boost terms
DECL|field|DEFAULT_INCLUDE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_INCLUDE
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_FAIL_ON_UNSUPPORTED_FIELDS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_FAIL_ON_UNSUPPORTED_FIELDS
init|=
literal|true
decl_stmt|;
DECL|field|SUPPORTED_FIELD_TYPES
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|MappedFieldType
argument_list|>
argument_list|>
name|SUPPORTED_FIELD_TYPES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|StringFieldType
operator|.
name|class
argument_list|,
name|TextFieldType
operator|.
name|class
argument_list|,
name|KeywordFieldType
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
DECL|interface|Field
specifier|private
interface|interface
name|Field
block|{
DECL|field|FIELDS
name|ParseField
name|FIELDS
init|=
operator|new
name|ParseField
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
DECL|field|LIKE
name|ParseField
name|LIKE
init|=
operator|new
name|ParseField
argument_list|(
literal|"like"
argument_list|)
decl_stmt|;
DECL|field|UNLIKE
name|ParseField
name|UNLIKE
init|=
operator|new
name|ParseField
argument_list|(
literal|"unlike"
argument_list|)
decl_stmt|;
DECL|field|LIKE_TEXT
name|ParseField
name|LIKE_TEXT
init|=
operator|new
name|ParseField
argument_list|(
literal|"like_text"
argument_list|)
operator|.
name|withAllDeprecated
argument_list|(
literal|"like"
argument_list|)
decl_stmt|;
DECL|field|IDS
name|ParseField
name|IDS
init|=
operator|new
name|ParseField
argument_list|(
literal|"ids"
argument_list|)
operator|.
name|withAllDeprecated
argument_list|(
literal|"like"
argument_list|)
decl_stmt|;
DECL|field|DOCS
name|ParseField
name|DOCS
init|=
operator|new
name|ParseField
argument_list|(
literal|"docs"
argument_list|)
operator|.
name|withAllDeprecated
argument_list|(
literal|"like"
argument_list|)
decl_stmt|;
DECL|field|MAX_QUERY_TERMS
name|ParseField
name|MAX_QUERY_TERMS
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_query_terms"
argument_list|)
decl_stmt|;
DECL|field|MIN_TERM_FREQ
name|ParseField
name|MIN_TERM_FREQ
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_term_freq"
argument_list|)
decl_stmt|;
DECL|field|MIN_DOC_FREQ
name|ParseField
name|MIN_DOC_FREQ
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_doc_freq"
argument_list|)
decl_stmt|;
DECL|field|MAX_DOC_FREQ
name|ParseField
name|MAX_DOC_FREQ
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_doc_freq"
argument_list|)
decl_stmt|;
DECL|field|MIN_WORD_LENGTH
name|ParseField
name|MIN_WORD_LENGTH
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_word_length"
argument_list|,
literal|"min_word_len"
argument_list|)
decl_stmt|;
DECL|field|MAX_WORD_LENGTH
name|ParseField
name|MAX_WORD_LENGTH
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_word_length"
argument_list|,
literal|"max_word_len"
argument_list|)
decl_stmt|;
DECL|field|STOP_WORDS
name|ParseField
name|STOP_WORDS
init|=
operator|new
name|ParseField
argument_list|(
literal|"stop_words"
argument_list|)
decl_stmt|;
DECL|field|ANALYZER
name|ParseField
name|ANALYZER
init|=
operator|new
name|ParseField
argument_list|(
literal|"analyzer"
argument_list|)
decl_stmt|;
DECL|field|MINIMUM_SHOULD_MATCH
name|ParseField
name|MINIMUM_SHOULD_MATCH
init|=
operator|new
name|ParseField
argument_list|(
literal|"minimum_should_match"
argument_list|)
decl_stmt|;
DECL|field|BOOST_TERMS
name|ParseField
name|BOOST_TERMS
init|=
operator|new
name|ParseField
argument_list|(
literal|"boost_terms"
argument_list|)
decl_stmt|;
DECL|field|INCLUDE
name|ParseField
name|INCLUDE
init|=
operator|new
name|ParseField
argument_list|(
literal|"include"
argument_list|)
decl_stmt|;
DECL|field|FAIL_ON_UNSUPPORTED_FIELD
name|ParseField
name|FAIL_ON_UNSUPPORTED_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fail_on_unsupported_field"
argument_list|)
decl_stmt|;
block|}
comment|// document inputs
DECL|field|fields
specifier|private
specifier|final
name|String
index|[]
name|fields
decl_stmt|;
DECL|field|likeTexts
specifier|private
specifier|final
name|String
index|[]
name|likeTexts
decl_stmt|;
DECL|field|unlikeTexts
specifier|private
name|String
index|[]
name|unlikeTexts
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|likeItems
specifier|private
specifier|final
name|Item
index|[]
name|likeItems
decl_stmt|;
DECL|field|unlikeItems
specifier|private
name|Item
index|[]
name|unlikeItems
init|=
operator|new
name|Item
index|[
literal|0
index|]
decl_stmt|;
comment|// term selection parameters
DECL|field|maxQueryTerms
specifier|private
name|int
name|maxQueryTerms
init|=
name|DEFAULT_MAX_QUERY_TERMS
decl_stmt|;
DECL|field|minTermFreq
specifier|private
name|int
name|minTermFreq
init|=
name|DEFAULT_MIN_TERM_FREQ
decl_stmt|;
DECL|field|minDocFreq
specifier|private
name|int
name|minDocFreq
init|=
name|DEFAULT_MIN_DOC_FREQ
decl_stmt|;
DECL|field|maxDocFreq
specifier|private
name|int
name|maxDocFreq
init|=
name|DEFAULT_MAX_DOC_FREQ
decl_stmt|;
DECL|field|minWordLength
specifier|private
name|int
name|minWordLength
init|=
name|DEFAULT_MIN_WORD_LENGTH
decl_stmt|;
DECL|field|maxWordLength
specifier|private
name|int
name|maxWordLength
init|=
name|DEFAULT_MAX_WORD_LENGTH
decl_stmt|;
DECL|field|stopWords
specifier|private
name|String
index|[]
name|stopWords
decl_stmt|;
DECL|field|analyzer
specifier|private
name|String
name|analyzer
decl_stmt|;
comment|// query formation parameters
DECL|field|minimumShouldMatch
specifier|private
name|String
name|minimumShouldMatch
init|=
name|DEFAULT_MINIMUM_SHOULD_MATCH
decl_stmt|;
DECL|field|boostTerms
specifier|private
name|float
name|boostTerms
init|=
name|DEFAULT_BOOST_TERMS
decl_stmt|;
DECL|field|include
specifier|private
name|boolean
name|include
init|=
name|DEFAULT_INCLUDE
decl_stmt|;
comment|// other parameters
DECL|field|failOnUnsupportedField
specifier|private
name|boolean
name|failOnUnsupportedField
init|=
name|DEFAULT_FAIL_ON_UNSUPPORTED_FIELDS
decl_stmt|;
comment|/**      * A single item to be used for a {@link MoreLikeThisQueryBuilder}.      */
DECL|class|Item
specifier|public
specifier|static
specifier|final
class|class
name|Item
implements|implements
name|ToXContent
implements|,
name|Writeable
block|{
DECL|field|EMPTY_ARRAY
specifier|public
specifier|static
specifier|final
name|Item
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|Item
index|[
literal|0
index|]
decl_stmt|;
DECL|interface|Field
specifier|public
interface|interface
name|Field
block|{
DECL|field|INDEX
name|ParseField
name|INDEX
init|=
operator|new
name|ParseField
argument_list|(
literal|"_index"
argument_list|)
decl_stmt|;
DECL|field|TYPE
name|ParseField
name|TYPE
init|=
operator|new
name|ParseField
argument_list|(
literal|"_type"
argument_list|)
decl_stmt|;
DECL|field|ID
name|ParseField
name|ID
init|=
operator|new
name|ParseField
argument_list|(
literal|"_id"
argument_list|)
decl_stmt|;
DECL|field|DOC
name|ParseField
name|DOC
init|=
operator|new
name|ParseField
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
DECL|field|FIELDS
name|ParseField
name|FIELDS
init|=
operator|new
name|ParseField
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
DECL|field|PER_FIELD_ANALYZER
name|ParseField
name|PER_FIELD_ANALYZER
init|=
operator|new
name|ParseField
argument_list|(
literal|"per_field_analyzer"
argument_list|)
decl_stmt|;
DECL|field|ROUTING
name|ParseField
name|ROUTING
init|=
operator|new
name|ParseField
argument_list|(
literal|"_routing"
argument_list|)
decl_stmt|;
DECL|field|VERSION
name|ParseField
name|VERSION
init|=
operator|new
name|ParseField
argument_list|(
literal|"_version"
argument_list|)
decl_stmt|;
DECL|field|VERSION_TYPE
name|ParseField
name|VERSION_TYPE
init|=
operator|new
name|ParseField
argument_list|(
literal|"_version_type"
argument_list|)
decl_stmt|;
block|}
DECL|field|index
specifier|private
name|String
name|index
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|doc
specifier|private
name|BytesReference
name|doc
decl_stmt|;
DECL|field|fields
specifier|private
name|String
index|[]
name|fields
decl_stmt|;
DECL|field|perFieldAnalyzer
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
decl_stmt|;
DECL|field|routing
specifier|private
name|String
name|routing
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
name|Versions
operator|.
name|MATCH_ANY
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|method|Item
specifier|public
name|Item
parameter_list|()
block|{         }
DECL|method|Item
name|Item
parameter_list|(
name|Item
name|copy
parameter_list|)
block|{
if|if
condition|(
name|copy
operator|.
name|id
operator|==
literal|null
operator|&&
name|copy
operator|.
name|doc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Item requires either id or doc to be non-null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|index
operator|=
name|copy
operator|.
name|index
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|copy
operator|.
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|copy
operator|.
name|id
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|copy
operator|.
name|doc
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|copy
operator|.
name|fields
expr_stmt|;
name|this
operator|.
name|perFieldAnalyzer
operator|=
name|copy
operator|.
name|perFieldAnalyzer
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|copy
operator|.
name|version
expr_stmt|;
name|this
operator|.
name|versionType
operator|=
name|copy
operator|.
name|versionType
expr_stmt|;
block|}
comment|/**          * Constructor for a given item / document request          *          * @param index the index where the document is located          * @param type the type of the document          * @param id and its id          */
DECL|method|Item
specifier|public
name|Item
parameter_list|(
annotation|@
name|Nullable
name|String
name|index
parameter_list|,
annotation|@
name|Nullable
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Item requires id to be non-null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**          * Constructor for an artificial document request, that is not present in the index.          *          * @param index the index to be used for parsing the doc          * @param type the type to be used for parsing the doc          * @param doc the document specification          */
DECL|method|Item
specifier|public
name|Item
parameter_list|(
annotation|@
name|Nullable
name|String
name|index
parameter_list|,
annotation|@
name|Nullable
name|String
name|type
parameter_list|,
name|XContentBuilder
name|doc
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Item requires doc to be non-null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
comment|/**          * Read from a stream.          */
DECL|method|Item
name|Item
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|index
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|doc
operator|=
operator|(
name|BytesReference
operator|)
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
name|fields
operator|=
name|in
operator|.
name|readOptionalStringArray
argument_list|()
expr_stmt|;
name|perFieldAnalyzer
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
name|routing
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|versionType
operator|=
name|VersionType
operator|.
name|readFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|doc
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeGenericValue
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeString
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalStringArray
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|perFieldAnalyzer
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|versionType
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|index
specifier|public
name|Item
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|type
specifier|public
name|Item
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|doc
specifier|public
name|BytesReference
name|doc
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
DECL|method|fields
specifier|public
name|String
index|[]
name|fields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
DECL|method|fields
specifier|public
name|Item
name|fields
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|perFieldAnalyzer
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
parameter_list|()
block|{
return|return
name|perFieldAnalyzer
return|;
block|}
comment|/**          * Sets the analyzer(s) to use at any given field.          */
DECL|method|perFieldAnalyzer
specifier|public
name|Item
name|perFieldAnalyzer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|perFieldAnalyzer
operator|=
name|perFieldAnalyzer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|routing
return|;
block|}
DECL|method|routing
specifier|public
name|Item
name|routing
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|version
specifier|public
name|Item
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|versionType
return|;
block|}
DECL|method|versionType
specifier|public
name|Item
name|versionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Convert this to a {@link TermVectorsRequest} for fetching the terms of the document.          */
DECL|method|toTermVectorsRequest
specifier|public
name|TermVectorsRequest
name|toTermVectorsRequest
parameter_list|()
block|{
name|TermVectorsRequest
name|termVectorsRequest
init|=
operator|new
name|TermVectorsRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|selectedFields
argument_list|(
name|fields
argument_list|)
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
operator|.
name|perFieldAnalyzer
argument_list|(
name|perFieldAnalyzer
argument_list|)
operator|.
name|positions
argument_list|(
literal|false
argument_list|)
comment|// ensures these following parameters are never set
operator|.
name|offsets
argument_list|(
literal|false
argument_list|)
operator|.
name|payloads
argument_list|(
literal|false
argument_list|)
operator|.
name|fieldStatistics
argument_list|(
literal|false
argument_list|)
operator|.
name|termStatistics
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// for artificial docs to make sure that the id has changed in the item too
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|termVectorsRequest
operator|.
name|doc
argument_list|(
name|doc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|termVectorsRequest
operator|.
name|id
argument_list|()
expr_stmt|;
block|}
return|return
name|termVectorsRequest
return|;
block|}
comment|/**          * Parses and returns the given item.          */
DECL|method|parse
specifier|public
specifier|static
name|Item
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|,
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|INDEX
argument_list|)
condition|)
block|{
name|item
operator|.
name|index
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|item
operator|.
name|type
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|ID
argument_list|)
condition|)
block|{
name|item
operator|.
name|id
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|DOC
argument_list|)
condition|)
block|{
name|item
operator|.
name|doc
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|FIELDS
argument_list|)
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|item
operator|.
name|fields
argument_list|(
name|fields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse More Like This item. field [fields] must be an array"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|PER_FIELD_ANALYZER
argument_list|)
condition|)
block|{
name|item
operator|.
name|perFieldAnalyzer
argument_list|(
name|TermVectorsRequest
operator|.
name|readPerFieldAnalyzer
argument_list|(
name|parser
operator|.
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_routing"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"routing"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|item
operator|.
name|routing
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_version"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"version"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|item
operator|.
name|version
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_version_type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"_versionType"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"version_type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"versionType"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|item
operator|.
name|versionType
operator|=
name|VersionType
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse More Like This item. unknown field [{}]"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|item
operator|.
name|id
operator|!=
literal|null
operator|&&
name|item
operator|.
name|doc
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|item
operator|.
name|id
operator|==
literal|null
operator|&&
name|item
operator|.
name|doc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse More Like This item. neither [id] nor [doc] is specified!"
argument_list|)
throw|;
block|}
return|return
name|item
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|index
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|INDEX
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|type
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|TYPE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|id
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|ID
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|doc
operator|!=
literal|null
condition|)
block|{
name|XContentType
name|contentType
init|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|this
operator|.
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
name|builder
operator|.
name|contentType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
name|Field
operator|.
name|DOC
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|contentType
argument_list|)
operator|.
name|createParser
argument_list|(
name|this
operator|.
name|doc
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|DOC
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|fields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
name|Field
operator|.
name|FIELDS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|fields
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|perFieldAnalyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|PER_FIELD_ANALYZER
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|perFieldAnalyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|routing
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|ROUTING
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|version
operator|!=
name|Versions
operator|.
name|MATCH_ANY
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|VERSION
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|versionType
operator|!=
name|VersionType
operator|.
name|INTERNAL
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|VERSION_TYPE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|versionType
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"{ \"error\" : \""
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|"\"}"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|doc
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|fields
argument_list|)
argument_list|,
name|perFieldAnalyzer
argument_list|,
name|routing
argument_list|,
name|version
argument_list|,
name|versionType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Item
operator|)
condition|)
return|return
literal|false
return|;
name|Item
name|other
init|=
operator|(
name|Item
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|index
argument_list|,
name|other
operator|.
name|index
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|type
argument_list|,
name|other
operator|.
name|type
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|other
operator|.
name|id
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|doc
argument_list|,
name|other
operator|.
name|doc
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|fields
argument_list|,
name|other
operator|.
name|fields
argument_list|)
operator|&&
comment|// otherwise we are comparing pointers
name|Objects
operator|.
name|equals
argument_list|(
name|perFieldAnalyzer
argument_list|,
name|other
operator|.
name|perFieldAnalyzer
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|routing
argument_list|,
name|other
operator|.
name|routing
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|version
argument_list|,
name|other
operator|.
name|version
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|versionType
argument_list|,
name|other
operator|.
name|versionType
argument_list|)
return|;
block|}
block|}
comment|/**      * Constructs a new more like this query which uses the "_all" field.      * @param likeTexts the text to use when generating the 'More Like This' query.      * @param likeItems the documents to use when generating the 'More Like This' query.      */
DECL|method|MoreLikeThisQueryBuilder
specifier|public
name|MoreLikeThisQueryBuilder
parameter_list|(
name|String
index|[]
name|likeTexts
parameter_list|,
name|Item
index|[]
name|likeItems
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the field names that will be used when generating the 'More Like This' query.      *      * @param fields the field names that will be used when generating the 'More Like This' query.      * @param likeTexts the text to use when generating the 'More Like This' query.      * @param likeItems the documents to use when generating the 'More Like This' query.      */
DECL|method|MoreLikeThisQueryBuilder
specifier|public
name|MoreLikeThisQueryBuilder
parameter_list|(
annotation|@
name|Nullable
name|String
index|[]
name|fields
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|likeTexts
parameter_list|,
annotation|@
name|Nullable
name|Item
index|[]
name|likeItems
parameter_list|)
block|{
comment|// TODO we allow null here for the _all field, but this is forbidden in the parser. Re-check
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|NAME
operator|+
literal|" query requires 'fields' to be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|likeTexts
operator|==
literal|null
operator|||
name|likeTexts
operator|.
name|length
operator|==
literal|0
operator|)
operator|&&
operator|(
name|likeItems
operator|==
literal|null
operator|||
name|likeItems
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|NAME
operator|+
literal|" query requires either 'like' texts or items to be specified."
argument_list|)
throw|;
block|}
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|likeTexts
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|likeTexts
argument_list|)
operator|.
name|orElse
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|this
operator|.
name|likeItems
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|likeItems
argument_list|)
operator|.
name|orElse
argument_list|(
operator|new
name|Item
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|MoreLikeThisQueryBuilder
specifier|public
name|MoreLikeThisQueryBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fields
operator|=
name|in
operator|.
name|readOptionalStringArray
argument_list|()
expr_stmt|;
name|likeTexts
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
name|likeItems
operator|=
name|in
operator|.
name|readList
argument_list|(
name|Item
operator|::
operator|new
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|Item
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|unlikeTexts
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
name|unlikeItems
operator|=
name|in
operator|.
name|readList
argument_list|(
name|Item
operator|::
operator|new
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|Item
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|maxQueryTerms
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|minTermFreq
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|minDocFreq
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|maxDocFreq
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|minWordLength
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|maxWordLength
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|stopWords
operator|=
name|in
operator|.
name|readOptionalStringArray
argument_list|()
expr_stmt|;
name|analyzer
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|minimumShouldMatch
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|boostTerms
operator|=
operator|(
name|Float
operator|)
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
name|include
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|failOnUnsupportedField
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalStringArray
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|likeTexts
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|likeItems
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|unlikeTexts
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|unlikeItems
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|maxQueryTerms
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|minTermFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|minDocFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|maxDocFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|minWordLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|maxWordLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStringArray
argument_list|(
name|stopWords
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|minimumShouldMatch
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|boostTerms
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|include
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|failOnUnsupportedField
argument_list|)
expr_stmt|;
block|}
DECL|method|fields
specifier|public
name|String
index|[]
name|fields
parameter_list|()
block|{
return|return
name|this
operator|.
name|fields
return|;
block|}
DECL|method|likeTexts
specifier|public
name|String
index|[]
name|likeTexts
parameter_list|()
block|{
return|return
name|likeTexts
return|;
block|}
DECL|method|likeItems
specifier|public
name|Item
index|[]
name|likeItems
parameter_list|()
block|{
return|return
name|likeItems
return|;
block|}
comment|/**      * Sets the text from which the terms should not be selected from.      */
DECL|method|unlike
specifier|public
name|MoreLikeThisQueryBuilder
name|unlike
parameter_list|(
name|String
index|[]
name|unlikeTexts
parameter_list|)
block|{
name|this
operator|.
name|unlikeTexts
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|unlikeTexts
argument_list|)
operator|.
name|orElse
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unlikeTexts
specifier|public
name|String
index|[]
name|unlikeTexts
parameter_list|()
block|{
return|return
name|unlikeTexts
return|;
block|}
comment|/**      * Sets the documents from which the terms should not be selected from.      */
DECL|method|unlike
specifier|public
name|MoreLikeThisQueryBuilder
name|unlike
parameter_list|(
name|Item
index|[]
name|unlikeItems
parameter_list|)
block|{
name|this
operator|.
name|unlikeItems
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|unlikeItems
argument_list|)
operator|.
name|orElse
argument_list|(
operator|new
name|Item
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unlikeItems
specifier|public
name|Item
index|[]
name|unlikeItems
parameter_list|()
block|{
return|return
name|unlikeItems
return|;
block|}
comment|/**      * Sets the maximum number of query terms that will be included in any generated query.      * Defaults to<tt>25</tt>.      */
DECL|method|maxQueryTerms
specifier|public
name|MoreLikeThisQueryBuilder
name|maxQueryTerms
parameter_list|(
name|int
name|maxQueryTerms
parameter_list|)
block|{
name|this
operator|.
name|maxQueryTerms
operator|=
name|maxQueryTerms
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxQueryTerms
specifier|public
name|int
name|maxQueryTerms
parameter_list|()
block|{
return|return
name|maxQueryTerms
return|;
block|}
comment|/**      * The frequency below which terms will be ignored in the source doc. The default      * frequency is<tt>2</tt>.      */
DECL|method|minTermFreq
specifier|public
name|MoreLikeThisQueryBuilder
name|minTermFreq
parameter_list|(
name|int
name|minTermFreq
parameter_list|)
block|{
name|this
operator|.
name|minTermFreq
operator|=
name|minTermFreq
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|minTermFreq
specifier|public
name|int
name|minTermFreq
parameter_list|()
block|{
return|return
name|minTermFreq
return|;
block|}
comment|/**      * Sets the frequency at which words will be ignored which do not occur in at least this      * many docs. Defaults to<tt>5</tt>.      */
DECL|method|minDocFreq
specifier|public
name|MoreLikeThisQueryBuilder
name|minDocFreq
parameter_list|(
name|int
name|minDocFreq
parameter_list|)
block|{
name|this
operator|.
name|minDocFreq
operator|=
name|minDocFreq
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|minDocFreq
specifier|public
name|int
name|minDocFreq
parameter_list|()
block|{
return|return
name|minDocFreq
return|;
block|}
comment|/**      * Set the maximum frequency in which words may still appear. Words that appear      * in more than this many docs will be ignored. Defaults to unbounded.      */
DECL|method|maxDocFreq
specifier|public
name|MoreLikeThisQueryBuilder
name|maxDocFreq
parameter_list|(
name|int
name|maxDocFreq
parameter_list|)
block|{
name|this
operator|.
name|maxDocFreq
operator|=
name|maxDocFreq
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxDocFreq
specifier|public
name|int
name|maxDocFreq
parameter_list|()
block|{
return|return
name|maxDocFreq
return|;
block|}
comment|/**      * Sets the minimum word length below which words will be ignored. Defaults      * to<tt>0</tt>.      */
DECL|method|minWordLength
specifier|public
name|MoreLikeThisQueryBuilder
name|minWordLength
parameter_list|(
name|int
name|minWordLength
parameter_list|)
block|{
name|this
operator|.
name|minWordLength
operator|=
name|minWordLength
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|minWordLength
specifier|public
name|int
name|minWordLength
parameter_list|()
block|{
return|return
name|minWordLength
return|;
block|}
comment|/**      * Sets the maximum word length above which words will be ignored. Defaults to      * unbounded (<tt>0</tt>).      */
DECL|method|maxWordLength
specifier|public
name|MoreLikeThisQueryBuilder
name|maxWordLength
parameter_list|(
name|int
name|maxWordLength
parameter_list|)
block|{
name|this
operator|.
name|maxWordLength
operator|=
name|maxWordLength
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxWordLength
specifier|public
name|int
name|maxWordLength
parameter_list|()
block|{
return|return
name|maxWordLength
return|;
block|}
comment|/**      * Set the set of stopwords.      *<p>      * Any word in this set is considered "uninteresting" and ignored. Even if your Analyzer allows stopwords, you      * might want to tell the MoreLikeThis code to ignore them, as for the purposes of document similarity it seems      * reasonable to assume that "a stop word is never interesting".      */
DECL|method|stopWords
specifier|public
name|MoreLikeThisQueryBuilder
name|stopWords
parameter_list|(
name|String
modifier|...
name|stopWords
parameter_list|)
block|{
name|this
operator|.
name|stopWords
operator|=
name|stopWords
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|stopWords
specifier|public
name|MoreLikeThisQueryBuilder
name|stopWords
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|stopWords
parameter_list|)
block|{
if|if
condition|(
name|stopWords
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"requires stopwords to be non-null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|stopWords
operator|=
name|stopWords
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|stopWords
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|stopWords
specifier|public
name|String
index|[]
name|stopWords
parameter_list|()
block|{
return|return
name|stopWords
return|;
block|}
comment|/**      * The analyzer that will be used to analyze the text. Defaults to the analyzer associated with the field.      */
DECL|method|analyzer
specifier|public
name|MoreLikeThisQueryBuilder
name|analyzer
parameter_list|(
name|String
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|analyzer
specifier|public
name|String
name|analyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
comment|/**      * Number of terms that must match the generated query expressed in the      * common syntax for minimum should match. Defaults to<tt>30%</tt>.      *      * @see    org.elasticsearch.common.lucene.search.Queries#calculateMinShouldMatch(int, String)      */
DECL|method|minimumShouldMatch
specifier|public
name|MoreLikeThisQueryBuilder
name|minimumShouldMatch
parameter_list|(
name|String
name|minimumShouldMatch
parameter_list|)
block|{
if|if
condition|(
name|minimumShouldMatch
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|NAME
operator|+
literal|"] requires minimum should match to be non-null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|minimumShouldMatch
operator|=
name|minimumShouldMatch
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|minimumShouldMatch
specifier|public
name|String
name|minimumShouldMatch
parameter_list|()
block|{
return|return
name|minimumShouldMatch
return|;
block|}
comment|/**      * Sets the boost factor to use when boosting terms. Defaults to<tt>0</tt> (deactivated).      */
DECL|method|boostTerms
specifier|public
name|MoreLikeThisQueryBuilder
name|boostTerms
parameter_list|(
name|float
name|boostTerms
parameter_list|)
block|{
name|this
operator|.
name|boostTerms
operator|=
name|boostTerms
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|boostTerms
specifier|public
name|float
name|boostTerms
parameter_list|()
block|{
return|return
name|boostTerms
return|;
block|}
comment|/**      * Whether to include the input documents. Defaults to<tt>false</tt>      */
DECL|method|include
specifier|public
name|MoreLikeThisQueryBuilder
name|include
parameter_list|(
name|boolean
name|include
parameter_list|)
block|{
name|this
operator|.
name|include
operator|=
name|include
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|include
specifier|public
name|boolean
name|include
parameter_list|()
block|{
return|return
name|include
return|;
block|}
comment|/**      * Whether to fail or return no result when this query is run against a field which is not supported such as binary/numeric fields.      */
DECL|method|failOnUnsupportedField
specifier|public
name|MoreLikeThisQueryBuilder
name|failOnUnsupportedField
parameter_list|(
name|boolean
name|fail
parameter_list|)
block|{
name|this
operator|.
name|failOnUnsupportedField
operator|=
name|fail
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|failOnUnsupportedField
specifier|public
name|boolean
name|failOnUnsupportedField
parameter_list|()
block|{
return|return
name|failOnUnsupportedField
return|;
block|}
comment|/**      * Converts an array of String ids to and Item[].      * @param ids the ids to convert      * @return the new items array      * @deprecated construct the items array externally and use it in the constructor / setter      */
annotation|@
name|Deprecated
DECL|method|ids
specifier|public
specifier|static
name|Item
index|[]
name|ids
parameter_list|(
name|String
modifier|...
name|ids
parameter_list|)
block|{
name|Item
index|[]
name|items
init|=
operator|new
name|Item
index|[
name|ids
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|items
index|[
name|i
index|]
operator|=
operator|new
name|Item
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|FIELDS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
name|buildLikeField
argument_list|(
name|builder
argument_list|,
name|Field
operator|.
name|LIKE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
name|buildLikeField
argument_list|(
name|builder
argument_list|,
name|Field
operator|.
name|UNLIKE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|unlikeTexts
argument_list|,
name|unlikeItems
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|MAX_QUERY_TERMS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxQueryTerms
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|MIN_TERM_FREQ
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minTermFreq
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|MIN_DOC_FREQ
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minDocFreq
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|MAX_DOC_FREQ
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxDocFreq
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|MIN_WORD_LENGTH
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minWordLength
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|MAX_WORD_LENGTH
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxWordLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopWords
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|STOP_WORDS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|ANALYZER
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|MINIMUM_SHOULD_MATCH
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minimumShouldMatch
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|BOOST_TERMS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|boostTerms
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|INCLUDE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|include
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|FAIL_ON_UNSUPPORTED_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|failOnUnsupportedField
argument_list|)
expr_stmt|;
name|printBoostAndQueryName
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|Optional
argument_list|<
name|MoreLikeThisQueryBuilder
argument_list|>
name|fromXContent
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
comment|// document inputs
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|likeTexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unlikeTexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Item
argument_list|>
name|likeItems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Item
argument_list|>
name|unlikeItems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// term selection parameters
name|int
name|maxQueryTerms
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MAX_QUERY_TERMS
decl_stmt|;
name|int
name|minTermFreq
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MIN_TERM_FREQ
decl_stmt|;
name|int
name|minDocFreq
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MIN_DOC_FREQ
decl_stmt|;
name|int
name|maxDocFreq
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MAX_DOC_FREQ
decl_stmt|;
name|int
name|minWordLength
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MIN_WORD_LENGTH
decl_stmt|;
name|int
name|maxWordLength
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MAX_WORD_LENGTH
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|stopWords
init|=
literal|null
decl_stmt|;
name|String
name|analyzer
init|=
literal|null
decl_stmt|;
comment|// query formation parameters
name|String
name|minimumShouldMatch
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MINIMUM_SHOULD_MATCH
decl_stmt|;
name|float
name|boostTerms
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_BOOST_TERMS
decl_stmt|;
name|boolean
name|include
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_INCLUDE
decl_stmt|;
comment|// other parameters
name|boolean
name|failOnUnsupportedField
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_FAIL_ON_UNSUPPORTED_FIELDS
decl_stmt|;
name|float
name|boost
init|=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
decl_stmt|;
name|String
name|queryName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|LIKE
argument_list|)
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|UNLIKE
argument_list|)
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|unlikeTexts
argument_list|,
name|unlikeItems
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|LIKE_TEXT
argument_list|)
condition|)
block|{
name|likeTexts
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MAX_QUERY_TERMS
argument_list|)
condition|)
block|{
name|maxQueryTerms
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MIN_TERM_FREQ
argument_list|)
condition|)
block|{
name|minTermFreq
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MIN_DOC_FREQ
argument_list|)
condition|)
block|{
name|minDocFreq
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MAX_DOC_FREQ
argument_list|)
condition|)
block|{
name|maxDocFreq
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MIN_WORD_LENGTH
argument_list|)
condition|)
block|{
name|minWordLength
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MAX_WORD_LENGTH
argument_list|)
condition|)
block|{
name|maxWordLength
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|ANALYZER
argument_list|)
condition|)
block|{
name|analyzer
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MINIMUM_SHOULD_MATCH
argument_list|)
condition|)
block|{
name|minimumShouldMatch
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|BOOST_TERMS
argument_list|)
condition|)
block|{
name|boostTerms
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|INCLUDE
argument_list|)
condition|)
block|{
name|include
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|FAIL_ON_UNSUPPORTED_FIELD
argument_list|)
condition|)
block|{
name|failOnUnsupportedField
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boost"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|boost
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_name"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|queryName
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"[mlt] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|FIELDS
argument_list|)
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|LIKE
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|UNLIKE
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|unlikeTexts
argument_list|,
name|unlikeItems
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|IDS
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
operator|!
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ids array element should only contain ids"
argument_list|)
throw|;
block|}
name|likeItems
operator|.
name|add
argument_list|(
operator|new
name|Item
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|DOCS
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"docs array element should include an object"
argument_list|)
throw|;
block|}
name|likeItems
operator|.
name|add
argument_list|(
name|Item
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
argument_list|,
operator|new
name|Item
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|STOP_WORDS
argument_list|)
condition|)
block|{
name|stopWords
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|stopWords
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"[mlt] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|LIKE
argument_list|)
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|UNLIKE
argument_list|)
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|unlikeTexts
argument_list|,
name|unlikeItems
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"[mlt] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|likeTexts
operator|.
name|isEmpty
argument_list|()
operator|&&
name|likeItems
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"more_like_this requires 'like' to be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"more_like_this requires 'fields' to be non-empty"
argument_list|)
throw|;
block|}
name|String
index|[]
name|fieldsArray
init|=
name|fields
operator|==
literal|null
condition|?
literal|null
else|:
name|fields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|likeTextsArray
init|=
name|likeTexts
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|likeTexts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|likeTexts
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|unlikeTextsArray
init|=
name|unlikeTexts
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|unlikeTexts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|unlikeTexts
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Item
index|[]
name|likeItemsArray
init|=
name|likeItems
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|likeItems
operator|.
name|toArray
argument_list|(
operator|new
name|Item
index|[
name|likeItems
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Item
index|[]
name|unlikeItemsArray
init|=
name|unlikeItems
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|unlikeItems
operator|.
name|toArray
argument_list|(
operator|new
name|Item
index|[
name|unlikeItems
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|MoreLikeThisQueryBuilder
name|moreLikeThisQueryBuilder
init|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
name|fieldsArray
argument_list|,
name|likeTextsArray
argument_list|,
name|likeItemsArray
argument_list|)
operator|.
name|unlike
argument_list|(
name|unlikeTextsArray
argument_list|)
operator|.
name|unlike
argument_list|(
name|unlikeItemsArray
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
name|maxQueryTerms
argument_list|)
operator|.
name|minTermFreq
argument_list|(
name|minTermFreq
argument_list|)
operator|.
name|minDocFreq
argument_list|(
name|minDocFreq
argument_list|)
operator|.
name|maxDocFreq
argument_list|(
name|maxDocFreq
argument_list|)
operator|.
name|minWordLength
argument_list|(
name|minWordLength
argument_list|)
operator|.
name|maxWordLength
argument_list|(
name|maxWordLength
argument_list|)
operator|.
name|analyzer
argument_list|(
name|analyzer
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
name|minimumShouldMatch
argument_list|)
operator|.
name|boostTerms
argument_list|(
name|boostTerms
argument_list|)
operator|.
name|include
argument_list|(
name|include
argument_list|)
operator|.
name|failOnUnsupportedField
argument_list|(
name|failOnUnsupportedField
argument_list|)
operator|.
name|boost
argument_list|(
name|boost
argument_list|)
operator|.
name|queryName
argument_list|(
name|queryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopWords
operator|!=
literal|null
condition|)
block|{
name|moreLikeThisQueryBuilder
operator|.
name|stopWords
argument_list|(
name|stopWords
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|moreLikeThisQueryBuilder
argument_list|)
return|;
block|}
DECL|method|parseLikeField
specifier|private
specifier|static
name|void
name|parseLikeField
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|texts
parameter_list|,
name|List
argument_list|<
name|Item
argument_list|>
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|.
name|isValue
argument_list|()
condition|)
block|{
name|texts
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|items
operator|.
name|add
argument_list|(
name|Item
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|parseContext
operator|.
name|getParseFieldMatcher
argument_list|()
argument_list|,
operator|new
name|Item
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Content of 'like' parameter should either be a string or an object"
argument_list|)
throw|;
block|}
block|}
DECL|method|buildLikeField
specifier|private
specifier|static
name|void
name|buildLikeField
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
index|[]
name|texts
parameter_list|,
name|Item
index|[]
name|items
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|texts
operator|.
name|length
operator|>
literal|0
operator|||
name|items
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|text
range|:
name|texts
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Item
name|item
range|:
name|items
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|doToQuery
specifier|protected
name|Query
name|doToQuery
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Item
index|[]
name|likeItems
init|=
operator|new
name|Item
index|[
name|this
operator|.
name|likeItems
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|likeItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|likeItems
index|[
name|i
index|]
operator|=
operator|new
name|Item
argument_list|(
name|this
operator|.
name|likeItems
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Item
index|[]
name|unlikeItems
init|=
operator|new
name|Item
index|[
name|this
operator|.
name|unlikeItems
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unlikeItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|unlikeItems
index|[
name|i
index|]
operator|=
operator|new
name|Item
argument_list|(
name|this
operator|.
name|unlikeItems
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|new
name|MoreLikeThisQuery
argument_list|()
decl_stmt|;
comment|// set similarity
name|mltQuery
operator|.
name|setSimilarity
argument_list|(
name|context
operator|.
name|getSearchSimilarity
argument_list|()
argument_list|)
expr_stmt|;
comment|// set query parameters
name|mltQuery
operator|.
name|setMaxQueryTerms
argument_list|(
name|maxQueryTerms
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setMinTermFrequency
argument_list|(
name|minTermFreq
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setMinDocFreq
argument_list|(
name|minDocFreq
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setMaxDocFreq
argument_list|(
name|maxDocFreq
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setMinWordLen
argument_list|(
name|minWordLength
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setMaxWordLen
argument_list|(
name|maxWordLength
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setMinimumShouldMatch
argument_list|(
name|minimumShouldMatch
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopWords
operator|!=
literal|null
condition|)
block|{
name|mltQuery
operator|.
name|setStopWords
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|stopWords
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// sets boost terms
if|if
condition|(
name|boostTerms
operator|!=
literal|0
condition|)
block|{
name|mltQuery
operator|.
name|setBoostTerms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setBoostTermsFactor
argument_list|(
name|boostTerms
argument_list|)
expr_stmt|;
block|}
comment|// set analyzer
name|Analyzer
name|analyzerObj
init|=
name|context
operator|.
name|getAnalysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzerObj
operator|==
literal|null
condition|)
block|{
name|analyzerObj
operator|=
name|context
operator|.
name|getMapperService
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
expr_stmt|;
block|}
name|mltQuery
operator|.
name|setAnalyzer
argument_list|(
name|analyzerObj
argument_list|)
expr_stmt|;
comment|// set like text fields
name|boolean
name|useDefaultField
init|=
operator|(
name|fields
operator|==
literal|null
operator|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|moreLikeFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|useDefaultField
condition|)
block|{
name|moreLikeFields
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|context
operator|.
name|defaultField
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|MappedFieldType
name|fieldType
init|=
name|context
operator|.
name|fieldMapper
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
operator|&&
name|SUPPORTED_FIELD_TYPES
operator|.
name|contains
argument_list|(
name|fieldType
operator|.
name|getClass
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|failOnUnsupportedField
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"more_like_this only supports text/keyword fields: ["
operator|+
name|field
operator|+
literal|"]"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// skip
continue|continue;
block|}
block|}
name|moreLikeFields
operator|.
name|add
argument_list|(
name|fieldType
operator|==
literal|null
condition|?
name|field
else|:
name|fieldType
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|moreLikeFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|mltQuery
operator|.
name|setMoreLikeFields
argument_list|(
name|moreLikeFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|moreLikeFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// handle like texts
if|if
condition|(
name|likeTexts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|mltQuery
operator|.
name|setLikeText
argument_list|(
name|likeTexts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|unlikeTexts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|mltQuery
operator|.
name|setUnlikeText
argument_list|(
name|unlikeTexts
argument_list|)
expr_stmt|;
block|}
comment|// handle items
if|if
condition|(
name|likeItems
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|handleItems
argument_list|(
name|context
argument_list|,
name|mltQuery
argument_list|,
name|likeItems
argument_list|,
name|unlikeItems
argument_list|,
name|include
argument_list|,
name|moreLikeFields
argument_list|,
name|useDefaultField
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mltQuery
return|;
block|}
block|}
DECL|method|handleItems
specifier|private
name|Query
name|handleItems
parameter_list|(
name|QueryShardContext
name|context
parameter_list|,
name|MoreLikeThisQuery
name|mltQuery
parameter_list|,
name|Item
index|[]
name|likeItems
parameter_list|,
name|Item
index|[]
name|unlikeItems
parameter_list|,
name|boolean
name|include
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|moreLikeFields
parameter_list|,
name|boolean
name|useDefaultField
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set default index, type and fields if not specified
for|for
control|(
name|Item
name|item
range|:
name|likeItems
control|)
block|{
name|setDefaultIndexTypeFields
argument_list|(
name|context
argument_list|,
name|item
argument_list|,
name|moreLikeFields
argument_list|,
name|useDefaultField
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Item
name|item
range|:
name|unlikeItems
control|)
block|{
name|setDefaultIndexTypeFields
argument_list|(
name|context
argument_list|,
name|item
argument_list|,
name|moreLikeFields
argument_list|,
name|useDefaultField
argument_list|)
expr_stmt|;
block|}
comment|// fetching the items with multi-termvectors API
name|MultiTermVectorsResponse
name|likeItemsResponse
init|=
name|fetchResponse
argument_list|(
name|context
operator|.
name|getClient
argument_list|()
argument_list|,
name|likeItems
argument_list|)
decl_stmt|;
comment|// getting the Fields for liked items
name|mltQuery
operator|.
name|setLikeText
argument_list|(
name|getFieldsFor
argument_list|(
name|likeItemsResponse
argument_list|)
argument_list|)
expr_stmt|;
comment|// getting the Fields for unliked items
if|if
condition|(
name|unlikeItems
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|MultiTermVectorsResponse
name|unlikeItemsResponse
init|=
name|fetchResponse
argument_list|(
name|context
operator|.
name|getClient
argument_list|()
argument_list|,
name|unlikeItems
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
index|[]
name|unlikeFields
init|=
name|getFieldsFor
argument_list|(
name|unlikeItemsResponse
argument_list|)
decl_stmt|;
if|if
condition|(
name|unlikeFields
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|mltQuery
operator|.
name|setUnlikeText
argument_list|(
name|unlikeFields
argument_list|)
expr_stmt|;
block|}
block|}
name|BooleanQuery
operator|.
name|Builder
name|boolQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|boolQuery
operator|.
name|add
argument_list|(
name|mltQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// exclude the items from the search
if|if
condition|(
operator|!
name|include
condition|)
block|{
name|handleExclude
argument_list|(
name|boolQuery
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
block|}
return|return
name|boolQuery
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|setDefaultIndexTypeFields
specifier|private
specifier|static
name|void
name|setDefaultIndexTypeFields
parameter_list|(
name|QueryShardContext
name|context
parameter_list|,
name|Item
name|item
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|moreLikeFields
parameter_list|,
name|boolean
name|useDefaultField
parameter_list|)
block|{
if|if
condition|(
name|item
operator|.
name|index
argument_list|()
operator|==
literal|null
condition|)
block|{
name|item
operator|.
name|index
argument_list|(
name|context
operator|.
name|index
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|item
operator|.
name|type
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|queryTypes
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|QueryShardException
argument_list|(
name|context
argument_list|,
literal|"ambiguous type for item with id: "
operator|+
name|item
operator|.
name|id
argument_list|()
operator|+
literal|" and index: "
operator|+
name|item
operator|.
name|index
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|item
operator|.
name|type
argument_list|(
name|context
operator|.
name|queryTypes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// default fields if not present but don't override for artificial docs
if|if
condition|(
operator|(
name|item
operator|.
name|fields
argument_list|()
operator|==
literal|null
operator|||
name|item
operator|.
name|fields
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
operator|&&
name|item
operator|.
name|doc
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|useDefaultField
condition|)
block|{
name|item
operator|.
name|fields
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|item
operator|.
name|fields
argument_list|(
name|moreLikeFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|moreLikeFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|fetchResponse
specifier|private
name|MultiTermVectorsResponse
name|fetchResponse
parameter_list|(
name|Client
name|client
parameter_list|,
name|Item
index|[]
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|MultiTermVectorsRequest
name|request
init|=
operator|new
name|MultiTermVectorsRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|Item
name|item
range|:
name|items
control|)
block|{
name|request
operator|.
name|add
argument_list|(
name|item
operator|.
name|toTermVectorsRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|client
operator|.
name|multiTermVectors
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
return|;
block|}
DECL|method|getFieldsFor
specifier|private
specifier|static
name|Fields
index|[]
name|getFieldsFor
parameter_list|(
name|MultiTermVectorsResponse
name|responses
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Fields
argument_list|>
name|likeFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MultiTermVectorsItemResponse
name|response
range|:
name|responses
control|)
block|{
if|if
condition|(
name|response
operator|.
name|isFailed
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|TermVectorsResponse
name|getResponse
init|=
name|response
operator|.
name|getResponse
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getResponse
operator|.
name|isExists
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|likeFields
operator|.
name|add
argument_list|(
name|getResponse
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|likeFields
operator|.
name|toArray
argument_list|(
name|Fields
operator|.
name|EMPTY_ARRAY
argument_list|)
return|;
block|}
DECL|method|handleExclude
specifier|private
specifier|static
name|void
name|handleExclude
parameter_list|(
name|BooleanQuery
operator|.
name|Builder
name|boolQuery
parameter_list|,
name|Item
index|[]
name|likeItems
parameter_list|)
block|{
comment|// artificial docs get assigned a random id and should be disregarded
name|List
argument_list|<
name|BytesRef
argument_list|>
name|uids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Item
name|item
range|:
name|likeItems
control|)
block|{
if|if
condition|(
name|item
operator|.
name|doc
argument_list|()
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|uids
operator|.
name|add
argument_list|(
name|createUidAsBytes
argument_list|(
name|item
operator|.
name|type
argument_list|()
argument_list|,
name|item
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|uids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TermsQuery
name|query
init|=
operator|new
name|TermsQuery
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|uids
operator|.
name|toArray
argument_list|(
operator|new
name|BytesRef
index|[
name|uids
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|boolQuery
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|Arrays
operator|.
name|hashCode
argument_list|(
name|fields
argument_list|)
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|likeTexts
argument_list|)
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|unlikeTexts
argument_list|)
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|likeItems
argument_list|)
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|unlikeItems
argument_list|)
argument_list|,
name|maxQueryTerms
argument_list|,
name|minTermFreq
argument_list|,
name|minDocFreq
argument_list|,
name|maxDocFreq
argument_list|,
name|minWordLength
argument_list|,
name|maxWordLength
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|stopWords
argument_list|)
argument_list|,
name|analyzer
argument_list|,
name|minimumShouldMatch
argument_list|,
name|boostTerms
argument_list|,
name|include
argument_list|,
name|failOnUnsupportedField
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|MoreLikeThisQueryBuilder
name|other
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|fields
argument_list|,
name|other
operator|.
name|fields
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|likeTexts
argument_list|,
name|other
operator|.
name|likeTexts
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|unlikeTexts
argument_list|,
name|other
operator|.
name|unlikeTexts
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|likeItems
argument_list|,
name|other
operator|.
name|likeItems
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|unlikeItems
argument_list|,
name|other
operator|.
name|unlikeItems
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|maxQueryTerms
argument_list|,
name|other
operator|.
name|maxQueryTerms
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minTermFreq
argument_list|,
name|other
operator|.
name|minTermFreq
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minDocFreq
argument_list|,
name|other
operator|.
name|minDocFreq
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|maxDocFreq
argument_list|,
name|other
operator|.
name|maxDocFreq
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minWordLength
argument_list|,
name|other
operator|.
name|minWordLength
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|maxWordLength
argument_list|,
name|other
operator|.
name|maxWordLength
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|stopWords
argument_list|,
name|other
operator|.
name|stopWords
argument_list|)
operator|&&
comment|// otherwise we are comparing pointers
name|Objects
operator|.
name|equals
argument_list|(
name|analyzer
argument_list|,
name|other
operator|.
name|analyzer
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|minimumShouldMatch
argument_list|,
name|other
operator|.
name|minimumShouldMatch
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|boostTerms
argument_list|,
name|other
operator|.
name|boostTerms
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|include
argument_list|,
name|other
operator|.
name|include
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|failOnUnsupportedField
argument_list|,
name|other
operator|.
name|failOnUnsupportedField
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doRewrite
specifier|protected
name|QueryBuilder
name|doRewrite
parameter_list|(
name|QueryRewriteContext
name|queryRewriteContext
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO this needs heavy cleanups before we can rewrite it
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

