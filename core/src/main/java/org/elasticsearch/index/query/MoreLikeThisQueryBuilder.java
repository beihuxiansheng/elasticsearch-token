begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|TermVectorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_comment
comment|/**  * A more like this query that finds documents that are "like" the provided set of document(s).  *  * The documents are provided as a set of strings and/or a list of {@link Item}.  */
end_comment

begin_class
DECL|class|MoreLikeThisQueryBuilder
specifier|public
class|class
name|MoreLikeThisQueryBuilder
extends|extends
name|AbstractQueryBuilder
argument_list|<
name|MoreLikeThisQueryBuilder
argument_list|>
block|{
comment|/**      * A single item to be used for a {@link MoreLikeThisQueryBuilder}.      */
DECL|class|Item
specifier|public
specifier|static
specifier|final
class|class
name|Item
implements|implements
name|ToXContent
block|{
DECL|field|EMPTY_ARRAY
specifier|public
specifier|static
specifier|final
name|Item
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|Item
index|[
literal|0
index|]
decl_stmt|;
DECL|interface|Field
specifier|public
interface|interface
name|Field
block|{
DECL|field|INDEX
name|ParseField
name|INDEX
init|=
operator|new
name|ParseField
argument_list|(
literal|"_index"
argument_list|)
decl_stmt|;
DECL|field|TYPE
name|ParseField
name|TYPE
init|=
operator|new
name|ParseField
argument_list|(
literal|"_type"
argument_list|)
decl_stmt|;
DECL|field|ID
name|ParseField
name|ID
init|=
operator|new
name|ParseField
argument_list|(
literal|"_id"
argument_list|)
decl_stmt|;
DECL|field|DOC
name|ParseField
name|DOC
init|=
operator|new
name|ParseField
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
DECL|field|FIELDS
name|ParseField
name|FIELDS
init|=
operator|new
name|ParseField
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
DECL|field|PER_FIELD_ANALYZER
name|ParseField
name|PER_FIELD_ANALYZER
init|=
operator|new
name|ParseField
argument_list|(
literal|"per_field_analyzer"
argument_list|)
decl_stmt|;
DECL|field|ROUTING
name|ParseField
name|ROUTING
init|=
operator|new
name|ParseField
argument_list|(
literal|"_routing"
argument_list|)
decl_stmt|;
DECL|field|VERSION
name|ParseField
name|VERSION
init|=
operator|new
name|ParseField
argument_list|(
literal|"_version"
argument_list|)
decl_stmt|;
DECL|field|VERSION_TYPE
name|ParseField
name|VERSION_TYPE
init|=
operator|new
name|ParseField
argument_list|(
literal|"_version_type"
argument_list|)
decl_stmt|;
block|}
DECL|field|index
specifier|private
name|String
name|index
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|doc
specifier|private
name|BytesReference
name|doc
decl_stmt|;
DECL|field|fields
specifier|private
name|String
index|[]
name|fields
decl_stmt|;
DECL|field|perFieldAnalyzer
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
decl_stmt|;
DECL|field|routing
specifier|private
name|String
name|routing
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
name|Versions
operator|.
name|MATCH_ANY
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|method|Item
specifier|public
name|Item
parameter_list|()
block|{          }
comment|/**          * Constructor for a given item / document request          *          * @param index the index where the document is located          * @param type the type of the document          * @param id and its id          */
DECL|method|Item
specifier|public
name|Item
parameter_list|(
name|String
name|index
parameter_list|,
annotation|@
name|Nullable
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**          * Constructor for an artificial document request, that is not present in the index.          *          * @param index the index to be used for parsing the doc          * @param type the type to be used for parsing the doc          * @param doc the document specification          */
DECL|method|Item
specifier|public
name|Item
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|XContentBuilder
name|doc
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|doc
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|index
specifier|public
name|Item
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|type
specifier|public
name|Item
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|id
specifier|public
name|Item
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|doc
specifier|public
name|BytesReference
name|doc
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
comment|/**          * Sets to a given artificial document, that is a document that is not present in the index.          */
DECL|method|doc
specifier|public
name|Item
name|doc
parameter_list|(
name|BytesReference
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets to a given artificial document, that is a document that is not present in the index.          */
DECL|method|doc
specifier|public
name|Item
name|doc
parameter_list|(
name|XContentBuilder
name|doc
parameter_list|)
block|{
return|return
name|this
operator|.
name|doc
argument_list|(
name|doc
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|fields
specifier|public
name|String
index|[]
name|fields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
DECL|method|fields
specifier|public
name|Item
name|fields
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|perFieldAnalyzer
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
parameter_list|()
block|{
return|return
name|perFieldAnalyzer
return|;
block|}
comment|/**          * Sets the analyzer(s) to use at any given field.          */
DECL|method|perFieldAnalyzer
specifier|public
name|Item
name|perFieldAnalyzer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|perFieldAnalyzer
operator|=
name|perFieldAnalyzer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|routing
return|;
block|}
DECL|method|routing
specifier|public
name|Item
name|routing
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|version
specifier|public
name|Item
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|versionType
return|;
block|}
DECL|method|versionType
specifier|public
name|Item
name|versionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Convert this to a {@link TermVectorsRequest} for fetching the terms of the document.          */
DECL|method|toTermVectorsRequest
specifier|public
name|TermVectorsRequest
name|toTermVectorsRequest
parameter_list|()
block|{
name|TermVectorsRequest
name|termVectorsRequest
init|=
operator|new
name|TermVectorsRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|selectedFields
argument_list|(
name|fields
argument_list|)
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
operator|.
name|perFieldAnalyzer
argument_list|(
name|perFieldAnalyzer
argument_list|)
operator|.
name|positions
argument_list|(
literal|false
argument_list|)
comment|// ensures these following parameters are never set
operator|.
name|offsets
argument_list|(
literal|false
argument_list|)
operator|.
name|payloads
argument_list|(
literal|false
argument_list|)
operator|.
name|fieldStatistics
argument_list|(
literal|false
argument_list|)
operator|.
name|termStatistics
argument_list|(
literal|false
argument_list|)
operator|.
name|dfs
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// for artificial docs to make sure that the id has changed in the item too
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|termVectorsRequest
operator|.
name|doc
argument_list|(
name|doc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
argument_list|(
name|termVectorsRequest
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|termVectorsRequest
return|;
block|}
comment|/**          * Parses and returns the given item.          */
DECL|method|parse
specifier|public
specifier|static
name|Item
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|,
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|INDEX
argument_list|)
condition|)
block|{
name|item
operator|.
name|index
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|item
operator|.
name|type
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|ID
argument_list|)
condition|)
block|{
name|item
operator|.
name|id
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|DOC
argument_list|)
condition|)
block|{
name|item
operator|.
name|doc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|FIELDS
argument_list|)
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|item
operator|.
name|fields
argument_list|(
name|fields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse More Like This item. field [fields] must be an array"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|PER_FIELD_ANALYZER
argument_list|)
condition|)
block|{
name|item
operator|.
name|perFieldAnalyzer
argument_list|(
name|TermVectorsRequest
operator|.
name|readPerFieldAnalyzer
argument_list|(
name|parser
operator|.
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_routing"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"routing"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|item
operator|.
name|routing
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_version"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"version"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|item
operator|.
name|version
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_version_type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"_versionType"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"version_type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"versionType"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|item
operator|.
name|versionType
operator|=
name|VersionType
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse More Like This item. unknown field [{}]"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|item
operator|.
name|id
operator|!=
literal|null
operator|&&
name|item
operator|.
name|doc
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!"
argument_list|)
throw|;
block|}
return|return
name|item
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|index
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|INDEX
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|type
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|TYPE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|id
operator|!=
literal|null
operator|&&
name|this
operator|.
name|doc
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|ID
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|doc
operator|!=
literal|null
condition|)
block|{
name|XContentType
name|contentType
init|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|this
operator|.
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
name|builder
operator|.
name|contentType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
name|Field
operator|.
name|DOC
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|contentType
argument_list|)
operator|.
name|createParser
argument_list|(
name|this
operator|.
name|doc
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|DOC
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|fields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
name|Field
operator|.
name|FIELDS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|fields
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|perFieldAnalyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|PER_FIELD_ANALYZER
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|perFieldAnalyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|routing
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|ROUTING
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|version
operator|!=
name|Versions
operator|.
name|MATCH_ANY
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|VERSION
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|versionType
operator|!=
name|VersionType
operator|.
name|INTERNAL
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Field
operator|.
name|VERSION_TYPE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|this
operator|.
name|versionType
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"{ \"error\" : \""
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|"\"}"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|doc
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|fields
argument_list|)
argument_list|,
name|perFieldAnalyzer
argument_list|,
name|routing
argument_list|,
name|version
argument_list|,
name|versionType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Item
operator|)
condition|)
return|return
literal|false
return|;
name|Item
name|other
init|=
operator|(
name|Item
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|index
argument_list|,
name|other
operator|.
name|index
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|type
argument_list|,
name|other
operator|.
name|type
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|other
operator|.
name|id
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|doc
argument_list|,
name|other
operator|.
name|doc
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|fields
argument_list|,
name|other
operator|.
name|fields
argument_list|)
operator|&&
comment|// otherwise we are comparing pointers
name|Objects
operator|.
name|equals
argument_list|(
name|perFieldAnalyzer
argument_list|,
name|other
operator|.
name|perFieldAnalyzer
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|routing
argument_list|,
name|other
operator|.
name|routing
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|version
argument_list|,
name|other
operator|.
name|version
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|versionType
argument_list|,
name|other
operator|.
name|versionType
argument_list|)
return|;
block|}
block|}
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"mlt"
decl_stmt|;
comment|// document inputs
DECL|field|likeTexts
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|likeTexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|unlikeTexts
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|unlikeTexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|likeItems
specifier|private
name|List
argument_list|<
name|Item
argument_list|>
name|likeItems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|unlikeItems
specifier|private
name|List
argument_list|<
name|Item
argument_list|>
name|unlikeItems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fields
specifier|private
specifier|final
name|String
index|[]
name|fields
decl_stmt|;
comment|// term selection parameters
DECL|field|maxQueryTerms
specifier|private
name|int
name|maxQueryTerms
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|minTermFreq
specifier|private
name|int
name|minTermFreq
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|minDocFreq
specifier|private
name|int
name|minDocFreq
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|maxDocFreq
specifier|private
name|int
name|maxDocFreq
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|minWordLength
specifier|private
name|int
name|minWordLength
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|maxWordLength
specifier|private
name|int
name|maxWordLength
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|stopWords
specifier|private
name|String
index|[]
name|stopWords
init|=
literal|null
decl_stmt|;
DECL|field|analyzer
specifier|private
name|String
name|analyzer
decl_stmt|;
comment|// query formation parameters
DECL|field|minimumShouldMatch
specifier|private
name|String
name|minimumShouldMatch
init|=
literal|null
decl_stmt|;
DECL|field|boostTerms
specifier|private
name|float
name|boostTerms
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|include
specifier|private
name|Boolean
name|include
init|=
literal|null
decl_stmt|;
comment|// other parameters
DECL|field|failOnUnsupportedField
specifier|private
name|Boolean
name|failOnUnsupportedField
decl_stmt|;
DECL|field|PROTOTYPE
specifier|static
specifier|final
name|MoreLikeThisQueryBuilder
name|PROTOTYPE
init|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|()
decl_stmt|;
comment|/**      * Constructs a new more like this query which uses the "_all" field.      */
DECL|method|MoreLikeThisQueryBuilder
specifier|public
name|MoreLikeThisQueryBuilder
parameter_list|()
block|{
name|this
operator|.
name|fields
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Sets the field names that will be used when generating the 'More Like This' query.      *      * @param fields the field names that will be used when generating the 'More Like This' query.      */
DECL|method|MoreLikeThisQueryBuilder
specifier|public
name|MoreLikeThisQueryBuilder
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
comment|/**      * Sets the text to use in order to find documents that are "like" this.      *      * @param likeTexts the text to use when generating the 'More Like This' query.      */
DECL|method|like
specifier|public
name|MoreLikeThisQueryBuilder
name|like
parameter_list|(
name|String
modifier|...
name|likeTexts
parameter_list|)
block|{
name|this
operator|.
name|likeTexts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
return|return
name|addLikeText
argument_list|(
name|likeTexts
argument_list|)
return|;
block|}
comment|/**      * Sets the documents to use in order to find documents that are "like" this.      *      * @param likeItems the documents to use when generating the 'More Like This' query.      */
DECL|method|like
specifier|public
name|MoreLikeThisQueryBuilder
name|like
parameter_list|(
name|Item
modifier|...
name|likeItems
parameter_list|)
block|{
name|this
operator|.
name|likeItems
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
return|return
name|addLikeItem
argument_list|(
name|likeItems
argument_list|)
return|;
block|}
comment|/**      * Adds some text to use in order to find documents that are "like" this.      */
DECL|method|addLikeText
specifier|public
name|MoreLikeThisQueryBuilder
name|addLikeText
parameter_list|(
name|String
modifier|...
name|likeTexts
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|likeTexts
argument_list|,
name|likeTexts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a document to use in order to find documents that are "like" this.      */
DECL|method|addLikeItem
specifier|public
name|MoreLikeThisQueryBuilder
name|addLikeItem
parameter_list|(
name|Item
modifier|...
name|likeItems
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|likeItems
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the text from which the terms should not be selected from.      */
DECL|method|unlike
specifier|public
name|MoreLikeThisQueryBuilder
name|unlike
parameter_list|(
name|String
modifier|...
name|unlikeTexts
parameter_list|)
block|{
name|this
operator|.
name|unlikeTexts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
return|return
name|addUnlikeText
argument_list|(
name|unlikeTexts
argument_list|)
return|;
block|}
comment|/**      * Sets the documents from which the terms should not be selected from.      */
DECL|method|unlike
specifier|public
name|MoreLikeThisQueryBuilder
name|unlike
parameter_list|(
name|Item
modifier|...
name|unlikeItems
parameter_list|)
block|{
name|this
operator|.
name|unlikeItems
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
return|return
name|addUnlikeItem
argument_list|(
name|unlikeItems
argument_list|)
return|;
block|}
comment|/**      * Adds some text to use in order to find documents that are "unlike" this.      */
DECL|method|addUnlikeText
specifier|public
name|MoreLikeThisQueryBuilder
name|addUnlikeText
parameter_list|(
name|String
modifier|...
name|unlikeTexts
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|unlikeTexts
argument_list|,
name|unlikeTexts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a document to use in order to find documents that are "unlike" this.      */
DECL|method|addUnlikeItem
specifier|public
name|MoreLikeThisQueryBuilder
name|addUnlikeItem
parameter_list|(
name|Item
modifier|...
name|unlikeItems
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|unlikeItems
argument_list|,
name|unlikeItems
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the maximum number of query terms that will be included in any generated query.      * Defaults to<tt>25</tt>.      */
DECL|method|maxQueryTerms
specifier|public
name|MoreLikeThisQueryBuilder
name|maxQueryTerms
parameter_list|(
name|int
name|maxQueryTerms
parameter_list|)
block|{
name|this
operator|.
name|maxQueryTerms
operator|=
name|maxQueryTerms
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The frequency below which terms will be ignored in the source doc. The default      * frequency is<tt>2</tt>.      */
DECL|method|minTermFreq
specifier|public
name|MoreLikeThisQueryBuilder
name|minTermFreq
parameter_list|(
name|int
name|minTermFreq
parameter_list|)
block|{
name|this
operator|.
name|minTermFreq
operator|=
name|minTermFreq
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the frequency at which words will be ignored which do not occur in at least this      * many docs. Defaults to<tt>5</tt>.      */
DECL|method|minDocFreq
specifier|public
name|MoreLikeThisQueryBuilder
name|minDocFreq
parameter_list|(
name|int
name|minDocFreq
parameter_list|)
block|{
name|this
operator|.
name|minDocFreq
operator|=
name|minDocFreq
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the maximum frequency in which words may still appear. Words that appear      * in more than this many docs will be ignored. Defaults to unbounded.      */
DECL|method|maxDocFreq
specifier|public
name|MoreLikeThisQueryBuilder
name|maxDocFreq
parameter_list|(
name|int
name|maxDocFreq
parameter_list|)
block|{
name|this
operator|.
name|maxDocFreq
operator|=
name|maxDocFreq
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the minimum word length below which words will be ignored. Defaults      * to<tt>0</tt>.      */
DECL|method|minWordLength
specifier|public
name|MoreLikeThisQueryBuilder
name|minWordLength
parameter_list|(
name|int
name|minWordLength
parameter_list|)
block|{
name|this
operator|.
name|minWordLength
operator|=
name|minWordLength
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the maximum word length above which words will be ignored. Defaults to      * unbounded (<tt>0</tt>).      */
DECL|method|maxWordLength
specifier|public
name|MoreLikeThisQueryBuilder
name|maxWordLength
parameter_list|(
name|int
name|maxWordLength
parameter_list|)
block|{
name|this
operator|.
name|maxWordLength
operator|=
name|maxWordLength
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The analyzer that will be used to analyze the text. Defaults to the analyzer associated with the fied.      */
DECL|method|analyzer
specifier|public
name|MoreLikeThisQueryBuilder
name|analyzer
parameter_list|(
name|String
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Number of terms that must match the generated query expressed in the      * common syntax for minimum should match. Defaults to<tt>30%</tt>.      *      * @see    org.elasticsearch.common.lucene.search.Queries#calculateMinShouldMatch(int, String)      */
DECL|method|minimumShouldMatch
specifier|public
name|MoreLikeThisQueryBuilder
name|minimumShouldMatch
parameter_list|(
name|String
name|minimumShouldMatch
parameter_list|)
block|{
name|this
operator|.
name|minimumShouldMatch
operator|=
name|minimumShouldMatch
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the boost factor to use when boosting terms. Defaults to<tt>1</tt>.      */
DECL|method|boostTerms
specifier|public
name|MoreLikeThisQueryBuilder
name|boostTerms
parameter_list|(
name|float
name|boostTerms
parameter_list|)
block|{
name|this
operator|.
name|boostTerms
operator|=
name|boostTerms
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Whether to include the input documents. Defaults to<tt>false</tt>      */
DECL|method|include
specifier|public
name|MoreLikeThisQueryBuilder
name|include
parameter_list|(
name|boolean
name|include
parameter_list|)
block|{
name|this
operator|.
name|include
operator|=
name|include
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Whether to fail or return no result when this query is run against a field which is not supported such as binary/numeric fields.      */
DECL|method|failOnUnsupportedField
specifier|public
name|MoreLikeThisQueryBuilder
name|failOnUnsupportedField
parameter_list|(
name|boolean
name|fail
parameter_list|)
block|{
name|failOnUnsupportedField
operator|=
name|fail
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The text to use in order to find documents that are "like" this.      */
annotation|@
name|Deprecated
DECL|method|likeText
specifier|public
name|MoreLikeThisQueryBuilder
name|likeText
parameter_list|(
name|String
name|likeText
parameter_list|)
block|{
return|return
name|like
argument_list|(
name|likeText
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|ids
specifier|public
name|MoreLikeThisQueryBuilder
name|ids
parameter_list|(
name|String
modifier|...
name|ids
parameter_list|)
block|{
name|Item
index|[]
name|items
init|=
operator|new
name|Item
index|[
name|ids
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|items
index|[
name|i
index|]
operator|=
operator|new
name|Item
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|like
argument_list|(
name|items
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|docs
specifier|public
name|MoreLikeThisQueryBuilder
name|docs
parameter_list|(
name|Item
modifier|...
name|docs
parameter_list|)
block|{
return|return
name|like
argument_list|(
name|docs
argument_list|)
return|;
block|}
comment|/**      * Sets the documents from which the terms should not be selected from.      *      * @Deprecated Use {@link #unlike(Item...)} instead      */
annotation|@
name|Deprecated
DECL|method|ignoreLike
specifier|public
name|MoreLikeThisQueryBuilder
name|ignoreLike
parameter_list|(
name|Item
modifier|...
name|docs
parameter_list|)
block|{
return|return
name|unlike
argument_list|(
name|docs
argument_list|)
return|;
block|}
comment|/**      * Sets the text from which the terms should not be selected from.      *      * @Deprecated Use {@link #unlike(String...)} instead.      */
annotation|@
name|Deprecated
DECL|method|ignoreLike
specifier|public
name|MoreLikeThisQueryBuilder
name|ignoreLike
parameter_list|(
name|String
modifier|...
name|likeText
parameter_list|)
block|{
return|return
name|unlike
argument_list|(
name|likeText
argument_list|)
return|;
block|}
comment|/**      * Adds a document to use in order to find documents that are "like" this.      */
annotation|@
name|Deprecated
DECL|method|addItem
specifier|public
name|MoreLikeThisQueryBuilder
name|addItem
parameter_list|(
name|Item
modifier|...
name|likeItems
parameter_list|)
block|{
return|return
name|addLikeItem
argument_list|(
name|likeItems
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|FIELDS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|likeTexts
operator|.
name|isEmpty
argument_list|()
operator|&&
name|this
operator|.
name|likeItems
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"more_like_this requires '"
operator|+
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|LIKE
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"' to be provided"
argument_list|)
throw|;
block|}
else|else
block|{
name|buildLikeField
argument_list|(
name|builder
argument_list|,
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|LIKE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unlikeTexts
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|unlikeItems
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buildLikeField
argument_list|(
name|builder
argument_list|,
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|UNLIKE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|unlikeTexts
argument_list|,
name|unlikeItems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxQueryTerms
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|MAX_QUERY_TERMS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxQueryTerms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minTermFreq
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|MIN_TERM_FREQ
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minTermFreq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minDocFreq
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|MIN_DOC_FREQ
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minDocFreq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxDocFreq
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|MAX_DOC_FREQ
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxDocFreq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minWordLength
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|MIN_WORD_LENGTH
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minWordLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxWordLength
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|MAX_WORD_LENGTH
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|maxWordLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stopWords
operator|!=
literal|null
operator|&&
name|stopWords
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|STOP_WORDS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|ANALYZER
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minimumShouldMatch
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|MINIMUM_SHOULD_MATCH
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|minimumShouldMatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boostTerms
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|BOOST_TERMS
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|boostTerms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|include
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|INCLUDE
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|include
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failOnUnsupportedField
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|MoreLikeThisQueryParser
operator|.
name|Field
operator|.
name|FAIL_ON_UNSUPPORTED_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|failOnUnsupportedField
argument_list|)
expr_stmt|;
block|}
name|printBoostAndQueryName
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|buildLikeField
specifier|private
specifier|static
name|void
name|buildLikeField
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|texts
parameter_list|,
name|List
argument_list|<
name|Item
argument_list|>
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|text
range|:
name|texts
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Item
name|item
range|:
name|items
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
block|}
end_class

end_unit

