begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|fielddata
operator|.
name|FieldDataFieldsParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|innerhits
operator|.
name|InnerHitsSubSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|script
operator|.
name|ScriptFieldsParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|source
operator|.
name|FetchSourceParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlighterParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SubSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortParseElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|InnerHitsQueryParserHelper
specifier|public
class|class
name|InnerHitsQueryParserHelper
block|{
DECL|field|sortParseElement
specifier|private
specifier|final
name|SortParseElement
name|sortParseElement
decl_stmt|;
DECL|field|sourceParseElement
specifier|private
specifier|final
name|FetchSourceParseElement
name|sourceParseElement
decl_stmt|;
DECL|field|highlighterParseElement
specifier|private
specifier|final
name|HighlighterParseElement
name|highlighterParseElement
decl_stmt|;
DECL|field|scriptFieldsParseElement
specifier|private
specifier|final
name|ScriptFieldsParseElement
name|scriptFieldsParseElement
decl_stmt|;
DECL|field|fieldDataFieldsParseElement
specifier|private
specifier|final
name|FieldDataFieldsParseElement
name|fieldDataFieldsParseElement
decl_stmt|;
annotation|@
name|Inject
DECL|method|InnerHitsQueryParserHelper
specifier|public
name|InnerHitsQueryParserHelper
parameter_list|(
name|SortParseElement
name|sortParseElement
parameter_list|,
name|FetchSourceParseElement
name|sourceParseElement
parameter_list|,
name|HighlighterParseElement
name|highlighterParseElement
parameter_list|,
name|ScriptFieldsParseElement
name|scriptFieldsParseElement
parameter_list|,
name|FieldDataFieldsParseElement
name|fieldDataFieldsParseElement
parameter_list|)
block|{
name|this
operator|.
name|sortParseElement
operator|=
name|sortParseElement
expr_stmt|;
name|this
operator|.
name|sourceParseElement
operator|=
name|sourceParseElement
expr_stmt|;
name|this
operator|.
name|highlighterParseElement
operator|=
name|highlighterParseElement
expr_stmt|;
name|this
operator|.
name|scriptFieldsParseElement
operator|=
name|scriptFieldsParseElement
expr_stmt|;
name|this
operator|.
name|fieldDataFieldsParseElement
operator|=
name|fieldDataFieldsParseElement
expr_stmt|;
block|}
DECL|method|parse
specifier|public
name|InnerHitsSubSearchContext
name|parse
parameter_list|(
name|QueryParseContext
name|parserContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|QueryParsingException
block|{
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|innerHitName
init|=
literal|null
decl_stmt|;
name|SubSearchContext
name|subSearchContext
init|=
operator|new
name|SubSearchContext
argument_list|(
name|SearchContext
operator|.
name|current
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|XContentParser
name|parser
init|=
name|parserContext
operator|.
name|parser
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|fieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"name"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|innerHitName
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parseCommonInnerHitOptions
argument_list|(
name|parser
argument_list|,
name|token
argument_list|,
name|fieldName
argument_list|,
name|subSearchContext
argument_list|,
name|sortParseElement
argument_list|,
name|sourceParseElement
argument_list|,
name|highlighterParseElement
argument_list|,
name|scriptFieldsParseElement
argument_list|,
name|fieldDataFieldsParseElement
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|parseCommonInnerHitOptions
argument_list|(
name|parser
argument_list|,
name|token
argument_list|,
name|fieldName
argument_list|,
name|subSearchContext
argument_list|,
name|sortParseElement
argument_list|,
name|sourceParseElement
argument_list|,
name|highlighterParseElement
argument_list|,
name|scriptFieldsParseElement
argument_list|,
name|fieldDataFieldsParseElement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|parserContext
argument_list|,
literal|"Failed to parse [_inner_hits]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|InnerHitsSubSearchContext
argument_list|(
name|innerHitName
argument_list|,
name|subSearchContext
argument_list|)
return|;
block|}
DECL|method|parseCommonInnerHitOptions
specifier|public
specifier|static
name|void
name|parseCommonInnerHitOptions
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|XContentParser
operator|.
name|Token
name|token
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|SubSearchContext
name|subSearchContext
parameter_list|,
name|SortParseElement
name|sortParseElement
parameter_list|,
name|FetchSourceParseElement
name|sourceParseElement
parameter_list|,
name|HighlighterParseElement
name|highlighterParseElement
parameter_list|,
name|ScriptFieldsParseElement
name|scriptFieldsParseElement
parameter_list|,
name|FieldDataFieldsParseElement
name|fieldDataFieldsParseElement
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|"sort"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|sortParseElement
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|subSearchContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_source"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|sourceParseElement
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|subSearchContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
switch|switch
condition|(
name|fieldName
condition|)
block|{
case|case
literal|"highlight"
case|:
name|highlighterParseElement
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|subSearchContext
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"scriptFields"
case|:
case|case
literal|"script_fields"
case|:
name|scriptFieldsParseElement
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|subSearchContext
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" for nested query: ["
operator|+
name|fieldName
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
switch|switch
condition|(
name|fieldName
condition|)
block|{
case|case
literal|"fielddataFields"
case|:
case|case
literal|"fielddata_fields"
case|:
name|fieldDataFieldsParseElement
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|subSearchContext
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"fields"
case|:
name|boolean
name|added
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|String
name|name
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
name|subSearchContext
operator|.
name|fieldNames
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
name|subSearchContext
operator|.
name|emptyFieldNames
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" for nested query: ["
operator|+
name|fieldName
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|fieldName
condition|)
block|{
case|case
literal|"from"
case|:
name|subSearchContext
operator|.
name|from
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"size"
case|:
name|subSearchContext
operator|.
name|size
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"track_scores"
case|:
case|case
literal|"trackScores"
case|:
name|subSearchContext
operator|.
name|trackScores
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"version"
case|:
name|subSearchContext
operator|.
name|version
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"explain"
case|:
name|subSearchContext
operator|.
name|explain
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"fields"
case|:
name|subSearchContext
operator|.
name|fieldNames
argument_list|()
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown key for a "
operator|+
name|token
operator|+
literal|" for nested query: ["
operator|+
name|fieldName
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

