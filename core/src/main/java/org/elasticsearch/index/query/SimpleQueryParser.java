begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CachingTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermToBytesRefAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Wrapper class for Lucene's SimpleQueryParser that allows us to redefine  * different types of queries.  */
end_comment

begin_class
DECL|class|SimpleQueryParser
specifier|public
class|class
name|SimpleQueryParser
extends|extends
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
block|{
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
comment|/** Creates a new parser with custom flags used to enable/disable certain features. */
DECL|method|SimpleQueryParser
specifier|public
name|SimpleQueryParser
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|weights
parameter_list|,
name|int
name|flags
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|analyzer
argument_list|,
name|weights
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
comment|/**      * Rethrow the runtime exception, unless the lenient flag has been set, returns null      */
DECL|method|rethrowUnlessLenient
specifier|private
name|Query
name|rethrowUnlessLenient
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|lenient
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
name|e
throw|;
block|}
annotation|@
name|Override
DECL|method|newDefaultQuery
specifier|public
name|Query
name|newDefaultQuery
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entry
range|:
name|weights
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|Query
name|q
init|=
name|createBooleanQuery
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|text
argument_list|,
name|super
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|setBoost
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|rethrowUnlessLenient
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|simplify
argument_list|(
name|bq
argument_list|)
return|;
block|}
comment|/**      * Dispatches to Lucene's SimpleQueryParser's newFuzzyQuery, optionally      * lowercasing the term first      */
annotation|@
name|Override
DECL|method|newFuzzyQuery
specifier|public
name|Query
name|newFuzzyQuery
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|fuzziness
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|lowercaseExpandedTerms
argument_list|()
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|toLowerCase
argument_list|(
name|settings
operator|.
name|locale
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entry
range|:
name|weights
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|Query
name|q
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|text
argument_list|)
argument_list|,
name|fuzziness
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|setBoost
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|rethrowUnlessLenient
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|simplify
argument_list|(
name|bq
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newPhraseQuery
specifier|public
name|Query
name|newPhraseQuery
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|slop
parameter_list|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entry
range|:
name|weights
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|Query
name|q
init|=
name|createPhraseQuery
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|text
argument_list|,
name|slop
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|setBoost
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|rethrowUnlessLenient
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|simplify
argument_list|(
name|bq
argument_list|)
return|;
block|}
comment|/**      * Dispatches to Lucene's SimpleQueryParser's newPrefixQuery, optionally      * lowercasing the term first or trying to analyze terms      */
annotation|@
name|Override
DECL|method|newPrefixQuery
specifier|public
name|Query
name|newPrefixQuery
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|lowercaseExpandedTerms
argument_list|()
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|toLowerCase
argument_list|(
name|settings
operator|.
name|locale
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entry
range|:
name|weights
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|settings
operator|.
name|analyzeWildcard
argument_list|()
condition|)
block|{
name|Query
name|analyzedQuery
init|=
name|newPossiblyAnalyzedQuery
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|analyzedQuery
operator|.
name|setBoost
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|analyzedQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PrefixQuery
name|prefix
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|prefix
operator|.
name|setBoost
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|prefix
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
return|return
name|rethrowUnlessLenient
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|simplify
argument_list|(
name|bq
argument_list|)
return|;
block|}
comment|/**      * Analyze the given string using its analyzer, constructing either a      * {@code PrefixQuery} or a {@code BooleanQuery} made up      * of {@code PrefixQuery}s      */
DECL|method|newPossiblyAnalyzedQuery
specifier|private
name|Query
name|newPossiblyAnalyzedQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
block|{
try|try
init|(
name|TokenStream
name|source
init|=
name|getAnalyzer
argument_list|()
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
init|)
block|{
comment|// Use the analyzer to get all the tokens, and then build a TermQuery,
comment|// PhraseQuery, or nothing based on the term count
name|CachingTokenFilter
name|buffer
init|=
operator|new
name|CachingTokenFilter
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|TermToBytesRefAttribute
name|termAtt
init|=
literal|null
decl_stmt|;
name|int
name|numTokens
init|=
literal|0
decl_stmt|;
name|boolean
name|hasMoreTokens
init|=
literal|false
decl_stmt|;
name|termAtt
operator|=
name|buffer
operator|.
name|getAttribute
argument_list|(
name|TermToBytesRefAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|termAtt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hasMoreTokens
operator|=
name|buffer
operator|.
name|incrementToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|hasMoreTokens
condition|)
block|{
name|numTokens
operator|++
expr_stmt|;
name|hasMoreTokens
operator|=
name|buffer
operator|.
name|incrementToken
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// rewind buffer
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|BytesRef
name|bytes
init|=
name|termAtt
operator|==
literal|null
condition|?
literal|null
else|:
name|termAtt
operator|.
name|getBytesRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|numTokens
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|numTokens
operator|==
literal|1
condition|)
block|{
try|try
block|{
name|boolean
name|hasNext
init|=
name|buffer
operator|.
name|incrementToken
argument_list|()
decl_stmt|;
assert|assert
name|hasNext
operator|==
literal|true
assert|;
name|termAtt
operator|.
name|fillBytesRef
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// safe to ignore, because we know the number of tokens
block|}
return|return
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTokens
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|boolean
name|hasNext
init|=
name|buffer
operator|.
name|incrementToken
argument_list|()
decl_stmt|;
assert|assert
name|hasNext
operator|==
literal|true
assert|;
name|termAtt
operator|.
name|fillBytesRef
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// safe to ignore, because we know the number of tokens
block|}
name|bq
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|bq
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Bail on any exceptions, going with a regular prefix query
return|return
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Class encapsulating the settings for the SimpleQueryString query, with      * their default values      */
DECL|class|Settings
specifier|static
class|class
name|Settings
block|{
comment|/** Locale to use for parsing. */
DECL|field|locale
specifier|private
name|Locale
name|locale
init|=
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_LOCALE
decl_stmt|;
comment|/** Specifies whether parsed terms should be lowercased. */
DECL|field|lowercaseExpandedTerms
specifier|private
name|boolean
name|lowercaseExpandedTerms
init|=
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_LOWERCASE_EXPANDED_TERMS
decl_stmt|;
comment|/** Specifies whether lenient query parsing should be used. */
DECL|field|lenient
specifier|private
name|boolean
name|lenient
init|=
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_LENIENT
decl_stmt|;
comment|/** Specifies whether wildcards should be analyzed. */
DECL|field|analyzeWildcard
specifier|private
name|boolean
name|analyzeWildcard
init|=
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_ANALYZE_WILDCARD
decl_stmt|;
comment|/**          * Generates default {@link Settings} object (uses ROOT locale, does          * lowercase terms, no lenient parsing, no wildcard analysis).          * */
DECL|method|Settings
specifier|public
name|Settings
parameter_list|()
block|{         }
DECL|method|Settings
specifier|public
name|Settings
parameter_list|(
name|Locale
name|locale
parameter_list|,
name|Boolean
name|lowercaseExpandedTerms
parameter_list|,
name|Boolean
name|lenient
parameter_list|,
name|Boolean
name|analyzeWildcard
parameter_list|)
block|{
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
name|this
operator|.
name|lowercaseExpandedTerms
operator|=
name|lowercaseExpandedTerms
expr_stmt|;
name|this
operator|.
name|lenient
operator|=
name|lenient
expr_stmt|;
name|this
operator|.
name|analyzeWildcard
operator|=
name|analyzeWildcard
expr_stmt|;
block|}
comment|/** Specifies the locale to use for parsing, Locale.ROOT by default. */
DECL|method|locale
specifier|public
name|void
name|locale
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
name|this
operator|.
name|locale
operator|=
operator|(
name|locale
operator|!=
literal|null
operator|)
condition|?
name|locale
else|:
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_LOCALE
expr_stmt|;
block|}
comment|/** Returns the locale to use for parsing. */
DECL|method|locale
specifier|public
name|Locale
name|locale
parameter_list|()
block|{
return|return
name|this
operator|.
name|locale
return|;
block|}
comment|/**          * Specifies whether to lowercase parse terms, defaults to true if          * unset.          */
DECL|method|lowercaseExpandedTerms
specifier|public
name|void
name|lowercaseExpandedTerms
parameter_list|(
name|boolean
name|lowercaseExpandedTerms
parameter_list|)
block|{
name|this
operator|.
name|lowercaseExpandedTerms
operator|=
name|lowercaseExpandedTerms
expr_stmt|;
block|}
comment|/** Returns whether to lowercase parse terms. */
DECL|method|lowercaseExpandedTerms
specifier|public
name|boolean
name|lowercaseExpandedTerms
parameter_list|()
block|{
return|return
name|this
operator|.
name|lowercaseExpandedTerms
return|;
block|}
comment|/** Specifies whether to use lenient parsing, defaults to false. */
DECL|method|lenient
specifier|public
name|void
name|lenient
parameter_list|(
name|boolean
name|lenient
parameter_list|)
block|{
name|this
operator|.
name|lenient
operator|=
name|lenient
expr_stmt|;
block|}
comment|/** Returns whether to use lenient parsing. */
DECL|method|lenient
specifier|public
name|boolean
name|lenient
parameter_list|()
block|{
return|return
name|this
operator|.
name|lenient
return|;
block|}
comment|/** Specifies whether to analyze wildcards. Defaults to false if unset. */
DECL|method|analyzeWildcard
specifier|public
name|void
name|analyzeWildcard
parameter_list|(
name|boolean
name|analyzeWildcard
parameter_list|)
block|{
name|this
operator|.
name|analyzeWildcard
operator|=
name|analyzeWildcard
expr_stmt|;
block|}
comment|/** Returns whether to analyze wildcards. */
DECL|method|analyzeWildcard
specifier|public
name|boolean
name|analyzeWildcard
parameter_list|()
block|{
return|return
name|analyzeWildcard
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// checking the return value of toLanguageTag() for locales only.
comment|// For further reasoning see
comment|// https://issues.apache.org/jira/browse/LUCENE-4021
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|locale
operator|.
name|toLanguageTag
argument_list|()
argument_list|,
name|lowercaseExpandedTerms
argument_list|,
name|lenient
argument_list|,
name|analyzeWildcard
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Settings
name|other
init|=
operator|(
name|Settings
operator|)
name|obj
decl_stmt|;
comment|// checking the return value of toLanguageTag() for locales only.
comment|// For further reasoning see
comment|// https://issues.apache.org/jira/browse/LUCENE-4021
return|return
operator|(
name|Objects
operator|.
name|equals
argument_list|(
name|locale
operator|.
name|toLanguageTag
argument_list|()
argument_list|,
name|other
operator|.
name|locale
operator|.
name|toLanguageTag
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|lowercaseExpandedTerms
argument_list|,
name|other
operator|.
name|lowercaseExpandedTerms
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|lenient
argument_list|,
name|other
operator|.
name|lenient
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|analyzeWildcard
argument_list|,
name|other
operator|.
name|analyzeWildcard
argument_list|)
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

