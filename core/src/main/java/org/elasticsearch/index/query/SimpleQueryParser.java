begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SynonymQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Wrapper class for Lucene's SimpleQueryParser that allows us to redefine  * different types of queries.  */
end_comment

begin_class
DECL|class|SimpleQueryParser
specifier|public
class|class
name|SimpleQueryParser
extends|extends
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|simple
operator|.
name|SimpleQueryParser
block|{
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|context
specifier|private
name|QueryShardContext
name|context
decl_stmt|;
comment|/** Creates a new parser with custom flags used to enable/disable certain features. */
DECL|method|SimpleQueryParser
specifier|public
name|SimpleQueryParser
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|weights
parameter_list|,
name|int
name|flags
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|analyzer
argument_list|,
name|weights
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**      * Rethrow the runtime exception, unless the lenient flag has been set, returns null      */
DECL|method|rethrowUnlessLenient
specifier|private
name|Query
name|rethrowUnlessLenient
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|lenient
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
name|e
throw|;
block|}
annotation|@
name|Override
DECL|method|newTermQuery
specifier|protected
name|Query
name|newTermQuery
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
name|MappedFieldType
name|currentFieldType
init|=
name|context
operator|.
name|fieldMapper
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentFieldType
operator|==
literal|null
operator|||
name|currentFieldType
operator|.
name|tokenized
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|newTermQuery
argument_list|(
name|term
argument_list|)
return|;
block|}
return|return
name|currentFieldType
operator|.
name|termQuery
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newDefaultQuery
specifier|public
name|Query
name|newDefaultQuery
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entry
range|:
name|weights
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|Query
name|q
init|=
name|createBooleanQuery
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|text
argument_list|,
name|super
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|bq
operator|.
name|add
argument_list|(
name|wrapWithBoost
argument_list|(
name|q
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|rethrowUnlessLenient
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|simplify
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Dispatches to Lucene's SimpleQueryParser's newFuzzyQuery, optionally      * lowercasing the term first      */
annotation|@
name|Override
DECL|method|newFuzzyQuery
specifier|public
name|Query
name|newFuzzyQuery
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|fuzziness
parameter_list|)
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entry
range|:
name|weights
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|BytesRef
name|term
init|=
name|getAnalyzer
argument_list|()
operator|.
name|normalize
argument_list|(
name|fieldName
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|term
argument_list|)
argument_list|,
name|fuzziness
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|wrapWithBoost
argument_list|(
name|query
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|rethrowUnlessLenient
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|simplify
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newPhraseQuery
specifier|public
name|Query
name|newPhraseQuery
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|slop
parameter_list|)
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entry
range|:
name|weights
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|String
name|field
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|quoteFieldSuffix
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|quoteField
init|=
name|field
operator|+
name|settings
operator|.
name|quoteFieldSuffix
argument_list|()
decl_stmt|;
name|MappedFieldType
name|quotedFieldType
init|=
name|context
operator|.
name|fieldMapper
argument_list|(
name|quoteField
argument_list|)
decl_stmt|;
if|if
condition|(
name|quotedFieldType
operator|!=
literal|null
condition|)
block|{
name|field
operator|=
name|quoteField
expr_stmt|;
block|}
block|}
name|Float
name|boost
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|createPhraseQuery
argument_list|(
name|field
argument_list|,
name|text
argument_list|,
name|slop
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|bq
operator|.
name|add
argument_list|(
name|wrapWithBoost
argument_list|(
name|q
argument_list|,
name|boost
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|rethrowUnlessLenient
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|simplify
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Dispatches to Lucene's SimpleQueryParser's newPrefixQuery, optionally      * lowercasing the term first or trying to analyze terms      */
annotation|@
name|Override
DECL|method|newPrefixQuery
specifier|public
name|Query
name|newPrefixQuery
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|entry
range|:
name|weights
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|settings
operator|.
name|analyzeWildcard
argument_list|()
condition|)
block|{
name|Query
name|analyzedQuery
init|=
name|newPossiblyAnalyzedQuery
argument_list|(
name|fieldName
argument_list|,
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzedQuery
operator|!=
literal|null
condition|)
block|{
name|bq
operator|.
name|add
argument_list|(
name|wrapWithBoost
argument_list|(
name|analyzedQuery
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Term
name|term
init|=
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|getAnalyzer
argument_list|()
operator|.
name|normalize
argument_list|(
name|fieldName
argument_list|,
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|PrefixQuery
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|wrapWithBoost
argument_list|(
name|query
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
return|return
name|rethrowUnlessLenient
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|simplify
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|wrapWithBoost
specifier|private
specifier|static
name|Query
name|wrapWithBoost
parameter_list|(
name|Query
name|query
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
if|if
condition|(
name|boost
operator|!=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
condition|)
block|{
return|return
operator|new
name|BoostQuery
argument_list|(
name|query
argument_list|,
name|boost
argument_list|)
return|;
block|}
return|return
name|query
return|;
block|}
comment|/**      * Analyze the given string using its analyzer, constructing either a      * {@code PrefixQuery} or a {@code BooleanQuery} made up      * of {@code TermQuery}s and {@code PrefixQuery}s      */
DECL|method|newPossiblyAnalyzedQuery
specifier|private
name|Query
name|newPossiblyAnalyzedQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|tlist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// get Analyzer from superclass and tokenize the term
try|try
init|(
name|TokenStream
name|source
init|=
name|getAnalyzer
argument_list|()
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
init|)
block|{
name|source
operator|.
name|reset
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|BytesRef
argument_list|>
name|currentPos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|source
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PositionIncrementAttribute
name|posAtt
init|=
name|source
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|hasMoreTokens
init|=
name|source
operator|.
name|incrementToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|hasMoreTokens
condition|)
block|{
if|if
condition|(
name|currentPos
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|&&
name|posAtt
operator|.
name|getPositionIncrement
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tlist
operator|.
name|add
argument_list|(
name|currentPos
argument_list|)
expr_stmt|;
name|currentPos
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|final
name|BytesRef
name|term
init|=
name|getAnalyzer
argument_list|()
operator|.
name|normalize
argument_list|(
name|field
argument_list|,
name|termAtt
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|currentPos
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|hasMoreTokens
operator|=
name|source
operator|.
name|incrementToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentPos
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|tlist
operator|.
name|add
argument_list|(
name|currentPos
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
comment|// TODO: we should not ignore the exception and return a prefix query with the original term ?
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Bail on any exceptions, going with a regular prefix query
return|return
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|tlist
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|tlist
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|tlist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|tlist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|// build a boolean query with prefix on the last position only.
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|tlist
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|List
argument_list|<
name|BytesRef
argument_list|>
name|plist
init|=
name|tlist
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|boolean
name|isLastPos
init|=
operator|(
name|pos
operator|==
name|tlist
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|Query
name|posQuery
decl_stmt|;
if|if
condition|(
name|plist
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|isLastPos
condition|)
block|{
name|posQuery
operator|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|plist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|posQuery
operator|=
name|newTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|plist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isLastPos
operator|==
literal|false
condition|)
block|{
comment|// build a synonym query for terms in the same position.
name|Term
index|[]
name|terms
init|=
operator|new
name|Term
index|[
name|plist
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|plist
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|terms
index|[
name|i
index|]
operator|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|plist
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|posQuery
operator|=
operator|new
name|SynonymQuery
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BooleanQuery
operator|.
name|Builder
name|innerBuilder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|BytesRef
name|token
range|:
name|plist
control|)
block|{
name|innerBuilder
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|token
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|posQuery
operator|=
name|innerBuilder
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|posQuery
argument_list|,
name|getDefaultOperator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Class encapsulating the settings for the SimpleQueryString query, with      * their default values      */
DECL|class|Settings
specifier|static
class|class
name|Settings
block|{
comment|/** Specifies whether lenient query parsing should be used. */
DECL|field|lenient
specifier|private
name|boolean
name|lenient
init|=
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_LENIENT
decl_stmt|;
comment|/** Specifies whether wildcards should be analyzed. */
DECL|field|analyzeWildcard
specifier|private
name|boolean
name|analyzeWildcard
init|=
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_ANALYZE_WILDCARD
decl_stmt|;
comment|/** Specifies a suffix, if any, to apply to field names for phrase matching. */
DECL|field|quoteFieldSuffix
specifier|private
name|String
name|quoteFieldSuffix
init|=
literal|null
decl_stmt|;
comment|/**          * Generates default {@link Settings} object (uses ROOT locale, does          * lowercase terms, no lenient parsing, no wildcard analysis).          * */
DECL|method|Settings
name|Settings
parameter_list|()
block|{         }
DECL|method|Settings
name|Settings
parameter_list|(
name|Settings
name|other
parameter_list|)
block|{
name|this
operator|.
name|lenient
operator|=
name|other
operator|.
name|lenient
expr_stmt|;
name|this
operator|.
name|analyzeWildcard
operator|=
name|other
operator|.
name|analyzeWildcard
expr_stmt|;
name|this
operator|.
name|quoteFieldSuffix
operator|=
name|other
operator|.
name|quoteFieldSuffix
expr_stmt|;
block|}
comment|/** Specifies whether to use lenient parsing, defaults to false. */
DECL|method|lenient
specifier|public
name|void
name|lenient
parameter_list|(
name|boolean
name|lenient
parameter_list|)
block|{
name|this
operator|.
name|lenient
operator|=
name|lenient
expr_stmt|;
block|}
comment|/** Returns whether to use lenient parsing. */
DECL|method|lenient
specifier|public
name|boolean
name|lenient
parameter_list|()
block|{
return|return
name|this
operator|.
name|lenient
return|;
block|}
comment|/** Specifies whether to analyze wildcards. Defaults to false if unset. */
DECL|method|analyzeWildcard
specifier|public
name|void
name|analyzeWildcard
parameter_list|(
name|boolean
name|analyzeWildcard
parameter_list|)
block|{
name|this
operator|.
name|analyzeWildcard
operator|=
name|analyzeWildcard
expr_stmt|;
block|}
comment|/** Returns whether to analyze wildcards. */
DECL|method|analyzeWildcard
specifier|public
name|boolean
name|analyzeWildcard
parameter_list|()
block|{
return|return
name|analyzeWildcard
return|;
block|}
comment|/**          * Set the suffix to append to field names for phrase matching.          */
DECL|method|quoteFieldSuffix
specifier|public
name|void
name|quoteFieldSuffix
parameter_list|(
name|String
name|suffix
parameter_list|)
block|{
name|this
operator|.
name|quoteFieldSuffix
operator|=
name|suffix
expr_stmt|;
block|}
comment|/**          * Return the suffix to append for phrase matching, or {@code null} if          * no suffix should be appended.          */
DECL|method|quoteFieldSuffix
specifier|public
name|String
name|quoteFieldSuffix
parameter_list|()
block|{
return|return
name|quoteFieldSuffix
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|lenient
argument_list|,
name|analyzeWildcard
argument_list|,
name|quoteFieldSuffix
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Settings
name|other
init|=
operator|(
name|Settings
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|lenient
argument_list|,
name|other
operator|.
name|lenient
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|analyzeWildcard
argument_list|,
name|other
operator|.
name|analyzeWildcard
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|quoteFieldSuffix
argument_list|,
name|other
operator|.
name|quoteFieldSuffix
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

