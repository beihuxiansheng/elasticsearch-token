begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ToXContentToBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchAllQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|ParsedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
operator|.
name|ScriptField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|fielddata
operator|.
name|FieldDataFieldsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|fielddata
operator|.
name|FieldDataFieldsFetchSubPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|innerhits
operator|.
name|InnerHitsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|source
operator|.
name|FetchSourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
import|;
end_import

begin_class
DECL|class|InnerHitBuilder
specifier|public
specifier|final
class|class
name|InnerHitBuilder
extends|extends
name|ToXContentToBytes
implements|implements
name|Writeable
argument_list|<
name|InnerHitBuilder
argument_list|>
block|{
DECL|field|NAME_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|NAME_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
DECL|field|NESTED_PATH_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|NESTED_PATH_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
DECL|field|PARENT_CHILD_TYPE_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|PARENT_CHILD_TYPE_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
DECL|field|PARSER
specifier|private
specifier|final
specifier|static
name|ObjectParser
argument_list|<
name|InnerHitBuilder
argument_list|,
name|QueryParseContext
argument_list|>
name|PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"inner_hits"
argument_list|,
name|InnerHitBuilder
operator|::
operator|new
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareString
argument_list|(
name|InnerHitBuilder
operator|::
name|setName
argument_list|,
name|NAME_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|InnerHitBuilder
operator|::
name|setNestedPath
argument_list|,
name|NESTED_PATH_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|InnerHitBuilder
operator|::
name|setParentChildType
argument_list|,
name|PARENT_CHILD_TYPE_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|InnerHitBuilder
operator|::
name|setFrom
argument_list|,
name|SearchSourceBuilder
operator|.
name|FROM_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|InnerHitBuilder
operator|::
name|setSize
argument_list|,
name|SearchSourceBuilder
operator|.
name|SIZE_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareBoolean
argument_list|(
name|InnerHitBuilder
operator|::
name|setExplain
argument_list|,
name|SearchSourceBuilder
operator|.
name|EXPLAIN_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareBoolean
argument_list|(
name|InnerHitBuilder
operator|::
name|setVersion
argument_list|,
name|SearchSourceBuilder
operator|.
name|VERSION_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareBoolean
argument_list|(
name|InnerHitBuilder
operator|::
name|setTrackScores
argument_list|,
name|SearchSourceBuilder
operator|.
name|TRACK_SCORES_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareStringArray
argument_list|(
name|InnerHitBuilder
operator|::
name|setFieldNames
argument_list|,
name|SearchSourceBuilder
operator|.
name|FIELDS_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareStringArray
argument_list|(
name|InnerHitBuilder
operator|::
name|setFieldDataFields
argument_list|,
name|SearchSourceBuilder
operator|.
name|FIELDDATA_FIELDS_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|i
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
try|try
block|{
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|XContentParser
operator|.
name|Token
name|token
init|=
name|p
operator|.
name|nextToken
argument_list|()
init|;
name|token
operator|!=
name|END_OBJECT
condition|;
name|token
operator|=
name|p
operator|.
name|nextToken
argument_list|()
control|)
block|{
name|scriptFields
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|p
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|.
name|setScriptFields
argument_list|(
name|scriptFields
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|p
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Could not parse inner script definition"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|SearchSourceBuilder
operator|.
name|SCRIPT_FIELDS_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|i
parameter_list|,
name|c
parameter_list|)
lambda|->
name|i
operator|.
name|setSorts
argument_list|(
name|SortBuilder
operator|.
name|fromXContent
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|,
name|SearchSourceBuilder
operator|.
name|SORT_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT_ARRAY
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|i
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
try|try
block|{
name|i
operator|.
name|setFetchSourceContext
argument_list|(
name|FetchSourceContext
operator|.
name|parse
argument_list|(
name|p
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|p
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Could not parse inner _source definition"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|SearchSourceBuilder
operator|.
name|_SOURCE_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT_OR_BOOLEAN
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareObject
argument_list|(
name|InnerHitBuilder
operator|::
name|setHighlightBuilder
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|HighlightBuilder
operator|.
name|fromXContent
argument_list|(
name|c
argument_list|)
argument_list|,
name|SearchSourceBuilder
operator|.
name|HIGHLIGHT_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareObject
argument_list|(
name|InnerHitBuilder
operator|::
name|setQuery
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
try|try
block|{
return|return
name|c
operator|.
name|parseInnerQueryBuilder
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|p
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Could not parse inner query definition"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|SearchSourceBuilder
operator|.
name|QUERY_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareObject
argument_list|(
name|InnerHitBuilder
operator|::
name|setInnerHitsBuilder
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
try|try
block|{
return|return
name|InnerHitsBuilder
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
name|c
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|p
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Could not parse inner query definition"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|SearchSourceBuilder
operator|.
name|INNER_HITS_FIELD
argument_list|)
expr_stmt|;
block|}
DECL|method|optionalReadFromStream
specifier|public
specifier|static
name|InnerHitBuilder
name|optionalReadFromStream
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
return|return
operator|new
name|InnerHitBuilder
argument_list|(
name|in
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|nestedPath
specifier|private
name|String
name|nestedPath
decl_stmt|;
DECL|field|parentChildType
specifier|private
name|String
name|parentChildType
decl_stmt|;
DECL|field|from
specifier|private
name|int
name|from
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
literal|3
decl_stmt|;
DECL|field|explain
specifier|private
name|boolean
name|explain
decl_stmt|;
DECL|field|version
specifier|private
name|boolean
name|version
decl_stmt|;
DECL|field|trackScores
specifier|private
name|boolean
name|trackScores
decl_stmt|;
DECL|field|fieldNames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
DECL|field|query
specifier|private
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|query
init|=
operator|new
name|MatchAllQueryBuilder
argument_list|()
decl_stmt|;
DECL|field|sorts
specifier|private
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|sorts
decl_stmt|;
DECL|field|fieldDataFields
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fieldDataFields
decl_stmt|;
DECL|field|scriptFields
specifier|private
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
decl_stmt|;
DECL|field|highlightBuilder
specifier|private
name|HighlightBuilder
name|highlightBuilder
decl_stmt|;
DECL|field|innerHitsBuilder
specifier|private
name|InnerHitsBuilder
name|innerHitsBuilder
decl_stmt|;
DECL|field|fetchSourceContext
specifier|private
name|FetchSourceContext
name|fetchSourceContext
decl_stmt|;
comment|// pkg protected, because is used in InnerHitsBuilder
DECL|method|InnerHitBuilder
name|InnerHitBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|nestedPath
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|parentChildType
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|from
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|explain
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|trackScores
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|fieldNames
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
name|fieldDataFields
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|scriptFields
operator|=
name|in
operator|.
name|readList
argument_list|(
name|t
lambda|->
name|ScriptField
operator|.
name|PROTOTYPE
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fetchSourceContext
operator|=
name|FetchSourceContext
operator|.
name|optionalReadFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|sorts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|sorts
operator|.
name|add
argument_list|(
name|in
operator|.
name|readSortBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|highlightBuilder
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|HighlightBuilder
operator|.
name|PROTOTYPE
operator|::
name|readFrom
argument_list|)
expr_stmt|;
name|query
operator|=
name|in
operator|.
name|readQuery
argument_list|()
expr_stmt|;
name|innerHitsBuilder
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|InnerHitsBuilder
operator|.
name|PROTO
operator|::
name|readFrom
argument_list|)
expr_stmt|;
block|}
DECL|method|InnerHitBuilder
specifier|public
name|InnerHitBuilder
parameter_list|()
block|{     }
DECL|method|setParentChildType
specifier|public
name|InnerHitBuilder
name|setParentChildType
parameter_list|(
name|String
name|parentChildType
parameter_list|)
block|{
name|this
operator|.
name|parentChildType
operator|=
name|parentChildType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setNestedPath
specifier|public
name|InnerHitBuilder
name|setNestedPath
parameter_list|(
name|String
name|nestedPath
parameter_list|)
block|{
name|this
operator|.
name|nestedPath
operator|=
name|nestedPath
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName
specifier|public
name|InnerHitBuilder
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getFrom
specifier|public
name|int
name|getFrom
parameter_list|()
block|{
return|return
name|from
return|;
block|}
DECL|method|setFrom
specifier|public
name|InnerHitBuilder
name|setFrom
parameter_list|(
name|int
name|from
parameter_list|)
block|{
if|if
condition|(
name|from
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal from value, at least 0 or higher"
argument_list|)
throw|;
block|}
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSize
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|setSize
specifier|public
name|InnerHitBuilder
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal size value, at least 0 or higher"
argument_list|)
throw|;
block|}
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isExplain
specifier|public
name|boolean
name|isExplain
parameter_list|()
block|{
return|return
name|explain
return|;
block|}
DECL|method|setExplain
specifier|public
name|InnerHitBuilder
name|setExplain
parameter_list|(
name|boolean
name|explain
parameter_list|)
block|{
name|this
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isVersion
specifier|public
name|boolean
name|isVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|setVersion
specifier|public
name|InnerHitBuilder
name|setVersion
parameter_list|(
name|boolean
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isTrackScores
specifier|public
name|boolean
name|isTrackScores
parameter_list|()
block|{
return|return
name|trackScores
return|;
block|}
DECL|method|setTrackScores
specifier|public
name|InnerHitBuilder
name|setTrackScores
parameter_list|(
name|boolean
name|trackScores
parameter_list|)
block|{
name|this
operator|.
name|trackScores
operator|=
name|trackScores
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getFieldNames
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|()
block|{
return|return
name|fieldNames
return|;
block|}
DECL|method|setFieldNames
specifier|public
name|InnerHitBuilder
name|setFieldNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getFieldDataFields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFieldDataFields
parameter_list|()
block|{
return|return
name|fieldDataFields
return|;
block|}
DECL|method|setFieldDataFields
specifier|public
name|InnerHitBuilder
name|setFieldDataFields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldDataFields
parameter_list|)
block|{
name|this
operator|.
name|fieldDataFields
operator|=
name|fieldDataFields
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addFieldDataField
specifier|public
name|InnerHitBuilder
name|addFieldDataField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|fieldDataFields
operator|==
literal|null
condition|)
block|{
name|fieldDataFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|fieldDataFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getScriptFields
specifier|public
name|List
argument_list|<
name|ScriptField
argument_list|>
name|getScriptFields
parameter_list|()
block|{
return|return
name|scriptFields
return|;
block|}
DECL|method|setScriptFields
specifier|public
name|InnerHitBuilder
name|setScriptFields
parameter_list|(
name|List
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
parameter_list|)
block|{
name|this
operator|.
name|scriptFields
operator|=
name|scriptFields
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addScriptField
specifier|public
name|InnerHitBuilder
name|addScriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|Script
name|script
parameter_list|)
block|{
if|if
condition|(
name|scriptFields
operator|==
literal|null
condition|)
block|{
name|scriptFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|scriptFields
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|name
argument_list|,
name|script
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getFetchSourceContext
specifier|public
name|FetchSourceContext
name|getFetchSourceContext
parameter_list|()
block|{
return|return
name|fetchSourceContext
return|;
block|}
DECL|method|setFetchSourceContext
specifier|public
name|InnerHitBuilder
name|setFetchSourceContext
parameter_list|(
name|FetchSourceContext
name|fetchSourceContext
parameter_list|)
block|{
name|this
operator|.
name|fetchSourceContext
operator|=
name|fetchSourceContext
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSorts
specifier|public
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSorts
parameter_list|()
block|{
return|return
name|sorts
return|;
block|}
DECL|method|setSorts
specifier|public
name|InnerHitBuilder
name|setSorts
parameter_list|(
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|sorts
parameter_list|)
block|{
name|this
operator|.
name|sorts
operator|=
name|sorts
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addSort
specifier|public
name|InnerHitBuilder
name|addSort
parameter_list|(
name|SortBuilder
name|sort
parameter_list|)
block|{
if|if
condition|(
name|sorts
operator|==
literal|null
condition|)
block|{
name|sorts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|sorts
operator|.
name|add
argument_list|(
name|sort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getHighlightBuilder
specifier|public
name|HighlightBuilder
name|getHighlightBuilder
parameter_list|()
block|{
return|return
name|highlightBuilder
return|;
block|}
DECL|method|setHighlightBuilder
specifier|public
name|InnerHitBuilder
name|setHighlightBuilder
parameter_list|(
name|HighlightBuilder
name|highlightBuilder
parameter_list|)
block|{
name|this
operator|.
name|highlightBuilder
operator|=
name|highlightBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getQuery
specifier|public
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
DECL|method|setQuery
specifier|public
name|InnerHitBuilder
name|setQuery
parameter_list|(
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setInnerHitsBuilder
specifier|public
name|InnerHitBuilder
name|setInnerHitsBuilder
parameter_list|(
name|InnerHitsBuilder
name|innerHitsBuilder
parameter_list|)
block|{
name|this
operator|.
name|innerHitsBuilder
operator|=
name|innerHitsBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|buildInline
specifier|public
name|InnerHitsContext
operator|.
name|BaseInnerHits
name|buildInline
parameter_list|(
name|SearchContext
name|parentSearchContext
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|InnerHitsContext
operator|.
name|BaseInnerHits
name|innerHitsContext
decl_stmt|;
if|if
condition|(
name|nestedPath
operator|!=
literal|null
condition|)
block|{
name|ObjectMapper
name|nestedObjectMapper
init|=
name|context
operator|.
name|getObjectMapper
argument_list|(
name|nestedPath
argument_list|)
decl_stmt|;
name|ObjectMapper
name|parentObjectMapper
init|=
name|context
operator|.
name|nestedScope
argument_list|()
operator|.
name|getObjectMapper
argument_list|()
decl_stmt|;
name|innerHitsContext
operator|=
operator|new
name|InnerHitsContext
operator|.
name|NestedInnerHits
argument_list|(
name|name
argument_list|,
name|parentSearchContext
argument_list|,
name|parentObjectMapper
argument_list|,
name|nestedObjectMapper
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parentChildType
operator|!=
literal|null
condition|)
block|{
name|DocumentMapper
name|documentMapper
init|=
name|context
operator|.
name|getMapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
name|parentChildType
argument_list|)
decl_stmt|;
name|innerHitsContext
operator|=
operator|new
name|InnerHitsContext
operator|.
name|ParentChildInnerHits
argument_list|(
name|name
argument_list|,
name|parentSearchContext
argument_list|,
name|context
operator|.
name|getMapperService
argument_list|()
argument_list|,
name|documentMapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Neither a nested or parent/child inner hit"
argument_list|)
throw|;
block|}
name|setupInnerHitsContext
argument_list|(
name|context
argument_list|,
name|innerHitsContext
argument_list|)
expr_stmt|;
return|return
name|innerHitsContext
return|;
block|}
comment|/**      * Top level inner hits are different than inline inner hits:      * 1) Nesting. Top level inner hits can be hold nested inner hits, that why this method is recursive (via buildChildInnerHits)      * 2) Top level inner hits query is an option, whereas with inline inner hits that is based on the nested, has_child      *    or has_parent's inner query.      *      *  Because of these changes there are different methods for building inline (which is simpler) and top level inner      *  hits. Also top level inner hits will soon be deprecated.      */
DECL|method|buildTopLevel
specifier|public
name|InnerHitsContext
operator|.
name|BaseInnerHits
name|buildTopLevel
parameter_list|(
name|SearchContext
name|parentSearchContext
parameter_list|,
name|QueryShardContext
name|context
parameter_list|,
name|InnerHitsContext
name|innerHitsContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nestedPath
operator|!=
literal|null
condition|)
block|{
name|ObjectMapper
name|nestedObjectMapper
init|=
name|context
operator|.
name|getObjectMapper
argument_list|(
name|nestedPath
argument_list|)
decl_stmt|;
name|ObjectMapper
name|parentObjectMapper
init|=
name|context
operator|.
name|nestedScope
argument_list|()
operator|.
name|nextLevel
argument_list|(
name|nestedObjectMapper
argument_list|)
decl_stmt|;
name|InnerHitsContext
operator|.
name|NestedInnerHits
name|nestedInnerHits
init|=
operator|new
name|InnerHitsContext
operator|.
name|NestedInnerHits
argument_list|(
name|name
argument_list|,
name|parentSearchContext
argument_list|,
name|parentObjectMapper
argument_list|,
name|nestedObjectMapper
argument_list|)
decl_stmt|;
name|setupInnerHitsContext
argument_list|(
name|context
argument_list|,
name|nestedInnerHits
argument_list|)
expr_stmt|;
if|if
condition|(
name|innerHitsBuilder
operator|!=
literal|null
condition|)
block|{
name|buildChildInnerHits
argument_list|(
name|parentSearchContext
argument_list|,
name|context
argument_list|,
name|nestedInnerHits
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|nestedScope
argument_list|()
operator|.
name|previousLevel
argument_list|()
expr_stmt|;
name|innerHitsContext
operator|.
name|addInnerHitDefinition
argument_list|(
name|nestedInnerHits
argument_list|)
expr_stmt|;
return|return
name|nestedInnerHits
return|;
block|}
elseif|else
if|if
condition|(
name|parentChildType
operator|!=
literal|null
condition|)
block|{
name|DocumentMapper
name|documentMapper
init|=
name|context
operator|.
name|getMapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
name|parentChildType
argument_list|)
decl_stmt|;
name|InnerHitsContext
operator|.
name|ParentChildInnerHits
name|parentChildInnerHits
init|=
operator|new
name|InnerHitsContext
operator|.
name|ParentChildInnerHits
argument_list|(
name|name
argument_list|,
name|parentSearchContext
argument_list|,
name|context
operator|.
name|getMapperService
argument_list|()
argument_list|,
name|documentMapper
argument_list|)
decl_stmt|;
name|setupInnerHitsContext
argument_list|(
name|context
argument_list|,
name|parentChildInnerHits
argument_list|)
expr_stmt|;
if|if
condition|(
name|innerHitsBuilder
operator|!=
literal|null
condition|)
block|{
name|buildChildInnerHits
argument_list|(
name|parentSearchContext
argument_list|,
name|context
argument_list|,
name|parentChildInnerHits
argument_list|)
expr_stmt|;
block|}
name|innerHitsContext
operator|.
name|addInnerHitDefinition
argument_list|(
name|parentChildInnerHits
argument_list|)
expr_stmt|;
return|return
name|parentChildInnerHits
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Neither a nested or parent/child inner hit"
argument_list|)
throw|;
block|}
block|}
DECL|method|buildChildInnerHits
specifier|private
name|void
name|buildChildInnerHits
parameter_list|(
name|SearchContext
name|parentSearchContext
parameter_list|,
name|QueryShardContext
name|context
parameter_list|,
name|InnerHitsContext
operator|.
name|BaseInnerHits
name|innerHits
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|InnerHitsContext
operator|.
name|BaseInnerHits
argument_list|>
name|childInnerHits
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InnerHitBuilder
argument_list|>
name|entry
range|:
name|innerHitsBuilder
operator|.
name|getInnerHitsBuilders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|InnerHitsContext
operator|.
name|BaseInnerHits
name|childInnerHit
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|buildTopLevel
argument_list|(
name|parentSearchContext
argument_list|,
name|context
argument_list|,
operator|new
name|InnerHitsContext
argument_list|()
argument_list|)
decl_stmt|;
name|childInnerHits
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|childInnerHit
argument_list|)
expr_stmt|;
block|}
name|innerHits
operator|.
name|setChildInnerHits
argument_list|(
name|childInnerHits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|InnerHitBuilder
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|InnerHitBuilder
argument_list|(
name|in
argument_list|)
return|;
block|}
DECL|method|setupInnerHitsContext
specifier|private
name|void
name|setupInnerHitsContext
parameter_list|(
name|QueryShardContext
name|context
parameter_list|,
name|InnerHitsContext
operator|.
name|BaseInnerHits
name|innerHitsContext
parameter_list|)
throws|throws
name|IOException
block|{
name|innerHitsContext
operator|.
name|from
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|innerHitsContext
operator|.
name|size
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|innerHitsContext
operator|.
name|explain
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|innerHitsContext
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|innerHitsContext
operator|.
name|trackScores
argument_list|(
name|trackScores
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldNames
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|innerHitsContext
operator|.
name|emptyFieldNames
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|innerHitsContext
operator|.
name|fieldNames
argument_list|()
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fieldDataFields
operator|!=
literal|null
condition|)
block|{
name|FieldDataFieldsContext
name|fieldDataFieldsContext
init|=
name|innerHitsContext
operator|.
name|getFetchSubPhaseContext
argument_list|(
name|FieldDataFieldsFetchSubPhase
operator|.
name|CONTEXT_FACTORY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fieldDataFields
control|)
block|{
name|fieldDataFieldsContext
operator|.
name|add
argument_list|(
operator|new
name|FieldDataFieldsContext
operator|.
name|FieldDataField
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fieldDataFieldsContext
operator|.
name|setHitExecutionNeeded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scriptFields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ScriptField
name|field
range|:
name|scriptFields
control|)
block|{
name|SearchScript
name|searchScript
init|=
name|innerHitsContext
operator|.
name|scriptService
argument_list|()
operator|.
name|search
argument_list|(
name|innerHitsContext
operator|.
name|lookup
argument_list|()
argument_list|,
name|field
operator|.
name|script
argument_list|()
argument_list|,
name|ScriptContext
operator|.
name|Standard
operator|.
name|SEARCH
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|innerHitsContext
operator|.
name|scriptFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|script
operator|.
name|ScriptFieldsContext
operator|.
name|ScriptField
argument_list|(
name|field
operator|.
name|fieldName
argument_list|()
argument_list|,
name|searchScript
argument_list|,
name|field
operator|.
name|ignoreFailure
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fetchSourceContext
operator|!=
literal|null
condition|)
block|{
name|innerHitsContext
operator|.
name|fetchSourceContext
argument_list|(
name|fetchSourceContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sorts
operator|!=
literal|null
condition|)
block|{
name|Optional
argument_list|<
name|Sort
argument_list|>
name|optionalSort
init|=
name|SortBuilder
operator|.
name|buildSort
argument_list|(
name|sorts
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionalSort
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|innerHitsContext
operator|.
name|sort
argument_list|(
name|optionalSort
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|highlightBuilder
operator|!=
literal|null
condition|)
block|{
name|innerHitsContext
operator|.
name|highlight
argument_list|(
name|highlightBuilder
operator|.
name|build
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ParsedQuery
name|parsedQuery
init|=
operator|new
name|ParsedQuery
argument_list|(
name|query
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
argument_list|,
name|context
operator|.
name|copyNamedQueries
argument_list|()
argument_list|)
decl_stmt|;
name|innerHitsContext
operator|.
name|parsedQuery
argument_list|(
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|nestedPath
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|parentChildType
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|trackScores
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|fieldDataFields
argument_list|)
expr_stmt|;
name|boolean
name|hasScriptFields
init|=
name|scriptFields
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasScriptFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasScriptFields
condition|)
block|{
name|out
operator|.
name|writeList
argument_list|(
name|scriptFields
argument_list|)
expr_stmt|;
block|}
name|FetchSourceContext
operator|.
name|optionalWriteToStream
argument_list|(
name|fetchSourceContext
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|boolean
name|hasSorts
init|=
name|sorts
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasSorts
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSorts
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|sorts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sort
range|:
name|sorts
control|)
block|{
name|out
operator|.
name|writeSortBuilder
argument_list|(
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|highlightBuilder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|innerHitsBuilder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|nestedPath
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|NESTED_PATH_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|nestedPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentChildType
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|PARENT_CHILD_TYPE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|parentChildType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|NAME_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|FROM_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|SIZE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|VERSION_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|EXPLAIN_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|explain
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|TRACK_SCORES_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|trackScores
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchSourceContext
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|_SOURCE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fetchSourceContext
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldNames
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|SearchSourceBuilder
operator|.
name|FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fieldDataFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|SearchSourceBuilder
operator|.
name|FIELDDATA_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldDataField
range|:
name|fieldDataFields
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldDataField
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scriptFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|SearchSourceBuilder
operator|.
name|SCRIPT_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptField
name|scriptField
range|:
name|scriptFields
control|)
block|{
name|scriptField
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sorts
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|SearchSourceBuilder
operator|.
name|SORT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sort
range|:
name|sorts
control|)
block|{
name|sort
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|highlightBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|HIGHLIGHT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|highlightBuilder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|QUERY_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|query
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|innerHitsBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|INNER_HITS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|innerHitsBuilder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|InnerHitBuilder
name|that
init|=
operator|(
name|InnerHitBuilder
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|that
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|nestedPath
argument_list|,
name|that
operator|.
name|nestedPath
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|parentChildType
argument_list|,
name|that
operator|.
name|parentChildType
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|from
argument_list|,
name|that
operator|.
name|from
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|size
argument_list|,
name|that
operator|.
name|size
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|explain
argument_list|,
name|that
operator|.
name|explain
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|version
argument_list|,
name|that
operator|.
name|version
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|trackScores
argument_list|,
name|that
operator|.
name|trackScores
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fieldNames
argument_list|,
name|that
operator|.
name|fieldNames
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fieldDataFields
argument_list|,
name|that
operator|.
name|fieldDataFields
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|scriptFields
argument_list|,
name|that
operator|.
name|scriptFields
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fetchSourceContext
argument_list|,
name|that
operator|.
name|fetchSourceContext
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|sorts
argument_list|,
name|that
operator|.
name|sorts
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|highlightBuilder
argument_list|,
name|that
operator|.
name|highlightBuilder
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|query
argument_list|,
name|that
operator|.
name|query
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|innerHitsBuilder
argument_list|,
name|that
operator|.
name|innerHitsBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|nestedPath
argument_list|,
name|parentChildType
argument_list|,
name|from
argument_list|,
name|size
argument_list|,
name|explain
argument_list|,
name|version
argument_list|,
name|trackScores
argument_list|,
name|fieldNames
argument_list|,
name|fieldDataFields
argument_list|,
name|scriptFields
argument_list|,
name|fetchSourceContext
argument_list|,
name|sorts
argument_list|,
name|highlightBuilder
argument_list|,
name|query
argument_list|,
name|innerHitsBuilder
argument_list|)
return|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|InnerHitBuilder
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
operator|new
name|InnerHitBuilder
argument_list|()
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

