begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_enum
DECL|enum|Operator
specifier|public
enum|enum
name|Operator
implements|implements
name|Writeable
argument_list|<
name|Operator
argument_list|>
block|{
DECL|enum constant|OR
DECL|enum constant|AND
name|OR
block|,
name|AND
block|;
DECL|method|toBooleanClauseOccur
specifier|public
name|BooleanClause
operator|.
name|Occur
name|toBooleanClauseOccur
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|OR
case|:
return|return
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
return|;
case|case
name|AND
case|:
return|return
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
return|;
default|default:
throw|throw
name|Operator
operator|.
name|newOperatorException
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|toQueryParserOperator
specifier|public
name|QueryParser
operator|.
name|Operator
name|toQueryParserOperator
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|OR
case|:
return|return
name|QueryParser
operator|.
name|Operator
operator|.
name|OR
return|;
case|case
name|AND
case|:
return|return
name|QueryParser
operator|.
name|Operator
operator|.
name|AND
return|;
default|default:
throw|throw
name|Operator
operator|.
name|newOperatorException
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|readOperatorFrom
specifier|public
specifier|static
name|Operator
name|readOperatorFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ordinal
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordinal
operator|<
literal|0
operator|||
name|ordinal
operator|>=
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown Operator ordinal ["
operator|+
name|ordinal
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|values
argument_list|()
index|[
name|ordinal
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|fromString
specifier|public
specifier|static
name|Operator
name|fromString
parameter_list|(
name|String
name|op
parameter_list|)
block|{
return|return
name|valueOf
argument_list|(
name|op
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newOperatorException
specifier|private
specifier|static
name|IllegalArgumentException
name|newOperatorException
parameter_list|(
name|String
name|op
parameter_list|)
block|{
return|return
operator|new
name|IllegalArgumentException
argument_list|(
literal|"operator needs to be either "
operator|+
name|CollectionUtils
operator|.
name|arrayAsArrayList
argument_list|(
name|values
argument_list|()
argument_list|)
operator|+
literal|", but not ["
operator|+
name|op
operator|+
literal|"]"
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

