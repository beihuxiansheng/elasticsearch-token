begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Parser for query_string query  */
end_comment

begin_class
DECL|class|QueryStringQueryParser
specifier|public
class|class
name|QueryStringQueryParser
extends|extends
name|BaseQueryParser
block|{
DECL|field|FUZZINESS
specifier|private
specifier|static
specifier|final
name|ParseField
name|FUZZINESS
init|=
name|Fuzziness
operator|.
name|FIELD
operator|.
name|withDeprecation
argument_list|(
literal|"fuzzy_min_sim"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|names
specifier|public
name|String
index|[]
name|names
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|QueryStringQueryBuilder
operator|.
name|NAME
block|,
name|Strings
operator|.
name|toCamelCase
argument_list|(
name|QueryStringQueryBuilder
operator|.
name|NAME
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|fromXContent
specifier|public
name|QueryBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|queryString
init|=
literal|null
decl_stmt|;
name|String
name|defaultField
init|=
literal|null
decl_stmt|;
name|String
name|analyzer
init|=
literal|null
decl_stmt|;
name|String
name|quoteAnalyzer
init|=
literal|null
decl_stmt|;
name|String
name|queryName
init|=
literal|null
decl_stmt|;
name|float
name|boost
init|=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
decl_stmt|;
name|boolean
name|autoGeneratePhraseQueries
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_AUTO_GENERATE_PHRASE_QUERIES
decl_stmt|;
name|int
name|maxDeterminizedStates
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_MAX_DETERMINED_STATES
decl_stmt|;
name|boolean
name|lowercaseExpandedTerms
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_LOWERCASE_EXPANDED_TERMS
decl_stmt|;
name|boolean
name|enablePositionIncrements
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_ENABLE_POSITION_INCREMENTS
decl_stmt|;
name|boolean
name|escape
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_ESCAPE
decl_stmt|;
name|boolean
name|useDisMax
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_USE_DIS_MAX
decl_stmt|;
name|int
name|fuzzyPrefixLength
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_FUZZY_PREFIX_LENGTH
decl_stmt|;
name|int
name|fuzzyMaxExpansions
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_FUZZY_MAX_EXPANSIONS
decl_stmt|;
name|int
name|phraseSlop
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_PHRASE_SLOP
decl_stmt|;
name|float
name|tieBreaker
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_TIE_BREAKER
decl_stmt|;
name|Boolean
name|analyzeWildcard
init|=
literal|null
decl_stmt|;
name|Boolean
name|allowLeadingWildcard
init|=
literal|null
decl_stmt|;
name|String
name|minimumShouldMatch
init|=
literal|null
decl_stmt|;
name|String
name|quoteFieldSuffix
init|=
literal|null
decl_stmt|;
name|Boolean
name|lenient
init|=
literal|null
decl_stmt|;
name|Operator
name|defaultOperator
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_OPERATOR
decl_stmt|;
name|String
name|timeZone
init|=
literal|null
decl_stmt|;
name|Locale
name|locale
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_LOCALE
decl_stmt|;
name|Fuzziness
name|fuzziness
init|=
name|QueryStringQueryBuilder
operator|.
name|DEFAULT_FUZZINESS
decl_stmt|;
name|String
name|fuzzyRewrite
init|=
literal|null
decl_stmt|;
name|String
name|rewrite
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldsAndWeights
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
literal|"fields"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|String
name|fField
init|=
literal|null
decl_stmt|;
name|float
name|fBoost
init|=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
decl_stmt|;
name|char
index|[]
name|text
init|=
name|parser
operator|.
name|textCharacters
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|parser
operator|.
name|textOffset
argument_list|()
operator|+
name|parser
operator|.
name|textLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|parser
operator|.
name|textOffset
argument_list|()
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|text
index|[
name|i
index|]
operator|==
literal|'^'
condition|)
block|{
name|int
name|relativeLocation
init|=
name|i
operator|-
name|parser
operator|.
name|textOffset
argument_list|()
decl_stmt|;
name|fField
operator|=
operator|new
name|String
argument_list|(
name|text
argument_list|,
name|parser
operator|.
name|textOffset
argument_list|()
argument_list|,
name|relativeLocation
argument_list|)
expr_stmt|;
name|fBoost
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
operator|new
name|String
argument_list|(
name|text
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|parser
operator|.
name|textLength
argument_list|()
operator|-
name|relativeLocation
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|fField
operator|==
literal|null
condition|)
block|{
name|fField
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
name|fieldsAndWeights
operator|.
name|put
argument_list|(
name|fField
argument_list|,
name|fBoost
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parseContext
argument_list|,
literal|"[query_string] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"query"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|queryString
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"default_field"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"defaultField"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|defaultField
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"default_operator"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"defaultOperator"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|defaultOperator
operator|=
name|Operator
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"analyzer"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|analyzer
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"quote_analyzer"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"quoteAnalyzer"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|quoteAnalyzer
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"allow_leading_wildcard"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"allowLeadingWildcard"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|allowLeadingWildcard
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"auto_generate_phrase_queries"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"autoGeneratePhraseQueries"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|autoGeneratePhraseQueries
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"max_determinized_states"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"maxDeterminizedStates"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|maxDeterminizedStates
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"lowercase_expanded_terms"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"lowercaseExpandedTerms"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|lowercaseExpandedTerms
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"enable_position_increments"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"enablePositionIncrements"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|enablePositionIncrements
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"escape"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|escape
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"use_dis_max"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"useDisMax"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|useDisMax
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fuzzy_prefix_length"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"fuzzyPrefixLength"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|fuzzyPrefixLength
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fuzzy_max_expansions"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"fuzzyMaxExpansions"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|fuzzyMaxExpansions
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fuzzy_rewrite"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"fuzzyRewrite"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|fuzzyRewrite
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"phrase_slop"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"phraseSlop"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|phraseSlop
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|FUZZINESS
argument_list|)
condition|)
block|{
name|fuzziness
operator|=
name|Fuzziness
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boost"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|boost
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"tie_breaker"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"tieBreaker"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|tieBreaker
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"analyze_wildcard"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"analyzeWildcard"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|analyzeWildcard
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rewrite"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|rewrite
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"minimum_should_match"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"minimumShouldMatch"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|minimumShouldMatch
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"quote_field_suffix"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"quoteFieldSuffix"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|quoteFieldSuffix
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"lenient"
operator|.
name|equalsIgnoreCase
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|lenient
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"locale"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|String
name|localeStr
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
name|locale
operator|=
name|Locale
operator|.
name|forLanguageTag
argument_list|(
name|localeStr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"time_zone"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"timeZone"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
try|try
block|{
name|timeZone
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parseContext
argument_list|,
literal|"[query_string] time_zone ["
operator|+
name|parser
operator|.
name|text
argument_list|()
operator|+
literal|"] is unknown"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"_name"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|queryName
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parseContext
argument_list|,
literal|"[query_string] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parseContext
argument_list|,
literal|"query_string must be provided with a [query]"
argument_list|)
throw|;
block|}
name|QueryStringQueryBuilder
name|queryStringQuery
init|=
operator|new
name|QueryStringQueryBuilder
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|queryStringQuery
operator|.
name|fields
argument_list|(
name|fieldsAndWeights
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|defaultField
argument_list|(
name|defaultField
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|defaultOperator
argument_list|(
name|defaultOperator
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|analyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|quoteAnalyzer
argument_list|(
name|quoteAnalyzer
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|allowLeadingWildcard
argument_list|(
name|allowLeadingWildcard
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|autoGeneratePhraseQueries
argument_list|(
name|autoGeneratePhraseQueries
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|maxDeterminizedStates
argument_list|(
name|maxDeterminizedStates
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|lowercaseExpandedTerms
argument_list|(
name|lowercaseExpandedTerms
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|enablePositionIncrements
argument_list|(
name|enablePositionIncrements
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|escape
argument_list|(
name|escape
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|useDisMax
argument_list|(
name|useDisMax
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|fuzzyPrefixLength
argument_list|(
name|fuzzyPrefixLength
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|fuzzyMaxExpansions
argument_list|(
name|fuzzyMaxExpansions
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|fuzzyRewrite
argument_list|(
name|fuzzyRewrite
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|phraseSlop
argument_list|(
name|phraseSlop
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|fuzziness
argument_list|(
name|fuzziness
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|tieBreaker
argument_list|(
name|tieBreaker
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|analyzeWildcard
argument_list|(
name|analyzeWildcard
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|rewrite
argument_list|(
name|rewrite
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|minimumShouldMatch
argument_list|(
name|minimumShouldMatch
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|quoteFieldSuffix
argument_list|(
name|quoteFieldSuffix
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|lenient
argument_list|(
name|lenient
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|timeZone
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|locale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|boost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|queryName
argument_list|(
name|queryName
argument_list|)
expr_stmt|;
return|return
name|queryStringQuery
return|;
block|}
annotation|@
name|Override
DECL|method|getBuilderPrototype
specifier|public
name|QueryStringQueryBuilder
name|getBuilderPrototype
parameter_list|()
block|{
return|return
name|QueryStringQueryBuilder
operator|.
name|PROTOTYPE
return|;
block|}
block|}
end_class

end_unit

