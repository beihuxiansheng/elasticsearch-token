begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.functionscore.random
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|random
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A function that computes a random score for the matched documents  */
end_comment

begin_class
DECL|class|RandomScoreFunctionBuilder
specifier|public
class|class
name|RandomScoreFunctionBuilder
extends|extends
name|ScoreFunctionBuilder
block|{
DECL|field|seed
specifier|private
name|Object
name|seed
init|=
literal|null
decl_stmt|;
DECL|method|RandomScoreFunctionBuilder
specifier|public
name|RandomScoreFunctionBuilder
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|RandomScoreFunctionParser
operator|.
name|NAMES
index|[
literal|0
index|]
return|;
block|}
comment|/**      * Sets the seed based on which the random number will be generated. Using the same seed is guaranteed to generate the same      * random number for a specific doc.      *      * @param seed The seed.      */
DECL|method|seed
specifier|public
name|RandomScoreFunctionBuilder
name|seed
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * seed variant taking a long value.      * @see #seed(int)      */
DECL|method|seed
specifier|public
name|RandomScoreFunctionBuilder
name|seed
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * seed variant taking a String value.      * @see #seed(int)      */
DECL|method|seed
specifier|public
name|RandomScoreFunctionBuilder
name|seed
parameter_list|(
name|String
name|seed
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|public
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|seed
operator|instanceof
name|Number
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"seed"
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|seed
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|seed
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"seed"
argument_list|,
name|seed
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

