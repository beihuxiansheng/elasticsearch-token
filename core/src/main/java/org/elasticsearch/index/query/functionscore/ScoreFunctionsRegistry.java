begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.functionscore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentLocation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_comment
comment|/**  * Registry of all {@link ScoreFunctionParser}s.  */
end_comment

begin_class
DECL|class|ScoreFunctionsRegistry
specifier|public
class|class
name|ScoreFunctionsRegistry
block|{
DECL|field|scoreFunctionParsers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple
argument_list|<
name|ParseField
argument_list|,
name|ScoreFunctionParser
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|scoreFunctionParsers
decl_stmt|;
DECL|method|ScoreFunctionsRegistry
specifier|public
name|ScoreFunctionsRegistry
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple
argument_list|<
name|ParseField
argument_list|,
name|ScoreFunctionParser
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|scoreFunctionParsers
parameter_list|)
block|{
name|this
operator|.
name|scoreFunctionParsers
operator|=
name|unmodifiableMap
argument_list|(
name|scoreFunctionParsers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the {@linkplain ScoreFunctionParser} for a specific type of query registered under its name.      * Uses {@link ParseField} internally so that deprecation warnings/errors can be logged/thrown.      * @param name the name of the parser to retrieve      * @param parseFieldMatcher the {@link ParseFieldMatcher} to match the query name against      * @param xContentLocation the current location of the {@link org.elasticsearch.common.xcontent.XContentParser}      * @return the query parser      * @throws IllegalArgumentException of there's no query or parser registered under the provided name      */
DECL|method|getScoreFunction
specifier|public
name|ScoreFunctionParser
argument_list|<
name|?
argument_list|>
name|getScoreFunction
parameter_list|(
name|String
name|name
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|,
name|XContentLocation
name|xContentLocation
parameter_list|)
block|{
name|Tuple
argument_list|<
name|ParseField
argument_list|,
name|ScoreFunctionParser
argument_list|<
name|?
argument_list|>
argument_list|>
name|parserLookup
init|=
name|scoreFunctionParsers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|parserLookup
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|xContentLocation
argument_list|,
literal|"No function with the name ["
operator|+
name|name
operator|+
literal|"] is registered."
argument_list|)
throw|;
block|}
name|ParseField
name|functionField
init|=
name|parserLookup
operator|.
name|v1
argument_list|()
decl_stmt|;
name|ScoreFunctionParser
argument_list|<
name|?
argument_list|>
name|functionParser
init|=
name|parserLookup
operator|.
name|v2
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
name|parseFieldMatcher
operator|.
name|match
argument_list|(
name|name
argument_list|,
name|functionField
argument_list|)
decl_stmt|;
assert|assert
name|match
operator|:
literal|"registered ParseField did not match the name it was registered for ["
operator|+
name|name
operator|+
literal|"]"
assert|;
return|return
name|functionParser
return|;
block|}
block|}
end_class

end_unit

