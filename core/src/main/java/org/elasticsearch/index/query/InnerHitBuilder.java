begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ToXContentToBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
operator|.
name|ScriptField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|StoredFieldsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|FetchSourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
import|;
end_import

begin_class
DECL|class|InnerHitBuilder
specifier|public
specifier|final
class|class
name|InnerHitBuilder
extends|extends
name|ToXContentToBytes
implements|implements
name|Writeable
block|{
DECL|field|NAME_FIELD
specifier|public
specifier|static
specifier|final
name|ParseField
name|NAME_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
DECL|field|IGNORE_UNMAPPED
specifier|public
specifier|static
specifier|final
name|ParseField
name|IGNORE_UNMAPPED
init|=
operator|new
name|ParseField
argument_list|(
literal|"ignore_unmapped"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_INNER_HIT_QUERY
specifier|public
specifier|static
specifier|final
name|QueryBuilder
name|DEFAULT_INNER_HIT_QUERY
init|=
operator|new
name|MatchAllQueryBuilder
argument_list|()
decl_stmt|;
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|ObjectParser
argument_list|<
name|InnerHitBuilder
argument_list|,
name|QueryParseContext
argument_list|>
name|PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"inner_hits"
argument_list|,
name|InnerHitBuilder
operator|::
operator|new
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareString
argument_list|(
name|InnerHitBuilder
operator|::
name|setName
argument_list|,
name|NAME_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareBoolean
argument_list|(
parameter_list|(
name|innerHitBuilder
parameter_list|,
name|value
parameter_list|)
lambda|->
name|innerHitBuilder
operator|.
name|ignoreUnmapped
operator|=
name|value
argument_list|,
name|IGNORE_UNMAPPED
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|InnerHitBuilder
operator|::
name|setFrom
argument_list|,
name|SearchSourceBuilder
operator|.
name|FROM_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|InnerHitBuilder
operator|::
name|setSize
argument_list|,
name|SearchSourceBuilder
operator|.
name|SIZE_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareBoolean
argument_list|(
name|InnerHitBuilder
operator|::
name|setExplain
argument_list|,
name|SearchSourceBuilder
operator|.
name|EXPLAIN_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareBoolean
argument_list|(
name|InnerHitBuilder
operator|::
name|setVersion
argument_list|,
name|SearchSourceBuilder
operator|.
name|VERSION_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareBoolean
argument_list|(
name|InnerHitBuilder
operator|::
name|setTrackScores
argument_list|,
name|SearchSourceBuilder
operator|.
name|TRACK_SCORES_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareStringArray
argument_list|(
name|InnerHitBuilder
operator|::
name|setStoredFieldNames
argument_list|,
name|SearchSourceBuilder
operator|.
name|STORED_FIELDS_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|i
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|p
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"The field ["
operator|+
name|SearchSourceBuilder
operator|.
name|FIELDS_FIELD
operator|+
literal|"] is no longer supported, please use ["
operator|+
name|SearchSourceBuilder
operator|.
name|STORED_FIELDS_FIELD
operator|+
literal|"] to retrieve stored fields or _source filtering "
operator|+
literal|"if the field is not stored"
argument_list|)
throw|;
block|}
argument_list|,
name|SearchSourceBuilder
operator|.
name|FIELDS_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|STRING_ARRAY
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareStringArray
argument_list|(
name|InnerHitBuilder
operator|::
name|setDocValueFields
argument_list|,
name|SearchSourceBuilder
operator|.
name|DOCVALUE_FIELDS_FIELD
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|i
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
try|try
block|{
name|Set
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|XContentParser
operator|.
name|Token
name|token
init|=
name|p
operator|.
name|nextToken
argument_list|()
init|;
name|token
operator|!=
name|END_OBJECT
condition|;
name|token
operator|=
name|p
operator|.
name|nextToken
argument_list|()
control|)
block|{
name|scriptFields
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|.
name|setScriptFields
argument_list|(
name|scriptFields
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|p
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Could not parse inner script definition"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|SearchSourceBuilder
operator|.
name|SCRIPT_FIELDS_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|i
parameter_list|,
name|c
parameter_list|)
lambda|->
name|i
operator|.
name|setSorts
argument_list|(
name|SortBuilder
operator|.
name|fromXContent
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|,
name|SearchSourceBuilder
operator|.
name|SORT_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT_ARRAY
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|i
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
try|try
block|{
name|i
operator|.
name|setFetchSourceContext
argument_list|(
name|FetchSourceContext
operator|.
name|fromXContent
argument_list|(
name|c
operator|.
name|parser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|p
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Could not parse inner _source definition"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|SearchSourceBuilder
operator|.
name|_SOURCE_FIELD
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|OBJECT_ARRAY_BOOLEAN_OR_STRING
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareObject
argument_list|(
name|InnerHitBuilder
operator|::
name|setHighlightBuilder
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|HighlightBuilder
operator|.
name|fromXContent
argument_list|(
name|c
argument_list|)
argument_list|,
name|SearchSourceBuilder
operator|.
name|HIGHLIGHT_FIELD
argument_list|)
expr_stmt|;
block|}
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|ignoreUnmapped
specifier|private
name|boolean
name|ignoreUnmapped
decl_stmt|;
DECL|field|from
specifier|private
name|int
name|from
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
literal|3
decl_stmt|;
DECL|field|explain
specifier|private
name|boolean
name|explain
decl_stmt|;
DECL|field|version
specifier|private
name|boolean
name|version
decl_stmt|;
DECL|field|trackScores
specifier|private
name|boolean
name|trackScores
decl_stmt|;
DECL|field|storedFieldsContext
specifier|private
name|StoredFieldsContext
name|storedFieldsContext
decl_stmt|;
DECL|field|query
specifier|private
name|QueryBuilder
name|query
init|=
name|DEFAULT_INNER_HIT_QUERY
decl_stmt|;
DECL|field|sorts
specifier|private
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|sorts
decl_stmt|;
DECL|field|docValueFields
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|docValueFields
decl_stmt|;
DECL|field|scriptFields
specifier|private
name|Set
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
decl_stmt|;
DECL|field|highlightBuilder
specifier|private
name|HighlightBuilder
name|highlightBuilder
decl_stmt|;
DECL|field|fetchSourceContext
specifier|private
name|FetchSourceContext
name|fetchSourceContext
decl_stmt|;
DECL|method|InnerHitBuilder
specifier|public
name|InnerHitBuilder
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|InnerHitBuilder
specifier|public
name|InnerHitBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Read from a stream.      */
DECL|method|InnerHitBuilder
specifier|public
name|InnerHitBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_5_0_UNRELEASED
argument_list|)
condition|)
block|{
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_2_0
argument_list|)
condition|)
block|{
name|ignoreUnmapped
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
name|from
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|explain
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|trackScores
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|storedFieldsContext
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|StoredFieldsContext
operator|::
operator|new
argument_list|)
expr_stmt|;
name|docValueFields
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|scriptFields
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|scriptFields
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|fetchSourceContext
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|FetchSourceContext
operator|::
operator|new
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|sorts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|sorts
operator|.
name|add
argument_list|(
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|SortBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|highlightBuilder
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|HighlightBuilder
operator|::
operator|new
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_5_0_UNRELEASED
argument_list|)
condition|)
block|{
comment|/**              * this is needed for BWC with nodes pre 5.5              */
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|QueryBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
name|boolean
name|hasChildren
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
assert|assert
name|hasChildren
operator|==
literal|false
assert|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_5_0_UNRELEASED
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid output version, must>= "
operator|+
name|Version
operator|.
name|V_5_5_0_UNRELEASED
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|out
operator|.
name|writeOptionalString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|ignoreUnmapped
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|trackScores
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|storedFieldsContext
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|docValueFields
argument_list|)
expr_stmt|;
name|boolean
name|hasScriptFields
init|=
name|scriptFields
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasScriptFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasScriptFields
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|scriptFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ScriptField
argument_list|>
name|iterator
init|=
name|scriptFields
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|ScriptField
operator|::
name|fieldName
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|fetchSourceContext
argument_list|)
expr_stmt|;
name|boolean
name|hasSorts
init|=
name|sorts
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasSorts
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSorts
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|sorts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sort
range|:
name|sorts
control|)
block|{
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|highlightBuilder
argument_list|)
expr_stmt|;
block|}
comment|/**      * BWC serialization for nested {@link InnerHitBuilder}.      * Should only be used to send nested inner hits to nodes pre 5.5.      */
DECL|method|writeToNestedBWC
specifier|protected
name|void
name|writeToNestedBWC
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|QueryBuilder
name|query
parameter_list|,
name|String
name|nestedPath
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_5_0_UNRELEASED
argument_list|)
operator|:
literal|"invalid output version, must be< "
operator|+
name|Version
operator|.
name|V_5_5_0_UNRELEASED
operator|.
name|toString
argument_list|()
assert|;
name|writeToBWC
argument_list|(
name|out
argument_list|,
name|query
argument_list|,
name|nestedPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * BWC serialization for collapsing {@link InnerHitBuilder}.      * Should only be used to send collapsing inner hits to nodes pre 5.5.      */
DECL|method|writeToCollapseBWC
specifier|public
name|void
name|writeToCollapseBWC
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_5_0_UNRELEASED
argument_list|)
operator|:
literal|"invalid output version, must be< "
operator|+
name|Version
operator|.
name|V_5_5_0_UNRELEASED
operator|.
name|toString
argument_list|()
assert|;
name|writeToBWC
argument_list|(
name|out
argument_list|,
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * BWC serialization for parent/child {@link InnerHitBuilder}.      * Should only be used to send hasParent or hasChild inner hits to nodes pre 5.5.      */
DECL|method|writeToParentChildBWC
specifier|public
name|void
name|writeToParentChildBWC
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|QueryBuilder
name|query
parameter_list|,
name|String
name|parentChildPath
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_5_0_UNRELEASED
argument_list|)
operator|)
operator|:
literal|"invalid output version, must be< "
operator|+
name|Version
operator|.
name|V_5_5_0_UNRELEASED
operator|.
name|toString
argument_list|()
assert|;
name|writeToBWC
argument_list|(
name|out
argument_list|,
name|query
argument_list|,
literal|null
argument_list|,
name|parentChildPath
argument_list|)
expr_stmt|;
block|}
DECL|method|writeToBWC
specifier|private
name|void
name|writeToBWC
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|QueryBuilder
name|query
parameter_list|,
name|String
name|nestedPath
parameter_list|,
name|String
name|parentChildPath
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|nestedPath
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|nestedPath
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|parentChildPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_2_0
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|ignoreUnmapped
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|trackScores
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|storedFieldsContext
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|docValueFields
argument_list|)
expr_stmt|;
name|boolean
name|hasScriptFields
init|=
name|scriptFields
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasScriptFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasScriptFields
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|scriptFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ScriptField
argument_list|>
name|iterator
init|=
name|scriptFields
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|ScriptField
operator|::
name|fieldName
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|fetchSourceContext
argument_list|)
expr_stmt|;
name|boolean
name|hasSorts
init|=
name|sorts
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasSorts
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSorts
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|sorts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sort
range|:
name|sorts
control|)
block|{
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|highlightBuilder
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName
specifier|public
name|InnerHitBuilder
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setIgnoreUnmapped
specifier|public
name|InnerHitBuilder
name|setIgnoreUnmapped
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|ignoreUnmapped
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Whether to include inner hits in the search response hits if required mappings is missing      */
DECL|method|isIgnoreUnmapped
specifier|public
name|boolean
name|isIgnoreUnmapped
parameter_list|()
block|{
return|return
name|ignoreUnmapped
return|;
block|}
DECL|method|getFrom
specifier|public
name|int
name|getFrom
parameter_list|()
block|{
return|return
name|from
return|;
block|}
DECL|method|setFrom
specifier|public
name|InnerHitBuilder
name|setFrom
parameter_list|(
name|int
name|from
parameter_list|)
block|{
if|if
condition|(
name|from
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal from value, at least 0 or higher"
argument_list|)
throw|;
block|}
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSize
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|setSize
specifier|public
name|InnerHitBuilder
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal size value, at least 0 or higher"
argument_list|)
throw|;
block|}
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isExplain
specifier|public
name|boolean
name|isExplain
parameter_list|()
block|{
return|return
name|explain
return|;
block|}
DECL|method|setExplain
specifier|public
name|InnerHitBuilder
name|setExplain
parameter_list|(
name|boolean
name|explain
parameter_list|)
block|{
name|this
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isVersion
specifier|public
name|boolean
name|isVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|setVersion
specifier|public
name|InnerHitBuilder
name|setVersion
parameter_list|(
name|boolean
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isTrackScores
specifier|public
name|boolean
name|isTrackScores
parameter_list|()
block|{
return|return
name|trackScores
return|;
block|}
DECL|method|setTrackScores
specifier|public
name|InnerHitBuilder
name|setTrackScores
parameter_list|(
name|boolean
name|trackScores
parameter_list|)
block|{
name|this
operator|.
name|trackScores
operator|=
name|trackScores
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the stored fields to load and return.      *      * @deprecated Use {@link InnerHitBuilder#getStoredFieldsContext()} instead.      */
annotation|@
name|Deprecated
DECL|method|getFieldNames
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|()
block|{
return|return
name|storedFieldsContext
operator|==
literal|null
condition|?
literal|null
else|:
name|storedFieldsContext
operator|.
name|fieldNames
argument_list|()
return|;
block|}
comment|/**      * Sets the stored fields to load and return.      * If none are specified, the source of the document will be returned.      *      * @deprecated Use {@link InnerHitBuilder#setStoredFieldNames(List)} instead.      */
annotation|@
name|Deprecated
DECL|method|setFieldNames
specifier|public
name|InnerHitBuilder
name|setFieldNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
return|return
name|setStoredFieldNames
argument_list|(
name|fieldNames
argument_list|)
return|;
block|}
comment|/**      * Gets the stored fields context.      */
DECL|method|getStoredFieldsContext
specifier|public
name|StoredFieldsContext
name|getStoredFieldsContext
parameter_list|()
block|{
return|return
name|storedFieldsContext
return|;
block|}
comment|/**      * Sets the stored fields to load and return.      * If none are specified, the source of the document will be returned.      */
DECL|method|setStoredFieldNames
specifier|public
name|InnerHitBuilder
name|setStoredFieldNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
if|if
condition|(
name|storedFieldsContext
operator|==
literal|null
condition|)
block|{
name|storedFieldsContext
operator|=
name|StoredFieldsContext
operator|.
name|fromList
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storedFieldsContext
operator|.
name|addFieldNames
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Gets the docvalue fields.      *      * @deprecated Use {@link InnerHitBuilder#getDocValueFields()} instead.      */
annotation|@
name|Deprecated
DECL|method|getFieldDataFields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFieldDataFields
parameter_list|()
block|{
return|return
name|docValueFields
return|;
block|}
comment|/**      * Sets the stored fields to load from the docvalue and return.      *      * @deprecated Use {@link InnerHitBuilder#setDocValueFields(List)} instead.      */
annotation|@
name|Deprecated
DECL|method|setFieldDataFields
specifier|public
name|InnerHitBuilder
name|setFieldDataFields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldDataFields
parameter_list|)
block|{
name|this
operator|.
name|docValueFields
operator|=
name|fieldDataFields
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to load from the docvalue and return.      *      * @deprecated Use {@link InnerHitBuilder#addDocValueField(String)} instead.      */
annotation|@
name|Deprecated
DECL|method|addFieldDataField
specifier|public
name|InnerHitBuilder
name|addFieldDataField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|docValueFields
operator|==
literal|null
condition|)
block|{
name|docValueFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|docValueFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the docvalue fields.      */
DECL|method|getDocValueFields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDocValueFields
parameter_list|()
block|{
return|return
name|docValueFields
return|;
block|}
comment|/**      * Sets the stored fields to load from the docvalue and return.      */
DECL|method|setDocValueFields
specifier|public
name|InnerHitBuilder
name|setDocValueFields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|docValueFields
parameter_list|)
block|{
name|this
operator|.
name|docValueFields
operator|=
name|docValueFields
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to load from the docvalue and return.      */
DECL|method|addDocValueField
specifier|public
name|InnerHitBuilder
name|addDocValueField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|docValueFields
operator|==
literal|null
condition|)
block|{
name|docValueFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|docValueFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getScriptFields
specifier|public
name|Set
argument_list|<
name|ScriptField
argument_list|>
name|getScriptFields
parameter_list|()
block|{
return|return
name|scriptFields
return|;
block|}
DECL|method|setScriptFields
specifier|public
name|InnerHitBuilder
name|setScriptFields
parameter_list|(
name|Set
argument_list|<
name|ScriptField
argument_list|>
name|scriptFields
parameter_list|)
block|{
name|this
operator|.
name|scriptFields
operator|=
name|scriptFields
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addScriptField
specifier|public
name|InnerHitBuilder
name|addScriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|Script
name|script
parameter_list|)
block|{
if|if
condition|(
name|scriptFields
operator|==
literal|null
condition|)
block|{
name|scriptFields
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|scriptFields
operator|.
name|add
argument_list|(
operator|new
name|ScriptField
argument_list|(
name|name
argument_list|,
name|script
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getFetchSourceContext
specifier|public
name|FetchSourceContext
name|getFetchSourceContext
parameter_list|()
block|{
return|return
name|fetchSourceContext
return|;
block|}
DECL|method|setFetchSourceContext
specifier|public
name|InnerHitBuilder
name|setFetchSourceContext
parameter_list|(
name|FetchSourceContext
name|fetchSourceContext
parameter_list|)
block|{
name|this
operator|.
name|fetchSourceContext
operator|=
name|fetchSourceContext
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSorts
specifier|public
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSorts
parameter_list|()
block|{
return|return
name|sorts
return|;
block|}
DECL|method|setSorts
specifier|public
name|InnerHitBuilder
name|setSorts
parameter_list|(
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|sorts
parameter_list|)
block|{
name|this
operator|.
name|sorts
operator|=
name|sorts
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addSort
specifier|public
name|InnerHitBuilder
name|addSort
parameter_list|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sort
parameter_list|)
block|{
if|if
condition|(
name|sorts
operator|==
literal|null
condition|)
block|{
name|sorts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|sorts
operator|.
name|add
argument_list|(
name|sort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getHighlightBuilder
specifier|public
name|HighlightBuilder
name|getHighlightBuilder
parameter_list|()
block|{
return|return
name|highlightBuilder
return|;
block|}
DECL|method|setHighlightBuilder
specifier|public
name|InnerHitBuilder
name|setHighlightBuilder
parameter_list|(
name|HighlightBuilder
name|highlightBuilder
parameter_list|)
block|{
name|this
operator|.
name|highlightBuilder
operator|=
name|highlightBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getQuery
name|QueryBuilder
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|NAME_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|IGNORE_UNMAPPED
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|ignoreUnmapped
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|FROM_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|SIZE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|VERSION_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|EXPLAIN_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|explain
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|TRACK_SCORES_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|trackScores
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchSourceContext
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|_SOURCE_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|fetchSourceContext
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|storedFieldsContext
operator|!=
literal|null
condition|)
block|{
name|storedFieldsContext
operator|.
name|toXContent
argument_list|(
name|SearchSourceBuilder
operator|.
name|STORED_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docValueFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|SearchSourceBuilder
operator|.
name|DOCVALUE_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldDataField
range|:
name|docValueFields
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldDataField
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scriptFields
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|SearchSourceBuilder
operator|.
name|SCRIPT_FIELDS_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptField
name|scriptField
range|:
name|scriptFields
control|)
block|{
name|scriptField
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sorts
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|SearchSourceBuilder
operator|.
name|SORT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sort
range|:
name|sorts
control|)
block|{
name|sort
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|highlightBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|SearchSourceBuilder
operator|.
name|HIGHLIGHT_FIELD
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|highlightBuilder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|InnerHitBuilder
name|that
init|=
operator|(
name|InnerHitBuilder
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|that
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|ignoreUnmapped
argument_list|,
name|that
operator|.
name|ignoreUnmapped
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|from
argument_list|,
name|that
operator|.
name|from
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|size
argument_list|,
name|that
operator|.
name|size
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|explain
argument_list|,
name|that
operator|.
name|explain
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|version
argument_list|,
name|that
operator|.
name|version
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|trackScores
argument_list|,
name|that
operator|.
name|trackScores
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|storedFieldsContext
argument_list|,
name|that
operator|.
name|storedFieldsContext
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|docValueFields
argument_list|,
name|that
operator|.
name|docValueFields
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|scriptFields
argument_list|,
name|that
operator|.
name|scriptFields
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fetchSourceContext
argument_list|,
name|that
operator|.
name|fetchSourceContext
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|sorts
argument_list|,
name|that
operator|.
name|sorts
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|highlightBuilder
argument_list|,
name|that
operator|.
name|highlightBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|ignoreUnmapped
argument_list|,
name|from
argument_list|,
name|size
argument_list|,
name|explain
argument_list|,
name|version
argument_list|,
name|trackScores
argument_list|,
name|storedFieldsContext
argument_list|,
name|docValueFields
argument_list|,
name|scriptFields
argument_list|,
name|fetchSourceContext
argument_list|,
name|sorts
argument_list|,
name|highlightBuilder
argument_list|)
return|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|InnerHitBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parse
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|InnerHitBuilder
argument_list|()
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

