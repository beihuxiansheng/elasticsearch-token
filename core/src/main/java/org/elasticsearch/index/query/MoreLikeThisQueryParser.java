begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MoreLikeThisQueryBuilder
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Parser for the More Like This Query (MLT Query) which finds documents that are "like" a given set of documents.  *  * The documents are provided as a set of strings and/or a list of {@link Item}.  */
end_comment

begin_class
DECL|class|MoreLikeThisQueryParser
specifier|public
class|class
name|MoreLikeThisQueryParser
implements|implements
name|QueryParser
argument_list|<
name|MoreLikeThisQueryBuilder
argument_list|>
block|{
DECL|interface|Field
specifier|public
interface|interface
name|Field
block|{
DECL|field|FIELDS
name|ParseField
name|FIELDS
init|=
operator|new
name|ParseField
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
DECL|field|LIKE
name|ParseField
name|LIKE
init|=
operator|new
name|ParseField
argument_list|(
literal|"like"
argument_list|)
decl_stmt|;
DECL|field|UNLIKE
name|ParseField
name|UNLIKE
init|=
operator|new
name|ParseField
argument_list|(
literal|"unlike"
argument_list|)
decl_stmt|;
DECL|field|LIKE_TEXT
name|ParseField
name|LIKE_TEXT
init|=
operator|new
name|ParseField
argument_list|(
literal|"like_text"
argument_list|)
operator|.
name|withAllDeprecated
argument_list|(
literal|"like"
argument_list|)
decl_stmt|;
DECL|field|IDS
name|ParseField
name|IDS
init|=
operator|new
name|ParseField
argument_list|(
literal|"ids"
argument_list|)
operator|.
name|withAllDeprecated
argument_list|(
literal|"like"
argument_list|)
decl_stmt|;
DECL|field|DOCS
name|ParseField
name|DOCS
init|=
operator|new
name|ParseField
argument_list|(
literal|"docs"
argument_list|)
operator|.
name|withAllDeprecated
argument_list|(
literal|"like"
argument_list|)
decl_stmt|;
DECL|field|MAX_QUERY_TERMS
name|ParseField
name|MAX_QUERY_TERMS
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_query_terms"
argument_list|)
decl_stmt|;
DECL|field|MIN_TERM_FREQ
name|ParseField
name|MIN_TERM_FREQ
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_term_freq"
argument_list|)
decl_stmt|;
DECL|field|MIN_DOC_FREQ
name|ParseField
name|MIN_DOC_FREQ
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_doc_freq"
argument_list|)
decl_stmt|;
DECL|field|MAX_DOC_FREQ
name|ParseField
name|MAX_DOC_FREQ
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_doc_freq"
argument_list|)
decl_stmt|;
DECL|field|MIN_WORD_LENGTH
name|ParseField
name|MIN_WORD_LENGTH
init|=
operator|new
name|ParseField
argument_list|(
literal|"min_word_length"
argument_list|,
literal|"min_word_len"
argument_list|)
decl_stmt|;
DECL|field|MAX_WORD_LENGTH
name|ParseField
name|MAX_WORD_LENGTH
init|=
operator|new
name|ParseField
argument_list|(
literal|"max_word_length"
argument_list|,
literal|"max_word_len"
argument_list|)
decl_stmt|;
DECL|field|STOP_WORDS
name|ParseField
name|STOP_WORDS
init|=
operator|new
name|ParseField
argument_list|(
literal|"stop_words"
argument_list|)
decl_stmt|;
DECL|field|ANALYZER
name|ParseField
name|ANALYZER
init|=
operator|new
name|ParseField
argument_list|(
literal|"analyzer"
argument_list|)
decl_stmt|;
DECL|field|MINIMUM_SHOULD_MATCH
name|ParseField
name|MINIMUM_SHOULD_MATCH
init|=
operator|new
name|ParseField
argument_list|(
literal|"minimum_should_match"
argument_list|)
decl_stmt|;
DECL|field|BOOST_TERMS
name|ParseField
name|BOOST_TERMS
init|=
operator|new
name|ParseField
argument_list|(
literal|"boost_terms"
argument_list|)
decl_stmt|;
DECL|field|INCLUDE
name|ParseField
name|INCLUDE
init|=
operator|new
name|ParseField
argument_list|(
literal|"include"
argument_list|)
decl_stmt|;
DECL|field|FAIL_ON_UNSUPPORTED_FIELD
name|ParseField
name|FAIL_ON_UNSUPPORTED_FIELD
init|=
operator|new
name|ParseField
argument_list|(
literal|"fail_on_unsupported_field"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|names
specifier|public
name|String
index|[]
name|names
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|MoreLikeThisQueryBuilder
operator|.
name|NAME
block|,
literal|"more_like_this"
block|,
literal|"moreLikeThis"
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|fromXContent
specifier|public
name|MoreLikeThisQueryBuilder
name|fromXContent
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
comment|// document inputs
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|likeTexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unlikeTexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Item
argument_list|>
name|likeItems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Item
argument_list|>
name|unlikeItems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// term selection parameters
name|int
name|maxQueryTerms
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MAX_QUERY_TERMS
decl_stmt|;
name|int
name|minTermFreq
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MIN_TERM_FREQ
decl_stmt|;
name|int
name|minDocFreq
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MIN_DOC_FREQ
decl_stmt|;
name|int
name|maxDocFreq
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MAX_DOC_FREQ
decl_stmt|;
name|int
name|minWordLength
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MIN_WORD_LENGTH
decl_stmt|;
name|int
name|maxWordLength
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MAX_WORD_LENGTH
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|stopWords
init|=
literal|null
decl_stmt|;
name|String
name|analyzer
init|=
literal|null
decl_stmt|;
comment|// query formation parameters
name|String
name|minimumShouldMatch
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_MINIMUM_SHOULD_MATCH
decl_stmt|;
name|float
name|boostTerms
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_BOOST_TERMS
decl_stmt|;
name|boolean
name|include
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_INCLUDE
decl_stmt|;
comment|// other parameters
name|boolean
name|failOnUnsupportedField
init|=
name|MoreLikeThisQueryBuilder
operator|.
name|DEFAULT_FAIL_ON_UNSUPPORTED_FIELDS
decl_stmt|;
name|float
name|boost
init|=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
decl_stmt|;
name|String
name|queryName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|LIKE
argument_list|)
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|UNLIKE
argument_list|)
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|unlikeTexts
argument_list|,
name|unlikeItems
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|LIKE_TEXT
argument_list|)
condition|)
block|{
name|likeTexts
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MAX_QUERY_TERMS
argument_list|)
condition|)
block|{
name|maxQueryTerms
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MIN_TERM_FREQ
argument_list|)
condition|)
block|{
name|minTermFreq
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MIN_DOC_FREQ
argument_list|)
condition|)
block|{
name|minDocFreq
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MAX_DOC_FREQ
argument_list|)
condition|)
block|{
name|maxDocFreq
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MIN_WORD_LENGTH
argument_list|)
condition|)
block|{
name|minWordLength
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MAX_WORD_LENGTH
argument_list|)
condition|)
block|{
name|maxWordLength
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|ANALYZER
argument_list|)
condition|)
block|{
name|analyzer
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|MINIMUM_SHOULD_MATCH
argument_list|)
condition|)
block|{
name|minimumShouldMatch
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|BOOST_TERMS
argument_list|)
condition|)
block|{
name|boostTerms
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|INCLUDE
argument_list|)
condition|)
block|{
name|include
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|FAIL_ON_UNSUPPORTED_FIELD
argument_list|)
condition|)
block|{
name|failOnUnsupportedField
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boost"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|boost
operator|=
name|parser
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_name"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|queryName
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"[mlt] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|FIELDS
argument_list|)
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|LIKE
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|UNLIKE
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|unlikeTexts
argument_list|,
name|unlikeItems
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|IDS
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
operator|!
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ids array element should only contain ids"
argument_list|)
throw|;
block|}
name|likeItems
operator|.
name|add
argument_list|(
operator|new
name|Item
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|DOCS
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"docs array element should include an object"
argument_list|)
throw|;
block|}
name|likeItems
operator|.
name|add
argument_list|(
name|Item
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
argument_list|,
operator|new
name|Item
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|STOP_WORDS
argument_list|)
condition|)
block|{
name|stopWords
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|stopWords
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"[mlt] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|LIKE
argument_list|)
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
operator|.
name|match
argument_list|(
name|currentFieldName
argument_list|,
name|Field
operator|.
name|UNLIKE
argument_list|)
condition|)
block|{
name|parseLikeField
argument_list|(
name|parseContext
argument_list|,
name|unlikeTexts
argument_list|,
name|unlikeItems
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"[mlt] query does not support ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|likeTexts
operator|.
name|isEmpty
argument_list|()
operator|&&
name|likeItems
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"more_like_this requires 'like' to be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"more_like_this requires 'fields' to be non-empty"
argument_list|)
throw|;
block|}
name|String
index|[]
name|fieldsArray
init|=
name|fields
operator|==
literal|null
condition|?
literal|null
else|:
name|fields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|likeTextsArray
init|=
name|likeTexts
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|likeTexts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|likeTexts
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|unlikeTextsArray
init|=
name|unlikeTexts
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|unlikeTexts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|unlikeTexts
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Item
index|[]
name|likeItemsArray
init|=
name|likeItems
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|likeItems
operator|.
name|toArray
argument_list|(
operator|new
name|Item
index|[
name|likeItems
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Item
index|[]
name|unlikeItemsArray
init|=
name|unlikeItems
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|unlikeItems
operator|.
name|toArray
argument_list|(
operator|new
name|Item
index|[
name|unlikeItems
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|MoreLikeThisQueryBuilder
name|moreLikeThisQueryBuilder
init|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
name|fieldsArray
argument_list|,
name|likeTextsArray
argument_list|,
name|likeItemsArray
argument_list|)
operator|.
name|unlike
argument_list|(
name|unlikeTextsArray
argument_list|)
operator|.
name|unlike
argument_list|(
name|unlikeItemsArray
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
name|maxQueryTerms
argument_list|)
operator|.
name|minTermFreq
argument_list|(
name|minTermFreq
argument_list|)
operator|.
name|minDocFreq
argument_list|(
name|minDocFreq
argument_list|)
operator|.
name|maxDocFreq
argument_list|(
name|maxDocFreq
argument_list|)
operator|.
name|minWordLength
argument_list|(
name|minWordLength
argument_list|)
operator|.
name|maxWordLength
argument_list|(
name|maxWordLength
argument_list|)
operator|.
name|analyzer
argument_list|(
name|analyzer
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
name|minimumShouldMatch
argument_list|)
operator|.
name|boostTerms
argument_list|(
name|boostTerms
argument_list|)
operator|.
name|include
argument_list|(
name|include
argument_list|)
operator|.
name|failOnUnsupportedField
argument_list|(
name|failOnUnsupportedField
argument_list|)
operator|.
name|boost
argument_list|(
name|boost
argument_list|)
operator|.
name|queryName
argument_list|(
name|queryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopWords
operator|!=
literal|null
condition|)
block|{
name|moreLikeThisQueryBuilder
operator|.
name|stopWords
argument_list|(
name|stopWords
argument_list|)
expr_stmt|;
block|}
return|return
name|moreLikeThisQueryBuilder
return|;
block|}
DECL|method|parseLikeField
specifier|private
specifier|static
name|void
name|parseLikeField
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|texts
parameter_list|,
name|List
argument_list|<
name|Item
argument_list|>
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|parseContext
operator|.
name|parser
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|.
name|isValue
argument_list|()
condition|)
block|{
name|texts
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|items
operator|.
name|add
argument_list|(
name|Item
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|parseContext
operator|.
name|parseFieldMatcher
argument_list|()
argument_list|,
operator|new
name|Item
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Content of 'like' parameter should either be a string or an object"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBuilderPrototype
specifier|public
name|MoreLikeThisQueryBuilder
name|getBuilderPrototype
parameter_list|()
block|{
return|return
name|MoreLikeThisQueryBuilder
operator|.
name|PROTOTYPE
return|;
block|}
block|}
end_class

end_unit

