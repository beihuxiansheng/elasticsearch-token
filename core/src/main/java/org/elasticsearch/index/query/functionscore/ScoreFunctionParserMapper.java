begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.functionscore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentLocation
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_class
DECL|class|ScoreFunctionParserMapper
specifier|public
class|class
name|ScoreFunctionParserMapper
block|{
DECL|field|functionParsers
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|ScoreFunctionParser
argument_list|<
name|?
argument_list|>
argument_list|>
name|functionParsers
decl_stmt|;
DECL|method|ScoreFunctionParserMapper
specifier|public
name|ScoreFunctionParserMapper
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ScoreFunctionParser
argument_list|<
name|?
argument_list|>
argument_list|>
name|functionParsers
parameter_list|)
block|{
name|this
operator|.
name|functionParsers
operator|=
name|unmodifiableMap
argument_list|(
name|functionParsers
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|ScoreFunctionParser
argument_list|<
name|?
argument_list|>
name|get
parameter_list|(
name|XContentLocation
name|contentLocation
parameter_list|,
name|String
name|parserName
parameter_list|)
block|{
name|ScoreFunctionParser
argument_list|<
name|?
argument_list|>
name|functionParser
init|=
name|get
argument_list|(
name|parserName
argument_list|)
decl_stmt|;
if|if
condition|(
name|functionParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|contentLocation
argument_list|,
literal|"No function with the name ["
operator|+
name|parserName
operator|+
literal|"] is registered."
argument_list|)
throw|;
block|}
return|return
name|functionParser
return|;
block|}
DECL|method|get
specifier|private
name|ScoreFunctionParser
argument_list|<
name|?
argument_list|>
name|get
parameter_list|(
name|String
name|parserName
parameter_list|)
block|{
return|return
name|functionParsers
operator|.
name|get
argument_list|(
name|parserName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

