begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SnapshotDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogDeletionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An {@link IndexDeletionPolicy} that coordinates between Lucene's commits and the retention of translog generation files,  * making sure that all translog files that are needed to recover from the Lucene commit are not deleted.  */
end_comment

begin_class
DECL|class|CombinedDeletionPolicy
class|class
name|CombinedDeletionPolicy
extends|extends
name|IndexDeletionPolicy
block|{
DECL|field|translogDeletionPolicy
specifier|private
specifier|final
name|TranslogDeletionPolicy
name|translogDeletionPolicy
decl_stmt|;
DECL|field|openMode
specifier|private
specifier|final
name|EngineConfig
operator|.
name|OpenMode
name|openMode
decl_stmt|;
DECL|field|indexDeletionPolicy
specifier|private
specifier|final
name|SnapshotDeletionPolicy
name|indexDeletionPolicy
decl_stmt|;
DECL|method|CombinedDeletionPolicy
name|CombinedDeletionPolicy
parameter_list|(
name|SnapshotDeletionPolicy
name|indexDeletionPolicy
parameter_list|,
name|TranslogDeletionPolicy
name|translogDeletionPolicy
parameter_list|,
name|EngineConfig
operator|.
name|OpenMode
name|openMode
parameter_list|)
block|{
name|this
operator|.
name|indexDeletionPolicy
operator|=
name|indexDeletionPolicy
expr_stmt|;
name|this
operator|.
name|translogDeletionPolicy
operator|=
name|translogDeletionPolicy
expr_stmt|;
name|this
operator|.
name|openMode
operator|=
name|openMode
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onInit
specifier|public
name|void
name|onInit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
name|indexDeletionPolicy
operator|.
name|onInit
argument_list|(
name|commits
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|openMode
condition|)
block|{
case|case
name|CREATE_INDEX_AND_TRANSLOG
case|:
assert|assert
name|commits
operator|.
name|isEmpty
argument_list|()
operator|:
literal|"index is being created but we already have commits"
assert|;
break|break;
case|case
name|OPEN_INDEX_CREATE_TRANSLOG
case|:
assert|assert
name|commits
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|:
literal|"index is opened, but we have no commits"
assert|;
break|break;
case|case
name|OPEN_INDEX_AND_TRANSLOG
case|:
assert|assert
name|commits
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|:
literal|"index is opened, but we have no commits"
assert|;
name|setLastCommittedTranslogGeneration
argument_list|(
name|commits
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown openMode ["
operator|+
name|openMode
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|onCommit
specifier|public
name|void
name|onCommit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
name|indexDeletionPolicy
operator|.
name|onCommit
argument_list|(
name|commits
argument_list|)
expr_stmt|;
name|setLastCommittedTranslogGeneration
argument_list|(
name|commits
argument_list|)
expr_stmt|;
block|}
DECL|method|setLastCommittedTranslogGeneration
specifier|private
name|void
name|setLastCommittedTranslogGeneration
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
comment|// when opening an existing lucene index, we currently always open the last commit.
comment|// we therefore use the translog gen as the one that will be required for recovery
specifier|final
name|IndexCommit
name|indexCommit
init|=
name|commits
operator|.
name|get
argument_list|(
name|commits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
assert|assert
name|indexCommit
operator|.
name|isDeleted
argument_list|()
operator|==
literal|false
operator|:
literal|"last commit is deleted"
assert|;
name|long
name|minGen
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|indexCommit
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|translogDeletionPolicy
operator|.
name|setMinTranslogGenerationForRecovery
argument_list|(
name|minGen
argument_list|)
expr_stmt|;
block|}
DECL|method|getIndexDeletionPolicy
specifier|public
name|SnapshotDeletionPolicy
name|getIndexDeletionPolicy
parameter_list|()
block|{
return|return
name|indexDeletionPolicy
return|;
block|}
block|}
end_class

end_unit

