begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BitDocIdSetFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ReleasableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|MergeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|Engine
specifier|public
specifier|abstract
class|class
name|Engine
implements|implements
name|Closeable
block|{
DECL|field|SYNC_COMMIT_ID
specifier|public
specifier|static
specifier|final
name|String
name|SYNC_COMMIT_ID
init|=
literal|"sync_id"
decl_stmt|;
DECL|field|shardId
specifier|protected
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|logger
specifier|protected
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|engineConfig
specifier|protected
specifier|final
name|EngineConfig
name|engineConfig
decl_stmt|;
DECL|field|store
specifier|protected
specifier|final
name|Store
name|store
decl_stmt|;
DECL|field|isClosed
specifier|protected
specifier|final
name|AtomicBoolean
name|isClosed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|failedEngineListener
specifier|protected
specifier|final
name|FailedEngineListener
name|failedEngineListener
decl_stmt|;
DECL|field|deletionPolicy
specifier|protected
specifier|final
name|SnapshotDeletionPolicy
name|deletionPolicy
decl_stmt|;
DECL|field|failEngineLock
specifier|protected
specifier|final
name|ReentrantLock
name|failEngineLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|rwl
specifier|protected
specifier|final
name|ReentrantReadWriteLock
name|rwl
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|protected
specifier|final
name|ReleasableLock
name|readLock
init|=
operator|new
name|ReleasableLock
argument_list|(
name|rwl
operator|.
name|readLock
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|writeLock
specifier|protected
specifier|final
name|ReleasableLock
name|writeLock
init|=
operator|new
name|ReleasableLock
argument_list|(
name|rwl
operator|.
name|writeLock
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|failedEngine
specifier|protected
specifier|volatile
name|Throwable
name|failedEngine
init|=
literal|null
decl_stmt|;
DECL|method|Engine
specifier|protected
name|Engine
parameter_list|(
name|EngineConfig
name|engineConfig
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|engineConfig
operator|.
name|getStore
argument_list|()
argument_list|,
literal|"Store must be provided to the engine"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|engineConfig
operator|.
name|getDeletionPolicy
argument_list|()
argument_list|,
literal|"Snapshot deletion policy must be provided to the engine"
argument_list|)
expr_stmt|;
name|this
operator|.
name|engineConfig
operator|=
name|engineConfig
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|engineConfig
operator|.
name|getShardId
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|engineConfig
operator|.
name|getStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|Engine
operator|.
name|class
argument_list|,
comment|// we use the engine class directly here to make sure all subclasses have the same logger name
name|engineConfig
operator|.
name|getIndexSettings
argument_list|()
argument_list|,
name|engineConfig
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|failedEngineListener
operator|=
name|engineConfig
operator|.
name|getFailedEngineListener
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletionPolicy
operator|=
name|engineConfig
operator|.
name|getDeletionPolicy
argument_list|()
expr_stmt|;
block|}
comment|/** Returns 0 in the case where accountable is null, otherwise returns {@code ramBytesUsed()} */
DECL|method|guardedRamBytesUsed
specifier|protected
specifier|static
name|long
name|guardedRamBytesUsed
parameter_list|(
name|Accountable
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|a
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
comment|/**      * Tries to extract a segment reader from the given index reader.      * If no SegmentReader can be extracted an {@link IllegalStateException} is thrown.      */
DECL|method|segmentReader
specifier|protected
specifier|static
name|SegmentReader
name|segmentReader
parameter_list|(
name|LeafReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|SegmentReader
condition|)
block|{
return|return
operator|(
name|SegmentReader
operator|)
name|reader
return|;
block|}
elseif|else
if|if
condition|(
name|reader
operator|instanceof
name|FilterLeafReader
condition|)
block|{
specifier|final
name|FilterLeafReader
name|fReader
init|=
operator|(
name|FilterLeafReader
operator|)
name|reader
decl_stmt|;
return|return
name|segmentReader
argument_list|(
name|FilterLeafReader
operator|.
name|unwrap
argument_list|(
name|fReader
argument_list|)
argument_list|)
return|;
block|}
comment|// hard fail - we can't get a SegmentReader
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can not extract segment reader from given index reader ["
operator|+
name|reader
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|/**      * Returns whether a leaf reader comes from a merge (versus flush or addIndexes).      */
DECL|method|isMergedSegment
specifier|protected
specifier|static
name|boolean
name|isMergedSegment
parameter_list|(
name|LeafReader
name|reader
parameter_list|)
block|{
comment|// We expect leaves to be segment readers
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
init|=
name|segmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|info
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
specifier|final
name|String
name|source
init|=
name|diagnostics
operator|.
name|get
argument_list|(
name|IndexWriter
operator|.
name|SOURCE
argument_list|)
decl_stmt|;
assert|assert
name|Arrays
operator|.
name|asList
argument_list|(
name|IndexWriter
operator|.
name|SOURCE_ADDINDEXES_READERS
argument_list|,
name|IndexWriter
operator|.
name|SOURCE_FLUSH
argument_list|,
name|IndexWriter
operator|.
name|SOURCE_MERGE
argument_list|)
operator|.
name|contains
argument_list|(
name|source
argument_list|)
operator|:
literal|"Unknown source "
operator|+
name|source
assert|;
return|return
name|IndexWriter
operator|.
name|SOURCE_MERGE
operator|.
name|equals
argument_list|(
name|source
argument_list|)
return|;
block|}
DECL|method|newSearcher
specifier|protected
name|Searcher
name|newSearcher
parameter_list|(
name|String
name|source
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|SearcherManager
name|manager
parameter_list|)
block|{
return|return
operator|new
name|EngineSearcher
argument_list|(
name|source
argument_list|,
name|searcher
argument_list|,
name|manager
argument_list|,
name|store
argument_list|,
name|logger
argument_list|)
return|;
block|}
DECL|method|config
specifier|public
specifier|final
name|EngineConfig
name|config
parameter_list|()
block|{
return|return
name|engineConfig
return|;
block|}
DECL|method|getLastCommittedSegmentInfos
specifier|protected
specifier|abstract
name|SegmentInfos
name|getLastCommittedSegmentInfos
parameter_list|()
function_decl|;
DECL|method|getMergeStats
specifier|public
name|MergeStats
name|getMergeStats
parameter_list|()
block|{
return|return
operator|new
name|MergeStats
argument_list|()
return|;
block|}
comment|/** A throttling class that can be activated, causing the      * {@code acquireThrottle} method to block on a lock when throttling      * is enabled      */
DECL|class|IndexThrottle
specifier|protected
specifier|static
specifier|final
class|class
name|IndexThrottle
block|{
DECL|field|NOOP_LOCK
specifier|private
specifier|static
specifier|final
name|ReleasableLock
name|NOOP_LOCK
init|=
operator|new
name|ReleasableLock
argument_list|(
operator|new
name|NoOpLock
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|lockReference
specifier|private
specifier|final
name|ReleasableLock
name|lockReference
init|=
operator|new
name|ReleasableLock
argument_list|(
operator|new
name|ReentrantLock
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|lock
specifier|private
specifier|volatile
name|ReleasableLock
name|lock
init|=
name|NOOP_LOCK
decl_stmt|;
DECL|method|acquireThrottle
specifier|public
name|Releasable
name|acquireThrottle
parameter_list|()
block|{
return|return
name|lock
operator|.
name|acquire
argument_list|()
return|;
block|}
comment|/** Activate throttling, which switches the lock to be a real lock */
DECL|method|activate
specifier|public
name|void
name|activate
parameter_list|()
block|{
assert|assert
name|lock
operator|==
name|NOOP_LOCK
operator|:
literal|"throttling activated while already active"
assert|;
name|lock
operator|=
name|lockReference
expr_stmt|;
block|}
comment|/** Deactivate throttling, which switches the lock to be an always-acquirable NoOpLock */
DECL|method|deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
assert|assert
name|lock
operator|!=
name|NOOP_LOCK
operator|:
literal|"throttling deactivated but not active"
assert|;
name|lock
operator|=
name|NOOP_LOCK
expr_stmt|;
block|}
block|}
comment|/** A Lock implementation that always allows the lock to be acquired */
DECL|class|NoOpLock
specifier|protected
specifier|static
specifier|final
class|class
name|NoOpLock
implements|implements
name|Lock
block|{
annotation|@
name|Override
DECL|method|lock
specifier|public
name|void
name|lock
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|lockInterruptibly
specifier|public
name|void
name|lockInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{         }
annotation|@
name|Override
DECL|method|tryLock
specifier|public
name|boolean
name|tryLock
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|tryLock
specifier|public
name|boolean
name|tryLock
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|unlock
specifier|public
name|void
name|unlock
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|newCondition
specifier|public
name|Condition
name|newCondition
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"NoOpLock can't provide a condition"
argument_list|)
throw|;
block|}
block|}
DECL|method|create
specifier|public
specifier|abstract
name|void
name|create
parameter_list|(
name|Create
name|create
parameter_list|)
throws|throws
name|EngineException
function_decl|;
DECL|method|index
specifier|public
specifier|abstract
name|boolean
name|index
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|EngineException
function_decl|;
DECL|method|delete
specifier|public
specifier|abstract
name|void
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|EngineException
function_decl|;
comment|/** @deprecated This was removed, but we keep this API so translog can replay any DBQs on upgrade. */
annotation|@
name|Deprecated
DECL|method|delete
specifier|public
specifier|abstract
name|void
name|delete
parameter_list|(
name|DeleteByQuery
name|delete
parameter_list|)
throws|throws
name|EngineException
function_decl|;
comment|/**      * Attempts to do a special commit where the given syncID is put into the commit data. The attempt      * succeeds if there are not pending writes in lucene and the current point is equal to the expected one.      * @param syncId id of this sync      * @param expectedCommitId the expected value of      * @return true if the sync commit was made, false o.w.      */
DECL|method|syncFlush
specifier|public
specifier|abstract
name|SyncedFlushResult
name|syncFlush
parameter_list|(
name|String
name|syncId
parameter_list|,
name|CommitId
name|expectedCommitId
parameter_list|)
throws|throws
name|EngineException
function_decl|;
DECL|enum|SyncedFlushResult
specifier|public
enum|enum
name|SyncedFlushResult
block|{
DECL|enum constant|SUCCESS
name|SUCCESS
block|,
DECL|enum constant|COMMIT_MISMATCH
name|COMMIT_MISMATCH
block|,
DECL|enum constant|PENDING_OPERATIONS
name|PENDING_OPERATIONS
block|}
DECL|method|getFromSearcher
specifier|final
specifier|protected
name|GetResult
name|getFromSearcher
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|EngineException
block|{
specifier|final
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"get"
argument_list|)
decl_stmt|;
specifier|final
name|Versions
operator|.
name|DocIdAndVersion
name|docIdAndVersion
decl_stmt|;
try|try
block|{
name|docIdAndVersion
operator|=
name|Versions
operator|.
name|loadDocIdAndVersion
argument_list|(
name|searcher
operator|.
name|reader
argument_list|()
argument_list|,
name|get
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Releasables
operator|.
name|closeWhileHandlingException
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
comment|//TODO: A better exception goes here
throw|throw
operator|new
name|EngineException
argument_list|(
name|shardId
argument_list|,
literal|"Couldn't resolve version"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|docIdAndVersion
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|get
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflictForReads
argument_list|(
name|docIdAndVersion
operator|.
name|version
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
condition|)
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|Uid
name|uid
init|=
name|Uid
operator|.
name|createUid
argument_list|(
name|get
operator|.
name|uid
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|uid
operator|.
name|type
argument_list|()
argument_list|,
name|uid
operator|.
name|id
argument_list|()
argument_list|,
name|docIdAndVersion
operator|.
name|version
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|docIdAndVersion
operator|!=
literal|null
condition|)
block|{
comment|// don't release the searcher on this path, it is the
comment|// responsibility of the caller to call GetResult.release
return|return
operator|new
name|GetResult
argument_list|(
name|searcher
argument_list|,
name|docIdAndVersion
argument_list|)
return|;
block|}
else|else
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
return|return
name|GetResult
operator|.
name|NOT_EXISTS
return|;
block|}
block|}
DECL|method|get
specifier|public
specifier|abstract
name|GetResult
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|EngineException
function_decl|;
comment|/**      * Returns a new searcher instance. The consumer of this      * API is responsible for releasing the returned seacher in a      * safe manner, preferably in a try/finally block.      *      * @see Searcher#close()      */
DECL|method|acquireSearcher
specifier|public
specifier|final
name|Searcher
name|acquireSearcher
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|EngineException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
comment|/* Acquire order here is store -> manager since we need           * to make sure that the store is not closed before           * the searcher is acquired. */
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|SearcherManager
name|manager
init|=
name|getSearcherManager
argument_list|()
decl_stmt|;
comment|// can never be null
comment|/* This might throw NPE but that's fine we will run ensureOpen()             *  in the catch block and throw the right exception */
specifier|final
name|IndexSearcher
name|searcher
init|=
name|manager
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Searcher
name|retVal
init|=
name|newSearcher
argument_list|(
name|source
argument_list|,
name|searcher
argument_list|,
name|manager
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|retVal
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|manager
operator|.
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EngineClosedException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// throw EngineCloseException here if we are already closed
name|logger
operator|.
name|error
argument_list|(
literal|"failed to acquire searcher, source {}"
argument_list|,
name|ex
argument_list|,
name|source
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EngineException
argument_list|(
name|shardId
argument_list|,
literal|"failed to acquire searcher, source "
operator|+
name|source
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// release the ref in the case of an error...
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** returns the translog for this engine */
DECL|method|getTranslog
specifier|public
specifier|abstract
name|Translog
name|getTranslog
parameter_list|()
function_decl|;
DECL|method|ensureOpen
specifier|protected
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|isClosed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|failedEngine
argument_list|)
throw|;
block|}
block|}
comment|/** get commits stats for the last commit */
DECL|method|commitStats
specifier|public
name|CommitStats
name|commitStats
parameter_list|()
block|{
return|return
operator|new
name|CommitStats
argument_list|(
name|getLastCommittedSegmentInfos
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Read the last segments info from the commit pointed to by the searcher manager      */
DECL|method|readLastCommittedSegmentInfos
specifier|protected
specifier|static
name|SegmentInfos
name|readLastCommittedSegmentInfos
parameter_list|(
specifier|final
name|SearcherManager
name|sm
parameter_list|,
specifier|final
name|Store
name|store
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexSearcher
name|searcher
init|=
name|sm
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
name|IndexCommit
name|latestCommit
init|=
operator|(
operator|(
name|DirectoryReader
operator|)
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|)
operator|.
name|getIndexCommit
argument_list|()
decl_stmt|;
return|return
name|Lucene
operator|.
name|readSegmentInfos
argument_list|(
name|latestCommit
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Fall back to reading from the store if reading from the commit fails
try|try
block|{
return|return
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e2
parameter_list|)
block|{
name|e2
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e2
throw|;
block|}
block|}
finally|finally
block|{
name|sm
operator|.
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Global stats on segments.      */
DECL|method|segmentsStats
specifier|public
specifier|final
name|SegmentsStats
name|segmentsStats
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"segments_stats"
argument_list|)
init|)
block|{
name|SegmentsStats
name|stats
init|=
operator|new
name|SegmentsStats
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|reader
range|:
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
specifier|final
name|SegmentReader
name|segmentReader
init|=
name|segmentReader
argument_list|(
name|reader
operator|.
name|reader
argument_list|()
argument_list|)
decl_stmt|;
name|stats
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|segmentReader
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addTermsMemoryInBytes
argument_list|(
name|guardedRamBytesUsed
argument_list|(
name|segmentReader
operator|.
name|getPostingsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addStoredFieldsMemoryInBytes
argument_list|(
name|guardedRamBytesUsed
argument_list|(
name|segmentReader
operator|.
name|getFieldsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addTermVectorsMemoryInBytes
argument_list|(
name|guardedRamBytesUsed
argument_list|(
name|segmentReader
operator|.
name|getTermVectorsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addNormsMemoryInBytes
argument_list|(
name|guardedRamBytesUsed
argument_list|(
name|segmentReader
operator|.
name|getNormsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addDocValuesMemoryInBytes
argument_list|(
name|guardedRamBytesUsed
argument_list|(
name|segmentReader
operator|.
name|getDocValuesReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writerSegmentStats
argument_list|(
name|stats
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
block|}
DECL|method|writerSegmentStats
specifier|protected
name|void
name|writerSegmentStats
parameter_list|(
name|SegmentsStats
name|stats
parameter_list|)
block|{
comment|// by default we don't have a writer here... subclasses can override this
name|stats
operator|.
name|addVersionMapMemoryInBytes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addIndexWriterMemoryInBytes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addIndexWriterMaxMemoryInBytes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getSegmentInfo
specifier|protected
name|Segment
index|[]
name|getSegmentInfo
parameter_list|(
name|SegmentInfos
name|lastCommittedSegmentInfos
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Segment
argument_list|>
name|segments
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// first, go over and compute the search ones...
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"segments"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|LeafReaderContext
name|reader
range|:
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|SegmentCommitInfo
name|info
init|=
name|segmentReader
argument_list|(
name|reader
operator|.
name|reader
argument_list|()
argument_list|)
operator|.
name|getSegmentInfo
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|segments
operator|.
name|containsKey
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
assert|;
name|Segment
name|segment
init|=
operator|new
name|Segment
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
decl_stmt|;
name|segment
operator|.
name|search
operator|=
literal|true
expr_stmt|;
name|segment
operator|.
name|docCount
operator|=
name|reader
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
expr_stmt|;
name|segment
operator|.
name|delDocCount
operator|=
name|reader
operator|.
name|reader
argument_list|()
operator|.
name|numDeletedDocs
argument_list|()
expr_stmt|;
name|segment
operator|.
name|version
operator|=
name|info
operator|.
name|info
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|segment
operator|.
name|compound
operator|=
name|info
operator|.
name|info
operator|.
name|getUseCompoundFile
argument_list|()
expr_stmt|;
try|try
block|{
name|segment
operator|.
name|sizeInBytes
operator|=
name|info
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to get size for [{}]"
argument_list|,
name|e
argument_list|,
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SegmentReader
name|segmentReader
init|=
name|segmentReader
argument_list|(
name|reader
operator|.
name|reader
argument_list|()
argument_list|)
decl_stmt|;
name|segment
operator|.
name|memoryInBytes
operator|=
name|segmentReader
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|segment
operator|.
name|ramTree
operator|=
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"root"
argument_list|,
name|segmentReader
argument_list|)
expr_stmt|;
block|}
comment|// TODO: add more fine grained mem stats values to per segment info here
name|segments
operator|.
name|put
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|,
name|segment
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// now, correlate or add the committed ones...
if|if
condition|(
name|lastCommittedSegmentInfos
operator|!=
literal|null
condition|)
block|{
name|SegmentInfos
name|infos
init|=
name|lastCommittedSegmentInfos
decl_stmt|;
for|for
control|(
name|SegmentCommitInfo
name|info
range|:
name|infos
control|)
block|{
name|Segment
name|segment
init|=
name|segments
operator|.
name|get
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|segment
operator|==
literal|null
condition|)
block|{
name|segment
operator|=
operator|new
name|Segment
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
name|segment
operator|.
name|search
operator|=
literal|false
expr_stmt|;
name|segment
operator|.
name|committed
operator|=
literal|true
expr_stmt|;
name|segment
operator|.
name|docCount
operator|=
name|info
operator|.
name|info
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|segment
operator|.
name|delDocCount
operator|=
name|info
operator|.
name|getDelCount
argument_list|()
expr_stmt|;
name|segment
operator|.
name|version
operator|=
name|info
operator|.
name|info
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|segment
operator|.
name|compound
operator|=
name|info
operator|.
name|info
operator|.
name|getUseCompoundFile
argument_list|()
expr_stmt|;
try|try
block|{
name|segment
operator|.
name|sizeInBytes
operator|=
name|info
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to get size for [{}]"
argument_list|,
name|e
argument_list|,
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|segments
operator|.
name|put
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|,
name|segment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|segment
operator|.
name|committed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|Segment
index|[]
name|segmentsArr
init|=
name|segments
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Segment
index|[
name|segments
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|segmentsArr
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Segment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Segment
name|o1
parameter_list|,
name|Segment
name|o2
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|o1
operator|.
name|getGeneration
argument_list|()
operator|-
name|o2
operator|.
name|getGeneration
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|segmentsArr
return|;
block|}
comment|/**      * The list of segments in the engine.      */
DECL|method|segments
specifier|public
specifier|abstract
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
parameter_list|(
name|boolean
name|verbose
parameter_list|)
function_decl|;
DECL|method|refreshNeeded
specifier|public
specifier|final
name|boolean
name|refreshNeeded
parameter_list|()
block|{
if|if
condition|(
name|store
operator|.
name|tryIncRef
argument_list|()
condition|)
block|{
comment|/*               we need to inc the store here since searcherManager.isSearcherCurrent()               acquires a searcher internally and that might keep a file open on the               store. this violates the assumption that all files are closed when               the store is closed so we need to make sure we increment it here              */
try|try
block|{
return|return
operator|!
name|getSearcherManager
argument_list|()
operator|.
name|isSearcherCurrent
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to access searcher manager"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failEngine
argument_list|(
literal|"failed to access searcher manager"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EngineException
argument_list|(
name|shardId
argument_list|,
literal|"failed to access searcher manager"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Refreshes the engine for new search operations to reflect the latest      * changes.      */
DECL|method|refresh
specifier|public
specifier|abstract
name|void
name|refresh
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|EngineException
function_decl|;
comment|/**      * Flushes the state of the engine including the transaction log, clearing memory.      * @param force if<code>true</code> a lucene commit is executed even if no changes need to be committed.      * @param waitIfOngoing if<code>true</code> this call will block until all currently running flushes have finished.      *                      Otherwise this call will return without blocking.      * @return the commit Id for the resulting commit      */
DECL|method|flush
specifier|public
specifier|abstract
name|CommitId
name|flush
parameter_list|(
name|boolean
name|force
parameter_list|,
name|boolean
name|waitIfOngoing
parameter_list|)
throws|throws
name|EngineException
function_decl|;
comment|/**      * Flushes the state of the engine including the transaction log, clearing memory and persisting      * documents in the lucene index to disk including a potentially heavy and durable fsync operation.      * This operation is not going to block if another flush operation is currently running and won't write      * a lucene commit if nothing needs to be committed.      *      * @return the commit Id for the resulting commit      */
DECL|method|flush
specifier|public
specifier|abstract
name|CommitId
name|flush
parameter_list|()
throws|throws
name|EngineException
function_decl|;
comment|/**      * Optimizes to 1 segment      */
DECL|method|forceMerge
specifier|public
name|void
name|forceMerge
parameter_list|(
name|boolean
name|flush
parameter_list|)
block|{
name|forceMerge
argument_list|(
name|flush
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Triggers a forced merge on this engine      */
DECL|method|forceMerge
specifier|public
specifier|abstract
name|void
name|forceMerge
parameter_list|(
name|boolean
name|flush
parameter_list|,
name|int
name|maxNumSegments
parameter_list|,
name|boolean
name|onlyExpungeDeletes
parameter_list|,
name|boolean
name|upgrade
parameter_list|,
name|boolean
name|upgradeOnlyAncientSegments
parameter_list|)
throws|throws
name|EngineException
function_decl|;
comment|/**      * Snapshots the index and returns a handle to it. If needed will try and "commit" the      * lucene index to make sure we have a "fresh" copy of the files to snapshot.      *      * @param flushFirst indicates whether the engine should flush before returning the snapshot      */
DECL|method|snapshotIndex
specifier|public
specifier|abstract
name|SnapshotIndexCommit
name|snapshotIndex
parameter_list|(
name|boolean
name|flushFirst
parameter_list|)
throws|throws
name|EngineException
function_decl|;
comment|/**      * fail engine due to some error. the engine will also be closed.      * The underlying store is marked corrupted iff failure is caused by index corruption      */
DECL|method|failEngine
specifier|public
name|void
name|failEngine
parameter_list|(
name|String
name|reason
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|failure
parameter_list|)
block|{
if|if
condition|(
name|failEngineLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
comment|// we just go and close this engine - no way to recover
name|closeNoLock
argument_list|(
literal|"engine failed on: ["
operator|+
name|reason
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|failedEngine
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"tried to fail engine but engine is already failed. ignoring. [{}]"
argument_list|,
name|reason
argument_list|,
name|failure
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"failed engine [{}]"
argument_list|,
name|failure
argument_list|,
name|reason
argument_list|)
expr_stmt|;
comment|// we must set a failure exception, generate one if not supplied
name|failedEngine
operator|=
operator|(
name|failure
operator|!=
literal|null
operator|)
condition|?
name|failure
else|:
operator|new
name|IllegalStateException
argument_list|(
name|reason
argument_list|)
expr_stmt|;
comment|// we first mark the store as corrupted before we notify any listeners
comment|// this must happen first otherwise we might try to reallocate so quickly
comment|// on the same node that we don't see the corrupted marker file when
comment|// the shard is initializing
if|if
condition|(
name|Lucene
operator|.
name|isCorruptionException
argument_list|(
name|failure
argument_list|)
condition|)
block|{
try|try
block|{
name|store
operator|.
name|markStoreCorrupted
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"failed engine (reason: ["
operator|+
name|reason
operator|+
literal|"])"
argument_list|,
name|ExceptionsHelper
operator|.
name|unwrapCorruption
argument_list|(
name|failure
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Couldn't mark store corrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|failedEngineListener
operator|.
name|onFailedEngine
argument_list|(
name|shardId
argument_list|,
name|reason
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// don't bubble up these exceptions up
name|logger
operator|.
name|warn
argument_list|(
literal|"failEngine threw exception"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"tried to fail engine but could not acquire lock - engine should be failed by now [{}]"
argument_list|,
name|reason
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Check whether the engine should be failed */
DECL|method|maybeFailEngine
specifier|protected
name|boolean
name|maybeFailEngine
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|Lucene
operator|.
name|isCorruptionException
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
literal|"corrupt file (source: ["
operator|+
name|source
operator|+
literal|"])"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|ExceptionsHelper
operator|.
name|isOOM
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
literal|"out of memory (source: ["
operator|+
name|source
operator|+
literal|"])"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Wrap a Throwable in an {@code EngineClosedException} if the engine is already closed */
DECL|method|wrapIfClosed
specifier|protected
name|Throwable
name|wrapIfClosed
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|isClosed
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|t
operator|!=
name|failedEngine
operator|&&
name|failedEngine
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|addSuppressed
argument_list|(
name|failedEngine
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|t
argument_list|)
return|;
block|}
return|return
name|t
return|;
block|}
DECL|interface|FailedEngineListener
specifier|public
interface|interface
name|FailedEngineListener
block|{
DECL|method|onFailedEngine
name|void
name|onFailedEngine
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|reason
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
DECL|class|Searcher
specifier|public
specifier|static
class|class
name|Searcher
implements|implements
name|Releasable
block|{
DECL|field|source
specifier|private
specifier|final
name|String
name|source
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|final
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|method|Searcher
specifier|public
name|Searcher
parameter_list|(
name|String
name|source
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
block|}
comment|/**          * The source that caused this searcher to be acquired.          */
DECL|method|source
specifier|public
name|String
name|source
parameter_list|()
block|{
return|return
name|source
return|;
block|}
DECL|method|reader
specifier|public
name|IndexReader
name|reader
parameter_list|()
block|{
return|return
name|searcher
operator|.
name|getIndexReader
argument_list|()
return|;
block|}
DECL|method|searcher
specifier|public
name|IndexSearcher
name|searcher
parameter_list|()
block|{
return|return
name|searcher
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// Nothing to close here
block|}
block|}
DECL|interface|Operation
specifier|public
specifier|static
interface|interface
name|Operation
block|{
DECL|enum|Type
specifier|static
enum|enum
name|Type
block|{
DECL|enum constant|CREATE
name|CREATE
block|,
DECL|enum constant|INDEX
name|INDEX
block|,
DECL|enum constant|DELETE
name|DELETE
block|}
DECL|enum|Origin
specifier|static
enum|enum
name|Origin
block|{
DECL|enum constant|PRIMARY
name|PRIMARY
block|,
DECL|enum constant|REPLICA
name|REPLICA
block|,
DECL|enum constant|RECOVERY
name|RECOVERY
block|}
DECL|method|opType
name|Type
name|opType
parameter_list|()
function_decl|;
DECL|method|origin
name|Origin
name|origin
parameter_list|()
function_decl|;
block|}
DECL|class|IndexingOperation
specifier|public
specifier|static
specifier|abstract
class|class
name|IndexingOperation
implements|implements
name|Operation
block|{
DECL|field|uid
specifier|private
specifier|final
name|Term
name|uid
decl_stmt|;
DECL|field|doc
specifier|private
specifier|final
name|ParsedDocument
name|doc
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
decl_stmt|;
DECL|field|versionType
specifier|private
specifier|final
name|VersionType
name|versionType
decl_stmt|;
DECL|field|origin
specifier|private
specifier|final
name|Origin
name|origin
decl_stmt|;
DECL|field|canHaveDuplicates
specifier|private
specifier|final
name|boolean
name|canHaveDuplicates
decl_stmt|;
DECL|field|location
specifier|private
name|Translog
operator|.
name|Location
name|location
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
DECL|method|IndexingOperation
specifier|public
name|IndexingOperation
parameter_list|(
name|Term
name|uid
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|,
name|long
name|version
parameter_list|,
name|VersionType
name|versionType
parameter_list|,
name|Origin
name|origin
parameter_list|,
name|long
name|startTime
parameter_list|,
name|boolean
name|canHaveDuplicates
parameter_list|)
block|{
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
name|this
operator|.
name|origin
operator|=
name|origin
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|canHaveDuplicates
operator|=
name|canHaveDuplicates
expr_stmt|;
block|}
DECL|method|IndexingOperation
specifier|public
name|IndexingOperation
parameter_list|(
name|Term
name|uid
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|)
block|{
name|this
argument_list|(
name|uid
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|origin
specifier|public
name|Origin
name|origin
parameter_list|()
block|{
return|return
name|this
operator|.
name|origin
return|;
block|}
DECL|method|parsedDoc
specifier|public
name|ParsedDocument
name|parsedDoc
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
return|;
block|}
DECL|method|uid
specifier|public
name|Term
name|uid
parameter_list|()
block|{
return|return
name|this
operator|.
name|uid
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|type
argument_list|()
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|id
argument_list|()
return|;
block|}
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|routing
argument_list|()
return|;
block|}
DECL|method|timestamp
specifier|public
name|long
name|timestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|timestamp
argument_list|()
return|;
block|}
DECL|method|ttl
specifier|public
name|long
name|ttl
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|ttl
argument_list|()
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|updateVersion
specifier|public
name|void
name|updateVersion
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|doc
operator|.
name|version
argument_list|()
operator|.
name|setLongValue
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
DECL|method|setTranslogLocation
specifier|public
name|void
name|setTranslogLocation
parameter_list|(
name|Translog
operator|.
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
DECL|method|getTranslogLocation
specifier|public
name|Translog
operator|.
name|Location
name|getTranslogLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|versionType
return|;
block|}
DECL|method|canHaveDuplicates
specifier|public
name|boolean
name|canHaveDuplicates
parameter_list|()
block|{
return|return
name|this
operator|.
name|canHaveDuplicates
return|;
block|}
DECL|method|parent
specifier|public
name|String
name|parent
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|parent
argument_list|()
return|;
block|}
DECL|method|docs
specifier|public
name|List
argument_list|<
name|Document
argument_list|>
name|docs
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|docs
argument_list|()
return|;
block|}
DECL|method|source
specifier|public
name|BytesReference
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|source
argument_list|()
return|;
block|}
comment|/**          * Returns operation start time in nanoseconds.          */
DECL|method|startTime
specifier|public
name|long
name|startTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
DECL|method|endTime
specifier|public
name|void
name|endTime
parameter_list|(
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
block|}
comment|/**          * Returns operation end time in nanoseconds.          */
DECL|method|endTime
specifier|public
name|long
name|endTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|endTime
return|;
block|}
comment|/**          * Execute this operation against the provided {@link IndexShard} and          * return whether the document was created.          */
DECL|method|execute
specifier|public
specifier|abstract
name|boolean
name|execute
parameter_list|(
name|IndexShard
name|shard
parameter_list|)
function_decl|;
block|}
DECL|class|Create
specifier|public
specifier|static
specifier|final
class|class
name|Create
extends|extends
name|IndexingOperation
block|{
DECL|field|autoGeneratedId
specifier|private
specifier|final
name|boolean
name|autoGeneratedId
decl_stmt|;
DECL|method|Create
specifier|public
name|Create
parameter_list|(
name|Term
name|uid
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|,
name|long
name|version
parameter_list|,
name|VersionType
name|versionType
parameter_list|,
name|Origin
name|origin
parameter_list|,
name|long
name|startTime
parameter_list|,
name|boolean
name|canHaveDuplicates
parameter_list|,
name|boolean
name|autoGeneratedId
parameter_list|)
block|{
name|super
argument_list|(
name|uid
argument_list|,
name|doc
argument_list|,
name|version
argument_list|,
name|versionType
argument_list|,
name|origin
argument_list|,
name|startTime
argument_list|,
name|canHaveDuplicates
argument_list|)
expr_stmt|;
name|this
operator|.
name|autoGeneratedId
operator|=
name|autoGeneratedId
expr_stmt|;
block|}
DECL|method|Create
specifier|public
name|Create
parameter_list|(
name|Term
name|uid
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|,
name|long
name|version
parameter_list|,
name|VersionType
name|versionType
parameter_list|,
name|Origin
name|origin
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|this
argument_list|(
name|uid
argument_list|,
name|doc
argument_list|,
name|version
argument_list|,
name|versionType
argument_list|,
name|origin
argument_list|,
name|startTime
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|Create
specifier|public
name|Create
parameter_list|(
name|Term
name|uid
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|)
block|{
name|super
argument_list|(
name|uid
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|autoGeneratedId
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|CREATE
return|;
block|}
DECL|method|autoGeneratedId
specifier|public
name|boolean
name|autoGeneratedId
parameter_list|()
block|{
return|return
name|this
operator|.
name|autoGeneratedId
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|IndexShard
name|shard
parameter_list|)
block|{
name|shard
operator|.
name|create
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|Index
specifier|public
specifier|static
specifier|final
class|class
name|Index
extends|extends
name|IndexingOperation
block|{
DECL|method|Index
specifier|public
name|Index
parameter_list|(
name|Term
name|uid
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|,
name|long
name|version
parameter_list|,
name|VersionType
name|versionType
parameter_list|,
name|Origin
name|origin
parameter_list|,
name|long
name|startTime
parameter_list|,
name|boolean
name|canHaveDuplicates
parameter_list|)
block|{
name|super
argument_list|(
name|uid
argument_list|,
name|doc
argument_list|,
name|version
argument_list|,
name|versionType
argument_list|,
name|origin
argument_list|,
name|startTime
argument_list|,
name|canHaveDuplicates
argument_list|)
expr_stmt|;
block|}
DECL|method|Index
specifier|public
name|Index
parameter_list|(
name|Term
name|uid
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|,
name|long
name|version
parameter_list|,
name|VersionType
name|versionType
parameter_list|,
name|Origin
name|origin
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|super
argument_list|(
name|uid
argument_list|,
name|doc
argument_list|,
name|version
argument_list|,
name|versionType
argument_list|,
name|origin
argument_list|,
name|startTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|Index
specifier|public
name|Index
parameter_list|(
name|Term
name|uid
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|)
block|{
name|super
argument_list|(
name|uid
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|INDEX
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|(
name|IndexShard
name|shard
parameter_list|)
block|{
return|return
name|shard
operator|.
name|index
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|Delete
specifier|public
specifier|static
class|class
name|Delete
implements|implements
name|Operation
block|{
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|uid
specifier|private
specifier|final
name|Term
name|uid
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
decl_stmt|;
DECL|field|versionType
specifier|private
specifier|final
name|VersionType
name|versionType
decl_stmt|;
DECL|field|origin
specifier|private
specifier|final
name|Origin
name|origin
decl_stmt|;
DECL|field|found
specifier|private
name|boolean
name|found
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
DECL|field|location
specifier|private
name|Translog
operator|.
name|Location
name|location
decl_stmt|;
DECL|method|Delete
specifier|public
name|Delete
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Term
name|uid
parameter_list|,
name|long
name|version
parameter_list|,
name|VersionType
name|versionType
parameter_list|,
name|Origin
name|origin
parameter_list|,
name|long
name|startTime
parameter_list|,
name|boolean
name|found
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
name|this
operator|.
name|origin
operator|=
name|origin
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|found
operator|=
name|found
expr_stmt|;
block|}
DECL|method|Delete
specifier|public
name|Delete
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Term
name|uid
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|id
argument_list|,
name|uid
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|Delete
specifier|public
name|Delete
parameter_list|(
name|Delete
name|template
parameter_list|,
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
argument_list|(
name|template
operator|.
name|type
argument_list|()
argument_list|,
name|template
operator|.
name|id
argument_list|()
argument_list|,
name|template
operator|.
name|uid
argument_list|()
argument_list|,
name|template
operator|.
name|version
argument_list|()
argument_list|,
name|versionType
argument_list|,
name|template
operator|.
name|origin
argument_list|()
argument_list|,
name|template
operator|.
name|startTime
argument_list|()
argument_list|,
name|template
operator|.
name|found
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|DELETE
return|;
block|}
annotation|@
name|Override
DECL|method|origin
specifier|public
name|Origin
name|origin
parameter_list|()
block|{
return|return
name|this
operator|.
name|origin
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|uid
specifier|public
name|Term
name|uid
parameter_list|()
block|{
return|return
name|this
operator|.
name|uid
return|;
block|}
DECL|method|updateVersion
specifier|public
name|void
name|updateVersion
parameter_list|(
name|long
name|version
parameter_list|,
name|boolean
name|found
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|found
operator|=
name|found
expr_stmt|;
block|}
comment|/**          * before delete execution this is the version to be deleted. After this is the version of the "delete" transaction record.          */
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|versionType
return|;
block|}
DECL|method|found
specifier|public
name|boolean
name|found
parameter_list|()
block|{
return|return
name|this
operator|.
name|found
return|;
block|}
comment|/**          * Returns operation start time in nanoseconds.          */
DECL|method|startTime
specifier|public
name|long
name|startTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
DECL|method|endTime
specifier|public
name|void
name|endTime
parameter_list|(
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
block|}
comment|/**          * Returns operation end time in nanoseconds.          */
DECL|method|endTime
specifier|public
name|long
name|endTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|endTime
return|;
block|}
DECL|method|setTranslogLocation
specifier|public
name|void
name|setTranslogLocation
parameter_list|(
name|Translog
operator|.
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
DECL|method|getTranslogLocation
specifier|public
name|Translog
operator|.
name|Location
name|getTranslogLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
return|;
block|}
block|}
DECL|class|DeleteByQuery
specifier|public
specifier|static
class|class
name|DeleteByQuery
block|{
DECL|field|query
specifier|private
specifier|final
name|Query
name|query
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|BytesReference
name|source
decl_stmt|;
DECL|field|filteringAliases
specifier|private
specifier|final
name|String
index|[]
name|filteringAliases
decl_stmt|;
DECL|field|aliasFilter
specifier|private
specifier|final
name|Query
name|aliasFilter
decl_stmt|;
DECL|field|types
specifier|private
specifier|final
name|String
index|[]
name|types
decl_stmt|;
DECL|field|parentFilter
specifier|private
specifier|final
name|BitDocIdSetFilter
name|parentFilter
decl_stmt|;
DECL|field|origin
specifier|private
specifier|final
name|Operation
operator|.
name|Origin
name|origin
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
DECL|method|DeleteByQuery
specifier|public
name|DeleteByQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|BytesReference
name|source
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|filteringAliases
parameter_list|,
annotation|@
name|Nullable
name|Query
name|aliasFilter
parameter_list|,
name|BitDocIdSetFilter
name|parentFilter
parameter_list|,
name|Operation
operator|.
name|Origin
name|origin
parameter_list|,
name|long
name|startTime
parameter_list|,
name|String
modifier|...
name|types
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
name|this
operator|.
name|filteringAliases
operator|=
name|filteringAliases
expr_stmt|;
name|this
operator|.
name|aliasFilter
operator|=
name|aliasFilter
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|parentFilter
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|origin
operator|=
name|origin
expr_stmt|;
block|}
DECL|method|query
specifier|public
name|Query
name|query
parameter_list|()
block|{
return|return
name|this
operator|.
name|query
return|;
block|}
DECL|method|source
specifier|public
name|BytesReference
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
DECL|method|types
specifier|public
name|String
index|[]
name|types
parameter_list|()
block|{
return|return
name|this
operator|.
name|types
return|;
block|}
DECL|method|filteringAliases
specifier|public
name|String
index|[]
name|filteringAliases
parameter_list|()
block|{
return|return
name|filteringAliases
return|;
block|}
DECL|method|aliasFilter
specifier|public
name|Query
name|aliasFilter
parameter_list|()
block|{
return|return
name|aliasFilter
return|;
block|}
DECL|method|nested
specifier|public
name|boolean
name|nested
parameter_list|()
block|{
return|return
name|parentFilter
operator|!=
literal|null
return|;
block|}
DECL|method|parentFilter
specifier|public
name|BitDocIdSetFilter
name|parentFilter
parameter_list|()
block|{
return|return
name|parentFilter
return|;
block|}
DECL|method|origin
specifier|public
name|Operation
operator|.
name|Origin
name|origin
parameter_list|()
block|{
return|return
name|this
operator|.
name|origin
return|;
block|}
comment|/**          * Returns operation start time in nanoseconds.          */
DECL|method|startTime
specifier|public
name|long
name|startTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
DECL|method|endTime
specifier|public
name|DeleteByQuery
name|endTime
parameter_list|(
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns operation end time in nanoseconds.          */
DECL|method|endTime
specifier|public
name|long
name|endTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|endTime
return|;
block|}
block|}
DECL|class|Get
specifier|public
specifier|static
class|class
name|Get
block|{
DECL|field|realtime
specifier|private
specifier|final
name|boolean
name|realtime
decl_stmt|;
DECL|field|uid
specifier|private
specifier|final
name|Term
name|uid
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
name|Versions
operator|.
name|MATCH_ANY
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|method|Get
specifier|public
name|Get
parameter_list|(
name|boolean
name|realtime
parameter_list|,
name|Term
name|uid
parameter_list|)
block|{
name|this
operator|.
name|realtime
operator|=
name|realtime
expr_stmt|;
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
block|}
DECL|method|realtime
specifier|public
name|boolean
name|realtime
parameter_list|()
block|{
return|return
name|this
operator|.
name|realtime
return|;
block|}
DECL|method|uid
specifier|public
name|Term
name|uid
parameter_list|()
block|{
return|return
name|uid
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|version
specifier|public
name|Get
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|versionType
return|;
block|}
DECL|method|versionType
specifier|public
name|Get
name|versionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|class|GetResult
specifier|public
specifier|static
class|class
name|GetResult
block|{
DECL|field|exists
specifier|private
specifier|final
name|boolean
name|exists
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|Translog
operator|.
name|Source
name|source
decl_stmt|;
DECL|field|docIdAndVersion
specifier|private
specifier|final
name|Versions
operator|.
name|DocIdAndVersion
name|docIdAndVersion
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|final
name|Searcher
name|searcher
decl_stmt|;
DECL|field|NOT_EXISTS
specifier|public
specifier|static
specifier|final
name|GetResult
name|NOT_EXISTS
init|=
operator|new
name|GetResult
argument_list|(
literal|false
argument_list|,
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|method|GetResult
specifier|public
name|GetResult
parameter_list|(
name|boolean
name|exists
parameter_list|,
name|long
name|version
parameter_list|,
annotation|@
name|Nullable
name|Translog
operator|.
name|Source
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|exists
operator|=
name|exists
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|docIdAndVersion
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|GetResult
specifier|public
name|GetResult
parameter_list|(
name|Searcher
name|searcher
parameter_list|,
name|Versions
operator|.
name|DocIdAndVersion
name|docIdAndVersion
parameter_list|)
block|{
name|this
operator|.
name|exists
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|source
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|docIdAndVersion
operator|.
name|version
expr_stmt|;
name|this
operator|.
name|docIdAndVersion
operator|=
name|docIdAndVersion
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
block|}
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|exists
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
annotation|@
name|Nullable
DECL|method|source
specifier|public
name|Translog
operator|.
name|Source
name|source
parameter_list|()
block|{
return|return
name|source
return|;
block|}
DECL|method|searcher
specifier|public
name|Searcher
name|searcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|searcher
return|;
block|}
DECL|method|docIdAndVersion
specifier|public
name|Versions
operator|.
name|DocIdAndVersion
name|docIdAndVersion
parameter_list|()
block|{
return|return
name|docIdAndVersion
return|;
block|}
DECL|method|release
specifier|public
name|void
name|release
parameter_list|()
block|{
if|if
condition|(
name|searcher
operator|!=
literal|null
condition|)
block|{
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSearcherManager
specifier|protected
specifier|abstract
name|SearcherManager
name|getSearcherManager
parameter_list|()
function_decl|;
comment|/**      * Method to close the engine while the write lock is held.      */
DECL|method|closeNoLock
specifier|protected
specifier|abstract
name|void
name|closeNoLock
parameter_list|(
name|String
name|reason
parameter_list|)
function_decl|;
comment|/**      * Flush the engine (committing segments to disk and truncating the      * translog) and close it.      */
DECL|method|flushAndClose
specifier|public
name|void
name|flushAndClose
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isClosed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"flushAndClose now acquire writeLock"
argument_list|)
expr_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"flushAndClose now acquired writeLock"
argument_list|)
expr_stmt|;
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"flushing shard on close - this might take some time to sync files to disk"
argument_list|)
expr_stmt|;
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
comment|// TODO we might force a flush in the future since we have the write lock already even though recoveries are running.
block|}
catch|catch
parameter_list|(
name|FlushNotAllowedEngineException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"flush not allowed during flushAndClose - skipping"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineClosedException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"engine already closed - skipping flushAndClose"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|close
argument_list|()
expr_stmt|;
comment|// double close is not a problem
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isClosed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// don't acquire the write lock if we are already closed
name|logger
operator|.
name|debug
argument_list|(
literal|"close now acquiring writeLock"
argument_list|)
expr_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"close acquired writeLock"
argument_list|)
expr_stmt|;
name|closeNoLock
argument_list|(
literal|"api"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns<code>true</code> the internal writer has any uncommitted changes. Otherwise<code>false</code>      * @return      */
DECL|method|hasUncommittedChanges
specifier|public
specifier|abstract
name|boolean
name|hasUncommittedChanges
parameter_list|()
function_decl|;
DECL|class|CommitId
specifier|public
specifier|static
class|class
name|CommitId
implements|implements
name|Writeable
block|{
DECL|field|id
specifier|private
specifier|final
name|byte
index|[]
name|id
decl_stmt|;
DECL|method|CommitId
specifier|public
name|CommitId
parameter_list|(
name|byte
index|[]
name|id
parameter_list|)
block|{
assert|assert
name|id
operator|!=
literal|null
assert|;
name|this
operator|.
name|id
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|id
argument_list|,
name|id
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|CommitId
specifier|public
name|CommitId
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|in
operator|!=
literal|null
assert|;
name|this
operator|.
name|id
operator|=
name|in
operator|.
name|readByteArray
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|CommitId
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CommitId
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByteArray
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|idsEqual
specifier|public
name|boolean
name|idsEqual
parameter_list|(
name|byte
index|[]
name|id
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|this
operator|.
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|CommitId
name|commitId
init|=
operator|(
name|CommitId
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|commitId
operator|.
name|id
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
DECL|method|onSettingsChanged
specifier|public
name|void
name|onSettingsChanged
parameter_list|()
block|{}
block|}
end_class

end_unit

