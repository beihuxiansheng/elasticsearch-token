begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Searcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Service responsible for wrapping the {@link DirectoryReader} and {@link IndexSearcher} of a {@link Searcher} via the  * configured {@link IndexSearcherWrapper} instance. This allows custom functionally to be added the {@link Searcher}  * before being used to do an operation (search, get, field stats etc.)  */
end_comment

begin_comment
comment|// TODO: This needs extension point is a bit hacky now, because the IndexSearch from the engine can only be wrapped once,
end_comment

begin_comment
comment|// if we allowed the IndexSearcher to be wrapped multiple times then a custom IndexSearcherWrapper needs have good
end_comment

begin_comment
comment|// control over its location in the wrapping chain
end_comment

begin_class
DECL|class|IndexSearcherWrappingService
specifier|public
specifier|final
class|class
name|IndexSearcherWrappingService
block|{
DECL|field|wrapper
specifier|private
specifier|final
name|IndexSearcherWrapper
name|wrapper
decl_stmt|;
comment|// for unit tests:
DECL|method|IndexSearcherWrappingService
name|IndexSearcherWrappingService
parameter_list|()
block|{
name|this
operator|.
name|wrapper
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Inject
comment|// Use a Set parameter here, because constructor parameter can't be optional
comment|// and I prefer to keep the `wrapper` field final.
DECL|method|IndexSearcherWrappingService
specifier|public
name|IndexSearcherWrappingService
parameter_list|(
name|Set
argument_list|<
name|IndexSearcherWrapper
argument_list|>
name|wrappers
parameter_list|)
block|{
if|if
condition|(
name|wrappers
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"wrapping of the index searcher by more than one wrappers is forbidden, found the following wrappers ["
operator|+
name|wrappers
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|wrappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|wrapper
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|wrapper
operator|=
name|wrappers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * If there are configured {@link IndexSearcherWrapper} instances, the {@link IndexSearcher} of the provided engine searcher      * gets wrapped and a new {@link Searcher} instances is returned, otherwise the provided {@link Searcher} is returned.      *      * This is invoked each time a {@link Searcher} is requested to do an operation. (for example search)      */
DECL|method|wrap
specifier|public
name|Searcher
name|wrap
parameter_list|(
name|EngineConfig
name|engineConfig
parameter_list|,
specifier|final
name|Searcher
name|engineSearcher
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|wrapper
operator|==
literal|null
condition|)
block|{
return|return
name|engineSearcher
return|;
block|}
name|DirectoryReader
name|reader
init|=
name|wrapper
operator|.
name|wrap
argument_list|(
operator|(
name|DirectoryReader
operator|)
name|engineSearcher
operator|.
name|reader
argument_list|()
argument_list|)
decl_stmt|;
name|IndexSearcher
name|innerIndexSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|innerIndexSearcher
operator|.
name|setQueryCache
argument_list|(
name|engineConfig
operator|.
name|getQueryCache
argument_list|()
argument_list|)
expr_stmt|;
name|innerIndexSearcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|engineConfig
operator|.
name|getQueryCachingPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|innerIndexSearcher
operator|.
name|setSimilarity
argument_list|(
name|engineConfig
operator|.
name|getSimilarity
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: Right now IndexSearcher isn't wrapper friendly, when it becomes wrapper friendly we should revise this extension point
comment|// For example if IndexSearcher#rewrite() is overwritten than also IndexSearcher#createNormalizedWeight needs to be overwritten
comment|// This needs to be fixed before we can allow the IndexSearcher from Engine to be wrapped multiple times
name|IndexSearcher
name|indexSearcher
init|=
name|wrapper
operator|.
name|wrap
argument_list|(
name|engineConfig
argument_list|,
name|innerIndexSearcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|==
name|engineSearcher
operator|.
name|reader
argument_list|()
operator|&&
name|indexSearcher
operator|==
name|innerIndexSearcher
condition|)
block|{
return|return
name|engineSearcher
return|;
block|}
else|else
block|{
return|return
operator|new
name|Engine
operator|.
name|Searcher
argument_list|(
name|engineSearcher
operator|.
name|source
argument_list|()
argument_list|,
name|indexSearcher
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|engineSearcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

