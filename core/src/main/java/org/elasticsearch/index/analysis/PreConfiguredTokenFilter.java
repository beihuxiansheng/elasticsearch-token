begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltCacheFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltCacheFactory
operator|.
name|CachingStrategy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Provides pre-configured, shared {@link TokenFilter}s.  */
end_comment

begin_class
DECL|class|PreConfiguredTokenFilter
specifier|public
specifier|final
class|class
name|PreConfiguredTokenFilter
implements|implements
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
block|{
comment|/**      * Create a pre-configured token filter that may not vary at all.      */
DECL|method|singleton
specifier|public
specifier|static
name|PreConfiguredTokenFilter
name|singleton
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|useFilterForMultitermQueries
parameter_list|,
name|Function
argument_list|<
name|TokenStream
argument_list|,
name|TokenStream
argument_list|>
name|create
parameter_list|)
block|{
return|return
operator|new
name|PreConfiguredTokenFilter
argument_list|(
name|name
argument_list|,
name|useFilterForMultitermQueries
argument_list|,
name|CachingStrategy
operator|.
name|ONE
argument_list|,
parameter_list|(
name|tokenStream
parameter_list|,
name|version
parameter_list|)
lambda|->
name|create
operator|.
name|apply
argument_list|(
name|tokenStream
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Create a pre-configured token filter that may vary based on the Lucene version.      */
DECL|method|luceneVersion
specifier|public
specifier|static
name|PreConfiguredTokenFilter
name|luceneVersion
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|useFilterForMultitermQueries
parameter_list|,
name|BiFunction
argument_list|<
name|TokenStream
argument_list|,
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
argument_list|,
name|TokenStream
argument_list|>
name|create
parameter_list|)
block|{
return|return
operator|new
name|PreConfiguredTokenFilter
argument_list|(
name|name
argument_list|,
name|useFilterForMultitermQueries
argument_list|,
name|CachingStrategy
operator|.
name|LUCENE
argument_list|,
parameter_list|(
name|tokenStream
parameter_list|,
name|version
parameter_list|)
lambda|->
name|create
operator|.
name|apply
argument_list|(
name|tokenStream
argument_list|,
name|version
operator|.
name|luceneVersion
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Create a pre-configured token filter that may vary based on the Elasticsearch version.      */
DECL|method|elasticsearchVersion
specifier|public
specifier|static
name|PreConfiguredTokenFilter
name|elasticsearchVersion
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|useFilterForMultitermQueries
parameter_list|,
name|BiFunction
argument_list|<
name|TokenStream
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|Version
argument_list|,
name|TokenStream
argument_list|>
name|create
parameter_list|)
block|{
return|return
operator|new
name|PreConfiguredTokenFilter
argument_list|(
name|name
argument_list|,
name|useFilterForMultitermQueries
argument_list|,
name|CachingStrategy
operator|.
name|ELASTICSEARCH
argument_list|,
parameter_list|(
name|tokenStream
parameter_list|,
name|version
parameter_list|)
lambda|->
name|create
operator|.
name|apply
argument_list|(
name|tokenStream
argument_list|,
name|version
argument_list|)
argument_list|)
return|;
block|}
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|useFilterForMultitermQueries
specifier|private
specifier|final
name|boolean
name|useFilterForMultitermQueries
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|PreBuiltCacheFactory
operator|.
name|PreBuiltCache
argument_list|<
name|TokenFilterFactory
argument_list|>
name|cache
decl_stmt|;
DECL|field|create
specifier|private
specifier|final
name|BiFunction
argument_list|<
name|TokenStream
argument_list|,
name|Version
argument_list|,
name|TokenStream
argument_list|>
name|create
decl_stmt|;
DECL|method|PreConfiguredTokenFilter
specifier|private
name|PreConfiguredTokenFilter
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|useFilterForMultitermQueries
parameter_list|,
name|PreBuiltCacheFactory
operator|.
name|CachingStrategy
name|cache
parameter_list|,
name|BiFunction
argument_list|<
name|TokenStream
argument_list|,
name|Version
argument_list|,
name|TokenStream
argument_list|>
name|create
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|useFilterForMultitermQueries
operator|=
name|useFilterForMultitermQueries
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|PreBuiltCacheFactory
operator|.
name|getCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|this
operator|.
name|create
operator|=
name|create
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|TokenFilterFactory
name|get
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTokenFilterFactory
argument_list|(
name|Version
operator|.
name|indexCreated
argument_list|(
name|settings
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * The name of the {@link TokenFilter} in the API.      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Can this {@link TokenFilter} be used in multi-term queries?      */
DECL|method|shouldUseFilterForMultitermQueries
specifier|public
name|boolean
name|shouldUseFilterForMultitermQueries
parameter_list|()
block|{
return|return
name|useFilterForMultitermQueries
return|;
block|}
DECL|interface|MultiTermAwareTokenFilterFactory
specifier|private
interface|interface
name|MultiTermAwareTokenFilterFactory
extends|extends
name|TokenFilterFactory
extends|,
name|MultiTermAwareComponent
block|{}
DECL|method|getTokenFilterFactory
specifier|private
specifier|synchronized
name|TokenFilterFactory
name|getTokenFilterFactory
parameter_list|(
specifier|final
name|Version
name|version
parameter_list|)
block|{
name|TokenFilterFactory
name|factory
init|=
name|cache
operator|.
name|get
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|useFilterForMultitermQueries
condition|)
block|{
name|factory
operator|=
operator|new
name|MultiTermAwareTokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
name|create
operator|.
name|apply
argument_list|(
name|tokenStream
argument_list|,
name|version
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getMultiTermComponent
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|factory
operator|=
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
name|create
operator|.
name|apply
argument_list|(
name|tokenStream
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
name|cache
operator|.
name|put
argument_list|(
name|version
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
block|}
end_class

end_unit

