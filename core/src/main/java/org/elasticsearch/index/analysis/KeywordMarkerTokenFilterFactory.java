begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|PatternKeywordMarkerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|SetKeywordMarkerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * A factory for creating keyword marker token filters that prevent tokens from  * being modified by stemmers.  Two types of keyword marker filters are available:  * the {@link SetKeywordMarkerFilter} and the {@link PatternKeywordMarkerFilter}.  *  * The {@link SetKeywordMarkerFilter} uses a set of keywords to denote which tokens  * should be excluded from stemming.  This filter is created if the settings include  * {@code keywords}, which contains the list of keywords, or {@code `keywords_path`},  * which contains a path to a file in the config directory with the keywords.  *  * The {@link PatternKeywordMarkerFilter} uses a regular expression pattern to match  * against tokens that should be excluded from stemming.  This filter is created if  * the settings include {@code keywords_pattern}, which contains the regular expression  * to match against.  */
end_comment

begin_class
DECL|class|KeywordMarkerTokenFilterFactory
specifier|public
class|class
name|KeywordMarkerTokenFilterFactory
extends|extends
name|AbstractTokenFilterFactory
block|{
DECL|field|keywordLookup
specifier|private
specifier|final
name|CharArraySet
name|keywordLookup
decl_stmt|;
DECL|field|keywordPattern
specifier|private
specifier|final
name|Pattern
name|keywordPattern
decl_stmt|;
DECL|method|KeywordMarkerTokenFilterFactory
specifier|public
name|KeywordMarkerTokenFilterFactory
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Environment
name|env
parameter_list|,
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|boolean
name|ignoreCase
init|=
name|settings
operator|.
name|getAsBooleanLenientForPreEs6Indices
argument_list|(
name|indexSettings
operator|.
name|getIndexVersionCreated
argument_list|()
argument_list|,
literal|"ignore_case"
argument_list|,
literal|false
argument_list|,
name|deprecationLogger
argument_list|)
decl_stmt|;
name|String
name|patternString
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"keywords_pattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|patternString
operator|!=
literal|null
condition|)
block|{
comment|// a pattern for matching keywords is specified, as opposed to a
comment|// set of keyword strings to match against
if|if
condition|(
name|settings
operator|.
name|get
argument_list|(
literal|"keywords"
argument_list|)
operator|!=
literal|null
operator|||
name|settings
operator|.
name|get
argument_list|(
literal|"keywords_path"
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot specify both `keywords_pattern` and `keywords` or `keywords_path`"
argument_list|)
throw|;
block|}
name|keywordPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|patternString
argument_list|)
expr_stmt|;
name|keywordLookup
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|rules
init|=
name|Analysis
operator|.
name|getWordSet
argument_list|(
name|env
argument_list|,
name|indexSettings
operator|.
name|getIndexVersionCreated
argument_list|()
argument_list|,
name|settings
argument_list|,
literal|"keywords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rules
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"keyword filter requires either `keywords`, `keywords_path`, "
operator|+
literal|"or `keywords_pattern` to be configured"
argument_list|)
throw|;
block|}
comment|// a set of keywords (or a path to them) is specified
name|keywordLookup
operator|=
operator|new
name|CharArraySet
argument_list|(
name|rules
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
name|keywordPattern
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
if|if
condition|(
name|keywordPattern
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PatternKeywordMarkerFilter
argument_list|(
name|tokenStream
argument_list|,
name|keywordPattern
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SetKeywordMarkerFilter
argument_list|(
name|tokenStream
argument_list|,
name|keywordLookup
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

