begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|StopAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|de
operator|.
name|GermanAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|fr
operator|.
name|FrenchAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|nl
operator|.
name|DutchAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_comment
comment|/**  * Creates a SnowballAnalyzer initialized with stopwords and Snowball filter. Only  * supports Dutch, English (default), French, German and German2 where stopwords  * are readily available. For other languages available with the Lucene Snowball  * Stemmer, use them directly with the SnowballFilter and a CustomAnalyzer.  * Configuration of language is done with the "language" attribute or the analyzer.  * Also supports additional stopwords via "stopwords" attribute  *<p>  * The SnowballAnalyzer comes with a StandardFilter, LowerCaseFilter, StopFilter  * and the SnowballFilter.  *  *  */
end_comment

begin_class
DECL|class|SnowballAnalyzerProvider
specifier|public
class|class
name|SnowballAnalyzerProvider
extends|extends
name|AbstractIndexAnalyzerProvider
argument_list|<
name|SnowballAnalyzer
argument_list|>
block|{
DECL|field|DEFAULT_LANGUAGE_STOPWORDS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CharArraySet
argument_list|>
name|DEFAULT_LANGUAGE_STOPWORDS
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|CharArraySet
argument_list|>
name|defaultLanguageStopwords
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|defaultLanguageStopwords
operator|.
name|put
argument_list|(
literal|"English"
argument_list|,
name|StopAnalyzer
operator|.
name|ENGLISH_STOP_WORDS_SET
argument_list|)
expr_stmt|;
name|defaultLanguageStopwords
operator|.
name|put
argument_list|(
literal|"Dutch"
argument_list|,
name|DutchAnalyzer
operator|.
name|getDefaultStopSet
argument_list|()
argument_list|)
expr_stmt|;
name|defaultLanguageStopwords
operator|.
name|put
argument_list|(
literal|"German"
argument_list|,
name|GermanAnalyzer
operator|.
name|getDefaultStopSet
argument_list|()
argument_list|)
expr_stmt|;
name|defaultLanguageStopwords
operator|.
name|put
argument_list|(
literal|"German2"
argument_list|,
name|GermanAnalyzer
operator|.
name|getDefaultStopSet
argument_list|()
argument_list|)
expr_stmt|;
name|defaultLanguageStopwords
operator|.
name|put
argument_list|(
literal|"French"
argument_list|,
name|FrenchAnalyzer
operator|.
name|getDefaultStopSet
argument_list|()
argument_list|)
expr_stmt|;
name|DEFAULT_LANGUAGE_STOPWORDS
operator|=
name|unmodifiableMap
argument_list|(
name|defaultLanguageStopwords
argument_list|)
expr_stmt|;
block|}
DECL|field|analyzer
specifier|private
specifier|final
name|SnowballAnalyzer
name|analyzer
decl_stmt|;
DECL|method|SnowballAnalyzerProvider
specifier|public
name|SnowballAnalyzerProvider
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Environment
name|env
parameter_list|,
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|String
name|language
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"language"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"name"
argument_list|,
literal|"English"
argument_list|)
argument_list|)
decl_stmt|;
name|CharArraySet
name|defaultStopwords
init|=
name|DEFAULT_LANGUAGE_STOPWORDS
operator|.
name|getOrDefault
argument_list|(
name|language
argument_list|,
name|CharArraySet
operator|.
name|EMPTY_SET
argument_list|)
decl_stmt|;
name|CharArraySet
name|stopWords
init|=
name|Analysis
operator|.
name|parseStopWords
argument_list|(
name|env
argument_list|,
name|settings
argument_list|,
name|defaultStopwords
argument_list|)
decl_stmt|;
name|analyzer
operator|=
operator|new
name|SnowballAnalyzer
argument_list|(
name|language
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|SnowballAnalyzer
name|get
parameter_list|()
block|{
return|return
name|this
operator|.
name|analyzer
return|;
block|}
block|}
end_class

end_unit

