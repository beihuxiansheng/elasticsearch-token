begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * IndexAnalyzers contains a name to analyzer mapping for a specific index.  * This class only holds analyzers that are explicitly configured for an index and doesn't allow  * access to individual tokenizers, char or token filter.  *  * @see AnalysisRegistry  */
end_comment

begin_class
DECL|class|IndexAnalyzers
specifier|public
specifier|final
class|class
name|IndexAnalyzers
extends|extends
name|AbstractIndexComponent
implements|implements
name|Closeable
block|{
DECL|field|defaultIndexAnalyzer
specifier|private
specifier|final
name|NamedAnalyzer
name|defaultIndexAnalyzer
decl_stmt|;
DECL|field|defaultSearchAnalyzer
specifier|private
specifier|final
name|NamedAnalyzer
name|defaultSearchAnalyzer
decl_stmt|;
DECL|field|defaultSearchQuoteAnalyzer
specifier|private
specifier|final
name|NamedAnalyzer
name|defaultSearchQuoteAnalyzer
decl_stmt|;
DECL|field|analyzers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|analyzers
decl_stmt|;
DECL|field|indexSettings
specifier|private
specifier|final
name|IndexSettings
name|indexSettings
decl_stmt|;
DECL|method|IndexAnalyzers
specifier|public
name|IndexAnalyzers
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|NamedAnalyzer
name|defaultIndexAnalyzer
parameter_list|,
name|NamedAnalyzer
name|defaultSearchAnalyzer
parameter_list|,
name|NamedAnalyzer
name|defaultSearchQuoteAnalyzer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|analyzers
parameter_list|)
block|{
name|super
argument_list|(
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultIndexAnalyzer
operator|=
name|defaultIndexAnalyzer
expr_stmt|;
name|this
operator|.
name|defaultSearchAnalyzer
operator|=
name|defaultSearchAnalyzer
expr_stmt|;
name|this
operator|.
name|defaultSearchQuoteAnalyzer
operator|=
name|defaultSearchQuoteAnalyzer
expr_stmt|;
name|this
operator|.
name|analyzers
operator|=
name|analyzers
expr_stmt|;
name|this
operator|.
name|indexSettings
operator|=
name|indexSettings
expr_stmt|;
block|}
comment|/**      * Returns an analyzer mapped to the given name or<code>null</code> if not present      */
DECL|method|get
specifier|public
name|NamedAnalyzer
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|analyzers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns the default index analyzer for this index      */
DECL|method|getDefaultIndexAnalyzer
specifier|public
name|NamedAnalyzer
name|getDefaultIndexAnalyzer
parameter_list|()
block|{
return|return
name|defaultIndexAnalyzer
return|;
block|}
comment|/**      * Returns the default search analyzer for this index      */
DECL|method|getDefaultSearchAnalyzer
specifier|public
name|NamedAnalyzer
name|getDefaultSearchAnalyzer
parameter_list|()
block|{
return|return
name|defaultSearchAnalyzer
return|;
block|}
comment|/**      * Returns the default search quote analyzer for this index      */
DECL|method|getDefaultSearchQuoteAnalyzer
specifier|public
name|NamedAnalyzer
name|getDefaultSearchQuoteAnalyzer
parameter_list|()
block|{
return|return
name|defaultSearchQuoteAnalyzer
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
parameter_list|()
lambda|->
name|analyzers
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|a
operator|.
name|scope
argument_list|()
operator|==
name|AnalyzerScope
operator|.
name|INDEX
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the indices settings      */
DECL|method|getIndexSettings
specifier|public
name|IndexSettings
name|getIndexSettings
parameter_list|()
block|{
return|return
name|indexSettings
return|;
block|}
block|}
end_class

end_unit

