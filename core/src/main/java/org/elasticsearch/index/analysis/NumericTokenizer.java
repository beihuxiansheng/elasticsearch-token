begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|LegacyNumericTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|NumericTokenizer
specifier|public
specifier|abstract
class|class
name|NumericTokenizer
extends|extends
name|Tokenizer
block|{
comment|/** Make this tokenizer get attributes from the delegate token stream. */
DECL|method|delegatingAttributeFactory
specifier|private
specifier|static
specifier|final
name|AttributeFactory
name|delegatingAttributeFactory
parameter_list|(
specifier|final
name|AttributeSource
name|source
parameter_list|)
block|{
return|return
operator|new
name|AttributeFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AttributeImpl
name|createAttributeInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|attClass
parameter_list|)
block|{
return|return
operator|(
name|AttributeImpl
operator|)
name|source
operator|.
name|addAttribute
argument_list|(
name|attClass
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|field|numericTokenStream
specifier|private
specifier|final
name|LegacyNumericTokenStream
name|numericTokenStream
decl_stmt|;
DECL|field|buffer
specifier|private
specifier|final
name|char
index|[]
name|buffer
decl_stmt|;
DECL|field|extra
specifier|protected
specifier|final
name|Object
name|extra
decl_stmt|;
DECL|field|started
specifier|private
name|boolean
name|started
decl_stmt|;
DECL|method|NumericTokenizer
specifier|protected
name|NumericTokenizer
parameter_list|(
name|LegacyNumericTokenStream
name|numericTokenStream
parameter_list|,
name|char
index|[]
name|buffer
parameter_list|,
name|Object
name|extra
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|delegatingAttributeFactory
argument_list|(
name|numericTokenStream
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|numericTokenStream
operator|=
name|numericTokenStream
expr_stmt|;
comment|// Add attributes from the numeric token stream, this works fine because the attribute factory delegates to numericTokenStream
for|for
control|(
name|Iterator
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
argument_list|>
name|it
init|=
name|numericTokenStream
operator|.
name|getAttributeClassesIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|addAttribute
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|extra
operator|=
name|extra
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|started
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|started
condition|)
block|{
comment|// reset() must be idempotent, this is why we read data in incrementToken
specifier|final
name|int
name|len
init|=
name|Streams
operator|.
name|readFully
argument_list|(
name|input
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|==
name|buffer
operator|.
name|length
operator|&&
name|input
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot read numeric data larger than "
operator|+
name|buffer
operator|.
name|length
operator|+
literal|" chars"
argument_list|)
throw|;
block|}
name|setValue
argument_list|(
name|numericTokenStream
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
name|numericTokenStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|numericTokenStream
operator|.
name|incrementToken
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|end
specifier|public
name|void
name|end
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|end
argument_list|()
expr_stmt|;
name|numericTokenStream
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|numericTokenStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|setValue
specifier|protected
specifier|abstract
name|void
name|setValue
parameter_list|(
name|LegacyNumericTokenStream
name|tokenStream
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
block|}
end_class

end_unit

