begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
operator|.
name|AnalysisProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltAnalyzers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltCharFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltTokenFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltTokenizers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_comment
comment|/**  * An internal registry for tokenizer, token filter, char filter and analyzer.  * This class exists per node and allows to create per-index {@link AnalysisService} via {@link #build(IndexSettings)}  */
end_comment

begin_class
DECL|class|AnalysisRegistry
specifier|public
specifier|final
class|class
name|AnalysisRegistry
implements|implements
name|Closeable
block|{
DECL|field|prebuiltAnalysis
specifier|private
specifier|final
name|PrebuiltAnalysis
name|prebuiltAnalysis
init|=
operator|new
name|PrebuiltAnalysis
argument_list|()
decl_stmt|;
DECL|field|cachedAnalyzer
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|cachedAnalyzer
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
DECL|field|charFilters
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
argument_list|>
name|charFilters
decl_stmt|;
DECL|field|tokenFilters
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
argument_list|>
name|tokenFilters
decl_stmt|;
DECL|field|tokenizers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
argument_list|>
name|tokenizers
decl_stmt|;
DECL|field|analyzers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|analyzers
decl_stmt|;
DECL|method|AnalysisRegistry
specifier|public
name|AnalysisRegistry
parameter_list|(
name|Environment
name|environment
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
argument_list|>
name|charFilters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
argument_list|>
name|tokenFilters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
argument_list|>
name|tokenizers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|analyzers
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|charFilters
operator|=
name|unmodifiableMap
argument_list|(
name|charFilters
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenFilters
operator|=
name|unmodifiableMap
argument_list|(
name|tokenFilters
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenizers
operator|=
name|unmodifiableMap
argument_list|(
name|tokenizers
argument_list|)
expr_stmt|;
name|this
operator|.
name|analyzers
operator|=
name|unmodifiableMap
argument_list|(
name|analyzers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a registered {@link TokenizerFactory} provider by name or<code>null</code> if the tokenizer was not registered      */
DECL|method|getTokenizerProvider
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
name|getTokenizerProvider
parameter_list|(
name|String
name|tokenizer
parameter_list|)
block|{
return|return
name|tokenizers
operator|.
name|getOrDefault
argument_list|(
name|tokenizer
argument_list|,
name|this
operator|.
name|prebuiltAnalysis
operator|.
name|getTokenizerFactory
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a registered {@link TokenFilterFactory} provider by name or<code>null</code> if the token filter was not registered      */
DECL|method|getTokenFilterProvider
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
name|getTokenFilterProvider
parameter_list|(
name|String
name|tokenFilter
parameter_list|)
block|{
return|return
name|tokenFilters
operator|.
name|getOrDefault
argument_list|(
name|tokenFilter
argument_list|,
name|this
operator|.
name|prebuiltAnalysis
operator|.
name|getTokenFilterFactory
argument_list|(
name|tokenFilter
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a registered {@link CharFilterFactory} provider by name or<code>null</code> if the char filter was not registered      */
DECL|method|getCharFilterProvider
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
name|getCharFilterProvider
parameter_list|(
name|String
name|charFilter
parameter_list|)
block|{
return|return
name|charFilters
operator|.
name|getOrDefault
argument_list|(
name|charFilter
argument_list|,
name|this
operator|.
name|prebuiltAnalysis
operator|.
name|getCharFilterFactory
argument_list|(
name|charFilter
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a registered {@link Analyzer} provider by name or<code>null</code> if the analyzer was not registered      */
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|(
name|String
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|analyzerProvider
init|=
name|this
operator|.
name|prebuiltAnalysis
operator|.
name|getAnalyzerProvider
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzerProvider
operator|==
literal|null
condition|)
block|{
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|provider
init|=
name|analyzers
operator|.
name|get
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
return|return
name|provider
operator|==
literal|null
condition|?
literal|null
else|:
name|cachedAnalyzer
operator|.
name|computeIfAbsent
argument_list|(
name|analyzer
argument_list|,
parameter_list|(
name|key
parameter_list|)
lambda|->
block|{
try|try
block|{
return|return
name|provider
operator|.
name|get
argument_list|(
name|environment
argument_list|,
name|key
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to load analyzer for name "
operator|+
name|key
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|analyzerProvider
operator|.
name|get
argument_list|(
name|environment
argument_list|,
name|analyzer
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|prebuiltAnalysis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|cachedAnalyzer
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates an index-level {@link AnalysisService} from this registry using the given index settings      */
DECL|method|build
specifier|public
name|AnalysisService
name|build
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|charFiltersSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.char_filter"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|tokenFiltersSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.filter"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|tokenizersSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.tokenizer"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|analyzersSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.analyzer"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CharFilterFactory
argument_list|>
name|charFilterFactories
init|=
name|buildMapping
argument_list|(
literal|false
argument_list|,
literal|"charfilter"
argument_list|,
name|indexSettings
argument_list|,
name|charFiltersSettings
argument_list|,
name|charFilters
argument_list|,
name|prebuiltAnalysis
operator|.
name|charFilterFactories
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TokenizerFactory
argument_list|>
name|tokenizerFactories
init|=
name|buildMapping
argument_list|(
literal|false
argument_list|,
literal|"tokenizer"
argument_list|,
name|indexSettings
argument_list|,
name|tokenizersSettings
argument_list|,
name|tokenizers
argument_list|,
name|prebuiltAnalysis
operator|.
name|tokenizerFactories
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
argument_list|>
name|tokenFilters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|tokenFilters
argument_list|)
decl_stmt|;
comment|/*          * synonym is different than everything else since it needs access to the tokenizer factories for this index.          * instead of building the infrastructure for plugins we rather make it a real exception to not pollute the general interface and          * hide internal data-structures as much as possible.          */
name|tokenFilters
operator|.
name|put
argument_list|(
literal|"synonym"
argument_list|,
name|requriesAnalysisSettings
argument_list|(
parameter_list|(
name|is
parameter_list|,
name|env
parameter_list|,
name|name
parameter_list|,
name|settings
parameter_list|)
lambda|->
operator|new
name|SynonymTokenFilterFactory
argument_list|(
name|is
argument_list|,
name|env
argument_list|,
name|tokenizerFactories
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TokenFilterFactory
argument_list|>
name|tokenFilterFactories
init|=
name|buildMapping
argument_list|(
literal|false
argument_list|,
literal|"tokenfilter"
argument_list|,
name|indexSettings
argument_list|,
name|tokenFiltersSettings
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tokenFilters
argument_list|)
argument_list|,
name|prebuiltAnalysis
operator|.
name|tokenFilterFactories
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|analyzierFactories
init|=
name|buildMapping
argument_list|(
literal|true
argument_list|,
literal|"analyzer"
argument_list|,
name|indexSettings
argument_list|,
name|analyzersSettings
argument_list|,
name|analyzers
argument_list|,
name|prebuiltAnalysis
operator|.
name|analyzerProviderFactories
argument_list|)
decl_stmt|;
return|return
operator|new
name|AnalysisService
argument_list|(
name|indexSettings
argument_list|,
name|analyzierFactories
argument_list|,
name|tokenizerFactories
argument_list|,
name|charFilterFactories
argument_list|,
name|tokenFilterFactories
argument_list|)
return|;
block|}
DECL|method|requriesAnalysisSettings
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|requriesAnalysisSettings
parameter_list|(
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|provider
parameter_list|)
block|{
return|return
operator|new
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|provider
operator|.
name|get
argument_list|(
name|indexSettings
argument_list|,
name|environment
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|requiresAnalysisSettings
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
DECL|method|buildMapping
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|buildMapping
parameter_list|(
name|boolean
name|analyzer
parameter_list|,
name|String
name|toBuild
parameter_list|,
name|IndexSettings
name|settings
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|settingsMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
argument_list|>
name|providerMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
argument_list|>
name|defaultInstance
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|defaultSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|settings
operator|.
name|getIndexVersionCreated
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|factories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|settingsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Settings
name|currentSettings
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|typeName
init|=
name|currentSettings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
condition|)
block|{
name|T
name|factory
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|currentSettings
operator|.
name|get
argument_list|(
literal|"tokenizer"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|factory
operator|=
operator|(
name|T
operator|)
operator|new
name|CustomAnalyzerProvider
argument_list|(
name|settings
argument_list|,
name|name
argument_list|,
name|currentSettings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|toBuild
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"] must specify either an analyzer type, or a tokenizer"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"custom"
argument_list|)
condition|)
block|{
name|factory
operator|=
operator|(
name|T
operator|)
operator|new
name|CustomAnalyzerProvider
argument_list|(
name|settings
argument_list|,
name|name
argument_list|,
name|currentSettings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|type
init|=
name|providerMap
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown "
operator|+
name|toBuild
operator|+
literal|" type ["
operator|+
name|typeName
operator|+
literal|"] for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|factory
operator|=
name|type
operator|.
name|get
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|name
argument_list|,
name|currentSettings
argument_list|)
expr_stmt|;
block|}
name|factories
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|toBuild
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"] must specify either an analyzer type, or a tokenizer"
argument_list|)
throw|;
block|}
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|type
init|=
name|providerMap
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown "
operator|+
name|toBuild
operator|+
literal|" type ["
operator|+
name|typeName
operator|+
literal|"] for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|T
name|factory
init|=
name|type
operator|.
name|get
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|name
argument_list|,
name|currentSettings
argument_list|)
decl_stmt|;
name|factories
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
comment|// go over the char filters in the bindings and register the ones that are not configured
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
argument_list|>
name|entry
range|:
name|providerMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|provider
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// we don't want to re-register one that already exists
if|if
condition|(
name|settingsMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// check, if it requires settings, then don't register it, we know default has no settings...
if|if
condition|(
name|provider
operator|.
name|requiresAnalysisSettings
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|defaultProvider
init|=
name|defaultInstance
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|T
name|instance
decl_stmt|;
if|if
condition|(
name|defaultProvider
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
name|provider
operator|.
name|get
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|name
argument_list|,
name|defaultSettings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|instance
operator|=
name|defaultProvider
operator|.
name|get
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|name
argument_list|,
name|defaultSettings
argument_list|)
expr_stmt|;
block|}
name|factories
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
argument_list|>
name|entry
range|:
name|defaultInstance
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|provider
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|factories
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
specifier|final
name|T
name|instance
init|=
name|provider
operator|.
name|get
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|name
argument_list|,
name|defaultSettings
argument_list|)
decl_stmt|;
if|if
condition|(
name|factories
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
name|factories
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|factories
return|;
block|}
DECL|class|PrebuiltAnalysis
specifier|private
specifier|static
class|class
name|PrebuiltAnalysis
implements|implements
name|Closeable
block|{
DECL|field|analyzerProviderFactories
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|analyzerProviderFactories
decl_stmt|;
DECL|field|tokenizerFactories
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
argument_list|>
name|tokenizerFactories
decl_stmt|;
DECL|field|tokenFilterFactories
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
argument_list|>
name|tokenFilterFactories
decl_stmt|;
DECL|field|charFilterFactories
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
argument_list|>
name|charFilterFactories
decl_stmt|;
DECL|method|PrebuiltAnalysis
specifier|private
name|PrebuiltAnalysis
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltAnalyzerProviderFactory
argument_list|>
name|analyzerProviderFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltTokenizerFactoryFactory
argument_list|>
name|tokenizerFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltTokenFilterFactoryFactory
argument_list|>
name|tokenFilterFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltCharFilterFactoryFactory
argument_list|>
name|charFilterFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Analyzers
for|for
control|(
name|PreBuiltAnalyzers
name|preBuiltAnalyzerEnum
range|:
name|PreBuiltAnalyzers
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|preBuiltAnalyzerEnum
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
name|name
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
name|preBuiltAnalyzerEnum
operator|.
name|getAnalyzer
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Tokenizers
for|for
control|(
name|PreBuiltTokenizers
name|preBuiltTokenizer
range|:
name|PreBuiltTokenizers
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|preBuiltTokenizer
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
name|preBuiltTokenizer
operator|.
name|getTokenizerFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Tokenizer aliases
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"nGram"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
name|PreBuiltTokenizers
operator|.
name|NGRAM
operator|.
name|getTokenizerFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"edgeNGram"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
name|PreBuiltTokenizers
operator|.
name|EDGE_NGRAM
operator|.
name|getTokenizerFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"PathHierarchy"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
name|PreBuiltTokenizers
operator|.
name|PATH_HIERARCHY
operator|.
name|getTokenizerFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Token filters
for|for
control|(
name|PreBuiltTokenFilters
name|preBuiltTokenFilter
range|:
name|PreBuiltTokenFilters
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|preBuiltTokenFilter
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
name|preBuiltTokenFilter
operator|.
name|getTokenFilterFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Token filter aliases
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"nGram"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
name|PreBuiltTokenFilters
operator|.
name|NGRAM
operator|.
name|getTokenFilterFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"edgeNGram"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
name|PreBuiltTokenFilters
operator|.
name|EDGE_NGRAM
operator|.
name|getTokenFilterFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Char Filters
for|for
control|(
name|PreBuiltCharFilters
name|preBuiltCharFilter
range|:
name|PreBuiltCharFilters
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|preBuiltCharFilter
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|charFilterFactories
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PreBuiltCharFilterFactoryFactory
argument_list|(
name|preBuiltCharFilter
operator|.
name|getCharFilterFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Char filter aliases
name|charFilterFactories
operator|.
name|put
argument_list|(
literal|"htmlStrip"
argument_list|,
operator|new
name|PreBuiltCharFilterFactoryFactory
argument_list|(
name|PreBuiltCharFilters
operator|.
name|HTML_STRIP
operator|.
name|getCharFilterFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|analyzerProviderFactories
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|analyzerProviderFactories
argument_list|)
expr_stmt|;
name|this
operator|.
name|charFilterFactories
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|charFilterFactories
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenFilterFactories
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tokenFilterFactories
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenizerFactories
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tokenizerFactories
argument_list|)
expr_stmt|;
block|}
DECL|method|getCharFilterFactory
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
name|getCharFilterFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|charFilterFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getTokenFilterFactory
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
name|getTokenFilterFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tokenFilterFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getTokenizerFactory
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
name|getTokenizerFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tokenizerFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getAnalyzerProvider
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|getAnalyzerProvider
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|analyzerProviderFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|analyzer
name|Analyzer
name|analyzer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PreBuiltAnalyzerProviderFactory
name|analyzerProviderFactory
init|=
operator|(
name|PreBuiltAnalyzerProviderFactory
operator|)
name|analyzerProviderFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzerProviderFactory
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|analyzerProviderFactory
operator|.
name|analyzer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|analyzerProviderFactories
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
parameter_list|(
name|a
parameter_list|)
lambda|->
operator|(
operator|(
name|PreBuiltAnalyzerProviderFactory
operator|)
name|a
operator|)
operator|.
name|analyzer
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

