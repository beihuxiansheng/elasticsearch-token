begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|TextFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
operator|.
name|AnalysisProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltAnalyzers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltCharFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltTokenFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltTokenizers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_comment
comment|/**  * An internal registry for tokenizer, token filter, char filter and analyzer.  * This class exists per node and allows to create per-index {@link IndexAnalyzers} via {@link #build(IndexSettings)}  */
end_comment

begin_class
DECL|class|AnalysisRegistry
specifier|public
specifier|final
class|class
name|AnalysisRegistry
implements|implements
name|Closeable
block|{
DECL|field|INDEX_ANALYSIS_CHAR_FILTER
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_ANALYSIS_CHAR_FILTER
init|=
literal|"index.analysis.char_filter"
decl_stmt|;
DECL|field|INDEX_ANALYSIS_FILTER
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_ANALYSIS_FILTER
init|=
literal|"index.analysis.filter"
decl_stmt|;
DECL|field|INDEX_ANALYSIS_TOKENIZER
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_ANALYSIS_TOKENIZER
init|=
literal|"index.analysis.tokenizer"
decl_stmt|;
DECL|field|prebuiltAnalysis
specifier|private
specifier|final
name|PrebuiltAnalysis
name|prebuiltAnalysis
init|=
operator|new
name|PrebuiltAnalysis
argument_list|()
decl_stmt|;
DECL|field|cachedAnalyzer
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|cachedAnalyzer
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
DECL|field|charFilters
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
argument_list|>
name|charFilters
decl_stmt|;
DECL|field|tokenFilters
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
argument_list|>
name|tokenFilters
decl_stmt|;
DECL|field|tokenizers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
argument_list|>
name|tokenizers
decl_stmt|;
DECL|field|analyzers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|analyzers
decl_stmt|;
DECL|field|normalizers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|normalizers
decl_stmt|;
DECL|method|AnalysisRegistry
specifier|public
name|AnalysisRegistry
parameter_list|(
name|Environment
name|environment
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
argument_list|>
name|charFilters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
argument_list|>
name|tokenFilters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
argument_list|>
name|tokenizers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|analyzers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|normalizers
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|charFilters
operator|=
name|unmodifiableMap
argument_list|(
name|charFilters
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenFilters
operator|=
name|unmodifiableMap
argument_list|(
name|tokenFilters
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenizers
operator|=
name|unmodifiableMap
argument_list|(
name|tokenizers
argument_list|)
expr_stmt|;
name|this
operator|.
name|analyzers
operator|=
name|unmodifiableMap
argument_list|(
name|analyzers
argument_list|)
expr_stmt|;
name|this
operator|.
name|normalizers
operator|=
name|unmodifiableMap
argument_list|(
name|normalizers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a {@link Settings} by groupName from {@link IndexSettings} or a default {@link Settings}      * @param indexSettings an index settings      * @param groupName tokenizer/token filter/char filter name      * @return {@link Settings}      */
DECL|method|getSettingsFromIndexSettings
specifier|public
specifier|static
name|Settings
name|getSettingsFromIndexSettings
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|String
name|groupName
parameter_list|)
block|{
name|Settings
name|settings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsSettings
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|indexSettings
operator|.
name|getIndexVersionCreated
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|settings
return|;
block|}
comment|/**      * Returns a registered {@link TokenizerFactory} provider by name or<code>null</code> if the tokenizer was not registered      */
DECL|method|getTokenizerProvider
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
name|getTokenizerProvider
parameter_list|(
name|String
name|tokenizer
parameter_list|)
block|{
return|return
name|tokenizers
operator|.
name|getOrDefault
argument_list|(
name|tokenizer
argument_list|,
name|this
operator|.
name|prebuiltAnalysis
operator|.
name|getTokenizerFactory
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a registered {@link TokenFilterFactory} provider by name or<code>null</code> if the token filter was not registered      */
DECL|method|getTokenFilterProvider
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
name|getTokenFilterProvider
parameter_list|(
name|String
name|tokenFilter
parameter_list|)
block|{
return|return
name|tokenFilters
operator|.
name|getOrDefault
argument_list|(
name|tokenFilter
argument_list|,
name|this
operator|.
name|prebuiltAnalysis
operator|.
name|getTokenFilterFactory
argument_list|(
name|tokenFilter
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a registered {@link CharFilterFactory} provider by name or<code>null</code> if the char filter was not registered      */
DECL|method|getCharFilterProvider
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
name|getCharFilterProvider
parameter_list|(
name|String
name|charFilter
parameter_list|)
block|{
return|return
name|charFilters
operator|.
name|getOrDefault
argument_list|(
name|charFilter
argument_list|,
name|this
operator|.
name|prebuiltAnalysis
operator|.
name|getCharFilterFactory
argument_list|(
name|charFilter
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a registered {@link Analyzer} provider by name or<code>null</code> if the analyzer was not registered      */
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|(
name|String
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|analyzerProvider
init|=
name|this
operator|.
name|prebuiltAnalysis
operator|.
name|getAnalyzerProvider
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzerProvider
operator|==
literal|null
condition|)
block|{
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|provider
init|=
name|analyzers
operator|.
name|get
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
return|return
name|provider
operator|==
literal|null
condition|?
literal|null
else|:
name|cachedAnalyzer
operator|.
name|computeIfAbsent
argument_list|(
name|analyzer
argument_list|,
parameter_list|(
name|key
parameter_list|)
lambda|->
block|{
try|try
block|{
return|return
name|provider
operator|.
name|get
argument_list|(
name|environment
argument_list|,
name|key
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to load analyzer for name "
operator|+
name|key
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|analyzerProvider
operator|.
name|get
argument_list|(
name|environment
argument_list|,
name|analyzer
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|prebuiltAnalysis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|cachedAnalyzer
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates an index-level {@link IndexAnalyzers} from this registry using the given index settings      */
DECL|method|build
specifier|public
name|IndexAnalyzers
name|build
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CharFilterFactory
argument_list|>
name|charFilterFactories
init|=
name|buildCharFilterFactories
argument_list|(
name|indexSettings
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TokenizerFactory
argument_list|>
name|tokenizerFactories
init|=
name|buildTokenizerFactories
argument_list|(
name|indexSettings
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TokenFilterFactory
argument_list|>
name|tokenFilterFactories
init|=
name|buildTokenFilterFactories
argument_list|(
name|indexSettings
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|analyzierFactories
init|=
name|buildAnalyzerFactories
argument_list|(
name|indexSettings
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|normalizerFactories
init|=
name|buildNormalizerFactories
argument_list|(
name|indexSettings
argument_list|)
decl_stmt|;
return|return
name|build
argument_list|(
name|indexSettings
argument_list|,
name|analyzierFactories
argument_list|,
name|normalizerFactories
argument_list|,
name|tokenizerFactories
argument_list|,
name|charFilterFactories
argument_list|,
name|tokenFilterFactories
argument_list|)
return|;
block|}
DECL|method|buildTokenFilterFactories
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|TokenFilterFactory
argument_list|>
name|buildTokenFilterFactories
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|tokenFiltersSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
name|INDEX_ANALYSIS_FILTER
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
argument_list|>
name|tokenFilters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|tokenFilters
argument_list|)
decl_stmt|;
comment|/*          * synonym and synonym_graph are different than everything else since they need access to the tokenizer factories for the index.          * instead of building the infrastructure for plugins we rather make it a real exception to not pollute the general interface and          * hide internal data-structures as much as possible.          */
name|tokenFilters
operator|.
name|put
argument_list|(
literal|"synonym"
argument_list|,
name|requriesAnalysisSettings
argument_list|(
parameter_list|(
name|is
parameter_list|,
name|env
parameter_list|,
name|name
parameter_list|,
name|settings
parameter_list|)
lambda|->
operator|new
name|SynonymTokenFilterFactory
argument_list|(
name|is
argument_list|,
name|env
argument_list|,
name|this
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilters
operator|.
name|put
argument_list|(
literal|"synonym_graph"
argument_list|,
name|requriesAnalysisSettings
argument_list|(
parameter_list|(
name|is
parameter_list|,
name|env
parameter_list|,
name|name
parameter_list|,
name|settings
parameter_list|)
lambda|->
operator|new
name|SynonymGraphFilterFactory
argument_list|(
name|is
argument_list|,
name|env
argument_list|,
name|this
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buildMapping
argument_list|(
name|Component
operator|.
name|FILTER
argument_list|,
name|indexSettings
argument_list|,
name|tokenFiltersSettings
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tokenFilters
argument_list|)
argument_list|,
name|prebuiltAnalysis
operator|.
name|tokenFilterFactories
argument_list|)
return|;
block|}
DECL|method|buildTokenizerFactories
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|TokenizerFactory
argument_list|>
name|buildTokenizerFactories
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|tokenizersSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
name|INDEX_ANALYSIS_TOKENIZER
argument_list|)
decl_stmt|;
return|return
name|buildMapping
argument_list|(
name|Component
operator|.
name|TOKENIZER
argument_list|,
name|indexSettings
argument_list|,
name|tokenizersSettings
argument_list|,
name|tokenizers
argument_list|,
name|prebuiltAnalysis
operator|.
name|tokenizerFactories
argument_list|)
return|;
block|}
DECL|method|buildCharFilterFactories
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|CharFilterFactory
argument_list|>
name|buildCharFilterFactories
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|charFiltersSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
name|INDEX_ANALYSIS_CHAR_FILTER
argument_list|)
decl_stmt|;
return|return
name|buildMapping
argument_list|(
name|Component
operator|.
name|CHAR_FILTER
argument_list|,
name|indexSettings
argument_list|,
name|charFiltersSettings
argument_list|,
name|charFilters
argument_list|,
name|prebuiltAnalysis
operator|.
name|charFilterFactories
argument_list|)
return|;
block|}
DECL|method|buildAnalyzerFactories
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|buildAnalyzerFactories
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|analyzersSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.analyzer"
argument_list|)
decl_stmt|;
return|return
name|buildMapping
argument_list|(
name|Component
operator|.
name|ANALYZER
argument_list|,
name|indexSettings
argument_list|,
name|analyzersSettings
argument_list|,
name|analyzers
argument_list|,
name|prebuiltAnalysis
operator|.
name|analyzerProviderFactories
argument_list|)
return|;
block|}
DECL|method|buildNormalizerFactories
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|buildNormalizerFactories
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|noralizersSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.normalizer"
argument_list|)
decl_stmt|;
comment|// TODO: Have pre-built normalizers
return|return
name|buildMapping
argument_list|(
name|Component
operator|.
name|NORMALIZER
argument_list|,
name|indexSettings
argument_list|,
name|noralizersSettings
argument_list|,
name|normalizers
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a registered {@link TokenizerFactory} provider by {@link IndexSettings}      *  or a registered {@link TokenizerFactory} provider by predefined name      *  or<code>null</code> if the tokenizer was not registered      * @param tokenizer global or defined tokenizer name      * @param indexSettings an index settings      * @return {@link TokenizerFactory} provider or<code>null</code>      */
DECL|method|getTokenizerProvider
specifier|public
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
name|getTokenizerProvider
parameter_list|(
name|String
name|tokenizer
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|tokenizerSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.tokenizer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizerSettings
operator|.
name|containsKey
argument_list|(
name|tokenizer
argument_list|)
condition|)
block|{
name|Settings
name|currentSettings
init|=
name|tokenizerSettings
operator|.
name|get
argument_list|(
name|tokenizer
argument_list|)
decl_stmt|;
return|return
name|getAnalysisProvider
argument_list|(
name|Component
operator|.
name|TOKENIZER
argument_list|,
name|tokenizers
argument_list|,
name|tokenizer
argument_list|,
name|currentSettings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getTokenizerProvider
argument_list|(
name|tokenizer
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns a registered {@link TokenFilterFactory} provider by {@link IndexSettings}      *  or a registered {@link TokenFilterFactory} provider by predefined name      *  or<code>null</code> if the tokenFilter was not registered      * @param tokenFilter global or defined tokenFilter name      * @param indexSettings an index settings      * @return {@link TokenFilterFactory} provider or<code>null</code>      */
DECL|method|getTokenFilterProvider
specifier|public
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
name|getTokenFilterProvider
parameter_list|(
name|String
name|tokenFilter
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|tokenFilterSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.filter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenFilterSettings
operator|.
name|containsKey
argument_list|(
name|tokenFilter
argument_list|)
condition|)
block|{
name|Settings
name|currentSettings
init|=
name|tokenFilterSettings
operator|.
name|get
argument_list|(
name|tokenFilter
argument_list|)
decl_stmt|;
name|String
name|typeName
init|=
name|currentSettings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
comment|/*              * synonym and synonym_graph are different than everything else since they need access to the tokenizer factories for the index.              * instead of building the infrastructure for plugins we rather make it a real exception to not pollute the general interface and              * hide internal data-structures as much as possible.              */
if|if
condition|(
literal|"synonym"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
return|return
name|requriesAnalysisSettings
argument_list|(
parameter_list|(
name|is
parameter_list|,
name|env
parameter_list|,
name|name
parameter_list|,
name|settings
parameter_list|)
lambda|->
operator|new
name|SynonymTokenFilterFactory
argument_list|(
name|is
argument_list|,
name|env
argument_list|,
name|this
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"synonym_graph"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
return|return
name|requriesAnalysisSettings
argument_list|(
parameter_list|(
name|is
parameter_list|,
name|env
parameter_list|,
name|name
parameter_list|,
name|settings
parameter_list|)
lambda|->
operator|new
name|SynonymGraphFilterFactory
argument_list|(
name|is
argument_list|,
name|env
argument_list|,
name|this
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getAnalysisProvider
argument_list|(
name|Component
operator|.
name|FILTER
argument_list|,
name|tokenFilters
argument_list|,
name|tokenFilter
argument_list|,
name|typeName
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|getTokenFilterProvider
argument_list|(
name|tokenFilter
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns a registered {@link CharFilterFactory} provider by {@link IndexSettings}      *  or a registered {@link CharFilterFactory} provider by predefined name      *  or<code>null</code> if the charFilter was not registered      * @param charFilter global or defined charFilter name      * @param indexSettings an index settings      * @return {@link CharFilterFactory} provider or<code>null</code>      */
DECL|method|getCharFilterProvider
specifier|public
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
name|getCharFilterProvider
parameter_list|(
name|String
name|charFilter
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|tokenFilterSettings
init|=
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getGroups
argument_list|(
literal|"index.analysis.char_filter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenFilterSettings
operator|.
name|containsKey
argument_list|(
name|charFilter
argument_list|)
condition|)
block|{
name|Settings
name|currentSettings
init|=
name|tokenFilterSettings
operator|.
name|get
argument_list|(
name|charFilter
argument_list|)
decl_stmt|;
return|return
name|getAnalysisProvider
argument_list|(
name|Component
operator|.
name|CHAR_FILTER
argument_list|,
name|charFilters
argument_list|,
name|charFilter
argument_list|,
name|currentSettings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getCharFilterProvider
argument_list|(
name|charFilter
argument_list|)
return|;
block|}
block|}
DECL|method|requriesAnalysisSettings
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|requriesAnalysisSettings
parameter_list|(
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|provider
parameter_list|)
block|{
return|return
operator|new
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|provider
operator|.
name|get
argument_list|(
name|indexSettings
argument_list|,
name|environment
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|requiresAnalysisSettings
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
DECL|enum|Component
enum|enum
name|Component
block|{
DECL|enum constant|ANALYZER
name|ANALYZER
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"analyzer"
return|;
block|}
block|}
block|,
DECL|enum constant|NORMALIZER
name|NORMALIZER
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"normalizer"
return|;
block|}
block|}
block|,
DECL|enum constant|CHAR_FILTER
name|CHAR_FILTER
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"char_filter"
return|;
block|}
block|}
block|,
DECL|enum constant|TOKENIZER
name|TOKENIZER
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"tokenizer"
return|;
block|}
block|}
block|,
DECL|enum constant|FILTER
name|FILTER
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"filter"
return|;
block|}
block|}
block|;     }
DECL|method|buildMapping
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|buildMapping
parameter_list|(
name|Component
name|component
parameter_list|,
name|IndexSettings
name|settings
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|settingsMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
argument_list|>
name|providerMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
argument_list|>
name|defaultInstance
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|defaultSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|settings
operator|.
name|getIndexVersionCreated
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|factories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|settingsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Settings
name|currentSettings
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|typeName
init|=
name|currentSettings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
name|Component
operator|.
name|ANALYZER
condition|)
block|{
name|T
name|factory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|currentSettings
operator|.
name|get
argument_list|(
literal|"tokenizer"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|factory
operator|=
operator|(
name|T
operator|)
operator|new
name|CustomAnalyzerProvider
argument_list|(
name|settings
argument_list|,
name|name
argument_list|,
name|currentSettings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|component
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"] must specify either an analyzer type, or a tokenizer"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"custom"
argument_list|)
condition|)
block|{
name|factory
operator|=
operator|(
name|T
operator|)
operator|new
name|CustomAnalyzerProvider
argument_list|(
name|settings
argument_list|,
name|name
argument_list|,
name|currentSettings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|factories
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|factory
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|component
operator|==
name|Component
operator|.
name|NORMALIZER
condition|)
block|{
if|if
condition|(
name|typeName
operator|==
literal|null
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"custom"
argument_list|)
condition|)
block|{
name|T
name|factory
init|=
operator|(
name|T
operator|)
operator|new
name|CustomNormalizerProvider
argument_list|(
name|settings
argument_list|,
name|name
argument_list|,
name|currentSettings
argument_list|)
decl_stmt|;
name|factories
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|factory
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|type
init|=
name|getAnalysisProvider
argument_list|(
name|component
argument_list|,
name|providerMap
argument_list|,
name|name
argument_list|,
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown "
operator|+
name|component
operator|+
literal|" type ["
operator|+
name|typeName
operator|+
literal|"] for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|T
name|factory
init|=
name|type
operator|.
name|get
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|name
argument_list|,
name|currentSettings
argument_list|)
decl_stmt|;
name|factories
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
comment|// go over the char filters in the bindings and register the ones that are not configured
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
argument_list|>
name|entry
range|:
name|providerMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|provider
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// we don't want to re-register one that already exists
if|if
condition|(
name|settingsMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// check, if it requires settings, then don't register it, we know default has no settings...
if|if
condition|(
name|provider
operator|.
name|requiresAnalysisSettings
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|defaultProvider
init|=
name|defaultInstance
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|T
name|instance
decl_stmt|;
if|if
condition|(
name|defaultProvider
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
name|provider
operator|.
name|get
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|name
argument_list|,
name|defaultSettings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|instance
operator|=
name|defaultProvider
operator|.
name|get
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|name
argument_list|,
name|defaultSettings
argument_list|)
expr_stmt|;
block|}
name|factories
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
argument_list|>
name|entry
range|:
name|defaultInstance
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|provider
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|factories
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
specifier|final
name|T
name|instance
init|=
name|provider
operator|.
name|get
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|name
argument_list|,
name|defaultSettings
argument_list|)
decl_stmt|;
if|if
condition|(
name|factories
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
name|factories
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|factories
return|;
block|}
DECL|method|getAnalysisProvider
specifier|private
parameter_list|<
name|T
parameter_list|>
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|getAnalysisProvider
parameter_list|(
name|Component
name|component
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
argument_list|>
name|providerMap
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|component
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"] must specify either an analyzer type, or a tokenizer"
argument_list|)
throw|;
block|}
name|AnalysisProvider
argument_list|<
name|T
argument_list|>
name|type
init|=
name|providerMap
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown "
operator|+
name|component
operator|+
literal|" type ["
operator|+
name|typeName
operator|+
literal|"] for ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|type
return|;
block|}
DECL|class|PrebuiltAnalysis
specifier|private
specifier|static
class|class
name|PrebuiltAnalysis
implements|implements
name|Closeable
block|{
DECL|field|analyzerProviderFactories
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|analyzerProviderFactories
decl_stmt|;
DECL|field|tokenizerFactories
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
argument_list|>
name|tokenizerFactories
decl_stmt|;
DECL|field|tokenFilterFactories
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
argument_list|>
name|tokenFilterFactories
decl_stmt|;
DECL|field|charFilterFactories
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
argument_list|>
name|charFilterFactories
decl_stmt|;
DECL|method|PrebuiltAnalysis
specifier|private
name|PrebuiltAnalysis
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltAnalyzerProviderFactory
argument_list|>
name|analyzerProviderFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltTokenizerFactoryFactory
argument_list|>
name|tokenizerFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltTokenFilterFactoryFactory
argument_list|>
name|tokenFilterFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltCharFilterFactoryFactory
argument_list|>
name|charFilterFactories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Analyzers
for|for
control|(
name|PreBuiltAnalyzers
name|preBuiltAnalyzerEnum
range|:
name|PreBuiltAnalyzers
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|preBuiltAnalyzerEnum
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
name|name
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
name|preBuiltAnalyzerEnum
operator|.
name|getAnalyzer
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Tokenizers
for|for
control|(
name|PreBuiltTokenizers
name|preBuiltTokenizer
range|:
name|PreBuiltTokenizers
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|preBuiltTokenizer
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
name|preBuiltTokenizer
operator|.
name|getTokenizerFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Tokenizer aliases
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"nGram"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
name|PreBuiltTokenizers
operator|.
name|NGRAM
operator|.
name|getTokenizerFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"edgeNGram"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
name|PreBuiltTokenizers
operator|.
name|EDGE_NGRAM
operator|.
name|getTokenizerFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"PathHierarchy"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
name|PreBuiltTokenizers
operator|.
name|PATH_HIERARCHY
operator|.
name|getTokenizerFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Token filters
for|for
control|(
name|PreBuiltTokenFilters
name|preBuiltTokenFilter
range|:
name|PreBuiltTokenFilters
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|preBuiltTokenFilter
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
name|preBuiltTokenFilter
operator|.
name|getTokenFilterFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Token filter aliases
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"nGram"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
name|PreBuiltTokenFilters
operator|.
name|NGRAM
operator|.
name|getTokenFilterFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"edgeNGram"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
name|PreBuiltTokenFilters
operator|.
name|EDGE_NGRAM
operator|.
name|getTokenFilterFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Char Filters
for|for
control|(
name|PreBuiltCharFilters
name|preBuiltCharFilter
range|:
name|PreBuiltCharFilters
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|preBuiltCharFilter
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|charFilterFactories
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PreBuiltCharFilterFactoryFactory
argument_list|(
name|preBuiltCharFilter
operator|.
name|getCharFilterFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Char filter aliases
name|charFilterFactories
operator|.
name|put
argument_list|(
literal|"htmlStrip"
argument_list|,
operator|new
name|PreBuiltCharFilterFactoryFactory
argument_list|(
name|PreBuiltCharFilters
operator|.
name|HTML_STRIP
operator|.
name|getCharFilterFactory
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|analyzerProviderFactories
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|analyzerProviderFactories
argument_list|)
expr_stmt|;
name|this
operator|.
name|charFilterFactories
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|charFilterFactories
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenFilterFactories
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tokenFilterFactories
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenizerFactories
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tokenizerFactories
argument_list|)
expr_stmt|;
block|}
DECL|method|getCharFilterFactory
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
name|getCharFilterFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|charFilterFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getTokenFilterFactory
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
name|getTokenFilterFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tokenFilterFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getTokenizerFactory
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
name|getTokenizerFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tokenizerFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getAnalyzerProvider
specifier|public
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|getAnalyzerProvider
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|analyzerProviderFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|analyzer
name|Analyzer
name|analyzer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PreBuiltAnalyzerProviderFactory
name|analyzerProviderFactory
init|=
operator|(
name|PreBuiltAnalyzerProviderFactory
operator|)
name|analyzerProviderFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzerProviderFactory
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|analyzerProviderFactory
operator|.
name|analyzer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|analyzerProviderFactories
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
parameter_list|(
name|a
parameter_list|)
lambda|->
operator|(
operator|(
name|PreBuiltAnalyzerProviderFactory
operator|)
name|a
operator|)
operator|.
name|analyzer
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|build
specifier|public
name|IndexAnalyzers
name|build
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|analyzerProviders
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|normalizerProviders
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TokenizerFactory
argument_list|>
name|tokenizerFactoryFactories
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CharFilterFactory
argument_list|>
name|charFilterFactoryFactories
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TokenFilterFactory
argument_list|>
name|tokenFilterFactoryFactories
parameter_list|)
block|{
name|Index
name|index
init|=
name|indexSettings
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|analyzerProviders
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|analyzerProviders
argument_list|)
expr_stmt|;
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|indexSettings
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
name|DeprecationLogger
name|deprecationLogger
init|=
operator|new
name|DeprecationLogger
argument_list|(
name|logger
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|analyzerAliases
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|analyzers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|normalizers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|analyzerProviders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|processAnalyzerFactory
argument_list|(
name|deprecationLogger
argument_list|,
name|indexSettings
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|analyzerAliases
argument_list|,
name|analyzers
argument_list|,
name|tokenFilterFactoryFactories
argument_list|,
name|charFilterFactoryFactories
argument_list|,
name|tokenizerFactoryFactories
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|normalizerProviders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|processNormalizerFactory
argument_list|(
name|deprecationLogger
argument_list|,
name|indexSettings
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|normalizers
argument_list|,
name|tokenFilterFactoryFactories
argument_list|,
name|charFilterFactoryFactories
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|entry
range|:
name|analyzerAliases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|analyzers
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|&&
operator|(
literal|"default"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
literal|"default_search"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
literal|"default_search_quoted"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"already registered analyzer with name: "
operator|+
name|key
argument_list|)
throw|;
block|}
else|else
block|{
name|NamedAnalyzer
name|configured
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|analyzers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|configured
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|analyzers
operator|.
name|containsKey
argument_list|(
literal|"default"
argument_list|)
condition|)
block|{
name|processAnalyzerFactory
argument_list|(
name|deprecationLogger
argument_list|,
name|indexSettings
argument_list|,
literal|"default"
argument_list|,
operator|new
name|StandardAnalyzerProvider
argument_list|(
name|indexSettings
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|,
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
argument_list|,
name|analyzerAliases
argument_list|,
name|analyzers
argument_list|,
name|tokenFilterFactoryFactories
argument_list|,
name|charFilterFactoryFactories
argument_list|,
name|tokenizerFactoryFactories
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|analyzers
operator|.
name|containsKey
argument_list|(
literal|"default_search"
argument_list|)
condition|)
block|{
name|analyzers
operator|.
name|put
argument_list|(
literal|"default_search"
argument_list|,
name|analyzers
operator|.
name|get
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|analyzers
operator|.
name|containsKey
argument_list|(
literal|"default_search_quoted"
argument_list|)
condition|)
block|{
name|analyzers
operator|.
name|put
argument_list|(
literal|"default_search_quoted"
argument_list|,
name|analyzers
operator|.
name|get
argument_list|(
literal|"default_search"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NamedAnalyzer
name|defaultAnalyzer
init|=
name|analyzers
operator|.
name|get
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultAnalyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no default analyzer configured"
argument_list|)
throw|;
block|}
if|if
condition|(
name|analyzers
operator|.
name|containsKey
argument_list|(
literal|"default_index"
argument_list|)
condition|)
block|{
specifier|final
name|Version
name|createdVersion
init|=
name|indexSettings
operator|.
name|getIndexVersionCreated
argument_list|()
decl_stmt|;
if|if
condition|(
name|createdVersion
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"setting [index.analysis.analyzer.default_index] is not supported anymore, use [index.analysis.analyzer.default] instead for index ["
operator|+
name|index
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
else|else
block|{
name|deprecationLogger
operator|.
name|deprecated
argument_list|(
literal|"setting [index.analysis.analyzer.default_index] is deprecated, use [index.analysis.analyzer.default] instead for index [{}]"
argument_list|,
name|index
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|NamedAnalyzer
name|defaultIndexAnalyzer
init|=
name|analyzers
operator|.
name|containsKey
argument_list|(
literal|"default_index"
argument_list|)
condition|?
name|analyzers
operator|.
name|get
argument_list|(
literal|"default_index"
argument_list|)
else|:
name|defaultAnalyzer
decl_stmt|;
name|NamedAnalyzer
name|defaultSearchAnalyzer
init|=
name|analyzers
operator|.
name|containsKey
argument_list|(
literal|"default_search"
argument_list|)
condition|?
name|analyzers
operator|.
name|get
argument_list|(
literal|"default_search"
argument_list|)
else|:
name|defaultAnalyzer
decl_stmt|;
name|NamedAnalyzer
name|defaultSearchQuoteAnalyzer
init|=
name|analyzers
operator|.
name|containsKey
argument_list|(
literal|"default_search_quote"
argument_list|)
condition|?
name|analyzers
operator|.
name|get
argument_list|(
literal|"default_search_quote"
argument_list|)
else|:
name|defaultSearchAnalyzer
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|analyzer
range|:
name|analyzers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|analyzer
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"analyzer name must not start with '_'. got \""
operator|+
name|analyzer
operator|.
name|getKey
argument_list|()
operator|+
literal|"\""
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|IndexAnalyzers
argument_list|(
name|indexSettings
argument_list|,
name|defaultIndexAnalyzer
argument_list|,
name|defaultSearchAnalyzer
argument_list|,
name|defaultSearchQuoteAnalyzer
argument_list|,
name|unmodifiableMap
argument_list|(
name|analyzers
argument_list|)
argument_list|,
name|unmodifiableMap
argument_list|(
name|normalizers
argument_list|)
argument_list|)
return|;
block|}
DECL|method|processAnalyzerFactory
specifier|private
name|void
name|processAnalyzerFactory
parameter_list|(
name|DeprecationLogger
name|deprecationLogger
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|,
name|String
name|name
parameter_list|,
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
name|analyzerFactory
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|analyzerAliases
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|analyzers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TokenFilterFactory
argument_list|>
name|tokenFilters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CharFilterFactory
argument_list|>
name|charFilters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TokenizerFactory
argument_list|>
name|tokenizers
parameter_list|)
block|{
comment|/*          * Lucene defaults positionIncrementGap to 0 in all analyzers but          * Elasticsearch defaults them to 0 only before version 2.0          * and 100 afterwards so we override the positionIncrementGap if it          * doesn't match here.          */
name|int
name|overridePositionIncrementGap
init|=
name|TextFieldMapper
operator|.
name|Defaults
operator|.
name|POSITION_INCREMENT_GAP
decl_stmt|;
if|if
condition|(
name|analyzerFactory
operator|instanceof
name|CustomAnalyzerProvider
condition|)
block|{
operator|(
operator|(
name|CustomAnalyzerProvider
operator|)
name|analyzerFactory
operator|)
operator|.
name|build
argument_list|(
name|tokenizers
argument_list|,
name|charFilters
argument_list|,
name|tokenFilters
argument_list|)
expr_stmt|;
comment|/*              * Custom analyzers already default to the correct, version              * dependent positionIncrementGap and the user is be able to              * configure the positionIncrementGap directly on the analyzer so              * we disable overriding the positionIncrementGap to preserve the              * user's setting.              */
name|overridePositionIncrementGap
operator|=
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
name|Analyzer
name|analyzerF
init|=
name|analyzerFactory
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|analyzerF
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"analyzer ["
operator|+
name|analyzerFactory
operator|.
name|name
argument_list|()
operator|+
literal|"] created null analyzer"
argument_list|)
throw|;
block|}
name|NamedAnalyzer
name|analyzer
decl_stmt|;
if|if
condition|(
name|analyzerF
operator|instanceof
name|NamedAnalyzer
condition|)
block|{
comment|// if we got a named analyzer back, use it...
name|analyzer
operator|=
operator|(
name|NamedAnalyzer
operator|)
name|analyzerF
expr_stmt|;
if|if
condition|(
name|overridePositionIncrementGap
operator|>=
literal|0
operator|&&
name|analyzer
operator|.
name|getPositionIncrementGap
argument_list|(
name|analyzer
operator|.
name|name
argument_list|()
argument_list|)
operator|!=
name|overridePositionIncrementGap
condition|)
block|{
comment|// unless the positionIncrementGap needs to be overridden
name|analyzer
operator|=
operator|new
name|NamedAnalyzer
argument_list|(
name|analyzer
argument_list|,
name|overridePositionIncrementGap
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|analyzer
operator|=
operator|new
name|NamedAnalyzer
argument_list|(
name|name
argument_list|,
name|analyzerFactory
operator|.
name|scope
argument_list|()
argument_list|,
name|analyzerF
argument_list|,
name|overridePositionIncrementGap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|analyzers
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"already registered analyzer with name: "
operator|+
name|name
argument_list|)
throw|;
block|}
name|analyzers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
comment|// TODO: remove alias support completely when we no longer support pre 5.0 indices
specifier|final
name|String
name|analyzerAliasKey
init|=
literal|"index.analysis.analyzer."
operator|+
name|analyzerFactory
operator|.
name|name
argument_list|()
operator|+
literal|".alias"
decl_stmt|;
if|if
condition|(
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
name|analyzerAliasKey
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|indexSettings
operator|.
name|getIndexVersionCreated
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_0_0_beta1
argument_list|)
condition|)
block|{
comment|// do not allow alias creation if the index was created on or after v5.0 alpha6
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"setting ["
operator|+
name|analyzerAliasKey
operator|+
literal|"] is not supported"
argument_list|)
throw|;
block|}
comment|// the setting is now removed but we only support it for loading indices created before v5.0
name|deprecationLogger
operator|.
name|deprecated
argument_list|(
literal|"setting [{}] is only allowed on index [{}] because it was created before 5.x; "
operator|+
literal|"analyzer aliases can no longer be created on new indices."
argument_list|,
name|analyzerAliasKey
argument_list|,
name|indexSettings
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsArray
argument_list|(
name|analyzerAliasKey
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliases
control|)
block|{
if|if
condition|(
name|analyzerAliases
operator|.
name|putIfAbsent
argument_list|(
name|alias
argument_list|,
name|analyzer
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"alias ["
operator|+
name|alias
operator|+
literal|"] is already used by ["
operator|+
name|analyzerAliases
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|processNormalizerFactory
specifier|private
name|void
name|processNormalizerFactory
parameter_list|(
name|DeprecationLogger
name|deprecationLogger
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|,
name|String
name|name
parameter_list|,
name|AnalyzerProvider
argument_list|<
name|?
argument_list|>
name|normalizerFactory
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NamedAnalyzer
argument_list|>
name|normalizers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TokenFilterFactory
argument_list|>
name|tokenFilters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CharFilterFactory
argument_list|>
name|charFilters
parameter_list|)
block|{
if|if
condition|(
name|normalizerFactory
operator|instanceof
name|CustomNormalizerProvider
condition|)
block|{
operator|(
operator|(
name|CustomNormalizerProvider
operator|)
name|normalizerFactory
operator|)
operator|.
name|build
argument_list|(
name|charFilters
argument_list|,
name|tokenFilters
argument_list|)
expr_stmt|;
block|}
name|Analyzer
name|normalizerF
init|=
name|normalizerFactory
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|normalizerF
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"normalizer ["
operator|+
name|normalizerFactory
operator|.
name|name
argument_list|()
operator|+
literal|"] created null normalizer"
argument_list|)
throw|;
block|}
name|NamedAnalyzer
name|normalizer
init|=
operator|new
name|NamedAnalyzer
argument_list|(
name|name
argument_list|,
name|normalizerFactory
operator|.
name|scope
argument_list|()
argument_list|,
name|normalizerF
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalizers
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"already registered analyzer with name: "
operator|+
name|name
argument_list|)
throw|;
block|}
name|normalizers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|normalizer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

