begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterGraphFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterFilter
operator|.
name|CATENATE_ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterFilter
operator|.
name|CATENATE_NUMBERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterFilter
operator|.
name|CATENATE_WORDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterFilter
operator|.
name|GENERATE_NUMBER_PARTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterFilter
operator|.
name|GENERATE_WORD_PARTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterFilter
operator|.
name|PRESERVE_ORIGINAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterFilter
operator|.
name|SPLIT_ON_CASE_CHANGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterFilter
operator|.
name|SPLIT_ON_NUMERICS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|WordDelimiterFilter
operator|.
name|STEM_ENGLISH_POSSESSIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|WordDelimiterTokenFilterFactory
operator|.
name|parseTypes
import|;
end_import

begin_class
DECL|class|WordDelimiterGraphTokenFilterFactory
specifier|public
class|class
name|WordDelimiterGraphTokenFilterFactory
extends|extends
name|AbstractTokenFilterFactory
block|{
DECL|field|charTypeTable
specifier|private
specifier|final
name|byte
index|[]
name|charTypeTable
decl_stmt|;
DECL|field|flags
specifier|private
specifier|final
name|int
name|flags
decl_stmt|;
DECL|field|protoWords
specifier|private
specifier|final
name|CharArraySet
name|protoWords
decl_stmt|;
DECL|method|WordDelimiterGraphTokenFilterFactory
specifier|public
name|WordDelimiterGraphTokenFilterFactory
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Environment
name|env
parameter_list|,
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
expr_stmt|;
comment|// Sample Format for the type table:
comment|// $ => DIGIT
comment|// % => DIGIT
comment|// . => DIGIT
comment|// \u002C => DIGIT
comment|// \u200D => ALPHANUM
name|List
argument_list|<
name|String
argument_list|>
name|charTypeTableValues
init|=
name|Analysis
operator|.
name|getWordList
argument_list|(
name|env
argument_list|,
name|settings
argument_list|,
literal|"type_table"
argument_list|)
decl_stmt|;
if|if
condition|(
name|charTypeTableValues
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|charTypeTable
operator|=
name|WordDelimiterIterator
operator|.
name|DEFAULT_WORD_DELIM_TABLE
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|charTypeTable
operator|=
name|parseTypes
argument_list|(
name|charTypeTableValues
argument_list|)
expr_stmt|;
block|}
name|int
name|flags
init|=
literal|0
decl_stmt|;
comment|// If set, causes parts of words to be generated: "PowerShot" => "Power" "Shot"
name|flags
operator||=
name|getFlag
argument_list|(
name|GENERATE_WORD_PARTS
argument_list|,
name|settings
argument_list|,
literal|"generate_word_parts"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// If set, causes number subwords to be generated: "500-42" => "500" "42"
name|flags
operator||=
name|getFlag
argument_list|(
name|GENERATE_NUMBER_PARTS
argument_list|,
name|settings
argument_list|,
literal|"generate_number_parts"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// 1, causes maximum runs of word parts to be catenated: "wi-fi" => "wifi"
name|flags
operator||=
name|getFlag
argument_list|(
name|CATENATE_WORDS
argument_list|,
name|settings
argument_list|,
literal|"catenate_words"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// If set, causes maximum runs of number parts to be catenated: "500-42" => "50042"
name|flags
operator||=
name|getFlag
argument_list|(
name|CATENATE_NUMBERS
argument_list|,
name|settings
argument_list|,
literal|"catenate_numbers"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// If set, causes all subword parts to be catenated: "wi-fi-4000" => "wifi4000"
name|flags
operator||=
name|getFlag
argument_list|(
name|CATENATE_ALL
argument_list|,
name|settings
argument_list|,
literal|"catenate_all"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 1, causes "PowerShot" to be two tokens; ("Power-Shot" remains two parts regards)
name|flags
operator||=
name|getFlag
argument_list|(
name|SPLIT_ON_CASE_CHANGE
argument_list|,
name|settings
argument_list|,
literal|"split_on_case_change"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// If set, includes original words in subwords: "500-42" => "500" "42" "500-42"
name|flags
operator||=
name|getFlag
argument_list|(
name|PRESERVE_ORIGINAL
argument_list|,
name|settings
argument_list|,
literal|"preserve_original"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 1, causes "j2se" to be three tokens; "j" "2" "se"
name|flags
operator||=
name|getFlag
argument_list|(
name|SPLIT_ON_NUMERICS
argument_list|,
name|settings
argument_list|,
literal|"split_on_numerics"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// If set, causes trailing "'s" to be removed for each subword: "O'Neil's" => "O", "Neil"
name|flags
operator||=
name|getFlag
argument_list|(
name|STEM_ENGLISH_POSSESSIVE
argument_list|,
name|settings
argument_list|,
literal|"stem_english_possessive"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// If not null is the set of tokens to protect from being delimited
name|Set
argument_list|<
name|?
argument_list|>
name|protectedWords
init|=
name|Analysis
operator|.
name|getWordSet
argument_list|(
name|env
argument_list|,
name|indexSettings
operator|.
name|getIndexVersionCreated
argument_list|()
argument_list|,
name|settings
argument_list|,
literal|"protected_words"
argument_list|)
decl_stmt|;
name|this
operator|.
name|protoWords
operator|=
name|protectedWords
operator|==
literal|null
condition|?
literal|null
else|:
name|CharArraySet
operator|.
name|copy
argument_list|(
name|protectedWords
argument_list|)
expr_stmt|;
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|WordDelimiterGraphFilter
argument_list|(
name|tokenStream
argument_list|,
name|charTypeTable
argument_list|,
name|flags
argument_list|,
name|protoWords
argument_list|)
return|;
block|}
DECL|method|getFlag
specifier|private
name|int
name|getFlag
parameter_list|(
name|int
name|flag
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
condition|)
block|{
return|return
name|flag
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

