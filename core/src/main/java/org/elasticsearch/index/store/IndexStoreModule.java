begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|IndexStoreModule
specifier|public
class|class
name|IndexStoreModule
extends|extends
name|AbstractModule
block|{
DECL|field|STORE_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|STORE_TYPE
init|=
literal|"index.store.type"
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|storeTypes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|IndexStore
argument_list|>
argument_list|>
name|storeTypes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|enum|Type
specifier|public
enum|enum
name|Type
block|{
DECL|enum constant|NIOFS
name|NIOFS
block|,
DECL|enum constant|MMAPFS
name|MMAPFS
block|,
DECL|enum constant|SIMPLEFS
name|SIMPLEFS
block|,
DECL|enum constant|FS
name|FS
block|,
DECL|enum constant|DEFAULT
name|DEFAULT
block|;
DECL|method|getSettingsKey
specifier|public
name|String
name|getSettingsKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
comment|/**          * Returns true iff this settings matches the type.          */
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|setting
parameter_list|)
block|{
return|return
name|getSettingsKey
argument_list|()
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
return|;
block|}
block|}
DECL|method|IndexStoreModule
specifier|public
name|IndexStoreModule
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
DECL|method|addIndexStore
specifier|public
name|void
name|addIndexStore
parameter_list|(
name|String
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|IndexStore
argument_list|>
name|clazz
parameter_list|)
block|{
name|storeTypes
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|isBuiltinType
specifier|private
specifier|static
name|boolean
name|isBuiltinType
parameter_list|(
name|String
name|storeType
parameter_list|)
block|{
for|for
control|(
name|Type
name|type
range|:
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|match
argument_list|(
name|storeType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
specifier|final
name|String
name|storeType
init|=
name|settings
operator|.
name|get
argument_list|(
name|STORE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeType
operator|==
literal|null
operator|||
name|isBuiltinType
argument_list|(
name|storeType
argument_list|)
condition|)
block|{
name|bind
argument_list|(
name|IndexStore
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
extends|extends
name|IndexStore
argument_list|>
name|clazz
init|=
name|storeTypes
operator|.
name|get
argument_list|(
name|storeType
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown store type ["
operator|+
name|storeType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|bind
argument_list|(
name|IndexStore
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|clazz
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

