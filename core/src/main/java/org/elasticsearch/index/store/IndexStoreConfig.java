begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|StoreRateLimiting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_comment
comment|/**  * IndexStoreConfig encapsulates node / cluster level configuration for index level {@link IndexStore} instances.  * For instance it maintains the node level rate limiter configuration: updates to the cluster that disable or enable  * {@value #INDICES_STORE_THROTTLE_TYPE} or {@value #INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC} are reflected immediately  * on all referencing {@link IndexStore} instances  */
end_comment

begin_class
DECL|class|IndexStoreConfig
specifier|public
class|class
name|IndexStoreConfig
implements|implements
name|NodeSettingsService
operator|.
name|Listener
block|{
DECL|field|DEFAULT_THROTTLE
specifier|private
specifier|static
specifier|final
name|ByteSizeValue
name|DEFAULT_THROTTLE
init|=
operator|new
name|ByteSizeValue
argument_list|(
literal|10240
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
decl_stmt|;
comment|/**      * Configures the node / cluster level throttle type. See {@link StoreRateLimiting.Type}.      */
DECL|field|INDICES_STORE_THROTTLE_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|INDICES_STORE_THROTTLE_TYPE
init|=
literal|"indices.store.throttle.type"
decl_stmt|;
comment|/**      * Configures the node / cluster level throttle intensity. The default is<tt>10240 MB</tt>      */
DECL|field|INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC
specifier|public
specifier|static
specifier|final
name|String
name|INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC
init|=
literal|"indices.store.throttle.max_bytes_per_sec"
decl_stmt|;
DECL|field|rateLimitingType
specifier|private
specifier|volatile
name|String
name|rateLimitingType
decl_stmt|;
DECL|field|rateLimitingThrottle
specifier|private
specifier|volatile
name|ByteSizeValue
name|rateLimitingThrottle
decl_stmt|;
DECL|field|rateLimiting
specifier|private
specifier|final
name|StoreRateLimiting
name|rateLimiting
init|=
operator|new
name|StoreRateLimiting
argument_list|()
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|IndexStoreConfig
specifier|public
name|IndexStoreConfig
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|logger
operator|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|IndexStoreConfig
operator|.
name|class
argument_list|,
name|settings
argument_list|)
expr_stmt|;
comment|// we don't limit by default (we default to CMS's auto throttle instead):
name|this
operator|.
name|rateLimitingType
operator|=
name|settings
operator|.
name|get
argument_list|(
literal|"indices.store.throttle.type"
argument_list|,
name|StoreRateLimiting
operator|.
name|Type
operator|.
name|NONE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|rateLimiting
operator|.
name|setType
argument_list|(
name|rateLimitingType
argument_list|)
expr_stmt|;
name|this
operator|.
name|rateLimitingThrottle
operator|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
literal|"indices.store.throttle.max_bytes_per_sec"
argument_list|,
name|DEFAULT_THROTTLE
argument_list|)
expr_stmt|;
name|rateLimiting
operator|.
name|setMaxRate
argument_list|(
name|rateLimitingThrottle
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using indices.store.throttle.type [{}], with index.store.throttle.max_bytes_per_sec [{}]"
argument_list|,
name|rateLimitingType
argument_list|,
name|rateLimitingThrottle
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the node level rate limiter      */
DECL|method|getNodeRateLimiter
specifier|public
name|StoreRateLimiting
name|getNodeRateLimiter
parameter_list|()
block|{
return|return
name|rateLimiting
return|;
block|}
annotation|@
name|Override
DECL|method|onRefreshSettings
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|String
name|rateLimitingType
init|=
name|settings
operator|.
name|get
argument_list|(
name|INDICES_STORE_THROTTLE_TYPE
argument_list|,
name|this
operator|.
name|rateLimitingType
argument_list|)
decl_stmt|;
comment|// try and parse the type
name|StoreRateLimiting
operator|.
name|Type
operator|.
name|fromString
argument_list|(
name|rateLimitingType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rateLimitingType
operator|.
name|equals
argument_list|(
name|this
operator|.
name|rateLimitingType
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating indices.store.throttle.type from [{}] to [{}]"
argument_list|,
name|this
operator|.
name|rateLimitingType
argument_list|,
name|rateLimitingType
argument_list|)
expr_stmt|;
name|this
operator|.
name|rateLimitingType
operator|=
name|rateLimitingType
expr_stmt|;
name|this
operator|.
name|rateLimiting
operator|.
name|setType
argument_list|(
name|rateLimitingType
argument_list|)
expr_stmt|;
block|}
name|ByteSizeValue
name|rateLimitingThrottle
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC
argument_list|,
name|this
operator|.
name|rateLimitingThrottle
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rateLimitingThrottle
operator|.
name|equals
argument_list|(
name|this
operator|.
name|rateLimitingThrottle
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating indices.store.throttle.max_bytes_per_sec from [{}] to [{}], note, type is [{}]"
argument_list|,
name|this
operator|.
name|rateLimitingThrottle
argument_list|,
name|rateLimitingThrottle
argument_list|,
name|this
operator|.
name|rateLimitingType
argument_list|)
expr_stmt|;
name|this
operator|.
name|rateLimitingThrottle
operator|=
name|rateLimitingThrottle
expr_stmt|;
name|this
operator|.
name|rateLimiting
operator|.
name|setMaxRate
argument_list|(
name|rateLimitingThrottle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

