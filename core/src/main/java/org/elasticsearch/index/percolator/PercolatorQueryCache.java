begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntObjectHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredFieldVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexWarmer
operator|.
name|TerminationHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Searcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|SourceFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|PercolatorQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
operator|.
name|PercolatorFieldMapper
operator|.
name|LEGACY_TYPE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
operator|.
name|PercolatorFieldMapper
operator|.
name|PercolatorFieldType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
operator|.
name|PercolatorFieldMapper
operator|.
name|parseQuery
import|;
end_import

begin_class
DECL|class|PercolatorQueryCache
specifier|public
specifier|final
class|class
name|PercolatorQueryCache
extends|extends
name|AbstractIndexComponent
implements|implements
name|Closeable
implements|,
name|LeafReader
operator|.
name|CoreClosedListener
implements|,
name|PercolatorQuery
operator|.
name|QueryRegistry
block|{
DECL|field|INDEX_MAP_UNMAPPED_FIELDS_AS_STRING_SETTING
specifier|public
specifier|final
specifier|static
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|INDEX_MAP_UNMAPPED_FIELDS_AS_STRING_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"index.percolator.map_unmapped_fields_as_string"
argument_list|,
literal|false
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|IndexScope
argument_list|)
decl_stmt|;
DECL|field|QUERY_BUILDER_CONTENT_TYPE
specifier|public
specifier|final
specifier|static
name|XContentType
name|QUERY_BUILDER_CONTENT_TYPE
init|=
name|XContentType
operator|.
name|SMILE
decl_stmt|;
DECL|field|queryShardContextSupplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|QueryShardContext
argument_list|>
name|queryShardContextSupplier
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|Object
argument_list|,
name|QueriesLeaf
argument_list|>
name|cache
decl_stmt|;
DECL|field|mapUnmappedFieldsAsString
specifier|private
specifier|final
name|boolean
name|mapUnmappedFieldsAsString
decl_stmt|;
DECL|method|PercolatorQueryCache
specifier|public
name|PercolatorQueryCache
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Supplier
argument_list|<
name|QueryShardContext
argument_list|>
name|queryShardContextSupplier
parameter_list|)
block|{
name|super
argument_list|(
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryShardContextSupplier
operator|=
name|queryShardContextSupplier
expr_stmt|;
name|cache
operator|=
name|CacheBuilder
operator|.
expr|<
name|Object
operator|,
name|QueriesLeaf
operator|>
name|builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|mapUnmappedFieldsAsString
operator|=
name|indexSettings
operator|.
name|getValue
argument_list|(
name|INDEX_MAP_UNMAPPED_FIELDS_AS_STRING_SETTING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueries
specifier|public
name|Leaf
name|getQueries
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
block|{
name|QueriesLeaf
name|percolatorQueries
init|=
name|cache
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|percolatorQueries
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"queries not loaded, queries should be have been preloaded during index warming..."
argument_list|)
throw|;
block|}
return|return
name|percolatorQueries
return|;
block|}
DECL|method|createListener
specifier|public
name|IndexWarmer
operator|.
name|Listener
name|createListener
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|)
block|{
return|return
operator|new
name|IndexWarmer
operator|.
name|Listener
argument_list|()
block|{
specifier|final
name|Executor
name|executor
init|=
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|WARMER
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|TerminationHandle
name|warmReader
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
name|Searcher
name|searcher
parameter_list|)
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|LeafReaderContext
name|ctx
range|:
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
if|if
condition|(
name|cache
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|executor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|QueriesLeaf
name|queries
init|=
name|loadQueries
argument_list|(
name|ctx
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
name|queries
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|trace
argument_list|(
literal|"loading percolator queries took [{}]"
argument_list|,
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|indexShard
operator|.
name|warmerService
argument_list|()
operator|.
name|logger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"failed to load percolator queries"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
parameter_list|()
lambda|->
name|latch
operator|.
name|await
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|loadQueries
name|QueriesLeaf
name|loadQueries
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|)
throws|throws
name|IOException
block|{
name|Version
name|indexVersionCreated
init|=
name|indexShard
operator|.
name|indexSettings
argument_list|()
operator|.
name|getIndexVersionCreated
argument_list|()
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|indexShard
operator|.
name|mapperService
argument_list|()
decl_stmt|;
name|LeafReader
name|leafReader
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
name|ShardId
name|shardId
init|=
name|ShardUtils
operator|.
name|extractShardId
argument_list|(
name|leafReader
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't resolve shard id"
argument_list|)
throw|;
block|}
if|if
condition|(
name|indexSettings
operator|.
name|getIndex
argument_list|()
operator|.
name|equals
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// percolator cache insanity
name|String
name|message
init|=
literal|"Trying to load queries for index "
operator|+
name|shardId
operator|.
name|getIndex
argument_list|()
operator|+
literal|" with cache of index "
operator|+
name|indexSettings
operator|.
name|getIndex
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|IntObjectHashMap
argument_list|<
name|Query
argument_list|>
name|queries
init|=
operator|new
name|IntObjectHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|legacyLoading
init|=
name|indexVersionCreated
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
decl_stmt|;
if|if
condition|(
name|legacyLoading
condition|)
block|{
name|PostingsEnum
name|postings
init|=
name|leafReader
operator|.
name|postings
argument_list|(
operator|new
name|Term
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|LEGACY_TYPE_NAME
argument_list|)
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
decl_stmt|;
if|if
condition|(
name|postings
operator|!=
literal|null
condition|)
block|{
name|LegacyQueryFieldVisitor
name|visitor
init|=
operator|new
name|LegacyQueryFieldVisitor
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|docId
init|=
name|postings
operator|.
name|nextDoc
argument_list|()
init|;
name|docId
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|docId
operator|=
name|postings
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|leafReader
operator|.
name|document
argument_list|(
name|docId
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|queries
operator|.
name|put
argument_list|(
name|docId
argument_list|,
name|parseLegacyPercolatorDocument
argument_list|(
name|docId
argument_list|,
name|visitor
operator|.
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|source
operator|=
literal|null
expr_stmt|;
comment|// reset
block|}
block|}
block|}
else|else
block|{
comment|// Each type can have one percolator field mapper,
comment|// So for each type we check if there is a percolator field mapper
comment|// and parse all the queries for the documents of that type.
name|IndexSearcher
name|indexSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|leafReader
argument_list|)
decl_stmt|;
for|for
control|(
name|DocumentMapper
name|documentMapper
range|:
name|mapperService
operator|.
name|docMappers
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|Weight
name|queryWeight
init|=
name|indexSearcher
operator|.
name|createNormalizedWeight
argument_list|(
name|documentMapper
operator|.
name|typeFilter
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldMapper
name|fieldMapper
range|:
name|documentMapper
operator|.
name|mappers
argument_list|()
control|)
block|{
if|if
condition|(
name|fieldMapper
operator|instanceof
name|PercolatorFieldMapper
condition|)
block|{
name|PercolatorFieldType
name|fieldType
init|=
operator|(
name|PercolatorFieldType
operator|)
name|fieldMapper
operator|.
name|fieldType
argument_list|()
decl_stmt|;
name|BinaryDocValues
name|binaryDocValues
init|=
name|leafReader
operator|.
name|getBinaryDocValues
argument_list|(
name|fieldType
operator|.
name|getQueryBuilderFieldName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binaryDocValues
operator|!=
literal|null
condition|)
block|{
comment|// use the same leaf reader context the indexSearcher is using too:
name|Scorer
name|scorer
init|=
name|queryWeight
operator|.
name|scorer
argument_list|(
name|leafReader
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|!=
literal|null
condition|)
block|{
name|DocIdSetIterator
name|iterator
init|=
name|scorer
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|docId
init|=
name|iterator
operator|.
name|nextDoc
argument_list|()
init|;
name|docId
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|docId
operator|=
name|iterator
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|BytesRef
name|qbSource
init|=
name|binaryDocValues
operator|.
name|get
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qbSource
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|queries
operator|.
name|put
argument_list|(
name|docId
argument_list|,
name|parseQueryBuilder
argument_list|(
name|docId
argument_list|,
name|qbSource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
break|break;
block|}
block|}
block|}
block|}
name|leafReader
operator|.
name|addCoreClosedListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
operator|new
name|QueriesLeaf
argument_list|(
name|shardId
argument_list|,
name|queries
argument_list|)
return|;
block|}
DECL|method|parseQueryBuilder
specifier|private
name|Query
name|parseQueryBuilder
parameter_list|(
name|int
name|docId
parameter_list|,
name|BytesRef
name|qbSource
parameter_list|)
block|{
name|XContent
name|xContent
init|=
name|QUERY_BUILDER_CONTENT_TYPE
operator|.
name|xContent
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentParser
name|sourceParser
init|=
name|xContent
operator|.
name|createParser
argument_list|(
name|qbSource
operator|.
name|bytes
argument_list|,
name|qbSource
operator|.
name|offset
argument_list|,
name|qbSource
operator|.
name|length
argument_list|)
init|)
block|{
name|QueryShardContext
name|context
init|=
name|queryShardContextSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|parseQuery
argument_list|(
name|context
argument_list|,
name|mapUnmappedFieldsAsString
argument_list|,
name|sourceParser
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PercolatorException
argument_list|(
name|index
argument_list|()
argument_list|,
literal|"failed to parse query builder for document  ["
operator|+
name|docId
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|parseLegacyPercolatorDocument
specifier|private
name|Query
name|parseLegacyPercolatorDocument
parameter_list|(
name|int
name|docId
parameter_list|,
name|BytesReference
name|source
parameter_list|)
block|{
try|try
init|(
name|XContentParser
name|sourceParser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
init|)
block|{
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|sourceParser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// move the START_OBJECT
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to parse query ["
operator|+
name|docId
operator|+
literal|"], not starting with OBJECT"
argument_list|)
throw|;
block|}
while|while
condition|(
operator|(
name|token
operator|=
name|sourceParser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|sourceParser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
literal|"query"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|QueryShardContext
name|context
init|=
name|queryShardContextSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|parseQuery
argument_list|(
name|context
argument_list|,
name|mapUnmappedFieldsAsString
argument_list|,
name|sourceParser
argument_list|)
return|;
block|}
else|else
block|{
name|sourceParser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|sourceParser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PercolatorException
argument_list|(
name|index
argument_list|()
argument_list|,
literal|"failed to parse query ["
operator|+
name|docId
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getStats
specifier|public
name|PercolatorQueryCacheStats
name|getStats
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|int
name|numberOfQueries
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QueriesLeaf
name|queries
range|:
name|cache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|shardId
operator|.
name|equals
argument_list|(
name|queries
operator|.
name|shardId
argument_list|)
condition|)
block|{
name|numberOfQueries
operator|+=
name|queries
operator|.
name|queries
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PercolatorQueryCacheStats
argument_list|(
name|numberOfQueries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onClose
specifier|public
name|void
name|onClose
parameter_list|(
name|Object
name|cacheKey
parameter_list|)
throws|throws
name|IOException
block|{
name|cache
operator|.
name|invalidate
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
DECL|class|LegacyQueryFieldVisitor
specifier|final
specifier|static
class|class
name|LegacyQueryFieldVisitor
extends|extends
name|StoredFieldVisitor
block|{
DECL|field|source
specifier|private
name|BytesArray
name|source
decl_stmt|;
annotation|@
name|Override
DECL|method|binaryField
specifier|public
name|void
name|binaryField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|source
operator|=
operator|new
name|BytesArray
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsField
specifier|public
name|Status
name|needsField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
return|return
name|Status
operator|.
name|STOP
return|;
block|}
if|if
condition|(
name|SourceFieldMapper
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
name|Status
operator|.
name|YES
return|;
block|}
else|else
block|{
return|return
name|Status
operator|.
name|NO
return|;
block|}
block|}
block|}
DECL|class|QueriesLeaf
specifier|final
specifier|static
class|class
name|QueriesLeaf
implements|implements
name|Leaf
block|{
DECL|field|shardId
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|queries
specifier|final
name|IntObjectHashMap
argument_list|<
name|Query
argument_list|>
name|queries
decl_stmt|;
DECL|method|QueriesLeaf
name|QueriesLeaf
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|IntObjectHashMap
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|queries
operator|=
name|queries
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|queries
operator|.
name|get
argument_list|(
name|docId
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

