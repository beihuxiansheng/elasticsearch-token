begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|metrics
operator|.
name|CounterMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|metrics
operator|.
name|MeanMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|IndexingOperationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|ShardIndexingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentTypeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|PercolatorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Each shard will have a percolator registry even if there isn't a {@link PercolatorService#TYPE_NAME} document type in the index.  * For shards with indices that have no {@link PercolatorService#TYPE_NAME} document type, this will hold no percolate queries.  *<p>  * Once a document type has been created, the real-time percolator will start to listen to write events and update the  * this registry with queries in real time.  */
end_comment

begin_class
DECL|class|PercolatorQueriesRegistry
specifier|public
specifier|final
class|class
name|PercolatorQueriesRegistry
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|Closeable
block|{
DECL|field|MAP_UNMAPPED_FIELDS_AS_STRING
specifier|public
specifier|final
name|String
name|MAP_UNMAPPED_FIELDS_AS_STRING
init|=
literal|"index.percolator.map_unmapped_fields_as_string"
decl_stmt|;
comment|// This is a shard level service, but these below are index level service:
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|indexFieldDataService
specifier|private
specifier|final
name|IndexFieldDataService
name|indexFieldDataService
decl_stmt|;
DECL|field|percolateQueries
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|BytesRef
argument_list|,
name|Query
argument_list|>
name|percolateQueries
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMapWithAggressiveConcurrency
argument_list|()
decl_stmt|;
DECL|field|queryShardContext
specifier|private
specifier|final
name|QueryShardContext
name|queryShardContext
decl_stmt|;
DECL|field|mapUnmappedFieldsAsString
specifier|private
name|boolean
name|mapUnmappedFieldsAsString
decl_stmt|;
DECL|field|percolateMetric
specifier|private
specifier|final
name|MeanMetric
name|percolateMetric
init|=
operator|new
name|MeanMetric
argument_list|()
decl_stmt|;
DECL|field|currentMetric
specifier|private
specifier|final
name|CounterMetric
name|currentMetric
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
DECL|field|numberOfQueries
specifier|private
specifier|final
name|CounterMetric
name|numberOfQueries
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
DECL|method|PercolatorQueriesRegistry
specifier|public
name|PercolatorQueriesRegistry
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|,
name|MapperService
name|mapperService
parameter_list|,
name|QueryShardContext
name|queryShardContext
parameter_list|,
name|IndexFieldDataService
name|indexFieldDataService
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
name|this
operator|.
name|queryShardContext
operator|=
name|queryShardContext
expr_stmt|;
name|this
operator|.
name|indexFieldDataService
operator|=
name|indexFieldDataService
expr_stmt|;
name|this
operator|.
name|mapUnmappedFieldsAsString
operator|=
name|this
operator|.
name|indexSettings
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsBoolean
argument_list|(
name|MAP_UNMAPPED_FIELDS_AS_STRING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|percolateQueries
specifier|public
name|ConcurrentMap
argument_list|<
name|BytesRef
argument_list|,
name|Query
argument_list|>
name|percolateQueries
parameter_list|()
block|{
return|return
name|percolateQueries
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|percolateQueries
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|addPercolateQuery
specifier|public
name|void
name|addPercolateQuery
parameter_list|(
name|String
name|idAsString
parameter_list|,
name|BytesReference
name|source
parameter_list|)
block|{
name|Query
name|newquery
init|=
name|parsePercolatorDocument
argument_list|(
name|idAsString
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|BytesRef
name|id
init|=
operator|new
name|BytesRef
argument_list|(
name|idAsString
argument_list|)
decl_stmt|;
name|percolateQueries
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|newquery
argument_list|)
expr_stmt|;
name|numberOfQueries
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
DECL|method|removePercolateQuery
specifier|public
name|void
name|removePercolateQuery
parameter_list|(
name|String
name|idAsString
parameter_list|)
block|{
name|BytesRef
name|id
init|=
operator|new
name|BytesRef
argument_list|(
name|idAsString
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|percolateQueries
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|numberOfQueries
operator|.
name|dec
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|parsePercolatorDocument
name|Query
name|parsePercolatorDocument
parameter_list|(
name|String
name|id
parameter_list|,
name|BytesReference
name|source
parameter_list|)
block|{
name|String
name|type
init|=
literal|null
decl_stmt|;
name|BytesReference
name|querySource
init|=
literal|null
decl_stmt|;
try|try
init|(
name|XContentParser
name|sourceParser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
init|)
block|{
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|sourceParser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// move the START_OBJECT
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to parse query ["
operator|+
name|id
operator|+
literal|"], not starting with OBJECT"
argument_list|)
throw|;
block|}
while|while
condition|(
operator|(
name|token
operator|=
name|sourceParser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|sourceParser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
literal|"query"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|parseQuery
argument_list|(
name|type
argument_list|,
name|sourceParser
argument_list|)
return|;
block|}
else|else
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|sourceParser
operator|.
name|contentType
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|sourceParser
argument_list|)
expr_stmt|;
name|querySource
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|sourceParser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|sourceParser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|type
operator|=
name|sourceParser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
block|}
block|}
try|try
init|(
name|XContentParser
name|queryParser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|querySource
argument_list|)
init|)
block|{
return|return
name|parseQuery
argument_list|(
name|type
argument_list|,
name|queryParser
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PercolatorException
argument_list|(
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
literal|"failed to parse query ["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|parseQuery
specifier|private
name|Query
name|parseQuery
parameter_list|(
name|String
name|type
parameter_list|,
name|XContentParser
name|parser
parameter_list|)
block|{
name|String
index|[]
name|previousTypes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|previousTypes
operator|=
name|QueryShardContext
operator|.
name|setTypesWithPrevious
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|QueryShardContext
name|context
init|=
operator|new
name|QueryShardContext
argument_list|(
name|queryShardContext
argument_list|)
decl_stmt|;
try|try
block|{
name|context
operator|.
name|reset
argument_list|(
name|parser
argument_list|)
expr_stmt|;
comment|// This means that fields in the query need to exist in the mapping prior to registering this query
comment|// The reason that this is required, is that if a field doesn't exist then the query assumes defaults, which may be undesired.
comment|//
comment|// Even worse when fields mentioned in percolator queries do go added to map after the queries have been registered
comment|// then the percolator queries don't work as expected any more.
comment|//
comment|// Query parsing can't introduce new fields in mappings (which happens when registering a percolator query),
comment|// because field type can't be inferred from queries (like document do) so the best option here is to disallow
comment|// the usage of unmapped fields in percolator queries to avoid unexpected behaviour
comment|//
comment|// if index.percolator.map_unmapped_fields_as_string is set to true, query can contain unmapped fields which will be mapped
comment|// as an analyzed string.
name|context
operator|.
name|setAllowUnmappedFields
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|context
operator|.
name|setMapUnmappedFieldAsString
argument_list|(
name|mapUnmappedFieldsAsString
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|parseInnerQuery
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Failed to parse"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|QueryShardContext
operator|.
name|setTypes
argument_list|(
name|previousTypes
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|reset
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadQueries
specifier|public
name|void
name|loadQueries
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"loading percolator queries..."
argument_list|)
expr_stmt|;
specifier|final
name|int
name|loadedQueries
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|QueriesLoaderCollector
name|queryCollector
init|=
operator|new
name|QueriesLoaderCollector
argument_list|(
name|PercolatorQueriesRegistry
operator|.
name|this
argument_list|,
name|logger
argument_list|,
name|mapperService
argument_list|,
name|indexFieldDataService
argument_list|)
decl_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|indexSearcher
operator|.
name|setQueryCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|queryCollector
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Query
argument_list|>
name|queries
init|=
name|queryCollector
operator|.
name|queries
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|Query
argument_list|>
name|entry
range|:
name|queries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|percolateQueries
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|numberOfQueries
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
name|loadedQueries
operator|=
name|queries
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PercolatorException
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
literal|"failed to load queries from percolator index"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"done loading [{}] percolator queries"
argument_list|,
name|loadedQueries
argument_list|)
expr_stmt|;
block|}
DECL|method|isPercolatorQuery
specifier|public
name|boolean
name|isPercolatorQuery
parameter_list|(
name|Engine
operator|.
name|Index
name|operation
parameter_list|)
block|{
if|if
condition|(
name|PercolatorService
operator|.
name|TYPE_NAME
operator|.
name|equals
argument_list|(
name|operation
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
name|parsePercolatorDocument
argument_list|(
name|operation
operator|.
name|id
argument_list|()
argument_list|,
name|operation
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|isPercolatorQuery
specifier|public
name|boolean
name|isPercolatorQuery
parameter_list|(
name|Engine
operator|.
name|Delete
name|operation
parameter_list|)
block|{
return|return
name|PercolatorService
operator|.
name|TYPE_NAME
operator|.
name|equals
argument_list|(
name|operation
operator|.
name|type
argument_list|()
argument_list|)
return|;
block|}
DECL|method|updatePercolateQuery
specifier|public
specifier|synchronized
name|void
name|updatePercolateQuery
parameter_list|(
name|Engine
name|engine
parameter_list|,
name|String
name|id
parameter_list|)
block|{
comment|// this can be called out of order as long as for every change to a percolator document it's invoked. This will always
comment|// fetch the latest change but might fetch the same change twice if updates / deletes happen concurrently.
try|try
init|(
name|Engine
operator|.
name|GetResult
name|getResult
init|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
operator|new
name|Term
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|Uid
operator|.
name|createUidAsBytes
argument_list|(
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
if|if
condition|(
name|getResult
operator|.
name|exists
argument_list|()
condition|)
block|{
name|addPercolateQuery
argument_list|(
name|id
argument_list|,
name|getResult
operator|.
name|source
argument_list|()
operator|.
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removePercolateQuery
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|prePercolate
specifier|public
name|void
name|prePercolate
parameter_list|()
block|{
name|currentMetric
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
DECL|method|postPercolate
specifier|public
name|void
name|postPercolate
parameter_list|(
name|long
name|tookInNanos
parameter_list|)
block|{
name|currentMetric
operator|.
name|dec
argument_list|()
expr_stmt|;
name|percolateMetric
operator|.
name|inc
argument_list|(
name|tookInNanos
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return The current metrics      */
DECL|method|stats
specifier|public
name|PercolateStats
name|stats
parameter_list|()
block|{
return|return
operator|new
name|PercolateStats
argument_list|(
name|percolateMetric
operator|.
name|count
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|percolateMetric
operator|.
name|sum
argument_list|()
argument_list|)
argument_list|,
name|currentMetric
operator|.
name|count
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|numberOfQueries
operator|.
name|count
argument_list|()
argument_list|)
return|;
block|}
comment|// Enable when a more efficient manner is found for estimating the size of a Lucene query.
comment|/*private static long computeSizeInMemory(HashedBytesRef id, Query query) {         long size = (3 * RamUsageEstimator.NUM_BYTES_INT) + RamUsageEstimator.NUM_BYTES_OBJECT_REF + RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + id.bytes.bytes.length;         size += RamEstimator.sizeOf(query);         return size;     }      private static final class RamEstimator {         // we move this into it's own class to exclude it from the forbidden API checks         // it's fine to use here!         static long sizeOf(Query query) {             return RamUsageEstimator.sizeOf(query);         }     }*/
block|}
end_class

end_unit

