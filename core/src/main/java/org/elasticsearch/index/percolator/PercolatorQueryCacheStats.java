begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Exposes percolator query cache statistics.  */
end_comment

begin_class
DECL|class|PercolatorQueryCacheStats
specifier|public
class|class
name|PercolatorQueryCacheStats
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|numQueries
specifier|private
name|long
name|numQueries
decl_stmt|;
comment|/**      * Noop constructor for serialization purposes.      */
DECL|method|PercolatorQueryCacheStats
specifier|public
name|PercolatorQueryCacheStats
parameter_list|()
block|{     }
DECL|method|PercolatorQueryCacheStats
name|PercolatorQueryCacheStats
parameter_list|(
name|long
name|numQueries
parameter_list|)
block|{
name|this
operator|.
name|numQueries
operator|=
name|numQueries
expr_stmt|;
block|}
comment|/**      * @return The total number of loaded percolate queries.      */
DECL|method|getNumQueries
specifier|public
name|long
name|getNumQueries
parameter_list|()
block|{
return|return
name|numQueries
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|PERCOLATOR
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|QUERIES
argument_list|,
name|getNumQueries
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|PercolatorQueryCacheStats
name|percolate
parameter_list|)
block|{
if|if
condition|(
name|percolate
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|numQueries
operator|+=
name|percolate
operator|.
name|getNumQueries
argument_list|()
expr_stmt|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|PERCOLATOR
specifier|static
specifier|final
name|XContentBuilderString
name|PERCOLATOR
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"percolator"
argument_list|)
decl_stmt|;
DECL|field|QUERIES
specifier|static
specifier|final
name|XContentBuilderString
name|QUERIES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"num_queries"
argument_list|)
decl_stmt|;
block|}
DECL|method|readPercolateStats
specifier|public
specifier|static
name|PercolatorQueryCacheStats
name|readPercolateStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|PercolatorQueryCacheStats
name|stats
init|=
operator|new
name|PercolatorQueryCacheStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|numQueries
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|numQueries
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

