begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|InternalEngineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexSearcherWrapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|IndexModule
specifier|public
class|class
name|IndexModule
extends|extends
name|AbstractModule
block|{
DECL|field|indexMetaData
specifier|private
specifier|final
name|IndexMetaData
name|indexMetaData
decl_stmt|;
DECL|field|indexSettings
specifier|private
specifier|final
name|IndexSettings
name|indexSettings
decl_stmt|;
comment|// pkg private so tests can mock
DECL|field|engineFactoryImpl
name|Class
argument_list|<
name|?
extends|extends
name|EngineFactory
argument_list|>
name|engineFactoryImpl
init|=
name|InternalEngineFactory
operator|.
name|class
decl_stmt|;
DECL|field|indexSearcherWrapper
name|Class
argument_list|<
name|?
extends|extends
name|IndexSearcherWrapper
argument_list|>
name|indexSearcherWrapper
init|=
literal|null
decl_stmt|;
DECL|field|settingsConsumers
specifier|private
specifier|final
name|Set
argument_list|<
name|Consumer
argument_list|<
name|Settings
argument_list|>
argument_list|>
name|settingsConsumers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|indexEventListeners
specifier|private
specifier|final
name|Set
argument_list|<
name|IndexEventListener
argument_list|>
name|indexEventListeners
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|listener
specifier|private
name|IndexEventListener
name|listener
decl_stmt|;
DECL|method|IndexModule
specifier|public
name|IndexModule
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|this
operator|.
name|indexMetaData
operator|=
name|indexMetaData
expr_stmt|;
name|this
operator|.
name|indexSettings
operator|=
name|indexSettings
expr_stmt|;
block|}
comment|/**      * Adds a settings consumer for this index      */
DECL|method|addIndexSettingsListener
specifier|public
name|void
name|addIndexSettingsListener
parameter_list|(
name|Consumer
argument_list|<
name|Settings
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"listener must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|settingsConsumers
operator|.
name|contains
argument_list|(
name|listener
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"listener already registered"
argument_list|)
throw|;
block|}
name|settingsConsumers
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the index {@link Settings} for this index      */
DECL|method|getSettings
specifier|public
name|Settings
name|getSettings
parameter_list|()
block|{
return|return
name|indexSettings
operator|.
name|getSettings
argument_list|()
return|;
block|}
comment|/**      * Returns the index this module is associated with      */
DECL|method|getIndex
specifier|public
name|Index
name|getIndex
parameter_list|()
block|{
return|return
name|indexSettings
operator|.
name|getIndex
argument_list|()
return|;
block|}
comment|/**      * Adds an {@link IndexEventListener} for this index. All listeners added here      * are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these      * listeners go out of scope.      *<p>      * Note: an index might be created on a node multiple times. For instance if the last shard from an index is      * relocated to another node the internal representation will be destroyed which includes the registered listeners.      * Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again.      * Listeners can't be unregistered the will stay alive for the entire time the index is allocated on a node.      *</p>      */
DECL|method|addIndexEventListener
specifier|public
name|void
name|addIndexEventListener
parameter_list|(
name|IndexEventListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|listener
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't add listener after listeners are frozen"
argument_list|)
throw|;
block|}
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"listener must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|indexEventListeners
operator|.
name|contains
argument_list|(
name|listener
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"listener already added"
argument_list|)
throw|;
block|}
name|this
operator|.
name|indexEventListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|freeze
specifier|public
name|IndexEventListener
name|freeze
parameter_list|()
block|{
comment|// TODO somehow we need to make this pkg private...
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
operator|new
name|CompositeIndexEventListener
argument_list|(
name|indexSettings
argument_list|,
name|indexEventListeners
argument_list|)
expr_stmt|;
block|}
return|return
name|listener
return|;
block|}
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|EngineFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|engineFactoryImpl
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexSearcherWrapper
operator|==
literal|null
condition|)
block|{
name|bind
argument_list|(
name|IndexSearcherWrapper
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bind
argument_list|(
name|IndexSearcherWrapper
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|indexSearcherWrapper
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
name|bind
argument_list|(
name|IndexEventListener
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|freeze
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|IndexMetaData
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|indexMetaData
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|IndexService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|IndexServicesProvider
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|MapperService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|IndexFieldDataService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|IndexSettings
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|IndexSettings
argument_list|(
name|indexSettings
operator|.
name|getIndex
argument_list|()
argument_list|,
name|indexSettings
operator|.
name|getSettings
argument_list|()
argument_list|,
name|settingsConsumers
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

