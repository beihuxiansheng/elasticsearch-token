begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooNewException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooOldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|InputStreamDataInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ByteBufferStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A base class for all classes that allows reading ops from translog files  */
end_comment

begin_class
DECL|class|TranslogReader
specifier|public
specifier|abstract
class|class
name|TranslogReader
implements|implements
name|Closeable
implements|,
name|Comparable
argument_list|<
name|TranslogReader
argument_list|>
block|{
DECL|field|UNKNOWN_OP_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|UNKNOWN_OP_COUNT
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|LUCENE_CODEC_HEADER_BYTE
specifier|private
specifier|static
specifier|final
name|byte
name|LUCENE_CODEC_HEADER_BYTE
init|=
literal|0x3f
decl_stmt|;
DECL|field|UNVERSIONED_TRANSLOG_HEADER_BYTE
specifier|private
specifier|static
specifier|final
name|byte
name|UNVERSIONED_TRANSLOG_HEADER_BYTE
init|=
literal|0x00
decl_stmt|;
DECL|field|generation
specifier|protected
specifier|final
name|long
name|generation
decl_stmt|;
DECL|field|channelReference
specifier|protected
specifier|final
name|ChannelReference
name|channelReference
decl_stmt|;
DECL|field|channel
specifier|protected
specifier|final
name|FileChannel
name|channel
decl_stmt|;
DECL|field|closed
specifier|protected
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|firstOperationOffset
specifier|protected
specifier|final
name|long
name|firstOperationOffset
decl_stmt|;
DECL|method|TranslogReader
specifier|public
name|TranslogReader
parameter_list|(
name|long
name|generation
parameter_list|,
name|ChannelReference
name|channelReference
parameter_list|,
name|long
name|firstOperationOffset
parameter_list|)
block|{
name|this
operator|.
name|generation
operator|=
name|generation
expr_stmt|;
name|this
operator|.
name|channelReference
operator|=
name|channelReference
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channelReference
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|this
operator|.
name|firstOperationOffset
operator|=
name|firstOperationOffset
expr_stmt|;
block|}
DECL|method|getGeneration
specifier|public
name|long
name|getGeneration
parameter_list|()
block|{
return|return
name|this
operator|.
name|generation
return|;
block|}
DECL|method|sizeInBytes
specifier|public
specifier|abstract
name|long
name|sizeInBytes
parameter_list|()
function_decl|;
DECL|method|totalOperations
specifier|abstract
specifier|public
name|int
name|totalOperations
parameter_list|()
function_decl|;
DECL|method|getFirstOperationOffset
specifier|public
specifier|final
name|long
name|getFirstOperationOffset
parameter_list|()
block|{
return|return
name|firstOperationOffset
return|;
block|}
DECL|method|read
specifier|public
name|Translog
operator|.
name|Operation
name|read
parameter_list|(
name|Translog
operator|.
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|location
operator|.
name|generation
operator|==
name|generation
operator|:
literal|"read location's translog generation ["
operator|+
name|location
operator|.
name|generation
operator|+
literal|"] is not ["
operator|+
name|generation
operator|+
literal|"]"
assert|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|location
operator|.
name|size
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedChecksumStreamInput
name|checksumStreamInput
init|=
name|checksummedStream
argument_list|(
name|buffer
argument_list|,
name|location
operator|.
name|translogLocation
argument_list|,
name|location
operator|.
name|size
argument_list|,
literal|null
argument_list|)
init|)
block|{
return|return
name|read
argument_list|(
name|checksumStreamInput
argument_list|)
return|;
block|}
block|}
comment|/** read the size of the op (i.e., number of bytes, including the op size) written at the given position */
DECL|method|readSize
specifier|private
specifier|final
name|int
name|readSize
parameter_list|(
name|ByteBuffer
name|reusableBuffer
parameter_list|,
name|long
name|position
parameter_list|)
block|{
comment|// read op size from disk
assert|assert
name|reusableBuffer
operator|.
name|capacity
argument_list|()
operator|>=
literal|4
operator|:
literal|"reusable buffer must have capacity>=4 when reading opSize. got ["
operator|+
name|reusableBuffer
operator|.
name|capacity
argument_list|()
operator|+
literal|"]"
assert|;
try|try
block|{
name|reusableBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reusableBuffer
operator|.
name|limit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|readBytes
argument_list|(
name|reusableBuffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|reusableBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|// Add an extra 4 to account for the operation size integer itself
specifier|final
name|int
name|size
init|=
name|reusableBuffer
operator|.
name|getInt
argument_list|()
operator|+
literal|4
decl_stmt|;
specifier|final
name|long
name|maxSize
init|=
name|sizeInBytes
argument_list|()
operator|-
name|position
decl_stmt|;
if|if
condition|(
name|size
argument_list|<
literal|0
operator|||
name|size
argument_list|>
name|maxSize
condition|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"operation size is corrupted must be [0.."
operator|+
name|maxSize
operator|+
literal|"] but was: "
operator|+
name|size
argument_list|)
throw|;
block|}
return|return
name|size
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"unexpected exception reading from translog snapshot of "
operator|+
name|this
operator|.
name|channelReference
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|newSnapshot
specifier|public
name|Translog
operator|.
name|Snapshot
name|newSnapshot
parameter_list|()
block|{
specifier|final
name|ByteBuffer
name|reusableBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
specifier|final
name|int
name|totalOperations
init|=
name|totalOperations
argument_list|()
decl_stmt|;
name|channelReference
operator|.
name|incRef
argument_list|()
expr_stmt|;
return|return
name|newReaderSnapshot
argument_list|(
name|totalOperations
argument_list|,
name|reusableBuffer
argument_list|)
return|;
block|}
comment|/**      * reads an operation at the given position and returns it. The buffer length is equal to the number      * of bytes reads.      */
DECL|method|checksummedStream
specifier|private
specifier|final
name|BufferedChecksumStreamInput
name|checksummedStream
parameter_list|(
name|ByteBuffer
name|reusableBuffer
parameter_list|,
name|long
name|position
parameter_list|,
name|int
name|opSize
parameter_list|,
name|BufferedChecksumStreamInput
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ByteBuffer
name|buffer
decl_stmt|;
if|if
condition|(
name|reusableBuffer
operator|.
name|capacity
argument_list|()
operator|>=
name|opSize
condition|)
block|{
name|buffer
operator|=
name|reusableBuffer
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|opSize
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|opSize
argument_list|)
expr_stmt|;
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
operator|new
name|BufferedChecksumStreamInput
argument_list|(
operator|new
name|ByteBufferStreamInput
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|reuse
argument_list|)
return|;
block|}
DECL|method|read
specifier|protected
name|Translog
operator|.
name|Operation
name|read
parameter_list|(
name|BufferedChecksumStreamInput
name|inStream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Translog
operator|.
name|readOperation
argument_list|(
name|inStream
argument_list|)
return|;
block|}
comment|/**      * reads bytes at position into the given buffer, filling it.      */
DECL|method|readBytes
specifier|abstract
specifier|protected
name|void
name|readBytes
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|long
name|position
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|channelReference
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isClosed
specifier|protected
specifier|final
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|ensureOpen
specifier|protected
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"translog ["
operator|+
name|getGeneration
argument_list|()
operator|+
literal|"] is already closed"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"translog ["
operator|+
name|generation
operator|+
literal|"]["
operator|+
name|channelReference
operator|.
name|getPath
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|TranslogReader
name|o
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|getGeneration
argument_list|()
argument_list|,
name|o
operator|.
name|getGeneration
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Given a file, return a VersionedTranslogStream based on an      * optionally-existing header in the file. If the file does not exist, or      * has zero length, returns the latest version. If the header does not      * exist, assumes Version 0 of the translog file format.      */
DECL|method|open
specifier|public
specifier|static
name|ImmutableTranslogReader
name|open
parameter_list|(
name|ChannelReference
name|channelReference
parameter_list|,
name|Checkpoint
name|checkpoint
parameter_list|,
name|String
name|translogUUID
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileChannel
name|channel
init|=
name|channelReference
operator|.
name|getChannel
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
name|channelReference
operator|.
name|getPath
argument_list|()
decl_stmt|;
assert|assert
name|channelReference
operator|.
name|getGeneration
argument_list|()
operator|==
name|checkpoint
operator|.
name|generation
operator|:
literal|"expected generation: "
operator|+
name|channelReference
operator|.
name|getGeneration
argument_list|()
operator|+
literal|" but got: "
operator|+
name|checkpoint
operator|.
name|generation
assert|;
try|try
block|{
if|if
condition|(
name|checkpoint
operator|.
name|offset
operator|==
literal|0
operator|&&
name|checkpoint
operator|.
name|numOps
operator|==
name|TranslogReader
operator|.
name|UNKNOWN_OP_COUNT
condition|)
block|{
comment|// only old files can be empty
return|return
operator|new
name|LegacyTranslogReader
argument_list|(
name|channelReference
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|channelReference
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|InputStreamStreamInput
name|headerStream
init|=
operator|new
name|InputStreamStreamInput
argument_list|(
name|Channels
operator|.
name|newInputStream
argument_list|(
name|channel
argument_list|)
argument_list|)
decl_stmt|;
comment|// don't close
comment|// Lucene's CodecUtil writes a magic number of 0x3FD76C17 with the
comment|// header, in binary this looks like:
comment|//
comment|// binary: 0011 1111 1101 0111 0110 1100 0001 0111
comment|// hex   :    3    f    d    7    6    c    1    7
comment|//
comment|// With version 0 of the translog, the first byte is the
comment|// Operation.Type, which will always be between 0-4, so we know if
comment|// we grab the first byte, it can be:
comment|// 0x3f => Lucene's magic number, so we can assume it's version 1 or later
comment|// 0x00 => version 0 of the translog
comment|//
comment|// otherwise the first byte of the translog is corrupted and we
comment|// should bail
name|byte
name|b1
init|=
name|headerStream
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|b1
operator|==
name|LUCENE_CODEC_HEADER_BYTE
condition|)
block|{
comment|// Read 3 more bytes, meaning a whole integer has been read
name|byte
name|b2
init|=
name|headerStream
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|b3
init|=
name|headerStream
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|b4
init|=
name|headerStream
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|// Convert the 4 bytes that were read into an integer
name|int
name|header
init|=
operator|(
operator|(
name|b1
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator|)
operator|+
operator|(
operator|(
name|b2
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|b3
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
name|b4
operator|&
literal|0xFF
operator|)
operator|<<
literal|0
operator|)
decl_stmt|;
comment|// We confirm CodecUtil's CODEC_MAGIC number (0x3FD76C17)
comment|// ourselves here, because it allows us to read the first
comment|// byte separately
if|if
condition|(
name|header
operator|!=
name|CodecUtil
operator|.
name|CODEC_MAGIC
condition|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"translog looks like version 1 or later, but has corrupted header"
argument_list|)
throw|;
block|}
comment|// Confirm the rest of the header using CodecUtil, extracting
comment|// the translog version
name|int
name|version
init|=
name|CodecUtil
operator|.
name|checkHeaderNoMagic
argument_list|(
operator|new
name|InputStreamDataInput
argument_list|(
name|headerStream
argument_list|)
argument_list|,
name|TranslogWriter
operator|.
name|TRANSLOG_CODEC
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|version
condition|)
block|{
case|case
name|TranslogWriter
operator|.
name|VERSION_CHECKSUMS
case|:
assert|assert
name|checkpoint
operator|.
name|numOps
operator|==
name|TranslogReader
operator|.
name|UNKNOWN_OP_COUNT
operator|:
literal|"expected unknown op count but got: "
operator|+
name|checkpoint
operator|.
name|numOps
assert|;
assert|assert
name|checkpoint
operator|.
name|offset
operator|==
name|Files
operator|.
name|size
argument_list|(
name|path
argument_list|)
operator|:
literal|"offset("
operator|+
name|checkpoint
operator|.
name|offset
operator|+
literal|") != file_size("
operator|+
name|Files
operator|.
name|size
argument_list|(
name|path
argument_list|)
operator|+
literal|") for: "
operator|+
name|path
assert|;
comment|// legacy - we still have to support it somehow
return|return
operator|new
name|LegacyTranslogReaderBase
argument_list|(
name|channelReference
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|channelReference
argument_list|,
name|CodecUtil
operator|.
name|headerLength
argument_list|(
name|TranslogWriter
operator|.
name|TRANSLOG_CODEC
argument_list|)
argument_list|,
name|checkpoint
operator|.
name|offset
argument_list|)
return|;
case|case
name|TranslogWriter
operator|.
name|VERSION_CHECKPOINTS
case|:
assert|assert
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|Translog
operator|.
name|TRANSLOG_FILE_SUFFIX
argument_list|)
operator|:
literal|"new file ends with old suffix: "
operator|+
name|path
assert|;
assert|assert
name|checkpoint
operator|.
name|numOps
operator|>
name|TranslogReader
operator|.
name|UNKNOWN_OP_COUNT
operator|:
literal|"expected at least 0 operatin but got: "
operator|+
name|checkpoint
operator|.
name|numOps
assert|;
assert|assert
name|checkpoint
operator|.
name|offset
operator|<=
name|channel
operator|.
name|size
argument_list|()
operator|:
literal|"checkpoint is inconsistent with channel length: "
operator|+
name|channel
operator|.
name|size
argument_list|()
operator|+
literal|" "
operator|+
name|checkpoint
assert|;
name|int
name|len
init|=
name|headerStream
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|channel
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"uuid length can't be larger than the translog"
argument_list|)
throw|;
block|}
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|ref
operator|.
name|length
operator|=
name|len
expr_stmt|;
name|headerStream
operator|.
name|read
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|ref
operator|.
name|length
argument_list|)
expr_stmt|;
name|BytesRef
name|uuidBytes
init|=
operator|new
name|BytesRef
argument_list|(
name|translogUUID
argument_list|)
decl_stmt|;
if|if
condition|(
name|uuidBytes
operator|.
name|bytesEquals
argument_list|(
name|ref
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"expected shard UUID ["
operator|+
name|uuidBytes
operator|+
literal|"] but got: ["
operator|+
name|ref
operator|+
literal|"] this translog file belongs to a different translog"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ImmutableTranslogReader
argument_list|(
name|channelReference
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|channelReference
argument_list|,
name|ref
operator|.
name|length
operator|+
name|CodecUtil
operator|.
name|headerLength
argument_list|(
name|TranslogWriter
operator|.
name|TRANSLOG_CODEC
argument_list|)
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|,
name|checkpoint
operator|.
name|offset
argument_list|,
name|checkpoint
operator|.
name|numOps
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"No known translog stream version: "
operator|+
name|version
operator|+
literal|" path:"
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|b1
operator|==
name|UNVERSIONED_TRANSLOG_HEADER_BYTE
condition|)
block|{
assert|assert
name|checkpoint
operator|.
name|numOps
operator|==
name|TranslogReader
operator|.
name|UNKNOWN_OP_COUNT
operator|:
literal|"expected unknown op count but got: "
operator|+
name|checkpoint
operator|.
name|numOps
assert|;
assert|assert
name|checkpoint
operator|.
name|offset
operator|==
name|Files
operator|.
name|size
argument_list|(
name|path
argument_list|)
operator|:
literal|"offset("
operator|+
name|checkpoint
operator|.
name|offset
operator|+
literal|") != file_size("
operator|+
name|Files
operator|.
name|size
argument_list|(
name|path
argument_list|)
operator|+
literal|") for: "
operator|+
name|path
assert|;
return|return
operator|new
name|LegacyTranslogReader
argument_list|(
name|channelReference
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|channelReference
argument_list|,
name|checkpoint
operator|.
name|offset
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"Invalid first byte in translog file, got: "
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|b1
argument_list|)
operator|+
literal|", expected 0x00 or 0x3f"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
decl||
name|IndexFormatTooOldException
decl||
name|IndexFormatTooNewException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"Translog header corrupted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|path
specifier|public
name|Path
name|path
parameter_list|()
block|{
return|return
name|channelReference
operator|.
name|getPath
argument_list|()
return|;
block|}
DECL|method|newReaderSnapshot
specifier|protected
name|Translog
operator|.
name|Snapshot
name|newReaderSnapshot
parameter_list|(
name|int
name|totalOperations
parameter_list|,
name|ByteBuffer
name|reusableBuffer
parameter_list|)
block|{
return|return
operator|new
name|ReaderSnapshot
argument_list|(
name|totalOperations
argument_list|,
name|reusableBuffer
argument_list|)
return|;
block|}
DECL|class|ReaderSnapshot
class|class
name|ReaderSnapshot
implements|implements
name|Translog
operator|.
name|Snapshot
block|{
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
decl_stmt|;
DECL|field|totalOperations
specifier|private
specifier|final
name|int
name|totalOperations
decl_stmt|;
DECL|field|reusableBuffer
specifier|private
specifier|final
name|ByteBuffer
name|reusableBuffer
decl_stmt|;
DECL|field|position
name|long
name|position
decl_stmt|;
DECL|field|readOperations
name|int
name|readOperations
decl_stmt|;
DECL|field|reuse
specifier|private
name|BufferedChecksumStreamInput
name|reuse
decl_stmt|;
DECL|method|ReaderSnapshot
specifier|public
name|ReaderSnapshot
parameter_list|(
name|int
name|totalOperations
parameter_list|,
name|ByteBuffer
name|reusableBuffer
parameter_list|)
block|{
name|this
operator|.
name|totalOperations
operator|=
name|totalOperations
expr_stmt|;
name|this
operator|.
name|reusableBuffer
operator|=
name|reusableBuffer
expr_stmt|;
name|closed
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|position
operator|=
name|firstOperationOffset
expr_stmt|;
name|readOperations
operator|=
literal|0
expr_stmt|;
name|reuse
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|estimatedTotalOperations
specifier|public
specifier|final
name|int
name|estimatedTotalOperations
parameter_list|()
block|{
return|return
name|totalOperations
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|Translog
operator|.
name|Operation
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|readOperations
operator|<
name|totalOperations
condition|)
block|{
assert|assert
name|readOperations
operator|<
name|totalOperations
operator|:
literal|"readOpeartions must be less than totalOperations"
assert|;
return|return
name|readOperation
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|readOperation
specifier|protected
specifier|final
name|Translog
operator|.
name|Operation
name|readOperation
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|opSize
init|=
name|readSize
argument_list|(
name|reusableBuffer
argument_list|,
name|position
argument_list|)
decl_stmt|;
name|reuse
operator|=
name|checksummedStream
argument_list|(
name|reusableBuffer
argument_list|,
name|position
argument_list|,
name|opSize
argument_list|,
name|reuse
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Operation
name|op
init|=
name|read
argument_list|(
name|reuse
argument_list|)
decl_stmt|;
name|position
operator|+=
name|opSize
expr_stmt|;
name|readOperations
operator|++
expr_stmt|;
return|return
name|op
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|channelReference
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

