begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_class
DECL|class|TranslogSnapshot
specifier|public
class|class
name|TranslogSnapshot
extends|extends
name|BaseTranslogReader
implements|implements
name|Translog
operator|.
name|Snapshot
block|{
DECL|field|totalOperations
specifier|private
specifier|final
name|int
name|totalOperations
decl_stmt|;
DECL|field|length
specifier|protected
specifier|final
name|long
name|length
decl_stmt|;
DECL|field|reusableBuffer
specifier|private
specifier|final
name|ByteBuffer
name|reusableBuffer
decl_stmt|;
DECL|field|position
specifier|private
name|long
name|position
decl_stmt|;
DECL|field|readOperations
specifier|private
name|int
name|readOperations
decl_stmt|;
DECL|field|reuse
specifier|private
name|BufferedChecksumStreamInput
name|reuse
decl_stmt|;
comment|/**      * Create a snapshot of translog file channel. The length parameter should be consistent with totalOperations and point      * at the end of the last operation in this snapshot.      */
DECL|method|TranslogSnapshot
specifier|public
name|TranslogSnapshot
parameter_list|(
name|long
name|generation
parameter_list|,
name|FileChannel
name|channel
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|firstOperationOffset
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|totalOperations
parameter_list|)
block|{
name|super
argument_list|(
name|generation
argument_list|,
name|channel
argument_list|,
name|path
argument_list|,
name|firstOperationOffset
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|totalOperations
operator|=
name|totalOperations
expr_stmt|;
name|this
operator|.
name|reusableBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|readOperations
operator|=
literal|0
expr_stmt|;
name|position
operator|=
name|firstOperationOffset
expr_stmt|;
name|reuse
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|totalOperations
specifier|public
specifier|final
name|int
name|totalOperations
parameter_list|()
block|{
return|return
name|totalOperations
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|Translog
operator|.
name|Operation
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|readOperations
operator|<
name|totalOperations
condition|)
block|{
return|return
name|readOperation
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|readOperation
specifier|protected
specifier|final
name|Translog
operator|.
name|Operation
name|readOperation
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|opSize
init|=
name|readSize
argument_list|(
name|reusableBuffer
argument_list|,
name|position
argument_list|)
decl_stmt|;
name|reuse
operator|=
name|checksummedStream
argument_list|(
name|reusableBuffer
argument_list|,
name|position
argument_list|,
name|opSize
argument_list|,
name|reuse
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Operation
name|op
init|=
name|read
argument_list|(
name|reuse
argument_list|)
decl_stmt|;
name|position
operator|+=
name|opSize
expr_stmt|;
name|readOperations
operator|++
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|sizeInBytes
specifier|public
name|long
name|sizeInBytes
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**      * reads an operation at the given position into the given buffer.      */
DECL|method|readBytes
specifier|protected
name|void
name|readBytes
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|position
operator|>=
name|length
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"read requested past EOF. pos ["
operator|+
name|position
operator|+
literal|"] end: ["
operator|+
name|length
operator|+
literal|"], generation: ["
operator|+
name|getGeneration
argument_list|()
operator|+
literal|"], path: ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|position
operator|<
name|getFirstOperationOffset
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"read requested before position of first ops. pos ["
operator|+
name|position
operator|+
literal|"] first op on: ["
operator|+
name|getFirstOperationOffset
argument_list|()
operator|+
literal|"], generation: ["
operator|+
name|getGeneration
argument_list|()
operator|+
literal|"], path: ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Channels
operator|.
name|readFromFileChannelWithEofException
argument_list|(
name|channel
argument_list|,
name|position
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TranslogSnapshot{"
operator|+
literal|"readOperations="
operator|+
name|readOperations
operator|+
literal|", position="
operator|+
name|position
operator|+
literal|", totalOperations="
operator|+
name|totalOperations
operator|+
literal|", length="
operator|+
name|length
operator|+
literal|", reusableBuffer="
operator|+
name|reusableBuffer
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

