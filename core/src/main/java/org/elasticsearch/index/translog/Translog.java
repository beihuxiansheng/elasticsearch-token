begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TwoPhaseCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|ReleasablePagedBytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ReleasableBytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ReleasableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardComponent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * A Translog is a per index shard component that records all non-committed index operations in a durable manner.  * In Elasticsearch there is one Translog instance per {@link org.elasticsearch.index.engine.InternalEngine}. The engine  * records the current translog generation {@link Translog#getGeneration()} in it's commit metadata using {@link #TRANSLOG_GENERATION_KEY}  * to reference the generation that contains all operations that have not yet successfully been committed to the engines lucene index.  * Additionally, since Elasticsearch 2.0 the engine also records a {@link #TRANSLOG_UUID_KEY} with each commit to ensure a strong association  * between the lucene index an the transaction log file. This UUID is used to prevent accidential recovery from a transaction log that belongs to a  * different engine.  *<p>  * Each Translog has only one translog file open at any time referenced by a translog generation ID. This ID is written to a<tt>translog.ckp</tt> file that is designed  * to fit in a single disk block such that a write of the file is atomic. The checkpoint file is written on each fsync operation of the translog and records the number of operations  * written, the current tranlogs file generation and it's fsynced offset in bytes.  *</p>  *<p>  * When a translog is opened the checkpoint is use to retrieve the latest translog file generation and subsequently to open the last written file to recovery operations.  * The {@link org.elasticsearch.index.translog.Translog.TranslogGeneration} on {@link TranslogConfig#getTranslogGeneration()} given when the translog is opened is compared against  * the latest generation and all consecutive translog files singe the given generation and the last generation in the checkpoint will be recovered and preserved until the next  * generation is committed using {@link Translog#commit()}. In the common case the translog file generation in the checkpoint and the generation passed to the translog on creation are  * the same. The only situation when they can be different is when an actual translog commit fails in between {@link Translog#prepareCommit()} and {@link Translog#commit()}. In such a case  * the currently being committed translog file will not be deleted since it's commit was not successful. Yet, a new/current translog file is already opened at that point such that there is more than  * one translog file present. Such an uncommitted translog file always has a<tt>translog-${gen}.ckp</tt> associated with it which is an fsynced copy of the it's last<tt>translog.ckp</tt> such that in  * disaster recovery last fsynced offsets, number of operation etc. are still preserved.  *</p>  */
end_comment

begin_class
DECL|class|Translog
specifier|public
class|class
name|Translog
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|IndexShardComponent
implements|,
name|Closeable
implements|,
name|TwoPhaseCommit
block|{
comment|/*      * TODO      *  - we might need something like a deletion policy to hold on to more than one translog eventually (I think sequence IDs needs this) but we can refactor as we go      *  - use a simple BufferedOuputStream to write stuff and fold BufferedTranslogWriter into it's super class... the tricky bit is we need to be able to do random access reads even from the buffer      *  - we need random exception on the FileSystem API tests for all this.      *  - we need to page align the last write before we sync, we can take advantage of ensureSynced for this since we might have already fsynced far enough      */
DECL|field|TRANSLOG_GENERATION_KEY
specifier|public
specifier|static
specifier|final
name|String
name|TRANSLOG_GENERATION_KEY
init|=
literal|"translog_generation"
decl_stmt|;
DECL|field|TRANSLOG_UUID_KEY
specifier|public
specifier|static
specifier|final
name|String
name|TRANSLOG_UUID_KEY
init|=
literal|"translog_uuid"
decl_stmt|;
DECL|field|TRANSLOG_FILE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TRANSLOG_FILE_PREFIX
init|=
literal|"translog-"
decl_stmt|;
DECL|field|TRANSLOG_FILE_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|TRANSLOG_FILE_SUFFIX
init|=
literal|".tlog"
decl_stmt|;
DECL|field|CHECKPOINT_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|CHECKPOINT_SUFFIX
init|=
literal|".ckp"
decl_stmt|;
DECL|field|CHECKPOINT_FILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CHECKPOINT_FILE_NAME
init|=
literal|"translog"
operator|+
name|CHECKPOINT_SUFFIX
decl_stmt|;
DECL|field|PARSE_STRICT_ID_PATTERN
specifier|static
specifier|final
name|Pattern
name|PARSE_STRICT_ID_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^"
operator|+
name|TRANSLOG_FILE_PREFIX
operator|+
literal|"(\\d+)(\\.tlog)$"
argument_list|)
decl_stmt|;
DECL|field|recoveredTranslogs
specifier|private
specifier|final
name|List
argument_list|<
name|ImmutableTranslogReader
argument_list|>
name|recoveredTranslogs
decl_stmt|;
DECL|field|syncScheduler
specifier|private
specifier|volatile
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|syncScheduler
decl_stmt|;
comment|// this is a concurrent set and is not protected by any of the locks. The main reason
comment|// is that is being accessed by two separate classes (additions& reading are done by FsTranslog, remove by FsView when closed)
DECL|field|outstandingViews
specifier|private
specifier|final
name|Set
argument_list|<
name|View
argument_list|>
name|outstandingViews
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentSet
argument_list|()
decl_stmt|;
DECL|field|bigArrays
specifier|private
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|readLock
specifier|protected
specifier|final
name|ReleasableLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|protected
specifier|final
name|ReleasableLock
name|writeLock
decl_stmt|;
DECL|field|location
specifier|private
specifier|final
name|Path
name|location
decl_stmt|;
DECL|field|current
specifier|private
name|TranslogWriter
name|current
decl_stmt|;
DECL|field|currentCommittingTranslog
specifier|private
specifier|volatile
name|ImmutableTranslogReader
name|currentCommittingTranslog
decl_stmt|;
DECL|field|lastCommittedTranslogFileGeneration
specifier|private
specifier|volatile
name|long
name|lastCommittedTranslogFileGeneration
init|=
operator|-
literal|1
decl_stmt|;
comment|// -1 is safe as it will not cause an translog deletion.
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|TranslogConfig
name|config
decl_stmt|;
DECL|field|translogUUID
specifier|private
specifier|final
name|String
name|translogUUID
decl_stmt|;
DECL|field|onViewClose
specifier|private
name|Callback
argument_list|<
name|View
argument_list|>
name|onViewClose
init|=
operator|new
name|Callback
argument_list|<
name|View
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|View
name|view
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"closing view starting at translog [{}]"
argument_list|,
name|view
operator|.
name|minTranslogGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|removed
init|=
name|outstandingViews
operator|.
name|remove
argument_list|(
name|view
argument_list|)
decl_stmt|;
assert|assert
name|removed
operator|:
literal|"View was never set but was supposed to be removed"
assert|;
block|}
block|}
decl_stmt|;
comment|/**      * Creates a new Translog instance. This method will create a new transaction log unless the given {@link TranslogConfig} has      * a non-null {@link org.elasticsearch.index.translog.Translog.TranslogGeneration}. If the generation is null this method      * us destructive and will delete all files in the translog path given.      *      * @see TranslogConfig#getTranslogPath()      */
DECL|method|Translog
specifier|public
name|Translog
parameter_list|(
name|TranslogConfig
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|config
operator|.
name|getShardId
argument_list|()
argument_list|,
name|config
operator|.
name|getIndexSettings
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|TranslogGeneration
name|translogGeneration
init|=
name|config
operator|.
name|getTranslogGeneration
argument_list|()
decl_stmt|;
if|if
condition|(
name|translogGeneration
operator|==
literal|null
operator|||
name|translogGeneration
operator|.
name|translogUUID
operator|==
literal|null
condition|)
block|{
comment|// legacy case
name|translogUUID
operator|=
name|Strings
operator|.
name|randomBase64UUID
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|translogUUID
operator|=
name|translogGeneration
operator|.
name|translogUUID
expr_stmt|;
block|}
name|bigArrays
operator|=
name|config
operator|.
name|getBigArrays
argument_list|()
expr_stmt|;
name|ReadWriteLock
name|rwl
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
operator|new
name|ReleasableLock
argument_list|(
name|rwl
operator|.
name|readLock
argument_list|()
argument_list|)
expr_stmt|;
name|writeLock
operator|=
operator|new
name|ReleasableLock
argument_list|(
name|rwl
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|config
operator|.
name|getTranslogPath
argument_list|()
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|this
operator|.
name|location
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|translogGeneration
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Checkpoint
name|checkpoint
init|=
name|readCheckpoint
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|nextTranslogFile
init|=
name|location
operator|.
name|resolve
argument_list|(
name|getFilename
argument_list|(
name|checkpoint
operator|.
name|generation
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|currentCheckpointFile
init|=
name|location
operator|.
name|resolve
argument_list|(
name|getCommitCheckpointFileName
argument_list|(
name|checkpoint
operator|.
name|generation
argument_list|)
argument_list|)
decl_stmt|;
comment|// this is special handling for error condition when we create a new writer but we fail to bake
comment|// the newly written file (generation+1) into the checkpoint. This is still a valid state
comment|// we just need to cleanup before we continue
comment|// we hit this before and then blindly deleted the new generation even though we managed to bake it in and then hit this:
comment|// https://discuss.elastic.co/t/cannot-recover-index-because-of-missing-tanslog-files/38336 as an example
comment|//
comment|// For this to happen we must have already copied the translog.ckp file into translog-gen.ckp so we first check if that file exists
comment|// if not we don't even try to clean it up and wait until we fail creating it
assert|assert
name|Files
operator|.
name|exists
argument_list|(
name|nextTranslogFile
argument_list|)
operator|==
literal|false
operator|||
name|Files
operator|.
name|size
argument_list|(
name|nextTranslogFile
argument_list|)
operator|<=
name|TranslogWriter
operator|.
name|getHeaderLength
argument_list|(
name|translogUUID
argument_list|)
operator|:
literal|"unexpected translog file: ["
operator|+
name|nextTranslogFile
operator|+
literal|"]"
assert|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|currentCheckpointFile
argument_list|)
comment|// current checkpoint is already copied
operator|&&
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|nextTranslogFile
argument_list|)
condition|)
block|{
comment|// delete it and log a warning
name|logger
operator|.
name|warn
argument_list|(
literal|"deleted previously created, but not yet committed, next generation [{}]. This can happen due to a tragic exception when creating a new generation"
argument_list|,
name|nextTranslogFile
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|recoveredTranslogs
operator|=
name|recoverFromFiles
argument_list|(
name|translogGeneration
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|recoveredTranslogs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"at least one reader must be recovered"
argument_list|)
throw|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|current
operator|=
name|createWriter
argument_list|(
name|checkpoint
operator|.
name|generation
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastCommittedTranslogFileGeneration
operator|=
name|translogGeneration
operator|.
name|translogFileGeneration
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
comment|// we have to close all the recovered ones otherwise we leak file handles here
comment|// for instance if we have a lot of tlog and we can't create the writer we keep on holding
comment|// on to all the uncommitted tlog files if we don't close
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|recoveredTranslogs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|this
operator|.
name|recoveredTranslogs
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"wipe translog location - creating new translog"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|location
argument_list|)
expr_stmt|;
specifier|final
name|long
name|generation
init|=
literal|1
decl_stmt|;
name|Checkpoint
name|checkpoint
init|=
operator|new
name|Checkpoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|generation
argument_list|)
decl_stmt|;
name|Checkpoint
operator|.
name|write
argument_list|(
name|location
operator|.
name|resolve
argument_list|(
name|CHECKPOINT_FILE_NAME
argument_list|)
argument_list|,
name|checkpoint
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|)
expr_stmt|;
name|current
operator|=
name|createWriter
argument_list|(
name|generation
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastCommittedTranslogFileGeneration
operator|=
operator|-
literal|1
expr_stmt|;
comment|// playing safe
block|}
comment|// now that we know which files are there, create a new current one.
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// close the opened translog files if we fail to create a new translog...
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|currentCommittingTranslog
argument_list|,
name|current
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
comment|/** recover all translog files found on disk */
DECL|method|recoverFromFiles
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|ImmutableTranslogReader
argument_list|>
name|recoverFromFiles
parameter_list|(
name|TranslogGeneration
name|translogGeneration
parameter_list|,
name|Checkpoint
name|checkpoint
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|ArrayList
argument_list|<
name|ImmutableTranslogReader
argument_list|>
name|foundTranslogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|tempFile
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|location
argument_list|,
name|TRANSLOG_FILE_PREFIX
argument_list|,
name|TRANSLOG_FILE_SUFFIX
argument_list|)
decl_stmt|;
comment|// a temp file to copy checkpoint to - note it must be in on the same FS otherwise atomic move won't work
name|boolean
name|tempFileRenamed
init|=
literal|false
decl_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"open uncommitted translog checkpoint {}"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
specifier|final
name|String
name|checkpointTranslogFile
init|=
name|getFilename
argument_list|(
name|checkpoint
operator|.
name|generation
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|translogGeneration
operator|.
name|translogFileGeneration
init|;
name|i
operator|<
name|checkpoint
operator|.
name|generation
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|committedTranslogFile
init|=
name|location
operator|.
name|resolve
argument_list|(
name|getFilename
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|committedTranslogFile
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"translog file doesn't exist with generation: "
operator|+
name|i
operator|+
literal|" lastCommitted: "
operator|+
name|lastCommittedTranslogFileGeneration
operator|+
literal|" checkpoint: "
operator|+
name|checkpoint
operator|.
name|generation
operator|+
literal|" - translog ids must be consecutive"
argument_list|)
throw|;
block|}
specifier|final
name|ImmutableTranslogReader
name|reader
init|=
name|openReader
argument_list|(
name|committedTranslogFile
argument_list|,
name|Checkpoint
operator|.
name|read
argument_list|(
name|location
operator|.
name|resolve
argument_list|(
name|getCommitCheckpointFileName
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|foundTranslogs
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"recovered local translog from checkpoint {}"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
block|}
name|foundTranslogs
operator|.
name|add
argument_list|(
name|openReader
argument_list|(
name|location
operator|.
name|resolve
argument_list|(
name|checkpointTranslogFile
argument_list|)
argument_list|,
name|checkpoint
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|commitCheckpoint
init|=
name|location
operator|.
name|resolve
argument_list|(
name|getCommitCheckpointFileName
argument_list|(
name|checkpoint
operator|.
name|generation
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|commitCheckpoint
argument_list|)
condition|)
block|{
name|Checkpoint
name|checkpointFromDisk
init|=
name|Checkpoint
operator|.
name|read
argument_list|(
name|commitCheckpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkpoint
operator|.
name|equals
argument_list|(
name|checkpointFromDisk
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Checkpoint file "
operator|+
name|commitCheckpoint
operator|.
name|getFileName
argument_list|()
operator|+
literal|" already exists but has corrupted content expected: "
operator|+
name|checkpoint
operator|+
literal|" but got: "
operator|+
name|checkpointFromDisk
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// we first copy this into the temp-file and then fsync it followed by an atomic move into the target file
comment|// that way if we hit a disk-full here we are still in an consistent state.
name|Files
operator|.
name|copy
argument_list|(
name|location
operator|.
name|resolve
argument_list|(
name|CHECKPOINT_FILE_NAME
argument_list|)
argument_list|,
name|tempFile
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|fsync
argument_list|(
name|tempFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|tempFile
argument_list|,
name|commitCheckpoint
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
name|tempFileRenamed
operator|=
literal|true
expr_stmt|;
comment|// we only fsync the directory the tempFile was already fsynced
name|IOUtils
operator|.
name|fsync
argument_list|(
name|commitCheckpoint
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|foundTranslogs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tempFileRenamed
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to delete temp file {}"
argument_list|,
name|ex
argument_list|,
name|tempFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|foundTranslogs
return|;
block|}
DECL|method|openReader
name|ImmutableTranslogReader
name|openReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|Checkpoint
name|checkpoint
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|generation
decl_stmt|;
try|try
block|{
name|generation
operator|=
name|parseIdFromFileName
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"failed to parse generation from file name matching pattern "
operator|+
name|path
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|FileChannel
name|channel
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|path
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|ChannelReference
name|raf
init|=
operator|new
name|ChannelReference
argument_list|(
name|path
argument_list|,
name|generation
argument_list|,
name|channel
argument_list|,
operator|new
name|OnCloseRunnable
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableTranslogReader
name|reader
init|=
name|ImmutableTranslogReader
operator|.
name|open
argument_list|(
name|raf
argument_list|,
name|checkpoint
argument_list|,
name|translogUUID
argument_list|)
decl_stmt|;
name|channel
operator|=
literal|null
expr_stmt|;
return|return
name|reader
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Extracts the translog generation from a file name.      *      * @throws IllegalArgumentException if the path doesn't match the expected pattern.      */
DECL|method|parseIdFromFileName
specifier|public
specifier|static
name|long
name|parseIdFromFileName
parameter_list|(
name|Path
name|translogFile
parameter_list|)
block|{
specifier|final
name|String
name|fileName
init|=
name|translogFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|Matcher
name|matcher
init|=
name|PARSE_STRICT_ID_PATTERN
operator|.
name|matcher
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"number formatting issue in a file that passed PARSE_STRICT_ID_PATTERN: "
operator|+
name|fileName
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't parse id from file: "
operator|+
name|fileName
argument_list|)
throw|;
block|}
comment|/** Returns {@code true} if this {@code Translog} is still open. */
DECL|method|isOpen
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|closed
operator|.
name|get
argument_list|()
operator|==
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
try|try
block|{
name|current
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|current
argument_list|,
name|currentCommittingTranslog
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|recoveredTranslogs
argument_list|)
expr_stmt|;
name|recoveredTranslogs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|syncScheduler
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"translog closed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns all translog locations as absolute paths.      * These paths don't contain actual translog files they are      * directories holding the transaction logs.      */
DECL|method|location
specifier|public
name|Path
name|location
parameter_list|()
block|{
return|return
name|location
return|;
block|}
comment|/**      * Returns the generation of the current transaction log.      */
DECL|method|currentFileGeneration
specifier|public
name|long
name|currentFileGeneration
parameter_list|()
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
return|return
name|current
operator|.
name|getGeneration
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns the number of operations in the transaction files that aren't committed to lucene..      * Note: may return -1 if unknown      */
DECL|method|totalOperations
specifier|public
name|int
name|totalOperations
parameter_list|()
block|{
name|int
name|ops
init|=
literal|0
decl_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ops
operator|+=
name|current
operator|.
name|totalOperations
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentCommittingTranslog
operator|!=
literal|null
condition|)
block|{
name|int
name|tops
init|=
name|currentCommittingTranslog
operator|.
name|totalOperations
argument_list|()
decl_stmt|;
assert|assert
name|tops
operator|!=
name|TranslogReader
operator|.
name|UNKNOWN_OP_COUNT
assert|;
assert|assert
name|tops
operator|>=
literal|0
assert|;
name|ops
operator|+=
name|tops
expr_stmt|;
block|}
block|}
return|return
name|ops
return|;
block|}
comment|/**      * Returns the size in bytes of the translog files that aren't committed to lucene.      */
DECL|method|sizeInBytes
specifier|public
name|long
name|sizeInBytes
parameter_list|()
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|size
operator|+=
name|current
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentCommittingTranslog
operator|!=
literal|null
condition|)
block|{
name|size
operator|+=
name|currentCommittingTranslog
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|size
return|;
block|}
DECL|method|createWriter
name|TranslogWriter
name|createWriter
parameter_list|(
name|long
name|fileGeneration
parameter_list|)
throws|throws
name|IOException
block|{
name|TranslogWriter
name|newFile
decl_stmt|;
try|try
block|{
name|newFile
operator|=
name|TranslogWriter
operator|.
name|create
argument_list|(
name|shardId
argument_list|,
name|translogUUID
argument_list|,
name|fileGeneration
argument_list|,
name|location
operator|.
name|resolve
argument_list|(
name|getFilename
argument_list|(
name|fileGeneration
argument_list|)
argument_list|)
argument_list|,
operator|new
name|OnCloseRunnable
argument_list|()
argument_list|,
name|getChannelFactory
argument_list|()
argument_list|,
name|config
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"failed to create new translog file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|newFile
return|;
block|}
comment|/**      * Read the Operation object from the given location. This method will try to read the given location from      * the current or from the currently committing translog file. If the location is in a file that has already      * been closed or even removed the method will return<code>null</code> instead.      */
DECL|method|read
specifier|public
name|Translog
operator|.
name|Operation
name|read
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
specifier|final
name|TranslogReader
name|reader
decl_stmt|;
specifier|final
name|long
name|currentGeneration
init|=
name|current
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentGeneration
operator|==
name|location
operator|.
name|generation
condition|)
block|{
name|reader
operator|=
name|current
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentCommittingTranslog
operator|!=
literal|null
operator|&&
name|currentCommittingTranslog
operator|.
name|getGeneration
argument_list|()
operator|==
name|location
operator|.
name|generation
condition|)
block|{
name|reader
operator|=
name|currentCommittingTranslog
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentGeneration
operator|<
name|location
operator|.
name|generation
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"location generation ["
operator|+
name|location
operator|.
name|generation
operator|+
literal|"] is greater than the current generation ["
operator|+
name|currentGeneration
operator|+
literal|"]"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
return|return
name|reader
operator|.
name|read
argument_list|(
name|location
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to read source from translog location "
operator|+
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Adds a delete / index operations to the transaction log.      *      * @see org.elasticsearch.index.translog.Translog.Operation      * @see Index      * @see org.elasticsearch.index.translog.Translog.Delete      */
DECL|method|add
specifier|public
name|Location
name|add
parameter_list|(
name|Operation
name|operation
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ReleasableBytesStreamOutput
name|out
init|=
operator|new
name|ReleasableBytesStreamOutput
argument_list|(
name|bigArrays
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|BufferedChecksumStreamOutput
name|checksumStreamOutput
init|=
operator|new
name|BufferedChecksumStreamOutput
argument_list|(
name|out
argument_list|)
decl_stmt|;
specifier|final
name|long
name|start
init|=
name|out
operator|.
name|position
argument_list|()
decl_stmt|;
name|out
operator|.
name|skip
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
name|writeOperationNoSize
argument_list|(
name|checksumStreamOutput
argument_list|,
name|operation
argument_list|)
expr_stmt|;
specifier|final
name|long
name|end
init|=
name|out
operator|.
name|position
argument_list|()
decl_stmt|;
specifier|final
name|int
name|operationSize
init|=
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
operator|-
name|start
argument_list|)
decl_stmt|;
name|out
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|operationSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|seek
argument_list|(
name|end
argument_list|)
expr_stmt|;
specifier|final
name|ReleasablePagedBytesReference
name|bytes
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Location
name|location
init|=
name|current
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|isSyncOnEachOperation
argument_list|()
condition|)
block|{
name|current
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
assert|assert
name|assertBytesAtLocation
argument_list|(
name|location
argument_list|,
name|bytes
argument_list|)
assert|;
return|return
name|location
return|;
block|}
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
decl||
name|IOException
name|ex
parameter_list|)
block|{
name|closeOnTragicEvent
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|closeOnTragicEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to write operation ["
operator|+
name|operation
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertBytesAtLocation
name|boolean
name|assertBytesAtLocation
parameter_list|(
name|Translog
operator|.
name|Location
name|location
parameter_list|,
name|BytesReference
name|expectedBytes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// tests can override this
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|location
operator|.
name|size
argument_list|)
decl_stmt|;
name|current
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|location
operator|.
name|translogLocation
argument_list|)
expr_stmt|;
return|return
operator|new
name|BytesArray
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|expectedBytes
argument_list|)
return|;
block|}
comment|/**      * Snapshots the current transaction log allowing to safely iterate over the snapshot.      * Snapshots are fixed in time and will not be updated with future operations.      */
DECL|method|newSnapshot
specifier|public
name|Snapshot
name|newSnapshot
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ArrayList
argument_list|<
name|TranslogReader
argument_list|>
name|toOpen
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|toOpen
operator|.
name|addAll
argument_list|(
name|recoveredTranslogs
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentCommittingTranslog
operator|!=
literal|null
condition|)
block|{
name|toOpen
operator|.
name|add
argument_list|(
name|currentCommittingTranslog
argument_list|)
expr_stmt|;
block|}
name|toOpen
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
return|return
name|createSnapshot
argument_list|(
name|toOpen
operator|.
name|toArray
argument_list|(
operator|new
name|TranslogReader
index|[
name|toOpen
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|createSnapshot
specifier|private
specifier|static
name|Snapshot
name|createSnapshot
parameter_list|(
name|TranslogReader
modifier|...
name|translogs
parameter_list|)
block|{
name|Snapshot
index|[]
name|snapshots
init|=
operator|new
name|Snapshot
index|[
name|translogs
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|translogs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|snapshots
index|[
name|i
index|]
operator|=
name|translogs
index|[
name|i
index|]
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
block|}
name|Snapshot
name|snapshot
init|=
operator|new
name|MultiSnapshot
argument_list|(
name|snapshots
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|snapshot
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|snapshots
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns a view into the current translog that is guaranteed to retain all current operations      * while receiving future ones as well      */
DECL|method|newView
specifier|public
name|Translog
operator|.
name|View
name|newView
parameter_list|()
block|{
comment|// we need to acquire the read lock to make sure no new translog is created
comment|// and will be missed by the view we're making
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ArrayList
argument_list|<
name|TranslogReader
argument_list|>
name|translogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|currentCommittingTranslog
operator|!=
literal|null
condition|)
block|{
name|translogs
operator|.
name|add
argument_list|(
name|currentCommittingTranslog
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|translogs
operator|.
name|add
argument_list|(
name|current
operator|.
name|newReaderFromWriter
argument_list|()
argument_list|)
expr_stmt|;
name|View
name|view
init|=
operator|new
name|View
argument_list|(
name|translogs
argument_list|,
name|onViewClose
argument_list|)
decl_stmt|;
comment|// this is safe as we know that no new translog is being made at the moment
comment|// (we hold a read lock) and the view will be notified of any future one
name|outstandingViews
operator|.
name|add
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|translogs
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|view
return|;
block|}
finally|finally
block|{
comment|// close if anything happend and we didn't reach the clear
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|translogs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Sync's the translog.      */
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
name|current
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|closeOnTragicEvent
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|syncNeeded
specifier|public
name|boolean
name|syncNeeded
parameter_list|()
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
return|return
name|current
operator|.
name|syncNeeded
argument_list|()
return|;
block|}
block|}
comment|/** package private for testing */
DECL|method|getFilename
specifier|public
specifier|static
name|String
name|getFilename
parameter_list|(
name|long
name|generation
parameter_list|)
block|{
return|return
name|TRANSLOG_FILE_PREFIX
operator|+
name|generation
operator|+
name|TRANSLOG_FILE_SUFFIX
return|;
block|}
DECL|method|getCommitCheckpointFileName
specifier|static
name|String
name|getCommitCheckpointFileName
parameter_list|(
name|long
name|generation
parameter_list|)
block|{
return|return
name|TRANSLOG_FILE_PREFIX
operator|+
name|generation
operator|+
name|CHECKPOINT_SUFFIX
return|;
block|}
comment|/**      * Ensures that the given location has be synced / written to the underlying storage.      *      * @return Returns<code>true</code> iff this call caused an actual sync operation otherwise<code>false</code>      */
DECL|method|ensureSynced
specifier|public
name|boolean
name|ensureSynced
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|location
operator|.
name|generation
operator|==
name|current
operator|.
name|generation
condition|)
block|{
comment|// if we have a new one it's already synced
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|current
operator|.
name|syncUpTo
argument_list|(
name|location
operator|.
name|translogLocation
operator|+
name|location
operator|.
name|size
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|closeOnTragicEvent
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|closeOnTragicEvent
specifier|private
name|void
name|closeOnTragicEvent
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
if|if
condition|(
name|current
operator|.
name|getTragicException
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|inner
parameter_list|)
block|{
name|ex
operator|.
name|addSuppressed
argument_list|(
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * return stats      */
DECL|method|stats
specifier|public
name|TranslogStats
name|stats
parameter_list|()
block|{
comment|// acquire lock to make the two numbers roughly consistent (no file change half way)
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
return|return
operator|new
name|TranslogStats
argument_list|(
name|totalOperations
argument_list|()
argument_list|,
name|sizeInBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|isReferencedGeneration
specifier|private
name|boolean
name|isReferencedGeneration
parameter_list|(
name|long
name|generation
parameter_list|)
block|{
comment|// used to make decisions if a file can be deleted
return|return
name|generation
operator|>=
name|lastCommittedTranslogFileGeneration
return|;
block|}
DECL|method|getConfig
specifier|public
name|TranslogConfig
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
DECL|class|OnCloseRunnable
specifier|private
specifier|final
class|class
name|OnCloseRunnable
implements|implements
name|Callback
argument_list|<
name|ChannelReference
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle
specifier|public
name|void
name|handle
parameter_list|(
name|ChannelReference
name|channelReference
parameter_list|)
block|{
if|if
condition|(
name|isReferencedGeneration
argument_list|(
name|channelReference
operator|.
name|getGeneration
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|Path
name|translogPath
init|=
name|channelReference
operator|.
name|getPath
argument_list|()
decl_stmt|;
assert|assert
name|channelReference
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|equals
argument_list|(
name|location
argument_list|)
operator|:
literal|"translog files must be in the location folder: "
operator|+
name|location
operator|+
literal|" but was: "
operator|+
name|translogPath
assert|;
comment|// if the given translogPath is not the current we can safely delete the file since all references are released
name|logger
operator|.
name|trace
argument_list|(
literal|"delete translog file - not referenced and not current anymore {}"
argument_list|,
name|translogPath
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|translogPath
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|translogPath
operator|.
name|resolveSibling
argument_list|(
name|getCommitCheckpointFileName
argument_list|(
name|channelReference
operator|.
name|getGeneration
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|location
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|stream
control|)
block|{
name|Matcher
name|matcher
init|=
name|PARSE_STRICT_ID_PATTERN
operator|.
name|matcher
argument_list|(
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|long
name|generation
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isReferencedGeneration
argument_list|(
name|generation
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"delete translog file - not referenced and not current anymore {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|path
operator|.
name|resolveSibling
argument_list|(
name|getCommitCheckpointFileName
argument_list|(
name|channelReference
operator|.
name|getGeneration
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to delete unreferenced translog files"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * a view into the translog, capturing all translog file at the moment of creation      * and updated with any future translog.      */
DECL|class|View
specifier|public
specifier|static
specifier|final
class|class
name|View
implements|implements
name|Closeable
block|{
DECL|field|EMPTY_VIEW
specifier|public
specifier|static
specifier|final
name|Translog
operator|.
name|View
name|EMPTY_VIEW
init|=
operator|new
name|View
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|closed
name|boolean
name|closed
decl_stmt|;
comment|// last in this list is always FsTranslog.current
DECL|field|orderedTranslogs
specifier|final
name|List
argument_list|<
name|TranslogReader
argument_list|>
name|orderedTranslogs
decl_stmt|;
DECL|field|onClose
specifier|private
specifier|final
name|Callback
argument_list|<
name|View
argument_list|>
name|onClose
decl_stmt|;
DECL|method|View
name|View
parameter_list|(
name|List
argument_list|<
name|TranslogReader
argument_list|>
name|orderedTranslogs
parameter_list|,
name|Callback
argument_list|<
name|View
argument_list|>
name|onClose
parameter_list|)
block|{
comment|// clone so we can safely mutate..
name|this
operator|.
name|orderedTranslogs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|orderedTranslogs
argument_list|)
expr_stmt|;
name|this
operator|.
name|onClose
operator|=
name|onClose
expr_stmt|;
block|}
comment|/**          * Called by the parent class when ever the current translog changes          *          * @param oldCurrent a new read only reader for the old current (should replace the previous reference)          * @param newCurrent a reader into the new current.          */
DECL|method|onNewTranslog
specifier|synchronized
name|void
name|onNewTranslog
parameter_list|(
name|TranslogReader
name|oldCurrent
parameter_list|,
name|TranslogReader
name|newCurrent
parameter_list|)
throws|throws
name|IOException
block|{
comment|// even though the close method removes this view from outstandingViews, there is no synchronisation in place
comment|// between that operation and an ongoing addition of a new translog, already having an iterator.
comment|// As such, this method can be called despite of the fact that we are closed. We need to check and ignore.
if|if
condition|(
name|closed
condition|)
block|{
comment|// we have to close the new references created for as as we will not hold them
name|IOUtils
operator|.
name|close
argument_list|(
name|oldCurrent
argument_list|,
name|newCurrent
argument_list|)
expr_stmt|;
return|return;
block|}
name|orderedTranslogs
operator|.
name|remove
argument_list|(
name|orderedTranslogs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|orderedTranslogs
operator|.
name|add
argument_list|(
name|oldCurrent
argument_list|)
expr_stmt|;
name|orderedTranslogs
operator|.
name|add
argument_list|(
name|newCurrent
argument_list|)
expr_stmt|;
block|}
comment|/** this smallest translog generation in this view */
DECL|method|minTranslogGeneration
specifier|public
specifier|synchronized
name|long
name|minTranslogGeneration
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|orderedTranslogs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeneration
argument_list|()
return|;
block|}
comment|/**          * The total number of operations in the view.          */
DECL|method|totalOperations
specifier|public
specifier|synchronized
name|int
name|totalOperations
parameter_list|()
block|{
name|int
name|ops
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TranslogReader
name|translog
range|:
name|orderedTranslogs
control|)
block|{
name|int
name|tops
init|=
name|translog
operator|.
name|totalOperations
argument_list|()
decl_stmt|;
if|if
condition|(
name|tops
operator|==
name|TranslogReader
operator|.
name|UNKNOWN_OP_COUNT
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
assert|assert
name|tops
operator|>=
literal|0
assert|;
name|ops
operator|+=
name|tops
expr_stmt|;
block|}
return|return
name|ops
return|;
block|}
comment|/**          * Returns the size in bytes of the files behind the view.          */
DECL|method|sizeInBytes
specifier|public
specifier|synchronized
name|long
name|sizeInBytes
parameter_list|()
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TranslogReader
name|translog
range|:
name|orderedTranslogs
control|)
block|{
name|size
operator|+=
name|translog
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/** create a snapshot from this view */
DECL|method|snapshot
specifier|public
specifier|synchronized
name|Snapshot
name|snapshot
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|createSnapshot
argument_list|(
name|orderedTranslogs
operator|.
name|toArray
argument_list|(
operator|new
name|TranslogReader
index|[
name|orderedTranslogs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|ensureOpen
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"View is already closed"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|TranslogReader
argument_list|>
name|toClose
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|closed
operator|==
literal|false
condition|)
block|{
try|try
block|{
if|if
condition|(
name|onClose
operator|!=
literal|null
condition|)
block|{
name|onClose
operator|.
name|handle
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|toClose
operator|.
name|addAll
argument_list|(
name|orderedTranslogs
argument_list|)
expr_stmt|;
name|orderedTranslogs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
try|try
block|{
comment|// Close out of lock to prevent deadlocks between channel close which checks for
comment|// references in InternalChannelReference.closeInternal (waiting on a read lock)
comment|// and other FsTranslog#newTranslog calling FsView.onNewTranslog (while having a write lock)
name|IOUtils
operator|.
name|close
argument_list|(
name|toClose
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to close view"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|class|Location
specifier|public
specifier|static
class|class
name|Location
implements|implements
name|Accountable
implements|,
name|Comparable
argument_list|<
name|Location
argument_list|>
block|{
DECL|field|generation
specifier|public
specifier|final
name|long
name|generation
decl_stmt|;
DECL|field|translogLocation
specifier|public
specifier|final
name|long
name|translogLocation
decl_stmt|;
DECL|field|size
specifier|public
specifier|final
name|int
name|size
decl_stmt|;
DECL|method|Location
name|Location
parameter_list|(
name|long
name|generation
parameter_list|,
name|long
name|translogLocation
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|generation
operator|=
name|generation
expr_stmt|;
name|this
operator|.
name|translogLocation
operator|=
name|translogLocation
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_HEADER
operator|+
literal|2
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[generation: "
operator|+
name|generation
operator|+
literal|", location: "
operator|+
name|translogLocation
operator|+
literal|", size: "
operator|+
name|size
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Location
name|o
parameter_list|)
block|{
if|if
condition|(
name|generation
operator|==
name|o
operator|.
name|generation
condition|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|translogLocation
argument_list|,
name|o
operator|.
name|translogLocation
argument_list|)
return|;
block|}
return|return
name|Long
operator|.
name|compare
argument_list|(
name|generation
argument_list|,
name|o
operator|.
name|generation
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|generation
operator|!=
name|location
operator|.
name|generation
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|translogLocation
operator|!=
name|location
operator|.
name|translogLocation
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|size
operator|==
name|location
operator|.
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|Long
operator|.
name|hashCode
argument_list|(
name|generation
argument_list|)
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|translogLocation
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|size
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**      * A snapshot of the transaction log, allows to iterate over all the transaction log operations.      */
DECL|interface|Snapshot
specifier|public
interface|interface
name|Snapshot
extends|extends
name|Releasable
block|{
comment|/**          * The total number of operations in the translog.          */
DECL|method|estimatedTotalOperations
name|int
name|estimatedTotalOperations
parameter_list|()
function_decl|;
comment|/**          * Returns the next operation in the snapshot or<code>null</code> if we reached the end.          */
DECL|method|next
name|Translog
operator|.
name|Operation
name|next
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
comment|/**      * A generic interface representing an operation performed on the transaction log.      * Each is associated with a type.      */
DECL|interface|Operation
specifier|public
interface|interface
name|Operation
extends|extends
name|Streamable
block|{
DECL|enum|Type
enum|enum
name|Type
block|{
DECL|enum constant|Deprecated
annotation|@
name|Deprecated
DECL|enum constant|CREATE
name|CREATE
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
DECL|enum constant|INDEX
name|INDEX
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
DECL|enum constant|DELETE
name|DELETE
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|Type
specifier|private
name|Type
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|fromId
specifier|public
specifier|static
name|Type
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|1
case|:
return|return
name|CREATE
return|;
case|case
literal|2
case|:
return|return
name|INDEX
return|;
case|case
literal|3
case|:
return|return
name|DELETE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No type mapped for ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|opType
name|Type
name|opType
parameter_list|()
function_decl|;
DECL|method|estimateSize
name|long
name|estimateSize
parameter_list|()
function_decl|;
DECL|method|getSource
name|Source
name|getSource
parameter_list|()
function_decl|;
block|}
DECL|class|Source
specifier|public
specifier|static
class|class
name|Source
block|{
DECL|field|source
specifier|public
specifier|final
name|BytesReference
name|source
decl_stmt|;
DECL|field|routing
specifier|public
specifier|final
name|String
name|routing
decl_stmt|;
DECL|field|parent
specifier|public
specifier|final
name|String
name|parent
decl_stmt|;
DECL|field|timestamp
specifier|public
specifier|final
name|long
name|timestamp
decl_stmt|;
DECL|field|ttl
specifier|public
specifier|final
name|long
name|ttl
decl_stmt|;
DECL|method|Source
specifier|public
name|Source
parameter_list|(
name|BytesReference
name|source
parameter_list|,
name|String
name|routing
parameter_list|,
name|String
name|parent
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|long
name|ttl
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
block|}
block|}
DECL|class|Index
specifier|public
specifier|static
class|class
name|Index
implements|implements
name|Operation
block|{
DECL|field|SERIALIZATION_FORMAT
specifier|public
specifier|static
specifier|final
name|int
name|SERIALIZATION_FORMAT
init|=
literal|7
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|seqNo
specifier|private
name|long
name|seqNo
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
name|Versions
operator|.
name|MATCH_ANY
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|field|source
specifier|private
name|BytesReference
name|source
decl_stmt|;
DECL|field|routing
specifier|private
name|String
name|routing
decl_stmt|;
DECL|field|parent
specifier|private
name|String
name|parent
decl_stmt|;
DECL|field|timestamp
specifier|private
name|long
name|timestamp
decl_stmt|;
DECL|field|ttl
specifier|private
name|long
name|ttl
decl_stmt|;
DECL|method|Index
specifier|public
name|Index
parameter_list|()
block|{         }
DECL|method|Index
specifier|public
name|Index
parameter_list|(
name|Engine
operator|.
name|Index
name|index
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|index
operator|.
name|id
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|index
operator|.
name|type
argument_list|()
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|index
operator|.
name|source
argument_list|()
expr_stmt|;
name|this
operator|.
name|routing
operator|=
name|index
operator|.
name|routing
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|index
operator|.
name|parent
argument_list|()
expr_stmt|;
name|this
operator|.
name|seqNo
operator|=
name|index
operator|.
name|seqNo
argument_list|()
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|index
operator|.
name|version
argument_list|()
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|index
operator|.
name|timestamp
argument_list|()
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|index
operator|.
name|ttl
argument_list|()
expr_stmt|;
name|this
operator|.
name|versionType
operator|=
name|index
operator|.
name|versionType
argument_list|()
expr_stmt|;
block|}
DECL|method|Index
specifier|public
name|Index
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|byte
index|[]
name|source
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|source
operator|=
operator|new
name|BytesArray
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|seqNo
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|version
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|INDEX
return|;
block|}
annotation|@
name|Override
DECL|method|estimateSize
specifier|public
name|long
name|estimateSize
parameter_list|()
block|{
return|return
operator|(
operator|(
name|id
operator|.
name|length
argument_list|()
operator|+
name|type
operator|.
name|length
argument_list|()
operator|)
operator|*
literal|2
operator|)
operator|+
name|source
operator|.
name|length
argument_list|()
operator|+
literal|12
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|routing
return|;
block|}
DECL|method|parent
specifier|public
name|String
name|parent
parameter_list|()
block|{
return|return
name|this
operator|.
name|parent
return|;
block|}
DECL|method|timestamp
specifier|public
name|long
name|timestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
DECL|method|ttl
specifier|public
name|long
name|ttl
parameter_list|()
block|{
return|return
name|this
operator|.
name|ttl
return|;
block|}
DECL|method|source
specifier|public
name|BytesReference
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
DECL|method|seqNo
specifier|public
name|long
name|seqNo
parameter_list|()
block|{
return|return
name|seqNo
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|versionType
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
return|return
operator|new
name|Source
argument_list|(
name|source
argument_list|,
name|routing
argument_list|,
name|parent
argument_list|,
name|timestamp
argument_list|,
name|ttl
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// version
name|id
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|source
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|version
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|routing
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|version
operator|>=
literal|2
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|parent
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|version
operator|>=
literal|3
condition|)
block|{
name|this
operator|.
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|4
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|5
condition|)
block|{
name|this
operator|.
name|ttl
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|6
condition|)
block|{
name|this
operator|.
name|versionType
operator|=
name|VersionType
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|7
condition|)
block|{
name|this
operator|.
name|seqNo
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to read ["
operator|+
name|type
operator|+
literal|"]["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
assert|assert
name|versionType
operator|.
name|validateVersionForWrites
argument_list|(
name|version
argument_list|)
assert|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|SERIALIZATION_FORMAT
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytesReference
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|routing
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|versionType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|seqNo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Index
name|index
init|=
operator|(
name|Index
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|version
operator|!=
name|index
operator|.
name|version
operator|||
name|seqNo
operator|!=
name|index
operator|.
name|seqNo
operator|||
name|timestamp
operator|!=
name|index
operator|.
name|timestamp
operator|||
name|ttl
operator|!=
name|index
operator|.
name|ttl
operator|||
name|id
operator|.
name|equals
argument_list|(
name|index
operator|.
name|id
argument_list|)
operator|==
literal|false
operator|||
name|type
operator|.
name|equals
argument_list|(
name|index
operator|.
name|type
argument_list|)
operator|==
literal|false
operator|||
name|versionType
operator|!=
name|index
operator|.
name|versionType
operator|||
name|source
operator|.
name|equals
argument_list|(
name|index
operator|.
name|source
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|routing
operator|!=
literal|null
condition|?
operator|!
name|routing
operator|.
name|equals
argument_list|(
name|index
operator|.
name|routing
argument_list|)
else|:
name|index
operator|.
name|routing
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
operator|(
name|parent
operator|!=
literal|null
condition|?
operator|!
name|parent
operator|.
name|equals
argument_list|(
name|index
operator|.
name|parent
argument_list|)
else|:
name|index
operator|.
name|parent
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|id
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|type
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|seqNo
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|versionType
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|source
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|routing
operator|!=
literal|null
condition|?
name|routing
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|parent
operator|!=
literal|null
condition|?
name|parent
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Index{"
operator|+
literal|"id='"
operator|+
name|id
operator|+
literal|'\''
operator|+
literal|", type='"
operator|+
name|type
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
DECL|class|Delete
specifier|public
specifier|static
class|class
name|Delete
implements|implements
name|Operation
block|{
DECL|field|SERIALIZATION_FORMAT
specifier|public
specifier|static
specifier|final
name|int
name|SERIALIZATION_FORMAT
init|=
literal|3
decl_stmt|;
DECL|field|uid
specifier|private
name|Term
name|uid
decl_stmt|;
DECL|field|seqNo
specifier|private
name|long
name|seqNo
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
name|Versions
operator|.
name|MATCH_ANY
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|method|Delete
specifier|public
name|Delete
parameter_list|()
block|{         }
DECL|method|Delete
specifier|public
name|Delete
parameter_list|(
name|Engine
operator|.
name|Delete
name|delete
parameter_list|)
block|{
name|this
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|,
name|delete
operator|.
name|seqNo
argument_list|()
argument_list|,
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|delete
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** utility for testing */
DECL|method|Delete
specifier|public
name|Delete
parameter_list|(
name|Term
name|uid
parameter_list|)
block|{
name|this
argument_list|(
name|uid
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
block|}
DECL|method|Delete
specifier|public
name|Delete
parameter_list|(
name|Term
name|uid
parameter_list|,
name|long
name|seqNo
parameter_list|,
name|long
name|version
parameter_list|,
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
name|this
operator|.
name|seqNo
operator|=
name|seqNo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|DELETE
return|;
block|}
annotation|@
name|Override
DECL|method|estimateSize
specifier|public
name|long
name|estimateSize
parameter_list|()
block|{
return|return
operator|(
operator|(
name|uid
operator|.
name|field
argument_list|()
operator|.
name|length
argument_list|()
operator|+
name|uid
operator|.
name|text
argument_list|()
operator|.
name|length
argument_list|()
operator|)
operator|*
literal|2
operator|)
operator|+
literal|20
return|;
block|}
DECL|method|uid
specifier|public
name|Term
name|uid
parameter_list|()
block|{
return|return
name|this
operator|.
name|uid
return|;
block|}
DECL|method|seqNo
specifier|public
name|long
name|seqNo
parameter_list|()
block|{
return|return
name|seqNo
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|versionType
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"trying to read doc source from delete operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// version
name|uid
operator|=
operator|new
name|Term
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|>=
literal|1
condition|)
block|{
name|this
operator|.
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|2
condition|)
block|{
name|this
operator|.
name|versionType
operator|=
name|VersionType
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|3
condition|)
block|{
name|this
operator|.
name|seqNo
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
assert|assert
name|versionType
operator|.
name|validateVersionForWrites
argument_list|(
name|version
argument_list|)
assert|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|SERIALIZATION_FORMAT
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|uid
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|uid
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|versionType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|seqNo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Delete
name|delete
init|=
operator|(
name|Delete
operator|)
name|o
decl_stmt|;
return|return
name|version
operator|==
name|delete
operator|.
name|version
operator|&&
name|seqNo
operator|==
name|delete
operator|.
name|seqNo
operator|&&
name|uid
operator|.
name|equals
argument_list|(
name|delete
operator|.
name|uid
argument_list|)
operator|&&
name|versionType
operator|==
name|delete
operator|.
name|versionType
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|uid
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|seqNo
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|versionType
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Delete{"
operator|+
literal|"uid="
operator|+
name|uid
operator|+
literal|'}'
return|;
block|}
block|}
DECL|enum|Durability
specifier|public
enum|enum
name|Durability
block|{
comment|/**          * Async durability - translogs are synced based on a time interval.          */
DECL|enum constant|ASYNC
name|ASYNC
block|,
comment|/**          * Request durability - translogs are synced for each high levle request (bulk, index, delete)          */
DECL|enum constant|REQUEST
name|REQUEST
block|;      }
DECL|method|verifyChecksum
specifier|private
specifier|static
name|void
name|verifyChecksum
parameter_list|(
name|BufferedChecksumStreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This absolutely must come first, or else reading the checksum becomes part of the checksum
name|long
name|expectedChecksum
init|=
name|in
operator|.
name|getChecksum
argument_list|()
decl_stmt|;
name|long
name|readChecksum
init|=
name|in
operator|.
name|readInt
argument_list|()
operator|&
literal|0xFFFF_FFFFL
decl_stmt|;
if|if
condition|(
name|readChecksum
operator|!=
name|expectedChecksum
condition|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"translog stream is corrupted, expected: 0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|expectedChecksum
argument_list|)
operator|+
literal|", got: 0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|readChecksum
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a list of operations written with {@link #writeOperations(StreamOutput, List)}      */
DECL|method|readOperations
specifier|public
specifier|static
name|List
argument_list|<
name|Operation
argument_list|>
name|readOperations
parameter_list|(
name|StreamInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numOps
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|BufferedChecksumStreamInput
name|checksumStreamInput
init|=
operator|new
name|BufferedChecksumStreamInput
argument_list|(
name|input
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
name|i
operator|++
control|)
block|{
name|operations
operator|.
name|add
argument_list|(
name|readOperation
argument_list|(
name|checksumStreamInput
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|operations
return|;
block|}
DECL|method|readOperation
specifier|static
name|Translog
operator|.
name|Operation
name|readOperation
parameter_list|(
name|BufferedChecksumStreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Translog
operator|.
name|Operation
name|operation
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|opSize
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|opSize
operator|<
literal|4
condition|)
block|{
comment|// 4byte for the checksum
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"operation size must be at least 4 but was: "
operator|+
name|opSize
argument_list|)
throw|;
block|}
name|in
operator|.
name|resetDigest
argument_list|()
expr_stmt|;
comment|// size is not part of the checksum!
if|if
condition|(
name|in
operator|.
name|markSupported
argument_list|()
condition|)
block|{
comment|// if we can we validate the checksum first
comment|// we are sometimes called when mark is not supported this is the case when
comment|// we are sending translogs across the network with LZ4 compression enabled - currently there is no way s
comment|// to prevent this unfortunately.
name|in
operator|.
name|mark
argument_list|(
name|opSize
argument_list|)
expr_stmt|;
name|in
operator|.
name|skip
argument_list|(
name|opSize
operator|-
literal|4
argument_list|)
expr_stmt|;
name|verifyChecksum
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|Translog
operator|.
name|Operation
operator|.
name|Type
name|type
init|=
name|Translog
operator|.
name|Operation
operator|.
name|Type
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
name|operation
operator|=
name|newOperationFromType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|operation
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|verifyChecksum
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TruncatedTranslogException
argument_list|(
literal|"reached premature end of file, translog is truncated"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
decl||
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"translog corruption while reading from stream"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|operation
return|;
block|}
comment|/**      * Writes all operations in the given iterable to the given output stream including the size of the array      * use {@link #readOperations(StreamInput)} to read it back.      */
DECL|method|writeOperations
specifier|public
specifier|static
name|void
name|writeOperations
parameter_list|(
name|StreamOutput
name|outStream
parameter_list|,
name|List
argument_list|<
name|Operation
argument_list|>
name|toWrite
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ReleasableBytesStreamOutput
name|out
init|=
operator|new
name|ReleasableBytesStreamOutput
argument_list|(
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|)
decl_stmt|;
try|try
block|{
name|outStream
operator|.
name|writeInt
argument_list|(
name|toWrite
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|BufferedChecksumStreamOutput
name|checksumStreamOutput
init|=
operator|new
name|BufferedChecksumStreamOutput
argument_list|(
name|out
argument_list|)
decl_stmt|;
for|for
control|(
name|Operation
name|op
range|:
name|toWrite
control|)
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|out
operator|.
name|position
argument_list|()
decl_stmt|;
name|out
operator|.
name|skip
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
name|writeOperationNoSize
argument_list|(
name|checksumStreamOutput
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|out
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|operationSize
init|=
call|(
name|int
call|)
argument_list|(
name|out
operator|.
name|position
argument_list|()
operator|-
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
operator|-
name|start
argument_list|)
decl_stmt|;
name|out
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|operationSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|seek
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|ReleasablePagedBytesReference
name|bytes
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|bytes
operator|.
name|writeTo
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeOperationNoSize
specifier|public
specifier|static
name|void
name|writeOperationNoSize
parameter_list|(
name|BufferedChecksumStreamOutput
name|out
parameter_list|,
name|Translog
operator|.
name|Operation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This BufferedChecksumStreamOutput remains unclosed on purpose,
comment|// because closing it closes the underlying stream, which we don't
comment|// want to do here.
name|out
operator|.
name|resetDigest
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|op
operator|.
name|opType
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|long
name|checksum
init|=
name|out
operator|.
name|getChecksum
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|checksum
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a new empty translog operation for the given {@link Translog.Operation.Type}      */
DECL|method|newOperationFromType
specifier|static
name|Translog
operator|.
name|Operation
name|newOperationFromType
parameter_list|(
name|Translog
operator|.
name|Operation
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CREATE
case|:
comment|// the deserialization logic in Index was identical to that of Create when create was deprecated
return|return
operator|new
name|Index
argument_list|()
return|;
case|case
name|DELETE
case|:
return|return
operator|new
name|Translog
operator|.
name|Delete
argument_list|()
return|;
case|case
name|INDEX
case|:
return|return
operator|new
name|Index
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No type for ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|prepareCommit
specifier|public
name|void
name|prepareCommit
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentCommittingTranslog
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"already committing a translog with generation: "
operator|+
name|currentCommittingTranslog
operator|.
name|getGeneration
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|TranslogWriter
name|oldCurrent
init|=
name|current
decl_stmt|;
name|oldCurrent
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
name|oldCurrent
operator|.
name|sync
argument_list|()
expr_stmt|;
name|currentCommittingTranslog
operator|=
name|current
operator|.
name|immutableReader
argument_list|()
expr_stmt|;
name|Path
name|checkpoint
init|=
name|location
operator|.
name|resolve
argument_list|(
name|CHECKPOINT_FILE_NAME
argument_list|)
decl_stmt|;
assert|assert
name|Checkpoint
operator|.
name|read
argument_list|(
name|checkpoint
argument_list|)
operator|.
name|generation
operator|==
name|currentCommittingTranslog
operator|.
name|getGeneration
argument_list|()
assert|;
name|Path
name|commitCheckpoint
init|=
name|location
operator|.
name|resolve
argument_list|(
name|getCommitCheckpointFileName
argument_list|(
name|currentCommittingTranslog
operator|.
name|getGeneration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|checkpoint
argument_list|,
name|commitCheckpoint
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|fsync
argument_list|(
name|commitCheckpoint
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|fsync
argument_list|(
name|commitCheckpoint
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create a new translog file - this will sync it and update the checkpoint data;
name|current
operator|=
name|createWriter
argument_list|(
name|current
operator|.
name|getGeneration
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// notify all outstanding views of the new translog (no views are created now as
comment|// we hold a write lock).
for|for
control|(
name|View
name|view
range|:
name|outstandingViews
control|)
block|{
name|view
operator|.
name|onNewTranslog
argument_list|(
name|currentCommittingTranslog
operator|.
name|clone
argument_list|()
argument_list|,
name|current
operator|.
name|newReaderFromWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|oldCurrent
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"current translog set to [{}]"
argument_list|,
name|current
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|oldCurrent
operator|.
name|syncNeeded
argument_list|()
operator|==
literal|false
operator|:
literal|"old translog oldCurrent must not need a sync"
assert|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// tragic event
throw|throw
name|t
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|commit
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
name|ImmutableTranslogReader
name|toClose
init|=
literal|null
decl_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentCommittingTranslog
operator|==
literal|null
condition|)
block|{
name|prepareCommit
argument_list|()
expr_stmt|;
block|}
name|lastCommittedTranslogFileGeneration
operator|=
name|current
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
comment|// this is important - otherwise old files will not be cleaned up
if|if
condition|(
name|recoveredTranslogs
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|recoveredTranslogs
argument_list|)
expr_stmt|;
name|recoveredTranslogs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|toClose
operator|=
name|this
operator|.
name|currentCommittingTranslog
expr_stmt|;
name|this
operator|.
name|currentCommittingTranslog
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|toClose
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|rollback
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * References a transaction log generation      */
DECL|class|TranslogGeneration
specifier|public
specifier|final
specifier|static
class|class
name|TranslogGeneration
block|{
DECL|field|translogUUID
specifier|public
specifier|final
name|String
name|translogUUID
decl_stmt|;
DECL|field|translogFileGeneration
specifier|public
specifier|final
name|long
name|translogFileGeneration
decl_stmt|;
DECL|method|TranslogGeneration
specifier|public
name|TranslogGeneration
parameter_list|(
name|String
name|translogUUID
parameter_list|,
name|long
name|translogFileGeneration
parameter_list|)
block|{
name|this
operator|.
name|translogUUID
operator|=
name|translogUUID
expr_stmt|;
name|this
operator|.
name|translogFileGeneration
operator|=
name|translogFileGeneration
expr_stmt|;
block|}
block|}
comment|/**      * Returns the current generation of this translog. This corresponds to the latest uncommitted translog generation      */
DECL|method|getGeneration
specifier|public
name|TranslogGeneration
name|getGeneration
parameter_list|()
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
return|return
operator|new
name|TranslogGeneration
argument_list|(
name|translogUUID
argument_list|,
name|currentFileGeneration
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns<code>true</code> iff the given generation is the current gbeneration of this translog      */
DECL|method|isCurrent
specifier|public
name|boolean
name|isCurrent
parameter_list|(
name|TranslogGeneration
name|generation
parameter_list|)
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|generation
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|generation
operator|.
name|translogUUID
operator|.
name|equals
argument_list|(
name|translogUUID
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"commit belongs to a different translog: "
operator|+
name|generation
operator|.
name|translogUUID
operator|+
literal|" vs. "
operator|+
name|translogUUID
argument_list|)
throw|;
block|}
return|return
name|generation
operator|.
name|translogFileGeneration
operator|==
name|currentFileGeneration
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getFirstOperationPosition
name|long
name|getFirstOperationPosition
parameter_list|()
block|{
comment|// for testing
return|return
name|current
operator|.
name|getFirstOperationOffset
argument_list|()
return|;
block|}
DECL|method|ensureOpen
specifier|private
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"translog is already closed"
argument_list|,
name|current
operator|.
name|getTragicException
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * The number of currently open views      */
DECL|method|getNumOpenViews
name|int
name|getNumOpenViews
parameter_list|()
block|{
return|return
name|outstandingViews
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getChannelFactory
name|TranslogWriter
operator|.
name|ChannelFactory
name|getChannelFactory
parameter_list|()
block|{
return|return
name|TranslogWriter
operator|.
name|ChannelFactory
operator|.
name|DEFAULT
return|;
block|}
comment|/** If this {@code Translog} was closed as a side-effect of a tragic exception,      *  e.g. disk full while flushing a new segment, this returns the root cause exception.      *  Otherwise (no tragic exception has occurred) it returns null. */
DECL|method|getTragicException
specifier|public
name|Throwable
name|getTragicException
parameter_list|()
block|{
return|return
name|current
operator|.
name|getTragicException
argument_list|()
return|;
block|}
comment|/** Reads and returns the current checkpoint */
DECL|method|readCheckpoint
specifier|final
name|Checkpoint
name|readCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Checkpoint
operator|.
name|read
argument_list|(
name|location
operator|.
name|resolve
argument_list|(
name|CHECKPOINT_FILE_NAME
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

