begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * A snapshot composed out of multiple snapshots  */
end_comment

begin_class
DECL|class|MultiSnapshot
specifier|final
class|class
name|MultiSnapshot
implements|implements
name|Translog
operator|.
name|Snapshot
block|{
DECL|field|translogs
specifier|private
specifier|final
name|Translog
operator|.
name|Snapshot
index|[]
name|translogs
decl_stmt|;
DECL|field|totalOperations
specifier|private
specifier|final
name|int
name|totalOperations
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
comment|/**      * Creates a new point in time snapshot of the given snapshots. Those snapshots are always iterated in-order.      */
DECL|method|MultiSnapshot
name|MultiSnapshot
parameter_list|(
name|Translog
operator|.
name|Snapshot
index|[]
name|translogs
parameter_list|)
block|{
name|this
operator|.
name|translogs
operator|=
name|translogs
expr_stmt|;
name|totalOperations
operator|=
name|Arrays
operator|.
name|stream
argument_list|(
name|translogs
argument_list|)
operator|.
name|mapToInt
argument_list|(
name|Translog
operator|.
name|Snapshot
operator|::
name|totalOperations
argument_list|)
operator|.
name|sum
argument_list|()
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|totalOperations
specifier|public
name|int
name|totalOperations
parameter_list|()
block|{
return|return
name|totalOperations
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|Translog
operator|.
name|Operation
name|next
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
init|;
name|index
operator|<
name|translogs
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
specifier|final
name|Translog
operator|.
name|Snapshot
name|current
init|=
name|translogs
index|[
name|index
index|]
decl_stmt|;
name|Translog
operator|.
name|Operation
name|op
init|=
name|current
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
comment|// if we are null we move to the next snapshot
return|return
name|op
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

