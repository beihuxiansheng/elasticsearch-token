begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomAccessOrds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
operator|.
name|Arc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
operator|.
name|BytesReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|Ordinals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|FSTBytesAtomicFieldData
specifier|public
class|class
name|FSTBytesAtomicFieldData
extends|extends
name|AbstractAtomicOrdinalsFieldData
block|{
comment|// 0 ordinal in values means no value (its null)
DECL|field|ordinals
specifier|protected
specifier|final
name|Ordinals
name|ordinals
decl_stmt|;
DECL|field|size
specifier|private
name|long
name|size
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|fst
specifier|private
specifier|final
name|FST
argument_list|<
name|Long
argument_list|>
name|fst
decl_stmt|;
DECL|method|FSTBytesAtomicFieldData
specifier|public
name|FSTBytesAtomicFieldData
parameter_list|(
name|FST
argument_list|<
name|Long
argument_list|>
name|fst
parameter_list|,
name|Ordinals
name|ordinals
parameter_list|)
block|{
name|this
operator|.
name|ordinals
operator|=
name|ordinals
expr_stmt|;
name|this
operator|.
name|fst
operator|=
name|fst
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|long
name|size
init|=
name|ordinals
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
comment|// FST
name|size
operator|+=
name|fst
operator|==
literal|null
condition|?
literal|0
else|:
name|fst
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
name|List
argument_list|<
name|Accountable
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"ordinals"
argument_list|,
name|ordinals
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fst
operator|!=
literal|null
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"terms"
argument_list|,
name|fst
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|resources
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOrdinalsValues
specifier|public
name|RandomAccessOrds
name|getOrdinalsValues
parameter_list|()
block|{
return|return
name|ordinals
operator|.
name|ordinals
argument_list|(
operator|new
name|ValuesHolder
argument_list|(
name|fst
argument_list|)
argument_list|)
return|;
block|}
DECL|class|ValuesHolder
specifier|private
specifier|static
class|class
name|ValuesHolder
implements|implements
name|Ordinals
operator|.
name|ValuesHolder
block|{
DECL|field|fst
specifier|private
specifier|final
name|FST
argument_list|<
name|Long
argument_list|>
name|fst
decl_stmt|;
comment|// per-thread resources
DECL|field|scratch
specifier|private
specifier|final
name|BytesRefBuilder
name|scratch
decl_stmt|;
DECL|field|in
specifier|protected
specifier|final
name|BytesReader
name|in
decl_stmt|;
DECL|field|firstArc
specifier|protected
specifier|final
name|Arc
argument_list|<
name|Long
argument_list|>
name|firstArc
init|=
operator|new
name|Arc
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|scratchArc
specifier|protected
specifier|final
name|Arc
argument_list|<
name|Long
argument_list|>
name|scratchArc
init|=
operator|new
name|Arc
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|scratchInts
specifier|protected
specifier|final
name|IntsRefBuilder
name|scratchInts
init|=
operator|new
name|IntsRefBuilder
argument_list|()
decl_stmt|;
DECL|method|ValuesHolder
name|ValuesHolder
parameter_list|(
name|FST
argument_list|<
name|Long
argument_list|>
name|fst
parameter_list|)
block|{
name|this
operator|.
name|fst
operator|=
name|fst
expr_stmt|;
name|scratch
operator|=
operator|new
name|BytesRefBuilder
argument_list|()
expr_stmt|;
name|in
operator|=
name|fst
operator|.
name|getBytesReader
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
assert|assert
name|ord
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
assert|;
name|in
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fst
operator|.
name|getFirstArc
argument_list|(
name|firstArc
argument_list|)
expr_stmt|;
try|try
block|{
name|IntsRef
name|output
init|=
name|Util
operator|.
name|getByOutput
argument_list|(
name|fst
argument_list|,
name|ord
argument_list|,
name|in
argument_list|,
name|firstArc
argument_list|,
name|scratchArc
argument_list|,
name|scratchInts
argument_list|)
decl_stmt|;
name|scratch
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scratch
operator|.
name|grow
argument_list|(
name|output
operator|.
name|length
argument_list|)
expr_stmt|;
name|Util
operator|.
name|toBytesRef
argument_list|(
name|output
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//bogus
block|}
return|return
name|scratch
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

