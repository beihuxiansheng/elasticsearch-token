begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
operator|.
name|XFieldComparatorSource
operator|.
name|Nested
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
operator|.
name|BytesRefFieldComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
operator|.
name|AbstractAtomicOrdinalsFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/** Fielddata view of the _uid field on indices that do not index _uid but _id.  *  It gets fielddata on the {@code _id field}, which is in-memory since the _id  *  field does not have doc values, and prepends {@code ${type}#} to all values.  *  Note that it does not add memory compared to what fielddata on the _id is  *  already using: this is just a view.  *  TODO: Remove fielddata access on _uid and _id, or add doc values to _id.  */
end_comment

begin_class
DECL|class|UidIndexFieldData
specifier|public
specifier|final
class|class
name|UidIndexFieldData
implements|implements
name|IndexOrdinalsFieldData
block|{
DECL|field|index
specifier|private
specifier|final
name|Index
name|index
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|prefix
specifier|private
specifier|final
name|BytesRef
name|prefix
decl_stmt|;
DECL|field|idFieldData
specifier|private
specifier|final
name|IndexOrdinalsFieldData
name|idFieldData
decl_stmt|;
DECL|method|UidIndexFieldData
specifier|public
name|UidIndexFieldData
parameter_list|(
name|Index
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|IndexOrdinalsFieldData
name|idFieldData
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|BytesRefBuilder
name|prefix
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|prefix
operator|.
name|append
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|prefix
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
literal|'#'
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
operator|.
name|toBytesRef
argument_list|()
expr_stmt|;
name|this
operator|.
name|idFieldData
operator|=
name|idFieldData
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|index
specifier|public
name|Index
name|index
parameter_list|()
block|{
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|getFieldName
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|UidFieldMapper
operator|.
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|sortField
specifier|public
name|SortField
name|sortField
parameter_list|(
name|Object
name|missingValue
parameter_list|,
name|MultiValueMode
name|sortMode
parameter_list|,
name|Nested
name|nested
parameter_list|,
name|boolean
name|reverse
parameter_list|)
block|{
name|XFieldComparatorSource
name|source
init|=
operator|new
name|BytesRefFieldComparatorSource
argument_list|(
name|this
argument_list|,
name|missingValue
argument_list|,
name|sortMode
argument_list|,
name|nested
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortField
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|source
argument_list|,
name|reverse
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|AtomicOrdinalsFieldData
name|load
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|UidAtomicFieldData
argument_list|(
name|prefix
argument_list|,
name|idFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadDirect
specifier|public
name|AtomicOrdinalsFieldData
name|loadDirect
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|UidAtomicFieldData
argument_list|(
name|prefix
argument_list|,
name|idFieldData
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|idFieldData
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadGlobal
specifier|public
name|IndexOrdinalsFieldData
name|loadGlobal
parameter_list|(
name|DirectoryReader
name|indexReader
parameter_list|)
block|{
return|return
operator|new
name|UidIndexFieldData
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|idFieldData
operator|.
name|loadGlobal
argument_list|(
name|indexReader
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|localGlobalDirect
specifier|public
name|IndexOrdinalsFieldData
name|localGlobalDirect
parameter_list|(
name|DirectoryReader
name|indexReader
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|UidIndexFieldData
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|idFieldData
operator|.
name|localGlobalDirect
argument_list|(
name|indexReader
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOrdinalMap
specifier|public
name|MultiDocValues
operator|.
name|OrdinalMap
name|getOrdinalMap
parameter_list|()
block|{
return|return
name|idFieldData
operator|.
name|getOrdinalMap
argument_list|()
return|;
block|}
DECL|class|UidAtomicFieldData
specifier|static
specifier|final
class|class
name|UidAtomicFieldData
implements|implements
name|AtomicOrdinalsFieldData
block|{
DECL|field|prefix
specifier|private
specifier|final
name|BytesRef
name|prefix
decl_stmt|;
DECL|field|idFieldData
specifier|private
specifier|final
name|AtomicOrdinalsFieldData
name|idFieldData
decl_stmt|;
DECL|method|UidAtomicFieldData
name|UidAtomicFieldData
parameter_list|(
name|BytesRef
name|prefix
parameter_list|,
name|AtomicOrdinalsFieldData
name|idFieldData
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|idFieldData
operator|=
name|idFieldData
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getScriptValues
specifier|public
name|ScriptDocValues
argument_list|<
name|?
argument_list|>
name|getScriptValues
parameter_list|()
block|{
return|return
name|AbstractAtomicOrdinalsFieldData
operator|.
name|DEFAULT_SCRIPT_FUNCTION
operator|.
name|apply
argument_list|(
name|getOrdinalsValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBytesValues
specifier|public
name|SortedBinaryDocValues
name|getBytesValues
parameter_list|()
block|{
return|return
name|FieldData
operator|.
name|toString
argument_list|(
name|getOrdinalsValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
literal|0
return|;
comment|// simple wrapper
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|idFieldData
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOrdinalsValues
specifier|public
name|SortedSetDocValues
name|getOrdinalsValues
parameter_list|()
block|{
name|SortedSetDocValues
name|idValues
init|=
name|idFieldData
operator|.
name|getOrdinalsValues
argument_list|()
decl_stmt|;
return|return
operator|new
name|SortedSetDocValues
argument_list|()
block|{
specifier|private
specifier|final
name|BytesRefBuilder
name|scratch
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|idValues
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|idValues
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|idValues
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|idValues
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|idValues
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|idValues
operator|.
name|nextOrd
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
name|scratch
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|scratch
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|scratch
operator|.
name|append
argument_list|(
name|idValues
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|scratch
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|idValues
operator|.
name|getValueCount
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

