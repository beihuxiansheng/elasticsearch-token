begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
operator|.
name|BytesRefFieldComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_class
DECL|class|BinaryDVIndexFieldData
specifier|public
class|class
name|BinaryDVIndexFieldData
extends|extends
name|DocValuesIndexFieldData
implements|implements
name|IndexFieldData
argument_list|<
name|BinaryDVAtomicFieldData
argument_list|>
block|{
DECL|method|BinaryDVIndexFieldData
specifier|public
name|BinaryDVIndexFieldData
parameter_list|(
name|Index
name|index
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|BinaryDVAtomicFieldData
name|load
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|BinaryDVAtomicFieldData
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|fieldName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadDirect
specifier|public
name|BinaryDVAtomicFieldData
name|loadDirect
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|load
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|sortField
specifier|public
name|SortField
name|sortField
parameter_list|(
annotation|@
name|Nullable
name|Object
name|missingValue
parameter_list|,
name|MultiValueMode
name|sortMode
parameter_list|,
name|XFieldComparatorSource
operator|.
name|Nested
name|nested
parameter_list|,
name|boolean
name|reverse
parameter_list|)
block|{
name|XFieldComparatorSource
name|source
init|=
operator|new
name|BytesRefFieldComparatorSource
argument_list|(
name|this
argument_list|,
name|missingValue
argument_list|,
name|sortMode
argument_list|,
name|nested
argument_list|)
decl_stmt|;
comment|/**          * Check if we can use a simple {@link SortedSetSortField} compatible with index sorting and          * returns a custom sort field otherwise.          */
if|if
condition|(
name|nested
operator|!=
literal|null
operator|||
operator|(
name|sortMode
operator|!=
name|MultiValueMode
operator|.
name|MAX
operator|&&
name|sortMode
operator|!=
name|MultiValueMode
operator|.
name|MIN
operator|)
operator|||
operator|(
name|source
operator|.
name|sortMissingFirst
argument_list|(
name|missingValue
argument_list|)
operator|==
literal|false
operator|&&
name|source
operator|.
name|sortMissingLast
argument_list|(
name|missingValue
argument_list|)
operator|==
literal|false
operator|)
condition|)
block|{
return|return
operator|new
name|SortField
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|source
argument_list|,
name|reverse
argument_list|)
return|;
block|}
name|SortField
name|sortField
init|=
operator|new
name|SortedSetSortField
argument_list|(
name|fieldName
argument_list|,
name|reverse
argument_list|,
name|sortMode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|?
name|SortedSetSelector
operator|.
name|Type
operator|.
name|MAX
else|:
name|SortedSetSelector
operator|.
name|Type
operator|.
name|MIN
argument_list|)
decl_stmt|;
name|sortField
operator|.
name|setMissingValue
argument_list|(
name|source
operator|.
name|sortMissingLast
argument_list|(
name|missingValue
argument_list|)
operator|^
name|reverse
condition|?
name|SortedSetSortField
operator|.
name|STRING_LAST
else|:
name|SortedSetSortField
operator|.
name|STRING_FIRST
argument_list|)
expr_stmt|;
return|return
name|sortField
return|;
block|}
block|}
end_class

end_unit

