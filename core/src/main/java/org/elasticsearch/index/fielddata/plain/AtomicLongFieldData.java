begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ScriptDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_comment
comment|/**  * Specialization of {@link AtomicNumericFieldData} for integers.  */
end_comment

begin_class
DECL|class|AtomicLongFieldData
specifier|abstract
class|class
name|AtomicLongFieldData
implements|implements
name|AtomicNumericFieldData
block|{
DECL|field|ramBytesUsed
specifier|private
specifier|final
name|long
name|ramBytesUsed
decl_stmt|;
comment|/** True if this numeric data is for a boolean field, and so only has values 0 and 1. */
DECL|field|isBoolean
specifier|private
specifier|final
name|boolean
name|isBoolean
decl_stmt|;
DECL|method|AtomicLongFieldData
name|AtomicLongFieldData
parameter_list|(
name|long
name|ramBytesUsed
parameter_list|,
name|boolean
name|isBoolean
parameter_list|)
block|{
name|this
operator|.
name|ramBytesUsed
operator|=
name|ramBytesUsed
expr_stmt|;
name|this
operator|.
name|isBoolean
operator|=
name|isBoolean
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|ramBytesUsed
return|;
block|}
annotation|@
name|Override
DECL|method|getScriptValues
specifier|public
specifier|final
name|ScriptDocValues
name|getScriptValues
parameter_list|()
block|{
if|if
condition|(
name|isBoolean
condition|)
block|{
return|return
operator|new
name|ScriptDocValues
operator|.
name|Booleans
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ScriptDocValues
operator|.
name|Longs
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBytesValues
specifier|public
specifier|final
name|SortedBinaryDocValues
name|getBytesValues
parameter_list|()
block|{
return|return
name|FieldData
operator|.
name|toString
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDoubleValues
specifier|public
specifier|final
name|SortedNumericDoubleValues
name|getDoubleValues
parameter_list|()
block|{
return|return
name|FieldData
operator|.
name|castToDouble
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{}
block|}
end_class

end_unit

