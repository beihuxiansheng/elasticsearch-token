begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.fieldcomparator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractSortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexOrdinalsFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Comparator source for string/binary values.  */
end_comment

begin_class
DECL|class|BytesRefFieldComparatorSource
specifier|public
class|class
name|BytesRefFieldComparatorSource
extends|extends
name|IndexFieldData
operator|.
name|XFieldComparatorSource
block|{
DECL|field|indexFieldData
specifier|private
specifier|final
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
decl_stmt|;
DECL|field|sortMode
specifier|private
specifier|final
name|MultiValueMode
name|sortMode
decl_stmt|;
DECL|field|missingValue
specifier|private
specifier|final
name|Object
name|missingValue
decl_stmt|;
DECL|field|nested
specifier|private
specifier|final
name|Nested
name|nested
decl_stmt|;
DECL|method|BytesRefFieldComparatorSource
specifier|public
name|BytesRefFieldComparatorSource
parameter_list|(
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
parameter_list|,
name|Object
name|missingValue
parameter_list|,
name|MultiValueMode
name|sortMode
parameter_list|,
name|Nested
name|nested
parameter_list|)
block|{
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
name|this
operator|.
name|sortMode
operator|=
name|sortMode
expr_stmt|;
name|this
operator|.
name|missingValue
operator|=
name|missingValue
expr_stmt|;
name|this
operator|.
name|nested
operator|=
name|nested
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reducedType
specifier|public
name|SortField
operator|.
name|Type
name|reducedType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|Type
operator|.
name|STRING
return|;
block|}
annotation|@
name|Override
DECL|method|missingValue
specifier|public
name|Object
name|missingValue
parameter_list|(
name|boolean
name|reversed
parameter_list|)
block|{
if|if
condition|(
name|sortMissingFirst
argument_list|(
name|missingValue
argument_list|)
operator|||
name|sortMissingLast
argument_list|(
name|missingValue
argument_list|)
condition|)
block|{
if|if
condition|(
name|sortMissingLast
argument_list|(
name|missingValue
argument_list|)
operator|^
name|reversed
condition|)
block|{
return|return
name|SortField
operator|.
name|STRING_LAST
return|;
block|}
else|else
block|{
return|return
name|SortField
operator|.
name|STRING_FIRST
return|;
block|}
block|}
comment|// otherwise we fill missing values ourselves
return|return
literal|null
return|;
block|}
DECL|method|getValues
specifier|protected
name|SortedBinaryDocValues
name|getValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|indexFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getBytesValues
argument_list|()
return|;
block|}
DECL|method|setScorer
specifier|protected
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|newComparator
specifier|public
name|FieldComparator
argument_list|<
name|?
argument_list|>
name|newComparator
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
block|{
assert|assert
name|indexFieldData
operator|==
literal|null
operator|||
name|fieldname
operator|.
name|equals
argument_list|(
name|indexFieldData
operator|.
name|getFieldName
argument_list|()
argument_list|)
assert|;
specifier|final
name|boolean
name|sortMissingLast
init|=
name|sortMissingLast
argument_list|(
name|missingValue
argument_list|)
operator|^
name|reversed
decl_stmt|;
specifier|final
name|BytesRef
name|missingBytes
init|=
operator|(
name|BytesRef
operator|)
name|missingObject
argument_list|(
name|missingValue
argument_list|,
name|reversed
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexFieldData
operator|instanceof
name|IndexOrdinalsFieldData
condition|)
block|{
return|return
operator|new
name|FieldComparator
operator|.
name|TermOrdValComparator
argument_list|(
name|numHits
argument_list|,
literal|null
argument_list|,
name|sortMissingLast
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|SortedDocValues
name|getSortedDocValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SortedSetDocValues
name|values
init|=
operator|(
operator|(
name|IndexOrdinalsFieldData
operator|)
name|indexFieldData
operator|)
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getOrdinalsValues
argument_list|()
decl_stmt|;
specifier|final
name|SortedDocValues
name|selectedValues
decl_stmt|;
if|if
condition|(
name|nested
operator|==
literal|null
condition|)
block|{
name|selectedValues
operator|=
name|sortMode
operator|.
name|select
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|BitSet
name|rootDocs
init|=
name|nested
operator|.
name|rootDocs
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|DocIdSetIterator
name|innerDocs
init|=
name|nested
operator|.
name|innerDocs
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|selectedValues
operator|=
name|sortMode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortMissingFirst
argument_list|(
name|missingValue
argument_list|)
operator|||
name|sortMissingLast
argument_list|(
name|missingValue
argument_list|)
condition|)
block|{
return|return
name|selectedValues
return|;
block|}
else|else
block|{
return|return
operator|new
name|ReplaceMissing
argument_list|(
name|selectedValues
argument_list|,
name|missingBytes
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|BytesRefFieldComparatorSource
operator|.
name|this
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
return|return
operator|new
name|FieldComparator
operator|.
name|TermValComparator
argument_list|(
name|numHits
argument_list|,
literal|null
argument_list|,
name|sortMissingLast
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|BinaryDocValues
name|getBinaryDocValues
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SortedBinaryDocValues
name|values
init|=
name|getValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|BinaryDocValues
name|selectedValues
decl_stmt|;
if|if
condition|(
name|nested
operator|==
literal|null
condition|)
block|{
name|selectedValues
operator|=
name|sortMode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|BitSet
name|rootDocs
init|=
name|nested
operator|.
name|rootDocs
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|DocIdSetIterator
name|innerDocs
init|=
name|nested
operator|.
name|innerDocs
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|selectedValues
operator|=
name|sortMode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingBytes
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|selectedValues
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|BytesRefFieldComparatorSource
operator|.
name|this
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * A view of a SortedDocValues where missing values      * are replaced with the specified term      */
comment|// TODO: move this out if we need it for other reasons
DECL|class|ReplaceMissing
specifier|static
class|class
name|ReplaceMissing
extends|extends
name|AbstractSortedDocValues
block|{
DECL|field|in
specifier|final
name|SortedDocValues
name|in
decl_stmt|;
DECL|field|substituteOrd
specifier|final
name|int
name|substituteOrd
decl_stmt|;
DECL|field|substituteTerm
specifier|final
name|BytesRef
name|substituteTerm
decl_stmt|;
DECL|field|exists
specifier|final
name|boolean
name|exists
decl_stmt|;
DECL|field|hasValue
name|boolean
name|hasValue
decl_stmt|;
DECL|method|ReplaceMissing
name|ReplaceMissing
parameter_list|(
name|SortedDocValues
name|in
parameter_list|,
name|BytesRef
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|substituteTerm
operator|=
name|term
expr_stmt|;
name|int
name|sub
init|=
name|in
operator|.
name|lookupTerm
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|<
literal|0
condition|)
block|{
name|substituteOrd
operator|=
operator|-
name|sub
operator|-
literal|1
expr_stmt|;
name|exists
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|substituteOrd
operator|=
name|sub
expr_stmt|;
name|exists
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|ordValue
specifier|public
name|int
name|ordValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasValue
operator|==
literal|false
condition|)
block|{
return|return
name|substituteOrd
return|;
block|}
name|int
name|ord
init|=
name|in
operator|.
name|ordValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|exists
operator|==
literal|false
operator|&&
name|ord
operator|>=
name|substituteOrd
condition|)
block|{
return|return
name|ord
operator|+
literal|1
return|;
block|}
else|else
block|{
return|return
name|ord
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|hasValue
operator|=
name|in
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|in
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
if|if
condition|(
name|exists
condition|)
block|{
return|return
name|in
operator|.
name|getValueCount
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|getValueCount
argument_list|()
operator|+
literal|1
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ord
operator|==
name|substituteOrd
condition|)
block|{
return|return
name|substituteTerm
return|;
block|}
elseif|else
if|if
condition|(
name|exists
operator|==
literal|false
operator|&&
name|ord
operator|>
name|substituteOrd
condition|)
block|{
return|return
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
block|}
comment|// we let termsenum etc fall back to the default implementation
block|}
block|}
end_class

end_unit

