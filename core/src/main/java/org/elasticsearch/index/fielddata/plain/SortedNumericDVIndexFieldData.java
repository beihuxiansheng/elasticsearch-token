begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|HalfFloatPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedNumericSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedNumericSortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
operator|.
name|XFieldComparatorSource
operator|.
name|Nested
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|NumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
operator|.
name|DoubleValuesComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
operator|.
name|FloatValuesComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
operator|.
name|LongValuesComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * FieldData backed by {@link LeafReader#getSortedNumericDocValues(String)}  * @see DocValuesType#SORTED_NUMERIC  */
end_comment

begin_class
DECL|class|SortedNumericDVIndexFieldData
specifier|public
class|class
name|SortedNumericDVIndexFieldData
extends|extends
name|DocValuesIndexFieldData
implements|implements
name|IndexNumericFieldData
block|{
DECL|field|numericType
specifier|private
specifier|final
name|NumericType
name|numericType
decl_stmt|;
DECL|method|SortedNumericDVIndexFieldData
specifier|public
name|SortedNumericDVIndexFieldData
parameter_list|(
name|Index
name|index
parameter_list|,
name|String
name|fieldNames
parameter_list|,
name|NumericType
name|numericType
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|numericType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"numericType must be non-null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|numericType
operator|=
name|numericType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sortField
specifier|public
name|SortField
name|sortField
parameter_list|(
name|Object
name|missingValue
parameter_list|,
name|MultiValueMode
name|sortMode
parameter_list|,
name|Nested
name|nested
parameter_list|,
name|boolean
name|reverse
parameter_list|)
block|{
specifier|final
name|XFieldComparatorSource
name|source
decl_stmt|;
switch|switch
condition|(
name|numericType
condition|)
block|{
case|case
name|HALF_FLOAT
case|:
case|case
name|FLOAT
case|:
name|source
operator|=
operator|new
name|FloatValuesComparatorSource
argument_list|(
name|this
argument_list|,
name|missingValue
argument_list|,
name|sortMode
argument_list|,
name|nested
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|source
operator|=
operator|new
name|DoubleValuesComparatorSource
argument_list|(
name|this
argument_list|,
name|missingValue
argument_list|,
name|sortMode
argument_list|,
name|nested
argument_list|)
expr_stmt|;
break|break;
default|default:
assert|assert
operator|!
name|numericType
operator|.
name|isFloatingPoint
argument_list|()
assert|;
name|source
operator|=
operator|new
name|LongValuesComparatorSource
argument_list|(
name|this
argument_list|,
name|missingValue
argument_list|,
name|sortMode
argument_list|,
name|nested
argument_list|)
expr_stmt|;
break|break;
block|}
comment|/**          * Check if we can use a simple {@link SortedNumericSortField} compatible with index sorting and          * returns a custom sort field otherwise.          */
if|if
condition|(
name|nested
operator|!=
literal|null
operator|||
operator|(
name|sortMode
operator|!=
name|MultiValueMode
operator|.
name|MAX
operator|&&
name|sortMode
operator|!=
name|MultiValueMode
operator|.
name|MIN
operator|)
operator|||
name|numericType
operator|==
name|NumericType
operator|.
name|HALF_FLOAT
condition|)
block|{
return|return
operator|new
name|SortField
argument_list|(
name|fieldName
argument_list|,
name|source
argument_list|,
name|reverse
argument_list|)
return|;
block|}
specifier|final
name|SortField
name|sortField
decl_stmt|;
specifier|final
name|SortedNumericSelector
operator|.
name|Type
name|selectorType
init|=
name|sortMode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|?
name|SortedNumericSelector
operator|.
name|Type
operator|.
name|MAX
else|:
name|SortedNumericSelector
operator|.
name|Type
operator|.
name|MIN
decl_stmt|;
switch|switch
condition|(
name|numericType
condition|)
block|{
case|case
name|FLOAT
case|:
name|sortField
operator|=
operator|new
name|SortedNumericSortField
argument_list|(
name|fieldName
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|FLOAT
argument_list|,
name|reverse
argument_list|,
name|selectorType
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|sortField
operator|=
operator|new
name|SortedNumericSortField
argument_list|(
name|fieldName
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|DOUBLE
argument_list|,
name|reverse
argument_list|,
name|selectorType
argument_list|)
expr_stmt|;
break|break;
default|default:
assert|assert
operator|!
name|numericType
operator|.
name|isFloatingPoint
argument_list|()
assert|;
name|sortField
operator|=
operator|new
name|SortedNumericSortField
argument_list|(
name|fieldName
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|,
name|reverse
argument_list|,
name|selectorType
argument_list|)
expr_stmt|;
break|break;
block|}
name|sortField
operator|.
name|setMissingValue
argument_list|(
name|source
operator|.
name|missingObject
argument_list|(
name|missingValue
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sortField
return|;
block|}
annotation|@
name|Override
DECL|method|getNumericType
specifier|public
name|NumericType
name|getNumericType
parameter_list|()
block|{
return|return
name|numericType
return|;
block|}
annotation|@
name|Override
DECL|method|loadDirect
specifier|public
name|AtomicNumericFieldData
name|loadDirect
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|load
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|AtomicNumericFieldData
name|load
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
specifier|final
name|LeafReader
name|reader
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
specifier|final
name|String
name|field
init|=
name|fieldName
decl_stmt|;
switch|switch
condition|(
name|numericType
condition|)
block|{
case|case
name|HALF_FLOAT
case|:
return|return
operator|new
name|SortedNumericHalfFloatFieldData
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|SortedNumericFloatFieldData
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|SortedNumericDoubleFieldData
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
return|;
default|default:
return|return
operator|new
name|SortedNumericLongFieldData
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
name|numericType
argument_list|)
return|;
block|}
block|}
comment|/**      * FieldData implementation for integral types.      *<p>      * Order of values within a document is consistent with      * {@link Long#compareTo(Long)}.      *<p>      * Although the API is multi-valued, most codecs in Lucene specialize      * for the case where documents have at most one value. In this case      * {@link DocValues#unwrapSingleton(SortedNumericDocValues)} will return      * the underlying single-valued NumericDocValues representation.      */
DECL|class|SortedNumericLongFieldData
specifier|static
specifier|final
class|class
name|SortedNumericLongFieldData
extends|extends
name|AtomicLongFieldData
block|{
DECL|field|reader
specifier|final
name|LeafReader
name|reader
decl_stmt|;
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|method|SortedNumericLongFieldData
name|SortedNumericLongFieldData
parameter_list|(
name|LeafReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|NumericType
name|numericType
parameter_list|)
block|{
name|super
argument_list|(
literal|0L
argument_list|,
name|numericType
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLongValues
specifier|public
name|SortedNumericDocValues
name|getLongValues
parameter_list|()
block|{
try|try
block|{
return|return
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot load doc values"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/**      * FieldData implementation for 16-bit float values.      *<p>      * Order of values within a document is consistent with      * {@link Float#compareTo(Float)}, hence the following reversible      * transformation is applied at both index and search:      * {@code bits ^ (bits>> 15)& 0x7fff}      *<p>      * Although the API is multi-valued, most codecs in Lucene specialize      * for the case where documents have at most one value. In this case      * {@link FieldData#unwrapSingleton(SortedNumericDoubleValues)} will return      * the underlying single-valued NumericDoubleValues representation.      */
DECL|class|SortedNumericHalfFloatFieldData
specifier|static
specifier|final
class|class
name|SortedNumericHalfFloatFieldData
extends|extends
name|AtomicDoubleFieldData
block|{
DECL|field|reader
specifier|final
name|LeafReader
name|reader
decl_stmt|;
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|method|SortedNumericHalfFloatFieldData
name|SortedNumericHalfFloatFieldData
parameter_list|(
name|LeafReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDoubleValues
specifier|public
name|SortedNumericDoubleValues
name|getDoubleValues
parameter_list|()
block|{
try|try
block|{
name|SortedNumericDocValues
name|raw
init|=
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|NumericDocValues
name|single
init|=
name|DocValues
operator|.
name|unwrapSingleton
argument_list|(
name|raw
argument_list|)
decl_stmt|;
if|if
condition|(
name|single
operator|!=
literal|null
condition|)
block|{
return|return
name|FieldData
operator|.
name|singleton
argument_list|(
operator|new
name|SingleHalfFloatValues
argument_list|(
name|single
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultiHalfFloatValues
argument_list|(
name|raw
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot load doc values"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/**      * Wraps a NumericDocValues and exposes a single 16-bit float per document.      */
DECL|class|SingleHalfFloatValues
specifier|static
specifier|final
class|class
name|SingleHalfFloatValues
extends|extends
name|NumericDoubleValues
block|{
DECL|field|in
specifier|final
name|NumericDocValues
name|in
decl_stmt|;
DECL|method|SingleHalfFloatValues
name|SingleHalfFloatValues
parameter_list|(
name|NumericDocValues
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doubleValue
specifier|public
name|double
name|doubleValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|HalfFloatPoint
operator|.
name|sortableShortToHalfFloat
argument_list|(
operator|(
name|short
operator|)
name|in
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
comment|/**      * Wraps a SortedNumericDocValues and exposes multiple 16-bit floats per document.      */
DECL|class|MultiHalfFloatValues
specifier|static
specifier|final
class|class
name|MultiHalfFloatValues
extends|extends
name|SortedNumericDoubleValues
block|{
DECL|field|in
specifier|final
name|SortedNumericDocValues
name|in
decl_stmt|;
DECL|method|MultiHalfFloatValues
name|MultiHalfFloatValues
parameter_list|(
name|SortedNumericDocValues
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|double
name|nextValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|HalfFloatPoint
operator|.
name|sortableShortToHalfFloat
argument_list|(
operator|(
name|short
operator|)
name|in
operator|.
name|nextValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docValueCount
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|in
operator|.
name|docValueCount
argument_list|()
return|;
block|}
block|}
comment|/**      * FieldData implementation for 32-bit float values.      *<p>      * Order of values within a document is consistent with      * {@link Float#compareTo(Float)}, hence the following reversible      * transformation is applied at both index and search:      * {@code bits ^ (bits>> 31)& 0x7fffffff}      *<p>      * Although the API is multi-valued, most codecs in Lucene specialize      * for the case where documents have at most one value. In this case      * {@link FieldData#unwrapSingleton(SortedNumericDoubleValues)} will return      * the underlying single-valued NumericDoubleValues representation.      */
DECL|class|SortedNumericFloatFieldData
specifier|static
specifier|final
class|class
name|SortedNumericFloatFieldData
extends|extends
name|AtomicDoubleFieldData
block|{
DECL|field|reader
specifier|final
name|LeafReader
name|reader
decl_stmt|;
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|method|SortedNumericFloatFieldData
name|SortedNumericFloatFieldData
parameter_list|(
name|LeafReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDoubleValues
specifier|public
name|SortedNumericDoubleValues
name|getDoubleValues
parameter_list|()
block|{
try|try
block|{
name|SortedNumericDocValues
name|raw
init|=
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|NumericDocValues
name|single
init|=
name|DocValues
operator|.
name|unwrapSingleton
argument_list|(
name|raw
argument_list|)
decl_stmt|;
if|if
condition|(
name|single
operator|!=
literal|null
condition|)
block|{
return|return
name|FieldData
operator|.
name|singleton
argument_list|(
operator|new
name|SingleFloatValues
argument_list|(
name|single
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultiFloatValues
argument_list|(
name|raw
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot load doc values"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/**      * Wraps a NumericDocValues and exposes a single 32-bit float per document.      */
DECL|class|SingleFloatValues
specifier|static
specifier|final
class|class
name|SingleFloatValues
extends|extends
name|NumericDoubleValues
block|{
DECL|field|in
specifier|final
name|NumericDocValues
name|in
decl_stmt|;
DECL|method|SingleFloatValues
name|SingleFloatValues
parameter_list|(
name|NumericDocValues
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doubleValue
specifier|public
name|double
name|doubleValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
operator|(
name|int
operator|)
name|in
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
comment|/**      * Wraps a SortedNumericDocValues and exposes multiple 32-bit floats per document.      */
DECL|class|MultiFloatValues
specifier|static
specifier|final
class|class
name|MultiFloatValues
extends|extends
name|SortedNumericDoubleValues
block|{
DECL|field|in
specifier|final
name|SortedNumericDocValues
name|in
decl_stmt|;
DECL|method|MultiFloatValues
name|MultiFloatValues
parameter_list|(
name|SortedNumericDocValues
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|double
name|nextValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
operator|(
name|int
operator|)
name|in
operator|.
name|nextValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docValueCount
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|in
operator|.
name|docValueCount
argument_list|()
return|;
block|}
block|}
comment|/**      * FieldData implementation for 64-bit double values.      *<p>      * Order of values within a document is consistent with      * {@link Double#compareTo(Double)}, hence the following reversible      * transformation is applied at both index and search:      * {@code bits ^ (bits>> 63)& 0x7fffffffffffffffL}      *<p>      * Although the API is multi-valued, most codecs in Lucene specialize      * for the case where documents have at most one value. In this case      * {@link FieldData#unwrapSingleton(SortedNumericDoubleValues)} will return      * the underlying single-valued NumericDoubleValues representation.      */
DECL|class|SortedNumericDoubleFieldData
specifier|static
specifier|final
class|class
name|SortedNumericDoubleFieldData
extends|extends
name|AtomicDoubleFieldData
block|{
DECL|field|reader
specifier|final
name|LeafReader
name|reader
decl_stmt|;
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|method|SortedNumericDoubleFieldData
name|SortedNumericDoubleFieldData
parameter_list|(
name|LeafReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDoubleValues
specifier|public
name|SortedNumericDoubleValues
name|getDoubleValues
parameter_list|()
block|{
try|try
block|{
name|SortedNumericDocValues
name|raw
init|=
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
name|FieldData
operator|.
name|sortableLongBitsToDoubles
argument_list|(
name|raw
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot load doc values"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

