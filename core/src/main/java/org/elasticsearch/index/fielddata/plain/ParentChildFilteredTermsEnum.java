begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilteredTermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_comment
comment|/**  * Only emits terms that exist in the parentTypes set.  *  * @elasticsearch.internal  */
end_comment

begin_class
DECL|class|ParentChildFilteredTermsEnum
specifier|final
class|class
name|ParentChildFilteredTermsEnum
extends|extends
name|FilteredTermsEnum
block|{
DECL|field|parentTypes
specifier|private
specifier|final
name|NavigableSet
argument_list|<
name|BytesRef
argument_list|>
name|parentTypes
decl_stmt|;
DECL|field|seekTerm
specifier|private
name|BytesRef
name|seekTerm
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
name|BytesRef
name|id
decl_stmt|;
DECL|method|ParentChildFilteredTermsEnum
name|ParentChildFilteredTermsEnum
parameter_list|(
name|TermsEnum
name|tenum
parameter_list|,
name|NavigableSet
argument_list|<
name|BytesRef
argument_list|>
name|parentTypes
parameter_list|)
block|{
name|super
argument_list|(
name|tenum
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentTypes
operator|=
name|parentTypes
expr_stmt|;
name|this
operator|.
name|seekTerm
operator|=
name|parentTypes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|parentTypes
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextSeekTerm
specifier|protected
name|BytesRef
name|nextSeekTerm
parameter_list|(
name|BytesRef
name|currentTerm
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesRef
name|temp
init|=
name|seekTerm
decl_stmt|;
name|seekTerm
operator|=
literal|null
expr_stmt|;
return|return
name|temp
return|;
block|}
annotation|@
name|Override
DECL|method|accept
specifier|protected
name|AcceptStatus
name|accept
parameter_list|(
name|BytesRef
name|term
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|AcceptStatus
operator|.
name|END
return|;
block|}
name|BytesRef
index|[]
name|typeAndId
init|=
name|Uid
operator|.
name|splitUidIntoTypeAndId
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentTypes
operator|.
name|contains
argument_list|(
name|typeAndId
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|type
operator|=
name|typeAndId
index|[
literal|0
index|]
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
name|id
operator|=
name|typeAndId
index|[
literal|1
index|]
expr_stmt|;
return|return
name|AcceptStatus
operator|.
name|YES
return|;
block|}
else|else
block|{
name|BytesRef
name|nextType
init|=
name|parentTypes
operator|.
name|ceiling
argument_list|(
name|typeAndId
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextType
operator|==
literal|null
condition|)
block|{
return|return
name|AcceptStatus
operator|.
name|END
return|;
block|}
name|seekTerm
operator|=
name|nextType
expr_stmt|;
return|return
name|AcceptStatus
operator|.
name|NO_AND_SEEK
return|;
block|}
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|id
specifier|public
name|BytesRef
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
end_class

end_unit

