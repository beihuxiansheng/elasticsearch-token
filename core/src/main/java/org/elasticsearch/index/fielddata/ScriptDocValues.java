begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoHashUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|MutableDateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|ReadableDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_comment
comment|/**  * Script level doc values, the assumption is that any implementation will implement a<code>getValue</code>  * and a<code>getValues</code> that return the relevant type that then can be used in scripts.  */
end_comment

begin_class
DECL|class|ScriptDocValues
specifier|public
specifier|abstract
class|class
name|ScriptDocValues
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractList
argument_list|<
name|T
argument_list|>
block|{
comment|/**      * Set the current doc ID.      */
DECL|method|setNextDocId
specifier|public
specifier|abstract
name|void
name|setNextDocId
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
comment|/**      * Return a copy of the list of the values for the current document.      */
DECL|method|getValues
specifier|public
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|// Throw meaningful exceptions if someone tries to modify the ScriptDocValues.
annotation|@
name|Override
DECL|method|add
specifier|public
specifier|final
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|T
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"doc values are unmodifiable"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
specifier|final
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"doc values are unmodifiable"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|replaceAll
specifier|public
specifier|final
name|void
name|replaceAll
parameter_list|(
name|UnaryOperator
argument_list|<
name|T
argument_list|>
name|operator
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"doc values are unmodifiable"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|set
specifier|public
specifier|final
name|T
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|T
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"doc values are unmodifiable"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|sort
specifier|public
specifier|final
name|void
name|sort
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"doc values are unmodifiable"
argument_list|)
throw|;
block|}
DECL|class|Strings
specifier|public
specifier|static
specifier|final
class|class
name|Strings
extends|extends
name|ScriptDocValues
argument_list|<
name|String
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|SortedBinaryDocValues
name|values
decl_stmt|;
DECL|method|Strings
specifier|public
name|Strings
parameter_list|(
name|SortedBinaryDocValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextDocId
specifier|public
name|void
name|setNextDocId
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|getInternalValues
specifier|public
name|SortedBinaryDocValues
name|getInternalValues
parameter_list|()
block|{
return|return
name|this
operator|.
name|values
return|;
block|}
DECL|method|getBytesValue
specifier|public
name|BytesRef
name|getBytesValue
parameter_list|()
block|{
if|if
condition|(
name|values
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|()
block|{
name|BytesRef
name|value
init|=
name|getBytesValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|value
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|count
argument_list|()
return|;
block|}
block|}
DECL|class|Longs
specifier|public
specifier|static
specifier|final
class|class
name|Longs
extends|extends
name|ScriptDocValues
argument_list|<
name|Long
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|SortedNumericDocValues
name|values
decl_stmt|;
DECL|field|dates
specifier|private
name|Dates
name|dates
decl_stmt|;
DECL|method|Longs
specifier|public
name|Longs
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextDocId
specifier|public
name|void
name|setNextDocId
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
if|if
condition|(
name|dates
operator|!=
literal|null
condition|)
block|{
name|dates
operator|.
name|refreshArray
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getInternalValues
specifier|public
name|SortedNumericDocValues
name|getInternalValues
parameter_list|()
block|{
return|return
name|this
operator|.
name|values
return|;
block|}
DECL|method|getValue
specifier|public
name|long
name|getValue
parameter_list|()
block|{
name|int
name|numValues
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
return|return
literal|0L
return|;
block|}
return|return
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getDate
specifier|public
name|ReadableDateTime
name|getDate
parameter_list|()
block|{
if|if
condition|(
name|dates
operator|==
literal|null
condition|)
block|{
name|dates
operator|=
operator|new
name|Dates
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|dates
operator|.
name|refreshArray
argument_list|()
expr_stmt|;
block|}
return|return
name|dates
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|getDates
specifier|public
name|List
argument_list|<
name|ReadableDateTime
argument_list|>
name|getDates
parameter_list|()
block|{
if|if
condition|(
name|dates
operator|==
literal|null
condition|)
block|{
name|dates
operator|=
operator|new
name|Dates
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|dates
operator|.
name|refreshArray
argument_list|()
expr_stmt|;
block|}
return|return
name|dates
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|count
argument_list|()
return|;
block|}
block|}
DECL|class|Dates
specifier|public
specifier|static
specifier|final
class|class
name|Dates
extends|extends
name|ScriptDocValues
argument_list|<
name|ReadableDateTime
argument_list|>
block|{
DECL|field|EPOCH
specifier|private
specifier|static
specifier|final
name|ReadableDateTime
name|EPOCH
init|=
operator|new
name|DateTime
argument_list|(
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|SortedNumericDocValues
name|values
decl_stmt|;
comment|/**          * Values wrapped in {@link MutableDateTime}. Null by default an allocated on first usage so we allocate a reasonably size. We keep          * this array so we don't have allocate new {@link MutableDateTime}s on every usage. Instead we reuse them for every document.          */
DECL|field|dates
specifier|private
name|MutableDateTime
index|[]
name|dates
decl_stmt|;
DECL|method|Dates
specifier|public
name|Dates
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
comment|/**          * Fetch the first field value or 0 millis after epoch if there are no values.          */
DECL|method|getValue
specifier|public
name|ReadableDateTime
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|values
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|EPOCH
return|;
block|}
return|return
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|ReadableDateTime
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|values
operator|.
name|count
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"attempted to fetch the ["
operator|+
name|index
operator|+
literal|"] date when there are only ["
operator|+
name|values
operator|.
name|count
argument_list|()
operator|+
literal|"] dates."
argument_list|)
throw|;
block|}
return|return
name|dates
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|count
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setNextDocId
specifier|public
name|void
name|setNextDocId
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|refreshArray
argument_list|()
expr_stmt|;
block|}
comment|/**          * Refresh the backing array. Package private so it can be called when {@link Longs} loads dates.          */
DECL|method|refreshArray
name|void
name|refreshArray
parameter_list|()
block|{
if|if
condition|(
name|values
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|dates
operator|==
literal|null
condition|)
block|{
comment|// Happens for the document. We delay allocating dates so we can allocate it with a reasonable size.
name|dates
operator|=
operator|new
name|MutableDateTime
index|[
name|values
operator|.
name|count
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dates
index|[
name|i
index|]
operator|=
operator|new
name|MutableDateTime
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|values
operator|.
name|count
argument_list|()
operator|>
name|dates
operator|.
name|length
condition|)
block|{
comment|// Happens when we move to a new document and it has more dates than any documents before it.
name|MutableDateTime
index|[]
name|backup
init|=
name|dates
decl_stmt|;
name|dates
operator|=
operator|new
name|MutableDateTime
index|[
name|values
operator|.
name|count
argument_list|()
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|backup
argument_list|,
literal|0
argument_list|,
name|dates
argument_list|,
literal|0
argument_list|,
name|backup
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|backup
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dates
index|[
name|i
index|]
operator|.
name|setMillis
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|backup
operator|.
name|length
init|;
name|i
operator|<
name|dates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dates
index|[
name|i
index|]
operator|=
operator|new
name|MutableDateTime
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|dates
index|[
name|i
index|]
operator|.
name|setMillis
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|Doubles
specifier|public
specifier|static
specifier|final
class|class
name|Doubles
extends|extends
name|ScriptDocValues
argument_list|<
name|Double
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|SortedNumericDoubleValues
name|values
decl_stmt|;
DECL|method|Doubles
specifier|public
name|Doubles
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextDocId
specifier|public
name|void
name|setNextDocId
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|getInternalValues
specifier|public
name|SortedNumericDoubleValues
name|getInternalValues
parameter_list|()
block|{
return|return
name|this
operator|.
name|values
return|;
block|}
DECL|method|getValue
specifier|public
name|double
name|getValue
parameter_list|()
block|{
name|int
name|numValues
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
return|return
literal|0d
return|;
block|}
return|return
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Double
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|count
argument_list|()
return|;
block|}
block|}
DECL|class|GeoPoints
specifier|public
specifier|static
specifier|final
class|class
name|GeoPoints
extends|extends
name|ScriptDocValues
argument_list|<
name|GeoPoint
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|MultiGeoPointValues
name|values
decl_stmt|;
DECL|method|GeoPoints
specifier|public
name|GeoPoints
parameter_list|(
name|MultiGeoPointValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextDocId
specifier|public
name|void
name|setNextDocId
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|getValue
specifier|public
name|GeoPoint
name|getValue
parameter_list|()
block|{
name|int
name|numValues
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getLat
specifier|public
name|double
name|getLat
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
operator|.
name|lat
argument_list|()
return|;
block|}
DECL|method|getLats
specifier|public
name|double
index|[]
name|getLats
parameter_list|()
block|{
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|points
init|=
name|getValues
argument_list|()
decl_stmt|;
name|double
index|[]
name|lats
init|=
operator|new
name|double
index|[
name|points
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|points
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|lats
index|[
name|i
index|]
operator|=
name|points
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|lat
argument_list|()
expr_stmt|;
block|}
return|return
name|lats
return|;
block|}
DECL|method|getLons
specifier|public
name|double
index|[]
name|getLons
parameter_list|()
block|{
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|points
init|=
name|getValues
argument_list|()
decl_stmt|;
name|double
index|[]
name|lons
init|=
operator|new
name|double
index|[
name|points
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|points
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|lons
index|[
name|i
index|]
operator|=
name|points
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|lon
argument_list|()
expr_stmt|;
block|}
return|return
name|lons
return|;
block|}
DECL|method|getLon
specifier|public
name|double
name|getLon
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
operator|.
name|lon
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|GeoPoint
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|GeoPoint
name|point
init|=
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
operator|new
name|GeoPoint
argument_list|(
name|point
operator|.
name|lat
argument_list|()
argument_list|,
name|point
operator|.
name|lon
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|count
argument_list|()
return|;
block|}
DECL|method|arcDistance
specifier|public
name|double
name|arcDistance
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|GeoPoint
name|point
init|=
name|getValue
argument_list|()
decl_stmt|;
return|return
name|GeoUtils
operator|.
name|arcDistance
argument_list|(
name|point
operator|.
name|lat
argument_list|()
argument_list|,
name|point
operator|.
name|lon
argument_list|()
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
DECL|method|arcDistanceWithDefault
specifier|public
name|double
name|arcDistanceWithDefault
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
name|arcDistance
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
DECL|method|planeDistance
specifier|public
name|double
name|planeDistance
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|GeoPoint
name|point
init|=
name|getValue
argument_list|()
decl_stmt|;
return|return
name|GeoUtils
operator|.
name|planeDistance
argument_list|(
name|point
operator|.
name|lat
argument_list|()
argument_list|,
name|point
operator|.
name|lon
argument_list|()
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
DECL|method|planeDistanceWithDefault
specifier|public
name|double
name|planeDistanceWithDefault
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
name|planeDistance
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
DECL|method|geohashDistance
specifier|public
name|double
name|geohashDistance
parameter_list|(
name|String
name|geohash
parameter_list|)
block|{
name|GeoPoint
name|point
init|=
name|getValue
argument_list|()
decl_stmt|;
return|return
name|GeoUtils
operator|.
name|arcDistance
argument_list|(
name|point
operator|.
name|lat
argument_list|()
argument_list|,
name|point
operator|.
name|lon
argument_list|()
argument_list|,
name|GeoHashUtils
operator|.
name|decodeLatitude
argument_list|(
name|geohash
argument_list|)
argument_list|,
name|GeoHashUtils
operator|.
name|decodeLongitude
argument_list|(
name|geohash
argument_list|)
argument_list|)
return|;
block|}
DECL|method|geohashDistanceWithDefault
specifier|public
name|double
name|geohashDistanceWithDefault
parameter_list|(
name|String
name|geohash
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
name|geohashDistance
argument_list|(
name|geohash
argument_list|)
return|;
block|}
block|}
DECL|class|Booleans
specifier|public
specifier|static
specifier|final
class|class
name|Booleans
extends|extends
name|ScriptDocValues
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|SortedNumericDocValues
name|values
decl_stmt|;
DECL|method|Booleans
specifier|public
name|Booleans
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextDocId
specifier|public
name|void
name|setNextDocId
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|getValue
specifier|public
name|boolean
name|getValue
parameter_list|()
block|{
return|return
name|values
operator|.
name|count
argument_list|()
operator|!=
literal|0
operator|&&
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
operator|==
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|count
argument_list|()
return|;
block|}
block|}
DECL|class|BytesRefs
specifier|public
specifier|static
specifier|final
class|class
name|BytesRefs
extends|extends
name|ScriptDocValues
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|SortedBinaryDocValues
name|values
decl_stmt|;
DECL|method|BytesRefs
specifier|public
name|BytesRefs
parameter_list|(
name|SortedBinaryDocValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextDocId
specifier|public
name|void
name|setNextDocId
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|getInternalValues
specifier|public
name|SortedBinaryDocValues
name|getInternalValues
parameter_list|()
block|{
return|return
name|this
operator|.
name|values
return|;
block|}
DECL|method|getValue
specifier|public
name|BytesRef
name|getValue
parameter_list|()
block|{
name|int
name|numValues
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|BytesRef
argument_list|()
return|;
block|}
return|return
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
operator|.
name|valueAt
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|count
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

