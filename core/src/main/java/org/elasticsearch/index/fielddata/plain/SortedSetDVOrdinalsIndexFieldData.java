begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicOrdinalsFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
operator|.
name|XFieldComparatorSource
operator|.
name|Nested
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexOrdinalsFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ScriptDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
operator|.
name|BytesRefFieldComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|GlobalOrdinalsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
DECL|class|SortedSetDVOrdinalsIndexFieldData
specifier|public
class|class
name|SortedSetDVOrdinalsIndexFieldData
extends|extends
name|DocValuesIndexFieldData
implements|implements
name|IndexOrdinalsFieldData
block|{
DECL|field|indexSettings
specifier|private
specifier|final
name|IndexSettings
name|indexSettings
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|IndexFieldDataCache
name|cache
decl_stmt|;
DECL|field|breakerService
specifier|private
specifier|final
name|CircuitBreakerService
name|breakerService
decl_stmt|;
DECL|field|scriptFunction
specifier|private
specifier|final
name|Function
argument_list|<
name|SortedSetDocValues
argument_list|,
name|ScriptDocValues
argument_list|<
name|?
argument_list|>
argument_list|>
name|scriptFunction
decl_stmt|;
DECL|method|SortedSetDVOrdinalsIndexFieldData
specifier|public
name|SortedSetDVOrdinalsIndexFieldData
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|IndexFieldDataCache
name|cache
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|CircuitBreakerService
name|breakerService
parameter_list|,
name|Function
argument_list|<
name|SortedSetDocValues
argument_list|,
name|ScriptDocValues
argument_list|<
name|?
argument_list|>
argument_list|>
name|scriptFunction
parameter_list|)
block|{
name|super
argument_list|(
name|indexSettings
operator|.
name|getIndex
argument_list|()
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexSettings
operator|=
name|indexSettings
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|breakerService
operator|=
name|breakerService
expr_stmt|;
name|this
operator|.
name|scriptFunction
operator|=
name|scriptFunction
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sortField
specifier|public
name|SortField
name|sortField
parameter_list|(
annotation|@
name|Nullable
name|Object
name|missingValue
parameter_list|,
name|MultiValueMode
name|sortMode
parameter_list|,
name|Nested
name|nested
parameter_list|,
name|boolean
name|reverse
parameter_list|)
block|{
name|XFieldComparatorSource
name|source
init|=
operator|new
name|BytesRefFieldComparatorSource
argument_list|(
name|this
argument_list|,
name|missingValue
argument_list|,
name|sortMode
argument_list|,
name|nested
argument_list|)
decl_stmt|;
comment|/**          * Check if we can use a simple {@link SortedSetSortField} compatible with index sorting and          * returns a custom sort field otherwise.          */
if|if
condition|(
name|nested
operator|!=
literal|null
operator|||
operator|(
name|sortMode
operator|!=
name|MultiValueMode
operator|.
name|MAX
operator|&&
name|sortMode
operator|!=
name|MultiValueMode
operator|.
name|MIN
operator|)
operator|||
operator|(
name|source
operator|.
name|sortMissingLast
argument_list|(
name|missingValue
argument_list|)
operator|==
literal|false
operator|&&
name|source
operator|.
name|sortMissingFirst
argument_list|(
name|missingValue
argument_list|)
operator|==
literal|false
operator|)
condition|)
block|{
return|return
operator|new
name|SortField
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|source
argument_list|,
name|reverse
argument_list|)
return|;
block|}
name|SortField
name|sortField
init|=
operator|new
name|SortedSetSortField
argument_list|(
name|fieldName
argument_list|,
name|reverse
argument_list|,
name|sortMode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|?
name|SortedSetSelector
operator|.
name|Type
operator|.
name|MAX
else|:
name|SortedSetSelector
operator|.
name|Type
operator|.
name|MIN
argument_list|)
decl_stmt|;
name|sortField
operator|.
name|setMissingValue
argument_list|(
name|source
operator|.
name|sortMissingLast
argument_list|(
name|missingValue
argument_list|)
operator|^
name|reverse
condition|?
name|SortedSetSortField
operator|.
name|STRING_LAST
else|:
name|SortedSetSortField
operator|.
name|STRING_FIRST
argument_list|)
expr_stmt|;
return|return
name|sortField
return|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|AtomicOrdinalsFieldData
name|load
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|SortedSetDVBytesAtomicFieldData
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|fieldName
argument_list|,
name|scriptFunction
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadDirect
specifier|public
name|AtomicOrdinalsFieldData
name|loadDirect
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|load
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadGlobal
specifier|public
name|IndexOrdinalsFieldData
name|loadGlobal
parameter_list|(
name|DirectoryReader
name|indexReader
parameter_list|)
block|{
if|if
condition|(
name|indexReader
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
comment|// ordinals are already global
return|return
name|this
return|;
block|}
name|boolean
name|fieldFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|indexReader
operator|.
name|leaves
argument_list|()
control|)
block|{
if|if
condition|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|getFieldName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|fieldFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|fieldFound
operator|==
literal|false
condition|)
block|{
comment|// Some directory readers may be wrapped and report different set of fields and use the same cache key.
comment|// If a field can't be found then it doesn't mean it isn't there,
comment|// so if a field doesn't exist then we don't cache it and just return an empty field data instance.
comment|// The next time the field is found, we do cache.
try|try
block|{
return|return
name|GlobalOrdinalsBuilder
operator|.
name|buildEmpty
argument_list|(
name|indexSettings
argument_list|,
name|indexReader
argument_list|,
name|this
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
return|return
name|cache
operator|.
name|load
argument_list|(
name|indexReader
argument_list|,
name|this
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|ElasticsearchException
condition|)
block|{
throw|throw
operator|(
name|ElasticsearchException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|localGlobalDirect
specifier|public
name|IndexOrdinalsFieldData
name|localGlobalDirect
parameter_list|(
name|DirectoryReader
name|indexReader
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|GlobalOrdinalsBuilder
operator|.
name|build
argument_list|(
name|indexReader
argument_list|,
name|this
argument_list|,
name|indexSettings
argument_list|,
name|breakerService
argument_list|,
name|logger
argument_list|,
name|scriptFunction
argument_list|)
return|;
block|}
block|}
end_class

end_unit

