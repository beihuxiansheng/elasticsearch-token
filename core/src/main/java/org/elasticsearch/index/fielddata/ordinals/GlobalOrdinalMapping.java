begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.ordinals
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
operator|.
name|OrdinalMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomAccessOrds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractRandomAccessOrds
import|;
end_import

begin_comment
comment|/**  * A {@link RandomAccessOrds} implementation that returns ordinals that are global.  */
end_comment

begin_class
DECL|class|GlobalOrdinalMapping
specifier|public
class|class
name|GlobalOrdinalMapping
extends|extends
name|AbstractRandomAccessOrds
block|{
DECL|field|values
specifier|private
specifier|final
name|RandomAccessOrds
name|values
decl_stmt|;
DECL|field|ordinalMap
specifier|private
specifier|final
name|OrdinalMap
name|ordinalMap
decl_stmt|;
DECL|field|mapping
specifier|private
specifier|final
name|LongValues
name|mapping
decl_stmt|;
DECL|field|bytesValues
specifier|private
specifier|final
name|RandomAccessOrds
index|[]
name|bytesValues
decl_stmt|;
DECL|method|GlobalOrdinalMapping
name|GlobalOrdinalMapping
parameter_list|(
name|OrdinalMap
name|ordinalMap
parameter_list|,
name|RandomAccessOrds
index|[]
name|bytesValues
parameter_list|,
name|int
name|segmentIndex
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|bytesValues
index|[
name|segmentIndex
index|]
expr_stmt|;
name|this
operator|.
name|bytesValues
operator|=
name|bytesValues
expr_stmt|;
name|this
operator|.
name|ordinalMap
operator|=
name|ordinalMap
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|ordinalMap
operator|.
name|getGlobalOrds
argument_list|(
name|segmentIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|ordinalMap
operator|.
name|getValueCount
argument_list|()
return|;
block|}
DECL|method|getGlobalOrd
specifier|public
specifier|final
name|long
name|getGlobalOrd
parameter_list|(
name|long
name|segmentOrd
parameter_list|)
block|{
return|return
name|mapping
operator|.
name|get
argument_list|(
name|segmentOrd
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ordAt
specifier|public
name|long
name|ordAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getGlobalOrd
argument_list|(
name|values
operator|.
name|ordAt
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doSetDocument
specifier|public
name|void
name|doSetDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cardinality
specifier|public
name|int
name|cardinality
parameter_list|()
block|{
return|return
name|values
operator|.
name|cardinality
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|globalOrd
parameter_list|)
block|{
specifier|final
name|long
name|segmentOrd
init|=
name|ordinalMap
operator|.
name|getFirstSegmentOrd
argument_list|(
name|globalOrd
argument_list|)
decl_stmt|;
name|int
name|readerIndex
init|=
name|ordinalMap
operator|.
name|getFirstSegmentNumber
argument_list|(
name|globalOrd
argument_list|)
decl_stmt|;
return|return
name|bytesValues
index|[
name|readerIndex
index|]
operator|.
name|lookupOrd
argument_list|(
name|segmentOrd
argument_list|)
return|;
block|}
block|}
end_class

end_unit

