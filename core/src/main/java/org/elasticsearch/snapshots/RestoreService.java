begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.snapshots
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|RestoreInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|AliasMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexTemplateMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaDataCreateIndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaDataIndexUpgradeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|RepositoriesMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
operator|.
name|SnapshotRecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingChangesObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|min
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_AUTO_EXPAND_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_CREATION_DATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_VERSION_MINIMUM_COMPATIBLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_VERSION_UPGRADED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_comment
comment|/**  * Service responsible for restoring snapshots  *<p>  * Restore operation is performed in several stages.  *<p>  * First {@link #restoreSnapshot(RestoreRequest, org.elasticsearch.action.ActionListener)}  * method reads information about snapshot and metadata from repository. In update cluster state task it checks restore  * preconditions, restores global state if needed, creates {@link RestoreInProgress} record with list of shards that needs  * to be restored and adds this shard to the routing table using {@link RoutingTable.Builder#addAsRestore(IndexMetaData, SnapshotRecoverySource)}  * method.  *<p>  * Individual shards are getting restored as part of normal recovery process in  * {@link IndexShard#restoreFromRepository(Repository)} )}  * method, which detects that shard should be restored from snapshot rather than recovered from gateway by looking  * at the {@link ShardRouting#recoverySource()} property.  *<p>  * At the end of the successful restore process {@code RestoreService} calls {@link #cleanupRestoreState(ClusterChangedEvent)},  * which removes {@link RestoreInProgress} when all shards are completed. In case of  * restore failure a normal recovery fail-over process kicks in.  */
end_comment

begin_class
DECL|class|RestoreService
specifier|public
class|class
name|RestoreService
extends|extends
name|AbstractComponent
implements|implements
name|ClusterStateListener
block|{
DECL|field|UNMODIFIABLE_SETTINGS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|UNMODIFIABLE_SETTINGS
init|=
name|unmodifiableSet
argument_list|(
name|newHashSet
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|SETTING_VERSION_CREATED
argument_list|,
name|SETTING_INDEX_UUID
argument_list|,
name|SETTING_CREATION_DATE
argument_list|)
argument_list|)
decl_stmt|;
comment|// It's OK to change some settings, but we shouldn't allow simply removing them
DECL|field|UNREMOVABLE_SETTINGS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|UNREMOVABLE_SETTINGS
decl_stmt|;
static|static
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|unremovable
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|UNMODIFIABLE_SETTINGS
operator|.
name|size
argument_list|()
operator|+
literal|4
argument_list|)
decl_stmt|;
name|unremovable
operator|.
name|addAll
argument_list|(
name|UNMODIFIABLE_SETTINGS
argument_list|)
expr_stmt|;
name|unremovable
operator|.
name|add
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|)
expr_stmt|;
name|unremovable
operator|.
name|add
argument_list|(
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|)
expr_stmt|;
name|unremovable
operator|.
name|add
argument_list|(
name|SETTING_VERSION_UPGRADED
argument_list|)
expr_stmt|;
name|unremovable
operator|.
name|add
argument_list|(
name|SETTING_VERSION_MINIMUM_COMPATIBLE
argument_list|)
expr_stmt|;
name|UNREMOVABLE_SETTINGS
operator|=
name|unmodifiableSet
argument_list|(
name|unremovable
argument_list|)
expr_stmt|;
block|}
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|repositoriesService
specifier|private
specifier|final
name|RepositoriesService
name|repositoriesService
decl_stmt|;
DECL|field|allocationService
specifier|private
specifier|final
name|AllocationService
name|allocationService
decl_stmt|;
DECL|field|createIndexService
specifier|private
specifier|final
name|MetaDataCreateIndexService
name|createIndexService
decl_stmt|;
DECL|field|metaDataIndexUpgradeService
specifier|private
specifier|final
name|MetaDataIndexUpgradeService
name|metaDataIndexUpgradeService
decl_stmt|;
DECL|field|clusterSettings
specifier|private
specifier|final
name|ClusterSettings
name|clusterSettings
decl_stmt|;
DECL|field|cleanRestoreStateTaskExecutor
specifier|private
specifier|final
name|CleanRestoreStateTaskExecutor
name|cleanRestoreStateTaskExecutor
decl_stmt|;
annotation|@
name|Inject
DECL|method|RestoreService
specifier|public
name|RestoreService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|RepositoriesService
name|repositoriesService
parameter_list|,
name|AllocationService
name|allocationService
parameter_list|,
name|MetaDataCreateIndexService
name|createIndexService
parameter_list|,
name|MetaDataIndexUpgradeService
name|metaDataIndexUpgradeService
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|repositoriesService
operator|=
name|repositoriesService
expr_stmt|;
name|this
operator|.
name|allocationService
operator|=
name|allocationService
expr_stmt|;
name|this
operator|.
name|createIndexService
operator|=
name|createIndexService
expr_stmt|;
name|this
operator|.
name|metaDataIndexUpgradeService
operator|=
name|metaDataIndexUpgradeService
expr_stmt|;
name|clusterService
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterSettings
operator|=
name|clusterSettings
expr_stmt|;
name|this
operator|.
name|cleanRestoreStateTaskExecutor
operator|=
operator|new
name|CleanRestoreStateTaskExecutor
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
comment|/**      * Restores snapshot specified in the restore request.      *      * @param request  restore request      * @param listener restore listener      */
DECL|method|restoreSnapshot
specifier|public
name|void
name|restoreSnapshot
parameter_list|(
specifier|final
name|RestoreRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|RestoreCompletionResponse
argument_list|>
name|listener
parameter_list|)
block|{
try|try
block|{
comment|// Read snapshot info and metadata from the repository
name|Repository
name|repository
init|=
name|repositoriesService
operator|.
name|repository
argument_list|(
name|request
operator|.
name|repositoryName
argument_list|)
decl_stmt|;
specifier|final
name|RepositoryData
name|repositoryData
init|=
name|repository
operator|.
name|getRepositoryData
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|SnapshotId
argument_list|>
name|matchingSnapshotId
init|=
name|repositoryData
operator|.
name|getSnapshotIds
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|request
operator|.
name|snapshotName
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchingSnapshotId
operator|.
name|isPresent
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|request
operator|.
name|repositoryName
argument_list|,
name|request
operator|.
name|snapshotName
argument_list|,
literal|"snapshot does not exist"
argument_list|)
throw|;
block|}
specifier|final
name|SnapshotId
name|snapshotId
init|=
name|matchingSnapshotId
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|SnapshotInfo
name|snapshotInfo
init|=
name|repository
operator|.
name|getSnapshotInfo
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
specifier|final
name|Snapshot
name|snapshot
init|=
operator|new
name|Snapshot
argument_list|(
name|request
operator|.
name|repositoryName
argument_list|,
name|snapshotId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|filteredIndices
init|=
name|SnapshotUtils
operator|.
name|filterIndices
argument_list|(
name|snapshotInfo
operator|.
name|indices
argument_list|()
argument_list|,
name|request
operator|.
name|indices
argument_list|()
argument_list|,
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|)
decl_stmt|;
name|MetaData
name|metaDataIn
init|=
name|repository
operator|.
name|getSnapshotMetaData
argument_list|(
name|snapshotInfo
argument_list|,
name|repositoryData
operator|.
name|resolveIndices
argument_list|(
name|filteredIndices
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|MetaData
name|metaData
decl_stmt|;
if|if
condition|(
name|snapshotInfo
operator|.
name|version
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|)
condition|)
block|{
comment|// ES 2.0 now requires units for all time and byte-sized settings, so we add the default unit if it's missing in this snapshot:
name|metaData
operator|=
name|MetaData
operator|.
name|addDefaultUnitsIfNeeded
argument_list|(
name|logger
argument_list|,
name|metaDataIn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Units are already enforced:
name|metaData
operator|=
name|metaDataIn
expr_stmt|;
block|}
comment|// Make sure that we can restore from this snapshot
name|validateSnapshotRestorable
argument_list|(
name|request
operator|.
name|repositoryName
argument_list|,
name|snapshotInfo
argument_list|)
expr_stmt|;
comment|// Find list of indices that we need to restore
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renamedIndices
init|=
name|renamedIndices
argument_list|(
name|request
argument_list|,
name|filteredIndices
argument_list|)
decl_stmt|;
comment|// Now we can start the actual restore process by adding shards to be recovered in the cluster state
comment|// and updating cluster metadata (global and index) as needed
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
name|request
operator|.
name|cause
argument_list|()
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
name|RestoreInfo
name|restoreInfo
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
comment|// Check if another restore process is already running - cannot run two restore processes at the
comment|// same time
name|RestoreInProgress
name|restoreInProgress
init|=
name|currentState
operator|.
name|custom
argument_list|(
name|RestoreInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|restoreInProgress
operator|!=
literal|null
operator|&&
operator|!
name|restoreInProgress
operator|.
name|entries
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConcurrentSnapshotExecutionException
argument_list|(
name|snapshot
argument_list|,
literal|"Restore process is already running in this cluster"
argument_list|)
throw|;
block|}
comment|// Updating cluster state
name|ClusterState
operator|.
name|Builder
name|builder
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
name|ClusterBlocks
operator|.
name|Builder
name|blocks
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|currentState
operator|.
name|blocks
argument_list|()
argument_list|)
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|rtBuilder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|routingTable
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
argument_list|>
name|shards
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|aliases
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|renamedIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We have some indices to restore
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|ShardId
argument_list|,
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
argument_list|>
name|shardsBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Version
name|minIndexCompatibilityVersion
init|=
name|currentState
operator|.
name|getNodes
argument_list|()
operator|.
name|getMaxNodeVersion
argument_list|()
operator|.
name|minimumIndexCompatibilityVersion
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|indexEntry
range|:
name|renamedIndices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|index
init|=
name|indexEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|partial
init|=
name|checkPartial
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|SnapshotRecoverySource
name|recoverySource
init|=
operator|new
name|SnapshotRecoverySource
argument_list|(
name|snapshot
argument_list|,
name|snapshotInfo
operator|.
name|version
argument_list|()
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|renamedIndexName
init|=
name|indexEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|IndexMetaData
name|snapshotIndexMetaData
init|=
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|snapshotIndexMetaData
operator|=
name|updateIndexSettings
argument_list|(
name|snapshotIndexMetaData
argument_list|,
name|request
operator|.
name|indexSettings
argument_list|,
name|request
operator|.
name|ignoreIndexSettings
argument_list|)
expr_stmt|;
try|try
block|{
name|snapshotIndexMetaData
operator|=
name|metaDataIndexUpgradeService
operator|.
name|upgradeIndexMetaData
argument_list|(
name|snapshotIndexMetaData
argument_list|,
name|minIndexCompatibilityVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshot
argument_list|,
literal|"cannot restore index ["
operator|+
name|index
operator|+
literal|"] because it cannot be upgraded"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
comment|// Check that the index is closed or doesn't exist
name|IndexMetaData
name|currentIndexMetaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|renamedIndexName
argument_list|)
decl_stmt|;
name|IntSet
name|ignoreShards
init|=
operator|new
name|IntHashSet
argument_list|()
decl_stmt|;
specifier|final
name|Index
name|renamedIndex
decl_stmt|;
if|if
condition|(
name|currentIndexMetaData
operator|==
literal|null
condition|)
block|{
comment|// Index doesn't exist - create it and start recovery
comment|// Make sure that the index we are about to create has a validate name
name|MetaDataCreateIndexService
operator|.
name|validateIndexName
argument_list|(
name|renamedIndexName
argument_list|,
name|currentState
argument_list|)
expr_stmt|;
name|createIndexService
operator|.
name|validateIndexSettings
argument_list|(
name|renamedIndexName
argument_list|,
name|snapshotIndexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
name|IndexMetaData
operator|.
name|Builder
name|indexMdBuilder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|snapshotIndexMetaData
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|index
argument_list|(
name|renamedIndexName
argument_list|)
decl_stmt|;
name|indexMdBuilder
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|snapshotIndexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|includeAliases
argument_list|()
operator|&&
operator|!
name|snapshotIndexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Remove all aliases - they shouldn't be restored
name|indexMdBuilder
operator|.
name|removeAllAliases
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|alias
range|:
name|snapshotIndexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|keys
argument_list|()
control|)
block|{
name|aliases
operator|.
name|add
argument_list|(
name|alias
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|IndexMetaData
name|updatedIndexMetaData
init|=
name|indexMdBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|partial
condition|)
block|{
name|populateIgnoredShards
argument_list|(
name|index
argument_list|,
name|ignoreShards
argument_list|)
expr_stmt|;
block|}
name|rtBuilder
operator|.
name|addAsNewRestore
argument_list|(
name|updatedIndexMetaData
argument_list|,
name|recoverySource
argument_list|,
name|ignoreShards
argument_list|)
expr_stmt|;
name|blocks
operator|.
name|addBlocks
argument_list|(
name|updatedIndexMetaData
argument_list|)
expr_stmt|;
name|mdBuilder
operator|.
name|put
argument_list|(
name|updatedIndexMetaData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|renamedIndex
operator|=
name|updatedIndexMetaData
operator|.
name|getIndex
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|validateExistingIndex
argument_list|(
name|currentIndexMetaData
argument_list|,
name|snapshotIndexMetaData
argument_list|,
name|renamedIndexName
argument_list|,
name|partial
argument_list|)
expr_stmt|;
comment|// Index exists and it's closed - open it in metadata and start recovery
name|IndexMetaData
operator|.
name|Builder
name|indexMdBuilder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|snapshotIndexMetaData
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
argument_list|)
decl_stmt|;
name|indexMdBuilder
operator|.
name|version
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|snapshotIndexMetaData
operator|.
name|getVersion
argument_list|()
argument_list|,
name|currentIndexMetaData
operator|.
name|getVersion
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|includeAliases
argument_list|()
condition|)
block|{
comment|// Remove all snapshot aliases
if|if
condition|(
operator|!
name|snapshotIndexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|indexMdBuilder
operator|.
name|removeAllAliases
argument_list|()
expr_stmt|;
block|}
comment|/// Add existing aliases
for|for
control|(
name|ObjectCursor
argument_list|<
name|AliasMetaData
argument_list|>
name|alias
range|:
name|currentIndexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|indexMdBuilder
operator|.
name|putAlias
argument_list|(
name|alias
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|alias
range|:
name|snapshotIndexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|keys
argument_list|()
control|)
block|{
name|aliases
operator|.
name|add
argument_list|(
name|alias
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|indexMdBuilder
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|snapshotIndexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|currentIndexMetaData
operator|.
name|getIndexUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IndexMetaData
name|updatedIndexMetaData
init|=
name|indexMdBuilder
operator|.
name|index
argument_list|(
name|renamedIndexName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|rtBuilder
operator|.
name|addAsRestore
argument_list|(
name|updatedIndexMetaData
argument_list|,
name|recoverySource
argument_list|)
expr_stmt|;
name|blocks
operator|.
name|updateBlocks
argument_list|(
name|updatedIndexMetaData
argument_list|)
expr_stmt|;
name|mdBuilder
operator|.
name|put
argument_list|(
name|updatedIndexMetaData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|renamedIndex
operator|=
name|updatedIndexMetaData
operator|.
name|getIndex
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|shard
init|=
literal|0
init|;
name|shard
operator|<
name|snapshotIndexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|shard
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|ignoreShards
operator|.
name|contains
argument_list|(
name|shard
argument_list|)
condition|)
block|{
name|shardsBuilder
operator|.
name|put
argument_list|(
operator|new
name|ShardId
argument_list|(
name|renamedIndex
argument_list|,
name|shard
argument_list|)
argument_list|,
operator|new
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shardsBuilder
operator|.
name|put
argument_list|(
operator|new
name|ShardId
argument_list|(
name|renamedIndex
argument_list|,
name|shard
argument_list|)
argument_list|,
operator|new
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNodeId
argument_list|()
argument_list|,
name|RestoreInProgress
operator|.
name|State
operator|.
name|FAILURE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|shards
operator|=
name|shardsBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|RestoreInProgress
operator|.
name|Entry
name|restoreEntry
init|=
operator|new
name|RestoreInProgress
operator|.
name|Entry
argument_list|(
name|snapshot
argument_list|,
name|overallState
argument_list|(
name|RestoreInProgress
operator|.
name|State
operator|.
name|INIT
argument_list|,
name|shards
argument_list|)
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|renamedIndices
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|shards
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putCustom
argument_list|(
name|RestoreInProgress
operator|.
name|TYPE
argument_list|,
operator|new
name|RestoreInProgress
argument_list|(
name|restoreEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shards
operator|=
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
name|checkAliasNameConflicts
argument_list|(
name|renamedIndices
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
comment|// Restore global state if needed
name|restoreGlobalStateIfRequested
argument_list|(
name|mdBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|completed
argument_list|(
name|shards
argument_list|)
condition|)
block|{
comment|// We don't have any indices to restore - we are done
name|restoreInfo
operator|=
operator|new
name|RestoreInfo
argument_list|(
name|snapshotId
operator|.
name|getName
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|renamedIndices
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|shards
operator|.
name|size
argument_list|()
argument_list|,
name|shards
operator|.
name|size
argument_list|()
operator|-
name|failedShards
argument_list|(
name|shards
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RoutingTable
name|rt
init|=
name|rtBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|updatedState
init|=
name|builder
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|blocks
argument_list|(
name|blocks
argument_list|)
operator|.
name|routingTable
argument_list|(
name|rt
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|allocationService
operator|.
name|reroute
argument_list|(
name|updatedState
argument_list|,
literal|"restored snapshot ["
operator|+
name|snapshot
operator|+
literal|"]"
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkAliasNameConflicts
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renamedIndices
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|aliases
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renamedIndex
range|:
name|renamedIndices
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|aliases
operator|.
name|contains
argument_list|(
name|renamedIndex
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshot
argument_list|,
literal|"cannot rename index ["
operator|+
name|renamedIndex
operator|.
name|getValue
argument_list|()
operator|+
literal|"] into ["
operator|+
name|renamedIndex
operator|.
name|getKey
argument_list|()
operator|+
literal|"] because of conflict with an alias with the same name"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|populateIgnoredShards
parameter_list|(
name|String
name|index
parameter_list|,
name|IntSet
name|ignoreShards
parameter_list|)
block|{
for|for
control|(
name|SnapshotShardFailure
name|failure
range|:
name|snapshotInfo
operator|.
name|shardFailures
argument_list|()
control|)
block|{
if|if
condition|(
name|index
operator|.
name|equals
argument_list|(
name|failure
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|ignoreShards
operator|.
name|add
argument_list|(
name|failure
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|checkPartial
parameter_list|(
name|String
name|index
parameter_list|)
block|{
comment|// Make sure that index was fully snapshotted
if|if
condition|(
name|failed
argument_list|(
name|snapshotInfo
argument_list|,
name|index
argument_list|)
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|partial
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshot
argument_list|,
literal|"index ["
operator|+
name|index
operator|+
literal|"] wasn't fully snapshotted - cannot restore"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|validateExistingIndex
parameter_list|(
name|IndexMetaData
name|currentIndexMetaData
parameter_list|,
name|IndexMetaData
name|snapshotIndexMetaData
parameter_list|,
name|String
name|renamedIndex
parameter_list|,
name|boolean
name|partial
parameter_list|)
block|{
comment|// Index exist - checking that it's closed
if|if
condition|(
name|currentIndexMetaData
operator|.
name|getState
argument_list|()
operator|!=
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
comment|// TODO: Enable restore for open indices
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshot
argument_list|,
literal|"cannot restore index ["
operator|+
name|renamedIndex
operator|+
literal|"] because it's open"
argument_list|)
throw|;
block|}
comment|// Index exist - checking if it's partial restore
if|if
condition|(
name|partial
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshot
argument_list|,
literal|"cannot restore partial index ["
operator|+
name|renamedIndex
operator|+
literal|"] because such index already exists"
argument_list|)
throw|;
block|}
comment|// Make sure that the number of shards is the same. That's the only thing that we cannot change
if|if
condition|(
name|currentIndexMetaData
operator|.
name|getNumberOfShards
argument_list|()
operator|!=
name|snapshotIndexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshot
argument_list|,
literal|"cannot restore index ["
operator|+
name|renamedIndex
operator|+
literal|"] with ["
operator|+
name|currentIndexMetaData
operator|.
name|getNumberOfShards
argument_list|()
operator|+
literal|"] shard from snapshot with ["
operator|+
name|snapshotIndexMetaData
operator|.
name|getNumberOfShards
argument_list|()
operator|+
literal|"] shards"
argument_list|)
throw|;
block|}
block|}
comment|/**                  * Optionally updates index settings in indexMetaData by removing settings listed in ignoreSettings and                  * merging them with settings in changeSettings.                  */
specifier|private
name|IndexMetaData
name|updateIndexSettings
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|Settings
name|changeSettings
parameter_list|,
name|String
index|[]
name|ignoreSettings
parameter_list|)
block|{
if|if
condition|(
name|changeSettings
operator|.
name|names
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ignoreSettings
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|indexMetaData
return|;
block|}
name|Settings
name|normalizedChangeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|changeSettings
argument_list|)
operator|.
name|normalizePrefix
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_SETTING_PREFIX
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
operator|.
name|Builder
name|builder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settingsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|simpleMatchPatterns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ignoredSetting
range|:
name|ignoreSettings
control|)
block|{
if|if
condition|(
operator|!
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|ignoredSetting
argument_list|)
condition|)
block|{
if|if
condition|(
name|UNREMOVABLE_SETTINGS
operator|.
name|contains
argument_list|(
name|ignoredSetting
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshot
argument_list|,
literal|"cannot remove setting ["
operator|+
name|ignoredSetting
operator|+
literal|"] on restore"
argument_list|)
throw|;
block|}
else|else
block|{
name|settingsMap
operator|.
name|remove
argument_list|(
name|ignoredSetting
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|simpleMatchPatterns
operator|.
name|add
argument_list|(
name|ignoredSetting
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|simpleMatchPatterns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|removePatterns
init|=
name|simpleMatchPatterns
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|simpleMatchPatterns
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
init|=
name|settingsMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|UNREMOVABLE_SETTINGS
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|removePatterns
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|normalizedChangeSettings
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|UNMODIFIABLE_SETTINGS
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|snapshot
argument_list|,
literal|"cannot modify setting ["
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"] on restore"
argument_list|)
throw|;
block|}
else|else
block|{
name|settingsMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settingsMap
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|void
name|restoreGlobalStateIfRequested
parameter_list|(
name|MetaData
operator|.
name|Builder
name|mdBuilder
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|includeGlobalState
argument_list|()
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Settings
name|settings
init|=
name|metaData
operator|.
name|persistentSettings
argument_list|()
decl_stmt|;
name|clusterSettings
operator|.
name|validateUpdate
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|mdBuilder
operator|.
name|persistentSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metaData
operator|.
name|templates
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// TODO: Should all existing templates be deleted first?
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|cursor
range|:
name|metaData
operator|.
name|templates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|mdBuilder
operator|.
name|put
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|metaData
operator|.
name|customs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|MetaData
operator|.
name|Custom
argument_list|>
name|cursor
range|:
name|metaData
operator|.
name|customs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|RepositoriesMetaData
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
condition|)
block|{
comment|// Don't restore repositories while we are working with them
comment|// TODO: Should we restore them at the end?
name|mdBuilder
operator|.
name|putCustom
argument_list|(
name|cursor
operator|.
name|key
argument_list|,
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] failed to restore snapshot"
argument_list|,
name|snapshotId
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TimeValue
name|timeout
parameter_list|()
block|{
return|return
name|request
operator|.
name|masterNodeTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|RestoreCompletionResponse
argument_list|(
name|snapshot
argument_list|,
name|restoreInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] failed to restore snapshot"
argument_list|,
name|request
operator|.
name|repositoryName
operator|+
literal|":"
operator|+
name|request
operator|.
name|snapshotName
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateRestoreStateWithDeletedIndices
specifier|public
specifier|static
name|RestoreInProgress
name|updateRestoreStateWithDeletedIndices
parameter_list|(
name|RestoreInProgress
name|oldRestore
parameter_list|,
name|Set
argument_list|<
name|Index
argument_list|>
name|deletedIndices
parameter_list|)
block|{
name|boolean
name|changesMade
init|=
literal|false
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RestoreInProgress
operator|.
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestoreInProgress
operator|.
name|Entry
name|entry
range|:
name|oldRestore
operator|.
name|entries
argument_list|()
control|)
block|{
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|shardsBuilder
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|cursor
range|:
name|entry
operator|.
name|shards
argument_list|()
control|)
block|{
name|ShardId
name|shardId
init|=
name|cursor
operator|.
name|key
decl_stmt|;
if|if
condition|(
name|deletedIndices
operator|.
name|contains
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
condition|)
block|{
name|changesMade
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|shardsBuilder
operator|==
literal|null
condition|)
block|{
name|shardsBuilder
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|entry
operator|.
name|shards
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|shardsBuilder
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
operator|new
name|ShardRestoreStatus
argument_list|(
literal|null
argument_list|,
name|RestoreInProgress
operator|.
name|State
operator|.
name|FAILURE
argument_list|,
literal|"index was deleted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shardsBuilder
operator|!=
literal|null
condition|)
block|{
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|shards
init|=
name|shardsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|RestoreInProgress
operator|.
name|Entry
argument_list|(
name|entry
operator|.
name|snapshot
argument_list|()
argument_list|,
name|overallState
argument_list|(
name|RestoreInProgress
operator|.
name|State
operator|.
name|STARTED
argument_list|,
name|shards
argument_list|)
argument_list|,
name|entry
operator|.
name|indices
argument_list|()
argument_list|,
name|shards
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changesMade
condition|)
block|{
return|return
operator|new
name|RestoreInProgress
argument_list|(
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|RestoreInProgress
operator|.
name|Entry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|oldRestore
return|;
block|}
block|}
DECL|class|RestoreCompletionResponse
specifier|public
specifier|static
specifier|final
class|class
name|RestoreCompletionResponse
block|{
DECL|field|snapshot
specifier|private
specifier|final
name|Snapshot
name|snapshot
decl_stmt|;
DECL|field|restoreInfo
specifier|private
specifier|final
name|RestoreInfo
name|restoreInfo
decl_stmt|;
DECL|method|RestoreCompletionResponse
specifier|private
name|RestoreCompletionResponse
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
specifier|final
name|RestoreInfo
name|restoreInfo
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|restoreInfo
operator|=
name|restoreInfo
expr_stmt|;
block|}
DECL|method|getSnapshot
specifier|public
name|Snapshot
name|getSnapshot
parameter_list|()
block|{
return|return
name|snapshot
return|;
block|}
DECL|method|getRestoreInfo
specifier|public
name|RestoreInfo
name|getRestoreInfo
parameter_list|()
block|{
return|return
name|restoreInfo
return|;
block|}
block|}
DECL|class|RestoreInProgressUpdater
specifier|public
specifier|static
class|class
name|RestoreInProgressUpdater
extends|extends
name|RoutingChangesObserver
operator|.
name|AbstractRoutingChangesObserver
block|{
DECL|field|shardChanges
specifier|private
specifier|final
name|Map
argument_list|<
name|Snapshot
argument_list|,
name|Updates
argument_list|>
name|shardChanges
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|shardStarted
specifier|public
name|void
name|shardStarted
parameter_list|(
name|ShardRouting
name|initializingShard
parameter_list|,
name|ShardRouting
name|startedShard
parameter_list|)
block|{
comment|// mark snapshot as completed
if|if
condition|(
name|initializingShard
operator|.
name|primary
argument_list|()
condition|)
block|{
name|RecoverySource
name|recoverySource
init|=
name|initializingShard
operator|.
name|recoverySource
argument_list|()
decl_stmt|;
if|if
condition|(
name|recoverySource
operator|.
name|getType
argument_list|()
operator|==
name|RecoverySource
operator|.
name|Type
operator|.
name|SNAPSHOT
condition|)
block|{
name|Snapshot
name|snapshot
init|=
operator|(
operator|(
name|SnapshotRecoverySource
operator|)
name|recoverySource
operator|)
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|changes
argument_list|(
name|snapshot
argument_list|)
operator|.
name|startedShards
operator|.
name|put
argument_list|(
name|initializingShard
operator|.
name|shardId
argument_list|()
argument_list|,
operator|new
name|ShardRestoreStatus
argument_list|(
name|initializingShard
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|RestoreInProgress
operator|.
name|State
operator|.
name|SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|shardFailed
specifier|public
name|void
name|shardFailed
parameter_list|(
name|ShardRouting
name|failedShard
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|)
block|{
if|if
condition|(
name|failedShard
operator|.
name|primary
argument_list|()
operator|&&
name|failedShard
operator|.
name|initializing
argument_list|()
condition|)
block|{
name|RecoverySource
name|recoverySource
init|=
name|failedShard
operator|.
name|recoverySource
argument_list|()
decl_stmt|;
if|if
condition|(
name|recoverySource
operator|.
name|getType
argument_list|()
operator|==
name|RecoverySource
operator|.
name|Type
operator|.
name|SNAPSHOT
condition|)
block|{
name|Snapshot
name|snapshot
init|=
operator|(
operator|(
name|SnapshotRecoverySource
operator|)
name|recoverySource
operator|)
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// mark restore entry for this shard as failed when it's due to a file corruption. There is no need wait on retries
comment|// to restore this shard on another node if the snapshot files are corrupt. In case where a node just left or crashed,
comment|// however, we only want to acknowledge the restore operation once it has been successfully restored on another node.
if|if
condition|(
name|unassignedInfo
operator|.
name|getFailure
argument_list|()
operator|!=
literal|null
operator|&&
name|Lucene
operator|.
name|isCorruptionException
argument_list|(
name|unassignedInfo
operator|.
name|getFailure
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
condition|)
block|{
name|changes
argument_list|(
name|snapshot
argument_list|)
operator|.
name|failedShards
operator|.
name|put
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|,
operator|new
name|ShardRestoreStatus
argument_list|(
name|failedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|RestoreInProgress
operator|.
name|State
operator|.
name|FAILURE
argument_list|,
name|unassignedInfo
operator|.
name|getFailure
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|shardInitialized
specifier|public
name|void
name|shardInitialized
parameter_list|(
name|ShardRouting
name|unassignedShard
parameter_list|,
name|ShardRouting
name|initializedShard
parameter_list|)
block|{
comment|// if we force an empty primary, we should also fail the restore entry
if|if
condition|(
name|unassignedShard
operator|.
name|recoverySource
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|RecoverySource
operator|.
name|Type
operator|.
name|SNAPSHOT
operator|&&
name|initializedShard
operator|.
name|recoverySource
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|RecoverySource
operator|.
name|Type
operator|.
name|SNAPSHOT
condition|)
block|{
name|Snapshot
name|snapshot
init|=
operator|(
operator|(
name|SnapshotRecoverySource
operator|)
name|unassignedShard
operator|.
name|recoverySource
argument_list|()
operator|)
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|changes
argument_list|(
name|snapshot
argument_list|)
operator|.
name|failedShards
operator|.
name|put
argument_list|(
name|unassignedShard
operator|.
name|shardId
argument_list|()
argument_list|,
operator|new
name|ShardRestoreStatus
argument_list|(
literal|null
argument_list|,
name|RestoreInProgress
operator|.
name|State
operator|.
name|FAILURE
argument_list|,
literal|"recovery source type changed from snapshot to "
operator|+
name|initializedShard
operator|.
name|recoverySource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Helper method that creates update entry for the given shard id if such an entry does not exist yet.          */
DECL|method|changes
specifier|private
name|Updates
name|changes
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
name|shardChanges
operator|.
name|computeIfAbsent
argument_list|(
name|snapshot
argument_list|,
name|k
lambda|->
operator|new
name|Updates
argument_list|()
argument_list|)
return|;
block|}
DECL|class|Updates
specifier|private
specifier|static
class|class
name|Updates
block|{
DECL|field|failedShards
specifier|private
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|failedShards
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|startedShards
specifier|private
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|startedShards
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
block|}
DECL|method|applyChanges
specifier|public
name|RestoreInProgress
name|applyChanges
parameter_list|(
name|RestoreInProgress
name|oldRestore
parameter_list|)
block|{
if|if
condition|(
name|shardChanges
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RestoreInProgress
operator|.
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestoreInProgress
operator|.
name|Entry
name|entry
range|:
name|oldRestore
operator|.
name|entries
argument_list|()
control|)
block|{
name|Snapshot
name|snapshot
init|=
name|entry
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|Updates
name|updates
init|=
name|shardChanges
operator|.
name|get
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
assert|assert
name|Sets
operator|.
name|haveEmptyIntersection
argument_list|(
name|updates
operator|.
name|startedShards
operator|.
name|keySet
argument_list|()
argument_list|,
name|updates
operator|.
name|failedShards
operator|.
name|keySet
argument_list|()
argument_list|)
assert|;
if|if
condition|(
name|updates
operator|.
name|startedShards
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|||
name|updates
operator|.
name|failedShards
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|shardsBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|entry
operator|.
name|shards
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|startedShardEntry
range|:
name|updates
operator|.
name|startedShards
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|shardsBuilder
operator|.
name|put
argument_list|(
name|startedShardEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|startedShardEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|failedShardEntry
range|:
name|updates
operator|.
name|failedShards
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|shardsBuilder
operator|.
name|put
argument_list|(
name|failedShardEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|failedShardEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|shards
init|=
name|shardsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|RestoreInProgress
operator|.
name|State
name|newState
init|=
name|overallState
argument_list|(
name|RestoreInProgress
operator|.
name|State
operator|.
name|STARTED
argument_list|,
name|shards
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|RestoreInProgress
operator|.
name|Entry
argument_list|(
name|entry
operator|.
name|snapshot
argument_list|()
argument_list|,
name|newState
argument_list|,
name|entry
operator|.
name|indices
argument_list|()
argument_list|,
name|shards
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RestoreInProgress
argument_list|(
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|RestoreInProgress
operator|.
name|Entry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|oldRestore
return|;
block|}
block|}
block|}
DECL|method|restoreInProgress
specifier|public
specifier|static
name|RestoreInProgress
operator|.
name|Entry
name|restoreInProgress
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|RestoreInProgress
name|restoreInProgress
init|=
name|state
operator|.
name|custom
argument_list|(
name|RestoreInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|restoreInProgress
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestoreInProgress
operator|.
name|Entry
name|e
range|:
name|restoreInProgress
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|snapshot
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshot
argument_list|)
condition|)
block|{
return|return
name|e
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|class|CleanRestoreStateTaskExecutor
specifier|static
class|class
name|CleanRestoreStateTaskExecutor
implements|implements
name|ClusterStateTaskExecutor
argument_list|<
name|CleanRestoreStateTaskExecutor
operator|.
name|Task
argument_list|>
implements|,
name|ClusterStateTaskListener
block|{
DECL|class|Task
specifier|static
class|class
name|Task
block|{
DECL|field|snapshot
specifier|final
name|Snapshot
name|snapshot
decl_stmt|;
DECL|method|Task
name|Task
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"clean restore state for restoring snapshot "
operator|+
name|snapshot
return|;
block|}
block|}
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|method|CleanRestoreStateTaskExecutor
specifier|public
name|CleanRestoreStateTaskExecutor
parameter_list|(
name|Logger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|BatchResult
argument_list|<
name|Task
argument_list|>
name|execute
parameter_list|(
specifier|final
name|ClusterState
name|currentState
parameter_list|,
specifier|final
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|BatchResult
operator|.
name|Builder
argument_list|<
name|Task
argument_list|>
name|resultBuilder
init|=
name|BatchResult
operator|.
expr|<
name|Task
operator|>
name|builder
argument_list|()
operator|.
name|successes
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Snapshot
argument_list|>
name|completedSnapshots
init|=
name|tasks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|snapshot
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RestoreInProgress
operator|.
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RestoreInProgress
name|restoreInProgress
init|=
name|currentState
operator|.
name|custom
argument_list|(
name|RestoreInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|restoreInProgress
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestoreInProgress
operator|.
name|Entry
name|entry
range|:
name|restoreInProgress
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|completedSnapshots
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|snapshot
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|changed
operator|==
literal|false
condition|)
block|{
return|return
name|resultBuilder
operator|.
name|build
argument_list|(
name|currentState
argument_list|)
return|;
block|}
name|RestoreInProgress
name|updatedRestoreInProgress
init|=
operator|new
name|RestoreInProgress
argument_list|(
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|RestoreInProgress
operator|.
name|Entry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ClusterState
operator|.
name|Custom
argument_list|>
name|builder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|getCustoms
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|RestoreInProgress
operator|.
name|TYPE
argument_list|,
name|updatedRestoreInProgress
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ClusterState
operator|.
name|Custom
argument_list|>
name|customs
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|resultBuilder
operator|.
name|build
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|customs
argument_list|(
name|customs
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"unexpected failure during [{}]"
argument_list|,
name|source
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNoLongerMaster
specifier|public
name|void
name|onNoLongerMaster
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"no longer master while processing restore state update [{}]"
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanupRestoreState
specifier|private
name|void
name|cleanupRestoreState
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|ClusterState
name|state
init|=
name|event
operator|.
name|state
argument_list|()
decl_stmt|;
name|RestoreInProgress
name|restoreInProgress
init|=
name|state
operator|.
name|custom
argument_list|(
name|RestoreInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|restoreInProgress
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestoreInProgress
operator|.
name|Entry
name|entry
range|:
name|restoreInProgress
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
condition|)
block|{
assert|assert
name|completed
argument_list|(
name|entry
operator|.
name|shards
argument_list|()
argument_list|)
operator|:
literal|"state says completed but restore entries are not"
assert|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"clean up snapshot restore state"
argument_list|,
operator|new
name|CleanRestoreStateTaskExecutor
operator|.
name|Task
argument_list|(
name|entry
operator|.
name|snapshot
argument_list|()
argument_list|)
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|URGENT
argument_list|)
argument_list|,
name|cleanRestoreStateTaskExecutor
argument_list|,
name|cleanRestoreStateTaskExecutor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|overallState
specifier|public
specifier|static
name|RestoreInProgress
operator|.
name|State
name|overallState
parameter_list|(
name|RestoreInProgress
operator|.
name|State
name|nonCompletedState
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
argument_list|>
name|shards
parameter_list|)
block|{
name|boolean
name|hasFailed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
argument_list|>
name|status
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|status
operator|.
name|value
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
condition|)
block|{
return|return
name|nonCompletedState
return|;
block|}
if|if
condition|(
name|status
operator|.
name|value
operator|.
name|state
argument_list|()
operator|==
name|RestoreInProgress
operator|.
name|State
operator|.
name|FAILURE
condition|)
block|{
name|hasFailed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasFailed
condition|)
block|{
return|return
name|RestoreInProgress
operator|.
name|State
operator|.
name|FAILURE
return|;
block|}
else|else
block|{
return|return
name|RestoreInProgress
operator|.
name|State
operator|.
name|SUCCESS
return|;
block|}
block|}
DECL|method|completed
specifier|public
specifier|static
name|boolean
name|completed
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
argument_list|>
name|shards
parameter_list|)
block|{
for|for
control|(
name|ObjectCursor
argument_list|<
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
argument_list|>
name|status
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|status
operator|.
name|value
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|failedShards
specifier|public
specifier|static
name|int
name|failedShards
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
argument_list|>
name|shards
parameter_list|)
block|{
name|int
name|failedShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
argument_list|>
name|status
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|status
operator|.
name|value
operator|.
name|state
argument_list|()
operator|==
name|RestoreInProgress
operator|.
name|State
operator|.
name|FAILURE
condition|)
block|{
name|failedShards
operator|++
expr_stmt|;
block|}
block|}
return|return
name|failedShards
return|;
block|}
DECL|method|renamedIndices
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renamedIndices
parameter_list|(
name|RestoreRequest
name|request
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|filteredIndices
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renamedIndices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|filteredIndices
control|)
block|{
name|String
name|renamedIndex
init|=
name|index
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|renameReplacement
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|renamePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|renamedIndex
operator|=
name|index
operator|.
name|replaceAll
argument_list|(
name|request
operator|.
name|renamePattern
argument_list|()
argument_list|,
name|request
operator|.
name|renameReplacement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|previousIndex
init|=
name|renamedIndices
operator|.
name|put
argument_list|(
name|renamedIndex
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousIndex
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
name|request
operator|.
name|repositoryName
argument_list|,
name|request
operator|.
name|snapshotName
argument_list|,
literal|"indices ["
operator|+
name|index
operator|+
literal|"] and ["
operator|+
name|previousIndex
operator|+
literal|"] are renamed into the same index ["
operator|+
name|renamedIndex
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
return|return
name|renamedIndices
return|;
block|}
comment|/**      * Checks that snapshots can be restored and have compatible version      *      * @param repository      repository name      * @param snapshotInfo    snapshot metadata      */
DECL|method|validateSnapshotRestorable
specifier|private
name|void
name|validateSnapshotRestorable
parameter_list|(
specifier|final
name|String
name|repository
parameter_list|,
specifier|final
name|SnapshotInfo
name|snapshotInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|snapshotInfo
operator|.
name|state
argument_list|()
operator|.
name|restorable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
operator|new
name|Snapshot
argument_list|(
name|repository
argument_list|,
name|snapshotInfo
operator|.
name|snapshotId
argument_list|()
argument_list|)
argument_list|,
literal|"unsupported snapshot state ["
operator|+
name|snapshotInfo
operator|.
name|state
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Version
operator|.
name|CURRENT
operator|.
name|before
argument_list|(
name|snapshotInfo
operator|.
name|version
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotRestoreException
argument_list|(
operator|new
name|Snapshot
argument_list|(
name|repository
argument_list|,
name|snapshotInfo
operator|.
name|snapshotId
argument_list|()
argument_list|)
argument_list|,
literal|"the snapshot was created with Elasticsearch version ["
operator|+
name|snapshotInfo
operator|.
name|version
argument_list|()
operator|+
literal|"] which is higher than the version of this node ["
operator|+
name|Version
operator|.
name|CURRENT
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|failed
specifier|private
name|boolean
name|failed
parameter_list|(
name|SnapshotInfo
name|snapshot
parameter_list|,
name|String
name|index
parameter_list|)
block|{
for|for
control|(
name|SnapshotShardFailure
name|failure
range|:
name|snapshot
operator|.
name|shardFailures
argument_list|()
control|)
block|{
if|if
condition|(
name|index
operator|.
name|equals
argument_list|(
name|failure
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Check if any of the indices to be closed are currently being restored from a snapshot and fail closing if such an index      * is found as closing an index that is being restored makes the index unusable (it cannot be recovered).      */
DECL|method|checkIndexClosing
specifier|public
specifier|static
name|void
name|checkIndexClosing
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|Set
argument_list|<
name|IndexMetaData
argument_list|>
name|indices
parameter_list|)
block|{
name|RestoreInProgress
name|restore
init|=
name|currentState
operator|.
name|custom
argument_list|(
name|RestoreInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|restore
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Index
argument_list|>
name|indicesToFail
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RestoreInProgress
operator|.
name|Entry
name|entry
range|:
name|restore
operator|.
name|entries
argument_list|()
control|)
block|{
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|ShardId
argument_list|,
name|RestoreInProgress
operator|.
name|ShardRestoreStatus
argument_list|>
name|shard
range|:
name|entry
operator|.
name|shards
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|shard
operator|.
name|value
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
condition|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|shard
operator|.
name|key
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
operator|&&
name|indices
operator|.
name|contains
argument_list|(
name|indexMetaData
argument_list|)
condition|)
block|{
if|if
condition|(
name|indicesToFail
operator|==
literal|null
condition|)
block|{
name|indicesToFail
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|indicesToFail
operator|.
name|add
argument_list|(
name|shard
operator|.
name|key
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|indicesToFail
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot close indices that are being restored: "
operator|+
name|indicesToFail
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|event
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
name|cleanupRestoreState
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to update restore state "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks if a repository is currently in use by one of the snapshots      *      * @param clusterState cluster state      * @param repository   repository id      * @return true if repository is currently in use by one of the running snapshots      */
DECL|method|isRepositoryInUse
specifier|public
specifier|static
name|boolean
name|isRepositoryInUse
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|repository
parameter_list|)
block|{
name|RestoreInProgress
name|snapshots
init|=
name|clusterState
operator|.
name|custom
argument_list|(
name|RestoreInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshots
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestoreInProgress
operator|.
name|Entry
name|snapshot
range|:
name|snapshots
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|repository
operator|.
name|equals
argument_list|(
name|snapshot
operator|.
name|snapshot
argument_list|()
operator|.
name|getRepository
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Restore snapshot request      */
DECL|class|RestoreRequest
specifier|public
specifier|static
class|class
name|RestoreRequest
block|{
DECL|field|cause
specifier|private
specifier|final
name|String
name|cause
decl_stmt|;
DECL|field|repositoryName
specifier|private
specifier|final
name|String
name|repositoryName
decl_stmt|;
DECL|field|snapshotName
specifier|private
specifier|final
name|String
name|snapshotName
decl_stmt|;
DECL|field|indices
specifier|private
specifier|final
name|String
index|[]
name|indices
decl_stmt|;
DECL|field|renamePattern
specifier|private
specifier|final
name|String
name|renamePattern
decl_stmt|;
DECL|field|renameReplacement
specifier|private
specifier|final
name|String
name|renameReplacement
decl_stmt|;
DECL|field|indicesOptions
specifier|private
specifier|final
name|IndicesOptions
name|indicesOptions
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|masterNodeTimeout
specifier|private
specifier|final
name|TimeValue
name|masterNodeTimeout
decl_stmt|;
DECL|field|includeGlobalState
specifier|private
specifier|final
name|boolean
name|includeGlobalState
decl_stmt|;
DECL|field|partial
specifier|private
specifier|final
name|boolean
name|partial
decl_stmt|;
DECL|field|includeAliases
specifier|private
specifier|final
name|boolean
name|includeAliases
decl_stmt|;
DECL|field|indexSettings
specifier|private
specifier|final
name|Settings
name|indexSettings
decl_stmt|;
DECL|field|ignoreIndexSettings
specifier|private
specifier|final
name|String
index|[]
name|ignoreIndexSettings
decl_stmt|;
comment|/**          * Constructs new restore request          *          * @param repositoryName     repositoryName          * @param snapshotName       snapshotName          * @param indices            list of indices to restore          * @param indicesOptions     indices options          * @param renamePattern      pattern to rename indices          * @param renameReplacement  replacement for renamed indices          * @param settings           repository specific restore settings          * @param masterNodeTimeout  master node timeout          * @param includeGlobalState include global state into restore          * @param partial            allow partial restore          * @param indexSettings      index settings that should be changed on restore          * @param ignoreIndexSettings index settings that shouldn't be restored          * @param cause              cause for restoring the snapshot          */
DECL|method|RestoreRequest
specifier|public
name|RestoreRequest
parameter_list|(
name|String
name|repositoryName
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|String
index|[]
name|indices
parameter_list|,
name|IndicesOptions
name|indicesOptions
parameter_list|,
name|String
name|renamePattern
parameter_list|,
name|String
name|renameReplacement
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|TimeValue
name|masterNodeTimeout
parameter_list|,
name|boolean
name|includeGlobalState
parameter_list|,
name|boolean
name|partial
parameter_list|,
name|boolean
name|includeAliases
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|String
index|[]
name|ignoreIndexSettings
parameter_list|,
name|String
name|cause
parameter_list|)
block|{
name|this
operator|.
name|repositoryName
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|repositoryName
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotName
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
name|this
operator|.
name|indices
operator|=
name|indices
expr_stmt|;
name|this
operator|.
name|renamePattern
operator|=
name|renamePattern
expr_stmt|;
name|this
operator|.
name|renameReplacement
operator|=
name|renameReplacement
expr_stmt|;
name|this
operator|.
name|indicesOptions
operator|=
name|indicesOptions
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|masterNodeTimeout
operator|=
name|masterNodeTimeout
expr_stmt|;
name|this
operator|.
name|includeGlobalState
operator|=
name|includeGlobalState
expr_stmt|;
name|this
operator|.
name|partial
operator|=
name|partial
expr_stmt|;
name|this
operator|.
name|includeAliases
operator|=
name|includeAliases
expr_stmt|;
name|this
operator|.
name|indexSettings
operator|=
name|indexSettings
expr_stmt|;
name|this
operator|.
name|ignoreIndexSettings
operator|=
name|ignoreIndexSettings
expr_stmt|;
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
block|}
comment|/**          * Returns restore operation cause          *          * @return restore operation cause          */
DECL|method|cause
specifier|public
name|String
name|cause
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
comment|/**          * Returns repository name          *          * @return repository name          */
DECL|method|repositoryName
specifier|public
name|String
name|repositoryName
parameter_list|()
block|{
return|return
name|repositoryName
return|;
block|}
comment|/**          * Returns snapshot name          *          * @return snapshot name          */
DECL|method|snapshotName
specifier|public
name|String
name|snapshotName
parameter_list|()
block|{
return|return
name|snapshotName
return|;
block|}
comment|/**          * Return the list of indices to be restored          *          * @return the list of indices          */
DECL|method|indices
specifier|public
name|String
index|[]
name|indices
parameter_list|()
block|{
return|return
name|indices
return|;
block|}
comment|/**          * Returns indices option flags          *          * @return indices options flags          */
DECL|method|indicesOptions
specifier|public
name|IndicesOptions
name|indicesOptions
parameter_list|()
block|{
return|return
name|indicesOptions
return|;
block|}
comment|/**          * Returns rename pattern          *          * @return rename pattern          */
DECL|method|renamePattern
specifier|public
name|String
name|renamePattern
parameter_list|()
block|{
return|return
name|renamePattern
return|;
block|}
comment|/**          * Returns replacement pattern          *          * @return replacement pattern          */
DECL|method|renameReplacement
specifier|public
name|String
name|renameReplacement
parameter_list|()
block|{
return|return
name|renameReplacement
return|;
block|}
comment|/**          * Returns repository-specific restore settings          *          * @return restore settings          */
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
comment|/**          * Returns true if global state should be restore during this restore operation          *          * @return restore global state flag          */
DECL|method|includeGlobalState
specifier|public
name|boolean
name|includeGlobalState
parameter_list|()
block|{
return|return
name|includeGlobalState
return|;
block|}
comment|/**          * Returns true if incomplete indices will be restored          *          * @return partial indices restore flag          */
DECL|method|partial
specifier|public
name|boolean
name|partial
parameter_list|()
block|{
return|return
name|partial
return|;
block|}
comment|/**          * Returns true if aliases should be restore during this restore operation          *          * @return restore aliases state flag          */
DECL|method|includeAliases
specifier|public
name|boolean
name|includeAliases
parameter_list|()
block|{
return|return
name|includeAliases
return|;
block|}
comment|/**          * Returns index settings that should be changed on restore          *          * @return restore aliases state flag          */
DECL|method|indexSettings
specifier|public
name|Settings
name|indexSettings
parameter_list|()
block|{
return|return
name|indexSettings
return|;
block|}
comment|/**          * Returns index settings that that shouldn't be restored          *          * @return restore aliases state flag          */
DECL|method|ignoreIndexSettings
specifier|public
name|String
index|[]
name|ignoreIndexSettings
parameter_list|()
block|{
return|return
name|ignoreIndexSettings
return|;
block|}
comment|/**          * Return master node timeout          *          * @return master node timeout          */
DECL|method|masterNodeTimeout
specifier|public
name|TimeValue
name|masterNodeTimeout
parameter_list|()
block|{
return|return
name|masterNodeTimeout
return|;
block|}
block|}
block|}
end_class

end_unit

