begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.snapshots
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Basic information about a snapshot - a SnapshotId and the repository that the snapshot belongs to.  */
end_comment

begin_class
DECL|class|Snapshot
specifier|public
specifier|final
class|class
name|Snapshot
implements|implements
name|Writeable
block|{
DECL|field|repository
specifier|private
specifier|final
name|String
name|repository
decl_stmt|;
DECL|field|snapshotId
specifier|private
specifier|final
name|SnapshotId
name|snapshotId
decl_stmt|;
DECL|field|hashCode
specifier|private
specifier|final
name|int
name|hashCode
decl_stmt|;
comment|/**      * Constructs a snapshot.      */
DECL|method|Snapshot
specifier|public
name|Snapshot
parameter_list|(
specifier|final
name|String
name|repository
parameter_list|,
specifier|final
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotId
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
name|this
operator|.
name|hashCode
operator|=
name|computeHashCode
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructs a snapshot from the stream input.      */
DECL|method|Snapshot
specifier|public
name|Snapshot
parameter_list|(
specifier|final
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|repository
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|snapshotId
operator|=
operator|new
name|SnapshotId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|hashCode
operator|=
name|computeHashCode
argument_list|()
expr_stmt|;
block|}
comment|/**      * Gets the repository name for the snapshot.      */
DECL|method|getRepository
specifier|public
name|String
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
comment|/**      * Gets the snapshot id for the snapshot.      */
DECL|method|getSnapshotId
specifier|public
name|SnapshotId
name|getSnapshotId
parameter_list|()
block|{
return|return
name|snapshotId
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|repository
operator|+
literal|":"
operator|+
name|snapshotId
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Snapshot
name|that
init|=
operator|(
name|Snapshot
operator|)
name|o
decl_stmt|;
return|return
name|repository
operator|.
name|equals
argument_list|(
name|that
operator|.
name|repository
argument_list|)
operator|&&
name|snapshotId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|snapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashCode
return|;
block|}
DECL|method|computeHashCode
specifier|private
name|int
name|computeHashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|repository
argument_list|,
name|snapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
specifier|final
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|snapshotId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

