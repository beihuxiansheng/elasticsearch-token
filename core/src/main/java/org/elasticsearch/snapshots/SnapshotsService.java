begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.snapshots
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|RepositoriesMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardSnapshotStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
operator|.
name|completed
import|;
end_import

begin_comment
comment|/**  * Service responsible for creating snapshots  *<p>  * A typical snapshot creating process looks like this:  *<ul>  *<li>On the master node the {@link #createSnapshot(SnapshotRequest, CreateSnapshotListener)} is called and makes sure that no snapshots is currently running  * and registers the new snapshot in cluster state</li>  *<li>When cluster state is updated the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, CreateSnapshotListener)} method  * kicks in and initializes the snapshot in the repository and then populates list of shards that needs to be snapshotted in cluster state</li>  *<li>Each data node is watching for these shards and when new shards scheduled for snapshotting appear in the cluster state, data nodes  * start processing them through {@link SnapshotShardsService#processIndexShardSnapshots(ClusterChangedEvent)} method</li>  *<li>Once shard snapshot is created data node updates state of the shard in the cluster state using the {@link SnapshotShardsService#updateIndexShardSnapshotStatus} method</li>  *<li>When last shard is completed master node in {@link SnapshotShardsService#innerUpdateSnapshotState} method marks the snapshot as completed</li>  *<li>After cluster state is updated, the {@link #endSnapshot(SnapshotsInProgress.Entry)} finalizes snapshot in the repository,  * notifies all {@link #snapshotCompletionListeners} that snapshot is completed, and finally calls {@link #removeSnapshotFromClusterState(SnapshotId, SnapshotInfo, Throwable)} to remove snapshot from cluster state</li>  *</ul>  */
end_comment

begin_class
DECL|class|SnapshotsService
specifier|public
class|class
name|SnapshotsService
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|SnapshotsService
argument_list|>
implements|implements
name|ClusterStateListener
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indexNameExpressionResolver
specifier|private
specifier|final
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
decl_stmt|;
DECL|field|repositoriesService
specifier|private
specifier|final
name|RepositoriesService
name|repositoriesService
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|snapshotCompletionListeners
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|SnapshotCompletionListener
argument_list|>
name|snapshotCompletionListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|SnapshotsService
specifier|public
name|SnapshotsService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|RepositoriesService
name|repositoriesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indexNameExpressionResolver
operator|=
name|indexNameExpressionResolver
expr_stmt|;
name|this
operator|.
name|repositoriesService
operator|=
name|repositoriesService
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
if|if
condition|(
name|DiscoveryNode
operator|.
name|masterNode
argument_list|(
name|settings
argument_list|)
condition|)
block|{
comment|// addLast to make sure that Repository will be created before snapshot
name|clusterService
operator|.
name|addLast
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Retrieves snapshot from repository      *      * @param snapshotId snapshot id      * @return snapshot      * @throws SnapshotMissingException if snapshot is not found      */
DECL|method|snapshot
specifier|public
name|Snapshot
name|snapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
name|validate
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|currentSnapshots
argument_list|(
name|snapshotId
operator|.
name|getRepository
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|snapshotId
operator|.
name|getSnapshot
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|inProgressSnapshot
argument_list|(
name|entries
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
return|return
name|repositoriesService
operator|.
name|repository
argument_list|(
name|snapshotId
operator|.
name|getRepository
argument_list|()
argument_list|)
operator|.
name|readSnapshot
argument_list|(
name|snapshotId
argument_list|)
return|;
block|}
comment|/**      * Returns a list of snapshots from repository sorted by snapshot creation date      *      * @param repositoryName repository name      * @return list of snapshots      */
DECL|method|snapshots
specifier|public
name|List
argument_list|<
name|Snapshot
argument_list|>
name|snapshots
parameter_list|(
name|String
name|repositoryName
parameter_list|,
name|boolean
name|ignoreUnavailable
parameter_list|)
block|{
name|Set
argument_list|<
name|Snapshot
argument_list|>
name|snapshotSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|currentSnapshots
argument_list|(
name|repositoryName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|snapshotSet
operator|.
name|add
argument_list|(
name|inProgressSnapshot
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Repository
name|repository
init|=
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repositoryName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotId
argument_list|>
name|snapshotIds
init|=
name|repository
operator|.
name|snapshots
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotId
name|snapshotId
range|:
name|snapshotIds
control|)
block|{
try|try
block|{
name|snapshotSet
operator|.
name|add
argument_list|(
name|repository
operator|.
name|readSnapshot
argument_list|(
name|snapshotId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ignoreUnavailable
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to get snapshot [{}]"
argument_list|,
name|ex
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
name|snapshotId
argument_list|,
literal|"Snapshot could not be read"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
name|ArrayList
argument_list|<
name|Snapshot
argument_list|>
name|snapshotList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|snapshotSet
argument_list|)
decl_stmt|;
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|snapshotList
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|snapshotList
argument_list|)
return|;
block|}
comment|/**      * Returns a list of currently running snapshots from repository sorted by snapshot creation date      *      * @param repositoryName repository name      * @return list of snapshots      */
DECL|method|currentSnapshots
specifier|public
name|List
argument_list|<
name|Snapshot
argument_list|>
name|currentSnapshots
parameter_list|(
name|String
name|repositoryName
parameter_list|)
block|{
name|List
argument_list|<
name|Snapshot
argument_list|>
name|snapshotList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|currentSnapshots
argument_list|(
name|repositoryName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|snapshotList
operator|.
name|add
argument_list|(
name|inProgressSnapshot
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|snapshotList
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|snapshotList
argument_list|)
return|;
block|}
comment|/**      * Initializes the snapshotting process.      *<p>      * This method is used by clients to start snapshot. It makes sure that there is no snapshots are currently running and      * creates a snapshot record in cluster state metadata.      *      * @param request  snapshot request      * @param listener snapshot creation listener      */
DECL|method|createSnapshot
specifier|public
name|void
name|createSnapshot
parameter_list|(
specifier|final
name|SnapshotRequest
name|request
parameter_list|,
specifier|final
name|CreateSnapshotListener
name|listener
parameter_list|)
block|{
specifier|final
name|SnapshotId
name|snapshotId
init|=
operator|new
name|SnapshotId
argument_list|(
name|request
operator|.
name|repository
argument_list|()
argument_list|,
name|request
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|validate
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
name|request
operator|.
name|cause
argument_list|()
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
specifier|private
name|SnapshotsInProgress
operator|.
name|Entry
name|newSnapshot
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|validate
argument_list|(
name|request
argument_list|,
name|currentState
argument_list|)
expr_stmt|;
name|SnapshotsInProgress
name|snapshots
init|=
name|currentState
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshots
operator|==
literal|null
operator|||
name|snapshots
operator|.
name|entries
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Store newSnapshot here to be processed in clusterStateProcessed
name|List
argument_list|<
name|String
argument_list|>
name|indices
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndices
argument_list|(
name|currentState
argument_list|,
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|,
name|request
operator|.
name|indices
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] creating snapshot for indices [{}]"
argument_list|,
name|request
operator|.
name|repository
argument_list|()
argument_list|,
name|request
operator|.
name|name
argument_list|()
argument_list|,
name|indices
argument_list|)
expr_stmt|;
name|newSnapshot
operator|=
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|(
name|snapshotId
argument_list|,
name|request
operator|.
name|includeGlobalState
argument_list|()
argument_list|,
name|request
operator|.
name|partial
argument_list|()
argument_list|,
name|State
operator|.
name|INIT
argument_list|,
name|indices
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|snapshots
operator|=
operator|new
name|SnapshotsInProgress
argument_list|(
name|newSnapshot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: What should we do if a snapshot is already running?
throw|throw
operator|new
name|ConcurrentSnapshotExecutionException
argument_list|(
name|snapshotId
argument_list|,
literal|"a snapshot is already running"
argument_list|)
throw|;
block|}
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|putCustom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|,
name|snapshots
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}][{}] failed to create snapshot"
argument_list|,
name|t
argument_list|,
name|request
operator|.
name|repository
argument_list|()
argument_list|,
name|request
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|newSnapshot
operator|=
literal|null
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
specifier|final
name|ClusterState
name|newState
parameter_list|)
block|{
if|if
condition|(
name|newSnapshot
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SNAPSHOT
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|beginSnapshot
argument_list|(
name|newState
argument_list|,
name|newSnapshot
argument_list|,
name|request
operator|.
name|partial
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TimeValue
name|timeout
parameter_list|()
block|{
return|return
name|request
operator|.
name|masterNodeTimeout
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Validates snapshot request      *      * @param request snapshot request      * @param state   current cluster state      */
DECL|method|validate
specifier|private
name|void
name|validate
parameter_list|(
name|SnapshotRequest
name|request
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|RepositoriesMetaData
name|repositoriesMetaData
init|=
name|state
operator|.
name|getMetaData
argument_list|()
operator|.
name|custom
argument_list|(
name|RepositoriesMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositoriesMetaData
operator|==
literal|null
operator|||
name|repositoriesMetaData
operator|.
name|repository
argument_list|(
name|request
operator|.
name|repository
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryMissingException
argument_list|(
name|request
operator|.
name|repository
argument_list|()
argument_list|)
throw|;
block|}
name|validate
argument_list|(
operator|new
name|SnapshotId
argument_list|(
name|request
operator|.
name|repository
argument_list|()
argument_list|,
name|request
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validate
specifier|private
specifier|static
name|void
name|validate
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
name|String
name|name
init|=
name|snapshotId
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|hasLength
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidSnapshotNameException
argument_list|(
name|snapshotId
argument_list|,
literal|"cannot be empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidSnapshotNameException
argument_list|(
name|snapshotId
argument_list|,
literal|"must not contain whitespace"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidSnapshotNameException
argument_list|(
name|snapshotId
argument_list|,
literal|"must not contain ','"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidSnapshotNameException
argument_list|(
name|snapshotId
argument_list|,
literal|"must not contain '#'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'_'
condition|)
block|{
throw|throw
operator|new
name|InvalidSnapshotNameException
argument_list|(
name|snapshotId
argument_list|,
literal|"must not start with '_'"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidSnapshotNameException
argument_list|(
name|snapshotId
argument_list|,
literal|"must be lowercase"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|validFileName
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidSnapshotNameException
argument_list|(
name|snapshotId
argument_list|,
literal|"must not contain the following characters "
operator|+
name|Strings
operator|.
name|INVALID_FILENAME_CHARS
argument_list|)
throw|;
block|}
block|}
comment|/**      * Starts snapshot.      *<p>      * Creates snapshot in repository and updates snapshot metadata record with list of shards that needs to be processed.      *      * @param clusterState               cluster state      * @param snapshot                   snapshot meta data      * @param partial                    allow partial snapshots      * @param userCreateSnapshotListener listener      */
DECL|method|beginSnapshot
specifier|private
name|void
name|beginSnapshot
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
specifier|final
name|SnapshotsInProgress
operator|.
name|Entry
name|snapshot
parameter_list|,
specifier|final
name|boolean
name|partial
parameter_list|,
specifier|final
name|CreateSnapshotListener
name|userCreateSnapshotListener
parameter_list|)
block|{
name|boolean
name|snapshotCreated
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Repository
name|repository
init|=
name|repositoriesService
operator|.
name|repository
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
operator|.
name|getRepository
argument_list|()
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|snapshot
operator|.
name|includeGlobalState
argument_list|()
condition|)
block|{
comment|// Remove global state from the cluster state
name|MetaData
operator|.
name|Builder
name|builder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|snapshot
operator|.
name|indices
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|metaData
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|repository
operator|.
name|initializeSnapshot
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|,
name|snapshot
operator|.
name|indices
argument_list|()
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|snapshotCreated
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|indices
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No indices in this snapshot - we are done
name|userCreateSnapshotListener
operator|.
name|onResponse
argument_list|()
expr_stmt|;
name|endSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
return|return;
block|}
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"update_snapshot ["
operator|+
name|snapshot
operator|.
name|snapshotId
argument_list|()
operator|.
name|getSnapshot
argument_list|()
operator|+
literal|"]"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
name|boolean
name|accepted
init|=
literal|false
decl_stmt|;
name|SnapshotsInProgress
operator|.
name|Entry
name|updatedSnapshot
decl_stmt|;
name|String
name|failure
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|SnapshotsInProgress
name|snapshots
init|=
name|currentState
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
range|:
name|snapshots
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Replace the snapshot that was just created
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|>
name|shards
init|=
name|shards
argument_list|(
name|currentState
argument_list|,
name|entry
operator|.
name|indices
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|partial
condition|)
block|{
name|Tuple
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|indicesWithMissingShards
init|=
name|indicesWithMissingShards
argument_list|(
name|shards
argument_list|,
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|missing
init|=
name|indicesWithMissingShards
operator|.
name|v1
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|closed
init|=
name|indicesWithMissingShards
operator|.
name|v2
argument_list|()
decl_stmt|;
if|if
condition|(
name|missing
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|||
name|closed
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|StringBuilder
name|failureMessage
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|updatedSnapshot
operator|=
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|(
name|entry
argument_list|,
name|State
operator|.
name|FAILED
argument_list|,
name|shards
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|updatedSnapshot
argument_list|)
expr_stmt|;
if|if
condition|(
name|missing
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|failureMessage
operator|.
name|append
argument_list|(
literal|"Indices don't have primary shards "
argument_list|)
expr_stmt|;
name|failureMessage
operator|.
name|append
argument_list|(
name|missing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|closed
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|failureMessage
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|failureMessage
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
name|failureMessage
operator|.
name|append
argument_list|(
literal|"Indices are closed "
argument_list|)
expr_stmt|;
name|failureMessage
operator|.
name|append
argument_list|(
name|closed
argument_list|)
expr_stmt|;
block|}
name|failure
operator|=
name|failureMessage
operator|.
name|toString
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
name|updatedSnapshot
operator|=
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|(
name|entry
argument_list|,
name|State
operator|.
name|STARTED
argument_list|,
name|shards
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|updatedSnapshot
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|completed
argument_list|(
name|shards
operator|.
name|values
argument_list|()
argument_list|)
condition|)
block|{
name|accepted
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|putCustom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|,
operator|new
name|SnapshotsInProgress
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|entries
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to create snapshot"
argument_list|,
name|t
argument_list|,
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|)
expr_stmt|;
name|removeSnapshotFromClusterState
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
try|try
block|{
name|repositoriesService
operator|.
name|repository
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
operator|.
name|getRepository
argument_list|()
argument_list|)
operator|.
name|finalizeSnapshot
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|,
name|snapshot
operator|.
name|indices
argument_list|()
argument_list|,
name|snapshot
operator|.
name|startTime
argument_list|()
argument_list|,
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|t
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Collections
operator|.
expr|<
name|SnapshotShardFailure
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t2
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to close snapshot in repository"
argument_list|,
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|userCreateSnapshotListener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
comment|// The userCreateSnapshotListener.onResponse() notifies caller that the snapshot was accepted
comment|// for processing. If client wants to wait for the snapshot completion, it can register snapshot
comment|// completion listener in this method. For the snapshot completion to work properly, the snapshot
comment|// should still exist when listener is registered.
name|userCreateSnapshotListener
operator|.
name|onResponse
argument_list|()
expr_stmt|;
comment|// Now that snapshot completion listener is registered we can end the snapshot if needed
comment|// We should end snapshot only if 1) we didn't accept it for processing (which happens when there
comment|// is nothing to do) and 2) there was a snapshot in metadata that we should end. Otherwise we should
comment|// go ahead and continue working on this snapshot rather then end here.
if|if
condition|(
operator|!
name|accepted
operator|&&
name|updatedSnapshot
operator|!=
literal|null
condition|)
block|{
name|endSnapshot
argument_list|(
name|updatedSnapshot
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to create snapshot [{}]"
argument_list|,
name|t
argument_list|,
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|)
expr_stmt|;
name|removeSnapshotFromClusterState
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshotCreated
condition|)
block|{
try|try
block|{
name|repositoriesService
operator|.
name|repository
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
operator|.
name|getRepository
argument_list|()
argument_list|)
operator|.
name|finalizeSnapshot
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|,
name|snapshot
operator|.
name|indices
argument_list|()
argument_list|,
name|snapshot
operator|.
name|startTime
argument_list|()
argument_list|,
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|t
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Collections
operator|.
expr|<
name|SnapshotShardFailure
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t2
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to close snapshot in repository"
argument_list|,
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|userCreateSnapshotListener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|inProgressSnapshot
specifier|private
name|Snapshot
name|inProgressSnapshot
parameter_list|(
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
parameter_list|)
block|{
return|return
operator|new
name|Snapshot
argument_list|(
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|entry
operator|.
name|indices
argument_list|()
argument_list|,
name|entry
operator|.
name|startTime
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns status of the currently running snapshots      *<p>      * This method is executed on master node      *</p>      *      * @param repository repository id      * @param snapshots  optional list of snapshots that will be used as a filter      * @return list of metadata for currently running snapshots      */
DECL|method|currentSnapshots
specifier|public
name|List
argument_list|<
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|>
name|currentSnapshots
parameter_list|(
name|String
name|repository
parameter_list|,
name|String
index|[]
name|snapshots
parameter_list|)
block|{
name|SnapshotsInProgress
name|snapshotsInProgress
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotsInProgress
operator|==
literal|null
operator|||
name|snapshotsInProgress
operator|.
name|entries
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
literal|"_all"
operator|.
name|equals
argument_list|(
name|repository
argument_list|)
condition|)
block|{
return|return
name|snapshotsInProgress
operator|.
name|entries
argument_list|()
return|;
block|}
if|if
condition|(
name|snapshotsInProgress
operator|.
name|entries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Most likely scenario - one snapshot is currently running
comment|// Check this snapshot against the query
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
init|=
name|snapshotsInProgress
operator|.
name|entries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|equals
argument_list|(
name|repository
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|snapshots
operator|!=
literal|null
operator|&&
name|snapshots
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|snapshot
range|:
name|snapshots
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|getSnapshot
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshot
argument_list|)
condition|)
block|{
return|return
name|snapshotsInProgress
operator|.
name|entries
argument_list|()
return|;
block|}
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|snapshotsInProgress
operator|.
name|entries
argument_list|()
return|;
block|}
block|}
name|List
argument_list|<
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|>
name|builder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
range|:
name|snapshotsInProgress
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|equals
argument_list|(
name|repository
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|snapshots
operator|!=
literal|null
operator|&&
name|snapshots
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|snapshot
range|:
name|snapshots
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|getSnapshot
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshot
argument_list|)
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|builder
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|builder
argument_list|)
return|;
block|}
comment|/**      * Returns status of shards  currently finished snapshots      *<p>      * This method is executed on master node and it's complimentary to the {@link SnapshotShardsService#currentSnapshotShards(SnapshotId)} because it      * returns similar information but for already finished snapshots.      *</p>      *      * @param snapshotId snapshot id      * @return map of shard id to snapshot status      */
DECL|method|snapshotShards
specifier|public
name|Map
argument_list|<
name|ShardId
argument_list|,
name|IndexShardSnapshotStatus
argument_list|>
name|snapshotShards
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|)
throws|throws
name|IOException
block|{
name|validate
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ShardId
argument_list|,
name|IndexShardSnapshotStatus
argument_list|>
name|shardStatus
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Repository
name|repository
init|=
name|repositoriesService
operator|.
name|repository
argument_list|(
name|snapshotId
operator|.
name|getRepository
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShardRepository
name|indexShardRepository
init|=
name|repositoriesService
operator|.
name|indexShardRepository
argument_list|(
name|snapshotId
operator|.
name|getRepository
argument_list|()
argument_list|)
decl_stmt|;
name|Snapshot
name|snapshot
init|=
name|repository
operator|.
name|readSnapshot
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|repository
operator|.
name|readSnapshotMetaData
argument_list|(
name|snapshotId
argument_list|,
name|snapshot
argument_list|,
name|snapshot
operator|.
name|indices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|snapshot
operator|.
name|indices
argument_list|()
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|metaData
operator|.
name|indices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
condition|)
block|{
name|int
name|numberOfShards
init|=
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfShards
condition|;
name|i
operator|++
control|)
block|{
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|SnapshotShardFailure
name|shardFailure
init|=
name|findShardFailure
argument_list|(
name|snapshot
operator|.
name|shardFailures
argument_list|()
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardFailure
operator|!=
literal|null
condition|)
block|{
name|IndexShardSnapshotStatus
name|shardSnapshotStatus
init|=
operator|new
name|IndexShardSnapshotStatus
argument_list|()
decl_stmt|;
name|shardSnapshotStatus
operator|.
name|updateStage
argument_list|(
name|IndexShardSnapshotStatus
operator|.
name|Stage
operator|.
name|FAILURE
argument_list|)
expr_stmt|;
name|shardSnapshotStatus
operator|.
name|failure
argument_list|(
name|shardFailure
operator|.
name|reason
argument_list|()
argument_list|)
expr_stmt|;
name|shardStatus
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|shardSnapshotStatus
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IndexShardSnapshotStatus
name|shardSnapshotStatus
init|=
name|indexShardRepository
operator|.
name|snapshotStatus
argument_list|(
name|snapshotId
argument_list|,
name|snapshot
operator|.
name|version
argument_list|()
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
name|shardStatus
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|shardSnapshotStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|unmodifiableMap
argument_list|(
name|shardStatus
argument_list|)
return|;
block|}
DECL|method|findShardFailure
specifier|private
name|SnapshotShardFailure
name|findShardFailure
parameter_list|(
name|List
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|shardFailures
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
block|{
for|for
control|(
name|SnapshotShardFailure
name|shardFailure
range|:
name|shardFailures
control|)
block|{
if|if
condition|(
name|shardId
operator|.
name|getIndexName
argument_list|()
operator|.
name|equals
argument_list|(
name|shardFailure
operator|.
name|index
argument_list|()
argument_list|)
operator|&&
name|shardId
operator|.
name|getId
argument_list|()
operator|==
name|shardFailure
operator|.
name|shardId
argument_list|()
condition|)
block|{
return|return
name|shardFailure
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|event
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|nodesRemoved
argument_list|()
condition|)
block|{
name|processSnapshotsOnRemovedNodes
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|routingTableChanged
argument_list|()
condition|)
block|{
name|processStartedShards
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to update snapshot state "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Cleans up shard snapshots that were running on removed nodes      *      * @param event cluster changed event      */
DECL|method|processSnapshotsOnRemovedNodes
specifier|private
name|void
name|processSnapshotsOnRemovedNodes
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|removedNodesCleanupNeeded
argument_list|(
name|event
argument_list|)
condition|)
block|{
comment|// Check if we just became the master
specifier|final
name|boolean
name|newMaster
init|=
operator|!
name|event
operator|.
name|previousState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeMaster
argument_list|()
decl_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"update snapshot state after node removal"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|DiscoveryNodes
name|nodes
init|=
name|currentState
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|SnapshotsInProgress
name|snapshots
init|=
name|currentState
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshots
operator|==
literal|null
condition|)
block|{
return|return
name|currentState
return|;
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|ArrayList
argument_list|<
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SnapshotsInProgress
operator|.
name|Entry
name|snapshot
range|:
name|snapshots
operator|.
name|entries
argument_list|()
control|)
block|{
name|SnapshotsInProgress
operator|.
name|Entry
name|updatedSnapshot
init|=
name|snapshot
decl_stmt|;
name|boolean
name|snapshotChanged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|STARTED
operator|||
name|snapshot
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|ABORTED
condition|)
block|{
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|shards
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|shardEntry
range|:
name|snapshot
operator|.
name|shards
argument_list|()
control|)
block|{
name|ShardSnapshotStatus
name|shardStatus
init|=
name|shardEntry
operator|.
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|shardStatus
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
operator|&&
name|shardStatus
operator|.
name|nodeId
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nodes
operator|.
name|nodeExists
argument_list|(
name|shardStatus
operator|.
name|nodeId
argument_list|()
argument_list|)
condition|)
block|{
name|shards
operator|.
name|put
argument_list|(
name|shardEntry
operator|.
name|key
argument_list|,
name|shardEntry
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: Restart snapshot on another node?
name|snapshotChanged
operator|=
literal|true
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"failing snapshot of shard [{}] on closed node [{}]"
argument_list|,
name|shardEntry
operator|.
name|key
argument_list|,
name|shardStatus
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
name|shards
operator|.
name|put
argument_list|(
name|shardEntry
operator|.
name|key
argument_list|,
operator|new
name|ShardSnapshotStatus
argument_list|(
name|shardStatus
operator|.
name|nodeId
argument_list|()
argument_list|,
name|State
operator|.
name|FAILED
argument_list|,
literal|"node shutdown"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|snapshotChanged
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|shardsMap
init|=
name|shards
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|snapshot
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
operator|&&
name|completed
argument_list|(
name|shardsMap
operator|.
name|values
argument_list|()
argument_list|)
condition|)
block|{
name|updatedSnapshot
operator|=
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|(
name|snapshot
argument_list|,
name|State
operator|.
name|SUCCESS
argument_list|,
name|shardsMap
argument_list|)
expr_stmt|;
name|endSnapshot
argument_list|(
name|updatedSnapshot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updatedSnapshot
operator|=
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|(
name|snapshot
argument_list|,
name|snapshot
operator|.
name|state
argument_list|()
argument_list|,
name|shardsMap
argument_list|)
expr_stmt|;
block|}
block|}
name|entries
operator|.
name|add
argument_list|(
name|updatedSnapshot
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|snapshot
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|INIT
operator|&&
name|newMaster
condition|)
block|{
comment|// Clean up the snapshot that failed to start from the old master
name|deleteSnapshot
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|,
operator|new
name|DeleteSnapshotListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|()
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"cleaned up abandoned snapshot {} in INIT state"
argument_list|,
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to clean up abandoned snapshot {} in INIT state"
argument_list|,
name|snapshot
operator|.
name|snapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|snapshot
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|SUCCESS
operator|&&
name|newMaster
condition|)
block|{
comment|// Finalize the snapshot
name|endSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|snapshots
operator|=
operator|new
name|SnapshotsInProgress
argument_list|(
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|putCustom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|,
name|snapshots
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to update snapshot state after node removal"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processStartedShards
specifier|private
name|void
name|processStartedShards
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|waitingShardsStartedOrUnassigned
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"update snapshot state after shards started"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|RoutingTable
name|routingTable
init|=
name|currentState
operator|.
name|routingTable
argument_list|()
decl_stmt|;
name|SnapshotsInProgress
name|snapshots
init|=
name|currentState
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshots
operator|!=
literal|null
condition|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|ArrayList
argument_list|<
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SnapshotsInProgress
operator|.
name|Entry
name|snapshot
range|:
name|snapshots
operator|.
name|entries
argument_list|()
control|)
block|{
name|SnapshotsInProgress
operator|.
name|Entry
name|updatedSnapshot
init|=
name|snapshot
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|STARTED
condition|)
block|{
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|shards
init|=
name|processWaitingShards
argument_list|(
name|snapshot
operator|.
name|shards
argument_list|()
argument_list|,
name|routingTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|shards
operator|!=
literal|null
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|snapshot
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
operator|&&
name|completed
argument_list|(
name|shards
operator|.
name|values
argument_list|()
argument_list|)
condition|)
block|{
name|updatedSnapshot
operator|=
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|(
name|snapshot
argument_list|,
name|State
operator|.
name|SUCCESS
argument_list|,
name|shards
argument_list|)
expr_stmt|;
name|endSnapshot
argument_list|(
name|updatedSnapshot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updatedSnapshot
operator|=
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|(
name|snapshot
argument_list|,
name|shards
argument_list|)
expr_stmt|;
block|}
block|}
name|entries
operator|.
name|add
argument_list|(
name|updatedSnapshot
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|snapshots
operator|=
operator|new
name|SnapshotsInProgress
argument_list|(
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|putCustom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|,
name|snapshots
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to update snapshot state after shards started from [{}] "
argument_list|,
name|t
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processWaitingShards
specifier|private
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|processWaitingShards
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|snapshotShards
parameter_list|,
name|RoutingTable
name|routingTable
parameter_list|)
block|{
name|boolean
name|snapshotChanged
init|=
literal|false
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|shards
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|shardEntry
range|:
name|snapshotShards
control|)
block|{
name|ShardSnapshotStatus
name|shardStatus
init|=
name|shardEntry
operator|.
name|value
decl_stmt|;
name|ShardId
name|shardId
init|=
name|shardEntry
operator|.
name|key
decl_stmt|;
if|if
condition|(
name|shardStatus
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|WAITING
condition|)
block|{
name|IndexRoutingTable
name|indexShardRoutingTable
init|=
name|routingTable
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexShardRoutingTable
operator|!=
literal|null
condition|)
block|{
name|IndexShardRoutingTable
name|shardRouting
init|=
name|indexShardRoutingTable
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|!=
literal|null
operator|&&
name|shardRouting
operator|.
name|primaryShard
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primaryShard
argument_list|()
operator|.
name|started
argument_list|()
condition|)
block|{
comment|// Shard that we were waiting for has started on a node, let's process it
name|snapshotChanged
operator|=
literal|true
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"starting shard that we were waiting for [{}] on node [{}]"
argument_list|,
name|shardId
argument_list|,
name|shardStatus
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
name|shards
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
operator|new
name|ShardSnapshotStatus
argument_list|(
name|shardRouting
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|shardRouting
operator|.
name|primaryShard
argument_list|()
operator|.
name|initializing
argument_list|()
operator|||
name|shardRouting
operator|.
name|primaryShard
argument_list|()
operator|.
name|relocating
argument_list|()
condition|)
block|{
comment|// Shard that we were waiting for hasn't started yet or still relocating - will continue to wait
name|shards
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|shardStatus
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
comment|// Shard that we were waiting for went into unassigned state or disappeared - giving up
name|snapshotChanged
operator|=
literal|true
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"failing snapshot of shard [{}] on unassigned shard [{}]"
argument_list|,
name|shardId
argument_list|,
name|shardStatus
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
name|shards
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
operator|new
name|ShardSnapshotStatus
argument_list|(
name|shardStatus
operator|.
name|nodeId
argument_list|()
argument_list|,
name|State
operator|.
name|FAILED
argument_list|,
literal|"shard is unassigned"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shards
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|shardStatus
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|snapshotChanged
condition|)
block|{
return|return
name|shards
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|waitingShardsStartedOrUnassigned
specifier|private
name|boolean
name|waitingShardsStartedOrUnassigned
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|SnapshotsInProgress
name|curr
init|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|curr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
range|:
name|curr
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|STARTED
operator|&&
operator|!
name|entry
operator|.
name|waitingIndices
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|index
range|:
name|entry
operator|.
name|waitingIndices
argument_list|()
operator|.
name|keys
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|indexRoutingTableChanged
argument_list|(
name|index
operator|.
name|value
argument_list|)
condition|)
block|{
name|IndexRoutingTable
name|indexShardRoutingTable
init|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
operator|.
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardId
name|shardId
range|:
name|entry
operator|.
name|waitingIndices
argument_list|()
operator|.
name|get
argument_list|(
name|index
operator|.
name|value
argument_list|)
control|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|indexShardRoutingTable
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|!=
literal|null
operator|&&
operator|(
name|shardRouting
operator|.
name|started
argument_list|()
operator|||
name|shardRouting
operator|.
name|unassigned
argument_list|()
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|removedNodesCleanupNeeded
specifier|private
name|boolean
name|removedNodesCleanupNeeded
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
comment|// Check if we just became the master
name|boolean
name|newMaster
init|=
operator|!
name|event
operator|.
name|previousState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeMaster
argument_list|()
decl_stmt|;
name|SnapshotsInProgress
name|snapshotsInProgress
init|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotsInProgress
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|SnapshotsInProgress
operator|.
name|Entry
name|snapshot
range|:
name|snapshotsInProgress
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|newMaster
operator|&&
operator|(
name|snapshot
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|SUCCESS
operator|||
name|snapshot
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|INIT
operator|)
condition|)
block|{
comment|// We just replaced old master and snapshots in intermediate states needs to be cleaned
return|return
literal|true
return|;
block|}
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|event
operator|.
name|nodesDelta
argument_list|()
operator|.
name|removedNodes
argument_list|()
control|)
block|{
for|for
control|(
name|ObjectCursor
argument_list|<
name|ShardSnapshotStatus
argument_list|>
name|shardStatus
range|:
name|snapshot
operator|.
name|shards
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|shardStatus
operator|.
name|value
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
operator|&&
name|node
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|shardStatus
operator|.
name|value
operator|.
name|nodeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// At least one shard was running on the removed node - we need to fail it
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns list of indices with missing shards, and list of indices that are closed      *      * @param shards list of shard statuses      * @return list of failed and closed indices      */
DECL|method|indicesWithMissingShards
specifier|private
name|Tuple
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|indicesWithMissingShards
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|>
name|shards
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|missing
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|closed
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|ShardId
argument_list|,
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|>
name|entry
range|:
name|shards
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|value
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|MISSING
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|hasIndex
argument_list|(
name|entry
operator|.
name|key
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|metaData
operator|.
name|index
argument_list|(
name|entry
operator|.
name|key
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
name|closed
operator|.
name|add
argument_list|(
name|entry
operator|.
name|key
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|missing
operator|.
name|add
argument_list|(
name|entry
operator|.
name|key
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|missing
argument_list|,
name|closed
argument_list|)
return|;
block|}
comment|/**      * Finalizes the shard in repository and then removes it from cluster state      *<p>      * This is non-blocking method that runs on a thread from SNAPSHOT thread pool      *      * @param entry snapshot      */
DECL|method|endSnapshot
name|void
name|endSnapshot
parameter_list|(
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
parameter_list|)
block|{
name|endSnapshot
argument_list|(
name|entry
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Finalizes the shard in repository and then removes it from cluster state      *<p>      * This is non-blocking method that runs on a thread from SNAPSHOT thread pool      *      * @param entry   snapshot      * @param failure failure reason or null if snapshot was successful      */
DECL|method|endSnapshot
specifier|private
name|void
name|endSnapshot
parameter_list|(
specifier|final
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
parameter_list|,
specifier|final
name|String
name|failure
parameter_list|)
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SNAPSHOT
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|SnapshotId
name|snapshotId
init|=
name|entry
operator|.
name|snapshotId
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Repository
name|repository
init|=
name|repositoriesService
operator|.
name|repository
argument_list|(
name|snapshotId
operator|.
name|getRepository
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] finalizing snapshot in repository, state: [{}], failure[{}]"
argument_list|,
name|snapshotId
argument_list|,
name|entry
operator|.
name|state
argument_list|()
argument_list|,
name|failure
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ShardSearchFailure
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|shardFailures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|shardStatus
range|:
name|entry
operator|.
name|shards
argument_list|()
control|)
block|{
name|ShardId
name|shardId
init|=
name|shardStatus
operator|.
name|key
decl_stmt|;
name|ShardSnapshotStatus
name|status
init|=
name|shardStatus
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|state
argument_list|()
operator|.
name|failed
argument_list|()
condition|)
block|{
name|failures
operator|.
name|add
argument_list|(
operator|new
name|ShardSearchFailure
argument_list|(
name|status
operator|.
name|reason
argument_list|()
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
name|status
operator|.
name|nodeId
argument_list|()
argument_list|,
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|,
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shardFailures
operator|.
name|add
argument_list|(
operator|new
name|SnapshotShardFailure
argument_list|(
name|status
operator|.
name|nodeId
argument_list|()
argument_list|,
name|shardId
argument_list|,
name|status
operator|.
name|reason
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Snapshot
name|snapshot
init|=
name|repository
operator|.
name|finalizeSnapshot
argument_list|(
name|snapshotId
argument_list|,
name|entry
operator|.
name|indices
argument_list|()
argument_list|,
name|entry
operator|.
name|startTime
argument_list|()
argument_list|,
name|failure
argument_list|,
name|entry
operator|.
name|shards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|shardFailures
argument_list|)
argument_list|)
decl_stmt|;
name|removeSnapshotFromClusterState
argument_list|(
name|snapshotId
argument_list|,
operator|new
name|SnapshotInfo
argument_list|(
name|snapshot
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to finalize snapshot"
argument_list|,
name|t
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
name|removeSnapshotFromClusterState
argument_list|(
name|snapshotId
argument_list|,
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes record of running snapshot from cluster state      *      * @param snapshotId snapshot id      * @param snapshot   snapshot info if snapshot was successful      * @param t          exception if snapshot failed      */
DECL|method|removeSnapshotFromClusterState
specifier|private
name|void
name|removeSnapshotFromClusterState
parameter_list|(
specifier|final
name|SnapshotId
name|snapshotId
parameter_list|,
specifier|final
name|SnapshotInfo
name|snapshot
parameter_list|,
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"remove snapshot metadata"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|SnapshotsInProgress
name|snapshots
init|=
name|currentState
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshots
operator|!=
literal|null
condition|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|ArrayList
argument_list|<
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
range|:
name|snapshots
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshotId
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|snapshots
operator|=
operator|new
name|SnapshotsInProgress
argument_list|(
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|putCustom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|,
name|snapshots
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to remove snapshot metadata"
argument_list|,
name|t
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
for|for
control|(
name|SnapshotCompletionListener
name|listener
range|:
name|snapshotCompletionListeners
control|)
block|{
try|try
block|{
if|if
condition|(
name|snapshot
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onSnapshotCompletion
argument_list|(
name|snapshotId
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onSnapshotFailure
argument_list|(
name|snapshotId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to notify listener [{}]"
argument_list|,
name|t
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes snapshot from repository.      *<p>      * If the snapshot is still running cancels the snapshot first and then deletes it from the repository.      *      * @param snapshotId snapshot id      * @param listener   listener      */
DECL|method|deleteSnapshot
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
specifier|final
name|SnapshotId
name|snapshotId
parameter_list|,
specifier|final
name|DeleteSnapshotListener
name|listener
parameter_list|)
block|{
name|validate
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"delete snapshot"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
name|boolean
name|waitForSnapshot
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|SnapshotsInProgress
name|snapshots
init|=
name|currentState
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshots
operator|==
literal|null
condition|)
block|{
comment|// No snapshots running - we can continue
return|return
name|currentState
return|;
block|}
name|SnapshotsInProgress
operator|.
name|Entry
name|snapshot
init|=
name|snapshots
operator|.
name|snapshot
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
comment|// This snapshot is not running - continue
if|if
condition|(
operator|!
name|snapshots
operator|.
name|entries
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// However other snapshots are running - cannot continue
throw|throw
operator|new
name|ConcurrentSnapshotExecutionException
argument_list|(
name|snapshotId
argument_list|,
literal|"another snapshot is currently running cannot delete"
argument_list|)
throw|;
block|}
return|return
name|currentState
return|;
block|}
else|else
block|{
comment|// This snapshot is currently running - stopping shards first
name|waitForSnapshot
operator|=
literal|true
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|shards
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|STARTED
operator|&&
name|snapshot
operator|.
name|shards
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// snapshot is currently running - stop started shards
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|shardsBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|shardEntry
range|:
name|snapshot
operator|.
name|shards
argument_list|()
control|)
block|{
name|ShardSnapshotStatus
name|status
init|=
name|shardEntry
operator|.
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
condition|)
block|{
name|shardsBuilder
operator|.
name|put
argument_list|(
name|shardEntry
operator|.
name|key
argument_list|,
operator|new
name|ShardSnapshotStatus
argument_list|(
name|status
operator|.
name|nodeId
argument_list|()
argument_list|,
name|State
operator|.
name|ABORTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shardsBuilder
operator|.
name|put
argument_list|(
name|shardEntry
operator|.
name|key
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
name|shards
operator|=
name|shardsBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|snapshot
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|INIT
condition|)
block|{
comment|// snapshot hasn't started yet - end it
name|shards
operator|=
name|snapshot
operator|.
name|shards
argument_list|()
expr_stmt|;
name|endSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|hasUncompletedShards
init|=
literal|false
decl_stmt|;
comment|// Cleanup in case a node gone missing and snapshot wasn't updated for some reason
for|for
control|(
name|ObjectCursor
argument_list|<
name|ShardSnapshotStatus
argument_list|>
name|shardStatus
range|:
name|snapshot
operator|.
name|shards
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Check if we still have shard running on existing nodes
if|if
condition|(
name|shardStatus
operator|.
name|value
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
operator|==
literal|false
operator|&&
name|shardStatus
operator|.
name|value
operator|.
name|nodeId
argument_list|()
operator|!=
literal|null
operator|&&
name|currentState
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|shardStatus
operator|.
name|value
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasUncompletedShards
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasUncompletedShards
condition|)
block|{
comment|// snapshot is being finalized - wait for shards to complete finalization process
name|logger
operator|.
name|debug
argument_list|(
literal|"trying to delete completed snapshot - should wait for shards to finalize on all nodes"
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
else|else
block|{
comment|// no shards to wait for - finish the snapshot
name|logger
operator|.
name|debug
argument_list|(
literal|"trying to delete completed snapshot with no finalizing shards - can delete immediately"
argument_list|)
expr_stmt|;
name|shards
operator|=
name|snapshot
operator|.
name|shards
argument_list|()
expr_stmt|;
name|endSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
name|SnapshotsInProgress
operator|.
name|Entry
name|newSnapshot
init|=
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|(
name|snapshot
argument_list|,
name|State
operator|.
name|ABORTED
argument_list|,
name|shards
argument_list|)
decl_stmt|;
name|snapshots
operator|=
operator|new
name|SnapshotsInProgress
argument_list|(
name|newSnapshot
argument_list|)
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|putCustom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|,
name|snapshots
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
if|if
condition|(
name|waitForSnapshot
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"adding snapshot completion listener to wait for deleted snapshot to finish"
argument_list|)
expr_stmt|;
name|addListener
argument_list|(
operator|new
name|SnapshotCompletionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSnapshotCompletion
parameter_list|(
name|SnapshotId
name|completedSnapshotId
parameter_list|,
name|SnapshotInfo
name|snapshot
parameter_list|)
block|{
if|if
condition|(
name|completedSnapshotId
operator|.
name|equals
argument_list|(
name|snapshotId
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"deleted snapshot completed - deleting files"
argument_list|)
expr_stmt|;
name|removeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|deleteSnapshotFromRepository
argument_list|(
name|snapshotId
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSnapshotFailure
parameter_list|(
name|SnapshotId
name|failedSnapshotId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failedSnapshotId
operator|.
name|equals
argument_list|(
name|snapshotId
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"deleted snapshot failed - deleting files"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|removeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|deleteSnapshotFromRepository
argument_list|(
name|snapshotId
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"deleted snapshot is not running - deleting files"
argument_list|)
expr_stmt|;
name|deleteSnapshotFromRepository
argument_list|(
name|snapshotId
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if a repository is currently in use by one of the snapshots      *      * @param clusterState cluster state      * @param repository   repository id      * @return true if repository is currently in use by one of the running snapshots      */
DECL|method|isRepositoryInUse
specifier|public
specifier|static
name|boolean
name|isRepositoryInUse
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|repository
parameter_list|)
block|{
name|SnapshotsInProgress
name|snapshots
init|=
name|clusterState
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshots
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SnapshotsInProgress
operator|.
name|Entry
name|snapshot
range|:
name|snapshots
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|repository
operator|.
name|equals
argument_list|(
name|snapshot
operator|.
name|snapshotId
argument_list|()
operator|.
name|getRepository
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Deletes snapshot from repository      *      * @param snapshotId snapshot id      * @param listener   listener      */
DECL|method|deleteSnapshotFromRepository
specifier|private
name|void
name|deleteSnapshotFromRepository
parameter_list|(
specifier|final
name|SnapshotId
name|snapshotId
parameter_list|,
specifier|final
name|DeleteSnapshotListener
name|listener
parameter_list|)
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SNAPSHOT
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Repository
name|repository
init|=
name|repositoriesService
operator|.
name|repository
argument_list|(
name|snapshotId
operator|.
name|getRepository
argument_list|()
argument_list|)
decl_stmt|;
name|repository
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Calculates the list of shards that should be included into the current snapshot      *      * @param clusterState cluster state      * @param indices      list of indices to be snapshotted      * @return list of shard to be included into current snapshot      */
DECL|method|shards
specifier|private
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|>
name|shards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|)
block|{
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|ShardId
argument_list|,
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|>
name|builder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
comment|// The index was deleted before we managed to start the snapshot - mark it as missing.
name|builder
operator|.
name|put
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|(
literal|null
argument_list|,
name|State
operator|.
name|MISSING
argument_list|,
literal|"missing index"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
operator|new
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|(
literal|null
argument_list|,
name|State
operator|.
name|MISSING
argument_list|,
literal|"index is closed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|!=
literal|null
condition|)
block|{
name|ShardRouting
name|primary
init|=
name|indexRoutingTable
operator|.
name|shard
argument_list|(
name|i
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
if|if
condition|(
name|primary
operator|==
literal|null
operator|||
operator|!
name|primary
operator|.
name|assignedToNode
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
operator|new
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|(
literal|null
argument_list|,
name|State
operator|.
name|MISSING
argument_list|,
literal|"primary shard is not allocated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|primary
operator|.
name|relocating
argument_list|()
operator|||
name|primary
operator|.
name|initializing
argument_list|()
condition|)
block|{
comment|// The WAITING state was introduced in V1.2.0 - don't use it if there are nodes with older version in the cluster
name|builder
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
operator|new
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|(
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|State
operator|.
name|WAITING
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|primary
operator|.
name|started
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
operator|new
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|(
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|State
operator|.
name|MISSING
argument_list|,
literal|"primary shard hasn't been started yet"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
operator|new
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|(
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
operator|new
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|(
literal|null
argument_list|,
name|State
operator|.
name|MISSING
argument_list|,
literal|"missing routing table"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Check if any of the indices to be deleted are currently being snapshotted. Fail as deleting an index that is being      * snapshotted (with partial == false) makes the snapshot fail.      */
DECL|method|checkIndexDeletion
specifier|public
specifier|static
name|void
name|checkIndexDeletion
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|indicesToFail
init|=
name|indicesToFailForCloseOrDeletion
argument_list|(
name|currentState
argument_list|,
name|indices
argument_list|)
decl_stmt|;
if|if
condition|(
name|indicesToFail
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot delete indices that are being snapshotted: "
operator|+
name|indicesToFail
operator|+
literal|". Try again after snapshot finishes or cancel the currently running snapshot."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Check if any of the indices to be closed are currently being snapshotted. Fail as closing an index that is being      * snapshotted (with partial == false) makes the snapshot fail.      */
DECL|method|checkIndexClosing
specifier|public
specifier|static
name|void
name|checkIndexClosing
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|indicesToFail
init|=
name|indicesToFailForCloseOrDeletion
argument_list|(
name|currentState
argument_list|,
name|indices
argument_list|)
decl_stmt|;
if|if
condition|(
name|indicesToFail
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot close indices that are being snapshotted: "
operator|+
name|indicesToFail
operator|+
literal|". Try again after snapshot finishes or cancel the currently running snapshot."
argument_list|)
throw|;
block|}
block|}
DECL|method|indicesToFailForCloseOrDeletion
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|indicesToFailForCloseOrDeletion
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|)
block|{
name|SnapshotsInProgress
name|snapshots
init|=
name|currentState
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|indicesToFail
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|snapshots
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
range|:
name|snapshots
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|partial
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|INIT
condition|)
block|{
for|for
control|(
name|String
name|index
range|:
name|entry
operator|.
name|indices
argument_list|()
control|)
block|{
if|if
condition|(
name|indices
operator|.
name|contains
argument_list|(
name|index
argument_list|)
condition|)
block|{
if|if
condition|(
name|indicesToFail
operator|==
literal|null
condition|)
block|{
name|indicesToFail
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|indicesToFail
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|ShardId
argument_list|,
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|>
name|shard
range|:
name|entry
operator|.
name|shards
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|shard
operator|.
name|value
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
condition|)
block|{
if|if
condition|(
name|indices
operator|.
name|contains
argument_list|(
name|shard
operator|.
name|key
operator|.
name|getIndexName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|indicesToFail
operator|==
literal|null
condition|)
block|{
name|indicesToFail
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|indicesToFail
operator|.
name|add
argument_list|(
name|shard
operator|.
name|key
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|indicesToFail
return|;
block|}
comment|/**      * Adds snapshot completion listener      *      * @param listener listener      */
DECL|method|addListener
specifier|public
name|void
name|addListener
parameter_list|(
name|SnapshotCompletionListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|snapshotCompletionListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes snapshot completion listener      *      * @param listener listener      */
DECL|method|removeListener
specifier|public
name|void
name|removeListener
parameter_list|(
name|SnapshotCompletionListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|snapshotCompletionListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{      }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{      }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{
name|clusterService
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getRepositoriesService
specifier|public
name|RepositoriesService
name|getRepositoriesService
parameter_list|()
block|{
return|return
name|repositoriesService
return|;
block|}
comment|/**      * Listener for create snapshot operation      */
DECL|interface|CreateSnapshotListener
specifier|public
specifier|static
interface|interface
name|CreateSnapshotListener
block|{
comment|/**          * Called when snapshot has successfully started          */
DECL|method|onResponse
name|void
name|onResponse
parameter_list|()
function_decl|;
comment|/**          * Called if a snapshot operation couldn't start          */
DECL|method|onFailure
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
comment|/**      * Listener for delete snapshot operation      */
DECL|interface|DeleteSnapshotListener
specifier|public
specifier|static
interface|interface
name|DeleteSnapshotListener
block|{
comment|/**          * Called if delete operation was successful          */
DECL|method|onResponse
name|void
name|onResponse
parameter_list|()
function_decl|;
comment|/**          * Called if delete operation failed          */
DECL|method|onFailure
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
DECL|interface|SnapshotCompletionListener
specifier|public
specifier|static
interface|interface
name|SnapshotCompletionListener
block|{
DECL|method|onSnapshotCompletion
name|void
name|onSnapshotCompletion
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|SnapshotInfo
name|snapshot
parameter_list|)
function_decl|;
DECL|method|onSnapshotFailure
name|void
name|onSnapshotFailure
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
comment|/**      * Snapshot creation request      */
DECL|class|SnapshotRequest
specifier|public
specifier|static
class|class
name|SnapshotRequest
block|{
DECL|field|cause
specifier|private
name|String
name|cause
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|repository
specifier|private
name|String
name|repository
decl_stmt|;
DECL|field|indices
specifier|private
name|String
index|[]
name|indices
decl_stmt|;
DECL|field|indicesOptions
specifier|private
name|IndicesOptions
name|indicesOptions
init|=
name|IndicesOptions
operator|.
name|strictExpandOpen
argument_list|()
decl_stmt|;
DECL|field|partial
specifier|private
name|boolean
name|partial
decl_stmt|;
DECL|field|settings
specifier|private
name|Settings
name|settings
decl_stmt|;
DECL|field|includeGlobalState
specifier|private
name|boolean
name|includeGlobalState
decl_stmt|;
DECL|field|masterNodeTimeout
specifier|private
name|TimeValue
name|masterNodeTimeout
decl_stmt|;
comment|/**          * Constructs new snapshot creation request          *          * @param cause      cause for snapshot operation          * @param name       name of the snapshot          * @param repository name of the repository          */
DECL|method|SnapshotRequest
specifier|public
name|SnapshotRequest
parameter_list|(
name|String
name|cause
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|repository
parameter_list|)
block|{
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
comment|/**          * Sets the list of indices to be snapshotted          *          * @param indices list of indices          * @return this request          */
DECL|method|indices
specifier|public
name|SnapshotRequest
name|indices
parameter_list|(
name|String
index|[]
name|indices
parameter_list|)
block|{
name|this
operator|.
name|indices
operator|=
name|indices
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets repository-specific snapshot settings          *          * @param settings snapshot settings          * @return this request          */
DECL|method|settings
specifier|public
name|SnapshotRequest
name|settings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to true if global state should be stored as part of the snapshot          *          * @param includeGlobalState true if global state should be stored as part of the snapshot          * @return this request          */
DECL|method|includeGlobalState
specifier|public
name|SnapshotRequest
name|includeGlobalState
parameter_list|(
name|boolean
name|includeGlobalState
parameter_list|)
block|{
name|this
operator|.
name|includeGlobalState
operator|=
name|includeGlobalState
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets master node timeout          *          * @param masterNodeTimeout master node timeout          * @return this request          */
DECL|method|masterNodeTimeout
specifier|public
name|SnapshotRequest
name|masterNodeTimeout
parameter_list|(
name|TimeValue
name|masterNodeTimeout
parameter_list|)
block|{
name|this
operator|.
name|masterNodeTimeout
operator|=
name|masterNodeTimeout
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the indices options          *          * @param indicesOptions indices options          * @return this request          */
DECL|method|indicesOptions
specifier|public
name|SnapshotRequest
name|indicesOptions
parameter_list|(
name|IndicesOptions
name|indicesOptions
parameter_list|)
block|{
name|this
operator|.
name|indicesOptions
operator|=
name|indicesOptions
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to true if partial snapshot should be allowed          *          * @param partial true if partial snapshots should be allowed          * @return this request          */
DECL|method|partial
specifier|public
name|SnapshotRequest
name|partial
parameter_list|(
name|boolean
name|partial
parameter_list|)
block|{
name|this
operator|.
name|partial
operator|=
name|partial
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns cause for snapshot operation          *          * @return cause for snapshot operation          */
DECL|method|cause
specifier|public
name|String
name|cause
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
comment|/**          * Returns snapshot name          *          * @return snapshot name          */
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**          * Returns snapshot repository          *          * @return snapshot repository          */
DECL|method|repository
specifier|public
name|String
name|repository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
comment|/**          * Returns the list of indices to be snapshotted          *          * @return the list of indices          */
DECL|method|indices
specifier|public
name|String
index|[]
name|indices
parameter_list|()
block|{
return|return
name|indices
return|;
block|}
comment|/**          * Returns indices options          *          * @return indices options          */
DECL|method|indicesOptions
specifier|public
name|IndicesOptions
name|indicesOptions
parameter_list|()
block|{
return|return
name|indicesOptions
return|;
block|}
comment|/**          * Returns repository-specific settings for the snapshot operation          *          * @return repository-specific settings          */
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
comment|/**          * Returns true if global state should be stored as part of the snapshot          *          * @return true if global state should be stored as part of the snapshot          */
DECL|method|includeGlobalState
specifier|public
name|boolean
name|includeGlobalState
parameter_list|()
block|{
return|return
name|includeGlobalState
return|;
block|}
comment|/**          * Returns true if partial snapshot should be allowed          *          * @return true if partial snapshot should be allowed          */
DECL|method|partial
specifier|public
name|boolean
name|partial
parameter_list|()
block|{
return|return
name|partial
return|;
block|}
comment|/**          * Returns master node timeout          *          * @return master node timeout          */
DECL|method|masterNodeTimeout
specifier|public
name|TimeValue
name|masterNodeTimeout
parameter_list|()
block|{
return|return
name|masterNodeTimeout
return|;
block|}
block|}
block|}
end_class

end_unit

