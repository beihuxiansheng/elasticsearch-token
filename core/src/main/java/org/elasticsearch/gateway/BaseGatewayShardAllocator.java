begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocateUnassignedDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_comment
comment|/**  * An abstract class that implements basic functionality for allocating  * shards to nodes based on shard copies that already exist in the cluster.  *  * Individual implementations of this class are responsible for providing  * the logic to determine to which nodes (if any) those shards are allocated.  */
end_comment

begin_class
DECL|class|BaseGatewayShardAllocator
specifier|public
specifier|abstract
class|class
name|BaseGatewayShardAllocator
extends|extends
name|AbstractComponent
block|{
DECL|method|BaseGatewayShardAllocator
specifier|public
name|BaseGatewayShardAllocator
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
comment|/**      * Allocate unassigned shards to nodes (if any) where valid copies of the shard already exist.      * It is up to the individual implementations of {@link #makeAllocationDecision(ShardRouting, RoutingAllocation, Logger)}      * to make decisions on assigning shards to nodes.      *      * @param allocation the allocation state container object      */
DECL|method|allocateUnassigned
specifier|public
name|void
name|allocateUnassigned
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
specifier|final
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
specifier|final
name|RoutingNodes
operator|.
name|UnassignedShards
operator|.
name|UnassignedIterator
name|unassignedIterator
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|unassignedIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|ShardRouting
name|shard
init|=
name|unassignedIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|AllocateUnassignedDecision
name|allocateUnassignedDecision
init|=
name|makeAllocationDecision
argument_list|(
name|shard
argument_list|,
name|allocation
argument_list|,
name|logger
argument_list|)
decl_stmt|;
if|if
condition|(
name|allocateUnassignedDecision
operator|.
name|isDecisionTaken
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// no decision was taken by this allocator
continue|continue;
block|}
if|if
condition|(
name|allocateUnassignedDecision
operator|.
name|getFinalDecisionSafe
argument_list|()
operator|==
name|Decision
operator|.
name|Type
operator|.
name|YES
condition|)
block|{
name|unassignedIterator
operator|.
name|initialize
argument_list|(
name|allocateUnassignedDecision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|,
name|allocateUnassignedDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|,
name|shard
operator|.
name|primary
argument_list|()
condition|?
name|ShardRouting
operator|.
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
else|:
name|allocation
operator|.
name|clusterInfo
argument_list|()
operator|.
name|getShardSize
argument_list|(
name|shard
argument_list|,
name|ShardRouting
operator|.
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
argument_list|)
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unassignedIterator
operator|.
name|removeAndIgnore
argument_list|(
name|allocateUnassignedDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Make a decision on the allocation of an unassigned shard.  This method is used by      * {@link #allocateUnassigned(RoutingAllocation)} to make decisions about whether or not      * the shard can be allocated by this allocator and if so, to which node it will be allocated.      *      * @param unassignedShard  the unassigned shard to allocate      * @param allocation       the current routing state      * @param logger           the logger      * @return an {@link AllocateUnassignedDecision} with the final decision of whether to allocate and details of the decision      */
DECL|method|makeAllocationDecision
specifier|public
specifier|abstract
name|AllocateUnassignedDecision
name|makeAllocationDecision
parameter_list|(
name|ShardRouting
name|unassignedShard
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|,
name|Logger
name|logger
parameter_list|)
function_decl|;
block|}
end_class

end_unit

