begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaDataIndexUpgradeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|MultiDataPathUpgrader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableSet
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|GatewayMetaState
specifier|public
class|class
name|GatewayMetaState
extends|extends
name|AbstractComponent
implements|implements
name|ClusterStateListener
block|{
DECL|field|nodeEnv
specifier|private
specifier|final
name|NodeEnvironment
name|nodeEnv
decl_stmt|;
DECL|field|metaStateService
specifier|private
specifier|final
name|MetaStateService
name|metaStateService
decl_stmt|;
DECL|field|danglingIndicesState
specifier|private
specifier|final
name|DanglingIndicesState
name|danglingIndicesState
decl_stmt|;
DECL|field|metaDataIndexUpgradeService
specifier|private
specifier|final
name|MetaDataIndexUpgradeService
name|metaDataIndexUpgradeService
decl_stmt|;
annotation|@
name|Nullable
DECL|field|previousMetaData
specifier|private
specifier|volatile
name|MetaData
name|previousMetaData
decl_stmt|;
DECL|field|previouslyWrittenIndices
specifier|private
specifier|volatile
name|Set
argument_list|<
name|String
argument_list|>
name|previouslyWrittenIndices
init|=
name|emptySet
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|GatewayMetaState
specifier|public
name|GatewayMetaState
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|NodeEnvironment
name|nodeEnv
parameter_list|,
name|MetaStateService
name|metaStateService
parameter_list|,
name|DanglingIndicesState
name|danglingIndicesState
parameter_list|,
name|TransportNodesListGatewayMetaState
name|nodesListGatewayMetaState
parameter_list|,
name|MetaDataIndexUpgradeService
name|metaDataIndexUpgradeService
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeEnv
operator|=
name|nodeEnv
expr_stmt|;
name|this
operator|.
name|metaStateService
operator|=
name|metaStateService
expr_stmt|;
name|this
operator|.
name|danglingIndicesState
operator|=
name|danglingIndicesState
expr_stmt|;
name|this
operator|.
name|metaDataIndexUpgradeService
operator|=
name|metaDataIndexUpgradeService
expr_stmt|;
name|nodesListGatewayMetaState
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|DiscoveryNode
operator|.
name|dataNode
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|ensureNoPre019ShardState
argument_list|(
name|nodeEnv
argument_list|)
expr_stmt|;
name|MultiDataPathUpgrader
operator|.
name|upgradeMultiDataPath
argument_list|(
name|nodeEnv
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DiscoveryNode
operator|.
name|masterNode
argument_list|(
name|settings
argument_list|)
operator|||
name|DiscoveryNode
operator|.
name|dataNode
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|nodeEnv
operator|.
name|ensureAtomicMoveSupported
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|DiscoveryNode
operator|.
name|masterNode
argument_list|(
name|settings
argument_list|)
operator|||
name|DiscoveryNode
operator|.
name|dataNode
argument_list|(
name|settings
argument_list|)
condition|)
block|{
try|try
block|{
name|ensureNoPre019State
argument_list|()
expr_stmt|;
name|pre20Upgrade
argument_list|()
expr_stmt|;
name|long
name|startNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|metaStateService
operator|.
name|loadFullState
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"took {} to load state"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to read local state, exiting..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|loadMetaState
specifier|public
name|MetaData
name|loadMetaState
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|metaStateService
operator|.
name|loadFullState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|relevantIndices
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|event
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|disableStatePersistence
argument_list|()
condition|)
block|{
comment|// reset the current metadata, we need to start fresh...
name|this
operator|.
name|previousMetaData
operator|=
literal|null
expr_stmt|;
name|previouslyWrittenIndices
operator|=
name|emptySet
argument_list|()
expr_stmt|;
return|return;
block|}
name|MetaData
name|newMetaData
init|=
name|state
operator|.
name|metaData
argument_list|()
decl_stmt|;
comment|// we don't check if metaData changed, since we might be called several times and we need to check dangling...
name|boolean
name|success
init|=
literal|true
decl_stmt|;
comment|// write the state if this node is a master eligible node or if it is a data node and has shards allocated on it
if|if
condition|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|||
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|dataNode
argument_list|()
condition|)
block|{
if|if
condition|(
name|previousMetaData
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// we determine if or if not we write meta data on data only nodes by looking at the shard routing
comment|// and only write if a shard of this index is allocated on this node
comment|// however, closed indices do not appear in the shard routing. if the meta data for a closed index is
comment|// updated it will therefore not be written in case the list of previouslyWrittenIndices is empty (because state
comment|// persistence was disabled or the node was restarted), see getRelevantIndicesOnDataOnlyNode().
comment|// we therefore have to check here if we have shards on disk and add their indices to the previouslyWrittenIndices list
if|if
condition|(
name|isDataOnlyNode
argument_list|(
name|state
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|newPreviouslyWrittenIndices
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|previouslyWrittenIndices
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|newMetaData
control|)
block|{
name|IndexMetaData
name|indexMetaDataOnDisk
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|.
name|state
argument_list|()
operator|.
name|equals
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
condition|)
block|{
name|indexMetaDataOnDisk
operator|=
name|metaStateService
operator|.
name|loadIndexState
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexMetaDataOnDisk
operator|!=
literal|null
condition|)
block|{
name|newPreviouslyWrittenIndices
operator|.
name|add
argument_list|(
name|indexMetaDataOnDisk
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|newPreviouslyWrittenIndices
operator|.
name|addAll
argument_list|(
name|previouslyWrittenIndices
argument_list|)
expr_stmt|;
name|previouslyWrittenIndices
operator|=
name|unmodifiableSet
argument_list|(
name|newPreviouslyWrittenIndices
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// check if the global state changed?
if|if
condition|(
name|previousMetaData
operator|==
literal|null
operator|||
operator|!
name|MetaData
operator|.
name|isGlobalStateEquals
argument_list|(
name|previousMetaData
argument_list|,
name|newMetaData
argument_list|)
condition|)
block|{
try|try
block|{
name|metaStateService
operator|.
name|writeGlobalState
argument_list|(
literal|"changed"
argument_list|,
name|newMetaData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|Iterable
argument_list|<
name|IndexMetaWriteInfo
argument_list|>
name|writeInfo
decl_stmt|;
name|relevantIndices
operator|=
name|getRelevantIndices
argument_list|(
name|event
operator|.
name|state
argument_list|()
argument_list|,
name|event
operator|.
name|previousState
argument_list|()
argument_list|,
name|previouslyWrittenIndices
argument_list|)
expr_stmt|;
name|writeInfo
operator|=
name|resolveStatesToBeWritten
argument_list|(
name|previouslyWrittenIndices
argument_list|,
name|relevantIndices
argument_list|,
name|previousMetaData
argument_list|,
name|event
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
argument_list|)
expr_stmt|;
comment|// check and write changes in indices
for|for
control|(
name|IndexMetaWriteInfo
name|indexMetaWrite
range|:
name|writeInfo
control|)
block|{
try|try
block|{
name|metaStateService
operator|.
name|writeIndex
argument_list|(
name|indexMetaWrite
operator|.
name|reason
argument_list|,
name|indexMetaWrite
operator|.
name|newMetaData
argument_list|,
name|indexMetaWrite
operator|.
name|previousMetaData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
name|danglingIndicesState
operator|.
name|processDanglingIndices
argument_list|(
name|newMetaData
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|previousMetaData
operator|=
name|newMetaData
expr_stmt|;
name|previouslyWrittenIndices
operator|=
name|unmodifiableSet
argument_list|(
name|relevantIndices
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRelevantIndices
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getRelevantIndices
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ClusterState
name|previousState
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|previouslyWrittenIndices
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|relevantIndices
decl_stmt|;
if|if
condition|(
name|isDataOnlyNode
argument_list|(
name|state
argument_list|)
condition|)
block|{
name|relevantIndices
operator|=
name|getRelevantIndicesOnDataOnlyNode
argument_list|(
name|state
argument_list|,
name|previousState
argument_list|,
name|previouslyWrittenIndices
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|==
literal|true
condition|)
block|{
name|relevantIndices
operator|=
name|getRelevantIndicesForMasterEligibleNode
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|relevantIndices
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
return|return
name|relevantIndices
return|;
block|}
DECL|method|isDataOnlyNode
specifier|protected
specifier|static
name|boolean
name|isDataOnlyNode
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
return|return
operator|(
operator|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|==
literal|false
operator|)
operator|&&
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|dataNode
argument_list|()
operator|)
return|;
block|}
comment|/**      * Throws an IAE if a pre 0.19 state is detected      */
DECL|method|ensureNoPre019State
specifier|private
name|void
name|ensureNoPre019State
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|dataLocation
range|:
name|nodeEnv
operator|.
name|nodeDataPaths
argument_list|()
control|)
block|{
specifier|final
name|Path
name|stateLocation
init|=
name|dataLocation
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|stateLocation
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|stateLocation
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|stateFile
range|:
name|stream
control|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[upgrade]: processing ["
operator|+
name|stateFile
operator|.
name|getFileName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|name
init|=
name|stateFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"metadata-"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Detected pre 0.19 metadata file please upgrade to a version before "
operator|+
name|Version
operator|.
name|CURRENT
operator|.
name|minimumCompatibilityVersion
argument_list|()
operator|+
literal|" first to upgrade state structures - metadata found: ["
operator|+
name|stateFile
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Elasticsearch 2.0 removed several deprecated features and as well as support for Lucene 3.x. This method calls      * {@link MetaDataIndexUpgradeService} to makes sure that indices are compatible with the current version. The      * MetaDataIndexUpgradeService might also update obsolete settings if needed. When this happens we rewrite      * index metadata with new settings.      */
DECL|method|pre20Upgrade
specifier|private
name|void
name|pre20Upgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|MetaData
name|metaData
init|=
name|loadMetaState
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IndexMetaData
argument_list|>
name|updateIndexMetaData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|metaData
control|)
block|{
name|IndexMetaData
name|newMetaData
init|=
name|metaDataIndexUpgradeService
operator|.
name|upgradeIndexMetaData
argument_list|(
name|indexMetaData
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
name|newMetaData
condition|)
block|{
name|updateIndexMetaData
operator|.
name|add
argument_list|(
name|newMetaData
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We successfully checked all indices for backward compatibility and found no non-upgradable indices, which
comment|// means the upgrade can continue. Now it's safe to overwrite index metadata with the new version.
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|updateIndexMetaData
control|)
block|{
name|metaStateService
operator|.
name|writeIndex
argument_list|(
literal|"upgrade"
argument_list|,
name|indexMetaData
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// shard state BWC
DECL|method|ensureNoPre019ShardState
specifier|private
name|void
name|ensureNoPre019ShardState
parameter_list|(
name|NodeEnvironment
name|nodeEnv
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|dataLocation
range|:
name|nodeEnv
operator|.
name|nodeDataPaths
argument_list|()
control|)
block|{
specifier|final
name|Path
name|stateLocation
init|=
name|dataLocation
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|stateLocation
argument_list|)
condition|)
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|stateLocation
argument_list|,
literal|"shards-*"
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|stateFile
range|:
name|stream
control|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Detected pre 0.19 shard state file please upgrade to a version before "
operator|+
name|Version
operator|.
name|CURRENT
operator|.
name|minimumCompatibilityVersion
argument_list|()
operator|+
literal|" first to upgrade state structures - shard state found: ["
operator|+
name|stateFile
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Loads the current meta state for each index in the new cluster state and checks if it has to be persisted.      * Each index state that should be written to disk will be returned. This is only run for data only nodes.      * It will return only the states for indices that actually have a shard allocated on the current node.      *      * @param previouslyWrittenIndices    A list of indices for which the state was already written before      * @param potentiallyUnwrittenIndices The list of indices for which state should potentially be written      * @param previousMetaData            The last meta data we know of. meta data for all indices in previouslyWrittenIndices list is persisted now      * @param newMetaData                 The new metadata      * @return iterable over all indices states that should be written to disk      */
DECL|method|resolveStatesToBeWritten
specifier|public
specifier|static
name|Iterable
argument_list|<
name|GatewayMetaState
operator|.
name|IndexMetaWriteInfo
argument_list|>
name|resolveStatesToBeWritten
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|previouslyWrittenIndices
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|potentiallyUnwrittenIndices
parameter_list|,
name|MetaData
name|previousMetaData
parameter_list|,
name|MetaData
name|newMetaData
parameter_list|)
block|{
name|List
argument_list|<
name|GatewayMetaState
operator|.
name|IndexMetaWriteInfo
argument_list|>
name|indicesToWrite
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|potentiallyUnwrittenIndices
control|)
block|{
name|IndexMetaData
name|newIndexMetaData
init|=
name|newMetaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|IndexMetaData
name|previousIndexMetaData
init|=
name|previousMetaData
operator|==
literal|null
condition|?
literal|null
else|:
name|previousMetaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|writeReason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previouslyWrittenIndices
operator|.
name|contains
argument_list|(
name|index
argument_list|)
operator|==
literal|false
operator|||
name|previousIndexMetaData
operator|==
literal|null
condition|)
block|{
name|writeReason
operator|=
literal|"freshly created"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|previousIndexMetaData
operator|.
name|version
argument_list|()
operator|!=
name|newIndexMetaData
operator|.
name|version
argument_list|()
condition|)
block|{
name|writeReason
operator|=
literal|"version changed from ["
operator|+
name|previousIndexMetaData
operator|.
name|version
argument_list|()
operator|+
literal|"] to ["
operator|+
name|newIndexMetaData
operator|.
name|version
argument_list|()
operator|+
literal|"]"
expr_stmt|;
block|}
if|if
condition|(
name|writeReason
operator|!=
literal|null
condition|)
block|{
name|indicesToWrite
operator|.
name|add
argument_list|(
operator|new
name|GatewayMetaState
operator|.
name|IndexMetaWriteInfo
argument_list|(
name|newIndexMetaData
argument_list|,
name|previousIndexMetaData
argument_list|,
name|writeReason
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|indicesToWrite
return|;
block|}
DECL|method|getRelevantIndicesOnDataOnlyNode
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getRelevantIndicesOnDataOnlyNode
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ClusterState
name|previousState
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|previouslyWrittenIndices
parameter_list|)
block|{
name|RoutingNode
name|newRoutingNode
init|=
name|state
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newRoutingNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cluster state does not contain this node - cannot write index meta state"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|indices
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|routing
range|:
name|newRoutingNode
control|)
block|{
name|indices
operator|.
name|add
argument_list|(
name|routing
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we have to check the meta data also: closed indices will not appear in the routing table, but we must still write the state if we have it written on disk previously
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|state
operator|.
name|metaData
argument_list|()
control|)
block|{
name|boolean
name|isOrWasClosed
init|=
name|indexMetaData
operator|.
name|state
argument_list|()
operator|.
name|equals
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
decl_stmt|;
comment|// if the index is open we might still have to write the state if it just transitioned from closed to open
comment|// so we have to check for that as well.
name|IndexMetaData
name|previousMetaData
init|=
name|previousState
operator|.
name|metaData
argument_list|()
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousMetaData
operator|!=
literal|null
condition|)
block|{
name|isOrWasClosed
operator|=
name|isOrWasClosed
operator|||
name|previousMetaData
operator|.
name|state
argument_list|()
operator|.
name|equals
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previouslyWrittenIndices
operator|.
name|contains
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|&&
name|isOrWasClosed
condition|)
block|{
name|indices
operator|.
name|add
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|indices
return|;
block|}
DECL|method|getRelevantIndicesForMasterEligibleNode
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getRelevantIndicesForMasterEligibleNode
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|relevantIndices
decl_stmt|;
name|relevantIndices
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
comment|// we have to iterate over the metadata to make sure we also capture closed indices
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|state
operator|.
name|metaData
argument_list|()
control|)
block|{
name|relevantIndices
operator|.
name|add
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|relevantIndices
return|;
block|}
DECL|class|IndexMetaWriteInfo
specifier|public
specifier|static
class|class
name|IndexMetaWriteInfo
block|{
DECL|field|newMetaData
specifier|final
name|IndexMetaData
name|newMetaData
decl_stmt|;
DECL|field|reason
specifier|final
name|String
name|reason
decl_stmt|;
DECL|field|previousMetaData
specifier|final
name|IndexMetaData
name|previousMetaData
decl_stmt|;
DECL|method|IndexMetaWriteInfo
specifier|public
name|IndexMetaWriteInfo
parameter_list|(
name|IndexMetaData
name|newMetaData
parameter_list|,
name|IndexMetaData
name|previousMetaData
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|this
operator|.
name|newMetaData
operator|=
name|newMetaData
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
name|this
operator|.
name|previousMetaData
operator|=
name|previousMetaData
expr_stmt|;
block|}
DECL|method|getNewMetaData
specifier|public
name|IndexMetaData
name|getNewMetaData
parameter_list|()
block|{
return|return
name|newMetaData
return|;
block|}
DECL|method|getReason
specifier|public
name|String
name|getReason
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
block|}
block|}
end_class

end_unit

