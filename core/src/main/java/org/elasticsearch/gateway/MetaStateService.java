begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * Handles writing and loading both {@link MetaData} and {@link IndexMetaData}  */
end_comment

begin_class
DECL|class|MetaStateService
specifier|public
class|class
name|MetaStateService
extends|extends
name|AbstractComponent
block|{
DECL|field|nodeEnv
specifier|private
specifier|final
name|NodeEnvironment
name|nodeEnv
decl_stmt|;
DECL|method|MetaStateService
specifier|public
name|MetaStateService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|NodeEnvironment
name|nodeEnv
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeEnv
operator|=
name|nodeEnv
expr_stmt|;
block|}
comment|/**      * Loads the full state, which includes both the global state and all the indices      * meta state.      */
DECL|method|loadFullState
name|MetaData
name|loadFullState
parameter_list|()
throws|throws
name|Exception
block|{
name|MetaData
name|globalMetaData
init|=
name|loadGlobalState
argument_list|()
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
decl_stmt|;
if|if
condition|(
name|globalMetaData
operator|!=
literal|null
condition|)
block|{
name|metaDataBuilder
operator|=
name|MetaData
operator|.
name|builder
argument_list|(
name|globalMetaData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metaDataBuilder
operator|=
name|MetaData
operator|.
name|builder
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|indexFolderName
range|:
name|nodeEnv
operator|.
name|availableIndexFolders
argument_list|()
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|nodeEnv
operator|.
name|resolveIndexFolder
argument_list|(
name|indexFolderName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
condition|)
block|{
name|metaDataBuilder
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] failed to find metadata for existing index location"
argument_list|,
name|indexFolderName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metaDataBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Loads the index state for the provided index name, returning null if doesn't exists.      */
annotation|@
name|Nullable
DECL|method|loadIndexState
specifier|public
name|IndexMetaData
name|loadIndexState
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|IndexMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|nodeEnv
operator|.
name|indexPaths
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Loads all indices states available on disk      */
DECL|method|loadIndicesStates
name|List
argument_list|<
name|IndexMetaData
argument_list|>
name|loadIndicesStates
parameter_list|(
name|Predicate
argument_list|<
name|String
argument_list|>
name|excludeIndexPathIdsPredicate
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|IndexMetaData
argument_list|>
name|indexMetaDataList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|indexFolderName
range|:
name|nodeEnv
operator|.
name|availableIndexFolders
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeIndexPathIdsPredicate
operator|.
name|test
argument_list|(
name|indexFolderName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|nodeEnv
operator|.
name|resolveIndexFolder
argument_list|(
name|indexFolderName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|indexPathId
init|=
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getUUID
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexFolderName
operator|.
name|equals
argument_list|(
name|indexPathId
argument_list|)
condition|)
block|{
name|indexMetaDataList
operator|.
name|add
argument_list|(
name|indexMetaData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"["
operator|+
name|indexFolderName
operator|+
literal|"] invalid index folder name, rename to ["
operator|+
name|indexPathId
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] failed to find metadata for existing index location"
argument_list|,
name|indexFolderName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|indexMetaDataList
return|;
block|}
comment|/**      * Loads the global state, *without* index state, see {@link #loadFullState()} for that.      */
DECL|method|loadGlobalState
name|MetaData
name|loadGlobalState
parameter_list|()
throws|throws
name|IOException
block|{
name|MetaData
name|globalState
init|=
name|MetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|nodeEnv
operator|.
name|nodeDataPaths
argument_list|()
argument_list|)
decl_stmt|;
comment|// ES 2.0 now requires units for all time and byte-sized settings, so we add the default unit if it's missing
comment|// TODO: can we somehow only do this for pre-2.0 cluster state?
if|if
condition|(
name|globalState
operator|!=
literal|null
condition|)
block|{
return|return
name|MetaData
operator|.
name|addDefaultUnitsIfNeeded
argument_list|(
name|logger
argument_list|,
name|globalState
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Writes the index state.      *      * This method is public for testing purposes.      */
DECL|method|writeIndex
specifier|public
name|void
name|writeIndex
parameter_list|(
name|String
name|reason
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Index
name|index
init|=
name|indexMetaData
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] writing state, reason [{}]"
argument_list|,
name|index
argument_list|,
name|reason
argument_list|)
expr_stmt|;
try|try
block|{
name|IndexMetaData
operator|.
name|FORMAT
operator|.
name|write
argument_list|(
name|indexMetaData
argument_list|,
name|nodeEnv
operator|.
name|indexPaths
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}]: failed to write index state"
argument_list|,
name|index
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to write state for ["
operator|+
name|index
operator|+
literal|"]"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes the global state, *without* the indices states.      */
DECL|method|writeGlobalState
name|void
name|writeGlobalState
parameter_list|(
name|String
name|reason
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
throws|throws
name|Exception
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[_global] writing state, reason [{}]"
argument_list|,
name|reason
argument_list|)
expr_stmt|;
try|try
block|{
name|MetaData
operator|.
name|FORMAT
operator|.
name|write
argument_list|(
name|metaData
argument_list|,
name|nodeEnv
operator|.
name|nodeDataPaths
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[_global]: failed to write global state"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to write global state"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

