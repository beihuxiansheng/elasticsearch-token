begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * A comparator that compares ShardRouting based on it's indexes priority (index.priority),  * it's creation date (index.creation_date), or eventually by it's index name in reverse order.  * We try to recover first shards from an index with the highest priority, if that's the same  * we try to compare the timestamp the index is created and pick the newer first (time-based indices,  * here the newer indices matter more). If even that is the same, we compare the index name which is useful  * if the date is baked into the index name. ie logstash-2015.05.03.  */
end_comment

begin_class
DECL|class|PriorityComparator
specifier|abstract
class|class
name|PriorityComparator
implements|implements
name|Comparator
argument_list|<
name|ShardRouting
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare
specifier|public
specifier|final
name|int
name|compare
parameter_list|(
name|ShardRouting
name|o1
parameter_list|,
name|ShardRouting
name|o2
parameter_list|)
block|{
specifier|final
name|String
name|o1Index
init|=
name|o1
operator|.
name|index
argument_list|()
decl_stmt|;
specifier|final
name|String
name|o2Index
init|=
name|o2
operator|.
name|index
argument_list|()
decl_stmt|;
name|int
name|cmp
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|o1Index
operator|.
name|equals
argument_list|(
name|o2Index
argument_list|)
operator|==
literal|false
condition|)
block|{
specifier|final
name|Settings
name|settingsO1
init|=
name|getIndexSettings
argument_list|(
name|o1Index
argument_list|)
decl_stmt|;
specifier|final
name|Settings
name|settingsO2
init|=
name|getIndexSettings
argument_list|(
name|o2Index
argument_list|)
decl_stmt|;
name|cmp
operator|=
name|Long
operator|.
name|compare
argument_list|(
name|priority
argument_list|(
name|settingsO2
argument_list|)
argument_list|,
name|priority
argument_list|(
name|settingsO1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|Long
operator|.
name|compare
argument_list|(
name|timeCreated
argument_list|(
name|settingsO2
argument_list|)
argument_list|,
name|timeCreated
argument_list|(
name|settingsO1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|o2Index
operator|.
name|compareTo
argument_list|(
name|o1Index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cmp
return|;
block|}
DECL|method|priority
specifier|private
name|int
name|priority
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|settings
operator|.
name|getAsInt
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_PRIORITY
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|timeCreated
specifier|private
name|long
name|timeCreated
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|settings
operator|.
name|getAsLong
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_CREATION_DATE
argument_list|,
operator|-
literal|1l
argument_list|)
return|;
block|}
DECL|method|getIndexSettings
specifier|protected
specifier|abstract
name|Settings
name|getIndexSettings
parameter_list|(
name|String
name|index
parameter_list|)
function_decl|;
block|}
end_class

end_unit

