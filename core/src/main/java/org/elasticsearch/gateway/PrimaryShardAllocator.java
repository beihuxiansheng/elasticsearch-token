begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The primary shard allocator allocates primary shard that were not created as  * a result of an API to a node that held them last to be recovered.  */
end_comment

begin_class
DECL|class|PrimaryShardAllocator
specifier|public
specifier|abstract
class|class
name|PrimaryShardAllocator
extends|extends
name|AbstractComponent
block|{
DECL|field|INDEX_RECOVERY_INITIAL_SHARDS
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_RECOVERY_INITIAL_SHARDS
init|=
literal|"index.recovery.initial_shards"
decl_stmt|;
DECL|field|initialShards
specifier|private
specifier|final
name|String
name|initialShards
decl_stmt|;
DECL|method|PrimaryShardAllocator
specifier|public
name|PrimaryShardAllocator
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|initialShards
operator|=
name|settings
operator|.
name|get
argument_list|(
literal|"gateway.initial_shards"
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"gateway.local.initial_shards"
argument_list|,
literal|"quorum"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using initial_shards [{}]"
argument_list|,
name|initialShards
argument_list|)
expr_stmt|;
block|}
DECL|method|allocateUnassigned
specifier|public
name|boolean
name|allocateUnassigned
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
specifier|final
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
specifier|final
name|MetaData
name|metaData
init|=
name|routingNodes
operator|.
name|metaData
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|ShardRouting
argument_list|>
name|unassignedIterator
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|unassignedIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ShardRouting
name|shard
init|=
name|unassignedIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|needToFindPrimaryCopy
argument_list|(
name|shard
argument_list|,
name|routingNodes
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|shard
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|shard
argument_list|(
name|shard
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|false
condition|)
block|{
continue|continue;
block|}
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
argument_list|>
name|shardState
init|=
name|fetchData
argument_list|(
name|shard
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardState
operator|.
name|hasData
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{}: ignoring allocation, still fetching shard started state"
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|unassignedIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|routingNodes
operator|.
name|ignoredUnassigned
argument_list|()
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|IndexMetaData
name|indexMetaData
init|=
name|metaData
operator|.
name|index
argument_list|(
name|shard
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|NodesAndVersions
name|nodesAndVersions
init|=
name|buildNodesAndVersions
argument_list|(
name|shard
argument_list|,
name|recoverOnAnyNode
argument_list|(
name|indexMetaData
operator|.
name|settings
argument_list|()
argument_list|)
argument_list|,
name|allocation
operator|.
name|getIgnoreNodes
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|,
name|shardState
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}] found {} allocations of {}, highest version: [{}]"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|nodesAndVersions
operator|.
name|allocationsFound
argument_list|,
name|shard
argument_list|,
name|nodesAndVersions
operator|.
name|highestVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEnoughAllocationsFound
argument_list|(
name|shard
argument_list|,
name|indexMetaData
argument_list|,
name|nodesAndVersions
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// if we are restoring this shard we still can allocate
if|if
condition|(
name|shard
operator|.
name|restoreSource
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// we can't really allocate, so ignore it and continue
name|unassignedIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|routingNodes
operator|.
name|ignoredUnassigned
argument_list|()
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: not allocating, number_of_allocated_shards_found [{}]"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|nodesAndVersions
operator|.
name|allocationsFound
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: missing local data, will restore from [{}]"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
operator|.
name|restoreSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|NodesToAllocate
name|nodesToAllocate
init|=
name|buildNodesToAllocate
argument_list|(
name|shard
argument_list|,
name|allocation
argument_list|,
name|nodesAndVersions
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesToAllocate
operator|.
name|yesNodes
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|DiscoveryNode
name|node
init|=
name|nodesToAllocate
operator|.
name|yesNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: allocating [{}] to [{}] on primary allocation"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|routingNodes
operator|.
name|initialize
argument_list|(
operator|new
name|ShardRouting
argument_list|(
name|shard
argument_list|,
name|nodesAndVersions
operator|.
name|highestVersion
argument_list|)
argument_list|,
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|unassignedIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodesToAllocate
operator|.
name|throttleNodes
operator|.
name|isEmpty
argument_list|()
operator|==
literal|true
operator|&&
name|nodesToAllocate
operator|.
name|noNodes
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|DiscoveryNode
name|node
init|=
name|nodesToAllocate
operator|.
name|noNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: forcing allocating [{}] to [{}] on primary allocation"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|routingNodes
operator|.
name|initialize
argument_list|(
operator|new
name|ShardRouting
argument_list|(
name|shard
argument_list|,
name|nodesAndVersions
operator|.
name|highestVersion
argument_list|)
argument_list|,
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|unassignedIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// we are throttling this, but we have enough to allocate to this node, ignore it for now
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: throttling allocation [{}] to [{}] on primary allocation"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|,
name|nodesToAllocate
operator|.
name|throttleNodes
argument_list|)
expr_stmt|;
name|unassignedIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|routingNodes
operator|.
name|ignoredUnassigned
argument_list|()
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
comment|/**      * Does the shard need to find a primary copy?      */
DECL|method|needToFindPrimaryCopy
name|boolean
name|needToFindPrimaryCopy
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|IndexShardRoutingTable
name|indexShardRoutingTable
parameter_list|)
block|{
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// this is an API allocation, ignore since we know there is no data...
if|if
condition|(
name|indexShardRoutingTable
operator|.
name|primaryAllocatedPostApi
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|isEnoughAllocationsFound
specifier|private
name|boolean
name|isEnoughAllocationsFound
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|NodesAndVersions
name|nodesAndVersions
parameter_list|)
block|{
comment|// check if the counts meets the minimum set
name|int
name|requiredAllocation
init|=
literal|1
decl_stmt|;
comment|// if we restore from a repository one copy is more then enough
if|if
condition|(
name|shard
operator|.
name|restoreSource
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|String
name|initialShards
init|=
name|indexMetaData
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
name|INDEX_RECOVERY_INITIAL_SHARDS
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|INDEX_RECOVERY_INITIAL_SHARDS
argument_list|,
name|this
operator|.
name|initialShards
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"quorum"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
operator|>
literal|1
condition|)
block|{
name|requiredAllocation
operator|=
operator|(
operator|(
literal|1
operator|+
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
operator|)
operator|/
literal|2
operator|)
operator|+
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"quorum-1"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
operator|||
literal|"half"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
operator|>
literal|2
condition|)
block|{
name|requiredAllocation
operator|=
operator|(
operator|(
literal|1
operator|+
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
operator|)
operator|/
literal|2
operator|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"one"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
name|requiredAllocation
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"full"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
operator|||
literal|"all"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
name|requiredAllocation
operator|=
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"full-1"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
operator|||
literal|"all-1"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
operator|>
literal|1
condition|)
block|{
name|requiredAllocation
operator|=
name|indexMetaData
operator|.
name|numberOfReplicas
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|requiredAllocation
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|initialShards
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}][{}] failed to derived initial_shards from value {}, ignore allocation for {}"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|initialShards
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodesAndVersions
operator|.
name|allocationsFound
operator|>=
name|requiredAllocation
return|;
block|}
comment|/**      * Based on the nodes and versions, build the list of yes/no/throttle nodes that the shard applies to.      */
DECL|method|buildNodesToAllocate
specifier|private
name|NodesToAllocate
name|buildNodesToAllocate
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|,
name|NodesAndVersions
name|nodesAndVersions
parameter_list|)
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|yesNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|throttledNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|noNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|discoNode
range|:
name|nodesAndVersions
operator|.
name|nodes
control|)
block|{
name|RoutingNode
name|node
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|discoNode
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Decision
name|decision
init|=
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canAllocate
argument_list|(
name|shard
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|decision
operator|.
name|type
argument_list|()
operator|==
name|Decision
operator|.
name|Type
operator|.
name|THROTTLE
condition|)
block|{
name|throttledNodes
operator|.
name|add
argument_list|(
name|discoNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|decision
operator|.
name|type
argument_list|()
operator|==
name|Decision
operator|.
name|Type
operator|.
name|NO
condition|)
block|{
name|noNodes
operator|.
name|add
argument_list|(
name|discoNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|yesNodes
operator|.
name|add
argument_list|(
name|discoNode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NodesToAllocate
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|yesNodes
argument_list|)
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|throttledNodes
argument_list|)
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|noNodes
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Builds a list of nodes and version      */
DECL|method|buildNodesAndVersions
specifier|private
name|NodesAndVersions
name|buildNodesAndVersions
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|boolean
name|recoveryOnAnyNode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreNodes
parameter_list|,
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
argument_list|>
name|shardState
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|Long
argument_list|>
name|nodesWithVersion
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|int
name|numberOfAllocationsFound
init|=
literal|0
decl_stmt|;
name|long
name|highestVersion
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
name|nodeShardState
range|:
name|shardState
operator|.
name|getData
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|version
init|=
name|nodeShardState
operator|.
name|version
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|node
init|=
name|nodeShardState
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreNodes
operator|.
name|contains
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// -1 version means it does not exists, which is what the API returns, and what we expect to
if|if
condition|(
name|nodeShardState
operator|.
name|storeException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has version [{}] of shard"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// when there is an store exception, we disregard the reported version and assign it as -1 (same as shard does not exist)
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has version [{}] but the store can not be opened, treating as version -1"
argument_list|,
name|nodeShardState
operator|.
name|storeException
argument_list|()
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|version
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|recoveryOnAnyNode
condition|)
block|{
name|numberOfAllocationsFound
operator|++
expr_stmt|;
if|if
condition|(
name|version
operator|>
name|highestVersion
condition|)
block|{
name|highestVersion
operator|=
name|version
expr_stmt|;
block|}
comment|// We always put the node without clearing the map
name|nodesWithVersion
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|!=
operator|-
literal|1
condition|)
block|{
name|numberOfAllocationsFound
operator|++
expr_stmt|;
comment|// If we've found a new "best" candidate, clear the
comment|// current candidates and add it
if|if
condition|(
name|version
operator|>
name|highestVersion
condition|)
block|{
name|highestVersion
operator|=
name|version
expr_stmt|;
name|nodesWithVersion
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nodesWithVersion
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|==
name|highestVersion
condition|)
block|{
comment|// If the candidate is the same, add it to the
comment|// list, but keep the current candidate
name|nodesWithVersion
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now that we have a map of nodes to versions along with the
comment|// number of allocations found (and not ignored), we need to sort
comment|// it so the node with the highest version is at the beginning
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesWithHighestVersion
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|nodesWithHighestVersion
operator|.
name|addAll
argument_list|(
name|nodesWithVersion
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|nodesWithHighestVersion
argument_list|,
operator|new
name|Comparator
argument_list|<
name|DiscoveryNode
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DiscoveryNode
name|o1
parameter_list|,
name|DiscoveryNode
name|o2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|nodesWithVersion
operator|.
name|get
argument_list|(
name|o2
argument_list|)
argument_list|,
name|nodesWithVersion
operator|.
name|get
argument_list|(
name|o1
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|n
range|:
name|nodesWithVersion
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|n
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" -> "
argument_list|)
operator|.
name|append
argument_list|(
name|nodesWithVersion
operator|.
name|get
argument_list|(
name|n
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} candidates for allocation: {}"
argument_list|,
name|shard
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NodesAndVersions
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|nodesWithHighestVersion
argument_list|)
argument_list|,
name|numberOfAllocationsFound
argument_list|,
name|highestVersion
argument_list|)
return|;
block|}
comment|/**      * Return {@code true} if the index is configured to allow shards to be      * recovered on any node      */
DECL|method|recoverOnAnyNode
specifier|private
name|boolean
name|recoverOnAnyNode
parameter_list|(
annotation|@
name|IndexSettings
name|Settings
name|idxSettings
parameter_list|)
block|{
return|return
name|IndexMetaData
operator|.
name|isOnSharedFilesystem
argument_list|(
name|idxSettings
argument_list|)
operator|&&
name|idxSettings
operator|.
name|getAsBoolean
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|fetchData
specifier|protected
specifier|abstract
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
argument_list|>
name|fetchData
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
function_decl|;
DECL|class|NodesAndVersions
specifier|static
class|class
name|NodesAndVersions
block|{
DECL|field|nodes
specifier|public
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
decl_stmt|;
DECL|field|allocationsFound
specifier|public
specifier|final
name|int
name|allocationsFound
decl_stmt|;
DECL|field|highestVersion
specifier|public
specifier|final
name|long
name|highestVersion
decl_stmt|;
DECL|method|NodesAndVersions
specifier|public
name|NodesAndVersions
parameter_list|(
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
parameter_list|,
name|int
name|allocationsFound
parameter_list|,
name|long
name|highestVersion
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
name|this
operator|.
name|allocationsFound
operator|=
name|allocationsFound
expr_stmt|;
name|this
operator|.
name|highestVersion
operator|=
name|highestVersion
expr_stmt|;
block|}
block|}
DECL|class|NodesToAllocate
specifier|static
class|class
name|NodesToAllocate
block|{
DECL|field|yesNodes
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|yesNodes
decl_stmt|;
DECL|field|throttleNodes
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|throttleNodes
decl_stmt|;
DECL|field|noNodes
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|noNodes
decl_stmt|;
DECL|method|NodesToAllocate
specifier|public
name|NodesToAllocate
parameter_list|(
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|yesNodes
parameter_list|,
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|throttleNodes
parameter_list|,
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|noNodes
parameter_list|)
block|{
name|this
operator|.
name|yesNodes
operator|=
name|yesNodes
expr_stmt|;
name|this
operator|.
name|throttleNodes
operator|=
name|throttleNodes
expr_stmt|;
name|this
operator|.
name|noNodes
operator|=
name|noNodes
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

