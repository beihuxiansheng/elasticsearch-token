begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|AllocationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocateUnassignedDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|NodeAllocationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|NodeAllocationResult
operator|.
name|ShardStoreInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|ShardLockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|AsyncShardFetch
operator|.
name|FetchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardStateMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * The primary shard allocator allocates unassigned primary shards to nodes that hold  * valid copies of the unassigned primaries.  It does this by iterating over all unassigned  * primary shards in the routing table and fetching shard metadata from each node in the cluster  * that holds a copy of the shard.  The shard metadata from each node is compared against the  * set of valid allocation IDs and for all valid shard copies (if any), the primary shard allocator  * executes the allocation deciders to chose a copy to assign the primary shard to.  *  * Note that the PrimaryShardAllocator does *not* allocate primaries on index creation  * (see {@link org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator}),  * nor does it allocate primaries when a primary shard failed and there is a valid replica  * copy that can immediately be promoted to primary, as this takes place in {@link RoutingNodes#failShard}.  */
end_comment

begin_class
DECL|class|PrimaryShardAllocator
specifier|public
specifier|abstract
class|class
name|PrimaryShardAllocator
extends|extends
name|BaseGatewayShardAllocator
block|{
DECL|field|INITIAL_SHARDS_PARSER
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|INITIAL_SHARDS_PARSER
init|=
parameter_list|(
name|value
parameter_list|)
lambda|->
block|{
switch|switch
condition|(
name|value
condition|)
block|{
case|case
literal|"quorum"
case|:
case|case
literal|"quorum-1"
case|:
case|case
literal|"half"
case|:
case|case
literal|"one"
case|:
case|case
literal|"full"
case|:
case|case
literal|"full-1"
case|:
case|case
literal|"all-1"
case|:
case|case
literal|"all"
case|:
return|return
name|value
return|;
default|default:
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// it can be parsed that's all we care here?
return|return
name|value
return|;
block|}
block|}
decl_stmt|;
DECL|field|NODE_INITIAL_SHARDS_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|NODE_INITIAL_SHARDS_SETTING
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"gateway.initial_shards"
argument_list|,
parameter_list|(
name|settings
parameter_list|)
lambda|->
name|settings
operator|.
name|get
argument_list|(
literal|"gateway.local.initial_shards"
argument_list|,
literal|"quorum"
argument_list|)
argument_list|,
name|INITIAL_SHARDS_PARSER
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|INDEX_RECOVERY_INITIAL_SHARDS_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|INDEX_RECOVERY_INITIAL_SHARDS_SETTING
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"index.recovery.initial_shards"
argument_list|,
parameter_list|(
name|settings
parameter_list|)
lambda|->
name|NODE_INITIAL_SHARDS_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|INITIAL_SHARDS_PARSER
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
decl_stmt|;
DECL|method|PrimaryShardAllocator
specifier|public
name|PrimaryShardAllocator
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using initial_shards [{}]"
argument_list|,
name|NODE_INITIAL_SHARDS_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Is the allocator responsible for allocating the given {@link ShardRouting}?      */
DECL|method|isResponsibleFor
specifier|private
specifier|static
name|boolean
name|isResponsibleFor
parameter_list|(
specifier|final
name|ShardRouting
name|shard
parameter_list|)
block|{
return|return
name|shard
operator|.
name|primary
argument_list|()
comment|// must be primary
operator|&&
name|shard
operator|.
name|unassigned
argument_list|()
comment|// must be unassigned
comment|// only handle either an existing store or a snapshot recovery
operator|&&
operator|(
name|shard
operator|.
name|recoverySource
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|RecoverySource
operator|.
name|Type
operator|.
name|EXISTING_STORE
operator|||
name|shard
operator|.
name|recoverySource
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|RecoverySource
operator|.
name|Type
operator|.
name|SNAPSHOT
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|makeAllocationDecision
specifier|public
name|AllocateUnassignedDecision
name|makeAllocationDecision
parameter_list|(
specifier|final
name|ShardRouting
name|unassignedShard
parameter_list|,
specifier|final
name|RoutingAllocation
name|allocation
parameter_list|,
specifier|final
name|Logger
name|logger
parameter_list|)
block|{
if|if
condition|(
name|isResponsibleFor
argument_list|(
name|unassignedShard
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// this allocator is not responsible for allocating this shard
return|return
name|AllocateUnassignedDecision
operator|.
name|NOT_TAKEN
return|;
block|}
specifier|final
name|boolean
name|explain
init|=
name|allocation
operator|.
name|debugDecision
argument_list|()
decl_stmt|;
specifier|final
name|FetchResult
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|shardState
init|=
name|fetchData
argument_list|(
name|unassignedShard
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardState
operator|.
name|hasData
argument_list|()
operator|==
literal|false
condition|)
block|{
name|allocation
operator|.
name|setHasPendingAsyncFetch
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|explain
condition|)
block|{
name|nodeDecisions
operator|=
name|buildDecisionsForAllNodes
argument_list|(
name|unassignedShard
argument_list|,
name|allocation
argument_list|)
expr_stmt|;
block|}
return|return
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
name|AllocationStatus
operator|.
name|FETCHING_SHARD_DATA
argument_list|,
name|nodeDecisions
argument_list|)
return|;
block|}
comment|// don't create a new IndexSetting object for every shard as this could cause a lot of garbage
comment|// on cluster restart if we allocate a boat load of shards
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|allocation
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|unassignedShard
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|inSyncAllocationIds
init|=
name|indexMetaData
operator|.
name|inSyncAllocationIds
argument_list|(
name|unassignedShard
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|snapshotRestore
init|=
name|unassignedShard
operator|.
name|recoverySource
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|RecoverySource
operator|.
name|Type
operator|.
name|SNAPSHOT
decl_stmt|;
specifier|final
name|boolean
name|recoverOnAnyNode
init|=
name|recoverOnAnyNode
argument_list|(
name|indexMetaData
argument_list|)
decl_stmt|;
specifier|final
name|NodeShardsResult
name|nodeShardsResult
decl_stmt|;
specifier|final
name|boolean
name|enoughAllocationsFound
decl_stmt|;
if|if
condition|(
name|inSyncAllocationIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
assert|assert
name|Version
operator|.
name|indexCreated
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
operator|:
literal|"trying to allocate a primary with an empty in sync allocation id set, but index is new. index: "
operator|+
name|indexMetaData
operator|.
name|getIndex
argument_list|()
assert|;
comment|// when we load an old index (after upgrading cluster) or restore a snapshot of an old index
comment|// fall back to old version-based allocation mode
comment|// Note that once the shard has been active, lastActiveAllocationIds will be non-empty
name|nodeShardsResult
operator|=
name|buildVersionBasedNodeShardsResult
argument_list|(
name|unassignedShard
argument_list|,
name|snapshotRestore
operator|||
name|recoverOnAnyNode
argument_list|,
name|allocation
operator|.
name|getIgnoreNodes
argument_list|(
name|unassignedShard
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|,
name|shardState
argument_list|,
name|logger
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshotRestore
operator|||
name|recoverOnAnyNode
condition|)
block|{
name|enoughAllocationsFound
operator|=
name|nodeShardsResult
operator|.
name|allocationsFound
operator|>
literal|0
expr_stmt|;
block|}
else|else
block|{
name|enoughAllocationsFound
operator|=
name|isEnoughVersionBasedAllocationsFound
argument_list|(
name|indexMetaData
argument_list|,
name|nodeShardsResult
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: version-based allocation for pre-{} index found {} allocations of {}"
argument_list|,
name|unassignedShard
operator|.
name|index
argument_list|()
argument_list|,
name|unassignedShard
operator|.
name|id
argument_list|()
argument_list|,
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|,
name|nodeShardsResult
operator|.
name|allocationsFound
argument_list|,
name|unassignedShard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|inSyncAllocationIds
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
assert|;
comment|// use allocation ids to select nodes
name|nodeShardsResult
operator|=
name|buildAllocationIdBasedNodeShardsResult
argument_list|(
name|unassignedShard
argument_list|,
name|snapshotRestore
operator|||
name|recoverOnAnyNode
argument_list|,
name|allocation
operator|.
name|getIgnoreNodes
argument_list|(
name|unassignedShard
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|,
name|inSyncAllocationIds
argument_list|,
name|shardState
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|enoughAllocationsFound
operator|=
name|nodeShardsResult
operator|.
name|orderedAllocationCandidates
operator|.
name|size
argument_list|()
operator|>
literal|0
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: found {} allocation candidates of {} based on allocation ids: [{}]"
argument_list|,
name|unassignedShard
operator|.
name|index
argument_list|()
argument_list|,
name|unassignedShard
operator|.
name|id
argument_list|()
argument_list|,
name|nodeShardsResult
operator|.
name|orderedAllocationCandidates
operator|.
name|size
argument_list|()
argument_list|,
name|unassignedShard
argument_list|,
name|inSyncAllocationIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enoughAllocationsFound
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|snapshotRestore
condition|)
block|{
comment|// let BalancedShardsAllocator take care of allocating this shard
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: missing local data, will restore from [{}]"
argument_list|,
name|unassignedShard
operator|.
name|index
argument_list|()
argument_list|,
name|unassignedShard
operator|.
name|id
argument_list|()
argument_list|,
name|unassignedShard
operator|.
name|recoverySource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|AllocateUnassignedDecision
operator|.
name|NOT_TAKEN
return|;
block|}
elseif|else
if|if
condition|(
name|recoverOnAnyNode
condition|)
block|{
comment|// let BalancedShardsAllocator take care of allocating this shard
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: missing local data, recover from any node"
argument_list|,
name|unassignedShard
operator|.
name|index
argument_list|()
argument_list|,
name|unassignedShard
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|AllocateUnassignedDecision
operator|.
name|NOT_TAKEN
return|;
block|}
else|else
block|{
comment|// We have a shard that was previously allocated, but we could not find a valid shard copy to allocate the primary.
comment|// We could just be waiting for the node that holds the primary to start back up, in which case the allocation for
comment|// this shard will be picked up when the node joins and we do another allocation reroute
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: not allocating, number_of_allocated_shards_found [{}]"
argument_list|,
name|unassignedShard
operator|.
name|index
argument_list|()
argument_list|,
name|unassignedShard
operator|.
name|id
argument_list|()
argument_list|,
name|nodeShardsResult
operator|.
name|allocationsFound
argument_list|)
expr_stmt|;
return|return
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
name|AllocationStatus
operator|.
name|NO_VALID_SHARD_COPY
argument_list|,
name|explain
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
block|}
name|NodesToAllocate
name|nodesToAllocate
init|=
name|buildNodesToAllocate
argument_list|(
name|allocation
argument_list|,
name|nodeShardsResult
operator|.
name|orderedAllocationCandidates
argument_list|,
name|unassignedShard
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node
init|=
literal|null
decl_stmt|;
name|String
name|allocationId
init|=
literal|null
decl_stmt|;
name|boolean
name|throttled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|nodesToAllocate
operator|.
name|yesNodeShards
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|DecidedNode
name|decidedNode
init|=
name|nodesToAllocate
operator|.
name|yesNodeShards
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: allocating [{}] to [{}] on primary allocation"
argument_list|,
name|unassignedShard
operator|.
name|index
argument_list|()
argument_list|,
name|unassignedShard
operator|.
name|id
argument_list|()
argument_list|,
name|unassignedShard
argument_list|,
name|decidedNode
operator|.
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|decidedNode
operator|.
name|nodeShardState
operator|.
name|getNode
argument_list|()
expr_stmt|;
name|allocationId
operator|=
name|decidedNode
operator|.
name|nodeShardState
operator|.
name|allocationId
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodesToAllocate
operator|.
name|throttleNodeShards
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|nodesToAllocate
operator|.
name|noNodeShards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// The deciders returned a NO decision for all nodes with shard copies, so we check if primary shard
comment|// can be force-allocated to one of the nodes.
name|nodesToAllocate
operator|=
name|buildNodesToAllocate
argument_list|(
name|allocation
argument_list|,
name|nodeShardsResult
operator|.
name|orderedAllocationCandidates
argument_list|,
name|unassignedShard
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodesToAllocate
operator|.
name|yesNodeShards
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
specifier|final
name|DecidedNode
name|decidedNode
init|=
name|nodesToAllocate
operator|.
name|yesNodeShards
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|NodeGatewayStartedShards
name|nodeShardState
init|=
name|decidedNode
operator|.
name|nodeShardState
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: allocating [{}] to [{}] on forced primary allocation"
argument_list|,
name|unassignedShard
operator|.
name|index
argument_list|()
argument_list|,
name|unassignedShard
operator|.
name|id
argument_list|()
argument_list|,
name|unassignedShard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|nodeShardState
operator|.
name|getNode
argument_list|()
expr_stmt|;
name|allocationId
operator|=
name|nodeShardState
operator|.
name|allocationId
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodesToAllocate
operator|.
name|throttleNodeShards
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: throttling allocation [{}] to [{}] on forced primary allocation"
argument_list|,
name|unassignedShard
operator|.
name|index
argument_list|()
argument_list|,
name|unassignedShard
operator|.
name|id
argument_list|()
argument_list|,
name|unassignedShard
argument_list|,
name|nodesToAllocate
operator|.
name|throttleNodeShards
argument_list|)
expr_stmt|;
name|throttled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: forced primary allocation denied [{}]"
argument_list|,
name|unassignedShard
operator|.
name|index
argument_list|()
argument_list|,
name|unassignedShard
operator|.
name|id
argument_list|()
argument_list|,
name|unassignedShard
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we are throttling this, since we are allowed to allocate to this node but there are enough allocations
comment|// taking place on the node currently, ignore it for now
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: throttling allocation [{}] to [{}] on primary allocation"
argument_list|,
name|unassignedShard
operator|.
name|index
argument_list|()
argument_list|,
name|unassignedShard
operator|.
name|id
argument_list|()
argument_list|,
name|unassignedShard
argument_list|,
name|nodesToAllocate
operator|.
name|throttleNodeShards
argument_list|)
expr_stmt|;
name|throttled
operator|=
literal|true
expr_stmt|;
block|}
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeResults
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|explain
condition|)
block|{
name|nodeResults
operator|=
name|buildNodeDecisions
argument_list|(
name|nodesToAllocate
argument_list|,
name|inSyncAllocationIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocation
operator|.
name|hasPendingAsyncFetch
argument_list|()
condition|)
block|{
return|return
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
name|AllocationStatus
operator|.
name|FETCHING_SHARD_DATA
argument_list|,
name|nodeResults
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|AllocateUnassignedDecision
operator|.
name|yes
argument_list|(
name|node
argument_list|,
name|allocationId
argument_list|,
name|nodeResults
argument_list|,
literal|false
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|throttled
condition|)
block|{
return|return
name|AllocateUnassignedDecision
operator|.
name|throttle
argument_list|(
name|nodeResults
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_NO
argument_list|,
name|nodeResults
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
comment|/**      * Builds a map of nodes to the corresponding allocation decisions for those nodes.      */
DECL|method|buildNodeDecisions
specifier|private
specifier|static
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|buildNodeDecisions
parameter_list|(
name|NodesToAllocate
name|nodesToAllocate
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|inSyncAllocationIds
parameter_list|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|nodesToAllocate
operator|.
name|yesNodeShards
argument_list|,
name|nodesToAllocate
operator|.
name|throttleNodeShards
argument_list|,
name|nodesToAllocate
operator|.
name|noNodeShards
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Collection
operator|::
name|stream
argument_list|)
operator|.
name|map
argument_list|(
name|dnode
lambda|->
operator|new
name|NodeAllocationResult
argument_list|(
name|dnode
operator|.
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|shardStoreInfo
argument_list|(
name|dnode
operator|.
name|nodeShardState
argument_list|,
name|inSyncAllocationIds
argument_list|)
argument_list|,
name|dnode
operator|.
name|decision
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|shardStoreInfo
specifier|private
specifier|static
name|ShardStoreInfo
name|shardStoreInfo
parameter_list|(
name|NodeGatewayStartedShards
name|nodeShardState
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|inSyncAllocationIds
parameter_list|)
block|{
specifier|final
name|Exception
name|storeErr
init|=
name|nodeShardState
operator|.
name|storeException
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|inSync
init|=
name|nodeShardState
operator|.
name|allocationId
argument_list|()
operator|!=
literal|null
operator|&&
name|inSyncAllocationIds
operator|.
name|contains
argument_list|(
name|nodeShardState
operator|.
name|allocationId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ShardStoreInfo
argument_list|(
name|nodeShardState
operator|.
name|allocationId
argument_list|()
argument_list|,
name|inSync
argument_list|,
name|storeErr
argument_list|)
return|;
block|}
DECL|field|NO_STORE_EXCEPTION_FIRST_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|NO_STORE_EXCEPTION_FIRST_COMPARATOR
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
parameter_list|(
name|NodeGatewayStartedShards
name|state
parameter_list|)
lambda|->
name|state
operator|.
name|storeException
argument_list|()
operator|==
literal|null
argument_list|)
operator|.
name|reversed
argument_list|()
decl_stmt|;
DECL|field|PRIMARY_FIRST_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|PRIMARY_FIRST_COMPARATOR
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
name|NodeGatewayStartedShards
operator|::
name|primary
argument_list|)
operator|.
name|reversed
argument_list|()
decl_stmt|;
comment|/**      * Builds a list of nodes. If matchAnyShard is set to false, only nodes that have an allocation id matching      * inSyncAllocationIds are added to the list. Otherwise, any node that has a shard is added to the list, but      * entries with matching allocation id are always at the front of the list.      */
DECL|method|buildAllocationIdBasedNodeShardsResult
specifier|protected
specifier|static
name|NodeShardsResult
name|buildAllocationIdBasedNodeShardsResult
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|boolean
name|matchAnyShard
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreNodes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|inSyncAllocationIds
parameter_list|,
name|FetchResult
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|shardState
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|nodeShardStates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numberOfAllocationsFound
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeGatewayStartedShards
name|nodeShardState
range|:
name|shardState
operator|.
name|getData
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|nodeShardState
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|String
name|allocationId
init|=
name|nodeShardState
operator|.
name|allocationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreNodes
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|nodeShardState
operator|.
name|storeException
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|allocationId
operator|==
literal|null
operator|&&
name|nodeShardState
operator|.
name|legacyVersion
argument_list|()
operator|==
name|ShardStateMetaData
operator|.
name|NO_VERSION
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has no shard state information"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allocationId
operator|!=
literal|null
condition|)
block|{
assert|assert
name|nodeShardState
operator|.
name|legacyVersion
argument_list|()
operator|==
name|ShardStateMetaData
operator|.
name|NO_VERSION
operator|:
literal|"Allocation id and legacy version cannot be both present"
assert|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has allocation id [{}]"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|allocationId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has no allocation id, out-dated shard (shard state version: [{}])"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|nodeShardState
operator|.
name|legacyVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|String
name|finalAllocationId
init|=
name|allocationId
decl_stmt|;
if|if
condition|(
name|nodeShardState
operator|.
name|storeException
argument_list|()
operator|instanceof
name|ShardLockObtainFailedException
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] on node [{}] has allocation id [{}] but the store can not be opened as it's locked, treating as valid shard"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|finalAllocationId
argument_list|)
argument_list|,
name|nodeShardState
operator|.
name|storeException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] on node [{}] has allocation id [{}] but the store can not be opened, treating as no allocation id"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|finalAllocationId
argument_list|)
argument_list|,
name|nodeShardState
operator|.
name|storeException
argument_list|()
argument_list|)
expr_stmt|;
name|allocationId
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allocationId
operator|!=
literal|null
condition|)
block|{
assert|assert
name|nodeShardState
operator|.
name|storeException
argument_list|()
operator|==
literal|null
operator|||
name|nodeShardState
operator|.
name|storeException
argument_list|()
operator|instanceof
name|ShardLockObtainFailedException
operator|:
literal|"only allow store that can be opened or that throws a ShardLockObtainFailedException while being opened but got a store throwing "
operator|+
name|nodeShardState
operator|.
name|storeException
argument_list|()
assert|;
name|numberOfAllocationsFound
operator|++
expr_stmt|;
if|if
condition|(
name|matchAnyShard
operator|||
name|inSyncAllocationIds
operator|.
name|contains
argument_list|(
name|nodeShardState
operator|.
name|allocationId
argument_list|()
argument_list|)
condition|)
block|{
name|nodeShardStates
operator|.
name|add
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|Comparator
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|comparator
decl_stmt|;
comment|// allocation preference
if|if
condition|(
name|matchAnyShard
condition|)
block|{
comment|// prefer shards with matching allocation ids
name|Comparator
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|matchingAllocationsFirst
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
parameter_list|(
name|NodeGatewayStartedShards
name|state
parameter_list|)
lambda|->
name|inSyncAllocationIds
operator|.
name|contains
argument_list|(
name|state
operator|.
name|allocationId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|reversed
argument_list|()
decl_stmt|;
name|comparator
operator|=
name|matchingAllocationsFirst
operator|.
name|thenComparing
argument_list|(
name|NO_STORE_EXCEPTION_FIRST_COMPARATOR
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|PRIMARY_FIRST_COMPARATOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comparator
operator|=
name|NO_STORE_EXCEPTION_FIRST_COMPARATOR
operator|.
name|thenComparing
argument_list|(
name|PRIMARY_FIRST_COMPARATOR
argument_list|)
expr_stmt|;
block|}
name|nodeShardStates
operator|.
name|sort
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} candidates for allocation: {}"
argument_list|,
name|shard
argument_list|,
name|nodeShardStates
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NodeShardsResult
argument_list|(
name|nodeShardStates
argument_list|,
name|numberOfAllocationsFound
argument_list|)
return|;
block|}
comment|/**      * used by old version-based allocation      */
DECL|method|isEnoughVersionBasedAllocationsFound
specifier|private
name|boolean
name|isEnoughVersionBasedAllocationsFound
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|NodeShardsResult
name|nodeShardsResult
parameter_list|)
block|{
comment|// check if the counts meets the minimum set
name|int
name|requiredAllocation
init|=
literal|1
decl_stmt|;
comment|// if we restore from a repository one copy is more then enough
name|String
name|initialShards
init|=
name|INDEX_RECOVERY_INITIAL_SHARDS_SETTING
operator|.
name|get
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|,
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"quorum"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|>
literal|1
condition|)
block|{
name|requiredAllocation
operator|=
operator|(
operator|(
literal|1
operator|+
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|)
operator|/
literal|2
operator|)
operator|+
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"quorum-1"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
operator|||
literal|"half"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|>
literal|2
condition|)
block|{
name|requiredAllocation
operator|=
operator|(
operator|(
literal|1
operator|+
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|)
operator|/
literal|2
operator|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"one"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
name|requiredAllocation
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"full"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
operator|||
literal|"all"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
name|requiredAllocation
operator|=
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"full-1"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
operator|||
literal|"all-1"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|>
literal|1
condition|)
block|{
name|requiredAllocation
operator|=
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|requiredAllocation
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|initialShards
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeShardsResult
operator|.
name|allocationsFound
operator|>=
name|requiredAllocation
return|;
block|}
comment|/**      * Split the list of node shard states into groups yes/no/throttle based on allocation deciders      */
DECL|method|buildNodesToAllocate
specifier|private
name|NodesToAllocate
name|buildNodesToAllocate
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|nodeShardStates
parameter_list|,
name|ShardRouting
name|shardRouting
parameter_list|,
name|boolean
name|forceAllocate
parameter_list|)
block|{
name|List
argument_list|<
name|DecidedNode
argument_list|>
name|yesNodeShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DecidedNode
argument_list|>
name|throttledNodeShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DecidedNode
argument_list|>
name|noNodeShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeGatewayStartedShards
name|nodeShardState
range|:
name|nodeShardStates
control|)
block|{
name|RoutingNode
name|node
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|nodeShardState
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Decision
name|decision
init|=
name|forceAllocate
condition|?
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canForceAllocatePrimary
argument_list|(
name|shardRouting
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|)
else|:
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canAllocate
argument_list|(
name|shardRouting
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
name|DecidedNode
name|decidedNode
init|=
operator|new
name|DecidedNode
argument_list|(
name|nodeShardState
argument_list|,
name|decision
argument_list|)
decl_stmt|;
if|if
condition|(
name|decision
operator|.
name|type
argument_list|()
operator|==
name|Type
operator|.
name|THROTTLE
condition|)
block|{
name|throttledNodeShards
operator|.
name|add
argument_list|(
name|decidedNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|decision
operator|.
name|type
argument_list|()
operator|==
name|Type
operator|.
name|NO
condition|)
block|{
name|noNodeShards
operator|.
name|add
argument_list|(
name|decidedNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|yesNodeShards
operator|.
name|add
argument_list|(
name|decidedNode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NodesToAllocate
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|yesNodeShards
argument_list|)
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|throttledNodeShards
argument_list|)
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|noNodeShards
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Builds a list of previously started shards. If matchAnyShard is set to false, only shards with the highest shard version are added to      * the list. Otherwise, any existing shard is added to the list, but entries with highest version are always at the front of the list.      */
DECL|method|buildVersionBasedNodeShardsResult
specifier|static
name|NodeShardsResult
name|buildVersionBasedNodeShardsResult
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|boolean
name|matchAnyShard
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreNodes
parameter_list|,
name|FetchResult
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|shardState
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|allocationCandidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numberOfAllocationsFound
init|=
literal|0
decl_stmt|;
name|long
name|highestVersion
init|=
name|ShardStateMetaData
operator|.
name|NO_VERSION
decl_stmt|;
for|for
control|(
name|NodeGatewayStartedShards
name|nodeShardState
range|:
name|shardState
operator|.
name|getData
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|version
init|=
name|nodeShardState
operator|.
name|legacyVersion
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|node
init|=
name|nodeShardState
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreNodes
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|nodeShardState
operator|.
name|storeException
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|version
operator|==
name|ShardStateMetaData
operator|.
name|NO_VERSION
operator|&&
name|nodeShardState
operator|.
name|allocationId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has no shard state information"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|!=
name|ShardStateMetaData
operator|.
name|NO_VERSION
condition|)
block|{
assert|assert
name|nodeShardState
operator|.
name|allocationId
argument_list|()
operator|==
literal|null
operator|:
literal|"Allocation id and legacy version cannot be both present"
assert|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has version [{}] of shard"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// shard was already selected in a 5.x cluster as primary for recovery, was initialized (and wrote a new state file) but
comment|// did not make it to STARTED state before the cluster crashed (otherwise list of active allocation ids would be
comment|// non-empty and allocation id - based allocation mode would be chosen).
comment|// Prefer this shard copy again.
name|version
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has allocation id [{}]"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|nodeShardState
operator|.
name|allocationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|long
name|finalVersion
init|=
name|version
decl_stmt|;
if|if
condition|(
name|nodeShardState
operator|.
name|storeException
argument_list|()
operator|instanceof
name|ShardLockObtainFailedException
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] on node [{}] has version [{}] but the store can not be opened as it's locked, treating as valid shard"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|finalVersion
argument_list|)
argument_list|,
name|nodeShardState
operator|.
name|storeException
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeShardState
operator|.
name|allocationId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
comment|// shard was already selected in a 5.x cluster as primary, prefer this shard copy again.
block|}
else|else
block|{
name|version
operator|=
literal|0L
expr_stmt|;
comment|// treat as lowest version so that this shard is the least likely to be selected as primary
block|}
block|}
else|else
block|{
comment|// disregard the reported version and assign it as no version (same as shard does not exist)
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] on node [{}] has version [{}] but the store can not be opened, treating no version"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|finalVersion
argument_list|)
argument_list|,
name|nodeShardState
operator|.
name|storeException
argument_list|()
argument_list|)
expr_stmt|;
name|version
operator|=
name|ShardStateMetaData
operator|.
name|NO_VERSION
expr_stmt|;
block|}
block|}
if|if
condition|(
name|version
operator|!=
name|ShardStateMetaData
operator|.
name|NO_VERSION
condition|)
block|{
name|numberOfAllocationsFound
operator|++
expr_stmt|;
comment|// If we've found a new "best" candidate, clear the
comment|// current candidates and add it
if|if
condition|(
name|version
operator|>
name|highestVersion
condition|)
block|{
name|highestVersion
operator|=
name|version
expr_stmt|;
if|if
condition|(
name|matchAnyShard
operator|==
literal|false
condition|)
block|{
name|allocationCandidates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|allocationCandidates
operator|.
name|add
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|==
name|highestVersion
condition|)
block|{
comment|// If the candidate is the same, add it to the
comment|// list, but keep the current candidate
name|allocationCandidates
operator|.
name|add
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// sort array so the node with the highest version is at the beginning
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|allocationCandidates
argument_list|,
name|Comparator
operator|.
name|comparing
argument_list|(
name|NodeGatewayStartedShards
operator|::
name|legacyVersion
argument_list|)
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeGatewayStartedShards
name|n
range|:
name|allocationCandidates
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|n
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" -> "
argument_list|)
operator|.
name|append
argument_list|(
name|n
operator|.
name|legacyVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} candidates for allocation: {}"
argument_list|,
name|shard
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NodeShardsResult
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|allocationCandidates
argument_list|)
argument_list|,
name|numberOfAllocationsFound
argument_list|)
return|;
block|}
comment|/**      * Return {@code true} if the index is configured to allow shards to be      * recovered on any node      */
DECL|method|recoverOnAnyNode
specifier|private
name|boolean
name|recoverOnAnyNode
parameter_list|(
name|IndexMetaData
name|metaData
parameter_list|)
block|{
comment|// don't use the setting directly, not to trigger verbose deprecation logging
return|return
operator|(
name|metaData
operator|.
name|isOnSharedFilesystem
argument_list|(
name|metaData
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|||
name|metaData
operator|.
name|isOnSharedFilesystem
argument_list|(
name|this
operator|.
name|settings
argument_list|)
operator|)
operator|&&
operator|(
name|metaData
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsBooleanLenientForPreEs6Indices
argument_list|(
name|metaData
operator|.
name|getCreationVersion
argument_list|()
argument_list|,
name|IndexMetaData
operator|.
name|SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE
argument_list|,
literal|false
argument_list|,
name|deprecationLogger
argument_list|)
operator|||
name|this
operator|.
name|settings
operator|.
name|getAsBooleanLenientForPreEs6Indices
argument_list|(
name|metaData
operator|.
name|getCreationVersion
argument_list|()
argument_list|,
name|IndexMetaData
operator|.
name|SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE
argument_list|,
literal|false
argument_list|,
name|deprecationLogger
argument_list|)
operator|)
return|;
block|}
DECL|method|fetchData
specifier|protected
specifier|abstract
name|FetchResult
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|fetchData
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
function_decl|;
DECL|class|NodeShardsResult
specifier|static
class|class
name|NodeShardsResult
block|{
DECL|field|orderedAllocationCandidates
specifier|public
specifier|final
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|orderedAllocationCandidates
decl_stmt|;
DECL|field|allocationsFound
specifier|public
specifier|final
name|int
name|allocationsFound
decl_stmt|;
DECL|method|NodeShardsResult
specifier|public
name|NodeShardsResult
parameter_list|(
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|orderedAllocationCandidates
parameter_list|,
name|int
name|allocationsFound
parameter_list|)
block|{
name|this
operator|.
name|orderedAllocationCandidates
operator|=
name|orderedAllocationCandidates
expr_stmt|;
name|this
operator|.
name|allocationsFound
operator|=
name|allocationsFound
expr_stmt|;
block|}
block|}
DECL|class|NodesToAllocate
specifier|static
class|class
name|NodesToAllocate
block|{
DECL|field|yesNodeShards
specifier|final
name|List
argument_list|<
name|DecidedNode
argument_list|>
name|yesNodeShards
decl_stmt|;
DECL|field|throttleNodeShards
specifier|final
name|List
argument_list|<
name|DecidedNode
argument_list|>
name|throttleNodeShards
decl_stmt|;
DECL|field|noNodeShards
specifier|final
name|List
argument_list|<
name|DecidedNode
argument_list|>
name|noNodeShards
decl_stmt|;
DECL|method|NodesToAllocate
specifier|public
name|NodesToAllocate
parameter_list|(
name|List
argument_list|<
name|DecidedNode
argument_list|>
name|yesNodeShards
parameter_list|,
name|List
argument_list|<
name|DecidedNode
argument_list|>
name|throttleNodeShards
parameter_list|,
name|List
argument_list|<
name|DecidedNode
argument_list|>
name|noNodeShards
parameter_list|)
block|{
name|this
operator|.
name|yesNodeShards
operator|=
name|yesNodeShards
expr_stmt|;
name|this
operator|.
name|throttleNodeShards
operator|=
name|throttleNodeShards
expr_stmt|;
name|this
operator|.
name|noNodeShards
operator|=
name|noNodeShards
expr_stmt|;
block|}
block|}
comment|/**      * This class encapsulates the shard state retrieved from a node and the decision that was made      * by the allocator for allocating to the node that holds the shard copy.      */
DECL|class|DecidedNode
specifier|private
specifier|static
class|class
name|DecidedNode
block|{
DECL|field|nodeShardState
specifier|final
name|NodeGatewayStartedShards
name|nodeShardState
decl_stmt|;
DECL|field|decision
specifier|final
name|Decision
name|decision
decl_stmt|;
DECL|method|DecidedNode
specifier|private
name|DecidedNode
parameter_list|(
name|NodeGatewayStartedShards
name|nodeShardState
parameter_list|,
name|Decision
name|decision
parameter_list|)
block|{
name|this
operator|.
name|nodeShardState
operator|=
name|nodeShardState
expr_stmt|;
name|this
operator|.
name|decision
operator|=
name|decision
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

