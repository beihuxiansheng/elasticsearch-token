begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|AllocationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardStateMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * The primary shard allocator allocates unassigned primary shards to nodes that hold  * valid copies of the unassigned primaries.  It does this by iterating over all unassigned  * primary shards in the routing table and fetching shard metadata from each node in the cluster  * that holds a copy of the shard.  The shard metadata from each node is compared against the  * set of valid allocation IDs and for all valid shard copies (if any), the primary shard allocator  * executes the allocation deciders to chose a copy to assign the primary shard to.  *  * Note that the PrimaryShardAllocator does *not* allocate primaries on index creation  * (see {@link org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator}),  * nor does it allocate primaries when a primary shard failed and there is a valid replica  * copy that can immediately be promoted to primary, as this takes place in {@link RoutingNodes#failShard}.  */
end_comment

begin_class
DECL|class|PrimaryShardAllocator
specifier|public
specifier|abstract
class|class
name|PrimaryShardAllocator
extends|extends
name|AbstractComponent
block|{
DECL|field|INITIAL_SHARDS_PARSER
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|INITIAL_SHARDS_PARSER
init|=
parameter_list|(
name|value
parameter_list|)
lambda|->
block|{
switch|switch
condition|(
name|value
condition|)
block|{
case|case
literal|"quorum"
case|:
case|case
literal|"quorum-1"
case|:
case|case
literal|"half"
case|:
case|case
literal|"one"
case|:
case|case
literal|"full"
case|:
case|case
literal|"full-1"
case|:
case|case
literal|"all-1"
case|:
case|case
literal|"all"
case|:
return|return
name|value
return|;
default|default:
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// it can be parsed that's all we care here?
return|return
name|value
return|;
block|}
block|}
decl_stmt|;
DECL|field|NODE_INITIAL_SHARDS_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|NODE_INITIAL_SHARDS_SETTING
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"gateway.initial_shards"
argument_list|,
parameter_list|(
name|settings
parameter_list|)
lambda|->
name|settings
operator|.
name|get
argument_list|(
literal|"gateway.local.initial_shards"
argument_list|,
literal|"quorum"
argument_list|)
argument_list|,
name|INITIAL_SHARDS_PARSER
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|INDEX_RECOVERY_INITIAL_SHARDS_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|INDEX_RECOVERY_INITIAL_SHARDS_SETTING
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"index.recovery.initial_shards"
argument_list|,
parameter_list|(
name|settings
parameter_list|)
lambda|->
name|NODE_INITIAL_SHARDS_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|,
name|INITIAL_SHARDS_PARSER
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
decl_stmt|;
DECL|method|PrimaryShardAllocator
specifier|public
name|PrimaryShardAllocator
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using initial_shards [{}]"
argument_list|,
name|NODE_INITIAL_SHARDS_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|allocateUnassigned
specifier|public
name|void
name|allocateUnassigned
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
specifier|final
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
specifier|final
name|MetaData
name|metaData
init|=
name|allocation
operator|.
name|metaData
argument_list|()
decl_stmt|;
specifier|final
name|RoutingNodes
operator|.
name|UnassignedShards
operator|.
name|UnassignedIterator
name|unassignedIterator
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|unassignedIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|ShardRouting
name|shard
init|=
name|unassignedIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|shard
operator|.
name|recoverySource
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|RecoverySource
operator|.
name|Type
operator|.
name|EXISTING_STORE
operator|&&
name|shard
operator|.
name|recoverySource
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|RecoverySource
operator|.
name|Type
operator|.
name|SNAPSHOT
condition|)
block|{
continue|continue;
block|}
specifier|final
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|shardState
init|=
name|fetchData
argument_list|(
name|shard
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardState
operator|.
name|hasData
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{}: ignoring allocation, still fetching shard started state"
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|allocation
operator|.
name|setHasPendingAsyncFetch
argument_list|()
expr_stmt|;
name|unassignedIterator
operator|.
name|removeAndIgnore
argument_list|(
name|AllocationStatus
operator|.
name|FETCHING_SHARD_DATA
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// don't create a new IndexSetting object for every shard as this could cause a lot of garbage
comment|// on cluster restart if we allocate a boat load of shards
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|metaData
operator|.
name|getIndexSafe
argument_list|(
name|shard
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|inSyncAllocationIds
init|=
name|indexMetaData
operator|.
name|inSyncAllocationIds
argument_list|(
name|shard
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|snapshotRestore
init|=
name|shard
operator|.
name|recoverySource
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|RecoverySource
operator|.
name|Type
operator|.
name|SNAPSHOT
decl_stmt|;
specifier|final
name|boolean
name|recoverOnAnyNode
init|=
name|recoverOnAnyNode
argument_list|(
name|indexMetaData
argument_list|)
decl_stmt|;
specifier|final
name|NodeShardsResult
name|nodeShardsResult
decl_stmt|;
specifier|final
name|boolean
name|enoughAllocationsFound
decl_stmt|;
if|if
condition|(
name|inSyncAllocationIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
assert|assert
name|Version
operator|.
name|indexCreated
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
operator|:
literal|"trying to allocated a primary with an empty allocation id set, but index is new"
assert|;
comment|// when we load an old index (after upgrading cluster) or restore a snapshot of an old index
comment|// fall back to old version-based allocation mode
comment|// Note that once the shard has been active, lastActiveAllocationIds will be non-empty
name|nodeShardsResult
operator|=
name|buildVersionBasedNodeShardsResult
argument_list|(
name|shard
argument_list|,
name|snapshotRestore
operator|||
name|recoverOnAnyNode
argument_list|,
name|allocation
operator|.
name|getIgnoreNodes
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|,
name|shardState
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshotRestore
operator|||
name|recoverOnAnyNode
condition|)
block|{
name|enoughAllocationsFound
operator|=
name|nodeShardsResult
operator|.
name|allocationsFound
operator|>
literal|0
expr_stmt|;
block|}
else|else
block|{
name|enoughAllocationsFound
operator|=
name|isEnoughVersionBasedAllocationsFound
argument_list|(
name|indexMetaData
argument_list|,
name|nodeShardsResult
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: version-based allocation for pre-{} index found {} allocations of {}"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|,
name|nodeShardsResult
operator|.
name|allocationsFound
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|inSyncAllocationIds
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
assert|;
comment|// use allocation ids to select nodes
name|nodeShardsResult
operator|=
name|buildAllocationIdBasedNodeShardsResult
argument_list|(
name|shard
argument_list|,
name|snapshotRestore
operator|||
name|recoverOnAnyNode
argument_list|,
name|allocation
operator|.
name|getIgnoreNodes
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|,
name|inSyncAllocationIds
argument_list|,
name|shardState
argument_list|)
expr_stmt|;
name|enoughAllocationsFound
operator|=
name|nodeShardsResult
operator|.
name|orderedAllocationCandidates
operator|.
name|size
argument_list|()
operator|>
literal|0
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: found {} allocation candidates of {} based on allocation ids: [{}]"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|nodeShardsResult
operator|.
name|orderedAllocationCandidates
operator|.
name|size
argument_list|()
argument_list|,
name|shard
argument_list|,
name|inSyncAllocationIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enoughAllocationsFound
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|snapshotRestore
condition|)
block|{
comment|// let BalancedShardsAllocator take care of allocating this shard
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: missing local data, will restore from [{}]"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
operator|.
name|recoverySource
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recoverOnAnyNode
condition|)
block|{
comment|// let BalancedShardsAllocator take care of allocating this shard
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: missing local data, recover from any node"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we can't really allocate, so ignore it and continue
name|unassignedIterator
operator|.
name|removeAndIgnore
argument_list|(
name|AllocationStatus
operator|.
name|NO_VALID_SHARD_COPY
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: not allocating, number_of_allocated_shards_found [{}]"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|nodeShardsResult
operator|.
name|allocationsFound
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
specifier|final
name|NodesToAllocate
name|nodesToAllocate
init|=
name|buildNodesToAllocate
argument_list|(
name|allocation
argument_list|,
name|nodeShardsResult
operator|.
name|orderedAllocationCandidates
argument_list|,
name|shard
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesToAllocate
operator|.
name|yesNodeShards
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|NodeGatewayStartedShards
name|nodeShardState
init|=
name|nodesToAllocate
operator|.
name|yesNodeShards
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: allocating [{}] to [{}] on primary allocation"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|unassignedIterator
operator|.
name|initialize
argument_list|(
name|nodeShardState
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|nodeShardState
operator|.
name|allocationId
argument_list|()
argument_list|,
name|ShardRouting
operator|.
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodesToAllocate
operator|.
name|throttleNodeShards
operator|.
name|isEmpty
argument_list|()
operator|==
literal|true
operator|&&
name|nodesToAllocate
operator|.
name|noNodeShards
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// The deciders returned a NO decision for all nodes with shard copies, so we check if primary shard
comment|// can be force-allocated to one of the nodes.
specifier|final
name|NodesToAllocate
name|nodesToForceAllocate
init|=
name|buildNodesToAllocate
argument_list|(
name|allocation
argument_list|,
name|nodeShardsResult
operator|.
name|orderedAllocationCandidates
argument_list|,
name|shard
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesToForceAllocate
operator|.
name|yesNodeShards
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|NodeGatewayStartedShards
name|nodeShardState
init|=
name|nodesToForceAllocate
operator|.
name|yesNodeShards
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: allocating [{}] to [{}] on forced primary allocation"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|unassignedIterator
operator|.
name|initialize
argument_list|(
name|nodeShardState
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|nodeShardState
operator|.
name|allocationId
argument_list|()
argument_list|,
name|ShardRouting
operator|.
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodesToForceAllocate
operator|.
name|throttleNodeShards
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: throttling allocation [{}] to [{}] on forced primary allocation"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|,
name|nodesToForceAllocate
operator|.
name|throttleNodeShards
argument_list|)
expr_stmt|;
name|unassignedIterator
operator|.
name|removeAndIgnore
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_THROTTLED
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: forced primary allocation denied [{}]"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|unassignedIterator
operator|.
name|removeAndIgnore
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_NO
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we are throttling this, but we have enough to allocate to this node, ignore it for now
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}]: throttling allocation [{}] to [{}] on primary allocation"
argument_list|,
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|,
name|nodesToAllocate
operator|.
name|throttleNodeShards
argument_list|)
expr_stmt|;
name|unassignedIterator
operator|.
name|removeAndIgnore
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_THROTTLED
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Builds a list of nodes. If matchAnyShard is set to false, only nodes that have an allocation id matching      * lastActiveAllocationIds are added to the list. Otherwise, any node that has a shard is added to the list, but      * entries with matching allocation id are always at the front of the list.      */
DECL|method|buildAllocationIdBasedNodeShardsResult
specifier|protected
name|NodeShardsResult
name|buildAllocationIdBasedNodeShardsResult
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|boolean
name|matchAnyShard
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreNodes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|lastActiveAllocationIds
parameter_list|,
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|shardState
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|matchingNodeShardStates
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|nonMatchingNodeShardStates
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numberOfAllocationsFound
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeGatewayStartedShards
name|nodeShardState
range|:
name|shardState
operator|.
name|getData
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|nodeShardState
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|String
name|allocationId
init|=
name|nodeShardState
operator|.
name|allocationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreNodes
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|nodeShardState
operator|.
name|storeException
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|allocationId
operator|==
literal|null
operator|&&
name|nodeShardState
operator|.
name|legacyVersion
argument_list|()
operator|==
name|ShardStateMetaData
operator|.
name|NO_VERSION
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has no shard state information"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allocationId
operator|!=
literal|null
condition|)
block|{
assert|assert
name|nodeShardState
operator|.
name|legacyVersion
argument_list|()
operator|==
name|ShardStateMetaData
operator|.
name|NO_VERSION
operator|:
literal|"Allocation id and legacy version cannot be both present"
assert|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has allocation id [{}]"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|allocationId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has no allocation id, out-dated shard (shard state version: [{}])"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|nodeShardState
operator|.
name|legacyVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has allocation id [{}] but the store can not be opened, treating as no allocation id"
argument_list|,
name|nodeShardState
operator|.
name|storeException
argument_list|()
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|allocationId
argument_list|)
expr_stmt|;
name|allocationId
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|allocationId
operator|!=
literal|null
condition|)
block|{
name|numberOfAllocationsFound
operator|++
expr_stmt|;
if|if
condition|(
name|lastActiveAllocationIds
operator|.
name|contains
argument_list|(
name|allocationId
argument_list|)
condition|)
block|{
if|if
condition|(
name|nodeShardState
operator|.
name|primary
argument_list|()
condition|)
block|{
name|matchingNodeShardStates
operator|.
name|addFirst
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matchingNodeShardStates
operator|.
name|addLast
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|matchAnyShard
condition|)
block|{
if|if
condition|(
name|nodeShardState
operator|.
name|primary
argument_list|()
condition|)
block|{
name|nonMatchingNodeShardStates
operator|.
name|addFirst
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonMatchingNodeShardStates
operator|.
name|addLast
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|nodeShardStates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeShardStates
operator|.
name|addAll
argument_list|(
name|matchingNodeShardStates
argument_list|)
expr_stmt|;
name|nodeShardStates
operator|.
name|addAll
argument_list|(
name|nonMatchingNodeShardStates
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} candidates for allocation: {}"
argument_list|,
name|shard
argument_list|,
name|nodeShardStates
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NodeShardsResult
argument_list|(
name|nodeShardStates
argument_list|,
name|numberOfAllocationsFound
argument_list|)
return|;
block|}
comment|/**      * used by old version-based allocation      */
DECL|method|isEnoughVersionBasedAllocationsFound
specifier|private
name|boolean
name|isEnoughVersionBasedAllocationsFound
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|NodeShardsResult
name|nodeShardsResult
parameter_list|)
block|{
comment|// check if the counts meets the minimum set
name|int
name|requiredAllocation
init|=
literal|1
decl_stmt|;
comment|// if we restore from a repository one copy is more then enough
name|String
name|initialShards
init|=
name|INDEX_RECOVERY_INITIAL_SHARDS_SETTING
operator|.
name|get
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|,
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"quorum"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|>
literal|1
condition|)
block|{
name|requiredAllocation
operator|=
operator|(
operator|(
literal|1
operator|+
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|)
operator|/
literal|2
operator|)
operator|+
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"quorum-1"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
operator|||
literal|"half"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|>
literal|2
condition|)
block|{
name|requiredAllocation
operator|=
operator|(
operator|(
literal|1
operator|+
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|)
operator|/
literal|2
operator|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"one"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
name|requiredAllocation
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"full"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
operator|||
literal|"all"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
name|requiredAllocation
operator|=
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"full-1"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
operator|||
literal|"all-1"
operator|.
name|equals
argument_list|(
name|initialShards
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|>
literal|1
condition|)
block|{
name|requiredAllocation
operator|=
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|requiredAllocation
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|initialShards
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeShardsResult
operator|.
name|allocationsFound
operator|>=
name|requiredAllocation
return|;
block|}
comment|/**      * Split the list of node shard states into groups yes/no/throttle based on allocation deciders      */
DECL|method|buildNodesToAllocate
specifier|private
name|NodesToAllocate
name|buildNodesToAllocate
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|nodeShardStates
parameter_list|,
name|ShardRouting
name|shardRouting
parameter_list|,
name|boolean
name|forceAllocate
parameter_list|)
block|{
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|yesNodeShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|throttledNodeShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|noNodeShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeGatewayStartedShards
name|nodeShardState
range|:
name|nodeShardStates
control|)
block|{
name|RoutingNode
name|node
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|nodeShardState
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Decision
name|decision
init|=
name|forceAllocate
condition|?
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canForceAllocatePrimary
argument_list|(
name|shardRouting
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|)
else|:
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canAllocate
argument_list|(
name|shardRouting
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|decision
operator|.
name|type
argument_list|()
operator|==
name|Decision
operator|.
name|Type
operator|.
name|THROTTLE
condition|)
block|{
name|throttledNodeShards
operator|.
name|add
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|decision
operator|.
name|type
argument_list|()
operator|==
name|Decision
operator|.
name|Type
operator|.
name|NO
condition|)
block|{
name|noNodeShards
operator|.
name|add
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|yesNodeShards
operator|.
name|add
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NodesToAllocate
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|yesNodeShards
argument_list|)
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|throttledNodeShards
argument_list|)
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|noNodeShards
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Builds a list of previously started shards. If matchAnyShard is set to false, only shards with the highest shard version are added to      * the list. Otherwise, any existing shard is added to the list, but entries with highest version are always at the front of the list.      */
DECL|method|buildVersionBasedNodeShardsResult
name|NodeShardsResult
name|buildVersionBasedNodeShardsResult
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|boolean
name|matchAnyShard
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreNodes
parameter_list|,
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|shardState
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|allocationCandidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numberOfAllocationsFound
init|=
literal|0
decl_stmt|;
name|long
name|highestVersion
init|=
name|ShardStateMetaData
operator|.
name|NO_VERSION
decl_stmt|;
for|for
control|(
name|NodeGatewayStartedShards
name|nodeShardState
range|:
name|shardState
operator|.
name|getData
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|version
init|=
name|nodeShardState
operator|.
name|legacyVersion
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|node
init|=
name|nodeShardState
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreNodes
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|nodeShardState
operator|.
name|storeException
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|version
operator|==
name|ShardStateMetaData
operator|.
name|NO_VERSION
operator|&&
name|nodeShardState
operator|.
name|allocationId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has no shard state information"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|!=
name|ShardStateMetaData
operator|.
name|NO_VERSION
condition|)
block|{
assert|assert
name|nodeShardState
operator|.
name|allocationId
argument_list|()
operator|==
literal|null
operator|:
literal|"Allocation id and legacy version cannot be both present"
assert|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has version [{}] of shard"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// shard was already selected in a 5.x cluster as primary for recovery, was initialized (and wrote a new state file) but
comment|// did not make it to STARTED state before the cluster crashed (otherwise list of active allocation ids would be
comment|// non-empty and allocation id - based allocation mode would be chosen).
comment|// Prefer this shard copy again.
name|version
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has allocation id [{}]"
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|nodeShardState
operator|.
name|allocationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// when there is an store exception, we disregard the reported version and assign it as no version (same as shard does not exist)
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] on node [{}] has version [{}] but the store can not be opened, treating no version"
argument_list|,
name|nodeShardState
operator|.
name|storeException
argument_list|()
argument_list|,
name|shard
argument_list|,
name|nodeShardState
operator|.
name|getNode
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|version
operator|=
name|ShardStateMetaData
operator|.
name|NO_VERSION
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|!=
name|ShardStateMetaData
operator|.
name|NO_VERSION
condition|)
block|{
name|numberOfAllocationsFound
operator|++
expr_stmt|;
comment|// If we've found a new "best" candidate, clear the
comment|// current candidates and add it
if|if
condition|(
name|version
operator|>
name|highestVersion
condition|)
block|{
name|highestVersion
operator|=
name|version
expr_stmt|;
if|if
condition|(
name|matchAnyShard
operator|==
literal|false
condition|)
block|{
name|allocationCandidates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|allocationCandidates
operator|.
name|add
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|==
name|highestVersion
condition|)
block|{
comment|// If the candidate is the same, add it to the
comment|// list, but keep the current candidate
name|allocationCandidates
operator|.
name|add
argument_list|(
name|nodeShardState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// sort array so the node with the highest version is at the beginning
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|allocationCandidates
argument_list|,
name|Comparator
operator|.
name|comparing
argument_list|(
name|NodeGatewayStartedShards
operator|::
name|legacyVersion
argument_list|)
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeGatewayStartedShards
name|n
range|:
name|allocationCandidates
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|n
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" -> "
argument_list|)
operator|.
name|append
argument_list|(
name|n
operator|.
name|legacyVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} candidates for allocation: {}"
argument_list|,
name|shard
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NodeShardsResult
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|allocationCandidates
argument_list|)
argument_list|,
name|numberOfAllocationsFound
argument_list|)
return|;
block|}
comment|/**      * Return {@code true} if the index is configured to allow shards to be      * recovered on any node      */
DECL|method|recoverOnAnyNode
specifier|private
name|boolean
name|recoverOnAnyNode
parameter_list|(
name|IndexMetaData
name|metaData
parameter_list|)
block|{
return|return
operator|(
name|IndexMetaData
operator|.
name|isOnSharedFilesystem
argument_list|(
name|metaData
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|||
name|IndexMetaData
operator|.
name|isOnSharedFilesystem
argument_list|(
name|this
operator|.
name|settings
argument_list|)
operator|)
operator|&&
name|IndexMetaData
operator|.
name|INDEX_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE_SETTING
operator|.
name|get
argument_list|(
name|metaData
operator|.
name|getSettings
argument_list|()
argument_list|,
name|this
operator|.
name|settings
argument_list|)
return|;
block|}
DECL|method|fetchData
specifier|protected
specifier|abstract
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|fetchData
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
function_decl|;
DECL|class|NodeShardsResult
specifier|static
class|class
name|NodeShardsResult
block|{
DECL|field|orderedAllocationCandidates
specifier|public
specifier|final
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|orderedAllocationCandidates
decl_stmt|;
DECL|field|allocationsFound
specifier|public
specifier|final
name|int
name|allocationsFound
decl_stmt|;
DECL|method|NodeShardsResult
specifier|public
name|NodeShardsResult
parameter_list|(
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|orderedAllocationCandidates
parameter_list|,
name|int
name|allocationsFound
parameter_list|)
block|{
name|this
operator|.
name|orderedAllocationCandidates
operator|=
name|orderedAllocationCandidates
expr_stmt|;
name|this
operator|.
name|allocationsFound
operator|=
name|allocationsFound
expr_stmt|;
block|}
block|}
DECL|class|NodesToAllocate
specifier|static
class|class
name|NodesToAllocate
block|{
DECL|field|yesNodeShards
specifier|final
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|yesNodeShards
decl_stmt|;
DECL|field|throttleNodeShards
specifier|final
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|throttleNodeShards
decl_stmt|;
DECL|field|noNodeShards
specifier|final
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|noNodeShards
decl_stmt|;
DECL|method|NodesToAllocate
specifier|public
name|NodesToAllocate
parameter_list|(
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|yesNodeShards
parameter_list|,
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|throttleNodeShards
parameter_list|,
name|List
argument_list|<
name|NodeGatewayStartedShards
argument_list|>
name|noNodeShards
parameter_list|)
block|{
name|this
operator|.
name|yesNodeShards
operator|=
name|yesNodeShards
expr_stmt|;
name|this
operator|.
name|throttleNodeShards
operator|=
name|throttleNodeShards
expr_stmt|;
name|this
operator|.
name|noNodeShards
operator|=
name|noNodeShards
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

