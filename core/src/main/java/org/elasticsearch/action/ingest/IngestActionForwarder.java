begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListenerResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Randomness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_comment
comment|/**  * A utility for forwarding ingest requests to ingest nodes in a round-robin fashion.  *  * TODO: move this into IngestService and make index/bulk actions call that  */
end_comment

begin_class
DECL|class|IngestActionForwarder
specifier|public
specifier|final
class|class
name|IngestActionForwarder
implements|implements
name|ClusterStateListener
block|{
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|ingestNodeGenerator
specifier|private
specifier|final
name|AtomicInteger
name|ingestNodeGenerator
init|=
operator|new
name|AtomicInteger
argument_list|(
name|Randomness
operator|.
name|get
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ingestNodes
specifier|private
name|DiscoveryNode
index|[]
name|ingestNodes
decl_stmt|;
DECL|method|IngestActionForwarder
specifier|public
name|IngestActionForwarder
parameter_list|(
name|TransportService
name|transportService
parameter_list|)
block|{
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|ingestNodes
operator|=
operator|new
name|DiscoveryNode
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|forwardIngestRequest
specifier|public
name|void
name|forwardIngestRequest
parameter_list|(
name|Action
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|action
parameter_list|,
name|ActionRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|?
argument_list|>
name|listener
parameter_list|)
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|randomIngestNode
argument_list|()
argument_list|,
name|action
operator|.
name|name
argument_list|()
argument_list|,
name|request
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|(
name|listener
argument_list|,
name|action
operator|::
name|newResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|randomIngestNode
specifier|private
name|DiscoveryNode
name|randomIngestNode
parameter_list|()
block|{
specifier|final
name|DiscoveryNode
index|[]
name|nodes
init|=
name|ingestNodes
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"There are no ingest nodes in this cluster, unable to forward request to an ingest node."
argument_list|)
throw|;
block|}
return|return
name|nodes
index|[
name|Math
operator|.
name|floorMod
argument_list|(
name|ingestNodeGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|ingestNodes
operator|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|getIngestNodes
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|DiscoveryNode
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

