begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_comment
comment|/**  * A listener for action responses or failures.  */
end_comment

begin_interface
DECL|interface|ActionListener
specifier|public
interface|interface
name|ActionListener
parameter_list|<
name|Response
parameter_list|>
block|{
comment|/**      * Handle action response. This response may constitute a failure or a      * success but it is up to the listener to make that decision.      */
DECL|method|onResponse
name|void
name|onResponse
parameter_list|(
name|Response
name|response
parameter_list|)
function_decl|;
comment|/**      * A failure caused by an exception at some phase of the task.      */
DECL|method|onFailure
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
function_decl|;
comment|/**      * Creates a listener that listens for a response (or failure) and executes the      * corresponding consumer when the response (or failure) is received.      *      * @param onResponse the consumer of the response, when the listener receives one      * @param onFailure the consumer of the failure, when the listener receives one      * @param<Response> the type of the response      * @return a listener that listens for responses and invokes the consumer when received      */
DECL|method|wrap
specifier|static
parameter_list|<
name|Response
parameter_list|>
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|wrap
parameter_list|(
name|Consumer
argument_list|<
name|Response
argument_list|>
name|onResponse
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onFailure
parameter_list|)
block|{
return|return
operator|new
name|ActionListener
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
try|try
block|{
name|onResponse
operator|.
name|accept
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onFailure
operator|.
name|accept
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_interface

end_unit

