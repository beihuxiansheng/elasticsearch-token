begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchPhaseResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_comment
comment|/**  * This is a simple base class to simplify fan out to shards and collect their results. Each results passed to  * {@link #onResult(SearchPhaseResult)} will be set to the provided result array  * where the given index is used to set the result on the array.  */
end_comment

begin_class
DECL|class|CountedCollector
specifier|final
class|class
name|CountedCollector
parameter_list|<
name|R
extends|extends
name|SearchPhaseResult
parameter_list|>
block|{
DECL|field|resultConsumer
specifier|private
specifier|final
name|Consumer
argument_list|<
name|R
argument_list|>
name|resultConsumer
decl_stmt|;
DECL|field|counter
specifier|private
specifier|final
name|CountDown
name|counter
decl_stmt|;
DECL|field|onFinish
specifier|private
specifier|final
name|Runnable
name|onFinish
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|SearchPhaseContext
name|context
decl_stmt|;
DECL|method|CountedCollector
name|CountedCollector
parameter_list|(
name|Consumer
argument_list|<
name|R
argument_list|>
name|resultConsumer
parameter_list|,
name|int
name|expectedOps
parameter_list|,
name|Runnable
name|onFinish
parameter_list|,
name|SearchPhaseContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|resultConsumer
operator|=
name|resultConsumer
expr_stmt|;
name|this
operator|.
name|counter
operator|=
operator|new
name|CountDown
argument_list|(
name|expectedOps
argument_list|)
expr_stmt|;
name|this
operator|.
name|onFinish
operator|=
name|onFinish
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**      * Forcefully counts down an operation and executes the provided runnable      * if all expected operations where executed      */
DECL|method|countDown
name|void
name|countDown
parameter_list|()
block|{
assert|assert
name|counter
operator|.
name|isCountedDown
argument_list|()
operator|==
literal|false
operator|:
literal|"more operations executed than specified"
assert|;
if|if
condition|(
name|counter
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|onFinish
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Sets the result to the given array index and then runs {@link #countDown()}      */
DECL|method|onResult
name|void
name|onResult
parameter_list|(
name|R
name|result
parameter_list|)
block|{
try|try
block|{
name|resultConsumer
operator|.
name|accept
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Escalates the failure via {@link SearchPhaseContext#onShardFailure(int, SearchShardTarget, Exception)}      * and then runs {@link #countDown()}      */
DECL|method|onFailure
name|void
name|onFailure
parameter_list|(
specifier|final
name|int
name|shardIndex
parameter_list|,
annotation|@
name|Nullable
name|SearchShardTarget
name|shardTarget
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|context
operator|.
name|onShardFailure
argument_list|(
name|shardIndex
argument_list|,
name|shardTarget
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

