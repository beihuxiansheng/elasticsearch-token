begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|OriginalIndices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|ensureExpectedToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|throwUnknownField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|throwUnknownToken
import|;
end_import

begin_comment
comment|/**  * Represents a failure to search on a specific shard.  */
end_comment

begin_class
DECL|class|ShardSearchFailure
specifier|public
class|class
name|ShardSearchFailure
implements|implements
name|ShardOperationFailedException
block|{
DECL|field|REASON_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|REASON_FIELD
init|=
literal|"reason"
decl_stmt|;
DECL|field|NODE_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|NODE_FIELD
init|=
literal|"node"
decl_stmt|;
DECL|field|INDEX_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_FIELD
init|=
literal|"index"
decl_stmt|;
DECL|field|SHARD_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|SHARD_FIELD
init|=
literal|"shard"
decl_stmt|;
DECL|field|EMPTY_ARRAY
specifier|public
specifier|static
specifier|final
name|ShardSearchFailure
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|ShardSearchFailure
index|[
literal|0
index|]
decl_stmt|;
DECL|field|shardTarget
specifier|private
name|SearchShardTarget
name|shardTarget
decl_stmt|;
DECL|field|reason
specifier|private
name|String
name|reason
decl_stmt|;
DECL|field|status
specifier|private
name|RestStatus
name|status
decl_stmt|;
DECL|field|cause
specifier|private
name|Throwable
name|cause
decl_stmt|;
DECL|method|ShardSearchFailure
specifier|private
name|ShardSearchFailure
parameter_list|()
block|{      }
DECL|method|ShardSearchFailure
specifier|public
name|ShardSearchFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ShardSearchFailure
specifier|public
name|ShardSearchFailure
parameter_list|(
name|Exception
name|e
parameter_list|,
annotation|@
name|Nullable
name|SearchShardTarget
name|shardTarget
parameter_list|)
block|{
specifier|final
name|Throwable
name|actual
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|actual
operator|!=
literal|null
operator|&&
name|actual
operator|instanceof
name|SearchException
condition|)
block|{
name|this
operator|.
name|shardTarget
operator|=
operator|(
operator|(
name|SearchException
operator|)
name|actual
operator|)
operator|.
name|shard
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shardTarget
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|shardTarget
operator|=
name|shardTarget
expr_stmt|;
block|}
name|status
operator|=
name|ExceptionsHelper
operator|.
name|status
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|cause
operator|=
name|actual
expr_stmt|;
block|}
DECL|method|ShardSearchFailure
specifier|public
name|ShardSearchFailure
parameter_list|(
name|String
name|reason
parameter_list|,
name|SearchShardTarget
name|shardTarget
parameter_list|)
block|{
name|this
argument_list|(
name|reason
argument_list|,
name|shardTarget
argument_list|,
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
DECL|method|ShardSearchFailure
specifier|private
name|ShardSearchFailure
parameter_list|(
name|String
name|reason
parameter_list|,
name|SearchShardTarget
name|shardTarget
parameter_list|,
name|RestStatus
name|status
parameter_list|)
block|{
name|this
operator|.
name|shardTarget
operator|=
name|shardTarget
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
comment|/**      * The search shard target the failure occurred on.      */
annotation|@
name|Nullable
DECL|method|shard
specifier|public
name|SearchShardTarget
name|shard
parameter_list|()
block|{
return|return
name|this
operator|.
name|shardTarget
return|;
block|}
annotation|@
name|Override
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
return|return
name|this
operator|.
name|status
return|;
block|}
comment|/**      * The index the search failed on.      */
annotation|@
name|Override
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
if|if
condition|(
name|shardTarget
operator|!=
literal|null
condition|)
block|{
return|return
name|shardTarget
operator|.
name|getIndex
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The shard id the search failed on.      */
annotation|@
name|Override
DECL|method|shardId
specifier|public
name|int
name|shardId
parameter_list|()
block|{
if|if
condition|(
name|shardTarget
operator|!=
literal|null
condition|)
block|{
return|return
name|shardTarget
operator|.
name|getShardId
argument_list|()
operator|.
name|id
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * The reason of the failure.      */
annotation|@
name|Override
DECL|method|reason
specifier|public
name|String
name|reason
parameter_list|()
block|{
return|return
name|this
operator|.
name|reason
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"shard ["
operator|+
operator|(
name|shardTarget
operator|==
literal|null
condition|?
literal|"_na"
else|:
name|shardTarget
operator|)
operator|+
literal|"], reason ["
operator|+
name|reason
operator|+
literal|"], cause ["
operator|+
operator|(
name|cause
operator|==
literal|null
condition|?
literal|"_na"
else|:
name|ExceptionsHelper
operator|.
name|stackTrace
argument_list|(
name|cause
argument_list|)
operator|)
operator|+
literal|"]"
return|;
block|}
DECL|method|readShardSearchFailure
specifier|public
specifier|static
name|ShardSearchFailure
name|readShardSearchFailure
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardSearchFailure
name|shardSearchFailure
init|=
operator|new
name|ShardSearchFailure
argument_list|()
decl_stmt|;
name|shardSearchFailure
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|shardSearchFailure
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|shardTarget
operator|=
operator|new
name|SearchShardTarget
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|reason
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|status
operator|=
name|RestStatus
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|cause
operator|=
name|in
operator|.
name|readException
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|shardTarget
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|shardTarget
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeString
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|RestStatus
operator|.
name|writeTo
argument_list|(
name|out
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeException
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|SHARD_FIELD
argument_list|,
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|INDEX_FIELD
argument_list|,
name|index
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardTarget
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|NODE_FIELD
argument_list|,
name|shardTarget
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|REASON_FIELD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|ElasticsearchException
operator|.
name|generateThrowableXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|ShardSearchFailure
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|int
name|shardId
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|indexName
init|=
literal|null
decl_stmt|;
name|String
name|nodeId
init|=
literal|null
decl_stmt|;
name|ElasticsearchException
name|exception
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|SHARD_FIELD
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|shardId
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|INDEX_FIELD
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|indexName
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|NODE_FIELD
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|nodeId
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|throwUnknownField
argument_list|(
name|currentFieldName
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|REASON_FIELD
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|exception
operator|=
name|ElasticsearchException
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|throwUnknownField
argument_list|(
name|currentFieldName
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|throwUnknownToken
argument_list|(
name|token
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ShardSearchFailure
argument_list|(
name|exception
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
name|nodeId
argument_list|,
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
name|indexName
argument_list|,
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
argument_list|)
argument_list|,
name|shardId
argument_list|)
argument_list|,
name|OriginalIndices
operator|.
name|NONE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCause
specifier|public
name|Throwable
name|getCause
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
block|}
end_class

end_unit

