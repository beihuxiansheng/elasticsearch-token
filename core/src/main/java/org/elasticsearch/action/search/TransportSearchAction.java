begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|HandledTransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TransportSearchAction
specifier|public
class|class
name|TransportSearchAction
extends|extends
name|HandledTransportAction
argument_list|<
name|SearchRequest
argument_list|,
name|SearchResponse
argument_list|>
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|dfsQueryThenFetchAction
specifier|private
specifier|final
name|TransportSearchDfsQueryThenFetchAction
name|dfsQueryThenFetchAction
decl_stmt|;
DECL|field|queryThenFetchAction
specifier|private
specifier|final
name|TransportSearchQueryThenFetchAction
name|queryThenFetchAction
decl_stmt|;
DECL|field|dfsQueryAndFetchAction
specifier|private
specifier|final
name|TransportSearchDfsQueryAndFetchAction
name|dfsQueryAndFetchAction
decl_stmt|;
DECL|field|queryAndFetchAction
specifier|private
specifier|final
name|TransportSearchQueryAndFetchAction
name|queryAndFetchAction
decl_stmt|;
DECL|field|scanAction
specifier|private
specifier|final
name|TransportSearchScanAction
name|scanAction
decl_stmt|;
DECL|field|countAction
specifier|private
specifier|final
name|TransportSearchCountAction
name|countAction
decl_stmt|;
DECL|field|optimizeSingleShard
specifier|private
specifier|final
name|boolean
name|optimizeSingleShard
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportSearchAction
specifier|public
name|TransportSearchAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportSearchDfsQueryThenFetchAction
name|dfsQueryThenFetchAction
parameter_list|,
name|TransportSearchQueryThenFetchAction
name|queryThenFetchAction
parameter_list|,
name|TransportSearchDfsQueryAndFetchAction
name|dfsQueryAndFetchAction
parameter_list|,
name|TransportSearchQueryAndFetchAction
name|queryAndFetchAction
parameter_list|,
name|TransportSearchScanAction
name|scanAction
parameter_list|,
name|TransportSearchCountAction
name|countAction
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|SearchAction
operator|.
name|NAME
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|actionFilters
argument_list|,
name|SearchRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|dfsQueryThenFetchAction
operator|=
name|dfsQueryThenFetchAction
expr_stmt|;
name|this
operator|.
name|queryThenFetchAction
operator|=
name|queryThenFetchAction
expr_stmt|;
name|this
operator|.
name|dfsQueryAndFetchAction
operator|=
name|dfsQueryAndFetchAction
expr_stmt|;
name|this
operator|.
name|queryAndFetchAction
operator|=
name|queryAndFetchAction
expr_stmt|;
name|this
operator|.
name|scanAction
operator|=
name|scanAction
expr_stmt|;
name|this
operator|.
name|countAction
operator|=
name|countAction
expr_stmt|;
name|this
operator|.
name|optimizeSingleShard
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"action.search.optimize_single_shard"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|SearchRequest
name|searchRequest
parameter_list|,
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
name|listener
parameter_list|)
block|{
comment|// optimize search type for cases where there is only one shard group to search on
if|if
condition|(
name|optimizeSingleShard
operator|&&
name|searchRequest
operator|.
name|searchType
argument_list|()
operator|!=
name|SCAN
operator|&&
name|searchRequest
operator|.
name|searchType
argument_list|()
operator|!=
name|COUNT
condition|)
block|{
try|try
block|{
name|ClusterState
name|clusterState
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|concreteIndices
argument_list|(
name|searchRequest
operator|.
name|indicesOptions
argument_list|()
argument_list|,
name|searchRequest
operator|.
name|indices
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|routingMap
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|resolveSearchRouting
argument_list|(
name|searchRequest
operator|.
name|routing
argument_list|()
argument_list|,
name|searchRequest
operator|.
name|indices
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|shardCount
init|=
name|clusterService
operator|.
name|operationRouting
argument_list|()
operator|.
name|searchShardsCount
argument_list|(
name|clusterState
argument_list|,
name|searchRequest
operator|.
name|indices
argument_list|()
argument_list|,
name|concreteIndices
argument_list|,
name|routingMap
argument_list|,
name|searchRequest
operator|.
name|preference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardCount
operator|==
literal|1
condition|)
block|{
comment|// if we only have one group, then we always want Q_A_F, no need for DFS, and no need to do THEN since we hit one shard
name|searchRequest
operator|.
name|searchType
argument_list|(
name|QUERY_AND_FETCH
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IndexMissingException
decl||
name|IndexClosedException
name|e
parameter_list|)
block|{
comment|// ignore these failures, we will notify the search response if its really the case from the actual action
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to optimize search type, continue as normal"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|searchRequest
operator|.
name|searchType
argument_list|()
operator|==
name|DFS_QUERY_THEN_FETCH
condition|)
block|{
name|dfsQueryThenFetchAction
operator|.
name|execute
argument_list|(
name|searchRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchRequest
operator|.
name|searchType
argument_list|()
operator|==
name|SearchType
operator|.
name|QUERY_THEN_FETCH
condition|)
block|{
name|queryThenFetchAction
operator|.
name|execute
argument_list|(
name|searchRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchRequest
operator|.
name|searchType
argument_list|()
operator|==
name|SearchType
operator|.
name|DFS_QUERY_AND_FETCH
condition|)
block|{
name|dfsQueryAndFetchAction
operator|.
name|execute
argument_list|(
name|searchRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchRequest
operator|.
name|searchType
argument_list|()
operator|==
name|SearchType
operator|.
name|QUERY_AND_FETCH
condition|)
block|{
name|queryAndFetchAction
operator|.
name|execute
argument_list|(
name|searchRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchRequest
operator|.
name|searchType
argument_list|()
operator|==
name|SearchType
operator|.
name|SCAN
condition|)
block|{
name|scanAction
operator|.
name|execute
argument_list|(
name|searchRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchRequest
operator|.
name|searchType
argument_list|()
operator|==
name|SearchType
operator|.
name|COUNT
condition|)
block|{
name|countAction
operator|.
name|execute
argument_list|(
name|searchRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown search type: ["
operator|+
name|searchRequest
operator|.
name|searchType
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

