begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntArrayList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectObjectHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CollectionStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|CollapseTopFieldDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|HppcMaps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
operator|.
name|ReduceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|SiblingPipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|AggregatedDfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|ProfileShardResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|SearchProfileShardResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResultProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestion
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_class
DECL|class|SearchPhaseController
specifier|public
class|class
name|SearchPhaseController
extends|extends
name|AbstractComponent
block|{
DECL|field|QUERY_RESULT_ORDERING
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
argument_list|>
name|QUERY_RESULT_ORDERING
init|=
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
block|{
name|int
name|i
init|=
name|o1
operator|.
name|value
operator|.
name|shardTarget
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|value
operator|.
name|shardTarget
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|i
operator|=
name|o1
operator|.
name|value
operator|.
name|shardTarget
argument_list|()
operator|.
name|getShardId
argument_list|()
operator|.
name|id
argument_list|()
operator|-
name|o2
operator|.
name|value
operator|.
name|shardTarget
argument_list|()
operator|.
name|getShardId
argument_list|()
operator|.
name|id
argument_list|()
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
decl_stmt|;
DECL|field|EMPTY_DOCS
specifier|private
specifier|static
specifier|final
name|ScoreDoc
index|[]
name|EMPTY_DOCS
init|=
operator|new
name|ScoreDoc
index|[
literal|0
index|]
decl_stmt|;
DECL|field|bigArrays
specifier|private
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|method|SearchPhaseController
specifier|public
name|SearchPhaseController
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|bigArrays
operator|=
name|bigArrays
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
block|}
DECL|method|aggregateDfs
specifier|public
name|AggregatedDfs
name|aggregateDfs
parameter_list|(
name|AtomicArray
argument_list|<
name|DfsSearchResult
argument_list|>
name|results
parameter_list|)
block|{
name|ObjectObjectHashMap
argument_list|<
name|Term
argument_list|,
name|TermStatistics
argument_list|>
name|termStatistics
init|=
name|HppcMaps
operator|.
name|newNoNullKeysMap
argument_list|()
decl_stmt|;
name|ObjectObjectHashMap
argument_list|<
name|String
argument_list|,
name|CollectionStatistics
argument_list|>
name|fieldStatistics
init|=
name|HppcMaps
operator|.
name|newNoNullKeysMap
argument_list|()
decl_stmt|;
name|long
name|aggMaxDoc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|DfsSearchResult
argument_list|>
name|lEntry
range|:
name|results
operator|.
name|asList
argument_list|()
control|)
block|{
specifier|final
name|Term
index|[]
name|terms
init|=
name|lEntry
operator|.
name|value
operator|.
name|terms
argument_list|()
decl_stmt|;
specifier|final
name|TermStatistics
index|[]
name|stats
init|=
name|lEntry
operator|.
name|value
operator|.
name|termStatistics
argument_list|()
decl_stmt|;
assert|assert
name|terms
operator|.
name|length
operator|==
name|stats
operator|.
name|length
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|terms
index|[
name|i
index|]
operator|!=
literal|null
assert|;
name|TermStatistics
name|existing
init|=
name|termStatistics
operator|.
name|get
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
assert|assert
name|terms
index|[
name|i
index|]
operator|.
name|bytes
argument_list|()
operator|.
name|equals
argument_list|(
name|existing
operator|.
name|term
argument_list|()
argument_list|)
assert|;
comment|// totalTermFrequency is an optional statistic we need to check if either one or both
comment|// are set to -1 which means not present and then set it globally to -1
name|termStatistics
operator|.
name|put
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|,
operator|new
name|TermStatistics
argument_list|(
name|existing
operator|.
name|term
argument_list|()
argument_list|,
name|existing
operator|.
name|docFreq
argument_list|()
operator|+
name|stats
index|[
name|i
index|]
operator|.
name|docFreq
argument_list|()
argument_list|,
name|optionalSum
argument_list|(
name|existing
operator|.
name|totalTermFreq
argument_list|()
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|termStatistics
operator|.
name|put
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|,
name|stats
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
operator|!
name|lEntry
operator|.
name|value
operator|.
name|fieldStatistics
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|null
argument_list|)
assert|;
specifier|final
name|Object
index|[]
name|keys
init|=
name|lEntry
operator|.
name|value
operator|.
name|fieldStatistics
argument_list|()
operator|.
name|keys
decl_stmt|;
specifier|final
name|Object
index|[]
name|values
init|=
name|lEntry
operator|.
name|value
operator|.
name|fieldStatistics
argument_list|()
operator|.
name|values
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|keys
index|[
name|i
index|]
decl_stmt|;
name|CollectionStatistics
name|value
init|=
operator|(
name|CollectionStatistics
operator|)
name|values
index|[
name|i
index|]
decl_stmt|;
assert|assert
name|key
operator|!=
literal|null
assert|;
name|CollectionStatistics
name|existing
init|=
name|fieldStatistics
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|CollectionStatistics
name|merged
init|=
operator|new
name|CollectionStatistics
argument_list|(
name|key
argument_list|,
name|existing
operator|.
name|maxDoc
argument_list|()
operator|+
name|value
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|optionalSum
argument_list|(
name|existing
operator|.
name|docCount
argument_list|()
argument_list|,
name|value
operator|.
name|docCount
argument_list|()
argument_list|)
argument_list|,
name|optionalSum
argument_list|(
name|existing
operator|.
name|sumTotalTermFreq
argument_list|()
argument_list|,
name|value
operator|.
name|sumTotalTermFreq
argument_list|()
argument_list|)
argument_list|,
name|optionalSum
argument_list|(
name|existing
operator|.
name|sumDocFreq
argument_list|()
argument_list|,
name|value
operator|.
name|sumDocFreq
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fieldStatistics
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldStatistics
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|aggMaxDoc
operator|+=
name|lEntry
operator|.
name|value
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|AggregatedDfs
argument_list|(
name|termStatistics
argument_list|,
name|fieldStatistics
argument_list|,
name|aggMaxDoc
argument_list|)
return|;
block|}
DECL|method|optionalSum
specifier|private
specifier|static
name|long
name|optionalSum
parameter_list|(
name|long
name|left
parameter_list|,
name|long
name|right
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
operator|==
operator|-
literal|1
condition|?
operator|-
literal|1
else|:
name|left
operator|+
name|right
return|;
block|}
comment|/**      * Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each      * named completion suggestion across all shards. If more than one named completion suggestion is specified in the      * request, the suggest docs for a named suggestion are ordered by the suggestion name.      *      * @param ignoreFrom Whether to ignore the from and sort all hits in each shard result.      *                   Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase.      * @param resultsArr Shard result holder      */
DECL|method|sortDocs
specifier|public
name|ScoreDoc
index|[]
name|sortDocs
parameter_list|(
name|boolean
name|ignoreFrom
parameter_list|,
name|AtomicArray
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|resultsArr
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|?
extends|extends
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
argument_list|>
name|results
init|=
name|resultsArr
operator|.
name|asList
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY_DOCS
return|;
block|}
name|boolean
name|canOptimize
init|=
literal|false
decl_stmt|;
name|QuerySearchResult
name|result
init|=
literal|null
decl_stmt|;
name|int
name|shardIndex
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|canOptimize
operator|=
literal|true
expr_stmt|;
name|result
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
operator|.
name|queryResult
argument_list|()
expr_stmt|;
name|shardIndex
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|index
expr_stmt|;
block|}
else|else
block|{
comment|// lets see if we only got hits from a single shard, if so, we can optimize...
for|for
control|(
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|entry
range|:
name|results
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|value
operator|.
name|queryResult
argument_list|()
operator|.
name|hasHits
argument_list|()
condition|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// we already have one, can't really optimize
name|canOptimize
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|canOptimize
operator|=
literal|true
expr_stmt|;
name|result
operator|=
name|entry
operator|.
name|value
operator|.
name|queryResult
argument_list|()
expr_stmt|;
name|shardIndex
operator|=
name|entry
operator|.
name|index
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|canOptimize
condition|)
block|{
name|int
name|offset
init|=
name|result
operator|.
name|from
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreFrom
condition|)
block|{
name|offset
operator|=
literal|0
expr_stmt|;
block|}
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|result
operator|.
name|topDocs
argument_list|()
operator|.
name|scoreDocs
decl_stmt|;
name|ScoreDoc
index|[]
name|docs
decl_stmt|;
name|int
name|numSuggestDocs
init|=
literal|0
decl_stmt|;
specifier|final
name|Suggest
name|suggest
init|=
name|result
operator|.
name|queryResult
argument_list|()
operator|.
name|suggest
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|completionSuggestions
decl_stmt|;
if|if
condition|(
name|suggest
operator|!=
literal|null
condition|)
block|{
name|completionSuggestions
operator|=
name|suggest
operator|.
name|filter
argument_list|(
name|CompletionSuggestion
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|CompletionSuggestion
name|suggestion
range|:
name|completionSuggestions
control|)
block|{
name|numSuggestDocs
operator|+=
name|suggestion
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|completionSuggestions
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|int
name|docsOffset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|scoreDocs
operator|.
name|length
operator|==
literal|0
operator|||
name|scoreDocs
operator|.
name|length
operator|<
name|offset
condition|)
block|{
name|docs
operator|=
operator|new
name|ScoreDoc
index|[
name|numSuggestDocs
index|]
expr_stmt|;
block|}
else|else
block|{
name|int
name|resultDocsSize
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|scoreDocs
operator|.
name|length
operator|-
name|offset
operator|)
operator|<
name|resultDocsSize
condition|)
block|{
name|resultDocsSize
operator|=
name|scoreDocs
operator|.
name|length
operator|-
name|offset
expr_stmt|;
block|}
name|docs
operator|=
operator|new
name|ScoreDoc
index|[
name|resultDocsSize
operator|+
name|numSuggestDocs
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultDocsSize
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|scoreDoc
init|=
name|scoreDocs
index|[
name|offset
operator|+
name|i
index|]
decl_stmt|;
name|scoreDoc
operator|.
name|shardIndex
operator|=
name|shardIndex
expr_stmt|;
name|docs
index|[
name|i
index|]
operator|=
name|scoreDoc
expr_stmt|;
name|docsOffset
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|CompletionSuggestion
name|suggestion
range|:
name|completionSuggestions
control|)
block|{
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
name|suggestion
operator|.
name|getOptions
argument_list|()
control|)
block|{
name|ScoreDoc
name|doc
init|=
name|option
operator|.
name|getDoc
argument_list|()
decl_stmt|;
name|doc
operator|.
name|shardIndex
operator|=
name|shardIndex
expr_stmt|;
name|docs
index|[
name|docsOffset
operator|++
index|]
operator|=
name|doc
expr_stmt|;
block|}
block|}
return|return
name|docs
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
index|[]
name|sortedResults
init|=
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|AtomicArray
operator|.
name|Entry
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|sortedResults
argument_list|,
name|QUERY_RESULT_ORDERING
argument_list|)
expr_stmt|;
name|QuerySearchResultProvider
name|firstResult
init|=
name|sortedResults
index|[
literal|0
index|]
operator|.
name|value
decl_stmt|;
name|int
name|topN
init|=
name|firstResult
operator|.
name|queryResult
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|from
init|=
name|firstResult
operator|.
name|queryResult
argument_list|()
operator|.
name|from
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreFrom
condition|)
block|{
name|from
operator|=
literal|0
expr_stmt|;
block|}
specifier|final
name|TopDocs
name|mergedTopDocs
decl_stmt|;
name|int
name|numShards
init|=
name|resultsArr
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstResult
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
operator|instanceof
name|CollapseTopFieldDocs
condition|)
block|{
name|CollapseTopFieldDocs
name|firstTopDocs
init|=
operator|(
name|CollapseTopFieldDocs
operator|)
name|firstResult
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
name|firstTopDocs
operator|.
name|fields
argument_list|)
decl_stmt|;
specifier|final
name|CollapseTopFieldDocs
index|[]
name|shardTopDocs
init|=
operator|new
name|CollapseTopFieldDocs
index|[
name|numShards
index|]
decl_stmt|;
for|for
control|(
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|sortedResult
range|:
name|sortedResults
control|)
block|{
name|TopDocs
name|topDocs
init|=
name|sortedResult
operator|.
name|value
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
decl_stmt|;
comment|// the 'index' field is the position in the resultsArr atomic array
name|shardTopDocs
index|[
name|sortedResult
operator|.
name|index
index|]
operator|=
operator|(
name|CollapseTopFieldDocs
operator|)
name|topDocs
expr_stmt|;
block|}
comment|// TopDocs#merge can't deal with null shard TopDocs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardTopDocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|shardTopDocs
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|shardTopDocs
index|[
name|i
index|]
operator|=
operator|new
name|CollapseTopFieldDocs
argument_list|(
name|firstTopDocs
operator|.
name|field
argument_list|,
literal|0
argument_list|,
operator|new
name|FieldDoc
index|[
literal|0
index|]
argument_list|,
name|sort
operator|.
name|getSort
argument_list|()
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
expr_stmt|;
block|}
block|}
name|mergedTopDocs
operator|=
name|CollapseTopFieldDocs
operator|.
name|merge
argument_list|(
name|sort
argument_list|,
name|from
argument_list|,
name|topN
argument_list|,
name|shardTopDocs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstResult
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
operator|instanceof
name|TopFieldDocs
condition|)
block|{
name|TopFieldDocs
name|firstTopDocs
init|=
operator|(
name|TopFieldDocs
operator|)
name|firstResult
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
name|firstTopDocs
operator|.
name|fields
argument_list|)
decl_stmt|;
specifier|final
name|TopFieldDocs
index|[]
name|shardTopDocs
init|=
operator|new
name|TopFieldDocs
index|[
name|resultsArr
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|sortedResult
range|:
name|sortedResults
control|)
block|{
name|TopDocs
name|topDocs
init|=
name|sortedResult
operator|.
name|value
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
decl_stmt|;
comment|// the 'index' field is the position in the resultsArr atomic array
name|shardTopDocs
index|[
name|sortedResult
operator|.
name|index
index|]
operator|=
operator|(
name|TopFieldDocs
operator|)
name|topDocs
expr_stmt|;
block|}
comment|// TopDocs#merge can't deal with null shard TopDocs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardTopDocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|shardTopDocs
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|shardTopDocs
index|[
name|i
index|]
operator|=
operator|new
name|TopFieldDocs
argument_list|(
literal|0
argument_list|,
operator|new
name|FieldDoc
index|[
literal|0
index|]
argument_list|,
name|sort
operator|.
name|getSort
argument_list|()
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
expr_stmt|;
block|}
block|}
name|mergedTopDocs
operator|=
name|TopDocs
operator|.
name|merge
argument_list|(
name|sort
argument_list|,
name|from
argument_list|,
name|topN
argument_list|,
name|shardTopDocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|TopDocs
index|[]
name|shardTopDocs
init|=
operator|new
name|TopDocs
index|[
name|resultsArr
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|sortedResult
range|:
name|sortedResults
control|)
block|{
name|TopDocs
name|topDocs
init|=
name|sortedResult
operator|.
name|value
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
decl_stmt|;
comment|// the 'index' field is the position in the resultsArr atomic array
name|shardTopDocs
index|[
name|sortedResult
operator|.
name|index
index|]
operator|=
name|topDocs
expr_stmt|;
block|}
comment|// TopDocs#merge can't deal with null shard TopDocs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardTopDocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|shardTopDocs
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|shardTopDocs
index|[
name|i
index|]
operator|=
name|Lucene
operator|.
name|EMPTY_TOP_DOCS
expr_stmt|;
block|}
block|}
name|mergedTopDocs
operator|=
name|TopDocs
operator|.
name|merge
argument_list|(
name|from
argument_list|,
name|topN
argument_list|,
name|shardTopDocs
argument_list|)
expr_stmt|;
block|}
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|mergedTopDocs
operator|.
name|scoreDocs
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Suggestion
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
argument_list|>
argument_list|>
argument_list|>
name|groupedCompletionSuggestions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// group suggestions and assign shard index
for|for
control|(
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|sortedResult
range|:
name|sortedResults
control|)
block|{
name|Suggest
name|shardSuggest
init|=
name|sortedResult
operator|.
name|value
operator|.
name|queryResult
argument_list|()
operator|.
name|suggest
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardSuggest
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CompletionSuggestion
name|suggestion
range|:
name|shardSuggest
operator|.
name|filter
argument_list|(
name|CompletionSuggestion
operator|.
name|class
argument_list|)
control|)
block|{
name|suggestion
operator|.
name|setShardIndex
argument_list|(
name|sortedResult
operator|.
name|index
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Suggestion
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
argument_list|>
argument_list|>
name|suggestions
init|=
name|groupedCompletionSuggestions
operator|.
name|computeIfAbsent
argument_list|(
name|suggestion
operator|.
name|getName
argument_list|()
argument_list|,
name|s
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|groupedCompletionSuggestions
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|int
name|numSuggestDocs
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Entry
operator|.
name|Option
argument_list|>
argument_list|>
argument_list|>
name|completionSuggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|groupedCompletionSuggestions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Suggestion
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
argument_list|>
argument_list|>
name|groupedSuggestions
range|:
name|groupedCompletionSuggestions
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|CompletionSuggestion
name|completionSuggestion
init|=
name|CompletionSuggestion
operator|.
name|reduceTo
argument_list|(
name|groupedSuggestions
argument_list|)
decl_stmt|;
assert|assert
name|completionSuggestion
operator|!=
literal|null
assert|;
name|numSuggestDocs
operator|+=
name|completionSuggestion
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|completionSuggestions
operator|.
name|add
argument_list|(
name|completionSuggestion
argument_list|)
expr_stmt|;
block|}
name|scoreDocs
operator|=
operator|new
name|ScoreDoc
index|[
name|mergedTopDocs
operator|.
name|scoreDocs
operator|.
name|length
operator|+
name|numSuggestDocs
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mergedTopDocs
operator|.
name|scoreDocs
argument_list|,
literal|0
argument_list|,
name|scoreDocs
argument_list|,
literal|0
argument_list|,
name|mergedTopDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
name|mergedTopDocs
operator|.
name|scoreDocs
operator|.
name|length
decl_stmt|;
name|Suggest
name|suggestions
init|=
operator|new
name|Suggest
argument_list|(
name|completionSuggestions
argument_list|)
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
name|completionSuggestion
range|:
name|suggestions
operator|.
name|filter
argument_list|(
name|CompletionSuggestion
operator|.
name|class
argument_list|)
control|)
block|{
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
name|completionSuggestion
operator|.
name|getOptions
argument_list|()
control|)
block|{
name|scoreDocs
index|[
name|offset
operator|++
index|]
operator|=
name|option
operator|.
name|getDoc
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|scoreDocs
return|;
block|}
DECL|method|getLastEmittedDocPerShard
specifier|public
name|ScoreDoc
index|[]
name|getLastEmittedDocPerShard
parameter_list|(
name|ReducedQueryPhase
name|reducedQueryPhase
parameter_list|,
name|ScoreDoc
index|[]
name|sortedScoreDocs
parameter_list|,
name|int
name|numShards
parameter_list|)
block|{
name|ScoreDoc
index|[]
name|lastEmittedDocPerShard
init|=
operator|new
name|ScoreDoc
index|[
name|numShards
index|]
decl_stmt|;
if|if
condition|(
name|reducedQueryPhase
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// from is always zero as when we use scroll, we ignore from
name|long
name|size
init|=
name|Math
operator|.
name|min
argument_list|(
name|reducedQueryPhase
operator|.
name|fetchHits
argument_list|,
name|reducedQueryPhase
operator|.
name|oneResult
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// with collapsing we can have more hits than sorted docs
name|size
operator|=
name|Math
operator|.
name|min
argument_list|(
name|sortedScoreDocs
operator|.
name|length
argument_list|,
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|sortedDocsIndex
init|=
literal|0
init|;
name|sortedDocsIndex
operator|<
name|size
condition|;
name|sortedDocsIndex
operator|++
control|)
block|{
name|ScoreDoc
name|scoreDoc
init|=
name|sortedScoreDocs
index|[
name|sortedDocsIndex
index|]
decl_stmt|;
name|lastEmittedDocPerShard
index|[
name|scoreDoc
operator|.
name|shardIndex
index|]
operator|=
name|scoreDoc
expr_stmt|;
block|}
block|}
return|return
name|lastEmittedDocPerShard
return|;
block|}
comment|/**      * Builds an array, with potential null elements, with docs to load.      */
DECL|method|fillDocIdsToLoad
specifier|public
name|IntArrayList
index|[]
name|fillDocIdsToLoad
parameter_list|(
name|int
name|numShards
parameter_list|,
name|ScoreDoc
index|[]
name|shardDocs
parameter_list|)
block|{
name|IntArrayList
index|[]
name|docIdsToLoad
init|=
operator|new
name|IntArrayList
index|[
name|numShards
index|]
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|shardDoc
range|:
name|shardDocs
control|)
block|{
name|IntArrayList
name|shardDocIdsToLoad
init|=
name|docIdsToLoad
index|[
name|shardDoc
operator|.
name|shardIndex
index|]
decl_stmt|;
if|if
condition|(
name|shardDocIdsToLoad
operator|==
literal|null
condition|)
block|{
name|shardDocIdsToLoad
operator|=
name|docIdsToLoad
index|[
name|shardDoc
operator|.
name|shardIndex
index|]
operator|=
operator|new
name|IntArrayList
argument_list|()
expr_stmt|;
block|}
name|shardDocIdsToLoad
operator|.
name|add
argument_list|(
name|shardDoc
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
return|return
name|docIdsToLoad
return|;
block|}
comment|/**      * Enriches search hits and completion suggestion hits from<code>sortedDocs</code> using<code>fetchResultsArr</code>,      * merges suggestions, aggregations and profile results      *      * Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named      * completion suggestion ordered by suggestion name      */
DECL|method|merge
specifier|public
name|InternalSearchResponse
name|merge
parameter_list|(
name|boolean
name|ignoreFrom
parameter_list|,
name|ScoreDoc
index|[]
name|sortedDocs
parameter_list|,
name|ReducedQueryPhase
name|reducedQueryPhase
parameter_list|,
name|AtomicArray
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|fetchResultsArr
parameter_list|)
block|{
if|if
condition|(
name|reducedQueryPhase
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|InternalSearchResponse
operator|.
name|empty
argument_list|()
return|;
block|}
name|List
argument_list|<
name|?
extends|extends
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
argument_list|>
name|fetchResults
init|=
name|fetchResultsArr
operator|.
name|asList
argument_list|()
decl_stmt|;
name|SearchHits
name|hits
init|=
name|getHits
argument_list|(
name|reducedQueryPhase
argument_list|,
name|ignoreFrom
argument_list|,
name|sortedDocs
argument_list|,
name|fetchResultsArr
argument_list|)
decl_stmt|;
if|if
condition|(
name|reducedQueryPhase
operator|.
name|suggest
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|fetchResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|currentOffset
init|=
name|hits
operator|.
name|getHits
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
name|suggestion
range|:
name|reducedQueryPhase
operator|.
name|suggest
operator|.
name|filter
argument_list|(
name|CompletionSuggestion
operator|.
name|class
argument_list|)
control|)
block|{
specifier|final
name|List
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|suggestionOptions
init|=
name|suggestion
operator|.
name|getOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|scoreDocIndex
init|=
name|currentOffset
init|;
name|scoreDocIndex
operator|<
name|currentOffset
operator|+
name|suggestionOptions
operator|.
name|size
argument_list|()
condition|;
name|scoreDocIndex
operator|++
control|)
block|{
name|ScoreDoc
name|shardDoc
init|=
name|sortedDocs
index|[
name|scoreDocIndex
index|]
decl_stmt|;
name|QuerySearchResultProvider
name|searchResultProvider
init|=
name|fetchResultsArr
operator|.
name|get
argument_list|(
name|shardDoc
operator|.
name|shardIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchResultProvider
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|FetchSearchResult
name|fetchResult
init|=
name|searchResultProvider
operator|.
name|fetchResult
argument_list|()
decl_stmt|;
name|int
name|fetchResultIndex
init|=
name|fetchResult
operator|.
name|counterGetAndIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|fetchResultIndex
operator|<
name|fetchResult
operator|.
name|hits
argument_list|()
operator|.
name|internalHits
argument_list|()
operator|.
name|length
condition|)
block|{
name|SearchHit
name|hit
init|=
name|fetchResult
operator|.
name|hits
argument_list|()
operator|.
name|internalHits
argument_list|()
index|[
name|fetchResultIndex
index|]
decl_stmt|;
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|suggestOption
init|=
name|suggestionOptions
operator|.
name|get
argument_list|(
name|scoreDocIndex
operator|-
name|currentOffset
argument_list|)
decl_stmt|;
name|hit
operator|.
name|score
argument_list|(
name|shardDoc
operator|.
name|score
argument_list|)
expr_stmt|;
name|hit
operator|.
name|shard
argument_list|(
name|fetchResult
operator|.
name|shardTarget
argument_list|()
argument_list|)
expr_stmt|;
name|suggestOption
operator|.
name|setHit
argument_list|(
name|hit
argument_list|)
expr_stmt|;
block|}
block|}
name|currentOffset
operator|+=
name|suggestionOptions
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
assert|assert
name|currentOffset
operator|==
name|sortedDocs
operator|.
name|length
operator|:
literal|"expected no more score doc slices"
assert|;
block|}
block|}
return|return
name|reducedQueryPhase
operator|.
name|buildResponse
argument_list|(
name|hits
argument_list|)
return|;
block|}
DECL|method|getHits
specifier|private
name|SearchHits
name|getHits
parameter_list|(
name|ReducedQueryPhase
name|reducedQueryPhase
parameter_list|,
name|boolean
name|ignoreFrom
parameter_list|,
name|ScoreDoc
index|[]
name|sortedDocs
parameter_list|,
name|AtomicArray
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|fetchResultsArr
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
argument_list|>
name|fetchResults
init|=
name|fetchResultsArr
operator|.
name|asList
argument_list|()
decl_stmt|;
name|boolean
name|sorted
init|=
literal|false
decl_stmt|;
name|int
name|sortScoreIndex
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|reducedQueryPhase
operator|.
name|oneResult
operator|.
name|topDocs
argument_list|()
operator|instanceof
name|TopFieldDocs
condition|)
block|{
name|TopFieldDocs
name|fieldDocs
init|=
operator|(
name|TopFieldDocs
operator|)
name|reducedQueryPhase
operator|.
name|oneResult
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldDocs
operator|instanceof
name|CollapseTopFieldDocs
operator|&&
name|fieldDocs
operator|.
name|fields
operator|.
name|length
operator|==
literal|1
operator|&&
name|fieldDocs
operator|.
name|fields
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|sorted
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sorted
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldDocs
operator|.
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fieldDocs
operator|.
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|sortScoreIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// clean the fetch counter
for|for
control|(
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|entry
range|:
name|fetchResults
control|)
block|{
name|entry
operator|.
name|value
operator|.
name|fetchResult
argument_list|()
operator|.
name|initCounter
argument_list|()
expr_stmt|;
block|}
name|int
name|from
init|=
name|ignoreFrom
condition|?
literal|0
else|:
name|reducedQueryPhase
operator|.
name|oneResult
operator|.
name|queryResult
argument_list|()
operator|.
name|from
argument_list|()
decl_stmt|;
name|int
name|numSearchHits
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|reducedQueryPhase
operator|.
name|fetchHits
operator|-
name|from
argument_list|,
name|reducedQueryPhase
operator|.
name|oneResult
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// with collapsing we can have more fetch hits than sorted docs
name|numSearchHits
operator|=
name|Math
operator|.
name|min
argument_list|(
name|sortedDocs
operator|.
name|length
argument_list|,
name|numSearchHits
argument_list|)
expr_stmt|;
comment|// merge hits
name|List
argument_list|<
name|SearchHit
argument_list|>
name|hits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fetchResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSearchHits
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|shardDoc
init|=
name|sortedDocs
index|[
name|i
index|]
decl_stmt|;
name|QuerySearchResultProvider
name|fetchResultProvider
init|=
name|fetchResultsArr
operator|.
name|get
argument_list|(
name|shardDoc
operator|.
name|shardIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|fetchResultProvider
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|FetchSearchResult
name|fetchResult
init|=
name|fetchResultProvider
operator|.
name|fetchResult
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|fetchResult
operator|.
name|counterGetAndIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|fetchResult
operator|.
name|hits
argument_list|()
operator|.
name|internalHits
argument_list|()
operator|.
name|length
condition|)
block|{
name|SearchHit
name|searchHit
init|=
name|fetchResult
operator|.
name|hits
argument_list|()
operator|.
name|internalHits
argument_list|()
index|[
name|index
index|]
decl_stmt|;
name|searchHit
operator|.
name|score
argument_list|(
name|shardDoc
operator|.
name|score
argument_list|)
expr_stmt|;
name|searchHit
operator|.
name|shard
argument_list|(
name|fetchResult
operator|.
name|shardTarget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sorted
condition|)
block|{
name|FieldDoc
name|fieldDoc
init|=
operator|(
name|FieldDoc
operator|)
name|shardDoc
decl_stmt|;
name|searchHit
operator|.
name|sortValues
argument_list|(
name|fieldDoc
operator|.
name|fields
argument_list|,
name|reducedQueryPhase
operator|.
name|oneResult
operator|.
name|sortValueFormats
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortScoreIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|searchHit
operator|.
name|score
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|fieldDoc
operator|.
name|fields
index|[
name|sortScoreIndex
index|]
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|hits
operator|.
name|add
argument_list|(
name|searchHit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|SearchHits
argument_list|(
name|hits
operator|.
name|toArray
argument_list|(
operator|new
name|SearchHit
index|[
name|hits
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|reducedQueryPhase
operator|.
name|totalHits
argument_list|,
name|reducedQueryPhase
operator|.
name|maxScore
argument_list|)
return|;
block|}
comment|/**      * Reduces the given query results and consumes all aggregations and profile results.      * @param queryResults a list of non-null query shard results      */
DECL|method|reducedQueryPhase
specifier|public
specifier|final
name|ReducedQueryPhase
name|reducedQueryPhase
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
argument_list|>
name|queryResults
parameter_list|)
block|{
return|return
name|reducedQueryPhase
argument_list|(
name|queryResults
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Reduces the given query results and consumes all aggregations and profile results.      * @param queryResults a list of non-null query shard results      * @param bufferdAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed      *                    from all non-null query results.      * @param numReducePhases the number of non-final reduce phases applied to the query results.      * @see QuerySearchResult#consumeAggs()      * @see QuerySearchResult#consumeProfileResult()      */
DECL|method|reducedQueryPhase
specifier|private
name|ReducedQueryPhase
name|reducedQueryPhase
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
argument_list|>
name|queryResults
parameter_list|,
name|List
argument_list|<
name|InternalAggregations
argument_list|>
name|bufferdAggs
parameter_list|,
name|int
name|numReducePhases
parameter_list|)
block|{
assert|assert
name|numReducePhases
operator|>=
literal|0
operator|:
literal|"num reduce phases must be>= 0 but was: "
operator|+
name|numReducePhases
assert|;
name|numReducePhases
operator|++
expr_stmt|;
comment|// increment for this phase
name|long
name|totalHits
init|=
literal|0
decl_stmt|;
name|long
name|fetchHits
init|=
literal|0
decl_stmt|;
name|float
name|maxScore
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|boolean
name|timedOut
init|=
literal|false
decl_stmt|;
name|Boolean
name|terminatedEarly
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|queryResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// early terminate we have nothing to reduce
return|return
operator|new
name|ReducedQueryPhase
argument_list|(
name|totalHits
argument_list|,
name|fetchHits
argument_list|,
name|maxScore
argument_list|,
name|timedOut
argument_list|,
name|terminatedEarly
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|numReducePhases
argument_list|)
return|;
block|}
specifier|final
name|QuerySearchResult
name|firstResult
init|=
name|queryResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
operator|.
name|queryResult
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasSuggest
init|=
name|firstResult
operator|.
name|suggest
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|hasProfileResults
init|=
name|firstResult
operator|.
name|hasProfileResults
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|consumeAggs
decl_stmt|;
specifier|final
name|List
argument_list|<
name|InternalAggregations
argument_list|>
name|aggregationsList
decl_stmt|;
if|if
condition|(
name|bufferdAggs
operator|!=
literal|null
condition|)
block|{
name|consumeAggs
operator|=
literal|false
expr_stmt|;
comment|// we already have results from intermediate reduces and just need to perform the final reduce
assert|assert
name|firstResult
operator|.
name|hasAggs
argument_list|()
operator|:
literal|"firstResult has no aggs but we got non null buffered aggs?"
assert|;
name|aggregationsList
operator|=
name|bufferdAggs
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstResult
operator|.
name|hasAggs
argument_list|()
condition|)
block|{
comment|// the number of shards was less than the buffer size so we reduce agg results directly
name|aggregationsList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|queryResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|consumeAggs
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// no aggregations
name|aggregationsList
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|consumeAggs
operator|=
literal|false
expr_stmt|;
block|}
comment|// count the total (we use the query result provider here, since we might not get any hits (we scrolled past them))
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Suggestion
argument_list|>
argument_list|>
name|groupedSuggestions
init|=
name|hasSuggest
condition|?
operator|new
name|HashMap
argument_list|<>
argument_list|()
else|:
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ProfileShardResult
argument_list|>
name|profileResults
init|=
name|hasProfileResults
condition|?
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|queryResults
operator|.
name|size
argument_list|()
argument_list|)
else|:
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|QuerySearchResultProvider
argument_list|>
name|entry
range|:
name|queryResults
control|)
block|{
name|QuerySearchResult
name|result
init|=
name|entry
operator|.
name|value
operator|.
name|queryResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|searchTimedOut
argument_list|()
condition|)
block|{
name|timedOut
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|terminatedEarly
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|terminatedEarly
operator|==
literal|null
condition|)
block|{
name|terminatedEarly
operator|=
name|result
operator|.
name|terminatedEarly
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|terminatedEarly
argument_list|()
condition|)
block|{
name|terminatedEarly
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|totalHits
operator|+=
name|result
operator|.
name|topDocs
argument_list|()
operator|.
name|totalHits
expr_stmt|;
name|fetchHits
operator|+=
name|result
operator|.
name|topDocs
argument_list|()
operator|.
name|scoreDocs
operator|.
name|length
expr_stmt|;
if|if
condition|(
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|result
operator|.
name|topDocs
argument_list|()
operator|.
name|getMaxScore
argument_list|()
argument_list|)
condition|)
block|{
name|maxScore
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxScore
argument_list|,
name|result
operator|.
name|topDocs
argument_list|()
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasSuggest
condition|)
block|{
assert|assert
name|result
operator|.
name|suggest
argument_list|()
operator|!=
literal|null
assert|;
for|for
control|(
name|Suggestion
argument_list|<
name|?
extends|extends
name|Suggestion
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
argument_list|>
name|suggestion
range|:
name|result
operator|.
name|suggest
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Suggestion
argument_list|>
name|suggestionList
init|=
name|groupedSuggestions
operator|.
name|computeIfAbsent
argument_list|(
name|suggestion
operator|.
name|getName
argument_list|()
argument_list|,
name|s
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|suggestionList
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|consumeAggs
condition|)
block|{
name|aggregationsList
operator|.
name|add
argument_list|(
operator|(
name|InternalAggregations
operator|)
name|result
operator|.
name|consumeAggs
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasProfileResults
condition|)
block|{
name|String
name|key
init|=
name|result
operator|.
name|shardTarget
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|profileResults
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|result
operator|.
name|consumeProfileResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Suggest
name|suggest
init|=
name|groupedSuggestions
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Suggest
argument_list|(
name|Suggest
operator|.
name|reduce
argument_list|(
name|groupedSuggestions
argument_list|)
argument_list|)
decl_stmt|;
name|ReduceContext
name|reduceContext
init|=
operator|new
name|ReduceContext
argument_list|(
name|bigArrays
argument_list|,
name|scriptService
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|InternalAggregations
name|aggregations
init|=
name|aggregationsList
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|reduceAggs
argument_list|(
name|aggregationsList
argument_list|,
name|firstResult
operator|.
name|pipelineAggregators
argument_list|()
argument_list|,
name|reduceContext
argument_list|)
decl_stmt|;
specifier|final
name|SearchProfileShardResults
name|shardResults
init|=
name|profileResults
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|SearchProfileShardResults
argument_list|(
name|profileResults
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReducedQueryPhase
argument_list|(
name|totalHits
argument_list|,
name|fetchHits
argument_list|,
name|maxScore
argument_list|,
name|timedOut
argument_list|,
name|terminatedEarly
argument_list|,
name|firstResult
argument_list|,
name|suggest
argument_list|,
name|aggregations
argument_list|,
name|shardResults
argument_list|,
name|numReducePhases
argument_list|)
return|;
block|}
comment|/**      * Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information      * that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)}      */
DECL|method|reduceAggsIncrementally
specifier|private
name|InternalAggregations
name|reduceAggsIncrementally
parameter_list|(
name|List
argument_list|<
name|InternalAggregations
argument_list|>
name|aggregationsList
parameter_list|)
block|{
name|ReduceContext
name|reduceContext
init|=
operator|new
name|ReduceContext
argument_list|(
name|bigArrays
argument_list|,
name|scriptService
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|aggregationsList
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|reduceAggs
argument_list|(
name|aggregationsList
argument_list|,
literal|null
argument_list|,
name|reduceContext
argument_list|)
return|;
block|}
DECL|method|reduceAggs
specifier|private
name|InternalAggregations
name|reduceAggs
parameter_list|(
name|List
argument_list|<
name|InternalAggregations
argument_list|>
name|aggregationsList
parameter_list|,
name|List
argument_list|<
name|SiblingPipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
name|InternalAggregations
name|aggregations
init|=
name|InternalAggregations
operator|.
name|reduce
argument_list|(
name|aggregationsList
argument_list|,
name|reduceContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipelineAggregators
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|newAggs
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|aggregations
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
parameter_list|(
name|p
parameter_list|)
lambda|->
operator|(
name|InternalAggregation
operator|)
name|p
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SiblingPipelineAggregator
name|pipelineAggregator
range|:
name|pipelineAggregators
control|)
block|{
name|InternalAggregation
name|newAgg
init|=
name|pipelineAggregator
operator|.
name|doReduce
argument_list|(
operator|new
name|InternalAggregations
argument_list|(
name|newAggs
argument_list|)
argument_list|,
name|reduceContext
argument_list|)
decl_stmt|;
name|newAggs
operator|.
name|add
argument_list|(
name|newAgg
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InternalAggregations
argument_list|(
name|newAggs
argument_list|)
return|;
block|}
return|return
name|aggregations
return|;
block|}
DECL|class|ReducedQueryPhase
specifier|public
specifier|static
specifier|final
class|class
name|ReducedQueryPhase
block|{
comment|// the sum of all hits across all reduces shards
DECL|field|totalHits
specifier|final
name|long
name|totalHits
decl_stmt|;
comment|// the number of returned hits (doc IDs) across all reduces shards
DECL|field|fetchHits
specifier|final
name|long
name|fetchHits
decl_stmt|;
comment|// the max score across all reduces hits or {@link Float#NaN} if no hits returned
DECL|field|maxScore
specifier|final
name|float
name|maxScore
decl_stmt|;
comment|//<code>true</code> if at least one reduced result timed out
DECL|field|timedOut
specifier|final
name|boolean
name|timedOut
decl_stmt|;
comment|// non null and true if at least one reduced result was terminated early
DECL|field|terminatedEarly
specifier|final
name|Boolean
name|terminatedEarly
decl_stmt|;
comment|// an non-null arbitrary query result if was at least one reduced result
DECL|field|oneResult
specifier|final
name|QuerySearchResult
name|oneResult
decl_stmt|;
comment|// the reduced suggest results
DECL|field|suggest
specifier|final
name|Suggest
name|suggest
decl_stmt|;
comment|// the reduced internal aggregations
DECL|field|aggregations
specifier|final
name|InternalAggregations
name|aggregations
decl_stmt|;
comment|// the reduced profile results
DECL|field|shardResults
specifier|final
name|SearchProfileShardResults
name|shardResults
decl_stmt|;
comment|// the number of reduces phases
DECL|field|numReducePhases
specifier|final
name|int
name|numReducePhases
decl_stmt|;
DECL|method|ReducedQueryPhase
name|ReducedQueryPhase
parameter_list|(
name|long
name|totalHits
parameter_list|,
name|long
name|fetchHits
parameter_list|,
name|float
name|maxScore
parameter_list|,
name|boolean
name|timedOut
parameter_list|,
name|Boolean
name|terminatedEarly
parameter_list|,
name|QuerySearchResult
name|oneResult
parameter_list|,
name|Suggest
name|suggest
parameter_list|,
name|InternalAggregations
name|aggregations
parameter_list|,
name|SearchProfileShardResults
name|shardResults
parameter_list|,
name|int
name|numReducePhases
parameter_list|)
block|{
if|if
condition|(
name|numReducePhases
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"at least one reduce phase must have been applied but was: "
operator|+
name|numReducePhases
argument_list|)
throw|;
block|}
name|this
operator|.
name|totalHits
operator|=
name|totalHits
expr_stmt|;
name|this
operator|.
name|fetchHits
operator|=
name|fetchHits
expr_stmt|;
if|if
condition|(
name|Float
operator|.
name|isInfinite
argument_list|(
name|maxScore
argument_list|)
condition|)
block|{
name|this
operator|.
name|maxScore
operator|=
name|Float
operator|.
name|NaN
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|maxScore
operator|=
name|maxScore
expr_stmt|;
block|}
name|this
operator|.
name|timedOut
operator|=
name|timedOut
expr_stmt|;
name|this
operator|.
name|terminatedEarly
operator|=
name|terminatedEarly
expr_stmt|;
name|this
operator|.
name|oneResult
operator|=
name|oneResult
expr_stmt|;
name|this
operator|.
name|suggest
operator|=
name|suggest
expr_stmt|;
name|this
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
name|this
operator|.
name|shardResults
operator|=
name|shardResults
expr_stmt|;
name|this
operator|.
name|numReducePhases
operator|=
name|numReducePhases
expr_stmt|;
block|}
comment|/**          * Creates a new search response from the given merged hits.          * @see #merge(boolean, ScoreDoc[], ReducedQueryPhase, AtomicArray)          */
DECL|method|buildResponse
specifier|public
name|InternalSearchResponse
name|buildResponse
parameter_list|(
name|SearchHits
name|hits
parameter_list|)
block|{
return|return
operator|new
name|InternalSearchResponse
argument_list|(
name|hits
argument_list|,
name|aggregations
argument_list|,
name|suggest
argument_list|,
name|shardResults
argument_list|,
name|timedOut
argument_list|,
name|terminatedEarly
argument_list|,
name|numReducePhases
argument_list|)
return|;
block|}
comment|/**          * Returns<code>true</code> iff the query phase had no results. Otherwise<code>false</code>          */
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|oneResult
operator|==
literal|null
return|;
block|}
block|}
comment|/**      * A {@link org.elasticsearch.action.search.InitialSearchPhase.SearchPhaseResults} implementation      * that incrementally reduces aggregation results as shard results are consumed.      * This implementation can be configured to batch up a certain amount of results and only reduce them      * iff the buffer is exhausted.      */
DECL|class|QueryPhaseResultConsumer
specifier|static
specifier|final
class|class
name|QueryPhaseResultConsumer
extends|extends
name|InitialSearchPhase
operator|.
name|SearchPhaseResults
argument_list|<
name|QuerySearchResultProvider
argument_list|>
block|{
DECL|field|buffer
specifier|private
specifier|final
name|InternalAggregations
index|[]
name|buffer
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
DECL|field|controller
specifier|private
specifier|final
name|SearchPhaseController
name|controller
decl_stmt|;
DECL|field|numReducePhases
specifier|private
name|int
name|numReducePhases
init|=
literal|0
decl_stmt|;
comment|/**          * Creates a new {@link QueryPhaseResultConsumer}          * @param controller a controller instance to reduce the query response objects          * @param expectedResultSize the expected number of query results. Corresponds to the number of shards queried          * @param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results          *                   the buffer is used to incrementally reduce aggregation results before all shards responded.          */
DECL|method|QueryPhaseResultConsumer
specifier|private
name|QueryPhaseResultConsumer
parameter_list|(
name|SearchPhaseController
name|controller
parameter_list|,
name|int
name|expectedResultSize
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|super
argument_list|(
name|expectedResultSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedResultSize
operator|!=
literal|1
operator|&&
name|bufferSize
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"buffer size must be>= 2 if there is more than one expected result"
argument_list|)
throw|;
block|}
if|if
condition|(
name|expectedResultSize
operator|<=
name|bufferSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"buffer size must be less than the expected result size"
argument_list|)
throw|;
block|}
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
comment|// no need to buffer anything if we have less expected results. in this case we don't consume any results ahead of time.
name|this
operator|.
name|buffer
operator|=
operator|new
name|InternalAggregations
index|[
name|bufferSize
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|consumeResult
specifier|public
name|void
name|consumeResult
parameter_list|(
name|int
name|shardIndex
parameter_list|,
name|QuerySearchResultProvider
name|result
parameter_list|)
block|{
name|super
operator|.
name|consumeResult
argument_list|(
name|shardIndex
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QuerySearchResult
name|queryResult
init|=
name|result
operator|.
name|queryResult
argument_list|()
decl_stmt|;
assert|assert
name|queryResult
operator|.
name|hasAggs
argument_list|()
operator|:
literal|"this collector should only be used if aggs are requested"
assert|;
name|consumeInternal
argument_list|(
name|queryResult
argument_list|)
expr_stmt|;
block|}
DECL|method|consumeInternal
specifier|private
specifier|synchronized
name|void
name|consumeInternal
parameter_list|(
name|QuerySearchResult
name|querySearchResult
parameter_list|)
block|{
name|InternalAggregations
name|aggregations
init|=
operator|(
name|InternalAggregations
operator|)
name|querySearchResult
operator|.
name|consumeAggs
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|==
name|buffer
operator|.
name|length
condition|)
block|{
name|InternalAggregations
name|reducedAggs
init|=
name|controller
operator|.
name|reduceAggsIncrementally
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|buffer
argument_list|)
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numReducePhases
operator|++
expr_stmt|;
name|buffer
index|[
literal|0
index|]
operator|=
name|reducedAggs
expr_stmt|;
name|index
operator|=
literal|1
expr_stmt|;
block|}
specifier|final
name|int
name|i
init|=
name|index
operator|++
decl_stmt|;
name|buffer
index|[
name|i
index|]
operator|=
name|aggregations
expr_stmt|;
block|}
DECL|method|getRemaining
specifier|private
specifier|synchronized
name|List
argument_list|<
name|InternalAggregations
argument_list|>
name|getRemaining
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|buffer
argument_list|)
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reduce
specifier|public
name|ReducedQueryPhase
name|reduce
parameter_list|()
block|{
return|return
name|controller
operator|.
name|reducedQueryPhase
argument_list|(
name|results
operator|.
name|asList
argument_list|()
argument_list|,
name|getRemaining
argument_list|()
argument_list|,
name|numReducePhases
argument_list|)
return|;
block|}
comment|/**          * Returns the number of buffered results          */
DECL|method|getNumBuffered
name|int
name|getNumBuffered
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|getNumReducePhases
name|int
name|getNumReducePhases
parameter_list|()
block|{
return|return
name|numReducePhases
return|;
block|}
block|}
comment|/**      * Returns a new SearchPhaseResults instance. This might return an instance that reduces search responses incrementally.      */
DECL|method|newSearchPhaseResults
name|InitialSearchPhase
operator|.
name|SearchPhaseResults
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|newSearchPhaseResults
parameter_list|(
name|SearchRequest
name|request
parameter_list|,
name|int
name|numShards
parameter_list|)
block|{
name|SearchSourceBuilder
name|source
init|=
name|request
operator|.
name|source
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
operator|&&
name|source
operator|.
name|aggregations
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getBatchedReduceSize
argument_list|()
operator|<
name|numShards
condition|)
block|{
comment|// only use this if there are aggs and if there are more shards than we should reduce at once
return|return
operator|new
name|QueryPhaseResultConsumer
argument_list|(
name|this
argument_list|,
name|numShards
argument_list|,
name|request
operator|.
name|getBatchedReduceSize
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|InitialSearchPhase
operator|.
name|SearchPhaseResults
argument_list|(
name|numShards
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ReducedQueryPhase
name|reduce
parameter_list|()
block|{
return|return
name|reducedQueryPhase
argument_list|(
name|results
operator|.
name|asList
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

