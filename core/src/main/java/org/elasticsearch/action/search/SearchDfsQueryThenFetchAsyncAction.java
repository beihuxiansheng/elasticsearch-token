begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|GroupShardsIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|AggregatedDfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|AliasFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ShardSearchTransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResultProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
DECL|class|SearchDfsQueryThenFetchAsyncAction
specifier|final
class|class
name|SearchDfsQueryThenFetchAsyncAction
extends|extends
name|AbstractSearchAsyncAction
argument_list|<
name|DfsSearchResult
argument_list|>
block|{
DECL|method|SearchDfsQueryThenFetchAsyncAction
name|SearchDfsQueryThenFetchAsyncAction
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|SearchTransportService
name|searchTransportService
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|Transport
operator|.
name|Connection
argument_list|>
name|nodeIdToConnection
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AliasFilter
argument_list|>
name|aliasFilter
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|concreteIndexBoosts
parameter_list|,
name|SearchPhaseController
name|searchPhaseController
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|SearchRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
name|listener
parameter_list|,
name|GroupShardsIterator
name|shardsIts
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|clusterStateVersion
parameter_list|,
name|SearchTask
name|task
parameter_list|)
block|{
name|super
argument_list|(
name|logger
argument_list|,
name|searchTransportService
argument_list|,
name|nodeIdToConnection
argument_list|,
name|aliasFilter
argument_list|,
name|concreteIndexBoosts
argument_list|,
name|searchPhaseController
argument_list|,
name|executor
argument_list|,
name|request
argument_list|,
name|listener
argument_list|,
name|shardsIts
argument_list|,
name|startTime
argument_list|,
name|clusterStateVersion
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialPhaseName
specifier|protected
name|String
name|initialPhaseName
parameter_list|()
block|{
return|return
literal|"dfs"
return|;
block|}
annotation|@
name|Override
DECL|method|sendExecuteFirstPhase
specifier|protected
name|void
name|sendExecuteFirstPhase
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
name|ShardSearchTransportRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|DfsSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
name|searchTransportService
operator|.
name|sendExecuteDfs
argument_list|(
name|connection
argument_list|,
name|request
argument_list|,
name|task
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNextPhase
specifier|protected
name|CheckedRunnable
argument_list|<
name|Exception
argument_list|>
name|getNextPhase
parameter_list|(
name|AtomicArray
argument_list|<
name|DfsSearchResult
argument_list|>
name|initialResults
parameter_list|)
block|{
return|return
operator|new
name|DfsQueryPhase
argument_list|(
name|initialResults
argument_list|,
name|searchPhaseController
argument_list|,
parameter_list|(
name|queryResults
parameter_list|)
lambda|->
operator|new
name|FetchPhase
argument_list|(
name|queryResults
argument_list|,
name|searchPhaseController
argument_list|)
argument_list|)
return|;
block|}
DECL|class|DfsQueryPhase
specifier|private
specifier|final
class|class
name|DfsQueryPhase
implements|implements
name|CheckedRunnable
argument_list|<
name|Exception
argument_list|>
block|{
DECL|field|queryResult
specifier|private
specifier|final
name|AtomicArray
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|queryResult
decl_stmt|;
DECL|field|searchPhaseController
specifier|private
specifier|final
name|SearchPhaseController
name|searchPhaseController
decl_stmt|;
DECL|field|firstResults
specifier|private
specifier|final
name|AtomicArray
argument_list|<
name|DfsSearchResult
argument_list|>
name|firstResults
decl_stmt|;
DECL|field|nextPhaseFactory
specifier|private
specifier|final
name|Function
argument_list|<
name|AtomicArray
argument_list|<
name|QuerySearchResultProvider
argument_list|>
argument_list|,
name|CheckedRunnable
argument_list|<
name|Exception
argument_list|>
argument_list|>
name|nextPhaseFactory
decl_stmt|;
DECL|method|DfsQueryPhase
specifier|public
name|DfsQueryPhase
parameter_list|(
name|AtomicArray
argument_list|<
name|DfsSearchResult
argument_list|>
name|firstResults
parameter_list|,
name|SearchPhaseController
name|searchPhaseController
parameter_list|,
name|Function
argument_list|<
name|AtomicArray
argument_list|<
name|QuerySearchResultProvider
argument_list|>
argument_list|,
name|CheckedRunnable
argument_list|<
name|Exception
argument_list|>
argument_list|>
name|nextPhaseFactory
parameter_list|)
block|{
name|this
operator|.
name|queryResult
operator|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|firstResults
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|searchPhaseController
operator|=
name|searchPhaseController
expr_stmt|;
name|this
operator|.
name|firstResults
operator|=
name|firstResults
expr_stmt|;
name|this
operator|.
name|nextPhaseFactory
operator|=
name|nextPhaseFactory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AggregatedDfs
name|dfs
init|=
name|searchPhaseController
operator|.
name|aggregateDfs
argument_list|(
name|firstResults
argument_list|)
decl_stmt|;
specifier|final
name|CountedCollector
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|counter
init|=
operator|new
name|CountedCollector
argument_list|<>
argument_list|(
name|queryResult
argument_list|,
name|firstResults
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
parameter_list|(
name|successfulOps
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|successfulOps
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|SearchPhaseExecutionException
argument_list|(
literal|"query"
argument_list|,
literal|"all shards failed"
argument_list|,
name|buildShardFailures
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|executePhase
argument_list|(
literal|"fetch"
argument_list|,
name|this
operator|.
name|nextPhaseFactory
operator|.
name|apply
argument_list|(
name|queryResult
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|DfsSearchResult
argument_list|>
name|entry
range|:
name|firstResults
operator|.
name|asList
argument_list|()
control|)
block|{
name|DfsSearchResult
name|dfsResult
init|=
name|entry
operator|.
name|value
decl_stmt|;
specifier|final
name|int
name|shardIndex
init|=
name|entry
operator|.
name|index
decl_stmt|;
name|Transport
operator|.
name|Connection
name|connection
init|=
name|nodeIdToConnection
operator|.
name|apply
argument_list|(
name|dfsResult
operator|.
name|shardTarget
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|QuerySearchRequest
name|querySearchRequest
init|=
operator|new
name|QuerySearchRequest
argument_list|(
name|request
argument_list|,
name|dfsResult
operator|.
name|id
argument_list|()
argument_list|,
name|dfs
argument_list|)
decl_stmt|;
name|searchTransportService
operator|.
name|sendExecuteQuery
argument_list|(
name|connection
argument_list|,
name|querySearchRequest
argument_list|,
name|task
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|QuerySearchResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|QuerySearchResult
name|result
parameter_list|)
block|{
name|counter
operator|.
name|onResult
argument_list|(
name|shardIndex
argument_list|,
name|result
argument_list|,
name|dfsResult
operator|.
name|shardTarget
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] Failed to execute query phase"
argument_list|,
name|querySearchRequest
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|counter
operator|.
name|onFailure
argument_list|(
name|shardIndex
argument_list|,
name|dfsResult
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// the query might not have been executed at all (for example because thread pool rejected
comment|// execution) and the search context that was created in dfs phase might not be released.
comment|// release it again to be in the safe side
name|sendReleaseSearchContext
argument_list|(
name|querySearchRequest
operator|.
name|id
argument_list|()
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

