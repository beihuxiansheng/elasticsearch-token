begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|BoolQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|InnerHitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|collapse
operator|.
name|CollapseBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * This search phase is an optional phase that will be executed once all hits are fetched from the shards that executes  * field-collapsing on the inner hits. This phase only executes if field collapsing is requested in the search request and otherwise  * forwards to the next phase immediately.  */
end_comment

begin_class
DECL|class|ExpandSearchPhase
specifier|final
class|class
name|ExpandSearchPhase
extends|extends
name|SearchPhase
block|{
DECL|field|context
specifier|private
specifier|final
name|SearchPhaseContext
name|context
decl_stmt|;
DECL|field|searchResponse
specifier|private
specifier|final
name|SearchResponse
name|searchResponse
decl_stmt|;
DECL|field|nextPhaseFactory
specifier|private
specifier|final
name|Function
argument_list|<
name|SearchResponse
argument_list|,
name|SearchPhase
argument_list|>
name|nextPhaseFactory
decl_stmt|;
DECL|method|ExpandSearchPhase
name|ExpandSearchPhase
parameter_list|(
name|SearchPhaseContext
name|context
parameter_list|,
name|SearchResponse
name|searchResponse
parameter_list|,
name|Function
argument_list|<
name|SearchResponse
argument_list|,
name|SearchPhase
argument_list|>
name|nextPhaseFactory
parameter_list|)
block|{
name|super
argument_list|(
literal|"expand"
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|searchResponse
operator|=
name|searchResponse
expr_stmt|;
name|this
operator|.
name|nextPhaseFactory
operator|=
name|nextPhaseFactory
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> iff the search request has inner hits and needs field collapsing      */
DECL|method|isCollapseRequest
specifier|private
name|boolean
name|isCollapseRequest
parameter_list|()
block|{
specifier|final
name|SearchRequest
name|searchRequest
init|=
name|context
operator|.
name|getRequest
argument_list|()
decl_stmt|;
return|return
name|searchRequest
operator|.
name|source
argument_list|()
operator|!=
literal|null
operator|&&
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|collapse
argument_list|()
operator|!=
literal|null
operator|&&
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|collapse
argument_list|()
operator|.
name|getInnerHit
argument_list|()
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCollapseRequest
argument_list|()
operator|&&
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|SearchRequest
name|searchRequest
init|=
name|context
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|CollapseBuilder
name|collapseBuilder
init|=
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|collapse
argument_list|()
decl_stmt|;
name|MultiSearchRequest
name|multiRequest
init|=
operator|new
name|MultiSearchRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|collapseBuilder
operator|.
name|getMaxConcurrentGroupRequests
argument_list|()
operator|>
literal|0
condition|)
block|{
name|multiRequest
operator|.
name|maxConcurrentSearchRequests
argument_list|(
name|collapseBuilder
operator|.
name|getMaxConcurrentGroupRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
name|BoolQueryBuilder
name|groupQuery
init|=
operator|new
name|BoolQueryBuilder
argument_list|()
decl_stmt|;
name|Object
name|collapseValue
init|=
name|hit
operator|.
name|field
argument_list|(
name|collapseBuilder
operator|.
name|getField
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|collapseValue
operator|!=
literal|null
condition|)
block|{
name|groupQuery
operator|.
name|filter
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
name|collapseBuilder
operator|.
name|getField
argument_list|()
argument_list|,
name|collapseValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupQuery
operator|.
name|mustNot
argument_list|(
name|QueryBuilders
operator|.
name|existsQuery
argument_list|(
name|collapseBuilder
operator|.
name|getField
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QueryBuilder
name|origQuery
init|=
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|query
argument_list|()
decl_stmt|;
if|if
condition|(
name|origQuery
operator|!=
literal|null
condition|)
block|{
name|groupQuery
operator|.
name|must
argument_list|(
name|origQuery
argument_list|)
expr_stmt|;
block|}
name|SearchSourceBuilder
name|sourceBuilder
init|=
name|buildExpandSearchSourceBuilder
argument_list|(
name|collapseBuilder
operator|.
name|getInnerHit
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|groupQuery
argument_list|)
decl_stmt|;
name|SearchRequest
name|groupRequest
init|=
operator|new
name|SearchRequest
argument_list|(
name|searchRequest
operator|.
name|indices
argument_list|()
argument_list|)
operator|.
name|types
argument_list|(
name|searchRequest
operator|.
name|types
argument_list|()
argument_list|)
operator|.
name|source
argument_list|(
name|sourceBuilder
argument_list|)
decl_stmt|;
name|multiRequest
operator|.
name|add
argument_list|(
name|groupRequest
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getSearchTransport
argument_list|()
operator|.
name|sendExecuteMultiSearch
argument_list|(
name|multiRequest
argument_list|,
name|context
operator|.
name|getTask
argument_list|()
argument_list|,
name|ActionListener
operator|.
name|wrap
argument_list|(
name|response
lambda|->
block|{
name|Iterator
argument_list|<
name|MultiSearchResponse
operator|.
name|Item
argument_list|>
name|it
init|=
name|response
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
name|MultiSearchResponse
operator|.
name|Item
name|item
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isFailure
argument_list|()
condition|)
block|{
name|context
operator|.
name|onPhaseFailure
argument_list|(
name|this
argument_list|,
literal|"failed to expand hits"
argument_list|,
name|item
operator|.
name|getFailure
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|SearchHits
name|innerHits
init|=
name|item
operator|.
name|getResponse
argument_list|()
operator|.
name|getHits
argument_list|()
decl_stmt|;
if|if
condition|(
name|hit
operator|.
name|getInnerHits
argument_list|()
operator|==
literal|null
condition|)
block|{
name|hit
operator|.
name|setInnerHits
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hit
operator|.
name|getInnerHits
argument_list|()
operator|.
name|put
argument_list|(
name|collapseBuilder
operator|.
name|getInnerHit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|innerHits
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|executeNextPhase
argument_list|(
name|this
argument_list|,
name|nextPhaseFactory
operator|.
name|apply
argument_list|(
name|searchResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|,
name|context
operator|::
name|onFailure
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|executeNextPhase
argument_list|(
name|this
argument_list|,
name|nextPhaseFactory
operator|.
name|apply
argument_list|(
name|searchResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildExpandSearchSourceBuilder
specifier|private
name|SearchSourceBuilder
name|buildExpandSearchSourceBuilder
parameter_list|(
name|InnerHitBuilder
name|options
parameter_list|)
block|{
name|SearchSourceBuilder
name|groupSource
init|=
operator|new
name|SearchSourceBuilder
argument_list|()
decl_stmt|;
name|groupSource
operator|.
name|from
argument_list|(
name|options
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|groupSource
operator|.
name|size
argument_list|(
name|options
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|getSorts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|getSorts
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupSource
operator|::
name|sort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|.
name|includes
argument_list|()
operator|==
literal|null
operator|&&
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|.
name|excludes
argument_list|()
operator|==
literal|null
condition|)
block|{
name|groupSource
operator|.
name|fetchSource
argument_list|(
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|.
name|fetchSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupSource
operator|.
name|fetchSource
argument_list|(
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|.
name|includes
argument_list|()
argument_list|,
name|options
operator|.
name|getFetchSourceContext
argument_list|()
operator|.
name|excludes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|getDocValueFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|getDocValueFields
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupSource
operator|::
name|docValueField
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getStoredFieldsContext
argument_list|()
operator|!=
literal|null
operator|&&
name|options
operator|.
name|getStoredFieldsContext
argument_list|()
operator|.
name|fieldNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|getStoredFieldsContext
argument_list|()
operator|.
name|fieldNames
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupSource
operator|::
name|storedField
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getScriptFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SearchSourceBuilder
operator|.
name|ScriptField
name|field
range|:
name|options
operator|.
name|getScriptFields
argument_list|()
control|)
block|{
name|groupSource
operator|.
name|scriptField
argument_list|(
name|field
operator|.
name|fieldName
argument_list|()
argument_list|,
name|field
operator|.
name|script
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|getHighlightBuilder
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|groupSource
operator|.
name|highlighter
argument_list|(
name|options
operator|.
name|getHighlightBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|groupSource
operator|.
name|explain
argument_list|(
name|options
operator|.
name|isExplain
argument_list|()
argument_list|)
expr_stmt|;
name|groupSource
operator|.
name|trackScores
argument_list|(
name|options
operator|.
name|isTrackScores
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|groupSource
return|;
block|}
block|}
end_class

end_unit

