begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|StatusToXContentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
operator|.
name|constructorArg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
operator|.
name|OK
import|;
end_import

begin_class
DECL|class|ClearScrollResponse
specifier|public
class|class
name|ClearScrollResponse
extends|extends
name|ActionResponse
implements|implements
name|StatusToXContentObject
block|{
DECL|field|SUCCEEDED
specifier|private
specifier|static
specifier|final
name|ParseField
name|SUCCEEDED
init|=
operator|new
name|ParseField
argument_list|(
literal|"succeeded"
argument_list|)
decl_stmt|;
DECL|field|NUMFREED
specifier|private
specifier|static
specifier|final
name|ParseField
name|NUMFREED
init|=
operator|new
name|ParseField
argument_list|(
literal|"num_freed"
argument_list|)
decl_stmt|;
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|ConstructingObjectParser
argument_list|<
name|ClearScrollResponse
argument_list|,
name|Void
argument_list|>
name|PARSER
init|=
operator|new
name|ConstructingObjectParser
argument_list|<>
argument_list|(
literal|"clear_scroll"
argument_list|,
literal|true
argument_list|,
name|a
lambda|->
operator|new
name|ClearScrollResponse
argument_list|(
operator|(
name|boolean
operator|)
name|a
index|[
literal|0
index|]
argument_list|,
operator|(
name|int
operator|)
name|a
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareField
argument_list|(
name|constructorArg
argument_list|()
argument_list|,
parameter_list|(
name|parser
parameter_list|,
name|context
parameter_list|)
lambda|->
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|SUCCEEDED
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareField
argument_list|(
name|constructorArg
argument_list|()
argument_list|,
parameter_list|(
name|parser
parameter_list|,
name|context
parameter_list|)
lambda|->
name|parser
operator|.
name|intValue
argument_list|()
argument_list|,
name|NUMFREED
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
DECL|field|succeeded
specifier|private
name|boolean
name|succeeded
decl_stmt|;
DECL|field|numFreed
specifier|private
name|int
name|numFreed
decl_stmt|;
DECL|method|ClearScrollResponse
specifier|public
name|ClearScrollResponse
parameter_list|(
name|boolean
name|succeeded
parameter_list|,
name|int
name|numFreed
parameter_list|)
block|{
name|this
operator|.
name|succeeded
operator|=
name|succeeded
expr_stmt|;
name|this
operator|.
name|numFreed
operator|=
name|numFreed
expr_stmt|;
block|}
DECL|method|ClearScrollResponse
name|ClearScrollResponse
parameter_list|()
block|{     }
comment|/**      * @return Whether the attempt to clear a scroll was successful.      */
DECL|method|isSucceeded
specifier|public
name|boolean
name|isSucceeded
parameter_list|()
block|{
return|return
name|succeeded
return|;
block|}
comment|/**      * @return The number of search contexts that were freed. If this is<code>0</code> the assumption can be made,      * that the scroll id specified in the request did not exist. (never existed, was expired, or completely consumed)      */
DECL|method|getNumFreed
specifier|public
name|int
name|getNumFreed
parameter_list|()
block|{
return|return
name|numFreed
return|;
block|}
annotation|@
name|Override
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
return|return
name|numFreed
operator|==
literal|0
condition|?
name|NOT_FOUND
else|:
name|OK
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SUCCEEDED
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|succeeded
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|NUMFREED
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|numFreed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Parse the clear scroll response body into a new {@link ClearScrollResponse} object      */
DECL|method|fromXContent
specifier|public
specifier|static
name|ClearScrollResponse
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|succeeded
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|numFreed
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|numFreed
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

