begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListenerResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|IndicesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|OriginalIndices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchPhaseResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|QueryFetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|ScrollQueryFetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|ShardFetchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|ShardFetchSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalScrollSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ShardSearchTransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|ScrollQuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportActionProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TaskAwareTransportRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * An encapsulation of {@link org.elasticsearch.search.SearchService} operations exposed through  * transport.  */
end_comment

begin_class
DECL|class|SearchTransportService
specifier|public
class|class
name|SearchTransportService
extends|extends
name|AbstractComponent
block|{
DECL|field|FREE_CONTEXT_SCROLL_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FREE_CONTEXT_SCROLL_ACTION_NAME
init|=
literal|"indices:data/read/search[free_context/scroll]"
decl_stmt|;
DECL|field|FREE_CONTEXT_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FREE_CONTEXT_ACTION_NAME
init|=
literal|"indices:data/read/search[free_context]"
decl_stmt|;
DECL|field|CLEAR_SCROLL_CONTEXTS_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CLEAR_SCROLL_CONTEXTS_ACTION_NAME
init|=
literal|"indices:data/read/search[clear_scroll_contexts]"
decl_stmt|;
DECL|field|DFS_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DFS_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/dfs]"
decl_stmt|;
DECL|field|QUERY_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/query]"
decl_stmt|;
DECL|field|QUERY_ID_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_ID_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/query/id]"
decl_stmt|;
DECL|field|QUERY_SCROLL_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_SCROLL_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/query/scroll]"
decl_stmt|;
DECL|field|QUERY_FETCH_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_FETCH_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/query+fetch]"
decl_stmt|;
DECL|field|QUERY_FETCH_SCROLL_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_FETCH_SCROLL_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/query+fetch/scroll]"
decl_stmt|;
DECL|field|FETCH_ID_SCROLL_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FETCH_ID_SCROLL_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/fetch/id/scroll]"
decl_stmt|;
DECL|field|FETCH_ID_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FETCH_ID_ACTION_NAME
init|=
literal|"indices:data/read/search[phase/fetch/id]"
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|method|SearchTransportService
specifier|public
name|SearchTransportService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
block|}
DECL|method|sendFreeContext
specifier|public
name|void
name|sendFreeContext
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
specifier|final
name|long
name|contextId
parameter_list|,
name|OriginalIndices
name|originalIndices
parameter_list|)
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|connection
argument_list|,
name|FREE_CONTEXT_ACTION_NAME
argument_list|,
operator|new
name|SearchFreeContextRequest
argument_list|(
name|originalIndices
argument_list|,
name|contextId
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|EMPTY
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|SearchFreeContextResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|SearchFreeContextResponse
name|response
parameter_list|)
block|{
comment|// no need to respond if it was freed or not
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                  }
block|}
argument_list|,
name|SearchFreeContextResponse
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendFreeContext
specifier|public
name|void
name|sendFreeContext
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|contextId
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|SearchFreeContextResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|FREE_CONTEXT_SCROLL_ACTION_NAME
argument_list|,
operator|new
name|ScrollFreeContextRequest
argument_list|(
name|contextId
argument_list|)
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
name|listener
argument_list|,
name|SearchFreeContextResponse
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendClearAllScrollContexts
specifier|public
name|void
name|sendClearAllScrollContexts
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|TransportResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|CLEAR_SCROLL_CONTEXTS_ACTION_NAME
argument_list|,
name|TransportRequest
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
name|listener
argument_list|,
parameter_list|()
lambda|->
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendExecuteDfs
specifier|public
name|void
name|sendExecuteDfs
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
specifier|final
name|ShardSearchTransportRequest
name|request
parameter_list|,
name|SearchTask
name|task
parameter_list|,
specifier|final
name|SearchActionListener
argument_list|<
name|DfsSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
name|transportService
operator|.
name|sendChildRequest
argument_list|(
name|connection
argument_list|,
name|DFS_ACTION_NAME
argument_list|,
name|request
argument_list|,
name|task
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
name|listener
argument_list|,
name|DfsSearchResult
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendExecuteQuery
specifier|public
name|void
name|sendExecuteQuery
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
specifier|final
name|ShardSearchTransportRequest
name|request
parameter_list|,
name|SearchTask
name|task
parameter_list|,
specifier|final
name|SearchActionListener
argument_list|<
name|SearchPhaseResult
argument_list|>
name|listener
parameter_list|)
block|{
comment|// we optimize this and expect a QueryFetchSearchResult if we only have a single shard in the search request
comment|// this used to be the QUERY_AND_FETCH which doesn't exists anymore.
specifier|final
name|boolean
name|fetchDocuments
init|=
name|request
operator|.
name|numberOfShards
argument_list|()
operator|==
literal|1
decl_stmt|;
name|Supplier
argument_list|<
name|SearchPhaseResult
argument_list|>
name|supplier
init|=
name|fetchDocuments
condition|?
name|QueryFetchSearchResult
operator|::
operator|new
else|:
name|QuerySearchResult
operator|::
operator|new
decl_stmt|;
if|if
condition|(
name|connection
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrBefore
argument_list|(
name|Version
operator|.
name|V_5_3_0_UNRELEASED
argument_list|)
operator|&&
name|fetchDocuments
condition|)
block|{
if|if
condition|(
name|connection
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_3_0_UNRELEASED
argument_list|)
operator|&&
name|request
operator|.
name|scroll
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|/**                  * This is needed for nodes pre 5.3 when the single shard optimization is used.                  * These nodes will set the last emitted doc only if the removed `query_and_fetch` search type is set                  * in the request. See {@link SearchType}.                  */
name|request
operator|.
name|searchType
argument_list|(
name|SearchType
operator|.
name|fromId
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO this BWC layer can be removed once this is back-ported to 5.3
name|transportService
operator|.
name|sendChildRequest
argument_list|(
name|connection
argument_list|,
name|QUERY_FETCH_ACTION_NAME
argument_list|,
name|request
argument_list|,
name|task
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
name|listener
argument_list|,
name|supplier
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService
operator|.
name|sendChildRequest
argument_list|(
name|connection
argument_list|,
name|QUERY_ACTION_NAME
argument_list|,
name|request
argument_list|,
name|task
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
name|listener
argument_list|,
name|supplier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendExecuteQuery
specifier|public
name|void
name|sendExecuteQuery
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
specifier|final
name|QuerySearchRequest
name|request
parameter_list|,
name|SearchTask
name|task
parameter_list|,
specifier|final
name|SearchActionListener
argument_list|<
name|QuerySearchResult
argument_list|>
name|listener
parameter_list|)
block|{
name|transportService
operator|.
name|sendChildRequest
argument_list|(
name|connection
argument_list|,
name|QUERY_ID_ACTION_NAME
argument_list|,
name|request
argument_list|,
name|task
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
name|listener
argument_list|,
name|QuerySearchResult
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendExecuteScrollQuery
specifier|public
name|void
name|sendExecuteScrollQuery
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|InternalScrollSearchRequest
name|request
parameter_list|,
name|SearchTask
name|task
parameter_list|,
specifier|final
name|SearchActionListener
argument_list|<
name|ScrollQuerySearchResult
argument_list|>
name|listener
parameter_list|)
block|{
name|transportService
operator|.
name|sendChildRequest
argument_list|(
name|transportService
operator|.
name|getConnection
argument_list|(
name|node
argument_list|)
argument_list|,
name|QUERY_SCROLL_ACTION_NAME
argument_list|,
name|request
argument_list|,
name|task
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
name|listener
argument_list|,
name|ScrollQuerySearchResult
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendExecuteScrollFetch
specifier|public
name|void
name|sendExecuteScrollFetch
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|InternalScrollSearchRequest
name|request
parameter_list|,
name|SearchTask
name|task
parameter_list|,
specifier|final
name|SearchActionListener
argument_list|<
name|ScrollQueryFetchSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
name|transportService
operator|.
name|sendChildRequest
argument_list|(
name|transportService
operator|.
name|getConnection
argument_list|(
name|node
argument_list|)
argument_list|,
name|QUERY_FETCH_SCROLL_ACTION_NAME
argument_list|,
name|request
argument_list|,
name|task
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
name|listener
argument_list|,
name|ScrollQueryFetchSearchResult
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendExecuteFetch
specifier|public
name|void
name|sendExecuteFetch
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
specifier|final
name|ShardFetchSearchRequest
name|request
parameter_list|,
name|SearchTask
name|task
parameter_list|,
specifier|final
name|SearchActionListener
argument_list|<
name|FetchSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
name|sendExecuteFetch
argument_list|(
name|connection
argument_list|,
name|FETCH_ID_ACTION_NAME
argument_list|,
name|request
argument_list|,
name|task
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|sendExecuteFetchScroll
specifier|public
name|void
name|sendExecuteFetchScroll
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|ShardFetchRequest
name|request
parameter_list|,
name|SearchTask
name|task
parameter_list|,
specifier|final
name|SearchActionListener
argument_list|<
name|FetchSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
name|sendExecuteFetch
argument_list|(
name|transportService
operator|.
name|getConnection
argument_list|(
name|node
argument_list|)
argument_list|,
name|FETCH_ID_SCROLL_ACTION_NAME
argument_list|,
name|request
argument_list|,
name|task
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|sendExecuteFetch
specifier|private
name|void
name|sendExecuteFetch
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
name|String
name|action
parameter_list|,
specifier|final
name|ShardFetchRequest
name|request
parameter_list|,
name|SearchTask
name|task
parameter_list|,
specifier|final
name|SearchActionListener
argument_list|<
name|FetchSearchResult
argument_list|>
name|listener
parameter_list|)
block|{
name|transportService
operator|.
name|sendChildRequest
argument_list|(
name|connection
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|task
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
name|listener
argument_list|,
name|FetchSearchResult
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used by {@link TransportSearchAction} to send the expand queries (field collapsing).      */
DECL|method|sendExecuteMultiSearch
name|void
name|sendExecuteMultiSearch
parameter_list|(
specifier|final
name|MultiSearchRequest
name|request
parameter_list|,
name|SearchTask
name|task
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|MultiSearchResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|transportService
operator|.
name|sendChildRequest
argument_list|(
name|transportService
operator|.
name|getConnection
argument_list|(
name|transportService
operator|.
name|getLocalNode
argument_list|()
argument_list|)
argument_list|,
name|MultiSearchAction
operator|.
name|NAME
argument_list|,
name|request
argument_list|,
name|task
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
name|listener
argument_list|,
name|MultiSearchResponse
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRemoteClusterService
specifier|public
name|RemoteClusterService
name|getRemoteClusterService
parameter_list|()
block|{
return|return
name|transportService
operator|.
name|getRemoteClusterService
argument_list|()
return|;
block|}
DECL|class|ScrollFreeContextRequest
specifier|static
class|class
name|ScrollFreeContextRequest
extends|extends
name|TransportRequest
block|{
DECL|field|id
specifier|private
name|long
name|id
decl_stmt|;
DECL|method|ScrollFreeContextRequest
name|ScrollFreeContextRequest
parameter_list|()
block|{         }
DECL|method|ScrollFreeContextRequest
name|ScrollFreeContextRequest
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|long
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SearchFreeContextRequest
specifier|static
class|class
name|SearchFreeContextRequest
extends|extends
name|ScrollFreeContextRequest
implements|implements
name|IndicesRequest
block|{
DECL|field|originalIndices
specifier|private
name|OriginalIndices
name|originalIndices
decl_stmt|;
DECL|method|SearchFreeContextRequest
name|SearchFreeContextRequest
parameter_list|()
block|{         }
DECL|method|SearchFreeContextRequest
name|SearchFreeContextRequest
parameter_list|(
name|OriginalIndices
name|originalIndices
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|originalIndices
operator|=
name|originalIndices
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|indices
specifier|public
name|String
index|[]
name|indices
parameter_list|()
block|{
if|if
condition|(
name|originalIndices
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|originalIndices
operator|.
name|indices
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|indicesOptions
specifier|public
name|IndicesOptions
name|indicesOptions
parameter_list|()
block|{
if|if
condition|(
name|originalIndices
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|originalIndices
operator|.
name|indicesOptions
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|originalIndices
operator|=
name|OriginalIndices
operator|.
name|readOriginalIndices
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|OriginalIndices
operator|.
name|writeOriginalIndices
argument_list|(
name|originalIndices
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SearchFreeContextResponse
specifier|public
specifier|static
class|class
name|SearchFreeContextResponse
extends|extends
name|TransportResponse
block|{
DECL|field|freed
specifier|private
name|boolean
name|freed
decl_stmt|;
DECL|method|SearchFreeContextResponse
name|SearchFreeContextResponse
parameter_list|()
block|{         }
DECL|method|SearchFreeContextResponse
name|SearchFreeContextResponse
parameter_list|(
name|boolean
name|freed
parameter_list|)
block|{
name|this
operator|.
name|freed
operator|=
name|freed
expr_stmt|;
block|}
DECL|method|isFreed
specifier|public
name|boolean
name|isFreed
parameter_list|()
block|{
return|return
name|freed
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|freed
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|freed
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|registerRequestHandler
specifier|public
specifier|static
name|void
name|registerRequestHandler
parameter_list|(
name|TransportService
name|transportService
parameter_list|,
name|SearchService
name|searchService
parameter_list|)
block|{
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|FREE_CONTEXT_SCROLL_ACTION_NAME
argument_list|,
name|ScrollFreeContextRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|TaskAwareTransportRequestHandler
argument_list|<
name|ScrollFreeContextRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ScrollFreeContextRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|freed
init|=
name|searchService
operator|.
name|freeContext
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|SearchFreeContextResponse
argument_list|(
name|freed
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TransportActionProxy
operator|.
name|registerProxyAction
argument_list|(
name|transportService
argument_list|,
name|FREE_CONTEXT_SCROLL_ACTION_NAME
argument_list|,
name|SearchFreeContextResponse
operator|::
operator|new
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|FREE_CONTEXT_ACTION_NAME
argument_list|,
name|SearchFreeContextRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|TaskAwareTransportRequestHandler
argument_list|<
name|SearchFreeContextRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|SearchFreeContextRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|freed
init|=
name|searchService
operator|.
name|freeContext
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|SearchFreeContextResponse
argument_list|(
name|freed
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TransportActionProxy
operator|.
name|registerProxyAction
argument_list|(
name|transportService
argument_list|,
name|FREE_CONTEXT_ACTION_NAME
argument_list|,
name|SearchFreeContextResponse
operator|::
operator|new
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|CLEAR_SCROLL_CONTEXTS_ACTION_NAME
argument_list|,
parameter_list|()
lambda|->
name|TransportRequest
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|TaskAwareTransportRequestHandler
argument_list|<
name|TransportRequest
operator|.
name|Empty
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|TransportRequest
operator|.
name|Empty
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|searchService
operator|.
name|freeAllScrollContexts
argument_list|()
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
block|)
class|;
end_class

begin_expr_stmt
name|TransportActionProxy
operator|.
name|registerProxyAction
argument_list|(
name|transportService
argument_list|,
name|CLEAR_SCROLL_CONTEXTS_ACTION_NAME
argument_list|,
parameter_list|()
lambda|->
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|DFS_ACTION_NAME
argument_list|,
name|ShardSearchTransportRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
argument_list|,
operator|new
name|TaskAwareTransportRequestHandler
argument_list|<
name|ShardSearchTransportRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardSearchTransportRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|DfsSearchResult
name|result
init|=
name|searchService
operator|.
name|executeDfsPhase
argument_list|(
name|request
argument_list|,
operator|(
name|SearchTask
operator|)
name|task
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|TransportActionProxy
operator|.
name|registerProxyAction
argument_list|(
name|transportService
argument_list|,
name|DFS_ACTION_NAME
argument_list|,
name|DfsSearchResult
operator|::
operator|new
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|QUERY_ACTION_NAME
argument_list|,
name|ShardSearchTransportRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
argument_list|,
operator|new
name|TaskAwareTransportRequestHandler
argument_list|<
name|ShardSearchTransportRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardSearchTransportRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|SearchPhaseResult
name|result
init|=
name|searchService
operator|.
name|executeQueryPhase
argument_list|(
name|request
argument_list|,
operator|(
name|SearchTask
operator|)
name|task
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|TransportActionProxy
operator|.
name|registerProxyAction
argument_list|(
name|transportService
argument_list|,
name|QUERY_ACTION_NAME
argument_list|,
name|QuerySearchResult
operator|::
operator|new
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|QUERY_ID_ACTION_NAME
argument_list|,
name|QuerySearchRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
argument_list|,
operator|new
name|TaskAwareTransportRequestHandler
argument_list|<
name|QuerySearchRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|QuerySearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|QuerySearchResult
name|result
init|=
name|searchService
operator|.
name|executeQueryPhase
argument_list|(
name|request
argument_list|,
operator|(
name|SearchTask
operator|)
name|task
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|TransportActionProxy
operator|.
name|registerProxyAction
argument_list|(
name|transportService
argument_list|,
name|QUERY_ID_ACTION_NAME
argument_list|,
name|QuerySearchResult
operator|::
operator|new
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|QUERY_SCROLL_ACTION_NAME
argument_list|,
name|InternalScrollSearchRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
argument_list|,
operator|new
name|TaskAwareTransportRequestHandler
argument_list|<
name|InternalScrollSearchRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|InternalScrollSearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|ScrollQuerySearchResult
name|result
init|=
name|searchService
operator|.
name|executeQueryPhase
argument_list|(
name|request
argument_list|,
operator|(
name|SearchTask
operator|)
name|task
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|TransportActionProxy
operator|.
name|registerProxyAction
argument_list|(
name|transportService
argument_list|,
name|QUERY_SCROLL_ACTION_NAME
argument_list|,
name|ScrollQuerySearchResult
operator|::
operator|new
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// this is for BWC with 5.3 until the QUERY_AND_FETCH removal change has been back-ported to 5.x
end_comment

begin_comment
comment|// in 5.3 we will only execute a `indices:data/read/search[phase/query+fetch]` if the node is pre 5.3
end_comment

begin_comment
comment|// such that we can remove this after the back-port.
end_comment

begin_expr_stmt
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|QUERY_FETCH_ACTION_NAME
argument_list|,
name|ShardSearchTransportRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
argument_list|,
operator|new
name|TaskAwareTransportRequestHandler
argument_list|<
name|ShardSearchTransportRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardSearchTransportRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|request
operator|.
name|numberOfShards
argument_list|()
operator|==
literal|1
operator|:
literal|"expected single shard request but got: "
operator|+
name|request
operator|.
name|numberOfShards
argument_list|()
assert|;
name|SearchPhaseResult
name|result
init|=
name|searchService
operator|.
name|executeQueryPhase
argument_list|(
name|request
argument_list|,
operator|(
name|SearchTask
operator|)
name|task
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|TransportActionProxy
operator|.
name|registerProxyAction
argument_list|(
name|transportService
argument_list|,
name|QUERY_FETCH_ACTION_NAME
argument_list|,
name|QueryFetchSearchResult
operator|::
operator|new
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|QUERY_FETCH_SCROLL_ACTION_NAME
argument_list|,
name|InternalScrollSearchRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
argument_list|,
operator|new
name|TaskAwareTransportRequestHandler
argument_list|<
name|InternalScrollSearchRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|InternalScrollSearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|ScrollQueryFetchSearchResult
name|result
init|=
name|searchService
operator|.
name|executeFetchPhase
argument_list|(
name|request
argument_list|,
operator|(
name|SearchTask
operator|)
name|task
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|TransportActionProxy
operator|.
name|registerProxyAction
argument_list|(
name|transportService
argument_list|,
name|QUERY_FETCH_SCROLL_ACTION_NAME
argument_list|,
name|ScrollQueryFetchSearchResult
operator|::
operator|new
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|FETCH_ID_SCROLL_ACTION_NAME
argument_list|,
name|ShardFetchRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
argument_list|,
operator|new
name|TaskAwareTransportRequestHandler
argument_list|<
name|ShardFetchRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardFetchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|FetchSearchResult
name|result
init|=
name|searchService
operator|.
name|executeFetchPhase
argument_list|(
name|request
argument_list|,
operator|(
name|SearchTask
operator|)
name|task
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|TransportActionProxy
operator|.
name|registerProxyAction
argument_list|(
name|transportService
argument_list|,
name|FETCH_ID_SCROLL_ACTION_NAME
argument_list|,
name|FetchSearchResult
operator|::
operator|new
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|FETCH_ID_ACTION_NAME
argument_list|,
name|ShardFetchSearchRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
argument_list|,
operator|new
name|TaskAwareTransportRequestHandler
argument_list|<
name|ShardFetchSearchRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardFetchSearchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|FetchSearchResult
name|result
init|=
name|searchService
operator|.
name|executeFetchPhase
argument_list|(
name|request
argument_list|,
operator|(
name|SearchTask
operator|)
name|task
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|TransportActionProxy
operator|.
name|registerProxyAction
argument_list|(
name|transportService
argument_list|,
name|FETCH_ID_ACTION_NAME
argument_list|,
name|FetchSearchResult
operator|::
operator|new
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**      * Returns a connection to the given node on the provided cluster. If the cluster alias is<code>null</code> the node will be resolved      * against the local cluster.      * @param clusterAlias the cluster alias the node should be resolve against      * @param node the node to resolve      * @return a connection to the given node belonging to the cluster with the provided alias.      */
end_comment

begin_expr_stmt
DECL|method|getConnection
unit|Transport
operator|.
name|Connection
name|getConnection
argument_list|(
name|String
name|clusterAlias
argument_list|,
name|DiscoveryNode
name|node
argument_list|)
block|{
if|if
condition|(
name|clusterAlias
operator|==
literal|null
condition|)
block|{
return|return
name|transportService
operator|.
name|getConnection
argument_list|(
name|node
argument_list|)
return|;
block|}
end_expr_stmt

begin_else
else|else
block|{
return|return
name|transportService
operator|.
name|getRemoteClusterService
argument_list|()
operator|.
name|getConnection
argument_list|(
name|node
argument_list|,
name|clusterAlias
argument_list|)
return|;
block|}
end_else

unit|} }
end_unit

