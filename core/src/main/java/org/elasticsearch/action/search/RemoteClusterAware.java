begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|ClusterNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * Base class for all services and components that need up-to-date information about the registered remote clusters  */
end_comment

begin_class
DECL|class|RemoteClusterAware
specifier|public
specifier|abstract
class|class
name|RemoteClusterAware
extends|extends
name|AbstractComponent
block|{
comment|/**      * A list of initial seed nodes to discover eligible nodes from the remote cluster      */
DECL|field|REMOTE_CLUSTERS_SEEDS
specifier|public
specifier|static
specifier|final
name|Setting
operator|.
name|AffixSetting
argument_list|<
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
argument_list|>
name|REMOTE_CLUSTERS_SEEDS
init|=
name|Setting
operator|.
name|affixKeySetting
argument_list|(
literal|"search.remote."
argument_list|,
literal|"seeds"
argument_list|,
parameter_list|(
name|key
parameter_list|)
lambda|->
name|Setting
operator|.
name|listSetting
argument_list|(
name|key
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|RemoteClusterAware
operator|::
name|parseSeedAddress
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Dynamic
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|REMOTE_CLUSTER_INDEX_SEPARATOR
specifier|protected
specifier|static
specifier|final
name|char
name|REMOTE_CLUSTER_INDEX_SEPARATOR
init|=
literal|':'
decl_stmt|;
DECL|field|LOCAL_CLUSTER_GROUP_KEY
specifier|protected
specifier|static
specifier|final
name|String
name|LOCAL_CLUSTER_GROUP_KEY
init|=
literal|""
decl_stmt|;
DECL|field|clusterNameResolver
specifier|protected
specifier|final
name|ClusterNameExpressionResolver
name|clusterNameResolver
decl_stmt|;
comment|/**      * Creates a new {@link RemoteClusterAware} instance      * @param settings the nodes level settings      */
DECL|method|RemoteClusterAware
specifier|protected
name|RemoteClusterAware
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterNameResolver
operator|=
operator|new
name|ClusterNameExpressionResolver
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
DECL|method|buildRemoteClustersSeeds
specifier|protected
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
argument_list|>
name|buildRemoteClustersSeeds
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|Stream
argument_list|<
name|Setting
argument_list|<
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
argument_list|>
argument_list|>
name|allConcreteSettings
init|=
name|REMOTE_CLUSTERS_SEEDS
operator|.
name|getAllConcreteSettings
argument_list|(
name|settings
argument_list|)
decl_stmt|;
return|return
name|allConcreteSettings
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|REMOTE_CLUSTERS_SEEDS
operator|::
name|getNamespace
argument_list|,
name|concreteSetting
lambda|->
block|{
name|String
name|clusterName
init|=
name|REMOTE_CLUSTERS_SEEDS
operator|.
name|getNamespace
argument_list|(
name|concreteSetting
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|InetSocketAddress
name|address
range|:
name|concreteSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
control|)
block|{
name|TransportAddress
name|transportAddress
init|=
operator|new
name|TransportAddress
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
name|clusterName
operator|+
literal|"#"
operator|+
name|transportAddress
operator|.
name|toString
argument_list|()
argument_list|,
name|transportAddress
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Groups indices per cluster by splitting remote cluster-alias, index-name pairs on {@link #REMOTE_CLUSTER_INDEX_SEPARATOR}. All      * indices per cluster are collected as a list in the returned map keyed by the cluster alias. Local indices are grouped under      * {@link #LOCAL_CLUSTER_GROUP_KEY}. The returned map is mutable.      *      * @param requestIndices the indices in the search request to filter      * @param indexExists a predicate that can test if a certain index or alias exists in the local cluster      *      * @return a map of grouped remote and local indices      */
DECL|method|groupClusterIndices
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|groupClusterIndices
parameter_list|(
name|String
index|[]
name|requestIndices
parameter_list|,
name|Predicate
argument_list|<
name|String
argument_list|>
name|indexExists
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|perClusterIndices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|remoteClusterNames
init|=
name|getRemoteClusterNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|requestIndices
control|)
block|{
name|int
name|i
init|=
name|index
operator|.
name|indexOf
argument_list|(
name|RemoteClusterService
operator|.
name|REMOTE_CLUSTER_INDEX_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|String
name|remoteClusterName
init|=
name|index
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|clusters
init|=
name|clusterNameResolver
operator|.
name|resolveClusterNames
argument_list|(
name|remoteClusterNames
argument_list|,
name|remoteClusterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusters
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|indexExists
operator|.
name|test
argument_list|(
name|index
argument_list|)
condition|)
block|{
comment|// we use : as a separator for remote clusters. might conflict if there is an index that is actually named
comment|// remote_cluster_alias:index_name - for this case we fail the request. the user can easily change the cluster alias
comment|// if that happens
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not filter indices; index "
operator|+
name|index
operator|+
literal|" exists but there is also a remote cluster named: "
operator|+
name|remoteClusterName
argument_list|)
throw|;
block|}
name|String
name|indexName
init|=
name|index
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|clusterName
range|:
name|clusters
control|)
block|{
name|perClusterIndices
operator|.
name|computeIfAbsent
argument_list|(
name|clusterName
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|perClusterIndices
operator|.
name|computeIfAbsent
argument_list|(
name|RemoteClusterAware
operator|.
name|LOCAL_CLUSTER_GROUP_KEY
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|perClusterIndices
operator|.
name|computeIfAbsent
argument_list|(
name|RemoteClusterAware
operator|.
name|LOCAL_CLUSTER_GROUP_KEY
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|perClusterIndices
return|;
block|}
DECL|method|getRemoteClusterNames
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|getRemoteClusterNames
parameter_list|()
function_decl|;
comment|/**      * Subclasses must implement this to receive information about updated cluster aliases. If the given address list is      * empty the cluster alias is unregistered and should be removed.      */
DECL|method|updateRemoteCluster
specifier|protected
specifier|abstract
name|void
name|updateRemoteCluster
parameter_list|(
name|String
name|clusterAlias
parameter_list|,
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|addresses
parameter_list|)
function_decl|;
comment|/**      * Registers this instance to listen to updates on the cluster settings.      */
DECL|method|listenForUpdates
specifier|public
name|void
name|listenForUpdates
parameter_list|(
name|ClusterSettings
name|clusterSettings
parameter_list|)
block|{
name|clusterSettings
operator|.
name|addAffixUpdateConsumer
argument_list|(
name|RemoteClusterAware
operator|.
name|REMOTE_CLUSTERS_SEEDS
argument_list|,
name|this
operator|::
name|updateRemoteCluster
argument_list|,
parameter_list|(
name|namespace
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|parseSeedAddress
specifier|private
specifier|static
name|InetSocketAddress
name|parseSeedAddress
parameter_list|(
name|String
name|remoteHost
parameter_list|)
block|{
name|int
name|portSeparator
init|=
name|remoteHost
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
comment|// in case we have a IPv6 address ie. [::1]:9300
if|if
condition|(
name|portSeparator
operator|==
operator|-
literal|1
operator|||
name|portSeparator
operator|==
name|remoteHost
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"remote hosts need to be configured as [host:port], found ["
operator|+
name|remoteHost
operator|+
literal|"] instead"
argument_list|)
throw|;
block|}
name|String
name|host
init|=
name|remoteHost
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|portSeparator
argument_list|)
decl_stmt|;
name|InetAddress
name|hostAddress
decl_stmt|;
try|try
block|{
name|hostAddress
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown host ["
operator|+
name|host
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|int
name|port
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|remoteHost
operator|.
name|substring
argument_list|(
name|portSeparator
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"port number must be> 0 but was: ["
operator|+
name|port
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|hostAddress
argument_list|,
name|port
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"port must be a number"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

