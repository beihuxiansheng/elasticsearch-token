begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|OriginalIndices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|PlainShardIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Extension of {@link PlainShardIterator} used in the search api, which also holds the {@link OriginalIndices}  * of the search request. Useful especially with cross cluster search, as each cluster has its own set of original indices.  */
end_comment

begin_class
DECL|class|SearchShardIterator
specifier|public
specifier|final
class|class
name|SearchShardIterator
extends|extends
name|PlainShardIterator
block|{
DECL|field|originalIndices
specifier|private
specifier|final
name|OriginalIndices
name|originalIndices
decl_stmt|;
DECL|field|clusterAlias
specifier|private
name|String
name|clusterAlias
decl_stmt|;
comment|/**      * Creates a {@link PlainShardIterator} instance that iterates over a subset of the given shards      * this the a given<code>shardId</code>.      *      * @param shardId shard id of the group      * @param shards  shards to iterate      */
DECL|method|SearchShardIterator
specifier|public
name|SearchShardIterator
parameter_list|(
name|String
name|clusterAlias
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|,
name|OriginalIndices
name|originalIndices
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|shards
argument_list|)
expr_stmt|;
name|this
operator|.
name|originalIndices
operator|=
name|originalIndices
expr_stmt|;
name|this
operator|.
name|clusterAlias
operator|=
name|clusterAlias
expr_stmt|;
block|}
comment|/**      * Returns the original indices associated with this shard iterator, specifically with the cluster that this shard belongs to.      */
DECL|method|getOriginalIndices
specifier|public
name|OriginalIndices
name|getOriginalIndices
parameter_list|()
block|{
return|return
name|originalIndices
return|;
block|}
DECL|method|getClusterAlias
specifier|public
name|String
name|getClusterAlias
parameter_list|()
block|{
return|return
name|clusterAlias
return|;
block|}
block|}
end_class

end_unit

