begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|ShardFetchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalScrollSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|ScrollQuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_class
DECL|class|SearchScrollQueryThenFetchAsyncAction
specifier|final
class|class
name|SearchScrollQueryThenFetchAsyncAction
extends|extends
name|SearchScrollAsyncAction
argument_list|<
name|ScrollQuerySearchResult
argument_list|>
block|{
DECL|field|task
specifier|private
specifier|final
name|SearchTask
name|task
decl_stmt|;
DECL|field|fetchResults
specifier|private
specifier|final
name|AtomicArray
argument_list|<
name|FetchSearchResult
argument_list|>
name|fetchResults
decl_stmt|;
DECL|field|queryResults
specifier|private
specifier|final
name|AtomicArray
argument_list|<
name|QuerySearchResult
argument_list|>
name|queryResults
decl_stmt|;
DECL|method|SearchScrollQueryThenFetchAsyncAction
name|SearchScrollQueryThenFetchAsyncAction
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|SearchTransportService
name|searchTransportService
parameter_list|,
name|SearchPhaseController
name|searchPhaseController
parameter_list|,
name|SearchScrollRequest
name|request
parameter_list|,
name|SearchTask
name|task
parameter_list|,
name|ParsedScrollId
name|scrollId
parameter_list|,
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|super
argument_list|(
name|scrollId
argument_list|,
name|logger
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|,
name|listener
argument_list|,
name|searchPhaseController
argument_list|,
name|request
argument_list|,
name|searchTransportService
argument_list|)
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|fetchResults
operator|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|scrollId
operator|.
name|getContext
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryResults
operator|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|scrollId
operator|.
name|getContext
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|onFirstPhaseResult
specifier|protected
name|void
name|onFirstPhaseResult
parameter_list|(
name|int
name|shardId
parameter_list|,
name|ScrollQuerySearchResult
name|result
parameter_list|)
block|{
name|queryResults
operator|.
name|setOnce
argument_list|(
name|shardId
argument_list|,
name|result
operator|.
name|queryResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executeInitialPhase
specifier|protected
name|void
name|executeInitialPhase
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
name|InternalScrollSearchRequest
name|internalRequest
parameter_list|,
name|SearchActionListener
argument_list|<
name|ScrollQuerySearchResult
argument_list|>
name|searchActionListener
parameter_list|)
block|{
name|searchTransportService
operator|.
name|sendExecuteScrollQuery
argument_list|(
name|connection
argument_list|,
name|internalRequest
argument_list|,
name|task
argument_list|,
name|searchActionListener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|moveToNextPhase
specifier|protected
name|SearchPhase
name|moveToNextPhase
parameter_list|(
name|BiFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|clusterNodeLookup
parameter_list|)
block|{
return|return
operator|new
name|SearchPhase
argument_list|(
literal|"fetch"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|SearchPhaseController
operator|.
name|ReducedQueryPhase
name|reducedQueryPhase
init|=
name|searchPhaseController
operator|.
name|reducedQueryPhase
argument_list|(
name|queryResults
operator|.
name|asList
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|reducedQueryPhase
operator|.
name|scoreDocs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|sendResponse
argument_list|(
name|reducedQueryPhase
argument_list|,
name|fetchResults
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|IntArrayList
index|[]
name|docIdsToLoad
init|=
name|searchPhaseController
operator|.
name|fillDocIdsToLoad
argument_list|(
name|queryResults
operator|.
name|length
argument_list|()
argument_list|,
name|reducedQueryPhase
operator|.
name|scoreDocs
argument_list|)
decl_stmt|;
specifier|final
name|ScoreDoc
index|[]
name|lastEmittedDocPerShard
init|=
name|searchPhaseController
operator|.
name|getLastEmittedDocPerShard
argument_list|(
name|reducedQueryPhase
argument_list|,
name|queryResults
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CountDown
name|counter
init|=
operator|new
name|CountDown
argument_list|(
name|docIdsToLoad
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docIdsToLoad
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
specifier|final
name|IntArrayList
name|docIds
init|=
name|docIdsToLoad
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|docIds
operator|!=
literal|null
condition|)
block|{
specifier|final
name|QuerySearchResult
name|querySearchResult
init|=
name|queryResults
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ScoreDoc
name|lastEmittedDoc
init|=
name|lastEmittedDocPerShard
index|[
name|index
index|]
decl_stmt|;
name|ShardFetchRequest
name|shardFetchRequest
init|=
operator|new
name|ShardFetchRequest
argument_list|(
name|querySearchResult
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|docIds
argument_list|,
name|lastEmittedDoc
argument_list|)
decl_stmt|;
name|SearchShardTarget
name|searchShardTarget
init|=
name|querySearchResult
operator|.
name|getSearchShardTarget
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|node
init|=
name|clusterNodeLookup
operator|.
name|apply
argument_list|(
name|searchShardTarget
operator|.
name|getClusterAlias
argument_list|()
argument_list|,
name|searchShardTarget
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|node
operator|!=
literal|null
operator|:
literal|"target node is null in secondary phase"
assert|;
name|Transport
operator|.
name|Connection
name|connection
init|=
name|getConnection
argument_list|(
name|searchShardTarget
operator|.
name|getClusterAlias
argument_list|()
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|searchTransportService
operator|.
name|sendExecuteFetchScroll
argument_list|(
name|connection
argument_list|,
name|shardFetchRequest
argument_list|,
name|task
argument_list|,
operator|new
name|SearchActionListener
argument_list|<
name|FetchSearchResult
argument_list|>
argument_list|(
name|querySearchResult
operator|.
name|getSearchShardTarget
argument_list|()
argument_list|,
name|index
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|innerOnResponse
parameter_list|(
name|FetchSearchResult
name|response
parameter_list|)
block|{
name|fetchResults
operator|.
name|setOnce
argument_list|(
name|response
operator|.
name|getShardIndex
argument_list|()
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|sendResponse
argument_list|(
name|reducedQueryPhase
argument_list|,
name|fetchResults
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|onShardFailure
argument_list|(
name|getName
argument_list|()
argument_list|,
name|counter
argument_list|,
name|querySearchResult
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|t
argument_list|,
name|querySearchResult
operator|.
name|getSearchShardTarget
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|sendResponsePhase
argument_list|(
name|reducedQueryPhase
argument_list|,
name|fetchResults
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the counter is set to the total size of docIdsToLoad
comment|// which can have null values so we have to count them down too
if|if
condition|(
name|counter
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|sendResponse
argument_list|(
name|reducedQueryPhase
argument_list|,
name|fetchResults
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

