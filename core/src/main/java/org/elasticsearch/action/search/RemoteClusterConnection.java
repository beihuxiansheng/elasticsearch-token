begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|shards
operator|.
name|ClusterSearchShardsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|shards
operator|.
name|ClusterSearchShardsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|shards
operator|.
name|ClusterSearchShardsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectionProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportConnectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_class
DECL|class|RemoteClusterConnection
class|class
name|RemoteClusterConnection
extends|extends
name|AbstractComponent
implements|implements
name|TransportConnectionListener
block|{
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|remoteProfile
specifier|private
specifier|final
name|ConnectionProfile
name|remoteProfile
decl_stmt|;
DECL|field|clusterNodes
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|DiscoveryNode
argument_list|>
name|clusterNodes
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
DECL|field|nodeSupplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodeSupplier
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|String
name|clusterName
decl_stmt|;
DECL|field|connected
specifier|private
specifier|final
name|CountDownLatch
name|connected
decl_stmt|;
DECL|field|seedNodes
specifier|private
specifier|volatile
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
decl_stmt|;
DECL|method|RemoteClusterConnection
name|RemoteClusterConnection
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
parameter_list|,
name|TransportService
name|transportService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|connected
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|ConnectionProfile
operator|.
name|Builder
name|builder
init|=
operator|new
name|ConnectionProfile
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addConnections
argument_list|(
literal|6
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|PING
argument_list|)
expr_stmt|;
comment|// TODO make this configurable?
name|builder
operator|.
name|addConnections
argument_list|(
literal|0
argument_list|,
comment|// we don't want this to be used for anything else but search
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|BULK
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|STATE
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
argument_list|)
expr_stmt|;
name|remoteProfile
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|nodeSupplier
operator|=
operator|new
name|Supplier
argument_list|<
name|DiscoveryNode
argument_list|>
argument_list|()
block|{
specifier|private
specifier|volatile
name|Iterator
argument_list|<
name|DiscoveryNode
argument_list|>
name|current
decl_stmt|;
annotation|@
name|Override
specifier|public
name|DiscoveryNode
name|get
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|hasNext
argument_list|()
operator|==
literal|false
condition|)
block|{
name|current
operator|=
name|clusterNodes
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|hasNext
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No node available for cluster: "
operator|+
name|clusterName
operator|+
literal|" nodes: "
operator|+
name|clusterNodes
argument_list|)
throw|;
block|}
block|}
return|return
name|current
operator|.
name|next
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|seedNodes
operator|=
name|seedNodes
expr_stmt|;
block|}
DECL|method|connectWithSeeds
specifier|public
specifier|synchronized
name|void
name|connectWithSeeds
parameter_list|(
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|connectListener
parameter_list|)
block|{
if|if
condition|(
name|clusterNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TimeValue
name|connectTimeout
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// TODO make configurable
name|Iterator
argument_list|<
name|DiscoveryNode
argument_list|>
name|iterator
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
name|seedNodes
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|handshakeAndConnect
argument_list|(
name|iterator
argument_list|,
name|transportService
argument_list|,
name|connectTimeout
argument_list|,
name|connectListener
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectListener
operator|.
name|onResponse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateSeedNodes
specifier|public
specifier|synchronized
name|void
name|updateSeedNodes
parameter_list|(
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|seedNodes
operator|.
name|containsAll
argument_list|(
name|seedNodes
argument_list|)
operator|==
literal|false
operator|||
name|this
operator|.
name|seedNodes
operator|.
name|size
argument_list|()
operator|!=
name|seedNodes
operator|.
name|size
argument_list|()
condition|)
block|{
name|this
operator|.
name|seedNodes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|seedNodes
argument_list|)
expr_stmt|;
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|x
lambda|->
block|{}
argument_list|,
name|e
lambda|->
name|logger
operator|.
name|error
argument_list|(
literal|"failed to establish connection to remote cluster"
argument_list|,
name|e
argument_list|)
argument_list|)
decl_stmt|;
name|connectWithSeeds
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handshakeAndConnect
specifier|private
name|void
name|handshakeAndConnect
parameter_list|(
name|Iterator
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
parameter_list|,
specifier|final
name|TransportService
name|transportService
parameter_list|,
name|TimeValue
name|connectTimeout
parameter_list|,
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
parameter_list|,
name|boolean
name|connect
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|seedNodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|DiscoveryNode
name|seedNode
init|=
name|seedNodes
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNode
name|handshakeNode
decl_stmt|;
if|if
condition|(
name|connect
condition|)
block|{
try|try
init|(
name|Transport
operator|.
name|Connection
name|connection
init|=
name|transportService
operator|.
name|openConnection
argument_list|(
name|seedNode
argument_list|,
name|ConnectionProfile
operator|.
name|LIGHT_PROFILE
argument_list|)
init|)
block|{
name|handshakeNode
operator|=
name|transportService
operator|.
name|handshake
argument_list|(
name|connection
argument_list|,
name|connectTimeout
operator|.
name|millis
argument_list|()
argument_list|,
parameter_list|(
name|c
parameter_list|)
lambda|->
literal|true
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|connectToNode
argument_list|(
name|handshakeNode
argument_list|,
name|remoteProfile
argument_list|)
expr_stmt|;
name|clusterNodes
operator|.
name|add
argument_list|(
name|handshakeNode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|handshakeNode
operator|=
name|seedNode
expr_stmt|;
block|}
name|ClusterStateRequest
name|request
init|=
operator|new
name|ClusterStateRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|clear
argument_list|()
expr_stmt|;
name|request
operator|.
name|nodes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|transportService
operator|.
name|getConnection
argument_list|(
name|handshakeNode
argument_list|)
argument_list|,
name|ClusterStateAction
operator|.
name|NAME
argument_list|,
name|request
argument_list|,
name|TransportRequestOptions
operator|.
name|EMPTY
argument_list|,
operator|new
name|TransportResponseHandler
argument_list|<
name|ClusterStateResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterStateResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ClusterStateResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|ClusterStateResponse
name|response
parameter_list|)
block|{
name|DiscoveryNodes
name|nodes
init|=
name|response
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesIter
init|=
name|nodes
operator|.
name|getDataNodes
argument_list|()
operator|::
name|valuesIt
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodesIter
control|)
block|{
name|transportService
operator|.
name|connectToNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// noop if node is connected
name|clusterNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|onResponse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"fetching nodes from external cluster {} failed"
argument_list|,
name|clusterName
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|handshakeAndConnect
argument_list|(
name|seedNodes
argument_list|,
name|transportService
argument_list|,
name|connectTimeout
argument_list|,
name|listener
argument_list|,
name|connect
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|MANAGEMENT
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"no seed node left"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|seedNodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"fetching nodes from external cluster {} failed"
argument_list|,
name|clusterName
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|handshakeAndConnect
argument_list|(
name|seedNodes
argument_list|,
name|transportService
argument_list|,
name|connectTimeout
argument_list|,
name|listener
argument_list|,
name|connect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onNodeDisconnected
specifier|public
name|void
name|onNodeDisconnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|boolean
name|remove
init|=
name|clusterNodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|remove
operator|==
literal|true
operator|&&
name|clusterNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// try to reconnect
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|x
lambda|->
block|{}
argument_list|,
name|e
lambda|->
name|logger
operator|.
name|error
argument_list|(
literal|"failed to establish connection to remote cluster"
argument_list|,
name|e
argument_list|)
argument_list|)
decl_stmt|;
name|connectWithSeeds
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ensureConnected
specifier|private
name|void
name|ensureConnected
parameter_list|(
name|DiscoveryNode
index|[]
name|nodes
parameter_list|)
block|{
name|boolean
name|seenNotConnectedNode
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|transportService
operator|.
name|nodeConnected
argument_list|(
name|node
argument_list|)
operator|==
literal|false
condition|)
block|{
name|seenNotConnectedNode
operator|=
literal|true
expr_stmt|;
name|transportService
operator|.
name|connectToNode
argument_list|(
name|node
argument_list|,
name|remoteProfile
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|seenNotConnectedNode
condition|)
block|{
specifier|final
name|TimeValue
name|connectTimeout
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// TODO make configurable
name|handshakeAndConnect
argument_list|(
name|clusterNodes
operator|.
name|iterator
argument_list|()
argument_list|,
name|transportService
argument_list|,
name|connectTimeout
argument_list|,
name|ActionListener
operator|.
name|wrap
argument_list|(
parameter_list|(
name|x
parameter_list|)
lambda|->
block|{                 }
argument_list|,
name|x
lambda|->
block|{                 }
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// nocommit handle exceptions here what should we do
block|}
block|}
DECL|method|fetchSearchShards
specifier|public
name|void
name|fetchSearchShards
parameter_list|(
name|SearchRequest
name|searchRequest
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|,
name|ActionListener
argument_list|<
name|ClusterSearchShardsResponse
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|DiscoveryNode
name|node
init|=
name|nodeSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|ClusterSearchShardsRequest
name|searchShardsRequest
init|=
operator|new
name|ClusterSearchShardsRequest
argument_list|(
name|indices
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|indices
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|indicesOptions
argument_list|(
name|searchRequest
operator|.
name|indicesOptions
argument_list|()
argument_list|)
operator|.
name|local
argument_list|(
literal|true
argument_list|)
operator|.
name|preference
argument_list|(
name|searchRequest
operator|.
name|preference
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|searchRequest
operator|.
name|routing
argument_list|()
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|ClusterSearchShardsAction
operator|.
name|NAME
argument_list|,
name|searchShardsRequest
argument_list|,
operator|new
name|TransportResponseHandler
argument_list|<
name|ClusterSearchShardsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterSearchShardsResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ClusterSearchShardsResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|ClusterSearchShardsResponse
name|clusterSearchShardsResponse
parameter_list|)
block|{
name|ensureConnected
argument_list|(
name|clusterSearchShardsResponse
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
name|clusterSearchShardsResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getClusterName
specifier|public
name|String
name|getClusterName
parameter_list|()
block|{
return|return
name|clusterName
return|;
block|}
block|}
end_class

end_unit

