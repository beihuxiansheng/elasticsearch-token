begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|shards
operator|.
name|ClusterSearchShardsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|shards
operator|.
name|ClusterSearchShardsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|shards
operator|.
name|ClusterSearchShardsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CancellableThreads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectionProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportActionProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportConnectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * Represents a connection to a single remote cluster. In contrast to a local cluster a remote cluster is not joined such that the  * current node is part of the cluster and it won't receive cluster state updates from the remote cluster. Remote clusters are also not  * fully connected with the current node. From a connection perspective a local cluster forms a bi-directional star network while in the  * remote case we only connect to a subset of the nodes in the cluster in an uni-directional fashion.  *  * This class also handles the discovery of nodes from the remote cluster. The initial list of seed nodes is only used to discover all nodes  * in the remote cluster and connects to all eligible nodes, for details see {@link RemoteClusterService#REMOTE_NODE_ATTRIBUTE}.  *  * In the case of a disconnection, this class will issue a re-connect task to establish at most  * {@link RemoteClusterService#REMOTE_CONNECTIONS_PER_CLUSTER} until either all eligible nodes are exhausted or the maximum number of  * connections per cluster has been reached.  */
end_comment

begin_class
DECL|class|RemoteClusterConnection
specifier|final
class|class
name|RemoteClusterConnection
extends|extends
name|AbstractComponent
implements|implements
name|TransportConnectionListener
implements|,
name|Closeable
block|{
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|remoteProfile
specifier|private
specifier|final
name|ConnectionProfile
name|remoteProfile
decl_stmt|;
DECL|field|connectedNodes
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|DiscoveryNode
argument_list|>
name|connectedNodes
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nodeSupplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodeSupplier
decl_stmt|;
DECL|field|clusterAlias
specifier|private
specifier|final
name|String
name|clusterAlias
decl_stmt|;
DECL|field|maxNumRemoteConnections
specifier|private
specifier|final
name|int
name|maxNumRemoteConnections
decl_stmt|;
DECL|field|nodePredicate
specifier|private
specifier|final
name|Predicate
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodePredicate
decl_stmt|;
DECL|field|seedNodes
specifier|private
specifier|volatile
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
decl_stmt|;
DECL|field|connectHandler
specifier|private
specifier|final
name|ConnectHandler
name|connectHandler
decl_stmt|;
comment|/**      * Creates a new {@link RemoteClusterConnection}      * @param settings the nodes settings object      * @param clusterAlias the configured alias of the cluster to connect to      * @param seedNodes a list of seed nodes to discover eligible nodes from      * @param transportService the local nodes transport service      * @param maxNumRemoteConnections the maximum number of connections to the remote cluster      * @param nodePredicate a predicate to filter eligible remote nodes to connect to      */
DECL|method|RemoteClusterConnection
name|RemoteClusterConnection
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|clusterAlias
parameter_list|,
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|int
name|maxNumRemoteConnections
parameter_list|,
name|Predicate
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodePredicate
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|maxNumRemoteConnections
operator|=
name|maxNumRemoteConnections
expr_stmt|;
name|this
operator|.
name|nodePredicate
operator|=
name|nodePredicate
expr_stmt|;
name|this
operator|.
name|clusterAlias
operator|=
name|clusterAlias
expr_stmt|;
name|ConnectionProfile
operator|.
name|Builder
name|builder
init|=
operator|new
name|ConnectionProfile
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setConnectTimeout
argument_list|(
name|TcpTransport
operator|.
name|TCP_CONNECT_TIMEOUT
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHandshakeTimeout
argument_list|(
name|TcpTransport
operator|.
name|TCP_CONNECT_TIMEOUT
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addConnections
argument_list|(
literal|6
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|PING
argument_list|)
expr_stmt|;
comment|// TODO make this configurable?
name|builder
operator|.
name|addConnections
argument_list|(
literal|0
argument_list|,
comment|// we don't want this to be used for anything else but search
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|BULK
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|STATE
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
argument_list|)
expr_stmt|;
name|remoteProfile
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|nodeSupplier
operator|=
operator|new
name|Supplier
argument_list|<
name|DiscoveryNode
argument_list|>
argument_list|()
block|{
specifier|private
specifier|volatile
name|Iterator
argument_list|<
name|DiscoveryNode
argument_list|>
name|current
decl_stmt|;
annotation|@
name|Override
specifier|public
name|DiscoveryNode
name|get
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|hasNext
argument_list|()
operator|==
literal|false
condition|)
block|{
name|current
operator|=
name|connectedNodes
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|hasNext
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No node available for cluster: "
operator|+
name|clusterAlias
operator|+
literal|" nodes: "
operator|+
name|connectedNodes
argument_list|)
throw|;
block|}
block|}
return|return
name|current
operator|.
name|next
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|seedNodes
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|seedNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectHandler
operator|=
operator|new
name|ConnectHandler
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|addConnectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Updates the list of seed nodes for this cluster connection      */
DECL|method|updateSeedNodes
specifier|synchronized
name|void
name|updateSeedNodes
parameter_list|(
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
parameter_list|,
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|connectListener
parameter_list|)
block|{
name|this
operator|.
name|seedNodes
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|seedNodes
argument_list|)
argument_list|)
expr_stmt|;
name|connectHandler
operator|.
name|connect
argument_list|(
name|connectListener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNodeDisconnected
specifier|public
name|void
name|onNodeDisconnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|boolean
name|remove
init|=
name|connectedNodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|remove
operator|==
literal|true
operator|&&
name|connectedNodes
operator|.
name|size
argument_list|()
operator|<
name|maxNumRemoteConnections
condition|)
block|{
comment|// try to reconnect and fill up the slot of the disconnected node
name|connectHandler
operator|.
name|forceConnect
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.      */
DECL|method|fetchSearchShards
specifier|public
name|void
name|fetchSearchShards
parameter_list|(
name|SearchRequest
name|searchRequest
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|,
name|ActionListener
argument_list|<
name|ClusterSearchShardsResponse
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|connectedNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// just in case if we are not connected for some reason we try to connect and if we fail we have to notify the listener
comment|// this will cause some back pressure on the search end and eventually will cause rejections but that's fine
comment|// we can't proceed with a search on a cluster level.
comment|// in the future we might want to just skip the remote nodes in such a case but that can already be implemented on the caller
comment|// end since they provide the listener.
name|connectHandler
operator|.
name|connect
argument_list|(
name|ActionListener
operator|.
name|wrap
argument_list|(
parameter_list|(
name|x
parameter_list|)
lambda|->
name|fetchShardsInternal
argument_list|(
name|searchRequest
argument_list|,
name|indices
argument_list|,
name|listener
argument_list|)
argument_list|,
name|listener
operator|::
name|onFailure
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fetchShardsInternal
argument_list|(
name|searchRequest
argument_list|,
name|indices
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fetchShardsInternal
specifier|private
name|void
name|fetchShardsInternal
parameter_list|(
name|SearchRequest
name|searchRequest
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|ClusterSearchShardsResponse
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|DiscoveryNode
name|node
init|=
name|nodeSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|ClusterSearchShardsRequest
name|searchShardsRequest
init|=
operator|new
name|ClusterSearchShardsRequest
argument_list|(
name|indices
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|indices
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|indicesOptions
argument_list|(
name|searchRequest
operator|.
name|indicesOptions
argument_list|()
argument_list|)
operator|.
name|local
argument_list|(
literal|true
argument_list|)
operator|.
name|preference
argument_list|(
name|searchRequest
operator|.
name|preference
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|searchRequest
operator|.
name|routing
argument_list|()
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|ClusterSearchShardsAction
operator|.
name|NAME
argument_list|,
name|searchShardsRequest
argument_list|,
operator|new
name|TransportResponseHandler
argument_list|<
name|ClusterSearchShardsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterSearchShardsResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ClusterSearchShardsResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|ClusterSearchShardsResponse
name|clusterSearchShardsResponse
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|clusterSearchShardsResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a connection to the remote cluster. This connection might be a proxy connection that redirects internally to the      * given node.      */
DECL|method|getConnection
name|Transport
operator|.
name|Connection
name|getConnection
parameter_list|(
name|DiscoveryNode
name|remoteClusterNode
parameter_list|)
block|{
name|DiscoveryNode
name|discoveryNode
init|=
name|nodeSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|Transport
operator|.
name|Connection
name|connection
init|=
name|transportService
operator|.
name|getConnection
argument_list|(
name|discoveryNode
argument_list|)
decl_stmt|;
return|return
operator|new
name|Transport
operator|.
name|Connection
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DiscoveryNode
name|getNode
parameter_list|()
block|{
return|return
name|remoteClusterNode
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendRequest
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransportException
block|{
name|connection
operator|.
name|sendRequest
argument_list|(
name|requestId
argument_list|,
name|TransportActionProxy
operator|.
name|getProxyAction
argument_list|(
name|action
argument_list|)
argument_list|,
name|TransportActionProxy
operator|.
name|wrapRequest
argument_list|(
name|remoteClusterNode
argument_list|,
name|request
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
literal|false
operator|:
literal|"proxy connections must not be closed"
assert|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the alias / name of the remote cluster      */
DECL|method|getClusterAlias
specifier|public
name|String
name|getClusterAlias
parameter_list|()
block|{
return|return
name|clusterAlias
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|connectHandler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|connectHandler
operator|.
name|isClosed
argument_list|()
return|;
block|}
comment|/**      * The connect handler manages node discovery and the actual connect to the remote cluster.      * There is at most one connect job running at any time. If such a connect job is triggered      * while another job is running the provided listeners are queued and batched up until the current running job returns.      *      * The handler has a built-in queue that can hold up to 100 connect attempts and will reject requests once the queue is full.      * In a scenario when a remote cluster becomes unavailable we will queue requests up but if we can't connect quick enough      * we will just reject the connect trigger which will lead to failing searches.      */
DECL|class|ConnectHandler
specifier|private
class|class
name|ConnectHandler
implements|implements
name|Closeable
block|{
DECL|field|running
specifier|private
specifier|final
name|Semaphore
name|running
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|queue
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|ActionListener
argument_list|<
name|Void
argument_list|>
argument_list|>
name|queue
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
DECL|field|cancellableThreads
specifier|private
specifier|final
name|CancellableThreads
name|cancellableThreads
init|=
operator|new
name|CancellableThreads
argument_list|()
decl_stmt|;
comment|/**          * Triggers a connect round iff there are pending requests queued up and if there is no          * connect round currently running.          */
DECL|method|maybeConnect
name|void
name|maybeConnect
parameter_list|()
block|{
name|connect
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**          * Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either          * be queued or rejected and failed.          */
DECL|method|connect
name|void
name|connect
parameter_list|(
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|connectListener
parameter_list|)
block|{
name|connect
argument_list|(
name|connectListener
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**          * Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also          * trigger a connect round if there is no listener queued up.          */
DECL|method|forceConnect
name|void
name|forceConnect
parameter_list|()
block|{
name|connect
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|connect
specifier|private
name|void
name|connect
parameter_list|(
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|connectListener
parameter_list|,
name|boolean
name|forceRun
parameter_list|)
block|{
specifier|final
name|boolean
name|runConnect
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|ActionListener
argument_list|<
name|Void
argument_list|>
argument_list|>
name|toNotify
decl_stmt|;
synchronized|synchronized
init|(
name|queue
init|)
block|{
if|if
condition|(
name|connectListener
operator|!=
literal|null
operator|&&
name|queue
operator|.
name|offer
argument_list|(
name|connectListener
argument_list|)
operator|==
literal|false
condition|)
block|{
name|connectListener
operator|.
name|onFailure
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|(
literal|"connect queue is full"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|forceRun
operator|==
literal|false
operator|&&
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|runConnect
operator|=
name|running
operator|.
name|tryAcquire
argument_list|()
expr_stmt|;
if|if
condition|(
name|runConnect
condition|)
block|{
name|toNotify
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|queue
operator|.
name|drainTo
argument_list|(
name|toNotify
argument_list|)
expr_stmt|;
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|running
operator|.
name|release
argument_list|()
expr_stmt|;
name|ActionListener
operator|.
name|onFailure
argument_list|(
name|toNotify
argument_list|,
operator|new
name|AlreadyClosedException
argument_list|(
literal|"connect handler is already closed"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|toNotify
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|runConnect
condition|)
block|{
name|forkConnect
argument_list|(
name|toNotify
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|forkConnect
specifier|private
name|void
name|forkConnect
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|ActionListener
argument_list|<
name|Void
argument_list|>
argument_list|>
name|toNotify
parameter_list|)
block|{
name|ThreadPool
name|threadPool
init|=
name|transportService
operator|.
name|getThreadPool
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|MANAGEMENT
argument_list|)
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|running
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|ActionListener
operator|.
name|onFailure
argument_list|(
name|toNotify
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|maybeConnect
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
parameter_list|(
name|x
parameter_list|)
lambda|->
block|{
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|running
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|ActionListener
operator|.
name|onResponse
argument_list|(
name|toNotify
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|maybeConnect
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
parameter_list|(
name|e
parameter_list|)
lambda|->
block|{
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|running
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|ActionListener
operator|.
name|onFailure
argument_list|(
name|toNotify
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|maybeConnect
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|collectRemoteNodes
argument_list|(
name|seedNodes
operator|.
name|iterator
argument_list|()
argument_list|,
name|transportService
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|collectRemoteNodes
name|void
name|collectRemoteNodes
parameter_list|(
name|Iterator
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
parameter_list|,
specifier|final
name|TransportService
name|transportService
parameter_list|,
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|InterruptedException
argument_list|(
literal|"remote connect thread got interrupted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|seedNodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cancellableThreads
operator|.
name|executeIO
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|DiscoveryNode
name|seedNode
init|=
name|seedNodes
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNode
name|handshakeNode
decl_stmt|;
name|Transport
operator|.
name|Connection
name|connection
init|=
name|transportService
operator|.
name|openConnection
argument_list|(
name|seedNode
argument_list|,
name|ConnectionProfile
operator|.
name|buildSingleChannelProfile
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handshakeNode
operator|=
name|transportService
operator|.
name|handshake
argument_list|(
name|connection
argument_list|,
name|remoteProfile
operator|.
name|getHandshakeTimeout
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
parameter_list|(
name|c
parameter_list|)
lambda|->
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodePredicate
operator|.
name|test
argument_list|(
name|handshakeNode
argument_list|)
operator|&&
name|connectedNodes
operator|.
name|size
argument_list|()
operator|<
name|maxNumRemoteConnections
condition|)
block|{
name|transportService
operator|.
name|connectToNode
argument_list|(
name|handshakeNode
argument_list|,
name|remoteProfile
argument_list|)
expr_stmt|;
name|connectedNodes
operator|.
name|add
argument_list|(
name|handshakeNode
argument_list|)
expr_stmt|;
block|}
name|ClusterStateRequest
name|request
init|=
operator|new
name|ClusterStateRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|clear
argument_list|()
expr_stmt|;
name|request
operator|.
name|nodes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|connection
argument_list|,
name|ClusterStateAction
operator|.
name|NAME
argument_list|,
name|request
argument_list|,
name|TransportRequestOptions
operator|.
name|EMPTY
argument_list|,
operator|new
name|SniffClusterStateResponseHandler
argument_list|(
name|transportService
argument_list|,
name|connection
argument_list|,
name|listener
argument_list|,
name|seedNodes
argument_list|,
name|cancellableThreads
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"no seed node left"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CancellableThreads
operator|.
name|ExecutionCancelledException
name|ex
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|ex
argument_list|)
expr_stmt|;
comment|// we got canceled - fail the listener and step out
block|}
catch|catch
parameter_list|(
name|ConnectTransportException
decl||
name|IOException
decl||
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// ISE if we fail the handshake with an version incompatible node
if|if
condition|(
name|seedNodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"fetching nodes from external cluster {} failed"
argument_list|,
name|clusterAlias
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|collectRemoteNodes
argument_list|(
name|seedNodes
argument_list|,
name|transportService
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|cancellableThreads
operator|.
name|cancel
argument_list|(
literal|"connect handler is closed"
argument_list|)
expr_stmt|;
name|running
operator|.
name|acquire
argument_list|()
expr_stmt|;
comment|// acquire the semaphore to ensure all connections are closed and all thread joined
name|running
operator|.
name|release
argument_list|()
expr_stmt|;
name|maybeConnect
argument_list|()
expr_stmt|;
comment|// now go an notify pending listeners
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isClosed
specifier|final
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
operator|.
name|get
argument_list|()
return|;
block|}
comment|/* This class handles the _state response from the remote cluster when sniffing nodes to connect to */
DECL|class|SniffClusterStateResponseHandler
specifier|private
class|class
name|SniffClusterStateResponseHandler
implements|implements
name|TransportResponseHandler
argument_list|<
name|ClusterStateResponse
argument_list|>
block|{
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|connection
specifier|private
specifier|final
name|Transport
operator|.
name|Connection
name|connection
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
decl_stmt|;
DECL|field|seedNodes
specifier|private
specifier|final
name|Iterator
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
decl_stmt|;
DECL|field|cancellableThreads
specifier|private
specifier|final
name|CancellableThreads
name|cancellableThreads
decl_stmt|;
DECL|method|SniffClusterStateResponseHandler
name|SniffClusterStateResponseHandler
parameter_list|(
name|TransportService
name|transportService
parameter_list|,
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
parameter_list|,
name|Iterator
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
parameter_list|,
name|CancellableThreads
name|cancellableThreads
parameter_list|)
block|{
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|seedNodes
operator|=
name|seedNodes
expr_stmt|;
name|this
operator|.
name|cancellableThreads
operator|=
name|cancellableThreads
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|ClusterStateResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ClusterStateResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|handleResponse
specifier|public
name|void
name|handleResponse
parameter_list|(
name|ClusterStateResponse
name|response
parameter_list|)
block|{
try|try
block|{
name|cancellableThreads
operator|.
name|executeIO
argument_list|(
parameter_list|()
lambda|->
block|{
name|DiscoveryNodes
name|nodes
init|=
name|response
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesIter
init|=
name|nodes
operator|.
name|getNodes
argument_list|()
operator|::
name|valuesIt
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodesIter
control|)
block|{
if|if
condition|(
name|nodePredicate
operator|.
name|test
argument_list|(
name|node
argument_list|)
operator|&&
name|connectedNodes
operator|.
name|size
argument_list|()
operator|<
name|maxNumRemoteConnections
condition|)
block|{
try|try
block|{
name|transportService
operator|.
name|connectToNode
argument_list|(
name|node
argument_list|,
name|remoteProfile
argument_list|)
expr_stmt|;
comment|// noop if node is connected
name|connectedNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectTransportException
decl||
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// ISE if we fail the handshake with an version incompatible node
comment|// fair enough we can't connect just move on
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to connect to node {}"
argument_list|,
name|node
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellableThreads
operator|.
name|ExecutionCancelledException
name|ex
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|ex
argument_list|)
expr_stmt|;
comment|// we got canceled - fail the listener and step out
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"fetching nodes from external cluster {} failed"
argument_list|,
name|clusterAlias
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|collectRemoteNodes
argument_list|(
name|seedNodes
argument_list|,
name|transportService
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// just to make sure we don't leak anything we close the connection here again even if we managed to do so before
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|handleException
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"fetching nodes from external cluster {} failed"
argument_list|,
name|clusterAlias
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// once the connection is closed lets try the next node
name|collectRemoteNodes
argument_list|(
name|seedNodes
argument_list|,
name|transportService
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|MANAGEMENT
return|;
block|}
block|}
block|}
DECL|method|assertNoRunningConnections
name|boolean
name|assertNoRunningConnections
parameter_list|()
block|{
comment|// for testing only
assert|assert
name|connectHandler
operator|.
name|running
operator|.
name|availablePermits
argument_list|()
operator|==
literal|1
assert|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

