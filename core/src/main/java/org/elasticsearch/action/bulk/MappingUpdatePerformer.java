begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_interface
DECL|interface|MappingUpdatePerformer
specifier|public
interface|interface
name|MappingUpdatePerformer
block|{
comment|/**      * Determine if any mappings need to be updated, and update them on the      * master node if necessary. Returnes a failed {@code Engine.IndexResult}      * in the event updating the mappings fails or null if successful.      * Throws a {@code ReplicationOperation.RetryOnPrimaryException} if the      * operation needs to be retried on the primary due to the mappings not      * being present yet, or a different exception if updating the mappings      * on the master failed.      */
annotation|@
name|Nullable
DECL|method|updateMappingsIfNeeded
name|MappingUpdateResult
name|updateMappingsIfNeeded
parameter_list|(
name|IndexShard
name|primary
parameter_list|,
name|IndexRequest
name|request
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Class encapsulating the resulting of potentially updating the mapping      */
DECL|class|MappingUpdateResult
class|class
name|MappingUpdateResult
block|{
annotation|@
name|Nullable
DECL|field|operation
specifier|public
specifier|final
name|Engine
operator|.
name|Index
name|operation
decl_stmt|;
annotation|@
name|Nullable
DECL|field|failure
specifier|public
specifier|final
name|Exception
name|failure
decl_stmt|;
DECL|method|MappingUpdateResult
name|MappingUpdateResult
parameter_list|(
name|Exception
name|failure
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|failure
argument_list|,
literal|"failure cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|failure
operator|=
name|failure
expr_stmt|;
name|this
operator|.
name|operation
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|MappingUpdateResult
name|MappingUpdateResult
parameter_list|(
name|Engine
operator|.
name|Index
name|operation
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|operation
argument_list|,
literal|"operation cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|failure
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|isFailed
specifier|public
name|boolean
name|isFailed
parameter_list|()
block|{
return|return
name|failure
operator|!=
literal|null
return|;
block|}
block|}
block|}
end_interface

end_unit

