begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|CompositeIndicesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocumentRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|IndicesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
operator|.
name|addValidationError
import|;
end_import

begin_comment
comment|/**  * A bulk request holds an ordered {@link IndexRequest}s, {@link DeleteRequest}s and {@link UpdateRequest}s  * and allows to executes it in a single batch.  *  * Note that we only support refresh on the bulk request not per item.  * @see org.elasticsearch.client.Client#bulk(BulkRequest)  */
end_comment

begin_class
DECL|class|BulkRequest
specifier|public
class|class
name|BulkRequest
extends|extends
name|ActionRequest
argument_list|<
name|BulkRequest
argument_list|>
implements|implements
name|CompositeIndicesRequest
implements|,
name|WriteRequest
argument_list|<
name|BulkRequest
argument_list|>
block|{
DECL|field|REQUEST_OVERHEAD
specifier|private
specifier|static
specifier|final
name|int
name|REQUEST_OVERHEAD
init|=
literal|50
decl_stmt|;
comment|/**      * Requests that are part of this request. It is only possible to add things that are both {@link ActionRequest}s and      * {@link WriteRequest}s to this but java doesn't support syntax to declare that everything in the array has both types so we declare      * the one with the least casts.      */
DECL|field|requests
specifier|final
name|List
argument_list|<
name|DocumentRequest
argument_list|<
name|?
argument_list|>
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|payloads
name|List
argument_list|<
name|Object
argument_list|>
name|payloads
init|=
literal|null
decl_stmt|;
DECL|field|timeout
specifier|protected
name|TimeValue
name|timeout
init|=
name|BulkShardRequest
operator|.
name|DEFAULT_TIMEOUT
decl_stmt|;
DECL|field|waitForActiveShards
specifier|private
name|ActiveShardCount
name|waitForActiveShards
init|=
name|ActiveShardCount
operator|.
name|DEFAULT
decl_stmt|;
DECL|field|refreshPolicy
specifier|private
name|RefreshPolicy
name|refreshPolicy
init|=
name|RefreshPolicy
operator|.
name|NONE
decl_stmt|;
DECL|field|sizeInBytes
specifier|private
name|long
name|sizeInBytes
init|=
literal|0
decl_stmt|;
DECL|method|BulkRequest
specifier|public
name|BulkRequest
parameter_list|()
block|{     }
comment|/**      * Adds a list of requests to be executed. Either index or delete requests.      */
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|DocumentRequest
argument_list|<
name|?
argument_list|>
modifier|...
name|requests
parameter_list|)
block|{
for|for
control|(
name|DocumentRequest
argument_list|<
name|?
argument_list|>
name|request
range|:
name|requests
control|)
block|{
name|add
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|DocumentRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Add a request to the current BulkRequest.      * @param request Request to add      * @param payload Optional payload      * @return the current bulk request      */
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|DocumentRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
annotation|@
name|Nullable
name|Object
name|payload
parameter_list|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|IndexRequest
condition|)
block|{
name|add
argument_list|(
operator|(
name|IndexRequest
operator|)
name|request
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|DeleteRequest
condition|)
block|{
name|add
argument_list|(
operator|(
name|DeleteRequest
operator|)
name|request
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|UpdateRequest
condition|)
block|{
name|add
argument_list|(
operator|(
name|UpdateRequest
operator|)
name|request
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No support for request ["
operator|+
name|request
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Adds a list of requests to be executed. Either index or delete requests.      */
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|Iterable
argument_list|<
name|DocumentRequest
argument_list|<
name|?
argument_list|>
argument_list|>
name|requests
parameter_list|)
block|{
for|for
control|(
name|DocumentRequest
argument_list|<
name|?
argument_list|>
name|request
range|:
name|requests
control|)
block|{
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Adds an {@link IndexRequest} to the list of actions to execute. Follows the same behavior of {@link IndexRequest}      * (for example, if no id is provided, one will be generated, or usage of the create flag).      */
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|IndexRequest
name|request
parameter_list|)
block|{
return|return
name|internalAdd
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|IndexRequest
name|request
parameter_list|,
annotation|@
name|Nullable
name|Object
name|payload
parameter_list|)
block|{
return|return
name|internalAdd
argument_list|(
name|request
argument_list|,
name|payload
argument_list|)
return|;
block|}
DECL|method|internalAdd
name|BulkRequest
name|internalAdd
parameter_list|(
name|IndexRequest
name|request
parameter_list|,
annotation|@
name|Nullable
name|Object
name|payload
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|request
argument_list|,
literal|"'request' must not be null"
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|addPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
comment|// lack of source is validated in validate() method
name|sizeInBytes
operator|+=
operator|(
name|request
operator|.
name|source
argument_list|()
operator|!=
literal|null
condition|?
name|request
operator|.
name|source
argument_list|()
operator|.
name|length
argument_list|()
else|:
literal|0
operator|)
operator|+
name|REQUEST_OVERHEAD
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds an {@link UpdateRequest} to the list of actions to execute.      */
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|UpdateRequest
name|request
parameter_list|)
block|{
return|return
name|internalAdd
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|UpdateRequest
name|request
parameter_list|,
annotation|@
name|Nullable
name|Object
name|payload
parameter_list|)
block|{
return|return
name|internalAdd
argument_list|(
name|request
argument_list|,
name|payload
argument_list|)
return|;
block|}
DECL|method|internalAdd
name|BulkRequest
name|internalAdd
parameter_list|(
name|UpdateRequest
name|request
parameter_list|,
annotation|@
name|Nullable
name|Object
name|payload
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|request
argument_list|,
literal|"'request' must not be null"
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|addPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|doc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sizeInBytes
operator|+=
name|request
operator|.
name|doc
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|upsertRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sizeInBytes
operator|+=
name|request
operator|.
name|upsertRequest
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|script
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sizeInBytes
operator|+=
name|request
operator|.
name|script
argument_list|()
operator|.
name|getScript
argument_list|()
operator|.
name|length
argument_list|()
operator|*
literal|2
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Adds an {@link DeleteRequest} to the list of actions to execute.      */
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|DeleteRequest
name|request
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|DeleteRequest
name|request
parameter_list|,
annotation|@
name|Nullable
name|Object
name|payload
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|request
argument_list|,
literal|"'request' must not be null"
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|addPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|sizeInBytes
operator|+=
name|REQUEST_OVERHEAD
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addPayload
specifier|private
name|void
name|addPayload
parameter_list|(
name|Object
name|payload
parameter_list|)
block|{
if|if
condition|(
name|payloads
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|payloads
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|requests
operator|.
name|size
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
comment|// add requests#size-1 elements to the payloads if it null (we add for an *existing* request)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|requests
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|payloads
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|payloads
operator|.
name|add
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
comment|/**      * The list of requests in this bulk request.      */
DECL|method|requests
specifier|public
name|List
argument_list|<
name|DocumentRequest
argument_list|<
name|?
argument_list|>
argument_list|>
name|requests
parameter_list|()
block|{
return|return
name|this
operator|.
name|requests
return|;
block|}
annotation|@
name|Override
DECL|method|subRequests
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|IndicesRequest
argument_list|>
name|subRequests
parameter_list|()
block|{
return|return
name|requests
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * The list of optional payloads associated with requests in the same order as the requests. Note, elements within      * it might be null if no payload has been provided.      *<p>      * Note, if no payloads have been provided, this method will return null (as to conserve memory overhead).      */
annotation|@
name|Nullable
DECL|method|payloads
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|payloads
parameter_list|()
block|{
return|return
name|this
operator|.
name|payloads
return|;
block|}
comment|/**      * The number of actions in the bulk request.      */
DECL|method|numberOfActions
specifier|public
name|int
name|numberOfActions
parameter_list|()
block|{
return|return
name|requests
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * The estimated size in bytes of the bulk request.      */
DECL|method|estimatedSizeInBytes
specifier|public
name|long
name|estimatedSizeInBytes
parameter_list|()
block|{
return|return
name|sizeInBytes
return|;
block|}
comment|/**      * Adds a framed data in binary format      */
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|add
argument_list|(
name|data
argument_list|,
name|from
argument_list|,
name|length
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Adds a framed data in binary format      */
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|length
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultIndex
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultType
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|add
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|data
argument_list|,
name|from
argument_list|,
name|length
argument_list|)
argument_list|,
name|defaultIndex
argument_list|,
name|defaultType
argument_list|)
return|;
block|}
comment|/**      * Adds a framed data in binary format      */
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|BytesReference
name|data
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultIndex
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultType
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|add
argument_list|(
name|data
argument_list|,
name|defaultIndex
argument_list|,
name|defaultType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Adds a framed data in binary format      */
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|BytesReference
name|data
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultIndex
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultType
parameter_list|,
name|boolean
name|allowExplicitIndex
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|add
argument_list|(
name|data
argument_list|,
name|defaultIndex
argument_list|,
name|defaultType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|allowExplicitIndex
argument_list|)
return|;
block|}
DECL|method|add
specifier|public
name|BulkRequest
name|add
parameter_list|(
name|BytesReference
name|data
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultIndex
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultType
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultRouting
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|defaultFields
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultPipeline
parameter_list|,
annotation|@
name|Nullable
name|Object
name|payload
parameter_list|,
name|boolean
name|allowExplicitIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|XContent
name|xContent
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|int
name|from
init|=
literal|0
decl_stmt|;
name|int
name|length
init|=
name|data
operator|.
name|length
argument_list|()
decl_stmt|;
name|byte
name|marker
init|=
name|xContent
operator|.
name|streamSeparator
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|nextMarker
init|=
name|findNextMarker
argument_list|(
name|marker
argument_list|,
name|from
argument_list|,
name|data
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextMarker
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|line
operator|++
expr_stmt|;
comment|// now parse the action
try|try
init|(
name|XContentParser
name|parser
init|=
name|xContent
operator|.
name|createParser
argument_list|(
name|data
operator|.
name|slice
argument_list|(
name|from
argument_list|,
name|nextMarker
operator|-
name|from
argument_list|)
argument_list|)
init|)
block|{
comment|// move pointers
name|from
operator|=
name|nextMarker
operator|+
literal|1
expr_stmt|;
comment|// Move to START_OBJECT
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
assert|assert
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
assert|;
comment|// Move to FIELD_NAME, that's the action
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
assert|assert
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
assert|;
name|String
name|action
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|String
name|index
init|=
name|defaultIndex
decl_stmt|;
name|String
name|type
init|=
name|defaultType
decl_stmt|;
name|String
name|id
init|=
literal|null
decl_stmt|;
name|String
name|routing
init|=
name|defaultRouting
decl_stmt|;
name|String
name|parent
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|fields
init|=
name|defaultFields
decl_stmt|;
name|String
name|timestamp
init|=
literal|null
decl_stmt|;
name|TimeValue
name|ttl
init|=
literal|null
decl_stmt|;
name|String
name|opType
init|=
literal|null
decl_stmt|;
name|long
name|version
init|=
name|Versions
operator|.
name|MATCH_ANY
decl_stmt|;
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
name|int
name|retryOnConflict
init|=
literal|0
decl_stmt|;
name|String
name|pipeline
init|=
name|defaultPipeline
decl_stmt|;
comment|// at this stage, next token can either be END_OBJECT (and use default index and type, with auto generated id)
comment|// or START_OBJECT which will have another set of parameters
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"_index"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|allowExplicitIndex
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"explicit index in bulk is not allowed"
argument_list|)
throw|;
block|}
name|index
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|type
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_id"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|id
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_routing"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"routing"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|routing
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_parent"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"parent"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|parent
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_timestamp"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"timestamp"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|timestamp
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_ttl"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"ttl"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|ttl
operator|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|,
literal|null
argument_list|,
name|currentFieldName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ttl
operator|=
operator|new
name|TimeValue
argument_list|(
name|parser
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"op_type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"opType"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|opType
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_version"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"version"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|version
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_version_type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"_versionType"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"version_type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"versionType"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|versionType
operator|=
name|VersionType
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_retry_on_conflict"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"_retryOnConflict"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|retryOnConflict
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"pipeline"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|pipeline
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fields"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Action/metadata line ["
operator|+
name|line
operator|+
literal|"] contains a simple value for parameter [fields] while a list is expected"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Action/metadata line ["
operator|+
name|line
operator|+
literal|"] contains an unknown parameter ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
literal|"fields"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|parser
operator|.
name|list
argument_list|()
decl_stmt|;
name|fields
operator|=
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Malformed action/metadata line ["
operator|+
name|line
operator|+
literal|"], expected a simple value for field ["
operator|+
name|currentFieldName
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Malformed action/metadata line ["
operator|+
name|line
operator|+
literal|"], expected a simple value for field ["
operator|+
name|currentFieldName
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Malformed action/metadata line ["
operator|+
name|line
operator|+
literal|"], expected "
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|+
literal|" or "
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
operator|+
literal|" but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"delete"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|add
argument_list|(
operator|new
name|DeleteRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nextMarker
operator|=
name|findNextMarker
argument_list|(
name|marker
argument_list|,
name|from
argument_list|,
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextMarker
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|line
operator|++
expr_stmt|;
comment|// order is important, we set parent after routing, so routing will be set to parent if not set explicitly
comment|// we use internalAdd so we don't fork here, this allows us not to copy over the big byte array to small chunks
comment|// of index request.
if|if
condition|(
literal|"index"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
if|if
condition|(
name|opType
operator|==
literal|null
condition|)
block|{
name|internalAdd
argument_list|(
operator|new
name|IndexRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
operator|.
name|timestamp
argument_list|(
name|timestamp
argument_list|)
operator|.
name|ttl
argument_list|(
name|ttl
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
operator|.
name|source
argument_list|(
name|data
operator|.
name|slice
argument_list|(
name|from
argument_list|,
name|nextMarker
operator|-
name|from
argument_list|)
argument_list|)
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|internalAdd
argument_list|(
operator|new
name|IndexRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
operator|.
name|timestamp
argument_list|(
name|timestamp
argument_list|)
operator|.
name|ttl
argument_list|(
name|ttl
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
operator|.
name|create
argument_list|(
literal|"create"
operator|.
name|equals
argument_list|(
name|opType
argument_list|)
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
operator|.
name|source
argument_list|(
name|data
operator|.
name|slice
argument_list|(
name|from
argument_list|,
name|nextMarker
operator|-
name|from
argument_list|)
argument_list|)
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"create"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|internalAdd
argument_list|(
operator|new
name|IndexRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
operator|.
name|timestamp
argument_list|(
name|timestamp
argument_list|)
operator|.
name|ttl
argument_list|(
name|ttl
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
operator|.
name|create
argument_list|(
literal|true
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
operator|.
name|source
argument_list|(
name|data
operator|.
name|slice
argument_list|(
name|from
argument_list|,
name|nextMarker
operator|-
name|from
argument_list|)
argument_list|)
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"update"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
operator|.
name|retryOnConflict
argument_list|(
name|retryOnConflict
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
operator|.
name|source
argument_list|(
name|data
operator|.
name|slice
argument_list|(
name|from
argument_list|,
name|nextMarker
operator|-
name|from
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|updateRequest
operator|.
name|fields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
name|IndexRequest
name|upsertRequest
init|=
name|updateRequest
operator|.
name|upsertRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|upsertRequest
operator|!=
literal|null
condition|)
block|{
name|upsertRequest
operator|.
name|timestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|upsertRequest
operator|.
name|ttl
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|upsertRequest
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|upsertRequest
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
expr_stmt|;
block|}
name|IndexRequest
name|doc
init|=
name|updateRequest
operator|.
name|doc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|timestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|doc
operator|.
name|ttl
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|doc
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|doc
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
expr_stmt|;
block|}
name|internalAdd
argument_list|(
name|updateRequest
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
comment|// move pointers
name|from
operator|=
name|nextMarker
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * Sets the number of shard copies that must be active before proceeding with the write.      * See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.      */
DECL|method|waitForActiveShards
specifier|public
name|BulkRequest
name|waitForActiveShards
parameter_list|(
name|ActiveShardCount
name|waitForActiveShards
parameter_list|)
block|{
name|this
operator|.
name|waitForActiveShards
operator|=
name|waitForActiveShards
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical      * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}      * to get the ActiveShardCount.      */
DECL|method|waitForActiveShards
specifier|public
name|BulkRequest
name|waitForActiveShards
parameter_list|(
specifier|final
name|int
name|waitForActiveShards
parameter_list|)
block|{
return|return
name|waitForActiveShards
argument_list|(
name|ActiveShardCount
operator|.
name|from
argument_list|(
name|waitForActiveShards
argument_list|)
argument_list|)
return|;
block|}
DECL|method|waitForActiveShards
specifier|public
name|ActiveShardCount
name|waitForActiveShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|waitForActiveShards
return|;
block|}
annotation|@
name|Override
DECL|method|setRefreshPolicy
specifier|public
name|BulkRequest
name|setRefreshPolicy
parameter_list|(
name|RefreshPolicy
name|refreshPolicy
parameter_list|)
block|{
name|this
operator|.
name|refreshPolicy
operator|=
name|refreshPolicy
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getRefreshPolicy
specifier|public
name|RefreshPolicy
name|getRefreshPolicy
parameter_list|()
block|{
return|return
name|refreshPolicy
return|;
block|}
comment|/**      * A timeout to wait if the index operation can't be performed immediately. Defaults to<tt>1m</tt>.      */
DECL|method|timeout
specifier|public
specifier|final
name|BulkRequest
name|timeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A timeout to wait if the index operation can't be performed immediately. Defaults to<tt>1m</tt>.      */
DECL|method|timeout
specifier|public
specifier|final
name|BulkRequest
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
return|return
name|timeout
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|timeout
argument_list|,
literal|null
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".timeout"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|timeout
specifier|public
name|TimeValue
name|timeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
DECL|method|findNextMarker
specifier|private
name|int
name|findNextMarker
parameter_list|(
name|byte
name|marker
parameter_list|,
name|int
name|from
parameter_list|,
name|BytesReference
name|data
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
name|marker
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * @return Whether this bulk request contains index request with an ingest pipeline enabled.      */
DECL|method|hasIndexRequestsWithPipelines
specifier|public
name|boolean
name|hasIndexRequestsWithPipelines
parameter_list|()
block|{
for|for
control|(
name|DocumentRequest
argument_list|<
name|?
argument_list|>
name|actionRequest
range|:
name|requests
control|)
block|{
if|if
condition|(
name|actionRequest
operator|instanceof
name|IndexRequest
condition|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|actionRequest
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|indexRequest
operator|.
name|getPipeline
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"no requests added"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DocumentRequest
argument_list|<
name|?
argument_list|>
name|request
range|:
name|requests
control|)
block|{
comment|// We first check if refresh has been set
if|if
condition|(
operator|(
operator|(
name|WriteRequest
argument_list|<
name|?
argument_list|>
operator|)
name|request
operator|)
operator|.
name|getRefreshPolicy
argument_list|()
operator|!=
name|RefreshPolicy
operator|.
name|NONE
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"RefreshPolicy is not supported on an item request. Set it on the BulkRequest instead."
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
name|ActionRequestValidationException
name|ex
init|=
operator|(
operator|(
name|WriteRequest
argument_list|<
name|?
argument_list|>
operator|)
name|request
operator|)
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|validationException
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
operator|new
name|ActionRequestValidationException
argument_list|()
expr_stmt|;
block|}
name|validationException
operator|.
name|addValidationErrors
argument_list|(
name|ex
operator|.
name|validationErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|validationException
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|waitForActiveShards
operator|=
name|ActiveShardCount
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|type
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|0
condition|)
block|{
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|1
condition|)
block|{
name|DeleteRequest
name|request
init|=
operator|new
name|DeleteRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|2
condition|)
block|{
name|UpdateRequest
name|request
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
name|refreshPolicy
operator|=
name|RefreshPolicy
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|timeout
operator|=
operator|new
name|TimeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|waitForActiveShards
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|requests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DocumentRequest
argument_list|<
name|?
argument_list|>
name|request
range|:
name|requests
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|IndexRequest
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
operator|(
operator|(
name|IndexRequest
operator|)
name|request
operator|)
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|DeleteRequest
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DeleteRequest
operator|)
name|request
operator|)
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|UpdateRequest
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
expr_stmt|;
operator|(
operator|(
name|UpdateRequest
operator|)
name|request
operator|)
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|refreshPolicy
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

