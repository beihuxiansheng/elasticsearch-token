begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|StatusToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Represents a single item response for an action executed as part of the bulk API. Holds the index/type/id  * of the relevant action, and if it has failed or not (with the failure message incase it failed).  */
end_comment

begin_class
DECL|class|BulkItemResponse
specifier|public
class|class
name|BulkItemResponse
implements|implements
name|Streamable
implements|,
name|StatusToXContent
block|{
annotation|@
name|Override
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
return|return
name|failure
operator|==
literal|null
condition|?
name|response
operator|.
name|status
argument_list|()
else|:
name|failure
operator|.
name|getStatus
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|opType
argument_list|)
expr_stmt|;
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|STATUS
argument_list|,
name|response
operator|.
name|status
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_INDEX
argument_list|,
name|failure
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_TYPE
argument_list|,
name|failure
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_ID
argument_list|,
name|failure
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|STATUS
argument_list|,
name|failure
operator|.
name|getStatus
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|ElasticsearchException
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|failure
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|_INDEX
specifier|static
specifier|final
name|XContentBuilderString
name|_INDEX
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"_index"
argument_list|)
decl_stmt|;
DECL|field|_TYPE
specifier|static
specifier|final
name|XContentBuilderString
name|_TYPE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"_type"
argument_list|)
decl_stmt|;
DECL|field|_ID
specifier|static
specifier|final
name|XContentBuilderString
name|_ID
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"_id"
argument_list|)
decl_stmt|;
DECL|field|STATUS
specifier|static
specifier|final
name|XContentBuilderString
name|STATUS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
DECL|field|ERROR
specifier|static
specifier|final
name|XContentBuilderString
name|ERROR
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
block|}
comment|/**      * Represents a failure.      */
DECL|class|Failure
specifier|public
specifier|static
class|class
name|Failure
block|{
DECL|field|index
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|cause
specifier|private
specifier|final
name|Throwable
name|cause
decl_stmt|;
DECL|field|status
specifier|private
specifier|final
name|RestStatus
name|status
decl_stmt|;
DECL|method|Failure
specifier|public
name|Failure
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|cause
operator|=
name|t
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|ExceptionsHelper
operator|.
name|status
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**          * The index name of the action.          */
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
return|;
block|}
comment|/**          * The type of the action.          */
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**          * The id of the action.          */
DECL|method|getId
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**          * The failure message.          */
DECL|method|getMessage
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|cause
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**          * The rest status.          */
DECL|method|getStatus
specifier|public
name|RestStatus
name|getStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|status
return|;
block|}
DECL|method|getCause
specifier|public
name|Throwable
name|getCause
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
block|}
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|field|opType
specifier|private
name|String
name|opType
decl_stmt|;
DECL|field|response
specifier|private
name|DocWriteResponse
name|response
decl_stmt|;
DECL|field|failure
specifier|private
name|Failure
name|failure
decl_stmt|;
DECL|method|BulkItemResponse
name|BulkItemResponse
parameter_list|()
block|{      }
DECL|method|BulkItemResponse
specifier|public
name|BulkItemResponse
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|opType
parameter_list|,
name|DocWriteResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|opType
operator|=
name|opType
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
DECL|method|BulkItemResponse
specifier|public
name|BulkItemResponse
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|opType
parameter_list|,
name|Failure
name|failure
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|opType
operator|=
name|opType
expr_stmt|;
name|this
operator|.
name|failure
operator|=
name|failure
expr_stmt|;
block|}
comment|/**      * The numeric order of the item matching the same request order in the bulk request.      */
DECL|method|getItemId
specifier|public
name|int
name|getItemId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * The operation type ("index", "create" or "delete").      */
DECL|method|getOpType
specifier|public
name|String
name|getOpType
parameter_list|()
block|{
return|return
name|this
operator|.
name|opType
return|;
block|}
comment|/**      * The index name of the action.      */
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
return|return
name|failure
operator|.
name|getIndex
argument_list|()
return|;
block|}
return|return
name|response
operator|.
name|getIndex
argument_list|()
return|;
block|}
comment|/**      * The type of the action.      */
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
return|return
name|failure
operator|.
name|getType
argument_list|()
return|;
block|}
return|return
name|response
operator|.
name|getType
argument_list|()
return|;
block|}
comment|/**      * The id of the action.      */
DECL|method|getId
specifier|public
name|String
name|getId
parameter_list|()
block|{
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
return|return
name|failure
operator|.
name|getId
argument_list|()
return|;
block|}
return|return
name|response
operator|.
name|getId
argument_list|()
return|;
block|}
comment|/**      * The version of the action.      */
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|response
operator|.
name|getVersion
argument_list|()
return|;
block|}
comment|/**      * The actual response ({@link IndexResponse} or {@link DeleteResponse}).<tt>null</tt> in      * case of failure.      */
DECL|method|getResponse
specifier|public
parameter_list|<
name|T
extends|extends
name|DocWriteResponse
parameter_list|>
name|T
name|getResponse
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|response
return|;
block|}
comment|/**      * Is this a failed execution of an operation.      */
DECL|method|isFailed
specifier|public
name|boolean
name|isFailed
parameter_list|()
block|{
return|return
name|failure
operator|!=
literal|null
return|;
block|}
comment|/**      * The failure message,<tt>null</tt> if it did not fail.      */
DECL|method|getFailureMessage
specifier|public
name|String
name|getFailureMessage
parameter_list|()
block|{
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
return|return
name|failure
operator|.
name|getMessage
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The actual failure object if there was a failure.      */
DECL|method|getFailure
specifier|public
name|Failure
name|getFailure
parameter_list|()
block|{
return|return
name|this
operator|.
name|failure
return|;
block|}
DECL|method|readBulkItem
specifier|public
specifier|static
name|BulkItemResponse
name|readBulkItem
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|BulkItemResponse
name|response
init|=
operator|new
name|BulkItemResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|id
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|opType
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|byte
name|type
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|0
condition|)
block|{
name|response
operator|=
operator|new
name|IndexResponse
argument_list|()
expr_stmt|;
name|response
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|1
condition|)
block|{
name|response
operator|=
operator|new
name|DeleteResponse
argument_list|()
expr_stmt|;
name|response
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|3
condition|)
block|{
comment|// make 3 instead of 2, because 2 is already in use for 'no responses'
name|response
operator|=
operator|new
name|UpdateResponse
argument_list|()
expr_stmt|;
name|response
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|String
name|fIndex
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|fType
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|fId
init|=
name|in
operator|.
name|readOptionalString
argument_list|()
decl_stmt|;
name|Throwable
name|throwable
init|=
name|in
operator|.
name|readThrowable
argument_list|()
decl_stmt|;
name|failure
operator|=
operator|new
name|Failure
argument_list|(
name|fIndex
argument_list|,
name|fType
argument_list|,
name|fId
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|opType
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|response
operator|instanceof
name|IndexResponse
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|response
operator|instanceof
name|DeleteResponse
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|response
operator|instanceof
name|UpdateResponse
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
expr_stmt|;
comment|// make 3 instead of 2, because 2 is already in use for 'no responses'
block|}
name|response
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|failure
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|failure
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|failure
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeThrowable
argument_list|(
name|failure
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

