begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk.byscroll
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
import|;
end_import

begin_comment
comment|/**  * Task for parent bulk by scroll requests that have sub-workers.  */
end_comment

begin_class
DECL|class|ParentBulkByScrollTask
specifier|public
class|class
name|ParentBulkByScrollTask
extends|extends
name|BulkByScrollTask
block|{
comment|/**      * Holds the responses as they come back. This uses {@link Tuple} as an "Either" style holder where only the response or the exception      * is set.      */
DECL|field|results
specifier|private
specifier|final
name|AtomicArray
argument_list|<
name|Result
argument_list|>
name|results
decl_stmt|;
DECL|field|counter
specifier|private
specifier|final
name|AtomicInteger
name|counter
decl_stmt|;
DECL|method|ParentBulkByScrollTask
specifier|public
name|ParentBulkByScrollTask
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|description
parameter_list|,
name|TaskId
name|parentTaskId
parameter_list|,
name|int
name|slices
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
name|action
argument_list|,
name|description
argument_list|,
name|parentTaskId
argument_list|)
expr_stmt|;
name|this
operator|.
name|results
operator|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|slices
argument_list|)
expr_stmt|;
name|this
operator|.
name|counter
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|slices
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rethrottle
specifier|public
name|void
name|rethrottle
parameter_list|(
name|float
name|newRequestsPerSecond
parameter_list|)
block|{
comment|// Nothing to do because all rethrottling is done on slice sub tasks.
block|}
annotation|@
name|Override
DECL|method|getStatus
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
comment|// We only have access to the statuses of requests that have finished so we return them
name|List
argument_list|<
name|StatusOrException
argument_list|>
name|statuses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|StatusOrException
index|[
name|results
operator|.
name|length
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|addResultsToList
argument_list|(
name|statuses
argument_list|)
expr_stmt|;
return|return
operator|new
name|Status
argument_list|(
name|unmodifiableList
argument_list|(
name|statuses
argument_list|)
argument_list|,
name|getReasonCancelled
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|runningSliceSubTasks
specifier|public
name|int
name|runningSliceSubTasks
parameter_list|()
block|{
return|return
name|counter
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getInfoGivenSliceInfo
specifier|public
name|TaskInfo
name|getInfoGivenSliceInfo
parameter_list|(
name|String
name|localNodeId
parameter_list|,
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|sliceInfo
parameter_list|)
block|{
comment|/* Merge the list of finished sub requests with the provided info. If a slice is both finished and in the list then we prefer the          * finished status because we don't expect them to change after the task is finished. */
name|List
argument_list|<
name|StatusOrException
argument_list|>
name|sliceStatuses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|StatusOrException
index|[
name|results
operator|.
name|length
argument_list|()
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskInfo
name|t
range|:
name|sliceInfo
control|)
block|{
name|Status
name|status
init|=
operator|(
name|Status
operator|)
name|t
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|sliceStatuses
operator|.
name|set
argument_list|(
name|status
operator|.
name|getSliceId
argument_list|()
argument_list|,
operator|new
name|StatusOrException
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addResultsToList
argument_list|(
name|sliceStatuses
argument_list|)
expr_stmt|;
name|Status
name|status
init|=
operator|new
name|Status
argument_list|(
name|sliceStatuses
argument_list|,
name|getReasonCancelled
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|taskInfo
argument_list|(
name|localNodeId
argument_list|,
name|getDescription
argument_list|()
argument_list|,
name|status
argument_list|)
return|;
block|}
DECL|method|addResultsToList
specifier|private
name|void
name|addResultsToList
parameter_list|(
name|List
argument_list|<
name|StatusOrException
argument_list|>
name|sliceStatuses
parameter_list|)
block|{
for|for
control|(
name|Result
name|t
range|:
name|results
operator|.
name|asList
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|response
operator|!=
literal|null
condition|)
block|{
name|sliceStatuses
operator|.
name|set
argument_list|(
name|t
operator|.
name|sliceId
argument_list|,
operator|new
name|StatusOrException
argument_list|(
name|t
operator|.
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sliceStatuses
operator|.
name|set
argument_list|(
name|t
operator|.
name|sliceId
argument_list|,
operator|new
name|StatusOrException
argument_list|(
name|t
operator|.
name|failure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Record a response from a slice and respond to the listener if the request is finished.      */
DECL|method|onSliceResponse
specifier|public
name|void
name|onSliceResponse
parameter_list|(
name|ActionListener
argument_list|<
name|BulkByScrollResponse
argument_list|>
name|listener
parameter_list|,
name|int
name|sliceId
parameter_list|,
name|BulkByScrollResponse
name|response
parameter_list|)
block|{
name|results
operator|.
name|setOnce
argument_list|(
name|sliceId
argument_list|,
operator|new
name|Result
argument_list|(
name|sliceId
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
comment|/* If the request isn't finished we could automatically rethrottle the sub-requests here but we would only want to do that if we          * were fairly sure they had a while left to go. */
name|recordSliceCompletionAndRespondIfAllDone
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Record a failure from a slice and respond to the listener if the request is finished.      */
DECL|method|onSliceFailure
name|void
name|onSliceFailure
parameter_list|(
name|ActionListener
argument_list|<
name|BulkByScrollResponse
argument_list|>
name|listener
parameter_list|,
name|int
name|sliceId
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|results
operator|.
name|setOnce
argument_list|(
name|sliceId
argument_list|,
operator|new
name|Result
argument_list|(
name|sliceId
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|recordSliceCompletionAndRespondIfAllDone
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|// TODO cancel when a slice fails?
block|}
DECL|method|recordSliceCompletionAndRespondIfAllDone
specifier|private
name|void
name|recordSliceCompletionAndRespondIfAllDone
parameter_list|(
name|ActionListener
argument_list|<
name|BulkByScrollResponse
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|BulkByScrollResponse
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|results
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|t
range|:
name|results
operator|.
name|asList
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|response
operator|==
literal|null
condition|)
block|{
assert|assert
name|t
operator|.
name|failure
operator|!=
literal|null
operator|:
literal|"exception shouldn't be null if value is null"
assert|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|t
operator|.
name|failure
expr_stmt|;
block|}
else|else
block|{
name|exception
operator|.
name|addSuppressed
argument_list|(
name|t
operator|.
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|t
operator|.
name|failure
operator|==
literal|null
operator|:
literal|"exception should be null if response is not null"
assert|;
name|responses
operator|.
name|add
argument_list|(
name|t
operator|.
name|response
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|BulkByScrollResponse
argument_list|(
name|responses
argument_list|,
name|getReasonCancelled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Result
specifier|private
specifier|static
specifier|final
class|class
name|Result
block|{
DECL|field|response
specifier|final
name|BulkByScrollResponse
name|response
decl_stmt|;
DECL|field|sliceId
specifier|final
name|int
name|sliceId
decl_stmt|;
DECL|field|failure
specifier|final
name|Exception
name|failure
decl_stmt|;
DECL|method|Result
specifier|private
name|Result
parameter_list|(
name|int
name|sliceId
parameter_list|,
name|BulkByScrollResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|sliceId
operator|=
name|sliceId
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|failure
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|Result
specifier|private
name|Result
parameter_list|(
name|int
name|sliceId
parameter_list|,
name|Exception
name|failure
parameter_list|)
block|{
name|this
operator|.
name|sliceId
operator|=
name|sliceId
expr_stmt|;
name|this
operator|.
name|failure
operator|=
name|failure
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

