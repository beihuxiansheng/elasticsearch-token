begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicatedWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportWriteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/** use transport bulk action directly */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|TransportSingleItemBulkWriteAction
specifier|public
specifier|abstract
class|class
name|TransportSingleItemBulkWriteAction
parameter_list|<
name|Request
extends|extends
name|ReplicatedWriteRequest
parameter_list|<
name|Request
parameter_list|>
parameter_list|,
name|Response
extends|extends
name|ReplicationResponse
operator|&
name|WriteResponse
parameter_list|>
extends|extends
name|TransportWriteAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|Response
argument_list|>
block|{
DECL|field|bulkAction
specifier|private
specifier|final
name|TransportBulkAction
name|bulkAction
decl_stmt|;
DECL|field|shardBulkAction
specifier|private
specifier|final
name|TransportShardBulkAction
name|shardBulkAction
decl_stmt|;
DECL|method|TransportSingleItemBulkWriteAction
specifier|protected
name|TransportSingleItemBulkWriteAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|Supplier
argument_list|<
name|Request
argument_list|>
name|request
parameter_list|,
name|Supplier
argument_list|<
name|Request
argument_list|>
name|replicaRequest
parameter_list|,
name|String
name|executor
parameter_list|,
name|TransportBulkAction
name|bulkAction
parameter_list|,
name|TransportShardBulkAction
name|shardBulkAction
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|indicesService
argument_list|,
name|threadPool
argument_list|,
name|shardStateAction
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|request
argument_list|,
name|replicaRequest
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|bulkAction
operator|=
name|bulkAction
expr_stmt|;
name|this
operator|.
name|shardBulkAction
operator|=
name|shardBulkAction
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|Task
name|task
parameter_list|,
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
name|bulkAction
operator|.
name|execute
argument_list|(
name|task
argument_list|,
name|toSingleItemBulkRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|wrapBulkResponse
argument_list|(
name|listener
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnPrimary
specifier|protected
name|WritePrimaryResult
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|>
name|shardOperationOnPrimary
parameter_list|(
name|Request
name|request
parameter_list|,
specifier|final
name|IndexShard
name|primary
parameter_list|)
throws|throws
name|Exception
block|{
name|BulkItemRequest
index|[]
name|itemRequests
init|=
operator|new
name|BulkItemRequest
index|[
literal|1
index|]
decl_stmt|;
name|WriteRequest
operator|.
name|RefreshPolicy
name|refreshPolicy
init|=
name|request
operator|.
name|getRefreshPolicy
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRefreshPolicy
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|itemRequests
index|[
literal|0
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|DocWriteRequest
operator|)
name|request
operator|)
argument_list|)
expr_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|refreshPolicy
argument_list|,
name|itemRequests
argument_list|)
decl_stmt|;
name|WritePrimaryResult
argument_list|<
name|BulkShardRequest
argument_list|,
name|BulkShardResponse
argument_list|>
name|bulkResult
init|=
name|shardBulkAction
operator|.
name|shardOperationOnPrimary
argument_list|(
name|bulkShardRequest
argument_list|,
name|primary
argument_list|)
decl_stmt|;
assert|assert
name|bulkResult
operator|.
name|finalResponseIfSuccessful
operator|.
name|getResponses
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|:
literal|"expected only one bulk shard response"
assert|;
name|BulkItemResponse
name|itemResponse
init|=
name|bulkResult
operator|.
name|finalResponseIfSuccessful
operator|.
name|getResponses
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|Response
name|response
decl_stmt|;
specifier|final
name|Exception
name|failure
decl_stmt|;
if|if
condition|(
name|itemResponse
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|failure
operator|=
name|itemResponse
operator|.
name|getFailure
argument_list|()
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|response
operator|=
operator|(
name|Response
operator|)
name|itemResponse
operator|.
name|getResponse
argument_list|()
expr_stmt|;
name|failure
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|WritePrimaryResult
argument_list|<>
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|bulkResult
operator|.
name|location
argument_list|,
name|failure
argument_list|,
name|primary
argument_list|,
name|logger
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnReplica
specifier|protected
name|WriteReplicaResult
argument_list|<
name|Request
argument_list|>
name|shardOperationOnReplica
parameter_list|(
name|Request
name|replicaRequest
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|Exception
block|{
name|BulkItemRequest
index|[]
name|itemRequests
init|=
operator|new
name|BulkItemRequest
index|[
literal|1
index|]
decl_stmt|;
name|WriteRequest
operator|.
name|RefreshPolicy
name|refreshPolicy
init|=
name|replicaRequest
operator|.
name|getRefreshPolicy
argument_list|()
decl_stmt|;
name|itemRequests
index|[
literal|0
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|DocWriteRequest
operator|)
name|replicaRequest
operator|)
argument_list|)
expr_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|replicaRequest
operator|.
name|shardId
argument_list|()
argument_list|,
name|refreshPolicy
argument_list|,
name|itemRequests
argument_list|)
decl_stmt|;
name|WriteReplicaResult
argument_list|<
name|BulkShardRequest
argument_list|>
name|result
init|=
name|shardBulkAction
operator|.
name|shardOperationOnReplica
argument_list|(
name|bulkShardRequest
argument_list|,
name|replica
argument_list|)
decl_stmt|;
comment|// nocommit - is the null failure ok?
return|return
operator|new
name|WriteReplicaResult
argument_list|<>
argument_list|(
name|replicaRequest
argument_list|,
name|result
operator|.
name|location
argument_list|,
literal|null
argument_list|,
name|replica
argument_list|,
name|logger
argument_list|)
return|;
block|}
DECL|method|wrapBulkResponse
specifier|private
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|wrapBulkResponse
parameter_list|(
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
return|return
name|ActionListener
operator|.
name|wrap
argument_list|(
name|bulkItemResponses
lambda|->
block|{
assert|assert
name|bulkItemResponses
operator|.
name|getItems
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|:
literal|"expected only one item in bulk request"
assert|;
name|BulkItemResponse
name|bulkItemResponse
init|=
name|bulkItemResponses
operator|.
name|getItems
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|bulkItemResponse
operator|.
name|isFailed
argument_list|()
operator|==
literal|false
condition|)
block|{
specifier|final
name|DocWriteResponse
name|response
init|=
name|bulkItemResponse
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
operator|(
name|Response
operator|)
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|bulkItemResponse
operator|.
name|getFailure
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|listener
operator|::
name|onFailure
argument_list|)
return|;
block|}
DECL|method|toSingleItemBulkRequest
specifier|public
specifier|static
name|BulkRequest
name|toSingleItemBulkRequest
parameter_list|(
name|ReplicatedWriteRequest
name|request
parameter_list|)
block|{
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|(
operator|(
name|DocWriteRequest
operator|)
name|request
operator|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|setRefreshPolicy
argument_list|(
name|request
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|timeout
argument_list|(
name|request
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|waitForActiveShards
argument_list|(
name|request
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRefreshPolicy
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|NONE
argument_list|)
expr_stmt|;
return|return
name|bulkRequest
return|;
block|}
block|}
end_class

end_unit

