begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SparseFixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|RoutingMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|TransportCreateIndexAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|TransportDeleteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ingest
operator|.
name|IngestActionForwarder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|AutoCreateIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|HandledTransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|TransportUpdateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|LongSupplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Groups bulk request items by shard, optionally creating non-existent indices and  * delegates to {@link TransportShardBulkAction} for shard-level bulk execution  */
end_comment

begin_class
DECL|class|TransportBulkAction
specifier|public
class|class
name|TransportBulkAction
extends|extends
name|HandledTransportAction
argument_list|<
name|BulkRequest
argument_list|,
name|BulkResponse
argument_list|>
block|{
DECL|field|autoCreateIndex
specifier|private
specifier|final
name|AutoCreateIndex
name|autoCreateIndex
decl_stmt|;
DECL|field|allowIdGeneration
specifier|private
specifier|final
name|boolean
name|allowIdGeneration
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|ingestService
specifier|private
specifier|final
name|IngestService
name|ingestService
decl_stmt|;
DECL|field|shardBulkAction
specifier|private
specifier|final
name|TransportShardBulkAction
name|shardBulkAction
decl_stmt|;
DECL|field|createIndexAction
specifier|private
specifier|final
name|TransportCreateIndexAction
name|createIndexAction
decl_stmt|;
DECL|field|relativeTimeProvider
specifier|private
specifier|final
name|LongSupplier
name|relativeTimeProvider
decl_stmt|;
DECL|field|ingestForwarder
specifier|private
specifier|final
name|IngestActionForwarder
name|ingestForwarder
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportBulkAction
specifier|public
name|TransportBulkAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IngestService
name|ingestService
parameter_list|,
name|TransportShardBulkAction
name|shardBulkAction
parameter_list|,
name|TransportCreateIndexAction
name|createIndexAction
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|AutoCreateIndex
name|autoCreateIndex
parameter_list|)
block|{
name|this
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|ingestService
argument_list|,
name|shardBulkAction
argument_list|,
name|createIndexAction
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|autoCreateIndex
argument_list|,
name|System
operator|::
name|nanoTime
argument_list|)
expr_stmt|;
block|}
DECL|method|TransportBulkAction
specifier|public
name|TransportBulkAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IngestService
name|ingestService
parameter_list|,
name|TransportShardBulkAction
name|shardBulkAction
parameter_list|,
name|TransportCreateIndexAction
name|createIndexAction
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|AutoCreateIndex
name|autoCreateIndex
parameter_list|,
name|LongSupplier
name|relativeTimeProvider
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|BulkAction
operator|.
name|NAME
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|BulkRequest
operator|::
operator|new
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|relativeTimeProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|ingestService
operator|=
name|ingestService
expr_stmt|;
name|this
operator|.
name|shardBulkAction
operator|=
name|shardBulkAction
expr_stmt|;
name|this
operator|.
name|createIndexAction
operator|=
name|createIndexAction
expr_stmt|;
name|this
operator|.
name|autoCreateIndex
operator|=
name|autoCreateIndex
expr_stmt|;
name|this
operator|.
name|allowIdGeneration
operator|=
name|this
operator|.
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"action.bulk.action.allow_id_generation"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|relativeTimeProvider
operator|=
name|relativeTimeProvider
expr_stmt|;
name|this
operator|.
name|ingestForwarder
operator|=
operator|new
name|IngestActionForwarder
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|addStateApplier
argument_list|(
name|this
operator|.
name|ingestForwarder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
specifier|final
name|void
name|doExecute
parameter_list|(
specifier|final
name|BulkRequest
name|bulkRequest
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"task parameter is required for this operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|Task
name|task
parameter_list|,
name|BulkRequest
name|bulkRequest
parameter_list|,
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|bulkRequest
operator|.
name|hasIndexRequestsWithPipelines
argument_list|()
condition|)
block|{
if|if
condition|(
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|isIngestNode
argument_list|()
condition|)
block|{
name|processBulkIndexIngestRequest
argument_list|(
name|task
argument_list|,
name|bulkRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ingestForwarder
operator|.
name|forwardIngestRequest
argument_list|(
name|BulkAction
operator|.
name|INSTANCE
argument_list|,
name|bulkRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|final
name|long
name|startTime
init|=
name|relativeTime
argument_list|()
decl_stmt|;
specifier|final
name|AtomicArray
argument_list|<
name|BulkItemResponse
argument_list|>
name|responses
init|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|bulkRequest
operator|.
name|requests
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|needToCheck
argument_list|()
condition|)
block|{
comment|// Keep track of all unique indices and all unique types per index for the create index requests:
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|autoCreateIndices
init|=
name|bulkRequest
operator|.
name|requests
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DocWriteRequest
operator|::
name|index
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
name|autoCreateIndices
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|autoCreateIndices
control|)
block|{
if|if
condition|(
name|shouldAutoCreate
argument_list|(
name|index
argument_list|,
name|state
argument_list|)
condition|)
block|{
name|CreateIndexRequest
name|createIndexRequest
init|=
operator|new
name|CreateIndexRequest
argument_list|()
decl_stmt|;
name|createIndexRequest
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|createIndexRequest
operator|.
name|cause
argument_list|(
literal|"auto(bulk api)"
argument_list|)
expr_stmt|;
name|createIndexRequest
operator|.
name|masterNodeTimeout
argument_list|(
name|bulkRequest
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|createIndexAction
operator|.
name|execute
argument_list|(
name|createIndexRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|CreateIndexResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|CreateIndexResponse
name|result
parameter_list|)
block|{
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|executeBulk
argument_list|(
name|task
argument_list|,
name|bulkRequest
argument_list|,
name|startTime
argument_list|,
name|listener
argument_list|,
name|responses
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
operator|instanceof
name|ResourceAlreadyExistsException
operator|)
condition|)
block|{
comment|// fail all requests involving this index, if create didnt work
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bulkRequest
operator|.
name|requests
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DocWriteRequest
name|request
init|=
name|bulkRequest
operator|.
name|requests
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|setResponseFailureIfIndexMatches
argument_list|(
name|responses
argument_list|,
name|i
argument_list|,
name|request
argument_list|,
name|index
argument_list|,
name|e
argument_list|)
condition|)
block|{
name|bulkRequest
operator|.
name|requests
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|executeBulk
argument_list|(
name|task
argument_list|,
name|bulkRequest
argument_list|,
name|startTime
argument_list|,
name|ActionListener
operator|.
name|wrap
argument_list|(
name|listener
operator|::
name|onResponse
argument_list|,
name|inner
lambda|->
block|{
name|inner
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|inner
argument_list|)
expr_stmt|;
block|}
argument_list|)
argument_list|,
name|responses
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|executeBulk
argument_list|(
name|task
argument_list|,
name|bulkRequest
argument_list|,
name|startTime
argument_list|,
name|listener
argument_list|,
name|responses
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|executeBulk
argument_list|(
name|task
argument_list|,
name|bulkRequest
argument_list|,
name|startTime
argument_list|,
name|listener
argument_list|,
name|responses
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|needToCheck
name|boolean
name|needToCheck
parameter_list|()
block|{
return|return
name|autoCreateIndex
operator|.
name|needToCheck
argument_list|()
return|;
block|}
DECL|method|shouldAutoCreate
name|boolean
name|shouldAutoCreate
parameter_list|(
name|String
name|index
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
return|return
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
name|index
argument_list|,
name|state
argument_list|)
return|;
block|}
DECL|method|setResponseFailureIfIndexMatches
specifier|private
name|boolean
name|setResponseFailureIfIndexMatches
parameter_list|(
name|AtomicArray
argument_list|<
name|BulkItemResponse
argument_list|>
name|responses
parameter_list|,
name|int
name|idx
parameter_list|,
name|DocWriteRequest
name|request
parameter_list|,
name|String
name|index
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|index
operator|.
name|equals
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|responses
operator|.
name|set
argument_list|(
name|idx
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|idx
argument_list|,
name|request
operator|.
name|opType
argument_list|()
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|buildTookInMillis
specifier|private
name|long
name|buildTookInMillis
parameter_list|(
name|long
name|startTimeNanos
parameter_list|)
block|{
return|return
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|relativeTime
argument_list|()
operator|-
name|startTimeNanos
argument_list|)
return|;
block|}
comment|/**      * retries on retryable cluster blocks, resolves item requests,      * constructs shard bulk requests and delegates execution to shard bulk action      * */
DECL|class|BulkOperation
specifier|private
specifier|final
class|class
name|BulkOperation
extends|extends
name|AbstractRunnable
block|{
DECL|field|task
specifier|private
specifier|final
name|Task
name|task
decl_stmt|;
DECL|field|bulkRequest
specifier|private
specifier|final
name|BulkRequest
name|bulkRequest
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
decl_stmt|;
DECL|field|responses
specifier|private
specifier|final
name|AtomicArray
argument_list|<
name|BulkItemResponse
argument_list|>
name|responses
decl_stmt|;
DECL|field|startTimeNanos
specifier|private
specifier|final
name|long
name|startTimeNanos
decl_stmt|;
DECL|field|observer
specifier|private
specifier|final
name|ClusterStateObserver
name|observer
decl_stmt|;
DECL|method|BulkOperation
name|BulkOperation
parameter_list|(
name|Task
name|task
parameter_list|,
name|BulkRequest
name|bulkRequest
parameter_list|,
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
parameter_list|,
name|AtomicArray
argument_list|<
name|BulkItemResponse
argument_list|>
name|responses
parameter_list|,
name|long
name|startTimeNanos
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|bulkRequest
operator|=
name|bulkRequest
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|responses
operator|=
name|responses
expr_stmt|;
name|this
operator|.
name|startTimeNanos
operator|=
name|startTimeNanos
expr_stmt|;
name|this
operator|.
name|observer
operator|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
name|bulkRequest
operator|.
name|timeout
argument_list|()
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doRun
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ClusterState
name|clusterState
init|=
name|observer
operator|.
name|observedState
argument_list|()
decl_stmt|;
if|if
condition|(
name|handleBlockExceptions
argument_list|(
name|clusterState
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|ConcreteIndices
name|concreteIndices
init|=
operator|new
name|ConcreteIndices
argument_list|(
name|clusterState
argument_list|,
name|indexNameExpressionResolver
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bulkRequest
operator|.
name|requests
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DocWriteRequest
name|docWriteRequest
init|=
name|bulkRequest
operator|.
name|requests
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//the request can only be null because we set it to null in the previous step, so it gets ignored
if|if
condition|(
name|docWriteRequest
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|addFailureIfIndexIsUnavailable
argument_list|(
name|docWriteRequest
argument_list|,
name|bulkRequest
argument_list|,
name|responses
argument_list|,
name|i
argument_list|,
name|concreteIndices
argument_list|,
name|metaData
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Index
name|concreteIndex
init|=
name|concreteIndices
operator|.
name|resolveIfAbsent
argument_list|(
name|docWriteRequest
argument_list|)
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|docWriteRequest
operator|.
name|opType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|INDEX
case|:
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|docWriteRequest
decl_stmt|;
name|MappingMetaData
name|mappingMd
init|=
literal|null
decl_stmt|;
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|metaData
operator|.
name|index
argument_list|(
name|concreteIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
condition|)
block|{
name|mappingMd
operator|=
name|indexMetaData
operator|.
name|mappingOrDefault
argument_list|(
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexRequest
operator|.
name|resolveRouting
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|process
argument_list|(
name|mappingMd
argument_list|,
name|allowIdGeneration
argument_list|,
name|concreteIndex
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
name|TransportUpdateAction
operator|.
name|resolveAndValidateRouting
argument_list|(
name|metaData
argument_list|,
name|concreteIndex
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|UpdateRequest
operator|)
name|docWriteRequest
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|docWriteRequest
operator|.
name|routing
argument_list|(
name|metaData
operator|.
name|resolveIndexRouting
argument_list|(
name|docWriteRequest
operator|.
name|parent
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|routing
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|index
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if routing is required, if so, throw error if routing wasn't specified
if|if
condition|(
name|docWriteRequest
operator|.
name|routing
argument_list|()
operator|==
literal|null
operator|&&
name|metaData
operator|.
name|routingRequired
argument_list|(
name|concreteIndex
operator|.
name|getName
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RoutingMissingException
argument_list|(
name|concreteIndex
operator|.
name|getName
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|id
argument_list|()
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"request type not supported: ["
operator|+
name|docWriteRequest
operator|.
name|opType
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
decl||
name|RoutingMissingException
name|e
parameter_list|)
block|{
name|BulkItemResponse
operator|.
name|Failure
name|failure
init|=
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|concreteIndex
operator|.
name|getName
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|BulkItemResponse
name|bulkItemResponse
init|=
operator|new
name|BulkItemResponse
argument_list|(
name|i
argument_list|,
name|docWriteRequest
operator|.
name|opType
argument_list|()
argument_list|,
name|failure
argument_list|)
decl_stmt|;
name|responses
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|bulkItemResponse
argument_list|)
expr_stmt|;
comment|// make sure the request gets never processed again
name|bulkRequest
operator|.
name|requests
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// first, go over all the requests and create a ShardId -> Operations mapping
name|Map
argument_list|<
name|ShardId
argument_list|,
name|List
argument_list|<
name|BulkItemRequest
argument_list|>
argument_list|>
name|requestsByShard
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bulkRequest
operator|.
name|requests
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DocWriteRequest
name|request
init|=
name|bulkRequest
operator|.
name|requests
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|concreteIndex
init|=
name|concreteIndices
operator|.
name|getConcreteIndex
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ShardId
name|shardId
init|=
name|clusterService
operator|.
name|operationRouting
argument_list|()
operator|.
name|indexShards
argument_list|(
name|clusterState
argument_list|,
name|concreteIndex
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|routing
argument_list|()
argument_list|)
operator|.
name|shardId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BulkItemRequest
argument_list|>
name|shardRequests
init|=
name|requestsByShard
operator|.
name|computeIfAbsent
argument_list|(
name|shardId
argument_list|,
name|shard
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|shardRequests
operator|.
name|add
argument_list|(
operator|new
name|BulkItemRequest
argument_list|(
name|i
argument_list|,
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requestsByShard
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|BulkResponse
argument_list|(
name|responses
operator|.
name|toArray
argument_list|(
operator|new
name|BulkItemResponse
index|[
name|responses
operator|.
name|length
argument_list|()
index|]
argument_list|)
argument_list|,
name|buildTookInMillis
argument_list|(
name|startTimeNanos
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
name|requestsByShard
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nodeId
init|=
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|List
argument_list|<
name|BulkItemRequest
argument_list|>
argument_list|>
name|entry
range|:
name|requestsByShard
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|ShardId
name|shardId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|BulkItemRequest
argument_list|>
name|requests
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|shardId
argument_list|,
name|bulkRequest
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|,
name|requests
operator|.
name|toArray
argument_list|(
operator|new
name|BulkItemRequest
index|[
name|requests
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|bulkShardRequest
operator|.
name|waitForActiveShards
argument_list|(
name|bulkRequest
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
expr_stmt|;
name|bulkShardRequest
operator|.
name|timeout
argument_list|(
name|bulkRequest
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|bulkShardRequest
operator|.
name|setParentTask
argument_list|(
name|nodeId
argument_list|,
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|shardBulkAction
operator|.
name|execute
argument_list|(
name|bulkShardRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|BulkShardResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|BulkShardResponse
name|bulkShardResponse
parameter_list|)
block|{
for|for
control|(
name|BulkItemResponse
name|bulkItemResponse
range|:
name|bulkShardResponse
operator|.
name|getResponses
argument_list|()
control|)
block|{
comment|// we may have no response if item failed
if|if
condition|(
name|bulkItemResponse
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bulkItemResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|setShardInfo
argument_list|(
name|bulkShardResponse
operator|.
name|getShardInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|responses
operator|.
name|set
argument_list|(
name|bulkItemResponse
operator|.
name|getItemId
argument_list|()
argument_list|,
name|bulkItemResponse
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|finishHim
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// create failures for all relevant requests
for|for
control|(
name|BulkItemRequest
name|request
range|:
name|requests
control|)
block|{
specifier|final
name|String
name|indexName
init|=
name|concreteIndices
operator|.
name|getConcreteIndex
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|DocWriteRequest
name|docWriteRequest
init|=
name|request
operator|.
name|request
argument_list|()
decl_stmt|;
name|responses
operator|.
name|set
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|opType
argument_list|()
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|indexName
argument_list|,
name|docWriteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|finishHim
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|finishHim
parameter_list|()
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|BulkResponse
argument_list|(
name|responses
operator|.
name|toArray
argument_list|(
operator|new
name|BulkItemResponse
index|[
name|responses
operator|.
name|length
argument_list|()
index|]
argument_list|)
argument_list|,
name|buildTookInMillis
argument_list|(
name|startTimeNanos
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleBlockExceptions
specifier|private
name|boolean
name|handleBlockExceptions
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|ClusterBlockException
name|blockException
init|=
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|globalBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|WRITE
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockException
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|blockException
operator|.
name|retryable
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"cluster is blocked, scheduling a retry"
argument_list|,
name|blockException
argument_list|)
expr_stmt|;
name|retry
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onFailure
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|retry
name|void
name|retry
parameter_list|(
name|Exception
name|failure
parameter_list|)
block|{
assert|assert
name|failure
operator|!=
literal|null
assert|;
if|if
condition|(
name|observer
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
comment|// we running as a last attempt after a timeout has happened. don't retry
name|onFailure
argument_list|(
name|failure
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|ThreadContext
operator|.
name|StoredContext
name|context
init|=
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|newStoredContext
argument_list|()
decl_stmt|;
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{
name|onFailure
argument_list|(
operator|new
name|NodeClosedException
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try one more time...
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeBulk
name|void
name|executeBulk
parameter_list|(
name|Task
name|task
parameter_list|,
specifier|final
name|BulkRequest
name|bulkRequest
parameter_list|,
specifier|final
name|long
name|startTimeNanos
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
parameter_list|,
specifier|final
name|AtomicArray
argument_list|<
name|BulkItemResponse
argument_list|>
name|responses
parameter_list|)
block|{
operator|new
name|BulkOperation
argument_list|(
name|task
argument_list|,
name|bulkRequest
argument_list|,
name|listener
argument_list|,
name|responses
argument_list|,
name|startTimeNanos
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|method|addFailureIfIndexIsUnavailable
specifier|private
name|boolean
name|addFailureIfIndexIsUnavailable
parameter_list|(
name|DocWriteRequest
name|request
parameter_list|,
name|BulkRequest
name|bulkRequest
parameter_list|,
name|AtomicArray
argument_list|<
name|BulkItemResponse
argument_list|>
name|responses
parameter_list|,
name|int
name|idx
parameter_list|,
specifier|final
name|ConcreteIndices
name|concreteIndices
parameter_list|,
specifier|final
name|MetaData
name|metaData
parameter_list|)
block|{
name|Index
name|concreteIndex
init|=
name|concreteIndices
operator|.
name|getConcreteIndex
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
name|Exception
name|unavailableException
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|concreteIndex
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|concreteIndex
operator|=
name|concreteIndices
operator|.
name|resolveIfAbsent
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexClosedException
decl||
name|IndexNotFoundException
name|ex
parameter_list|)
block|{
comment|// Fix for issue where bulk request references an index that
comment|// cannot be auto-created see issue #8125
name|unavailableException
operator|=
name|ex
expr_stmt|;
block|}
block|}
if|if
condition|(
name|unavailableException
operator|==
literal|null
condition|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|metaData
operator|.
name|getIndexSafe
argument_list|(
name|concreteIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
name|unavailableException
operator|=
operator|new
name|IndexClosedException
argument_list|(
name|concreteIndex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|unavailableException
operator|!=
literal|null
condition|)
block|{
name|BulkItemResponse
operator|.
name|Failure
name|failure
init|=
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|unavailableException
argument_list|)
decl_stmt|;
name|BulkItemResponse
name|bulkItemResponse
init|=
operator|new
name|BulkItemResponse
argument_list|(
name|idx
argument_list|,
name|request
operator|.
name|opType
argument_list|()
argument_list|,
name|failure
argument_list|)
decl_stmt|;
name|responses
operator|.
name|set
argument_list|(
name|idx
argument_list|,
name|bulkItemResponse
argument_list|)
expr_stmt|;
comment|// make sure the request gets never processed again
name|bulkRequest
operator|.
name|requests
operator|.
name|set
argument_list|(
name|idx
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|class|ConcreteIndices
specifier|private
specifier|static
class|class
name|ConcreteIndices
block|{
DECL|field|state
specifier|private
specifier|final
name|ClusterState
name|state
decl_stmt|;
DECL|field|indexNameExpressionResolver
specifier|private
specifier|final
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
decl_stmt|;
DECL|field|indices
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Index
argument_list|>
name|indices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ConcreteIndices
name|ConcreteIndices
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|indexNameExpressionResolver
operator|=
name|indexNameExpressionResolver
expr_stmt|;
block|}
DECL|method|getConcreteIndex
name|Index
name|getConcreteIndex
parameter_list|(
name|String
name|indexOrAlias
parameter_list|)
block|{
return|return
name|indices
operator|.
name|get
argument_list|(
name|indexOrAlias
argument_list|)
return|;
block|}
DECL|method|resolveIfAbsent
name|Index
name|resolveIfAbsent
parameter_list|(
name|DocWriteRequest
name|request
parameter_list|)
block|{
name|Index
name|concreteIndex
init|=
name|indices
operator|.
name|get
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|concreteIndex
operator|==
literal|null
condition|)
block|{
name|concreteIndex
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteSingleIndex
argument_list|(
name|state
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|indices
operator|.
name|put
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|concreteIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|concreteIndex
return|;
block|}
block|}
DECL|method|relativeTime
specifier|private
name|long
name|relativeTime
parameter_list|()
block|{
return|return
name|relativeTimeProvider
operator|.
name|getAsLong
argument_list|()
return|;
block|}
DECL|method|processBulkIndexIngestRequest
name|void
name|processBulkIndexIngestRequest
parameter_list|(
name|Task
name|task
parameter_list|,
name|BulkRequest
name|original
parameter_list|,
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|long
name|ingestStartTimeInNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|BulkRequestModifier
name|bulkRequestModifier
init|=
operator|new
name|BulkRequestModifier
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|ingestService
operator|.
name|getPipelineExecutionService
argument_list|()
operator|.
name|executeBulkRequest
argument_list|(
parameter_list|()
lambda|->
name|bulkRequestModifier
argument_list|,
parameter_list|(
name|indexRequest
parameter_list|,
name|exception
parameter_list|)
lambda|->
block|{
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to execute pipeline [{}] for document [{}/{}/{}]"
argument_list|,
name|indexRequest
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|exception
argument_list|)
argument_list|;
name|bulkRequestModifier
operator|.
name|markCurrentItemAsFailed
argument_list|(
name|exception
argument_list|)
argument_list|;
block|}
operator|,
parameter_list|(
name|exception
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to execute pipeline for a bulk request"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|ingestTookInMillis
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|ingestStartTimeInNanos
argument_list|)
decl_stmt|;
name|BulkRequest
name|bulkRequest
init|=
name|bulkRequestModifier
operator|.
name|getBulkRequest
argument_list|()
decl_stmt|;
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|actionListener
init|=
name|bulkRequestModifier
operator|.
name|wrapActionListenerIfNeeded
argument_list|(
name|ingestTookInMillis
argument_list|,
name|listener
argument_list|)
decl_stmt|;
if|if
condition|(
name|bulkRequest
operator|.
name|requests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// at this stage, the transport bulk action can't deal with a bulk request with no requests,
comment|// so we stop and send an empty response back to the client.
comment|// (this will happen if pre-processing all items in the bulk failed)
name|actionListener
operator|.
name|onResponse
argument_list|(
operator|new
name|BulkResponse
argument_list|(
operator|new
name|BulkItemResponse
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doExecute
argument_list|(
name|task
argument_list|,
name|bulkRequest
argument_list|,
name|actionListener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|)
class|;
end_class

begin_class
unit|}      static
DECL|class|BulkRequestModifier
specifier|final
class|class
name|BulkRequestModifier
implements|implements
name|Iterator
argument_list|<
name|DocWriteRequest
argument_list|>
block|{
DECL|field|bulkRequest
specifier|final
name|BulkRequest
name|bulkRequest
decl_stmt|;
DECL|field|failedSlots
specifier|final
name|SparseFixedBitSet
name|failedSlots
decl_stmt|;
DECL|field|itemResponses
specifier|final
name|List
argument_list|<
name|BulkItemResponse
argument_list|>
name|itemResponses
decl_stmt|;
DECL|field|currentSlot
name|int
name|currentSlot
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|originalSlots
name|int
index|[]
name|originalSlots
decl_stmt|;
DECL|method|BulkRequestModifier
name|BulkRequestModifier
parameter_list|(
name|BulkRequest
name|bulkRequest
parameter_list|)
block|{
name|this
operator|.
name|bulkRequest
operator|=
name|bulkRequest
expr_stmt|;
name|this
operator|.
name|failedSlots
operator|=
operator|new
name|SparseFixedBitSet
argument_list|(
name|bulkRequest
operator|.
name|requests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|itemResponses
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bulkRequest
operator|.
name|requests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|DocWriteRequest
name|next
parameter_list|()
block|{
return|return
name|bulkRequest
operator|.
name|requests
argument_list|()
operator|.
name|get
argument_list|(
operator|++
name|currentSlot
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|currentSlot
operator|+
literal|1
operator|)
operator|<
name|bulkRequest
operator|.
name|requests
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getBulkRequest
name|BulkRequest
name|getBulkRequest
parameter_list|()
block|{
if|if
condition|(
name|itemResponses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|bulkRequest
return|;
block|}
else|else
block|{
name|BulkRequest
name|modifiedBulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|modifiedBulkRequest
operator|.
name|setRefreshPolicy
argument_list|(
name|bulkRequest
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|modifiedBulkRequest
operator|.
name|waitForActiveShards
argument_list|(
name|bulkRequest
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
expr_stmt|;
name|modifiedBulkRequest
operator|.
name|timeout
argument_list|(
name|bulkRequest
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|slot
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|DocWriteRequest
argument_list|>
name|requests
init|=
name|bulkRequest
operator|.
name|requests
argument_list|()
decl_stmt|;
name|originalSlots
operator|=
operator|new
name|int
index|[
name|requests
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
comment|// oversize, but that's ok
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requests
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DocWriteRequest
name|request
init|=
name|requests
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|failedSlots
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|false
condition|)
block|{
name|modifiedBulkRequest
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|originalSlots
index|[
name|slot
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|modifiedBulkRequest
return|;
block|}
block|}
DECL|method|wrapActionListenerIfNeeded
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|wrapActionListenerIfNeeded
parameter_list|(
name|long
name|ingestTookInMillis
parameter_list|,
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|actionListener
parameter_list|)
block|{
if|if
condition|(
name|itemResponses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ActionListener
operator|.
name|wrap
argument_list|(
name|response
lambda|->
name|actionListener
operator|.
name|onResponse
argument_list|(
operator|new
name|BulkResponse
argument_list|(
name|response
operator|.
name|getItems
argument_list|()
argument_list|,
name|response
operator|.
name|getTookInMillis
argument_list|()
argument_list|,
name|ingestTookInMillis
argument_list|)
argument_list|)
argument_list|,
name|actionListener
operator|::
name|onFailure
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|IngestBulkResponseListener
argument_list|(
name|ingestTookInMillis
argument_list|,
name|originalSlots
argument_list|,
name|itemResponses
argument_list|,
name|actionListener
argument_list|)
return|;
block|}
block|}
DECL|method|markCurrentItemAsFailed
name|void
name|markCurrentItemAsFailed
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|bulkRequest
operator|.
name|requests
argument_list|()
operator|.
name|get
argument_list|(
name|currentSlot
argument_list|)
decl_stmt|;
comment|// We hit a error during preprocessing a request, so we:
comment|// 1) Remember the request item slot from the bulk, so that we're done processing all requests we know what failed
comment|// 2) Add a bulk item failure for this request
comment|// 3) Continue with the next request in the bulk.
name|failedSlots
operator|.
name|set
argument_list|(
name|currentSlot
argument_list|)
expr_stmt|;
name|BulkItemResponse
operator|.
name|Failure
name|failure
init|=
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|itemResponses
operator|.
name|add
argument_list|(
operator|new
name|BulkItemResponse
argument_list|(
name|currentSlot
argument_list|,
name|indexRequest
operator|.
name|opType
argument_list|()
argument_list|,
name|failure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|IngestBulkResponseListener
specifier|static
specifier|final
class|class
name|IngestBulkResponseListener
implements|implements
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
block|{
DECL|field|ingestTookInMillis
specifier|private
specifier|final
name|long
name|ingestTookInMillis
decl_stmt|;
DECL|field|originalSlots
specifier|private
specifier|final
name|int
index|[]
name|originalSlots
decl_stmt|;
DECL|field|itemResponses
specifier|private
specifier|final
name|List
argument_list|<
name|BulkItemResponse
argument_list|>
name|itemResponses
decl_stmt|;
DECL|field|actionListener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|actionListener
decl_stmt|;
DECL|method|IngestBulkResponseListener
name|IngestBulkResponseListener
parameter_list|(
name|long
name|ingestTookInMillis
parameter_list|,
name|int
index|[]
name|originalSlots
parameter_list|,
name|List
argument_list|<
name|BulkItemResponse
argument_list|>
name|itemResponses
parameter_list|,
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|actionListener
parameter_list|)
block|{
name|this
operator|.
name|ingestTookInMillis
operator|=
name|ingestTookInMillis
expr_stmt|;
name|this
operator|.
name|itemResponses
operator|=
name|itemResponses
expr_stmt|;
name|this
operator|.
name|actionListener
operator|=
name|actionListener
expr_stmt|;
name|this
operator|.
name|originalSlots
operator|=
name|originalSlots
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|BulkResponse
name|response
parameter_list|)
block|{
name|BulkItemResponse
index|[]
name|items
init|=
name|response
operator|.
name|getItems
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|itemResponses
operator|.
name|add
argument_list|(
name|originalSlots
index|[
name|i
index|]
argument_list|,
name|response
operator|.
name|getItems
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|actionListener
operator|.
name|onResponse
argument_list|(
operator|new
name|BulkResponse
argument_list|(
name|itemResponses
operator|.
name|toArray
argument_list|(
operator|new
name|BulkItemResponse
index|[
name|itemResponses
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|response
operator|.
name|getTookInMillis
argument_list|()
argument_list|,
name|ingestTookInMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|actionListener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

