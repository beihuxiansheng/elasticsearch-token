begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|StatusToXContentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|ensureExpectedToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|throwUnknownField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|throwUnknownToken
import|;
end_import

begin_comment
comment|/**  * A response of a bulk execution. Holding a response for each item responding (in order) of the  * bulk requests. Each item holds the index/type/id is operated on, and if it failed or not (with the  * failure message).  */
end_comment

begin_class
DECL|class|BulkResponse
specifier|public
class|class
name|BulkResponse
extends|extends
name|ActionResponse
implements|implements
name|Iterable
argument_list|<
name|BulkItemResponse
argument_list|>
implements|,
name|StatusToXContentObject
block|{
DECL|field|ITEMS
specifier|private
specifier|static
specifier|final
name|String
name|ITEMS
init|=
literal|"items"
decl_stmt|;
DECL|field|ERRORS
specifier|private
specifier|static
specifier|final
name|String
name|ERRORS
init|=
literal|"errors"
decl_stmt|;
DECL|field|TOOK
specifier|private
specifier|static
specifier|final
name|String
name|TOOK
init|=
literal|"took"
decl_stmt|;
DECL|field|INGEST_TOOK
specifier|private
specifier|static
specifier|final
name|String
name|INGEST_TOOK
init|=
literal|"ingest_took"
decl_stmt|;
DECL|field|NO_INGEST_TOOK
specifier|public
specifier|static
specifier|final
name|long
name|NO_INGEST_TOOK
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|responses
specifier|private
name|BulkItemResponse
index|[]
name|responses
decl_stmt|;
DECL|field|tookInMillis
specifier|private
name|long
name|tookInMillis
decl_stmt|;
DECL|field|ingestTookInMillis
specifier|private
name|long
name|ingestTookInMillis
decl_stmt|;
DECL|method|BulkResponse
name|BulkResponse
parameter_list|()
block|{     }
DECL|method|BulkResponse
specifier|public
name|BulkResponse
parameter_list|(
name|BulkItemResponse
index|[]
name|responses
parameter_list|,
name|long
name|tookInMillis
parameter_list|)
block|{
name|this
argument_list|(
name|responses
argument_list|,
name|tookInMillis
argument_list|,
name|NO_INGEST_TOOK
argument_list|)
expr_stmt|;
block|}
DECL|method|BulkResponse
specifier|public
name|BulkResponse
parameter_list|(
name|BulkItemResponse
index|[]
name|responses
parameter_list|,
name|long
name|tookInMillis
parameter_list|,
name|long
name|ingestTookInMillis
parameter_list|)
block|{
name|this
operator|.
name|responses
operator|=
name|responses
expr_stmt|;
name|this
operator|.
name|tookInMillis
operator|=
name|tookInMillis
expr_stmt|;
name|this
operator|.
name|ingestTookInMillis
operator|=
name|ingestTookInMillis
expr_stmt|;
block|}
comment|/**      * How long the bulk execution took. Excluding ingest preprocessing.      */
DECL|method|getTook
specifier|public
name|TimeValue
name|getTook
parameter_list|()
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|tookInMillis
argument_list|)
return|;
block|}
comment|/**      * If ingest is enabled returns the bulk ingest preprocessing time, otherwise 0 is returned.      */
DECL|method|getIngestTook
specifier|public
name|TimeValue
name|getIngestTook
parameter_list|()
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|ingestTookInMillis
argument_list|)
return|;
block|}
comment|/**      * If ingest is enabled returns the bulk ingest preprocessing time. in milliseconds, otherwise -1 is returned.      */
DECL|method|getIngestTookInMillis
specifier|public
name|long
name|getIngestTookInMillis
parameter_list|()
block|{
return|return
name|ingestTookInMillis
return|;
block|}
comment|/**      * Has anything failed with the execution.      */
DECL|method|hasFailures
specifier|public
name|boolean
name|hasFailures
parameter_list|()
block|{
for|for
control|(
name|BulkItemResponse
name|response
range|:
name|responses
control|)
block|{
if|if
condition|(
name|response
operator|.
name|isFailed
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|buildFailureMessage
specifier|public
name|String
name|buildFailureMessage
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"failure in bulk execution:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|responses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BulkItemResponse
name|response
init|=
name|responses
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n["
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"]: index ["
argument_list|)
operator|.
name|append
argument_list|(
name|response
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"], type ["
argument_list|)
operator|.
name|append
argument_list|(
name|response
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"], id ["
argument_list|)
operator|.
name|append
argument_list|(
name|response
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"], message ["
argument_list|)
operator|.
name|append
argument_list|(
name|response
operator|.
name|getFailureMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * The items representing each action performed in the bulk operation (in the same order!).      */
DECL|method|getItems
specifier|public
name|BulkItemResponse
index|[]
name|getItems
parameter_list|()
block|{
return|return
name|responses
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|BulkItemResponse
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|responses
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|responses
operator|=
operator|new
name|BulkItemResponse
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|responses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|responses
index|[
name|i
index|]
operator|=
name|BulkItemResponse
operator|.
name|readBulkItem
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|tookInMillis
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|ingestTookInMillis
operator|=
name|in
operator|.
name|readZLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|responses
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|BulkItemResponse
name|response
range|:
name|responses
control|)
block|{
name|response
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVLong
argument_list|(
name|tookInMillis
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeZLong
argument_list|(
name|ingestTookInMillis
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
return|return
name|RestStatus
operator|.
name|OK
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|TOOK
argument_list|,
name|tookInMillis
argument_list|)
expr_stmt|;
if|if
condition|(
name|ingestTookInMillis
operator|!=
name|BulkResponse
operator|.
name|NO_INGEST_TOOK
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|INGEST_TOOK
argument_list|,
name|ingestTookInMillis
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|ERRORS
argument_list|,
name|hasFailures
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|ITEMS
argument_list|)
expr_stmt|;
for|for
control|(
name|BulkItemResponse
name|item
range|:
name|this
control|)
block|{
name|item
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|BulkResponse
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|token
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|long
name|took
init|=
operator|-
literal|1L
decl_stmt|;
name|long
name|ingestTook
init|=
name|NO_INGEST_TOOK
decl_stmt|;
name|List
argument_list|<
name|BulkItemResponse
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|currentFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|TOOK
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|took
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|INGEST_TOOK
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|ingestTook
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ERRORS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|==
literal|false
condition|)
block|{
name|throwUnknownField
argument_list|(
name|currentFieldName
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|ITEMS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|items
operator|.
name|add
argument_list|(
name|BulkItemResponse
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
name|items
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|throwUnknownField
argument_list|(
name|currentFieldName
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|throwUnknownToken
argument_list|(
name|token
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BulkResponse
argument_list|(
name|items
operator|.
name|toArray
argument_list|(
operator|new
name|BulkItemResponse
index|[
name|items
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|took
argument_list|,
name|ingestTook
argument_list|)
return|;
block|}
block|}
end_class

end_unit

