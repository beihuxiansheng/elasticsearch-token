begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
operator|.
name|ShardInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportWriteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|index
operator|.
name|MappingUpdatedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SourceToParse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
operator|.
name|SequenceNumbersService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|LongSupplier
import|;
end_import

begin_comment
comment|/** Performs shard-level bulk (index, delete or update) operations */
end_comment

begin_class
DECL|class|TransportShardBulkAction
specifier|public
class|class
name|TransportShardBulkAction
extends|extends
name|TransportWriteAction
argument_list|<
name|BulkShardRequest
argument_list|,
name|BulkShardRequest
argument_list|,
name|BulkShardResponse
argument_list|>
block|{
DECL|field|ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
name|BulkAction
operator|.
name|NAME
operator|+
literal|"[s]"
decl_stmt|;
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|TransportShardBulkAction
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|updateHelper
specifier|private
specifier|final
name|UpdateHelper
name|updateHelper
decl_stmt|;
DECL|field|mappingUpdatedAction
specifier|private
specifier|final
name|MappingUpdatedAction
name|mappingUpdatedAction
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportShardBulkAction
specifier|public
name|TransportShardBulkAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|MappingUpdatedAction
name|mappingUpdatedAction
parameter_list|,
name|UpdateHelper
name|updateHelper
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|ACTION_NAME
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|indicesService
argument_list|,
name|threadPool
argument_list|,
name|shardStateAction
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|BulkShardRequest
operator|::
operator|new
argument_list|,
name|BulkShardRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|BULK
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateHelper
operator|=
name|updateHelper
expr_stmt|;
name|this
operator|.
name|mappingUpdatedAction
operator|=
name|mappingUpdatedAction
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transportOptions
specifier|protected
name|TransportRequestOptions
name|transportOptions
parameter_list|()
block|{
return|return
name|BulkAction
operator|.
name|INSTANCE
operator|.
name|transportOptions
argument_list|(
name|settings
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newResponseInstance
specifier|protected
name|BulkShardResponse
name|newResponseInstance
parameter_list|()
block|{
return|return
operator|new
name|BulkShardResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|resolveIndex
specifier|protected
name|boolean
name|resolveIndex
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnPrimary
specifier|public
name|WritePrimaryResult
argument_list|<
name|BulkShardRequest
argument_list|,
name|BulkShardResponse
argument_list|>
name|shardOperationOnPrimary
parameter_list|(
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|primary
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|performOnPrimary
argument_list|(
name|request
argument_list|,
name|primary
argument_list|,
name|updateHelper
argument_list|,
name|threadPool
operator|::
name|absoluteTimeInMillis
argument_list|,
operator|new
name|ConcreteMappingUpdatePerformer
argument_list|()
argument_list|)
return|;
block|}
DECL|method|performOnPrimary
specifier|public
specifier|static
name|WritePrimaryResult
argument_list|<
name|BulkShardRequest
argument_list|,
name|BulkShardResponse
argument_list|>
name|performOnPrimary
parameter_list|(
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|primary
parameter_list|,
name|UpdateHelper
name|updateHelper
parameter_list|,
name|LongSupplier
name|nowInMillisSupplier
parameter_list|,
name|MappingUpdatePerformer
name|mappingUpdater
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|IndexMetaData
name|metaData
init|=
name|primary
operator|.
name|indexSettings
argument_list|()
operator|.
name|getIndexMetaData
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|Location
name|location
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|requestIndex
init|=
literal|0
init|;
name|requestIndex
operator|<
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
condition|;
name|requestIndex
operator|++
control|)
block|{
name|location
operator|=
name|executeBulkItemRequest
argument_list|(
name|metaData
argument_list|,
name|primary
argument_list|,
name|request
argument_list|,
name|location
argument_list|,
name|requestIndex
argument_list|,
name|updateHelper
argument_list|,
name|nowInMillisSupplier
argument_list|,
name|mappingUpdater
argument_list|)
expr_stmt|;
block|}
name|BulkItemResponse
index|[]
name|responses
init|=
operator|new
name|BulkItemResponse
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|BulkItemRequest
index|[]
name|items
init|=
name|request
operator|.
name|items
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|responses
index|[
name|i
index|]
operator|=
name|items
index|[
name|i
index|]
operator|.
name|getPrimaryResponse
argument_list|()
expr_stmt|;
block|}
name|BulkShardResponse
name|response
init|=
operator|new
name|BulkShardResponse
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|responses
argument_list|)
decl_stmt|;
return|return
operator|new
name|WritePrimaryResult
argument_list|<>
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|location
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|logger
argument_list|)
return|;
block|}
DECL|method|executeIndexRequest
specifier|private
specifier|static
name|BulkItemResultHolder
name|executeIndexRequest
parameter_list|(
specifier|final
name|IndexRequest
name|indexRequest
parameter_list|,
specifier|final
name|BulkItemRequest
name|bulkItemRequest
parameter_list|,
specifier|final
name|IndexShard
name|primary
parameter_list|,
specifier|final
name|MappingUpdatePerformer
name|mappingUpdater
parameter_list|)
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|executeIndexRequestOnPrimary
argument_list|(
name|indexRequest
argument_list|,
name|primary
argument_list|,
name|mappingUpdater
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
condition|)
block|{
return|return
operator|new
name|BulkItemResultHolder
argument_list|(
literal|null
argument_list|,
name|indexResult
argument_list|,
name|bulkItemRequest
argument_list|)
return|;
block|}
else|else
block|{
name|IndexResponse
name|response
init|=
operator|new
name|IndexResponse
argument_list|(
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|indexResult
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|primary
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|,
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|indexResult
operator|.
name|isCreated
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|BulkItemResultHolder
argument_list|(
name|response
argument_list|,
name|indexResult
argument_list|,
name|bulkItemRequest
argument_list|)
return|;
block|}
block|}
DECL|method|executeDeleteRequest
specifier|private
specifier|static
name|BulkItemResultHolder
name|executeDeleteRequest
parameter_list|(
specifier|final
name|DeleteRequest
name|deleteRequest
parameter_list|,
specifier|final
name|BulkItemRequest
name|bulkItemRequest
parameter_list|,
specifier|final
name|IndexShard
name|primary
parameter_list|,
specifier|final
name|MappingUpdatePerformer
name|mappingUpdater
parameter_list|)
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|DeleteResult
name|deleteResult
init|=
name|executeDeleteRequestOnPrimary
argument_list|(
name|deleteRequest
argument_list|,
name|primary
argument_list|,
name|mappingUpdater
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteResult
operator|.
name|hasFailure
argument_list|()
condition|)
block|{
return|return
operator|new
name|BulkItemResultHolder
argument_list|(
literal|null
argument_list|,
name|deleteResult
argument_list|,
name|bulkItemRequest
argument_list|)
return|;
block|}
else|else
block|{
name|DeleteResponse
name|response
init|=
operator|new
name|DeleteResponse
argument_list|(
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|deleteResult
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|primary
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|,
name|deleteResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|deleteResult
operator|.
name|isFound
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|BulkItemResultHolder
argument_list|(
name|response
argument_list|,
name|deleteResult
argument_list|,
name|bulkItemRequest
argument_list|)
return|;
block|}
block|}
DECL|method|calculateTranslogLocation
specifier|static
name|Translog
operator|.
name|Location
name|calculateTranslogLocation
parameter_list|(
specifier|final
name|Translog
operator|.
name|Location
name|originalLocation
parameter_list|,
specifier|final
name|BulkItemResultHolder
name|bulkItemResult
parameter_list|)
block|{
specifier|final
name|Engine
operator|.
name|Result
name|operationResult
init|=
name|bulkItemResult
operator|.
name|operationResult
decl_stmt|;
if|if
condition|(
name|operationResult
operator|!=
literal|null
operator|&&
name|operationResult
operator|.
name|hasFailure
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
name|locationToSync
argument_list|(
name|originalLocation
argument_list|,
name|operationResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|originalLocation
return|;
block|}
block|}
comment|// Visible for unit testing
comment|/**      * Creates a BulkItemResponse for the primary operation and returns it. If no bulk response is      * needed (because one already exists and the operation failed), then return null.      */
DECL|method|createPrimaryResponse
specifier|static
name|BulkItemResponse
name|createPrimaryResponse
parameter_list|(
name|BulkItemResultHolder
name|bulkItemResult
parameter_list|,
specifier|final
name|DocWriteRequest
operator|.
name|OpType
name|opType
parameter_list|,
name|BulkShardRequest
name|request
parameter_list|)
block|{
specifier|final
name|Engine
operator|.
name|Result
name|operationResult
init|=
name|bulkItemResult
operator|.
name|operationResult
decl_stmt|;
specifier|final
name|DocWriteResponse
name|response
init|=
name|bulkItemResult
operator|.
name|response
decl_stmt|;
specifier|final
name|BulkItemRequest
name|replicaRequest
init|=
name|bulkItemResult
operator|.
name|replicaRequest
decl_stmt|;
if|if
condition|(
name|operationResult
operator|==
literal|null
condition|)
block|{
comment|// in case of noop update operation
assert|assert
name|response
operator|.
name|getResult
argument_list|()
operator|==
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
operator|:
literal|"only noop updates can have a null operation"
assert|;
return|return
operator|new
name|BulkItemResponse
argument_list|(
name|replicaRequest
operator|.
name|id
argument_list|()
argument_list|,
name|opType
argument_list|,
name|response
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operationResult
operator|.
name|hasFailure
argument_list|()
operator|==
literal|false
condition|)
block|{
name|BulkItemResponse
name|primaryResponse
init|=
operator|new
name|BulkItemResponse
argument_list|(
name|replicaRequest
operator|.
name|id
argument_list|()
argument_list|,
name|opType
argument_list|,
name|response
argument_list|)
decl_stmt|;
comment|// set a blank ShardInfo so we can safely send it to the replicas. We won't use it in the real response though.
name|primaryResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|setShardInfo
argument_list|(
operator|new
name|ShardInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|primaryResponse
return|;
block|}
else|else
block|{
name|DocWriteRequest
name|docWriteRequest
init|=
name|replicaRequest
operator|.
name|request
argument_list|()
decl_stmt|;
name|Exception
name|failure
init|=
name|operationResult
operator|.
name|getFailure
argument_list|()
decl_stmt|;
if|if
condition|(
name|isConflictException
argument_list|(
name|failure
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"{} failed to execute bulk item ({}) {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|opType
argument_list|()
operator|.
name|getLowercase
argument_list|()
argument_list|,
name|request
argument_list|)
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"{} failed to execute bulk item ({}) {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|opType
argument_list|()
operator|.
name|getLowercase
argument_list|()
argument_list|,
name|request
argument_list|)
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
comment|// if it's a conflict failure, and we already executed the request on a primary (and we execute it
comment|// again, due to primary relocation and only processing up to N bulk items when the shard gets closed)
comment|// then just use the response we got from the failed execution
if|if
condition|(
name|replicaRequest
operator|.
name|getPrimaryResponse
argument_list|()
operator|==
literal|null
operator|||
name|isConflictException
argument_list|(
name|failure
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
operator|new
name|BulkItemResponse
argument_list|(
name|replicaRequest
operator|.
name|id
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|opType
argument_list|()
argument_list|,
comment|// Make sure to use request.index() here, if you
comment|// use docWriteRequest.index() it will use the
comment|// concrete index instead of an alias if used!
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|failure
argument_list|,
name|operationResult
operator|.
name|getSeqNo
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
assert|assert
name|replicaRequest
operator|.
name|getPrimaryResponse
argument_list|()
operator|!=
literal|null
operator|:
literal|"replica request must have a primary response"
assert|;
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/** Executes bulk item requests and handles request execution exceptions */
DECL|method|executeBulkItemRequest
specifier|static
name|Translog
operator|.
name|Location
name|executeBulkItemRequest
parameter_list|(
name|IndexMetaData
name|metaData
parameter_list|,
name|IndexShard
name|primary
parameter_list|,
name|BulkShardRequest
name|request
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|,
name|int
name|requestIndex
parameter_list|,
name|UpdateHelper
name|updateHelper
parameter_list|,
name|LongSupplier
name|nowInMillisSupplier
parameter_list|,
specifier|final
name|MappingUpdatePerformer
name|mappingUpdater
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|DocWriteRequest
name|itemRequest
init|=
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|.
name|request
argument_list|()
decl_stmt|;
specifier|final
name|DocWriteRequest
operator|.
name|OpType
name|opType
init|=
name|itemRequest
operator|.
name|opType
argument_list|()
decl_stmt|;
specifier|final
name|BulkItemResultHolder
name|responseHolder
decl_stmt|;
switch|switch
condition|(
name|itemRequest
operator|.
name|opType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|INDEX
case|:
name|responseHolder
operator|=
name|executeIndexRequest
argument_list|(
operator|(
name|IndexRequest
operator|)
name|itemRequest
argument_list|,
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
argument_list|,
name|primary
argument_list|,
name|mappingUpdater
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
name|responseHolder
operator|=
name|executeUpdateRequest
argument_list|(
operator|(
name|UpdateRequest
operator|)
name|itemRequest
argument_list|,
name|primary
argument_list|,
name|metaData
argument_list|,
name|request
argument_list|,
name|requestIndex
argument_list|,
name|updateHelper
argument_list|,
name|nowInMillisSupplier
argument_list|,
name|mappingUpdater
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|responseHolder
operator|=
name|executeDeleteRequest
argument_list|(
operator|(
name|DeleteRequest
operator|)
name|itemRequest
argument_list|,
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
argument_list|,
name|primary
argument_list|,
name|mappingUpdater
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected opType ["
operator|+
name|itemRequest
operator|.
name|opType
argument_list|()
operator|+
literal|"] found"
argument_list|)
throw|;
block|}
specifier|final
name|BulkItemRequest
name|replicaRequest
init|=
name|responseHolder
operator|.
name|replicaRequest
decl_stmt|;
comment|// update the bulk item request because update request execution can mutate the bulk item request
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|=
name|replicaRequest
expr_stmt|;
comment|// Retrieve the primary response, and update the replica request with the primary's response
name|BulkItemResponse
name|primaryResponse
init|=
name|createPrimaryResponse
argument_list|(
name|responseHolder
argument_list|,
name|opType
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryResponse
operator|!=
literal|null
condition|)
block|{
name|replicaRequest
operator|.
name|setPrimaryResponse
argument_list|(
name|primaryResponse
argument_list|)
expr_stmt|;
block|}
comment|// Update the translog with the new location, if needed
return|return
name|calculateTranslogLocation
argument_list|(
name|location
argument_list|,
name|responseHolder
argument_list|)
return|;
block|}
DECL|method|isConflictException
specifier|private
specifier|static
name|boolean
name|isConflictException
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
operator|instanceof
name|VersionConflictEngineException
return|;
block|}
comment|/**      * Executes update request, delegating to a index or delete operation after translation,      * handles retries on version conflict and constructs update response      * NOTE: reassigns bulk item request at<code>requestIndex</code> for replicas to      * execute translated update request (NOOP update is an exception). NOOP updates are      * indicated by returning a<code>null</code> operation in {@link BulkItemResultHolder}      * */
DECL|method|executeUpdateRequest
specifier|private
specifier|static
name|BulkItemResultHolder
name|executeUpdateRequest
parameter_list|(
name|UpdateRequest
name|updateRequest
parameter_list|,
name|IndexShard
name|primary
parameter_list|,
name|IndexMetaData
name|metaData
parameter_list|,
name|BulkShardRequest
name|request
parameter_list|,
name|int
name|requestIndex
parameter_list|,
name|UpdateHelper
name|updateHelper
parameter_list|,
name|LongSupplier
name|nowInMillis
parameter_list|,
specifier|final
name|MappingUpdatePerformer
name|mappingUpdater
parameter_list|)
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|Result
name|result
init|=
literal|null
decl_stmt|;
name|UpdateResponse
name|updateResponse
init|=
literal|null
decl_stmt|;
name|BulkItemRequest
name|replicaRequest
init|=
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
decl_stmt|;
name|int
name|maxAttempts
init|=
name|updateRequest
operator|.
name|retryOnConflict
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|attemptCount
init|=
literal|0
init|;
name|attemptCount
operator|<=
name|maxAttempts
condition|;
name|attemptCount
operator|++
control|)
block|{
specifier|final
name|UpdateHelper
operator|.
name|Result
name|translate
decl_stmt|;
comment|// translate update request
try|try
block|{
name|translate
operator|=
name|updateHelper
operator|.
name|prepare
argument_list|(
name|updateRequest
argument_list|,
name|primary
argument_list|,
name|nowInMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|failure
parameter_list|)
block|{
comment|// we may fail translating a update to index or delete operation
comment|// we use index result to communicate failure while translating update request
name|result
operator|=
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
name|failure
argument_list|,
name|updateRequest
operator|.
name|version
argument_list|()
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
expr_stmt|;
break|break;
comment|// out of retry loop
block|}
comment|// execute translated update request
switch|switch
condition|(
name|translate
operator|.
name|getResponseResult
argument_list|()
condition|)
block|{
case|case
name|CREATED
case|:
case|case
name|UPDATED
case|:
name|IndexRequest
name|indexRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
name|MappingMetaData
name|mappingMd
init|=
name|metaData
operator|.
name|mappingOrDefault
argument_list|(
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|process
argument_list|(
name|mappingMd
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|executeIndexRequestOnPrimary
argument_list|(
name|indexRequest
argument_list|,
name|primary
argument_list|,
name|mappingUpdater
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETED
case|:
name|DeleteRequest
name|deleteRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
name|result
operator|=
name|executeDeleteRequestOnPrimary
argument_list|(
name|deleteRequest
argument_list|,
name|primary
argument_list|,
name|mappingUpdater
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOOP
case|:
name|primary
operator|.
name|noopUpdate
argument_list|(
name|updateRequest
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal update operation "
operator|+
name|translate
operator|.
name|getResponseResult
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|// this is a noop operation
name|updateResponse
operator|=
name|translate
operator|.
name|action
argument_list|()
expr_stmt|;
break|break;
comment|// out of retry loop
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|hasFailure
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// enrich update response and
comment|// set translated update (index/delete) request for replica execution in bulk items
switch|switch
condition|(
name|result
operator|.
name|getOperationType
argument_list|()
condition|)
block|{
case|case
name|INDEX
case|:
assert|assert
name|result
operator|instanceof
name|Engine
operator|.
name|IndexResult
operator|:
name|result
operator|.
name|getClass
argument_list|()
assert|;
name|IndexRequest
name|updateIndexRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
specifier|final
name|IndexResponse
name|indexResponse
init|=
operator|new
name|IndexResponse
argument_list|(
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
name|updateIndexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|updateIndexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|result
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|primary
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|,
name|result
operator|.
name|getVersion
argument_list|()
argument_list|,
operator|(
operator|(
name|Engine
operator|.
name|IndexResult
operator|)
name|result
operator|)
operator|.
name|isCreated
argument_list|()
argument_list|)
decl_stmt|;
name|BytesReference
name|indexSourceAsBytes
init|=
name|updateIndexRequest
operator|.
name|source
argument_list|()
decl_stmt|;
name|updateResponse
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|indexResponse
operator|.
name|getShardInfo
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getShardId
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getType
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|updateRequest
operator|.
name|fetchSource
argument_list|()
operator|!=
literal|null
operator|&&
name|updateRequest
operator|.
name|fetchSource
argument_list|()
operator|.
name|fetchSource
argument_list|()
operator|)
operator|||
operator|(
name|updateRequest
operator|.
name|fields
argument_list|()
operator|!=
literal|null
operator|&&
name|updateRequest
operator|.
name|fields
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|sourceAndContent
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|indexSourceAsBytes
argument_list|,
literal|true
argument_list|,
name|updateIndexRequest
operator|.
name|getContentType
argument_list|()
argument_list|)
decl_stmt|;
name|updateResponse
operator|.
name|setGetResult
argument_list|(
name|updateHelper
operator|.
name|extractGetResult
argument_list|(
name|updateRequest
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|sourceAndContent
operator|.
name|v2
argument_list|()
argument_list|,
name|sourceAndContent
operator|.
name|v1
argument_list|()
argument_list|,
name|indexSourceAsBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set translated request as replica request
name|replicaRequest
operator|=
operator|new
name|BulkItemRequest
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|.
name|id
argument_list|()
argument_list|,
name|updateIndexRequest
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
assert|assert
name|result
operator|instanceof
name|Engine
operator|.
name|DeleteResult
operator|:
name|result
operator|.
name|getClass
argument_list|()
assert|;
name|DeleteRequest
name|updateDeleteRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
name|DeleteResponse
name|deleteResponse
init|=
operator|new
name|DeleteResponse
argument_list|(
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
name|updateDeleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|updateDeleteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|result
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|primary
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|,
name|result
operator|.
name|getVersion
argument_list|()
argument_list|,
operator|(
operator|(
name|Engine
operator|.
name|DeleteResult
operator|)
name|result
operator|)
operator|.
name|isFound
argument_list|()
argument_list|)
decl_stmt|;
name|updateResponse
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|deleteResponse
operator|.
name|getShardInfo
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getShardId
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getType
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|GetResult
name|getResult
init|=
name|updateHelper
operator|.
name|extractGetResult
argument_list|(
name|updateRequest
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|translate
operator|.
name|updatedSourceAsMap
argument_list|()
argument_list|,
name|translate
operator|.
name|updateSourceContentType
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|updateResponse
operator|.
name|setGetResult
argument_list|(
name|getResult
argument_list|)
expr_stmt|;
comment|// set translated request as replica request
name|replicaRequest
operator|=
operator|new
name|BulkItemRequest
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|.
name|id
argument_list|()
argument_list|,
name|updateDeleteRequest
argument_list|)
expr_stmt|;
break|break;
block|}
assert|assert
name|result
operator|.
name|getSeqNo
argument_list|()
operator|!=
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
assert|;
comment|// successful operation
break|break;
comment|// out of retry loop
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|getFailure
argument_list|()
operator|instanceof
name|VersionConflictEngineException
operator|==
literal|false
condition|)
block|{
comment|// not a version conflict exception
break|break;
comment|// out of retry loop
block|}
block|}
return|return
operator|new
name|BulkItemResultHolder
argument_list|(
name|updateResponse
argument_list|,
name|result
argument_list|,
name|replicaRequest
argument_list|)
return|;
block|}
comment|/** Modes for executing item request on replica depending on corresponding primary execution result */
DECL|enum|ReplicaItemExecutionMode
specifier|public
enum|enum
name|ReplicaItemExecutionMode
block|{
comment|/**          * When primary execution succeeded          */
DECL|enum constant|NORMAL
name|NORMAL
block|,
comment|/**          * When primary execution failed before sequence no was generated          * or primary execution was a noop (only possible when request is originating from pre-6.0 nodes)          */
DECL|enum constant|NOOP
name|NOOP
block|,
comment|/**          * When primary execution failed after sequence no was generated          */
DECL|enum constant|FAILURE
name|FAILURE
block|}
comment|/**      * Determines whether a bulk item request should be executed on the replica.      * @return {@link ReplicaItemExecutionMode#NORMAL} upon normal primary execution with no failures      * {@link ReplicaItemExecutionMode#FAILURE} upon primary execution failure after sequence no generation      * {@link ReplicaItemExecutionMode#NOOP} upon primary execution failure before sequence no generation or      * when primary execution resulted in noop (only possible for write requests from pre-6.0 nodes)      */
DECL|method|replicaItemExecutionMode
specifier|static
name|ReplicaItemExecutionMode
name|replicaItemExecutionMode
parameter_list|(
specifier|final
name|BulkItemRequest
name|request
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
specifier|final
name|BulkItemResponse
name|primaryResponse
init|=
name|request
operator|.
name|getPrimaryResponse
argument_list|()
decl_stmt|;
assert|assert
name|primaryResponse
operator|!=
literal|null
operator|:
literal|"expected primary response to be set for item ["
operator|+
name|index
operator|+
literal|"] request ["
operator|+
name|request
operator|.
name|request
argument_list|()
operator|+
literal|"]"
assert|;
if|if
condition|(
name|primaryResponse
operator|.
name|isFailed
argument_list|()
condition|)
block|{
return|return
name|primaryResponse
operator|.
name|getFailure
argument_list|()
operator|.
name|getSeqNo
argument_list|()
operator|!=
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
condition|?
name|ReplicaItemExecutionMode
operator|.
name|FAILURE
comment|// we have a seq no generated with the failure, replicate as no-op
else|:
name|ReplicaItemExecutionMode
operator|.
name|NOOP
return|;
comment|// no seq no generated, ignore replication
block|}
else|else
block|{
comment|// TODO: once we know for sure that every operation that has been processed on the primary is assigned a seq#
comment|// (i.e., all nodes on the cluster are on v6.0.0 or higher) we can use the existence of a seq# to indicate whether
comment|// an operation should be processed or be treated as a noop. This means we could remove this method and the
comment|// ReplicaItemExecutionMode enum and have a simple boolean check for seq != UNASSIGNED_SEQ_NO which will work for
comment|// both failures and indexing operations.
return|return
name|primaryResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|getResult
argument_list|()
operator|!=
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
condition|?
name|ReplicaItemExecutionMode
operator|.
name|NORMAL
comment|// execution successful on primary
else|:
name|ReplicaItemExecutionMode
operator|.
name|NOOP
return|;
comment|// ignore replication
block|}
block|}
annotation|@
name|Override
DECL|method|shardOperationOnReplica
specifier|public
name|WriteReplicaResult
argument_list|<
name|BulkShardRequest
argument_list|>
name|shardOperationOnReplica
parameter_list|(
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Translog
operator|.
name|Location
name|location
init|=
name|performOnReplica
argument_list|(
name|request
argument_list|,
name|replica
argument_list|)
decl_stmt|;
return|return
operator|new
name|WriteReplicaResult
argument_list|<>
argument_list|(
name|request
argument_list|,
name|location
argument_list|,
literal|null
argument_list|,
name|replica
argument_list|,
name|logger
argument_list|)
return|;
block|}
DECL|method|performOnReplica
specifier|public
specifier|static
name|Translog
operator|.
name|Location
name|performOnReplica
parameter_list|(
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|Exception
block|{
name|Translog
operator|.
name|Location
name|location
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BulkItemRequest
name|item
init|=
name|request
operator|.
name|items
argument_list|()
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|Engine
operator|.
name|Result
name|operationResult
decl_stmt|;
name|DocWriteRequest
name|docWriteRequest
init|=
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|replicaItemExecutionMode
argument_list|(
name|item
argument_list|,
name|i
argument_list|)
condition|)
block|{
case|case
name|NORMAL
case|:
specifier|final
name|DocWriteResponse
name|primaryResponse
init|=
name|item
operator|.
name|getPrimaryResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|docWriteRequest
operator|.
name|opType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|INDEX
case|:
name|operationResult
operator|=
name|executeIndexRequestOnReplica
argument_list|(
name|primaryResponse
argument_list|,
operator|(
name|IndexRequest
operator|)
name|docWriteRequest
argument_list|,
name|replica
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|operationResult
operator|=
name|executeDeleteRequestOnReplica
argument_list|(
name|primaryResponse
argument_list|,
operator|(
name|DeleteRequest
operator|)
name|docWriteRequest
argument_list|,
name|replica
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected request operation type on replica: "
operator|+
name|docWriteRequest
operator|.
name|opType
argument_list|()
operator|.
name|getLowercase
argument_list|()
argument_list|)
throw|;
block|}
assert|assert
name|operationResult
operator|!=
literal|null
operator|:
literal|"operation result must never be null when primary response has no failure"
assert|;
name|location
operator|=
name|syncOperationResultOrThrow
argument_list|(
name|operationResult
argument_list|,
name|location
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOOP
case|:
break|break;
case|case
name|FAILURE
case|:
specifier|final
name|BulkItemResponse
operator|.
name|Failure
name|failure
init|=
name|item
operator|.
name|getPrimaryResponse
argument_list|()
operator|.
name|getFailure
argument_list|()
decl_stmt|;
assert|assert
name|failure
operator|.
name|getSeqNo
argument_list|()
operator|!=
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
operator|:
literal|"seq no must be assigned"
assert|;
name|operationResult
operator|=
name|executeFailureNoOpOnReplica
argument_list|(
name|failure
argument_list|,
name|replica
argument_list|)
expr_stmt|;
assert|assert
name|operationResult
operator|!=
literal|null
operator|:
literal|"operation result must never be null when primary response has no failure"
assert|;
name|location
operator|=
name|syncOperationResultOrThrow
argument_list|(
name|operationResult
argument_list|,
name|location
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"illegal replica item execution mode for: "
operator|+
name|item
operator|.
name|request
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// if its not an ignore replica failure, we need to make sure to bubble up the failure
comment|// so we will fail the shard
if|if
condition|(
operator|!
name|TransportActions
operator|.
name|isShardNotAvailableException
argument_list|(
name|e
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
return|return
name|location
return|;
block|}
comment|/** Syncs operation result to the translog or throws a shard not available failure */
DECL|method|syncOperationResultOrThrow
specifier|private
specifier|static
name|Translog
operator|.
name|Location
name|syncOperationResultOrThrow
parameter_list|(
specifier|final
name|Engine
operator|.
name|Result
name|operationResult
parameter_list|,
specifier|final
name|Translog
operator|.
name|Location
name|currentLocation
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Translog
operator|.
name|Location
name|location
decl_stmt|;
if|if
condition|(
name|operationResult
operator|.
name|hasFailure
argument_list|()
condition|)
block|{
comment|// check if any transient write operation failures should be bubbled up
name|Exception
name|failure
init|=
name|operationResult
operator|.
name|getFailure
argument_list|()
decl_stmt|;
assert|assert
name|failure
operator|instanceof
name|MapperParsingException
operator|:
literal|"expected mapper parsing failures. got "
operator|+
name|failure
assert|;
if|if
condition|(
operator|!
name|TransportActions
operator|.
name|isShardNotAvailableException
argument_list|(
name|failure
argument_list|)
condition|)
block|{
throw|throw
name|failure
throw|;
block|}
else|else
block|{
name|location
operator|=
name|currentLocation
expr_stmt|;
block|}
block|}
else|else
block|{
name|location
operator|=
name|locationToSync
argument_list|(
name|currentLocation
argument_list|,
name|operationResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|location
return|;
block|}
DECL|method|locationToSync
specifier|private
specifier|static
name|Translog
operator|.
name|Location
name|locationToSync
parameter_list|(
name|Translog
operator|.
name|Location
name|current
parameter_list|,
name|Translog
operator|.
name|Location
name|next
parameter_list|)
block|{
comment|/* here we are moving forward in the translog with each operation. Under the hood this might          * cross translog files which is ok since from the user perspective the translog is like a          * tape where only the highest location needs to be fsynced in order to sync all previous          * locations even though they are not in the same file. When the translog rolls over files          * the previous file is fsynced on after closing if needed.*/
assert|assert
name|next
operator|!=
literal|null
operator|:
literal|"next operation can't be null"
assert|;
assert|assert
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|compareTo
argument_list|(
name|next
argument_list|)
operator|<
literal|0
operator|:
literal|"translog locations are not increasing"
assert|;
return|return
name|next
return|;
block|}
comment|/**      * Execute the given {@link IndexRequest} on a replica shard, throwing a      * {@link RetryOnReplicaException} if the operation needs to be re-tried.      */
DECL|method|executeIndexRequestOnReplica
specifier|private
specifier|static
name|Engine
operator|.
name|IndexResult
name|executeIndexRequestOnReplica
parameter_list|(
name|DocWriteResponse
name|primaryResponse
parameter_list|,
name|IndexRequest
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Engine
operator|.
name|Index
name|operation
decl_stmt|;
try|try
block|{
name|operation
operator|=
name|prepareIndexOperationOnReplica
argument_list|(
name|primaryResponse
argument_list|,
name|request
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
return|return
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
name|e
argument_list|,
name|primaryResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|primaryResponse
operator|.
name|getSeqNo
argument_list|()
argument_list|)
return|;
block|}
name|Mapping
name|update
init|=
name|operation
operator|.
name|parsedDoc
argument_list|()
operator|.
name|dynamicMappingsUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ShardId
name|shardId
init|=
name|replica
operator|.
name|shardId
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|RetryOnReplicaException
argument_list|(
name|shardId
argument_list|,
literal|"Mappings are not available on the replica yet, triggered update: "
operator|+
name|update
argument_list|)
throw|;
block|}
return|return
name|replica
operator|.
name|index
argument_list|(
name|operation
argument_list|)
return|;
block|}
comment|/** Utility method to prepare an index operation on replica shards */
DECL|method|prepareIndexOperationOnReplica
specifier|static
name|Engine
operator|.
name|Index
name|prepareIndexOperationOnReplica
parameter_list|(
name|DocWriteResponse
name|primaryResponse
parameter_list|,
name|IndexRequest
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
block|{
specifier|final
name|ShardId
name|shardId
init|=
name|replica
operator|.
name|shardId
argument_list|()
decl_stmt|;
specifier|final
name|long
name|version
init|=
name|primaryResponse
operator|.
name|getVersion
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seqNo
init|=
name|primaryResponse
operator|.
name|getSeqNo
argument_list|()
decl_stmt|;
specifier|final
name|SourceToParse
name|sourceToParse
init|=
name|SourceToParse
operator|.
name|source
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|source
argument_list|()
argument_list|,
name|request
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|request
operator|.
name|routing
argument_list|()
argument_list|)
operator|.
name|parent
argument_list|(
name|request
operator|.
name|parent
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|VersionType
name|versionType
init|=
name|request
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
decl_stmt|;
assert|assert
name|versionType
operator|.
name|validateVersionForWrites
argument_list|(
name|version
argument_list|)
assert|;
return|return
name|replica
operator|.
name|prepareIndexOnReplica
argument_list|(
name|sourceToParse
argument_list|,
name|seqNo
argument_list|,
name|version
argument_list|,
name|versionType
argument_list|,
name|request
operator|.
name|getAutoGeneratedTimestamp
argument_list|()
argument_list|,
name|request
operator|.
name|isRetry
argument_list|()
argument_list|)
return|;
block|}
comment|/** Utility method to prepare an index operation on primary shards */
DECL|method|prepareIndexOperationOnPrimary
specifier|private
specifier|static
name|Engine
operator|.
name|Index
name|prepareIndexOperationOnPrimary
parameter_list|(
name|IndexRequest
name|request
parameter_list|,
name|IndexShard
name|primary
parameter_list|)
block|{
specifier|final
name|SourceToParse
name|sourceToParse
init|=
name|SourceToParse
operator|.
name|source
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|source
argument_list|()
argument_list|,
name|request
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|request
operator|.
name|routing
argument_list|()
argument_list|)
operator|.
name|parent
argument_list|(
name|request
operator|.
name|parent
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|primary
operator|.
name|prepareIndexOnPrimary
argument_list|(
name|sourceToParse
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|versionType
argument_list|()
argument_list|,
name|request
operator|.
name|getAutoGeneratedTimestamp
argument_list|()
argument_list|,
name|request
operator|.
name|isRetry
argument_list|()
argument_list|)
return|;
block|}
comment|/** Executes index operation on primary shard after updates mapping if dynamic mappings are found */
DECL|method|executeIndexRequestOnPrimary
specifier|static
name|Engine
operator|.
name|IndexResult
name|executeIndexRequestOnPrimary
parameter_list|(
name|IndexRequest
name|request
parameter_list|,
name|IndexShard
name|primary
parameter_list|,
name|MappingUpdatePerformer
name|mappingUpdater
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Update the mappings if parsing the documents includes new dynamic updates
specifier|final
name|Engine
operator|.
name|Index
name|preUpdateOperation
decl_stmt|;
specifier|final
name|Mapping
name|mappingUpdate
decl_stmt|;
specifier|final
name|boolean
name|mappingUpdateNeeded
decl_stmt|;
try|try
block|{
name|preUpdateOperation
operator|=
name|prepareIndexOperationOnPrimary
argument_list|(
name|request
argument_list|,
name|primary
argument_list|)
expr_stmt|;
name|mappingUpdate
operator|=
name|preUpdateOperation
operator|.
name|parsedDoc
argument_list|()
operator|.
name|dynamicMappingsUpdate
argument_list|()
expr_stmt|;
name|mappingUpdateNeeded
operator|=
name|mappingUpdate
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|mappingUpdateNeeded
condition|)
block|{
name|mappingUpdater
operator|.
name|updateMappings
argument_list|(
name|mappingUpdate
argument_list|,
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MapperParsingException
decl||
name|IllegalArgumentException
name|failure
parameter_list|)
block|{
return|return
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
name|failure
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|)
return|;
block|}
comment|// Verify that there are no more mappings that need to be applied. If there are failures, a
comment|// ReplicationOperation.RetryOnPrimaryException is thrown.
specifier|final
name|Engine
operator|.
name|Index
name|operation
decl_stmt|;
if|if
condition|(
name|mappingUpdateNeeded
condition|)
block|{
try|try
block|{
name|operation
operator|=
name|prepareIndexOperationOnPrimary
argument_list|(
name|request
argument_list|,
name|primary
argument_list|)
expr_stmt|;
name|mappingUpdater
operator|.
name|verifyMappings
argument_list|(
name|operation
operator|.
name|parsedDoc
argument_list|()
operator|.
name|dynamicMappingsUpdate
argument_list|()
argument_list|,
name|primary
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
decl||
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// there was an error in parsing the document that was not because
comment|// of pending mapping updates, so return a failure for the result
return|return
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
name|e
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// There was no mapping update, the operation is the same as the pre-update version.
name|operation
operator|=
name|preUpdateOperation
expr_stmt|;
block|}
return|return
name|primary
operator|.
name|index
argument_list|(
name|operation
argument_list|)
return|;
block|}
DECL|method|executeDeleteRequestOnPrimary
specifier|private
specifier|static
name|Engine
operator|.
name|DeleteResult
name|executeDeleteRequestOnPrimary
parameter_list|(
name|DeleteRequest
name|request
parameter_list|,
name|IndexShard
name|primary
parameter_list|,
specifier|final
name|MappingUpdatePerformer
name|mappingUpdater
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|mappingUpdateNeeded
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|primary
operator|.
name|indexSettings
argument_list|()
operator|.
name|isSingleType
argument_list|()
condition|)
block|{
comment|// When there is a single type, the unique identifier is only composed of the _id,
comment|// so there is no way to differenciate foo#1 from bar#1. This is especially an issue
comment|// if a user first deletes foo#1 and then indexes bar#1: since we do not encode the
comment|// _type in the uid it might look like we are reindexing the same document, which
comment|// would fail if bar#1 is indexed with a lower version than foo#1 was deleted with.
comment|// In order to work around this issue, we make deletions create types. This way, we
comment|// fail if index and delete operations do not use the same type.
try|try
block|{
name|Mapping
name|update
init|=
name|primary
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperWithAutoCreate
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|getMapping
argument_list|()
decl_stmt|;
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
name|mappingUpdateNeeded
operator|=
literal|true
expr_stmt|;
name|mappingUpdater
operator|.
name|updateMappings
argument_list|(
name|update
argument_list|,
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MapperParsingException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
operator|new
name|Engine
operator|.
name|DeleteResult
argument_list|(
name|e
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|mappingUpdateNeeded
condition|)
block|{
name|Mapping
name|update
init|=
name|primary
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperWithAutoCreate
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|getMapping
argument_list|()
decl_stmt|;
name|mappingUpdater
operator|.
name|verifyMappings
argument_list|(
name|update
argument_list|,
name|primary
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Engine
operator|.
name|Delete
name|delete
init|=
name|primary
operator|.
name|prepareDeleteOnPrimary
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|versionType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|primary
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
return|;
block|}
DECL|method|executeDeleteRequestOnReplica
specifier|private
specifier|static
name|Engine
operator|.
name|DeleteResult
name|executeDeleteRequestOnReplica
parameter_list|(
name|DocWriteResponse
name|primaryResponse
parameter_list|,
name|DeleteRequest
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|replica
operator|.
name|indexSettings
argument_list|()
operator|.
name|isSingleType
argument_list|()
condition|)
block|{
comment|// We need to wait for the replica to have the mappings
name|Mapping
name|update
decl_stmt|;
try|try
block|{
name|update
operator|=
name|replica
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperWithAutoCreate
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|getMapping
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
operator|new
name|Engine
operator|.
name|DeleteResult
argument_list|(
name|e
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|primaryResponse
operator|.
name|getSeqNo
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ShardId
name|shardId
init|=
name|replica
operator|.
name|shardId
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|RetryOnReplicaException
argument_list|(
name|shardId
argument_list|,
literal|"Mappings are not available on the replica yet, triggered update: "
operator|+
name|update
argument_list|)
throw|;
block|}
block|}
specifier|final
name|VersionType
name|versionType
init|=
name|request
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
decl_stmt|;
specifier|final
name|long
name|version
init|=
name|primaryResponse
operator|.
name|getVersion
argument_list|()
decl_stmt|;
assert|assert
name|versionType
operator|.
name|validateVersionForWrites
argument_list|(
name|version
argument_list|)
assert|;
specifier|final
name|Engine
operator|.
name|Delete
name|delete
init|=
name|replica
operator|.
name|prepareDeleteOnReplica
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|primaryResponse
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|request
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|version
argument_list|,
name|versionType
argument_list|)
decl_stmt|;
return|return
name|replica
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
return|;
block|}
DECL|method|executeFailureNoOpOnReplica
specifier|private
specifier|static
name|Engine
operator|.
name|NoOpResult
name|executeFailureNoOpOnReplica
parameter_list|(
name|BulkItemResponse
operator|.
name|Failure
name|primaryFailure
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Engine
operator|.
name|NoOp
name|noOp
init|=
name|replica
operator|.
name|prepareMarkingSeqNoAsNoOp
argument_list|(
name|primaryFailure
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|primaryFailure
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|replica
operator|.
name|markSeqNoAsNoOp
argument_list|(
name|noOp
argument_list|)
return|;
block|}
DECL|class|ConcreteMappingUpdatePerformer
class|class
name|ConcreteMappingUpdatePerformer
implements|implements
name|MappingUpdatePerformer
block|{
DECL|method|updateMappings
specifier|public
name|void
name|updateMappings
parameter_list|(
specifier|final
name|Mapping
name|update
parameter_list|,
specifier|final
name|ShardId
name|shardId
parameter_list|,
specifier|final
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
comment|// can throw timeout exception when updating mappings or ISE for attempting to
comment|// update default mappings which are bubbled up
name|mappingUpdatedAction
operator|.
name|updateMappingOnMaster
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|,
name|type
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyMappings
specifier|public
name|void
name|verifyMappings
parameter_list|(
name|Mapping
name|update
parameter_list|,
specifier|final
name|ShardId
name|shardId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationOperation
operator|.
name|RetryOnPrimaryException
argument_list|(
name|shardId
argument_list|,
literal|"Dynamic mappings are not available on the node that holds the primary yet"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

