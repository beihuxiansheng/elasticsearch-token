begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicatedWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
operator|.
name|ShardInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportWriteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|index
operator|.
name|MappingUpdatedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SourceToParse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
operator|.
name|SequenceNumbersService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationOperation
operator|.
name|ignoreReplicaException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationOperation
operator|.
name|isConflictException
import|;
end_import

begin_comment
comment|/** Performs shard-level bulk (index, delete or update) operations */
end_comment

begin_class
DECL|class|TransportShardBulkAction
specifier|public
class|class
name|TransportShardBulkAction
extends|extends
name|TransportWriteAction
argument_list|<
name|BulkShardRequest
argument_list|,
name|BulkShardRequest
argument_list|,
name|BulkShardResponse
argument_list|>
block|{
DECL|field|ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
name|BulkAction
operator|.
name|NAME
operator|+
literal|"[s]"
decl_stmt|;
DECL|field|updateHelper
specifier|private
specifier|final
name|UpdateHelper
name|updateHelper
decl_stmt|;
DECL|field|allowIdGeneration
specifier|private
specifier|final
name|boolean
name|allowIdGeneration
decl_stmt|;
DECL|field|mappingUpdatedAction
specifier|private
specifier|final
name|MappingUpdatedAction
name|mappingUpdatedAction
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportShardBulkAction
specifier|public
name|TransportShardBulkAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|MappingUpdatedAction
name|mappingUpdatedAction
parameter_list|,
name|UpdateHelper
name|updateHelper
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|ACTION_NAME
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|indicesService
argument_list|,
name|threadPool
argument_list|,
name|shardStateAction
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|BulkShardRequest
operator|::
operator|new
argument_list|,
name|BulkShardRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|BULK
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateHelper
operator|=
name|updateHelper
expr_stmt|;
name|this
operator|.
name|allowIdGeneration
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"action.allow_id_generation"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|mappingUpdatedAction
operator|=
name|mappingUpdatedAction
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transportOptions
specifier|protected
name|TransportRequestOptions
name|transportOptions
parameter_list|()
block|{
return|return
name|BulkAction
operator|.
name|INSTANCE
operator|.
name|transportOptions
argument_list|(
name|settings
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newResponseInstance
specifier|protected
name|BulkShardResponse
name|newResponseInstance
parameter_list|()
block|{
return|return
operator|new
name|BulkShardResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|resolveIndex
specifier|protected
name|boolean
name|resolveIndex
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnPrimary
specifier|protected
name|WritePrimaryResult
argument_list|<
name|BulkShardRequest
argument_list|,
name|BulkShardResponse
argument_list|>
name|shardOperationOnPrimary
parameter_list|(
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|primary
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|IndexMetaData
name|metaData
init|=
name|primary
operator|.
name|indexSettings
argument_list|()
operator|.
name|getIndexMetaData
argument_list|()
decl_stmt|;
name|long
index|[]
name|preVersions
init|=
operator|new
name|long
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|VersionType
index|[]
name|preVersionTypes
init|=
operator|new
name|VersionType
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|Translog
operator|.
name|Location
name|location
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|requestIndex
init|=
literal|0
init|;
name|requestIndex
operator|<
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
condition|;
name|requestIndex
operator|++
control|)
block|{
name|location
operator|=
name|executeBulkItemRequest
argument_list|(
name|metaData
argument_list|,
name|primary
argument_list|,
name|request
argument_list|,
name|preVersions
argument_list|,
name|preVersionTypes
argument_list|,
name|location
argument_list|,
name|requestIndex
argument_list|)
expr_stmt|;
block|}
name|BulkItemResponse
index|[]
name|responses
init|=
operator|new
name|BulkItemResponse
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|BulkItemRequest
index|[]
name|items
init|=
name|request
operator|.
name|items
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|responses
index|[
name|i
index|]
operator|=
name|items
index|[
name|i
index|]
operator|.
name|getPrimaryResponse
argument_list|()
expr_stmt|;
block|}
name|BulkShardResponse
name|response
init|=
operator|new
name|BulkShardResponse
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|responses
argument_list|)
decl_stmt|;
return|return
operator|new
name|WritePrimaryResult
argument_list|<>
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|location
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|logger
argument_list|)
return|;
block|}
comment|/** Executes bulk item requests and handles request execution exceptions */
DECL|method|executeBulkItemRequest
specifier|private
name|Translog
operator|.
name|Location
name|executeBulkItemRequest
parameter_list|(
name|IndexMetaData
name|metaData
parameter_list|,
name|IndexShard
name|primary
parameter_list|,
name|BulkShardRequest
name|request
parameter_list|,
name|long
index|[]
name|preVersions
parameter_list|,
name|VersionType
index|[]
name|preVersionTypes
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|,
name|int
name|requestIndex
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|DocWriteRequest
name|itemRequest
init|=
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|.
name|request
argument_list|()
decl_stmt|;
name|preVersions
index|[
name|requestIndex
index|]
operator|=
name|itemRequest
operator|.
name|version
argument_list|()
expr_stmt|;
name|preVersionTypes
index|[
name|requestIndex
index|]
operator|=
name|itemRequest
operator|.
name|versionType
argument_list|()
expr_stmt|;
name|DocWriteRequest
operator|.
name|OpType
name|opType
init|=
name|itemRequest
operator|.
name|opType
argument_list|()
decl_stmt|;
try|try
block|{
comment|// execute item request
specifier|final
name|Engine
operator|.
name|Result
name|operationResult
decl_stmt|;
specifier|final
name|DocWriteResponse
name|response
decl_stmt|;
specifier|final
name|BulkItemRequest
name|replicaRequest
decl_stmt|;
switch|switch
condition|(
name|itemRequest
operator|.
name|opType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|INDEX
case|:
specifier|final
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|itemRequest
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|executeIndexRequestOnPrimary
argument_list|(
name|indexRequest
argument_list|,
name|primary
argument_list|,
name|mappingUpdatedAction
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
condition|)
block|{
name|response
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// update the version on request so it will happen on the replicas
specifier|final
name|long
name|version
init|=
name|indexResult
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|indexRequest
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|versionType
argument_list|(
name|indexRequest
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|seqNo
argument_list|(
name|indexResult
operator|.
name|getSeqNo
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|indexRequest
operator|.
name|versionType
argument_list|()
operator|.
name|validateVersionForWrites
argument_list|(
name|indexRequest
operator|.
name|version
argument_list|()
argument_list|)
assert|;
name|response
operator|=
operator|new
name|IndexResponse
argument_list|(
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|indexResult
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|indexResult
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|operationResult
operator|=
name|indexResult
expr_stmt|;
name|replicaRequest
operator|=
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
name|UpdateResultHolder
name|updateResultHolder
init|=
name|executeUpdateRequest
argument_list|(
operator|(
operator|(
name|UpdateRequest
operator|)
name|itemRequest
operator|)
argument_list|,
name|primary
argument_list|,
name|metaData
argument_list|,
name|request
argument_list|,
name|requestIndex
argument_list|)
decl_stmt|;
name|operationResult
operator|=
name|updateResultHolder
operator|.
name|operationResult
expr_stmt|;
name|response
operator|=
name|updateResultHolder
operator|.
name|response
expr_stmt|;
name|replicaRequest
operator|=
name|updateResultHolder
operator|.
name|replicaRequest
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
specifier|final
name|DeleteRequest
name|deleteRequest
init|=
operator|(
name|DeleteRequest
operator|)
name|itemRequest
decl_stmt|;
name|Engine
operator|.
name|DeleteResult
name|deleteResult
init|=
name|executeDeleteRequestOnPrimary
argument_list|(
name|deleteRequest
argument_list|,
name|primary
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteResult
operator|.
name|hasFailure
argument_list|()
condition|)
block|{
name|response
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// update the request with the version so it will go to the replicas
name|deleteRequest
operator|.
name|versionType
argument_list|(
name|deleteRequest
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|)
expr_stmt|;
name|deleteRequest
operator|.
name|version
argument_list|(
name|deleteResult
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|deleteRequest
operator|.
name|seqNo
argument_list|(
name|deleteResult
operator|.
name|getSeqNo
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|deleteRequest
operator|.
name|versionType
argument_list|()
operator|.
name|validateVersionForWrites
argument_list|(
name|deleteRequest
operator|.
name|version
argument_list|()
argument_list|)
assert|;
name|response
operator|=
operator|new
name|DeleteResponse
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|deleteResult
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|deleteResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|deleteResult
operator|.
name|isFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|operationResult
operator|=
name|deleteResult
expr_stmt|;
name|replicaRequest
operator|=
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected opType ["
operator|+
name|itemRequest
operator|.
name|opType
argument_list|()
operator|+
literal|"] found"
argument_list|)
throw|;
block|}
comment|// update the bulk item request because update request execution can mutate the bulk item request
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|=
name|replicaRequest
expr_stmt|;
if|if
condition|(
name|operationResult
operator|==
literal|null
condition|)
block|{
comment|// in case of noop update operation
assert|assert
name|response
operator|.
name|getResult
argument_list|()
operator|==
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
operator|:
literal|"only noop update can have null operation"
assert|;
name|replicaRequest
operator|.
name|setIgnoreOnReplica
argument_list|()
expr_stmt|;
name|replicaRequest
operator|.
name|setPrimaryResponse
argument_list|(
operator|new
name|BulkItemResponse
argument_list|(
name|replicaRequest
operator|.
name|id
argument_list|()
argument_list|,
name|opType
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operationResult
operator|.
name|hasFailure
argument_list|()
operator|==
literal|false
condition|)
block|{
name|location
operator|=
name|locationToSync
argument_list|(
name|location
argument_list|,
name|operationResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
name|BulkItemResponse
name|primaryResponse
init|=
operator|new
name|BulkItemResponse
argument_list|(
name|replicaRequest
operator|.
name|id
argument_list|()
argument_list|,
name|opType
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|replicaRequest
operator|.
name|setPrimaryResponse
argument_list|(
name|primaryResponse
argument_list|)
expr_stmt|;
comment|// set the ShardInfo to 0 so we can safely send it to the replicas. We won't use it in the real response though.
name|primaryResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|setShardInfo
argument_list|(
operator|new
name|ShardInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DocWriteRequest
name|docWriteRequest
init|=
name|replicaRequest
operator|.
name|request
argument_list|()
decl_stmt|;
name|Exception
name|failure
init|=
name|operationResult
operator|.
name|getFailure
argument_list|()
decl_stmt|;
if|if
condition|(
name|isConflictException
argument_list|(
name|failure
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"{} failed to execute bulk item ({}) {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|opType
argument_list|()
operator|.
name|getLowercase
argument_list|()
argument_list|,
name|request
argument_list|)
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"{} failed to execute bulk item ({}) {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|opType
argument_list|()
operator|.
name|getLowercase
argument_list|()
argument_list|,
name|request
argument_list|)
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
comment|// if its a conflict failure, and we already executed the request on a primary (and we execute it
comment|// again, due to primary relocation and only processing up to N bulk items when the shard gets closed)
comment|// then just use the response we got from the successful execution
if|if
condition|(
name|replicaRequest
operator|.
name|getPrimaryResponse
argument_list|()
operator|==
literal|null
operator|||
name|isConflictException
argument_list|(
name|failure
argument_list|)
operator|==
literal|false
condition|)
block|{
name|replicaRequest
operator|.
name|setIgnoreOnReplica
argument_list|()
expr_stmt|;
name|replicaRequest
operator|.
name|setPrimaryResponse
argument_list|(
operator|new
name|BulkItemResponse
argument_list|(
name|replicaRequest
operator|.
name|id
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|opType
argument_list|()
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|docWriteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|failure
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|replicaRequest
operator|.
name|getPrimaryResponse
argument_list|()
operator|!=
literal|null
assert|;
assert|assert
name|preVersionTypes
index|[
name|requestIndex
index|]
operator|!=
literal|null
assert|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// rethrow the failure if we are going to retry on primary and let parent failure to handle it
if|if
condition|(
name|retryPrimaryException
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// restore updated versions...
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|requestIndex
condition|;
name|j
operator|++
control|)
block|{
name|DocWriteRequest
name|docWriteRequest
init|=
name|request
operator|.
name|items
argument_list|()
index|[
name|j
index|]
operator|.
name|request
argument_list|()
decl_stmt|;
name|docWriteRequest
operator|.
name|version
argument_list|(
name|preVersions
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|docWriteRequest
operator|.
name|versionType
argument_list|(
name|preVersionTypes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|e
throw|;
block|}
return|return
name|location
return|;
block|}
DECL|class|UpdateResultHolder
specifier|private
specifier|static
class|class
name|UpdateResultHolder
block|{
DECL|field|replicaRequest
specifier|final
name|BulkItemRequest
name|replicaRequest
decl_stmt|;
DECL|field|operationResult
specifier|final
name|Engine
operator|.
name|Result
name|operationResult
decl_stmt|;
DECL|field|response
specifier|final
name|DocWriteResponse
name|response
decl_stmt|;
DECL|method|UpdateResultHolder
specifier|private
name|UpdateResultHolder
parameter_list|(
name|BulkItemRequest
name|replicaRequest
parameter_list|,
name|Engine
operator|.
name|Result
name|operationResult
parameter_list|,
name|DocWriteResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|replicaRequest
operator|=
name|replicaRequest
expr_stmt|;
name|this
operator|.
name|operationResult
operator|=
name|operationResult
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
block|}
comment|/**      * Executes update request, delegating to a index or delete operation after translation,      * handles retries on version conflict and constructs update response      * NOTE: reassigns bulk item request at<code>requestIndex</code> for replicas to      * execute translated update request (NOOP update is an exception). NOOP updates are      * indicated by returning a<code>null</code> operation in {@link UpdateResultHolder}      * */
DECL|method|executeUpdateRequest
specifier|private
name|UpdateResultHolder
name|executeUpdateRequest
parameter_list|(
name|UpdateRequest
name|updateRequest
parameter_list|,
name|IndexShard
name|primary
parameter_list|,
name|IndexMetaData
name|metaData
parameter_list|,
name|BulkShardRequest
name|request
parameter_list|,
name|int
name|requestIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|Result
name|updateOperationResult
init|=
literal|null
decl_stmt|;
name|UpdateResponse
name|updateResponse
init|=
literal|null
decl_stmt|;
name|BulkItemRequest
name|replicaRequest
init|=
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
decl_stmt|;
name|int
name|maxAttempts
init|=
name|updateRequest
operator|.
name|retryOnConflict
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|attemptCount
init|=
literal|0
init|;
name|attemptCount
operator|<=
name|maxAttempts
condition|;
name|attemptCount
operator|++
control|)
block|{
specifier|final
name|UpdateHelper
operator|.
name|Result
name|translate
decl_stmt|;
comment|// translate update request
try|try
block|{
name|translate
operator|=
name|updateHelper
operator|.
name|prepare
argument_list|(
name|updateRequest
argument_list|,
name|primary
argument_list|,
name|threadPool
operator|::
name|estimatedTimeInMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|failure
parameter_list|)
block|{
comment|// we may fail translating a update to index or delete operation
comment|// we use index result to communicate failure while translating update request
name|updateOperationResult
operator|=
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
name|failure
argument_list|,
name|updateRequest
operator|.
name|version
argument_list|()
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
expr_stmt|;
break|break;
comment|// out of retry loop
block|}
comment|// execute translated update request
switch|switch
condition|(
name|translate
operator|.
name|getResponseResult
argument_list|()
condition|)
block|{
case|case
name|CREATED
case|:
case|case
name|UPDATED
case|:
name|IndexRequest
name|indexRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
name|MappingMetaData
name|mappingMd
init|=
name|metaData
operator|.
name|mappingOrDefault
argument_list|(
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|process
argument_list|(
name|mappingMd
argument_list|,
name|allowIdGeneration
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|updateOperationResult
operator|=
name|executeIndexRequestOnPrimary
argument_list|(
name|indexRequest
argument_list|,
name|primary
argument_list|,
name|mappingUpdatedAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateOperationResult
operator|.
name|hasFailure
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// update the version on request so it will happen on the replicas
specifier|final
name|long
name|version
init|=
name|updateOperationResult
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|indexRequest
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|versionType
argument_list|(
name|indexRequest
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|indexRequest
operator|.
name|versionType
argument_list|()
operator|.
name|validateVersionForWrites
argument_list|(
name|indexRequest
operator|.
name|version
argument_list|()
argument_list|)
assert|;
block|}
break|break;
case|case
name|DELETED
case|:
name|DeleteRequest
name|deleteRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
name|updateOperationResult
operator|=
name|executeDeleteRequestOnPrimary
argument_list|(
name|deleteRequest
argument_list|,
name|primary
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateOperationResult
operator|.
name|hasFailure
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// update the request with the version so it will go to the replicas
name|deleteRequest
operator|.
name|versionType
argument_list|(
name|deleteRequest
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|)
expr_stmt|;
name|deleteRequest
operator|.
name|version
argument_list|(
name|updateOperationResult
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|deleteRequest
operator|.
name|versionType
argument_list|()
operator|.
name|validateVersionForWrites
argument_list|(
name|deleteRequest
operator|.
name|version
argument_list|()
argument_list|)
assert|;
block|}
break|break;
case|case
name|NOOP
case|:
name|primary
operator|.
name|noopUpdate
argument_list|(
name|updateRequest
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal update operation "
operator|+
name|translate
operator|.
name|getResponseResult
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|updateOperationResult
operator|==
literal|null
condition|)
block|{
comment|// this is a noop operation
name|updateResponse
operator|=
name|translate
operator|.
name|action
argument_list|()
expr_stmt|;
break|break;
comment|// out of retry loop
block|}
elseif|else
if|if
condition|(
name|updateOperationResult
operator|.
name|hasFailure
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// enrich update response and
comment|// set translated update (index/delete) request for replica execution in bulk items
switch|switch
condition|(
name|updateOperationResult
operator|.
name|getOperationType
argument_list|()
condition|)
block|{
case|case
name|INDEX
case|:
name|IndexRequest
name|updateIndexRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
specifier|final
name|IndexResponse
name|indexResponse
init|=
operator|new
name|IndexResponse
argument_list|(
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
name|updateIndexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|updateIndexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|updateOperationResult
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|updateOperationResult
operator|.
name|getVersion
argument_list|()
argument_list|,
operator|(
operator|(
name|Engine
operator|.
name|IndexResult
operator|)
name|updateOperationResult
operator|)
operator|.
name|isCreated
argument_list|()
argument_list|)
decl_stmt|;
name|BytesReference
name|indexSourceAsBytes
init|=
name|updateIndexRequest
operator|.
name|source
argument_list|()
decl_stmt|;
name|updateResponse
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|indexResponse
operator|.
name|getShardInfo
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getShardId
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getType
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|updateRequest
operator|.
name|fetchSource
argument_list|()
operator|!=
literal|null
operator|&&
name|updateRequest
operator|.
name|fetchSource
argument_list|()
operator|.
name|fetchSource
argument_list|()
operator|)
operator|||
operator|(
name|updateRequest
operator|.
name|fields
argument_list|()
operator|!=
literal|null
operator|&&
name|updateRequest
operator|.
name|fields
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|sourceAndContent
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|indexSourceAsBytes
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|updateResponse
operator|.
name|setGetResult
argument_list|(
name|updateHelper
operator|.
name|extractGetResult
argument_list|(
name|updateRequest
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|sourceAndContent
operator|.
name|v2
argument_list|()
argument_list|,
name|sourceAndContent
operator|.
name|v1
argument_list|()
argument_list|,
name|indexSourceAsBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set translated request as replica request
name|replicaRequest
operator|=
operator|new
name|BulkItemRequest
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|.
name|id
argument_list|()
argument_list|,
name|updateIndexRequest
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|DeleteRequest
name|updateDeleteRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
name|DeleteResponse
name|deleteResponse
init|=
operator|new
name|DeleteResponse
argument_list|(
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
name|updateDeleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|updateDeleteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|updateOperationResult
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|updateOperationResult
operator|.
name|getVersion
argument_list|()
argument_list|,
operator|(
operator|(
name|Engine
operator|.
name|DeleteResult
operator|)
name|updateOperationResult
operator|)
operator|.
name|isFound
argument_list|()
argument_list|)
decl_stmt|;
name|updateResponse
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|deleteResponse
operator|.
name|getShardInfo
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getShardId
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getType
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|updateResponse
operator|.
name|setGetResult
argument_list|(
name|updateHelper
operator|.
name|extractGetResult
argument_list|(
name|updateRequest
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|translate
operator|.
name|updatedSourceAsMap
argument_list|()
argument_list|,
name|translate
operator|.
name|updateSourceContentType
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// set translated request as replica request
name|replicaRequest
operator|=
operator|new
name|BulkItemRequest
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|.
name|id
argument_list|()
argument_list|,
name|updateDeleteRequest
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// successful operation
break|break;
comment|// out of retry loop
block|}
elseif|else
if|if
condition|(
name|updateOperationResult
operator|.
name|getFailure
argument_list|()
operator|instanceof
name|VersionConflictEngineException
operator|==
literal|false
condition|)
block|{
comment|// not a version conflict exception
break|break;
comment|// out of retry loop
block|}
block|}
return|return
operator|new
name|UpdateResultHolder
argument_list|(
name|replicaRequest
argument_list|,
name|updateOperationResult
argument_list|,
name|updateResponse
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnReplica
specifier|protected
name|WriteReplicaResult
argument_list|<
name|BulkShardRequest
argument_list|>
name|shardOperationOnReplica
parameter_list|(
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|Exception
block|{
name|Translog
operator|.
name|Location
name|location
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BulkItemRequest
name|item
init|=
name|request
operator|.
name|items
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isIgnoreOnReplica
argument_list|()
operator|==
literal|false
condition|)
block|{
name|DocWriteRequest
name|docWriteRequest
init|=
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
specifier|final
name|Engine
operator|.
name|Result
name|operationResult
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|docWriteRequest
operator|.
name|opType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|INDEX
case|:
name|operationResult
operator|=
name|executeIndexRequestOnReplica
argument_list|(
operator|(
operator|(
name|IndexRequest
operator|)
name|docWriteRequest
operator|)
argument_list|,
name|replica
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|operationResult
operator|=
name|executeDeleteRequestOnReplica
argument_list|(
operator|(
operator|(
name|DeleteRequest
operator|)
name|docWriteRequest
operator|)
argument_list|,
name|replica
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected request operation type on replica: "
operator|+
name|docWriteRequest
operator|.
name|opType
argument_list|()
operator|.
name|getLowercase
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|operationResult
operator|.
name|hasFailure
argument_list|()
condition|)
block|{
comment|// check if any transient write operation failures should be bubbled up
name|Exception
name|failure
init|=
name|operationResult
operator|.
name|getFailure
argument_list|()
decl_stmt|;
assert|assert
name|failure
operator|instanceof
name|VersionConflictEngineException
operator|||
name|failure
operator|instanceof
name|MapperParsingException
operator|||
name|failure
operator|instanceof
name|EngineClosedException
operator|||
name|failure
operator|instanceof
name|IndexShardClosedException
operator|:
literal|"expected any one of [version conflict, mapper parsing, engine closed, index shard closed]"
operator|+
literal|" failures. got "
operator|+
name|failure
assert|;
if|if
condition|(
operator|!
name|ignoreReplicaException
argument_list|(
name|failure
argument_list|)
condition|)
block|{
throw|throw
name|failure
throw|;
block|}
block|}
else|else
block|{
name|location
operator|=
name|locationToSync
argument_list|(
name|location
argument_list|,
name|operationResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// if its not an ignore replica failure, we need to make sure to bubble up the failure
comment|// so we will fail the shard
if|if
condition|(
operator|!
name|ignoreReplicaException
argument_list|(
name|e
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
return|return
operator|new
name|WriteReplicaResult
argument_list|<>
argument_list|(
name|request
argument_list|,
name|location
argument_list|,
literal|null
argument_list|,
name|replica
argument_list|,
name|logger
argument_list|)
return|;
block|}
DECL|method|locationToSync
specifier|private
name|Translog
operator|.
name|Location
name|locationToSync
parameter_list|(
name|Translog
operator|.
name|Location
name|current
parameter_list|,
name|Translog
operator|.
name|Location
name|next
parameter_list|)
block|{
comment|/* here we are moving forward in the translog with each operation. Under the hood          * this might cross translog files which is ok since from the user perspective          * the translog is like a tape where only the highest location needs to be fsynced          * in order to sync all previous locations even though they are not in the same file.          * When the translog rolls over files the previous file is fsynced on after closing if needed.*/
assert|assert
name|next
operator|!=
literal|null
operator|:
literal|"next operation can't be null"
assert|;
assert|assert
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|compareTo
argument_list|(
name|next
argument_list|)
operator|<
literal|0
operator|:
literal|"translog locations are not increasing"
assert|;
return|return
name|next
return|;
block|}
specifier|public
parameter_list|<
name|Request
extends|extends
name|ReplicatedWriteRequest
argument_list|<
name|Request
argument_list|>
parameter_list|,
name|Response
extends|extends
name|ReplicationResponse
operator|&
name|WriteResponse
parameter_list|>
DECL|method|executeSingleItemBulkRequestOnPrimary
name|WritePrimaryResult
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|>
name|executeSingleItemBulkRequestOnPrimary
parameter_list|(
name|Request
name|request
parameter_list|,
name|IndexShard
name|primary
parameter_list|)
throws|throws
name|Exception
block|{
name|BulkItemRequest
index|[]
name|itemRequests
init|=
operator|new
name|BulkItemRequest
index|[
literal|1
index|]
decl_stmt|;
name|WriteRequest
operator|.
name|RefreshPolicy
name|refreshPolicy
init|=
name|request
operator|.
name|getRefreshPolicy
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRefreshPolicy
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|itemRequests
index|[
literal|0
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|DocWriteRequest
operator|)
name|request
operator|)
argument_list|)
expr_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|refreshPolicy
argument_list|,
name|itemRequests
argument_list|)
decl_stmt|;
name|WritePrimaryResult
argument_list|<
name|BulkShardRequest
argument_list|,
name|BulkShardResponse
argument_list|>
name|result
init|=
name|shardOperationOnPrimary
argument_list|(
name|bulkShardRequest
argument_list|,
name|primary
argument_list|)
decl_stmt|;
name|BulkShardResponse
name|bulkShardResponse
init|=
name|result
operator|.
name|finalResponseIfSuccessful
decl_stmt|;
assert|assert
name|bulkShardResponse
operator|.
name|getResponses
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|:
literal|"expected only one bulk shard response"
assert|;
name|BulkItemResponse
name|itemResponse
init|=
name|bulkShardResponse
operator|.
name|getResponses
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|Response
name|response
decl_stmt|;
specifier|final
name|Exception
name|failure
decl_stmt|;
if|if
condition|(
name|itemResponse
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|failure
operator|=
name|itemResponse
operator|.
name|getFailure
argument_list|()
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|response
operator|=
operator|(
name|Response
operator|)
name|itemResponse
operator|.
name|getResponse
argument_list|()
expr_stmt|;
name|failure
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|WritePrimaryResult
argument_list|<>
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|result
operator|.
name|location
argument_list|,
name|failure
argument_list|,
name|primary
argument_list|,
name|logger
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|ReplicaRequest
extends|extends
name|ReplicatedWriteRequest
argument_list|<
name|ReplicaRequest
argument_list|>
parameter_list|>
DECL|method|executeSingleItemBulkRequestOnReplica
name|WriteReplicaResult
argument_list|<
name|ReplicaRequest
argument_list|>
name|executeSingleItemBulkRequestOnReplica
parameter_list|(
name|ReplicaRequest
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|Exception
block|{
name|BulkItemRequest
index|[]
name|itemRequests
init|=
operator|new
name|BulkItemRequest
index|[
literal|1
index|]
decl_stmt|;
name|WriteRequest
operator|.
name|RefreshPolicy
name|refreshPolicy
init|=
name|request
operator|.
name|getRefreshPolicy
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRefreshPolicy
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|itemRequests
index|[
literal|0
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|DocWriteRequest
operator|)
name|request
operator|)
argument_list|)
expr_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|refreshPolicy
argument_list|,
name|itemRequests
argument_list|)
decl_stmt|;
name|WriteReplicaResult
argument_list|<
name|BulkShardRequest
argument_list|>
name|result
init|=
name|shardOperationOnReplica
argument_list|(
name|bulkShardRequest
argument_list|,
name|replica
argument_list|)
decl_stmt|;
return|return
operator|new
name|WriteReplicaResult
argument_list|<>
argument_list|(
name|request
argument_list|,
name|result
operator|.
name|location
argument_list|,
literal|null
argument_list|,
name|replica
argument_list|,
name|logger
argument_list|)
return|;
block|}
comment|/**      * Execute the given {@link IndexRequest} on a replica shard, throwing a      * {@link RetryOnReplicaException} if the operation needs to be re-tried.      */
DECL|method|executeIndexRequestOnReplica
specifier|public
specifier|static
name|Engine
operator|.
name|IndexResult
name|executeIndexRequestOnReplica
parameter_list|(
name|IndexRequest
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
block|{
specifier|final
name|ShardId
name|shardId
init|=
name|replica
operator|.
name|shardId
argument_list|()
decl_stmt|;
name|SourceToParse
name|sourceToParse
init|=
name|SourceToParse
operator|.
name|source
argument_list|(
name|SourceToParse
operator|.
name|Origin
operator|.
name|REPLICA
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|source
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|request
operator|.
name|routing
argument_list|()
argument_list|)
operator|.
name|parent
argument_list|(
name|request
operator|.
name|parent
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Engine
operator|.
name|Index
name|operation
decl_stmt|;
try|try
block|{
name|operation
operator|=
name|replica
operator|.
name|prepareIndexOnReplica
argument_list|(
name|sourceToParse
argument_list|,
name|request
operator|.
name|seqNo
argument_list|()
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|versionType
argument_list|()
argument_list|,
name|request
operator|.
name|getAutoGeneratedTimestamp
argument_list|()
argument_list|,
name|request
operator|.
name|isRetry
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
return|return
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
name|e
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|seqNo
argument_list|()
argument_list|)
return|;
block|}
name|Mapping
name|update
init|=
name|operation
operator|.
name|parsedDoc
argument_list|()
operator|.
name|dynamicMappingsUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RetryOnReplicaException
argument_list|(
name|shardId
argument_list|,
literal|"Mappings are not available on the replica yet, triggered update: "
operator|+
name|update
argument_list|)
throw|;
block|}
return|return
name|replica
operator|.
name|index
argument_list|(
name|operation
argument_list|)
return|;
block|}
comment|/** Utility method to prepare an index operation on primary shards */
DECL|method|prepareIndexOperationOnPrimary
specifier|static
name|Engine
operator|.
name|Index
name|prepareIndexOperationOnPrimary
parameter_list|(
name|IndexRequest
name|request
parameter_list|,
name|IndexShard
name|primary
parameter_list|)
block|{
name|SourceToParse
name|sourceToParse
init|=
name|SourceToParse
operator|.
name|source
argument_list|(
name|SourceToParse
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|source
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|request
operator|.
name|routing
argument_list|()
argument_list|)
operator|.
name|parent
argument_list|(
name|request
operator|.
name|parent
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|primary
operator|.
name|prepareIndexOnPrimary
argument_list|(
name|sourceToParse
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|versionType
argument_list|()
argument_list|,
name|request
operator|.
name|getAutoGeneratedTimestamp
argument_list|()
argument_list|,
name|request
operator|.
name|isRetry
argument_list|()
argument_list|)
return|;
block|}
comment|/** Executes index operation on primary shard after updates mapping if dynamic mappings are found */
DECL|method|executeIndexRequestOnPrimary
specifier|public
specifier|static
name|Engine
operator|.
name|IndexResult
name|executeIndexRequestOnPrimary
parameter_list|(
name|IndexRequest
name|request
parameter_list|,
name|IndexShard
name|primary
parameter_list|,
name|MappingUpdatedAction
name|mappingUpdatedAction
parameter_list|)
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|Index
name|operation
decl_stmt|;
try|try
block|{
name|operation
operator|=
name|prepareIndexOperationOnPrimary
argument_list|(
name|request
argument_list|,
name|primary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
name|e
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|seqNo
argument_list|()
argument_list|)
return|;
block|}
name|Mapping
name|update
init|=
name|operation
operator|.
name|parsedDoc
argument_list|()
operator|.
name|dynamicMappingsUpdate
argument_list|()
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
name|primary
operator|.
name|shardId
argument_list|()
decl_stmt|;
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
comment|// can throw timeout exception when updating mappings or ISE for attempting to update default mappings
comment|// which are bubbled up
try|try
block|{
name|mappingUpdatedAction
operator|.
name|updateMappingOnMaster
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// throws IAE on conflicts merging dynamic mappings
return|return
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
name|e
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|seqNo
argument_list|()
argument_list|)
return|;
block|}
try|try
block|{
name|operation
operator|=
name|prepareIndexOperationOnPrimary
argument_list|(
name|request
argument_list|,
name|primary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
name|e
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|seqNo
argument_list|()
argument_list|)
return|;
block|}
name|update
operator|=
name|operation
operator|.
name|parsedDoc
argument_list|()
operator|.
name|dynamicMappingsUpdate
argument_list|()
expr_stmt|;
if|if
condition|(
name|update
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationOperation
operator|.
name|RetryOnPrimaryException
argument_list|(
name|shardId
argument_list|,
literal|"Dynamic mappings are not available on the node that holds the primary yet"
argument_list|)
throw|;
block|}
block|}
return|return
name|primary
operator|.
name|index
argument_list|(
name|operation
argument_list|)
return|;
block|}
DECL|method|executeDeleteRequestOnPrimary
specifier|public
specifier|static
name|Engine
operator|.
name|DeleteResult
name|executeDeleteRequestOnPrimary
parameter_list|(
name|DeleteRequest
name|request
parameter_list|,
name|IndexShard
name|primary
parameter_list|)
block|{
specifier|final
name|Engine
operator|.
name|Delete
name|delete
init|=
name|primary
operator|.
name|prepareDeleteOnPrimary
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|versionType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|primary
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
return|;
block|}
DECL|method|executeDeleteRequestOnReplica
specifier|public
specifier|static
name|Engine
operator|.
name|DeleteResult
name|executeDeleteRequestOnReplica
parameter_list|(
name|DeleteRequest
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
block|{
specifier|final
name|Engine
operator|.
name|Delete
name|delete
init|=
name|replica
operator|.
name|prepareDeleteOnReplica
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|seqNo
argument_list|()
argument_list|,
name|request
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|versionType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|replica
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
return|;
block|}
block|}
end_class

end_unit

