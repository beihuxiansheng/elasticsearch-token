begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|TransportDeleteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|TransportIndexAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportWriteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
operator|.
name|ShardInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|index
operator|.
name|MappingUpdatedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationOperation
operator|.
name|ignoreReplicaException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationOperation
operator|.
name|isConflictException
import|;
end_import

begin_comment
comment|/**  * Performs the index operation.  */
end_comment

begin_class
DECL|class|TransportShardBulkAction
specifier|public
class|class
name|TransportShardBulkAction
extends|extends
name|TransportWriteAction
argument_list|<
name|BulkShardRequest
argument_list|,
name|BulkShardResponse
argument_list|>
block|{
DECL|field|OP_TYPE_UPDATE
specifier|private
specifier|static
specifier|final
name|String
name|OP_TYPE_UPDATE
init|=
literal|"update"
decl_stmt|;
DECL|field|OP_TYPE_DELETE
specifier|private
specifier|static
specifier|final
name|String
name|OP_TYPE_DELETE
init|=
literal|"delete"
decl_stmt|;
DECL|field|ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
name|BulkAction
operator|.
name|NAME
operator|+
literal|"[s]"
decl_stmt|;
DECL|field|updateHelper
specifier|private
specifier|final
name|UpdateHelper
name|updateHelper
decl_stmt|;
DECL|field|allowIdGeneration
specifier|private
specifier|final
name|boolean
name|allowIdGeneration
decl_stmt|;
DECL|field|mappingUpdatedAction
specifier|private
specifier|final
name|MappingUpdatedAction
name|mappingUpdatedAction
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportShardBulkAction
specifier|public
name|TransportShardBulkAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|MappingUpdatedAction
name|mappingUpdatedAction
parameter_list|,
name|UpdateHelper
name|updateHelper
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|ACTION_NAME
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|indicesService
argument_list|,
name|threadPool
argument_list|,
name|shardStateAction
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|BulkShardRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|BULK
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateHelper
operator|=
name|updateHelper
expr_stmt|;
name|this
operator|.
name|allowIdGeneration
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"action.allow_id_generation"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|mappingUpdatedAction
operator|=
name|mappingUpdatedAction
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transportOptions
specifier|protected
name|TransportRequestOptions
name|transportOptions
parameter_list|()
block|{
return|return
name|BulkAction
operator|.
name|INSTANCE
operator|.
name|transportOptions
argument_list|(
name|settings
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newResponseInstance
specifier|protected
name|BulkShardResponse
name|newResponseInstance
parameter_list|()
block|{
return|return
operator|new
name|BulkShardResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|resolveIndex
specifier|protected
name|boolean
name|resolveIndex
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|onPrimaryShard
specifier|protected
name|WriteResult
argument_list|<
name|BulkShardResponse
argument_list|>
name|onPrimaryShard
parameter_list|(
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|)
throws|throws
name|Exception
block|{
name|ShardId
name|shardId
init|=
name|request
operator|.
name|shardId
argument_list|()
decl_stmt|;
specifier|final
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexMetaData
name|metaData
init|=
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getIndexMetaData
argument_list|()
decl_stmt|;
name|long
index|[]
name|preVersions
init|=
operator|new
name|long
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|VersionType
index|[]
name|preVersionTypes
init|=
operator|new
name|VersionType
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|Translog
operator|.
name|Location
name|location
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|requestIndex
init|=
literal|0
init|;
name|requestIndex
operator|<
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
condition|;
name|requestIndex
operator|++
control|)
block|{
name|BulkItemRequest
name|item
init|=
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
decl_stmt|;
name|location
operator|=
name|handleItem
argument_list|(
name|metaData
argument_list|,
name|request
argument_list|,
name|indexShard
argument_list|,
name|preVersions
argument_list|,
name|preVersionTypes
argument_list|,
name|location
argument_list|,
name|requestIndex
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|BulkItemResponse
index|[]
name|responses
init|=
operator|new
name|BulkItemResponse
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|BulkItemRequest
index|[]
name|items
init|=
name|request
operator|.
name|items
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|responses
index|[
name|i
index|]
operator|=
name|items
index|[
name|i
index|]
operator|.
name|getPrimaryResponse
argument_list|()
expr_stmt|;
block|}
name|BulkShardResponse
name|response
init|=
operator|new
name|BulkShardResponse
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|responses
argument_list|)
decl_stmt|;
return|return
operator|new
name|WriteResult
argument_list|<>
argument_list|(
name|response
argument_list|,
name|location
argument_list|)
return|;
block|}
DECL|method|handleItem
specifier|private
name|Translog
operator|.
name|Location
name|handleItem
parameter_list|(
name|IndexMetaData
name|metaData
parameter_list|,
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|long
index|[]
name|preVersions
parameter_list|,
name|VersionType
index|[]
name|preVersionTypes
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|,
name|int
name|requestIndex
parameter_list|,
name|BulkItemRequest
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|IndexRequest
condition|)
block|{
name|location
operator|=
name|index
argument_list|(
name|metaData
argument_list|,
name|request
argument_list|,
name|indexShard
argument_list|,
name|preVersions
argument_list|,
name|preVersionTypes
argument_list|,
name|location
argument_list|,
name|requestIndex
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|DeleteRequest
condition|)
block|{
name|location
operator|=
name|delete
argument_list|(
name|request
argument_list|,
name|indexShard
argument_list|,
name|preVersions
argument_list|,
name|preVersionTypes
argument_list|,
name|location
argument_list|,
name|requestIndex
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|UpdateRequest
condition|)
block|{
name|Tuple
argument_list|<
name|Translog
operator|.
name|Location
argument_list|,
name|BulkItemRequest
argument_list|>
name|tuple
init|=
name|update
argument_list|(
name|metaData
argument_list|,
name|request
argument_list|,
name|indexShard
argument_list|,
name|preVersions
argument_list|,
name|preVersionTypes
argument_list|,
name|location
argument_list|,
name|requestIndex
argument_list|,
name|item
argument_list|)
decl_stmt|;
name|location
operator|=
name|tuple
operator|.
name|v1
argument_list|()
expr_stmt|;
name|item
operator|=
name|tuple
operator|.
name|v2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected index operation: "
operator|+
name|item
operator|.
name|request
argument_list|()
argument_list|)
throw|;
block|}
assert|assert
name|item
operator|.
name|getPrimaryResponse
argument_list|()
operator|!=
literal|null
assert|;
assert|assert
name|preVersionTypes
index|[
name|requestIndex
index|]
operator|!=
literal|null
assert|;
return|return
name|location
return|;
block|}
DECL|method|index
specifier|private
name|Translog
operator|.
name|Location
name|index
parameter_list|(
name|IndexMetaData
name|metaData
parameter_list|,
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|long
index|[]
name|preVersions
parameter_list|,
name|VersionType
index|[]
name|preVersionTypes
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|,
name|int
name|requestIndex
parameter_list|,
name|BulkItemRequest
name|item
parameter_list|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
name|preVersions
index|[
name|requestIndex
index|]
operator|=
name|indexRequest
operator|.
name|version
argument_list|()
expr_stmt|;
name|preVersionTypes
index|[
name|requestIndex
index|]
operator|=
name|indexRequest
operator|.
name|versionType
argument_list|()
expr_stmt|;
try|try
block|{
name|WriteResult
argument_list|<
name|IndexResponse
argument_list|>
name|result
init|=
name|shardIndexOperation
argument_list|(
name|request
argument_list|,
name|indexRequest
argument_list|,
name|metaData
argument_list|,
name|indexShard
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|location
operator|=
name|locationToSync
argument_list|(
name|location
argument_list|,
name|result
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
comment|// add the response
name|IndexResponse
name|indexResponse
init|=
name|result
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|setResponse
argument_list|(
name|item
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|opType
argument_list|()
operator|.
name|lowercase
argument_list|()
argument_list|,
name|indexResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// rethrow the failure if we are going to retry on primary and let parent failure to handle it
if|if
condition|(
name|retryPrimaryException
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// restore updated versions...
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|requestIndex
condition|;
name|j
operator|++
control|)
block|{
name|applyVersion
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|j
index|]
argument_list|,
name|preVersions
index|[
name|j
index|]
argument_list|,
name|preVersionTypes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|(
name|ElasticsearchException
operator|)
name|e
throw|;
block|}
name|logFailure
argument_list|(
name|e
argument_list|,
literal|"index"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|indexRequest
argument_list|)
expr_stmt|;
comment|// if its a conflict failure, and we already executed the request on a primary (and we execute it
comment|// again, due to primary relocation and only processing up to N bulk items when the shard gets closed)
comment|// then just use the response we got from the successful execution
if|if
condition|(
name|item
operator|.
name|getPrimaryResponse
argument_list|()
operator|!=
literal|null
operator|&&
name|isConflictException
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|setResponse
argument_list|(
name|item
argument_list|,
name|item
operator|.
name|getPrimaryResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setResponse
argument_list|(
name|item
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|opType
argument_list|()
operator|.
name|lowercase
argument_list|()
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|location
return|;
block|}
DECL|method|logFailure
specifier|private
parameter_list|<
name|ReplicationRequestT
extends|extends
name|ReplicationRequest
argument_list|<
name|ReplicationRequestT
argument_list|>
parameter_list|>
name|void
name|logFailure
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|String
name|operation
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|ReplicationRequest
argument_list|<
name|ReplicationRequestT
argument_list|>
name|request
parameter_list|)
block|{
if|if
condition|(
name|ExceptionsHelper
operator|.
name|status
argument_list|(
name|t
argument_list|)
operator|==
name|RestStatus
operator|.
name|CONFLICT
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} failed to execute bulk item ({}) {}"
argument_list|,
name|t
argument_list|,
name|shardId
argument_list|,
name|operation
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} failed to execute bulk item ({}) {}"
argument_list|,
name|t
argument_list|,
name|shardId
argument_list|,
name|operation
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|delete
specifier|private
name|Translog
operator|.
name|Location
name|delete
parameter_list|(
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|long
index|[]
name|preVersions
parameter_list|,
name|VersionType
index|[]
name|preVersionTypes
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|,
name|int
name|requestIndex
parameter_list|,
name|BulkItemRequest
name|item
parameter_list|)
block|{
name|DeleteRequest
name|deleteRequest
init|=
operator|(
name|DeleteRequest
operator|)
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
name|preVersions
index|[
name|requestIndex
index|]
operator|=
name|deleteRequest
operator|.
name|version
argument_list|()
expr_stmt|;
name|preVersionTypes
index|[
name|requestIndex
index|]
operator|=
name|deleteRequest
operator|.
name|versionType
argument_list|()
expr_stmt|;
try|try
block|{
comment|// add the response
specifier|final
name|WriteResult
argument_list|<
name|DeleteResponse
argument_list|>
name|writeResult
init|=
name|TransportDeleteAction
operator|.
name|executeDeleteRequestOnPrimary
argument_list|(
name|deleteRequest
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|DeleteResponse
name|deleteResponse
init|=
name|writeResult
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|location
operator|=
name|locationToSync
argument_list|(
name|location
argument_list|,
name|writeResult
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|setResponse
argument_list|(
name|item
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|OP_TYPE_DELETE
argument_list|,
name|deleteResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// rethrow the failure if we are going to retry on primary and let parent failure to handle it
if|if
condition|(
name|retryPrimaryException
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// restore updated versions...
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|requestIndex
condition|;
name|j
operator|++
control|)
block|{
name|applyVersion
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|j
index|]
argument_list|,
name|preVersions
index|[
name|j
index|]
argument_list|,
name|preVersionTypes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|(
name|ElasticsearchException
operator|)
name|e
throw|;
block|}
name|logFailure
argument_list|(
name|e
argument_list|,
literal|"delete"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|deleteRequest
argument_list|)
expr_stmt|;
comment|// if its a conflict failure, and we already executed the request on a primary (and we execute it
comment|// again, due to primary relocation and only processing up to N bulk items when the shard gets closed)
comment|// then just use the response we got from the successful execution
if|if
condition|(
name|item
operator|.
name|getPrimaryResponse
argument_list|()
operator|!=
literal|null
operator|&&
name|isConflictException
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|setResponse
argument_list|(
name|item
argument_list|,
name|item
operator|.
name|getPrimaryResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setResponse
argument_list|(
name|item
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|OP_TYPE_DELETE
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|location
return|;
block|}
DECL|method|update
specifier|private
name|Tuple
argument_list|<
name|Translog
operator|.
name|Location
argument_list|,
name|BulkItemRequest
argument_list|>
name|update
parameter_list|(
name|IndexMetaData
name|metaData
parameter_list|,
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|long
index|[]
name|preVersions
parameter_list|,
name|VersionType
index|[]
name|preVersionTypes
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|,
name|int
name|requestIndex
parameter_list|,
name|BulkItemRequest
name|item
parameter_list|)
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|(
name|UpdateRequest
operator|)
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
name|preVersions
index|[
name|requestIndex
index|]
operator|=
name|updateRequest
operator|.
name|version
argument_list|()
expr_stmt|;
name|preVersionTypes
index|[
name|requestIndex
index|]
operator|=
name|updateRequest
operator|.
name|versionType
argument_list|()
expr_stmt|;
comment|//  We need to do the requested retries plus the initial attempt. We don't do< 1+retry_on_conflict because retry_on_conflict may be Integer.MAX_VALUE
for|for
control|(
name|int
name|updateAttemptsCount
init|=
literal|0
init|;
name|updateAttemptsCount
operator|<=
name|updateRequest
operator|.
name|retryOnConflict
argument_list|()
condition|;
name|updateAttemptsCount
operator|++
control|)
block|{
name|UpdateResult
name|updateResult
decl_stmt|;
try|try
block|{
name|updateResult
operator|=
name|shardUpdateOperation
argument_list|(
name|metaData
argument_list|,
name|request
argument_list|,
name|updateRequest
argument_list|,
name|indexShard
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|updateResult
operator|=
operator|new
name|UpdateResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|t
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateResult
operator|.
name|success
argument_list|()
condition|)
block|{
if|if
condition|(
name|updateResult
operator|.
name|writeResult
operator|!=
literal|null
condition|)
block|{
name|location
operator|=
name|locationToSync
argument_list|(
name|location
argument_list|,
name|updateResult
operator|.
name|writeResult
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|updateResult
operator|.
name|result
operator|.
name|operation
argument_list|()
condition|)
block|{
case|case
name|UPSERT
case|:
case|case
name|INDEX
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|WriteResult
argument_list|<
name|IndexResponse
argument_list|>
name|result
init|=
name|updateResult
operator|.
name|writeResult
decl_stmt|;
name|IndexRequest
name|indexRequest
init|=
name|updateResult
operator|.
name|request
argument_list|()
decl_stmt|;
name|BytesReference
name|indexSourceAsBytes
init|=
name|indexRequest
operator|.
name|source
argument_list|()
decl_stmt|;
comment|// add the response
name|IndexResponse
name|indexResponse
init|=
name|result
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|UpdateResponse
name|updateResponse
init|=
operator|new
name|UpdateResponse
argument_list|(
name|indexResponse
operator|.
name|getShardInfo
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getShardId
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getType
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateRequest
operator|.
name|fields
argument_list|()
operator|!=
literal|null
operator|&&
name|updateRequest
operator|.
name|fields
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|sourceAndContent
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|indexSourceAsBytes
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|updateResponse
operator|.
name|setGetResult
argument_list|(
name|updateHelper
operator|.
name|extractGetResult
argument_list|(
name|updateRequest
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|sourceAndContent
operator|.
name|v2
argument_list|()
argument_list|,
name|sourceAndContent
operator|.
name|v1
argument_list|()
argument_list|,
name|indexSourceAsBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|item
operator|=
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|.
name|id
argument_list|()
argument_list|,
name|indexRequest
argument_list|)
expr_stmt|;
name|setResponse
argument_list|(
name|item
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|OP_TYPE_UPDATE
argument_list|,
name|updateResponse
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|WriteResult
argument_list|<
name|DeleteResponse
argument_list|>
name|writeResult
init|=
name|updateResult
operator|.
name|writeResult
decl_stmt|;
name|DeleteResponse
name|response
init|=
name|writeResult
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|DeleteRequest
name|deleteRequest
init|=
name|updateResult
operator|.
name|request
argument_list|()
decl_stmt|;
name|updateResponse
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|response
operator|.
name|getShardInfo
argument_list|()
argument_list|,
name|response
operator|.
name|getShardId
argument_list|()
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|,
name|response
operator|.
name|getId
argument_list|()
argument_list|,
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateResponse
operator|.
name|setGetResult
argument_list|(
name|updateHelper
operator|.
name|extractGetResult
argument_list|(
name|updateRequest
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
name|updateResult
operator|.
name|result
operator|.
name|updatedSourceAsMap
argument_list|()
argument_list|,
name|updateResult
operator|.
name|result
operator|.
name|updateSourceContentType
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replace the update request to the translated delete request to execute on the replica.
name|item
operator|=
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|.
name|id
argument_list|()
argument_list|,
name|deleteRequest
argument_list|)
expr_stmt|;
name|setResponse
argument_list|(
name|item
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|OP_TYPE_UPDATE
argument_list|,
name|updateResponse
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|NONE
case|:
name|setResponse
argument_list|(
name|item
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|OP_TYPE_UPDATE
argument_list|,
name|updateResult
operator|.
name|noopResult
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setIgnoreOnReplica
argument_list|()
expr_stmt|;
comment|// no need to go to the replica
break|break;
block|}
comment|// NOTE: Breaking out of the retry_on_conflict loop!
break|break;
block|}
elseif|else
if|if
condition|(
name|updateResult
operator|.
name|failure
argument_list|()
condition|)
block|{
name|Throwable
name|e
init|=
name|updateResult
operator|.
name|error
decl_stmt|;
if|if
condition|(
name|updateResult
operator|.
name|retry
condition|)
block|{
comment|// updateAttemptCount is 0 based and marks current attempt, if it's equal to retryOnConflict we are going out of the iteration
if|if
condition|(
name|updateAttemptsCount
operator|>=
name|updateRequest
operator|.
name|retryOnConflict
argument_list|()
condition|)
block|{
name|setResponse
argument_list|(
name|item
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|OP_TYPE_UPDATE
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|updateRequest
operator|.
name|type
argument_list|()
argument_list|,
name|updateRequest
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// rethrow the failure if we are going to retry on primary and let parent failure to handle it
if|if
condition|(
name|retryPrimaryException
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// restore updated versions...
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|requestIndex
condition|;
name|j
operator|++
control|)
block|{
name|applyVersion
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|j
index|]
argument_list|,
name|preVersions
index|[
name|j
index|]
argument_list|,
name|preVersionTypes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|(
name|ElasticsearchException
operator|)
name|e
throw|;
block|}
comment|// if its a conflict failure, and we already executed the request on a primary (and we execute it
comment|// again, due to primary relocation and only processing up to N bulk items when the shard gets closed)
comment|// then just use the response we got from the successful execution
if|if
condition|(
name|item
operator|.
name|getPrimaryResponse
argument_list|()
operator|!=
literal|null
operator|&&
name|isConflictException
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|setResponse
argument_list|(
name|item
argument_list|,
name|item
operator|.
name|getPrimaryResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|updateResult
operator|.
name|result
operator|==
literal|null
condition|)
block|{
name|setResponse
argument_list|(
name|item
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|OP_TYPE_UPDATE
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|updateRequest
operator|.
name|type
argument_list|()
argument_list|,
name|updateRequest
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|updateResult
operator|.
name|result
operator|.
name|operation
argument_list|()
condition|)
block|{
case|case
name|UPSERT
case|:
case|case
name|INDEX
case|:
name|IndexRequest
name|indexRequest
init|=
name|updateResult
operator|.
name|request
argument_list|()
decl_stmt|;
name|logFailure
argument_list|(
name|e
argument_list|,
literal|"index"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|indexRequest
argument_list|)
expr_stmt|;
name|setResponse
argument_list|(
name|item
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|OP_TYPE_UPDATE
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|DeleteRequest
name|deleteRequest
init|=
name|updateResult
operator|.
name|request
argument_list|()
decl_stmt|;
name|logFailure
argument_list|(
name|e
argument_list|,
literal|"delete"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|deleteRequest
argument_list|)
expr_stmt|;
name|setResponse
argument_list|(
name|item
argument_list|,
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|OP_TYPE_DELETE
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// NOTE: Breaking out of the retry_on_conflict loop!
break|break;
block|}
block|}
block|}
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
name|location
argument_list|,
name|item
argument_list|)
return|;
block|}
DECL|method|setResponse
specifier|private
name|void
name|setResponse
parameter_list|(
name|BulkItemRequest
name|request
parameter_list|,
name|BulkItemResponse
name|response
parameter_list|)
block|{
name|request
operator|.
name|setPrimaryResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|request
operator|.
name|setIgnoreOnReplica
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Set the ShardInfo to 0 so we can safely send it to the replicas. We won't use it in the real response though.
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|setShardInfo
argument_list|(
operator|new
name|ShardInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shardIndexOperation
specifier|private
name|WriteResult
argument_list|<
name|IndexResponse
argument_list|>
name|shardIndexOperation
parameter_list|(
name|BulkShardRequest
name|request
parameter_list|,
name|IndexRequest
name|indexRequest
parameter_list|,
name|IndexMetaData
name|metaData
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|boolean
name|processed
parameter_list|)
throws|throws
name|Exception
block|{
name|MappingMetaData
name|mappingMd
init|=
name|metaData
operator|.
name|mappingOrDefault
argument_list|(
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|processed
condition|)
block|{
name|indexRequest
operator|.
name|process
argument_list|(
name|mappingMd
argument_list|,
name|allowIdGeneration
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|TransportIndexAction
operator|.
name|executeIndexRequestOnPrimary
argument_list|(
name|indexRequest
argument_list|,
name|indexShard
argument_list|,
name|mappingUpdatedAction
argument_list|)
return|;
block|}
DECL|class|UpdateResult
specifier|static
class|class
name|UpdateResult
block|{
DECL|field|result
specifier|final
name|UpdateHelper
operator|.
name|Result
name|result
decl_stmt|;
DECL|field|actionRequest
specifier|final
name|ActionRequest
name|actionRequest
decl_stmt|;
DECL|field|retry
specifier|final
name|boolean
name|retry
decl_stmt|;
DECL|field|error
specifier|final
name|Throwable
name|error
decl_stmt|;
DECL|field|writeResult
specifier|final
name|WriteResult
name|writeResult
decl_stmt|;
DECL|field|noopResult
specifier|final
name|UpdateResponse
name|noopResult
decl_stmt|;
DECL|method|UpdateResult
name|UpdateResult
parameter_list|(
name|UpdateHelper
operator|.
name|Result
name|result
parameter_list|,
name|ActionRequest
name|actionRequest
parameter_list|,
name|boolean
name|retry
parameter_list|,
name|Throwable
name|error
parameter_list|,
name|WriteResult
name|writeResult
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|actionRequest
operator|=
name|actionRequest
expr_stmt|;
name|this
operator|.
name|retry
operator|=
name|retry
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
name|this
operator|.
name|writeResult
operator|=
name|writeResult
expr_stmt|;
name|this
operator|.
name|noopResult
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|UpdateResult
name|UpdateResult
parameter_list|(
name|UpdateHelper
operator|.
name|Result
name|result
parameter_list|,
name|ActionRequest
name|actionRequest
parameter_list|,
name|WriteResult
name|writeResult
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|actionRequest
operator|=
name|actionRequest
expr_stmt|;
name|this
operator|.
name|writeResult
operator|=
name|writeResult
expr_stmt|;
name|this
operator|.
name|retry
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|error
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|noopResult
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|UpdateResult
specifier|public
name|UpdateResult
parameter_list|(
name|UpdateHelper
operator|.
name|Result
name|result
parameter_list|,
name|UpdateResponse
name|updateResponse
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|noopResult
operator|=
name|updateResponse
expr_stmt|;
name|this
operator|.
name|actionRequest
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|writeResult
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|retry
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|error
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|failure
name|boolean
name|failure
parameter_list|()
block|{
return|return
name|error
operator|!=
literal|null
return|;
block|}
DECL|method|success
name|boolean
name|success
parameter_list|()
block|{
return|return
name|noopResult
operator|!=
literal|null
operator|||
name|writeResult
operator|!=
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|request
parameter_list|<
name|T
extends|extends
name|ActionRequest
parameter_list|>
name|T
name|request
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|actionRequest
return|;
block|}
block|}
DECL|method|shardUpdateOperation
specifier|private
name|UpdateResult
name|shardUpdateOperation
parameter_list|(
name|IndexMetaData
name|metaData
parameter_list|,
name|BulkShardRequest
name|bulkShardRequest
parameter_list|,
name|UpdateRequest
name|updateRequest
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|)
block|{
name|UpdateHelper
operator|.
name|Result
name|translate
init|=
name|updateHelper
operator|.
name|prepare
argument_list|(
name|updateRequest
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|translate
operator|.
name|operation
argument_list|()
condition|)
block|{
case|case
name|UPSERT
case|:
case|case
name|INDEX
case|:
name|IndexRequest
name|indexRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
try|try
block|{
name|WriteResult
name|result
init|=
name|shardIndexOperation
argument_list|(
name|bulkShardRequest
argument_list|,
name|indexRequest
argument_list|,
name|metaData
argument_list|,
name|indexShard
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|UpdateResult
argument_list|(
name|translate
argument_list|,
name|indexRequest
argument_list|,
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|Throwable
name|cause
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|VersionConflictEngineException
condition|)
block|{
name|retry
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|new
name|UpdateResult
argument_list|(
name|translate
argument_list|,
name|indexRequest
argument_list|,
name|retry
argument_list|,
name|cause
argument_list|,
literal|null
argument_list|)
return|;
block|}
case|case
name|DELETE
case|:
name|DeleteRequest
name|deleteRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
try|try
block|{
name|WriteResult
argument_list|<
name|DeleteResponse
argument_list|>
name|result
init|=
name|TransportDeleteAction
operator|.
name|executeDeleteRequestOnPrimary
argument_list|(
name|deleteRequest
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
return|return
operator|new
name|UpdateResult
argument_list|(
name|translate
argument_list|,
name|deleteRequest
argument_list|,
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|Throwable
name|cause
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|VersionConflictEngineException
condition|)
block|{
name|retry
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|new
name|UpdateResult
argument_list|(
name|translate
argument_list|,
name|deleteRequest
argument_list|,
name|retry
argument_list|,
name|cause
argument_list|,
literal|null
argument_list|)
return|;
block|}
case|case
name|NONE
case|:
name|UpdateResponse
name|updateResponse
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
name|indexShard
operator|.
name|noopUpdate
argument_list|(
name|updateRequest
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|UpdateResult
argument_list|(
name|translate
argument_list|,
name|updateResponse
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal update operation "
operator|+
name|translate
operator|.
name|operation
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|onReplicaShard
specifier|protected
name|Location
name|onReplicaShard
parameter_list|(
name|BulkShardRequest
name|request
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|)
block|{
name|Translog
operator|.
name|Location
name|location
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BulkItemRequest
name|item
init|=
name|request
operator|.
name|items
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|null
operator|||
name|item
operator|.
name|isIgnoreOnReplica
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|IndexRequest
condition|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
try|try
block|{
name|Engine
operator|.
name|Index
name|operation
init|=
name|TransportIndexAction
operator|.
name|executeIndexRequestOnReplica
argument_list|(
name|indexRequest
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|location
operator|=
name|locationToSync
argument_list|(
name|location
argument_list|,
name|operation
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// if its not an ignore replica failure, we need to make sure to bubble up the failure
comment|// so we will fail the shard
if|if
condition|(
operator|!
name|ignoreReplicaException
argument_list|(
name|e
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|DeleteRequest
condition|)
block|{
name|DeleteRequest
name|deleteRequest
init|=
operator|(
name|DeleteRequest
operator|)
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
try|try
block|{
name|Engine
operator|.
name|Delete
name|delete
init|=
name|TransportDeleteAction
operator|.
name|executeDeleteRequestOnReplica
argument_list|(
name|deleteRequest
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|indexShard
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|location
operator|=
name|locationToSync
argument_list|(
name|location
argument_list|,
name|delete
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// if its not an ignore replica failure, we need to make sure to bubble up the failure
comment|// so we will fail the shard
if|if
condition|(
operator|!
name|ignoreReplicaException
argument_list|(
name|e
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected index operation: "
operator|+
name|item
operator|.
name|request
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|location
return|;
block|}
DECL|method|applyVersion
specifier|private
name|void
name|applyVersion
parameter_list|(
name|BulkItemRequest
name|item
parameter_list|,
name|long
name|version
parameter_list|,
name|VersionType
name|versionType
parameter_list|)
block|{
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|IndexRequest
condition|)
block|{
operator|(
operator|(
name|IndexRequest
operator|)
name|item
operator|.
name|request
argument_list|()
operator|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|DeleteRequest
condition|)
block|{
operator|(
operator|(
name|DeleteRequest
operator|)
name|item
operator|.
name|request
argument_list|()
operator|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|UpdateRequest
condition|)
block|{
operator|(
operator|(
name|UpdateRequest
operator|)
name|item
operator|.
name|request
argument_list|()
operator|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// log?
block|}
block|}
DECL|method|locationToSync
specifier|private
name|Translog
operator|.
name|Location
name|locationToSync
parameter_list|(
name|Translog
operator|.
name|Location
name|current
parameter_list|,
name|Translog
operator|.
name|Location
name|next
parameter_list|)
block|{
comment|/* here we are moving forward in the translog with each operation. Under the hood          * this might cross translog files which is ok since from the user perspective          * the translog is like a tape where only the highest location needs to be fsynced          * in order to sync all previous locations even though they are not in the same file.          * When the translog rolls over files the previous file is fsynced on after closing if needed.*/
assert|assert
name|next
operator|!=
literal|null
operator|:
literal|"next operation can't be null"
assert|;
assert|assert
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|compareTo
argument_list|(
name|next
argument_list|)
operator|<
literal|0
operator|:
literal|"translog locations are not increasing"
assert|;
return|return
name|next
return|;
block|}
block|}
end_class

end_unit

