begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk.byscroll
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|slice
operator|.
name|SliceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskManager
import|;
end_import

begin_comment
comment|/**  * Helps parallelize reindex requests using sliced scrolls.  */
end_comment

begin_class
DECL|class|BulkByScrollParallelizationHelper
specifier|public
class|class
name|BulkByScrollParallelizationHelper
block|{
DECL|method|BulkByScrollParallelizationHelper
specifier|private
name|BulkByScrollParallelizationHelper
parameter_list|()
block|{}
specifier|public
specifier|static
parameter_list|<
name|Request
extends|extends
name|AbstractBulkByScrollRequest
argument_list|<
name|Request
argument_list|>
DECL|method|startSlices
parameter_list|>
name|void
name|startSlices
parameter_list|(
name|Client
name|client
parameter_list|,
name|TaskManager
name|taskManager
parameter_list|,
name|Action
argument_list|<
name|Request
argument_list|,
name|BulkByScrollResponse
argument_list|,
name|?
argument_list|>
name|action
parameter_list|,
name|String
name|localNodeId
parameter_list|,
name|ParentBulkByScrollTask
name|task
parameter_list|,
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|BulkByScrollResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|TaskId
name|parentTaskId
init|=
operator|new
name|TaskId
argument_list|(
name|localNodeId
argument_list|,
name|task
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|SearchRequest
name|slice
range|:
name|sliceIntoSubRequests
argument_list|(
name|request
operator|.
name|getSearchRequest
argument_list|()
argument_list|,
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|request
operator|.
name|getSlices
argument_list|()
argument_list|)
control|)
block|{
comment|// TODO move the request to the correct node. maybe here or somehow do it as part of startup for reindex in general....
name|Request
name|requestForSlice
init|=
name|request
operator|.
name|forSlice
argument_list|(
name|parentTaskId
argument_list|,
name|slice
argument_list|)
decl_stmt|;
name|ActionListener
argument_list|<
name|BulkByScrollResponse
argument_list|>
name|sliceListener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|r
lambda|->
name|task
operator|.
name|onSliceResponse
argument_list|(
name|listener
argument_list|,
name|slice
operator|.
name|source
argument_list|()
operator|.
name|slice
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|r
argument_list|)
argument_list|,
name|e
lambda|->
name|task
operator|.
name|onSliceFailure
argument_list|(
name|listener
argument_list|,
name|slice
operator|.
name|source
argument_list|()
operator|.
name|slice
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|execute
argument_list|(
name|action
argument_list|,
name|requestForSlice
argument_list|,
name|sliceListener
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Slice a search request into {@code times} separate search requests slicing on {@code field}. Note that the slices are *shallow*      * copies of this request so don't change them.      */
DECL|method|sliceIntoSubRequests
specifier|static
name|SearchRequest
index|[]
name|sliceIntoSubRequests
parameter_list|(
name|SearchRequest
name|request
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|times
parameter_list|)
block|{
name|SearchRequest
index|[]
name|slices
init|=
operator|new
name|SearchRequest
index|[
name|times
index|]
decl_stmt|;
for|for
control|(
name|int
name|slice
init|=
literal|0
init|;
name|slice
operator|<
name|times
condition|;
name|slice
operator|++
control|)
block|{
name|SliceBuilder
name|sliceBuilder
init|=
operator|new
name|SliceBuilder
argument_list|(
name|field
argument_list|,
name|slice
argument_list|,
name|times
argument_list|)
decl_stmt|;
name|SearchSourceBuilder
name|slicedSource
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|source
argument_list|()
operator|==
literal|null
condition|)
block|{
name|slicedSource
operator|=
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|slice
argument_list|(
name|sliceBuilder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|request
operator|.
name|source
argument_list|()
operator|.
name|slice
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't slice a request that already has a slice configuration"
argument_list|)
throw|;
block|}
name|slicedSource
operator|=
name|request
operator|.
name|source
argument_list|()
operator|.
name|copyWithNewSlice
argument_list|(
name|sliceBuilder
argument_list|)
expr_stmt|;
block|}
name|slices
index|[
name|slice
index|]
operator|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|slicedSource
argument_list|)
operator|.
name|searchType
argument_list|(
name|request
operator|.
name|searchType
argument_list|()
argument_list|)
operator|.
name|indices
argument_list|(
name|request
operator|.
name|indices
argument_list|()
argument_list|)
operator|.
name|types
argument_list|(
name|request
operator|.
name|types
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|request
operator|.
name|routing
argument_list|()
argument_list|)
operator|.
name|preference
argument_list|(
name|request
operator|.
name|preference
argument_list|()
argument_list|)
operator|.
name|requestCache
argument_list|(
name|request
operator|.
name|requestCache
argument_list|()
argument_list|)
operator|.
name|scroll
argument_list|(
name|request
operator|.
name|scroll
argument_list|()
argument_list|)
operator|.
name|indicesOptions
argument_list|(
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|slices
return|;
block|}
block|}
end_class

end_unit

