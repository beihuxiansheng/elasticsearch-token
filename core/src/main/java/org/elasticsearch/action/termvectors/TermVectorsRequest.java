begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.termvectors
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|RealtimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|MultiGetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|single
operator|.
name|shard
operator|.
name|SingleShardRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_comment
comment|/**  * Request returning the term vector (doc frequency, positions, offsets) for a  * document.  *<p>  * Note, the {@link #index()}, {@link #type(String)} and {@link #id(String)} are  * required.  */
end_comment

begin_class
DECL|class|TermVectorsRequest
specifier|public
class|class
name|TermVectorsRequest
extends|extends
name|SingleShardRequest
argument_list|<
name|TermVectorsRequest
argument_list|>
implements|implements
name|RealtimeRequest
block|{
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|doc
specifier|private
name|BytesReference
name|doc
decl_stmt|;
DECL|field|routing
specifier|private
name|String
name|routing
decl_stmt|;
DECL|field|parent
specifier|private
name|String
name|parent
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
name|Versions
operator|.
name|MATCH_ANY
decl_stmt|;
DECL|field|preference
specifier|protected
name|String
name|preference
decl_stmt|;
DECL|field|randomInt
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|randomInt
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// TODO: change to String[]
DECL|field|selectedFields
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|selectedFields
decl_stmt|;
DECL|field|realtime
specifier|private
name|boolean
name|realtime
init|=
literal|true
decl_stmt|;
DECL|field|perFieldAnalyzer
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
decl_stmt|;
DECL|field|filterSettings
specifier|private
name|FilterSettings
name|filterSettings
decl_stmt|;
DECL|class|FilterSettings
specifier|public
specifier|static
specifier|final
class|class
name|FilterSettings
block|{
DECL|field|maxNumTerms
specifier|public
name|Integer
name|maxNumTerms
decl_stmt|;
DECL|field|minTermFreq
specifier|public
name|Integer
name|minTermFreq
decl_stmt|;
DECL|field|maxTermFreq
specifier|public
name|Integer
name|maxTermFreq
decl_stmt|;
DECL|field|minDocFreq
specifier|public
name|Integer
name|minDocFreq
decl_stmt|;
DECL|field|maxDocFreq
specifier|public
name|Integer
name|maxDocFreq
decl_stmt|;
DECL|field|minWordLength
specifier|public
name|Integer
name|minWordLength
decl_stmt|;
DECL|field|maxWordLength
specifier|public
name|Integer
name|maxWordLength
decl_stmt|;
DECL|method|FilterSettings
specifier|public
name|FilterSettings
parameter_list|()
block|{          }
DECL|method|FilterSettings
specifier|public
name|FilterSettings
parameter_list|(
annotation|@
name|Nullable
name|Integer
name|maxNumTerms
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|minTermFreq
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|maxTermFreq
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|minDocFreq
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|maxDocFreq
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|minWordLength
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|maxWordLength
parameter_list|)
block|{
name|this
operator|.
name|maxNumTerms
operator|=
name|maxNumTerms
expr_stmt|;
name|this
operator|.
name|minTermFreq
operator|=
name|minTermFreq
expr_stmt|;
name|this
operator|.
name|maxTermFreq
operator|=
name|maxTermFreq
expr_stmt|;
name|this
operator|.
name|minDocFreq
operator|=
name|minDocFreq
expr_stmt|;
name|this
operator|.
name|maxDocFreq
operator|=
name|maxDocFreq
expr_stmt|;
name|this
operator|.
name|minWordLength
operator|=
name|minWordLength
expr_stmt|;
name|this
operator|.
name|maxWordLength
operator|=
name|maxWordLength
expr_stmt|;
block|}
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|maxNumTerms
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|minTermFreq
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|maxTermFreq
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|minDocFreq
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|maxDocFreq
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|minWordLength
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
name|maxWordLength
operator|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
expr_stmt|;
block|}
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|maxNumTerms
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|minTermFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|maxTermFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|minDocFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|maxDocFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|minWordLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|maxWordLength
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|flagsEnum
specifier|private
name|EnumSet
argument_list|<
name|Flag
argument_list|>
name|flagsEnum
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|Flag
operator|.
name|Positions
argument_list|,
name|Flag
operator|.
name|Offsets
argument_list|,
name|Flag
operator|.
name|Payloads
argument_list|,
name|Flag
operator|.
name|FieldStatistics
argument_list|)
decl_stmt|;
DECL|method|TermVectorsRequest
specifier|public
name|TermVectorsRequest
parameter_list|()
block|{     }
comment|/**      * Constructs a new term vector request for a document that will be fetch      * from the provided index. Use {@link #type(String)} and      * {@link #id(String)} to specify the document to load.      */
DECL|method|TermVectorsRequest
specifier|public
name|TermVectorsRequest
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Constructs a new term vector request for a document that will be fetch      * from the provided index. Use {@link #type(String)} and      * {@link #id(String)} to specify the document to load.      */
DECL|method|TermVectorsRequest
specifier|public
name|TermVectorsRequest
parameter_list|(
name|TermVectorsRequest
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|other
operator|.
name|id
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|other
operator|.
name|type
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|doc
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|doc
operator|=
operator|new
name|BytesArray
argument_list|(
name|other
operator|.
name|doc
argument_list|()
operator|.
name|toBytesRef
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|flagsEnum
operator|=
name|other
operator|.
name|getFlags
argument_list|()
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|preference
operator|=
name|other
operator|.
name|preference
argument_list|()
expr_stmt|;
name|this
operator|.
name|routing
operator|=
name|other
operator|.
name|routing
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|other
operator|.
name|parent
argument_list|()
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|selectedFields
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|selectedFields
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|other
operator|.
name|selectedFields
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|perFieldAnalyzer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|perFieldAnalyzer
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|other
operator|.
name|perFieldAnalyzer
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|realtime
operator|=
name|other
operator|.
name|realtime
argument_list|()
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|other
operator|.
name|version
argument_list|()
expr_stmt|;
name|this
operator|.
name|versionType
operator|=
name|VersionType
operator|.
name|fromValue
argument_list|(
name|other
operator|.
name|versionType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|filterSettings
operator|=
name|other
operator|.
name|filterSettings
argument_list|()
expr_stmt|;
block|}
DECL|method|TermVectorsRequest
specifier|public
name|TermVectorsRequest
parameter_list|(
name|MultiGetRequest
operator|.
name|Item
name|item
parameter_list|)
block|{
name|super
argument_list|(
name|item
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|item
operator|.
name|id
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|item
operator|.
name|type
argument_list|()
expr_stmt|;
name|this
operator|.
name|selectedFields
argument_list|(
name|item
operator|.
name|storedFields
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|routing
argument_list|(
name|item
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
argument_list|(
name|item
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getFlags
specifier|public
name|EnumSet
argument_list|<
name|Flag
argument_list|>
name|getFlags
parameter_list|()
block|{
return|return
name|flagsEnum
return|;
block|}
comment|/**      * Sets the type of document to get the term vector for.      */
DECL|method|type
specifier|public
name|TermVectorsRequest
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the type of document to get the term vector for.      */
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Returns the id of document the term vector is requested for.      */
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * Sets the id of document the term vector is requested for.      */
DECL|method|id
specifier|public
name|TermVectorsRequest
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the artificial document from which term vectors are requested for.      */
DECL|method|doc
specifier|public
name|BytesReference
name|doc
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
comment|/**      * Sets an artificial document from which term vectors are requested for.      */
DECL|method|doc
specifier|public
name|TermVectorsRequest
name|doc
parameter_list|(
name|XContentBuilder
name|documentBuilder
parameter_list|)
block|{
return|return
name|this
operator|.
name|doc
argument_list|(
name|documentBuilder
operator|.
name|bytes
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Sets an artificial document from which term vectors are requested for.      */
DECL|method|doc
specifier|public
name|TermVectorsRequest
name|doc
parameter_list|(
name|BytesReference
name|doc
parameter_list|,
name|boolean
name|generateRandomId
parameter_list|)
block|{
comment|// assign a random id to this artificial document, for routing
if|if
condition|(
name|generateRandomId
condition|)
block|{
name|this
operator|.
name|id
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|randomInt
operator|.
name|getAndAdd
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @return The routing for this request.      */
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|routing
return|;
block|}
DECL|method|routing
specifier|public
name|TermVectorsRequest
name|routing
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|parent
specifier|public
name|String
name|parent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
comment|/**      * Sets the parent id of this document.      */
DECL|method|parent
specifier|public
name|TermVectorsRequest
name|parent
parameter_list|(
name|String
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|preference
specifier|public
name|String
name|preference
parameter_list|()
block|{
return|return
name|this
operator|.
name|preference
return|;
block|}
comment|/**      * Sets the preference to execute the search. Defaults to randomize across      * shards. Can be set to<tt>_local</tt> to prefer local shards,      *<tt>_primary</tt> to execute only on primary shards, or a custom value,      * which guarantees that the same order will be used across different      * requests.      */
DECL|method|preference
specifier|public
name|TermVectorsRequest
name|preference
parameter_list|(
name|String
name|preference
parameter_list|)
block|{
name|this
operator|.
name|preference
operator|=
name|preference
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Return the start and stop offsets for each term if they were stored or      * skip offsets.      */
DECL|method|offsets
specifier|public
name|TermVectorsRequest
name|offsets
parameter_list|(
name|boolean
name|offsets
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Flag
operator|.
name|Offsets
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @return<code>true</code> if term offsets should be returned. Otherwise      *<code>false</code>      */
DECL|method|offsets
specifier|public
name|boolean
name|offsets
parameter_list|()
block|{
return|return
name|flagsEnum
operator|.
name|contains
argument_list|(
name|Flag
operator|.
name|Offsets
argument_list|)
return|;
block|}
comment|/**      * Return the positions for each term if stored or skip.      */
DECL|method|positions
specifier|public
name|TermVectorsRequest
name|positions
parameter_list|(
name|boolean
name|positions
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Flag
operator|.
name|Positions
argument_list|,
name|positions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @return Returns if the positions for each term should be returned if      *         stored or skip.      */
DECL|method|positions
specifier|public
name|boolean
name|positions
parameter_list|()
block|{
return|return
name|flagsEnum
operator|.
name|contains
argument_list|(
name|Flag
operator|.
name|Positions
argument_list|)
return|;
block|}
comment|/**      * @return<code>true</code> if term payloads should be returned. Otherwise      *<code>false</code>      */
DECL|method|payloads
specifier|public
name|boolean
name|payloads
parameter_list|()
block|{
return|return
name|flagsEnum
operator|.
name|contains
argument_list|(
name|Flag
operator|.
name|Payloads
argument_list|)
return|;
block|}
comment|/**      * Return the payloads for each term or skip.      */
DECL|method|payloads
specifier|public
name|TermVectorsRequest
name|payloads
parameter_list|(
name|boolean
name|payloads
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Flag
operator|.
name|Payloads
argument_list|,
name|payloads
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @return<code>true</code> if term statistics should be returned.      * Otherwise<code>false</code>      */
DECL|method|termStatistics
specifier|public
name|boolean
name|termStatistics
parameter_list|()
block|{
return|return
name|flagsEnum
operator|.
name|contains
argument_list|(
name|Flag
operator|.
name|TermStatistics
argument_list|)
return|;
block|}
comment|/**      * Return the term statistics for each term in the shard or skip.      */
DECL|method|termStatistics
specifier|public
name|TermVectorsRequest
name|termStatistics
parameter_list|(
name|boolean
name|termStatistics
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Flag
operator|.
name|TermStatistics
argument_list|,
name|termStatistics
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @return<code>true</code> if field statistics should be returned.      * Otherwise<code>false</code>      */
DECL|method|fieldStatistics
specifier|public
name|boolean
name|fieldStatistics
parameter_list|()
block|{
return|return
name|flagsEnum
operator|.
name|contains
argument_list|(
name|Flag
operator|.
name|FieldStatistics
argument_list|)
return|;
block|}
comment|/**      * Return the field statistics for each term in the shard or skip.      */
DECL|method|fieldStatistics
specifier|public
name|TermVectorsRequest
name|fieldStatistics
parameter_list|(
name|boolean
name|fieldStatistics
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Flag
operator|.
name|FieldStatistics
argument_list|,
name|fieldStatistics
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Return only term vectors for special selected fields. Returns for term      * vectors for all fields if selectedFields == null      */
DECL|method|selectedFields
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|selectedFields
parameter_list|()
block|{
return|return
name|selectedFields
return|;
block|}
comment|/**      * Return only term vectors for special selected fields. Returns the term      * vectors for all fields if selectedFields == null      */
DECL|method|selectedFields
specifier|public
name|TermVectorsRequest
name|selectedFields
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|selectedFields
operator|=
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|length
operator|!=
literal|0
condition|?
name|Sets
operator|.
name|newHashSet
argument_list|(
name|fields
argument_list|)
else|:
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Return whether term vectors should be generated real-time (default to true).      */
DECL|method|realtime
specifier|public
name|boolean
name|realtime
parameter_list|()
block|{
return|return
name|this
operator|.
name|realtime
return|;
block|}
annotation|@
name|Override
DECL|method|realtime
specifier|public
name|TermVectorsRequest
name|realtime
parameter_list|(
name|boolean
name|realtime
parameter_list|)
block|{
name|this
operator|.
name|realtime
operator|=
name|realtime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Return the overridden analyzers at each field.      */
DECL|method|perFieldAnalyzer
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
parameter_list|()
block|{
return|return
name|perFieldAnalyzer
return|;
block|}
comment|/**      * Override the analyzer used at each field when generating term vectors.      */
DECL|method|perFieldAnalyzer
specifier|public
name|TermVectorsRequest
name|perFieldAnalyzer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|perFieldAnalyzer
operator|=
name|perFieldAnalyzer
operator|!=
literal|null
operator|&&
name|perFieldAnalyzer
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|?
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|perFieldAnalyzer
argument_list|)
else|:
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Return the settings for filtering out terms.      */
DECL|method|filterSettings
specifier|public
name|FilterSettings
name|filterSettings
parameter_list|()
block|{
return|return
name|this
operator|.
name|filterSettings
return|;
block|}
comment|/**      * Sets the settings for filtering out terms.      */
DECL|method|filterSettings
specifier|public
name|TermVectorsRequest
name|filterSettings
parameter_list|(
name|FilterSettings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|filterSettings
operator|=
name|settings
operator|!=
literal|null
condition|?
name|settings
else|:
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|version
specifier|public
name|TermVectorsRequest
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|versionType
return|;
block|}
DECL|method|versionType
specifier|public
name|TermVectorsRequest
name|versionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setFlag
specifier|private
name|void
name|setFlag
parameter_list|(
name|Flag
name|flag
parameter_list|,
name|boolean
name|set
parameter_list|)
block|{
if|if
condition|(
name|set
operator|&&
operator|!
name|flagsEnum
operator|.
name|contains
argument_list|(
name|flag
argument_list|)
condition|)
block|{
name|flagsEnum
operator|.
name|add
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|set
condition|)
block|{
name|flagsEnum
operator|.
name|remove
argument_list|(
name|flag
argument_list|)
expr_stmt|;
assert|assert
operator|(
operator|!
name|flagsEnum
operator|.
name|contains
argument_list|(
name|flag
argument_list|)
operator|)
assert|;
block|}
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
name|super
operator|.
name|validateNonNullIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|ValidateActions
operator|.
name|addValidationError
argument_list|(
literal|"type is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
operator|&&
name|doc
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|ValidateActions
operator|.
name|addValidationError
argument_list|(
literal|"id or doc is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
return|return
name|validationException
return|;
block|}
DECL|method|readTermVectorsRequest
specifier|public
specifier|static
name|TermVectorsRequest
name|readTermVectorsRequest
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|TermVectorsRequest
name|termVectorsRequest
init|=
operator|new
name|TermVectorsRequest
argument_list|()
decl_stmt|;
name|termVectorsRequest
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|termVectorsRequest
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|doc
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
block|}
name|routing
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|parent
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|preference
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|long
name|flags
init|=
name|in
operator|.
name|readVLong
argument_list|()
decl_stmt|;
name|flagsEnum
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|Flag
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|flags
operator|&
operator|(
literal|1
operator|<<
name|flag
operator|.
name|ordinal
argument_list|()
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|flagsEnum
operator|.
name|add
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|numSelectedFields
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|numSelectedFields
operator|>
literal|0
condition|)
block|{
name|selectedFields
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSelectedFields
condition|;
name|i
operator|++
control|)
block|{
name|selectedFields
operator|.
name|add
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|perFieldAnalyzer
operator|=
name|readPerFieldAnalyzer
argument_list|(
name|in
operator|.
name|readMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|filterSettings
operator|=
operator|new
name|FilterSettings
argument_list|()
expr_stmt|;
name|filterSettings
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|realtime
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|versionType
operator|=
name|VersionType
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|doc
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalString
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|preference
argument_list|)
expr_stmt|;
name|long
name|longFlags
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|flagsEnum
control|)
block|{
name|longFlags
operator||=
operator|(
literal|1
operator|<<
name|flag
operator|.
name|ordinal
argument_list|()
operator|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVLong
argument_list|(
name|longFlags
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedFields
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|selectedFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|selectedField
range|:
name|selectedFields
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|selectedField
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|perFieldAnalyzer
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|perFieldAnalyzer
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeGenericValue
argument_list|(
name|perFieldAnalyzer
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|filterSettings
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterSettings
operator|!=
literal|null
condition|)
block|{
name|filterSettings
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|realtime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|versionType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
DECL|enum|Flag
specifier|public
specifier|static
enum|enum
name|Flag
block|{
comment|// Do not change the order of these flags we use
comment|// the ordinal for encoding! Only append to the end!
DECL|enum constant|Positions
DECL|enum constant|Offsets
DECL|enum constant|Payloads
DECL|enum constant|FieldStatistics
DECL|enum constant|TermStatistics
name|Positions
block|,
name|Offsets
block|,
name|Payloads
block|,
name|FieldStatistics
block|,
name|TermStatistics
block|}
comment|/**      * populates a request object (pre-populated with defaults) based on a parser.      */
DECL|method|parseRequest
specifier|public
specifier|static
name|void
name|parseRequest
parameter_list|(
name|TermVectorsRequest
name|termVectorsRequest
parameter_list|,
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"fields"
argument_list|)
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse term vectors request. field [fields] must be an array"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"offsets"
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|offsets
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"positions"
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|positions
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"payloads"
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|payloads
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"term_statistics"
argument_list|)
operator|||
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"termStatistics"
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|termStatistics
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"field_statistics"
argument_list|)
operator|||
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"fieldStatistics"
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|fieldStatistics
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"dfs"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"distributed frequencies is not supported anymore for term vectors"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"per_field_analyzer"
argument_list|)
operator|||
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"perFieldAnalyzer"
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|perFieldAnalyzer
argument_list|(
name|readPerFieldAnalyzer
argument_list|(
name|parser
operator|.
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"filter"
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|filterSettings
argument_list|(
name|readFilterSettings
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_index"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
comment|// the following is important for multi request parsing.
name|termVectorsRequest
operator|.
name|index
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|type
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_id"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|termVectorsRequest
operator|.
name|doc
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse term vectors request. either [id] or [doc] can be specified, but not both!"
argument_list|)
throw|;
block|}
name|termVectorsRequest
operator|.
name|id
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"doc"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|termVectorsRequest
operator|.
name|id
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse term vectors request. either [id] or [doc] can be specified, but not both!"
argument_list|)
throw|;
block|}
name|termVectorsRequest
operator|.
name|doc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_routing"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"routing"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|routing
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_parent"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"parent"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|parent
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_version"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"version"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|version
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_version_type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"_versionType"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"version_type"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"versionType"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|termVectorsRequest
operator|.
name|versionType
operator|=
name|VersionType
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse term vectors request. unknown field [{}]"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|fieldsAsArray
init|=
operator|new
name|String
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|termVectorsRequest
operator|.
name|selectedFields
argument_list|(
name|fields
operator|.
name|toArray
argument_list|(
name|fieldsAsArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readPerFieldAnalyzer
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readPerFieldAnalyzer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapStrStr
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|mapStrStr
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"expecting the analyzer at [{}] to be a String, but found [{}] instead"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|mapStrStr
return|;
block|}
DECL|method|readFilterSettings
specifier|private
specifier|static
name|FilterSettings
name|readFilterSettings
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|FilterSettings
name|settings
init|=
operator|new
name|FilterSettings
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"max_num_terms"
argument_list|)
condition|)
block|{
name|settings
operator|.
name|maxNumTerms
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"min_term_freq"
argument_list|)
condition|)
block|{
name|settings
operator|.
name|minTermFreq
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"max_term_freq"
argument_list|)
condition|)
block|{
name|settings
operator|.
name|maxTermFreq
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"min_doc_freq"
argument_list|)
condition|)
block|{
name|settings
operator|.
name|minDocFreq
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"max_doc_freq"
argument_list|)
condition|)
block|{
name|settings
operator|.
name|maxDocFreq
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"min_word_length"
argument_list|)
condition|)
block|{
name|settings
operator|.
name|minWordLength
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"max_word_length"
argument_list|)
condition|)
block|{
name|settings
operator|.
name|maxWordLength
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse term vectors request. the field [{}] is not valid for filter parameter for term vector request"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|settings
return|;
block|}
block|}
end_class

end_unit

