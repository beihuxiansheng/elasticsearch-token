begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.termvectors.dfs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|dfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|BoolQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|boolQuery
import|;
end_import

begin_class
DECL|class|DfsOnlyRequest
specifier|public
class|class
name|DfsOnlyRequest
extends|extends
name|BroadcastRequest
argument_list|<
name|DfsOnlyRequest
argument_list|>
block|{
DECL|field|searchRequest
specifier|private
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
DECL|field|nowInMillis
name|long
name|nowInMillis
decl_stmt|;
DECL|method|DfsOnlyRequest
specifier|public
name|DfsOnlyRequest
parameter_list|()
block|{      }
DECL|method|DfsOnlyRequest
specifier|public
name|DfsOnlyRequest
parameter_list|(
name|Fields
name|termVectorsFields
parameter_list|,
name|String
index|[]
name|indices
parameter_list|,
name|String
index|[]
name|types
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|selectedFields
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|indices
argument_list|)
expr_stmt|;
comment|// build a search request with a query of all the terms
specifier|final
name|BoolQueryBuilder
name|boolBuilder
init|=
name|boolQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|termVectorsFields
control|)
block|{
if|if
condition|(
operator|(
name|selectedFields
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|selectedFields
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
name|Terms
name|terms
init|=
name|termVectorsFields
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|TermsEnum
name|iterator
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|text
init|=
name|iterator
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|boolBuilder
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
name|fieldName
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// wrap a search request object
name|this
operator|.
name|searchRequest
operator|=
operator|new
name|SearchRequest
argument_list|(
name|indices
argument_list|)
operator|.
name|types
argument_list|(
name|types
argument_list|)
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|boolBuilder
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getSearchRequest
specifier|public
name|SearchRequest
name|getSearchRequest
parameter_list|()
block|{
return|return
name|searchRequest
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
return|return
name|searchRequest
operator|.
name|validate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|searchRequest
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|searchRequest
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|types
specifier|public
name|String
index|[]
name|types
parameter_list|()
block|{
return|return
name|this
operator|.
name|searchRequest
operator|.
name|types
argument_list|()
return|;
block|}
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|searchRequest
operator|.
name|routing
argument_list|()
return|;
block|}
DECL|method|preference
specifier|public
name|String
name|preference
parameter_list|()
block|{
return|return
name|this
operator|.
name|searchRequest
operator|.
name|preference
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|sSource
init|=
literal|"_na_"
decl_stmt|;
try|try
block|{
name|sSource
operator|=
name|XContentHelper
operator|.
name|convertToJson
argument_list|(
name|searchRequest
operator|.
name|source
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|"["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|indices
argument_list|)
operator|+
literal|"]"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|types
argument_list|()
argument_list|)
operator|+
literal|", source["
operator|+
name|sSource
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

