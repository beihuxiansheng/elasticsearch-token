begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.tasks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
operator|.
name|addValidationError
import|;
end_import

begin_comment
comment|/**  * A base class for task requests  */
end_comment

begin_class
DECL|class|BaseTasksRequest
specifier|public
class|class
name|BaseTasksRequest
parameter_list|<
name|Request
extends|extends
name|BaseTasksRequest
parameter_list|<
name|Request
parameter_list|>
parameter_list|>
extends|extends
name|ActionRequest
argument_list|<
name|Request
argument_list|>
block|{
DECL|field|ALL_ACTIONS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|ALL_ACTIONS
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|ALL_NODES
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|ALL_NODES
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|nodesIds
specifier|private
name|String
index|[]
name|nodesIds
init|=
name|ALL_NODES
decl_stmt|;
DECL|field|timeout
specifier|private
name|TimeValue
name|timeout
decl_stmt|;
DECL|field|actions
specifier|private
name|String
index|[]
name|actions
init|=
name|ALL_ACTIONS
decl_stmt|;
DECL|field|parentTaskId
specifier|private
name|TaskId
name|parentTaskId
init|=
name|TaskId
operator|.
name|EMPTY_TASK_ID
decl_stmt|;
DECL|field|taskId
specifier|private
name|TaskId
name|taskId
init|=
name|TaskId
operator|.
name|EMPTY_TASK_ID
decl_stmt|;
DECL|method|BaseTasksRequest
specifier|public
name|BaseTasksRequest
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|taskId
operator|.
name|isSet
argument_list|()
operator|&&
name|nodesIds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"task id cannot be used together with node ids"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
return|return
name|validationException
return|;
block|}
comment|/**      * Sets the list of action masks for the actions that should be returned      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setActions
specifier|public
specifier|final
name|Request
name|setActions
parameter_list|(
name|String
modifier|...
name|actions
parameter_list|)
block|{
name|this
operator|.
name|actions
operator|=
name|actions
expr_stmt|;
return|return
operator|(
name|Request
operator|)
name|this
return|;
block|}
comment|/**      * Return the list of action masks for the actions that should be returned      */
DECL|method|getActions
specifier|public
name|String
index|[]
name|getActions
parameter_list|()
block|{
return|return
name|actions
return|;
block|}
DECL|method|getNodesIds
specifier|public
specifier|final
name|String
index|[]
name|getNodesIds
parameter_list|()
block|{
return|return
name|nodesIds
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setNodesIds
specifier|public
specifier|final
name|Request
name|setNodesIds
parameter_list|(
name|String
modifier|...
name|nodesIds
parameter_list|)
block|{
name|this
operator|.
name|nodesIds
operator|=
name|nodesIds
expr_stmt|;
return|return
operator|(
name|Request
operator|)
name|this
return|;
block|}
comment|/**      * Returns the id of the task that should be processed.      *      * By default tasks with any ids are returned.      */
DECL|method|getTaskId
specifier|public
name|TaskId
name|getTaskId
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setTaskId
specifier|public
specifier|final
name|Request
name|setTaskId
parameter_list|(
name|TaskId
name|taskId
parameter_list|)
block|{
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
return|return
operator|(
name|Request
operator|)
name|this
return|;
block|}
comment|/**      * Returns the parent task id that tasks should be filtered by      */
DECL|method|getParentTaskId
specifier|public
name|TaskId
name|getParentTaskId
parameter_list|()
block|{
return|return
name|parentTaskId
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setParentTaskId
specifier|public
name|Request
name|setParentTaskId
parameter_list|(
name|TaskId
name|parentTaskId
parameter_list|)
block|{
name|this
operator|.
name|parentTaskId
operator|=
name|parentTaskId
expr_stmt|;
return|return
operator|(
name|Request
operator|)
name|this
return|;
block|}
DECL|method|getTimeout
specifier|public
name|TimeValue
name|getTimeout
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeout
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setTimeout
specifier|public
specifier|final
name|Request
name|setTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
return|return
operator|(
name|Request
operator|)
name|this
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setTimeout
specifier|public
specifier|final
name|Request
name|setTimeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|timeout
argument_list|,
literal|null
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".timeout"
argument_list|)
expr_stmt|;
return|return
operator|(
name|Request
operator|)
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|taskId
operator|=
name|TaskId
operator|.
name|readFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|parentTaskId
operator|=
name|TaskId
operator|.
name|readFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|nodesIds
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
name|actions
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
name|timeout
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|TimeValue
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|parentTaskId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArrayNullable
argument_list|(
name|nodesIds
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArrayNullable
argument_list|(
name|actions
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
if|if
condition|(
name|getActions
argument_list|()
operator|!=
literal|null
operator|&&
name|getActions
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|&&
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|getActions
argument_list|()
argument_list|,
name|task
operator|.
name|getAction
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getTaskId
argument_list|()
operator|.
name|isSet
argument_list|()
condition|)
block|{
if|if
condition|(
name|getTaskId
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|task
operator|.
name|getId
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|parentTaskId
operator|.
name|isSet
argument_list|()
condition|)
block|{
if|if
condition|(
name|parentTaskId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getParentTaskId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

