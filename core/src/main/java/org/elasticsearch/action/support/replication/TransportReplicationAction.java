begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.replication
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ReplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|UnavailableShardsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|WriteConsistencyLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|index
operator|.
name|MappingUpdatedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BaseTransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|EmptyTransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannelResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Base class for requests that should be executed on a primary copy followed by replica copies.  * Subclasses can resolve the target shard and provide implementation for primary and replica operations.  *  * The action samples cluster state on the receiving node to reroute to node with primary copy and on the  * primary node to validate request before primary operation followed by sampling state again for resolving  * nodes with replica copies to perform replication.  */
end_comment

begin_class
DECL|class|TransportReplicationAction
specifier|public
specifier|abstract
class|class
name|TransportReplicationAction
parameter_list|<
name|Request
extends|extends
name|ReplicationRequest
parameter_list|<
name|Request
parameter_list|>
parameter_list|,
name|ReplicaRequest
extends|extends
name|ReplicationRequest
parameter_list|<
name|ReplicaRequest
parameter_list|>
parameter_list|,
name|Response
extends|extends
name|ReplicationResponse
parameter_list|>
extends|extends
name|TransportAction
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|>
block|{
DECL|field|transportService
specifier|protected
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterService
specifier|protected
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indicesService
specifier|protected
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|shardStateAction
specifier|protected
specifier|final
name|ShardStateAction
name|shardStateAction
decl_stmt|;
DECL|field|defaultWriteConsistencyLevel
specifier|protected
specifier|final
name|WriteConsistencyLevel
name|defaultWriteConsistencyLevel
decl_stmt|;
DECL|field|transportOptions
specifier|protected
specifier|final
name|TransportRequestOptions
name|transportOptions
decl_stmt|;
DECL|field|mappingUpdatedAction
specifier|protected
specifier|final
name|MappingUpdatedAction
name|mappingUpdatedAction
decl_stmt|;
DECL|field|transportReplicaAction
specifier|final
name|String
name|transportReplicaAction
decl_stmt|;
DECL|field|transportPrimaryAction
specifier|final
name|String
name|transportPrimaryAction
decl_stmt|;
DECL|field|executor
specifier|final
name|String
name|executor
decl_stmt|;
DECL|field|checkWriteConsistency
specifier|final
name|boolean
name|checkWriteConsistency
decl_stmt|;
DECL|method|TransportReplicationAction
specifier|protected
name|TransportReplicationAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|MappingUpdatedAction
name|mappingUpdatedAction
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|Supplier
argument_list|<
name|Request
argument_list|>
name|request
parameter_list|,
name|Supplier
argument_list|<
name|ReplicaRequest
argument_list|>
name|replicaRequest
parameter_list|,
name|String
name|executor
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|threadPool
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|transportService
operator|.
name|getTaskManager
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|shardStateAction
operator|=
name|shardStateAction
expr_stmt|;
name|this
operator|.
name|mappingUpdatedAction
operator|=
name|mappingUpdatedAction
expr_stmt|;
name|this
operator|.
name|transportPrimaryAction
operator|=
name|actionName
operator|+
literal|"[p]"
expr_stmt|;
name|this
operator|.
name|transportReplicaAction
operator|=
name|actionName
operator|+
literal|"[r]"
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|checkWriteConsistency
operator|=
name|checkWriteConsistency
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|actionName
argument_list|,
name|request
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|OperationTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|transportPrimaryAction
argument_list|,
name|request
argument_list|,
name|executor
argument_list|,
operator|new
name|PrimaryOperationTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
comment|// we must never reject on because of thread pool capacity on replicas
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|transportReplicaAction
argument_list|,
name|replicaRequest
argument_list|,
name|executor
argument_list|,
literal|true
argument_list|,
operator|new
name|ReplicaOperationTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportOptions
operator|=
name|transportOptions
argument_list|()
expr_stmt|;
name|this
operator|.
name|defaultWriteConsistencyLevel
operator|=
name|WriteConsistencyLevel
operator|.
name|fromString
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"action.write_consistency"
argument_list|,
literal|"quorum"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
specifier|final
name|void
name|doExecute
parameter_list|(
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"the task parameter is required for this operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|Task
name|task
parameter_list|,
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
operator|new
name|ReroutePhase
argument_list|(
operator|(
name|ReplicationTask
operator|)
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|method|newResponseInstance
specifier|protected
specifier|abstract
name|Response
name|newResponseInstance
parameter_list|()
function_decl|;
comment|/**      * Resolves the target shard id of the incoming request.      * Additional processing or validation of the request should be done here.      */
DECL|method|resolveRequest
specifier|protected
name|void
name|resolveRequest
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|String
name|concreteIndex
parameter_list|,
name|Request
name|request
parameter_list|)
block|{
comment|// implementation should be provided if request shardID is not already resolved at request construction
block|}
comment|/**      * Primary operation on node with primary copy, the provided metadata should be used for request validation if needed      *      * @return A tuple containing not null values, as first value the result of the primary operation and as second value      * the request to be executed on the replica shards.      */
DECL|method|shardOperationOnPrimary
specifier|protected
specifier|abstract
name|Tuple
argument_list|<
name|Response
argument_list|,
name|ReplicaRequest
argument_list|>
name|shardOperationOnPrimary
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|Request
name|shardRequest
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Replica operation on nodes with replica copies      */
DECL|method|shardOperationOnReplica
specifier|protected
specifier|abstract
name|void
name|shardOperationOnReplica
parameter_list|(
name|ReplicaRequest
name|shardRequest
parameter_list|)
function_decl|;
comment|/**      * True if write consistency should be checked for an implementation      */
DECL|method|checkWriteConsistency
specifier|protected
name|boolean
name|checkWriteConsistency
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Cluster level block to check before request execution      */
DECL|method|globalBlockLevel
specifier|protected
name|ClusterBlockLevel
name|globalBlockLevel
parameter_list|()
block|{
return|return
name|ClusterBlockLevel
operator|.
name|WRITE
return|;
block|}
comment|/**      * Index level block to check before request execution      */
DECL|method|indexBlockLevel
specifier|protected
name|ClusterBlockLevel
name|indexBlockLevel
parameter_list|()
block|{
return|return
name|ClusterBlockLevel
operator|.
name|WRITE
return|;
block|}
comment|/**      * True if provided index should be resolved when resolving request      */
DECL|method|resolveIndex
specifier|protected
name|boolean
name|resolveIndex
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|transportOptions
specifier|protected
name|TransportRequestOptions
name|transportOptions
parameter_list|()
block|{
return|return
name|TransportRequestOptions
operator|.
name|EMPTY
return|;
block|}
DECL|method|retryPrimaryException
specifier|protected
name|boolean
name|retryPrimaryException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getClass
argument_list|()
operator|==
name|RetryOnPrimaryException
operator|.
name|class
operator|||
name|TransportActions
operator|.
name|isShardNotAvailableException
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|/**      * Should an exception be ignored when the operation is performed on the replica.      */
DECL|method|ignoreReplicaException
specifier|protected
name|boolean
name|ignoreReplicaException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|TransportActions
operator|.
name|isShardNotAvailableException
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// on version conflict or document missing, it means
comment|// that a new change has crept into the replica, and it's fine
if|if
condition|(
name|isConflictException
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|isConflictException
specifier|protected
name|boolean
name|isConflictException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
comment|// on version conflict or document missing, it means
comment|// that a new change has crept into the replica, and it's fine
if|if
condition|(
name|cause
operator|instanceof
name|VersionConflictEngineException
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|class|WriteResult
specifier|protected
specifier|static
class|class
name|WriteResult
parameter_list|<
name|T
extends|extends
name|ReplicationResponse
parameter_list|>
block|{
DECL|field|response
specifier|public
specifier|final
name|T
name|response
decl_stmt|;
DECL|field|location
specifier|public
specifier|final
name|Translog
operator|.
name|Location
name|location
decl_stmt|;
DECL|method|WriteResult
specifier|public
name|WriteResult
parameter_list|(
name|T
name|response
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|response
specifier|public
parameter_list|<
name|T
extends|extends
name|ReplicationResponse
parameter_list|>
name|T
name|response
parameter_list|()
block|{
comment|// this sets total, pending and failed to 0 and this is ok, because we will embed this into the replica
comment|// request and not use it
name|response
operator|.
name|setShardInfo
argument_list|(
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|response
return|;
block|}
block|}
DECL|class|OperationTransportHandler
class|class
name|OperationTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|Request
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|execute
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Response
name|result
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to send response for "
operator|+
name|actionName
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"the task parameter is required for this operation"
argument_list|)
throw|;
block|}
block|}
DECL|class|PrimaryOperationTransportHandler
class|class
name|PrimaryOperationTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|Request
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"the task parameter is required for this operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|PrimaryPhase
argument_list|(
operator|(
name|ReplicationTask
operator|)
name|task
argument_list|,
name|request
argument_list|,
name|channel
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ReplicaOperationTransportHandler
class|class
name|ReplicaOperationTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|ReplicaRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|ReplicaRequest
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"the task parameter is required for this operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ReplicaRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|AsyncReplicaAction
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
operator|(
name|ReplicationTask
operator|)
name|task
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RetryOnReplicaException
specifier|public
specifier|static
class|class
name|RetryOnReplicaException
extends|extends
name|ElasticsearchException
block|{
DECL|method|RetryOnReplicaException
specifier|public
name|RetryOnReplicaException
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|setShard
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
DECL|method|RetryOnReplicaException
specifier|public
name|RetryOnReplicaException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AsyncReplicaAction
specifier|private
specifier|final
class|class
name|AsyncReplicaAction
extends|extends
name|AbstractRunnable
block|{
DECL|field|request
specifier|private
specifier|final
name|ReplicaRequest
name|request
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|TransportChannel
name|channel
decl_stmt|;
comment|/**          * The task on the node with the replica shard.          */
DECL|field|task
specifier|private
specifier|final
name|ReplicationTask
name|task
decl_stmt|;
comment|// important: we pass null as a timeout as failing a replica is
comment|// something we want to avoid at all costs
DECL|field|observer
specifier|private
specifier|final
name|ClusterStateObserver
name|observer
init|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
literal|null
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|AsyncReplicaAction
name|AsyncReplicaAction
parameter_list|(
name|ReplicaRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|ReplicationTask
name|task
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|RetryOnReplicaException
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Retrying operation on replica, action [{}], request [{}]"
argument_list|,
name|t
argument_list|,
name|transportReplicaAction
argument_list|,
name|request
argument_list|)
expr_stmt|;
specifier|final
name|ThreadContext
operator|.
name|StoredContext
name|context
init|=
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|newStoredContext
argument_list|()
decl_stmt|;
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Forking a thread on local node via transport service so that custom transport service have an
comment|// opportunity to execute custom logic before the replica operation begins
name|String
name|extraMessage
init|=
literal|"action ["
operator|+
name|transportReplicaAction
operator|+
literal|"], request["
operator|+
name|request
operator|+
literal|"]"
decl_stmt|;
name|TransportChannelResponseHandler
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|handler
init|=
name|TransportChannelResponseHandler
operator|.
name|emptyResponseHandler
argument_list|(
name|logger
argument_list|,
name|channel
argument_list|,
name|extraMessage
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|,
name|transportReplicaAction
argument_list|,
name|request
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{
name|responseWithFailure
argument_list|(
operator|new
name|NodeClosedException
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cannot happen: there is not timeout"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|failReplicaIfNeeded
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|unexpected
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"{} unexpected error while failing replica"
argument_list|,
name|unexpected
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|responseWithFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|failReplicaIfNeeded
specifier|private
name|void
name|failReplicaIfNeeded
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Index
name|index
init|=
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|int
name|shardId
init|=
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"failure on replica [{}][{}], action [{}], request [{}]"
argument_list|,
name|t
argument_list|,
name|index
argument_list|,
name|shardId
argument_list|,
name|actionName
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignoreReplicaException
argument_list|(
name|t
argument_list|)
operator|==
literal|false
condition|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"ignoring failed replica {}[{}] because index was already removed."
argument_list|,
name|index
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
return|return;
block|}
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShardOrNull
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexShard
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"ignoring failed replica {}[{}] because index was already removed."
argument_list|,
name|index
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
return|return;
block|}
name|indexShard
operator|.
name|failShard
argument_list|(
name|actionName
operator|+
literal|" failed on replica"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|responseWithFailure
specifier|protected
name|void
name|responseWithFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|responseException
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send error message back to client for action ["
operator|+
name|transportReplicaAction
operator|+
literal|"]"
argument_list|,
name|responseException
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"actual Exception"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doRun
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"replica"
argument_list|)
expr_stmt|;
assert|assert
name|request
operator|.
name|shardId
argument_list|()
operator|!=
literal|null
operator|:
literal|"request shardId must be set"
assert|;
try|try
init|(
name|Releasable
name|ignored
init|=
name|getIndexShardReferenceOnReplica
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|primaryTerm
argument_list|()
argument_list|)
init|)
block|{
name|shardOperationOnReplica
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"action [{}] completed on shard [{}] for request [{}]"
argument_list|,
name|transportReplicaAction
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RetryOnPrimaryException
specifier|public
specifier|static
class|class
name|RetryOnPrimaryException
extends|extends
name|ElasticsearchException
block|{
DECL|method|RetryOnPrimaryException
specifier|public
name|RetryOnPrimaryException
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|this
argument_list|(
name|shardId
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|RetryOnPrimaryException
specifier|public
name|RetryOnPrimaryException
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|setShard
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
DECL|method|RetryOnPrimaryException
specifier|public
name|RetryOnPrimaryException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Responsible for routing and retrying failed operations on the primary.      * The actual primary operation is done in {@link PrimaryPhase} on the      * node with primary copy.      *      * Resolves index and shard id for the request before routing it to target node      */
DECL|class|ReroutePhase
specifier|final
class|class
name|ReroutePhase
extends|extends
name|AbstractRunnable
block|{
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|Request
name|request
decl_stmt|;
DECL|field|task
specifier|private
specifier|final
name|ReplicationTask
name|task
decl_stmt|;
DECL|field|observer
specifier|private
specifier|final
name|ClusterStateObserver
name|observer
decl_stmt|;
DECL|field|finished
specifier|private
specifier|final
name|AtomicBoolean
name|finished
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|ReroutePhase
name|ReroutePhase
parameter_list|(
name|ReplicationTask
name|task
parameter_list|,
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|request
operator|.
name|setParentTask
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|observer
operator|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
name|request
operator|.
name|timeout
argument_list|()
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|finishWithUnexpectedFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doRun
specifier|protected
name|void
name|doRun
parameter_list|()
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"routing"
argument_list|)
expr_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|observer
operator|.
name|observedState
argument_list|()
decl_stmt|;
if|if
condition|(
name|handleBlockExceptions
argument_list|(
name|state
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// request does not have a shardId yet, we need to pass the concrete index to resolve shardId
specifier|final
name|String
name|concreteIndex
init|=
name|concreteIndex
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|resolveRequest
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|,
name|concreteIndex
argument_list|,
name|request
argument_list|)
expr_stmt|;
assert|assert
name|request
operator|.
name|shardId
argument_list|()
operator|!=
literal|null
operator|:
literal|"request shardId must be set in resolveRequest"
assert|;
specifier|final
name|ShardRouting
name|primary
init|=
name|primary
argument_list|(
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|retryIfUnavailable
argument_list|(
name|state
argument_list|,
name|primary
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|DiscoveryNode
name|node
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|taskManager
operator|.
name|registerChildTask
argument_list|(
name|task
argument_list|,
name|node
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|primary
operator|.
name|currentNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|performLocalAction
argument_list|(
name|state
argument_list|,
name|primary
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|performRemoteAction
argument_list|(
name|state
argument_list|,
name|primary
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|performLocalAction
specifier|private
name|void
name|performLocalAction
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ShardRouting
name|primary
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"waiting_on_primary"
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"send action [{}] on primary [{}] for request [{}] with cluster state version [{}] to [{}] "
argument_list|,
name|transportPrimaryAction
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|,
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|performAction
argument_list|(
name|node
argument_list|,
name|transportPrimaryAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|performRemoteAction
specifier|private
name|void
name|performRemoteAction
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ShardRouting
name|primary
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|state
operator|.
name|version
argument_list|()
operator|<
name|request
operator|.
name|routedBasedOnClusterVersion
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to find primary [{}] for request [{}] despite sender thinking it would be here. Local cluster state version [{}]] is older than on sending node (version [{}]), scheduling a retry..."
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|routedBasedOnClusterVersion
argument_list|()
argument_list|)
expr_stmt|;
name|retryBecauseUnavailable
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"failed to find primary as current cluster state with version ["
operator|+
name|state
operator|.
name|version
argument_list|()
operator|+
literal|"] is stale (expected at least ["
operator|+
name|request
operator|.
name|routedBasedOnClusterVersion
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// chasing the node with the active primary for a second hop requires that we are at least up-to-date with the current cluster state version
comment|// this prevents redirect loops between two nodes when a primary was relocated and the relocation target is not aware that it is the active primary shard already.
name|request
operator|.
name|routedBasedOnClusterVersion
argument_list|(
name|state
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"send action [{}] on primary [{}] for request [{}] with cluster state version [{}] to [{}]"
argument_list|,
name|actionName
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|,
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"rerouted"
argument_list|)
expr_stmt|;
name|performAction
argument_list|(
name|node
argument_list|,
name|actionName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|retryIfUnavailable
specifier|private
name|boolean
name|retryIfUnavailable
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ShardRouting
name|primary
parameter_list|)
block|{
if|if
condition|(
name|primary
operator|==
literal|null
operator|||
name|primary
operator|.
name|active
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"primary shard [{}] is not yet active, scheduling a retry: action [{}], request [{}], cluster state version [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|actionName
argument_list|,
name|request
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|retryBecauseUnavailable
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"primary shard is not active"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"primary shard [{}] is assigned to an unknown node [{}], scheduling a retry: action [{}], request [{}], cluster state version [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|actionName
argument_list|,
name|request
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|retryBecauseUnavailable
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"primary shard isn't assigned to a known node."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|concreteIndex
specifier|private
name|String
name|concreteIndex
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
return|return
name|resolveIndex
argument_list|()
condition|?
name|indexNameExpressionResolver
operator|.
name|concreteSingleIndex
argument_list|(
name|state
argument_list|,
name|request
argument_list|)
else|:
name|request
operator|.
name|index
argument_list|()
return|;
block|}
DECL|method|primary
specifier|private
name|ShardRouting
name|primary
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|IndexShardRoutingTable
name|indexShard
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|indexShard
operator|.
name|primaryShard
argument_list|()
return|;
block|}
DECL|method|handleBlockExceptions
specifier|private
name|boolean
name|handleBlockExceptions
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|ClusterBlockException
name|blockException
init|=
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|globalBlockedException
argument_list|(
name|globalBlockLevel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockException
operator|!=
literal|null
condition|)
block|{
name|handleBlockException
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|blockException
operator|=
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|indexBlockedException
argument_list|(
name|indexBlockLevel
argument_list|()
argument_list|,
name|concreteIndex
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockException
operator|!=
literal|null
condition|)
block|{
name|handleBlockException
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|handleBlockException
specifier|private
name|void
name|handleBlockException
parameter_list|(
name|ClusterBlockException
name|blockException
parameter_list|)
block|{
if|if
condition|(
name|blockException
operator|.
name|retryable
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"cluster is blocked ({}), scheduling a retry"
argument_list|,
name|blockException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|retry
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|finishAsFailed
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|performAction
specifier|private
name|void
name|performAction
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|String
name|action
parameter_list|,
specifier|final
name|boolean
name|isPrimaryAction
parameter_list|)
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|transportOptions
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|newInstance
parameter_list|()
block|{
return|return
name|newResponseInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|finishOnSuccess
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
try|try
block|{
comment|// if we got disconnected from the node, or the node / shard is not in the right state (being closed)
if|if
condition|(
name|exp
operator|.
name|unwrapCause
argument_list|()
operator|instanceof
name|ConnectTransportException
operator|||
name|exp
operator|.
name|unwrapCause
argument_list|()
operator|instanceof
name|NodeClosedException
operator|||
operator|(
name|isPrimaryAction
operator|&&
name|retryPrimaryException
argument_list|(
name|exp
operator|.
name|unwrapCause
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"received an error from node [{}] for request [{}], scheduling a retry"
argument_list|,
name|exp
argument_list|,
name|node
operator|.
name|id
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|retry
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|finishAsFailed
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|finishWithUnexpectedFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|retry
name|void
name|retry
parameter_list|(
name|Throwable
name|failure
parameter_list|)
block|{
assert|assert
name|failure
operator|!=
literal|null
assert|;
if|if
condition|(
name|observer
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
comment|// we running as a last attempt after a timeout has happened. don't retry
name|finishAsFailed
argument_list|(
name|failure
argument_list|)
expr_stmt|;
return|return;
block|}
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"waiting_for_retry"
argument_list|)
expr_stmt|;
specifier|final
name|ThreadContext
operator|.
name|StoredContext
name|context
init|=
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|newStoredContext
argument_list|()
decl_stmt|;
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{
name|finishAsFailed
argument_list|(
operator|new
name|NodeClosedException
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try one more time...
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|finishAsFailed
name|void
name|finishAsFailed
parameter_list|(
name|Throwable
name|failure
parameter_list|)
block|{
if|if
condition|(
name|finished
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"operation failed. action [{}], request [{}]"
argument_list|,
name|failure
argument_list|,
name|actionName
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"finishAsFailed called but operation is already finished"
assert|;
block|}
block|}
DECL|method|finishWithUnexpectedFailure
name|void
name|finishWithUnexpectedFailure
parameter_list|(
name|Throwable
name|failure
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unexpected error during the primary phase for action [{}], request [{}]"
argument_list|,
name|failure
argument_list|,
name|actionName
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|finished
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"finishWithUnexpectedFailure called but operation is already finished"
assert|;
block|}
block|}
DECL|method|finishOnSuccess
name|void
name|finishOnSuccess
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
name|finished
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"operation succeeded. action [{}],request [{}]"
argument_list|,
name|actionName
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|onResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"finishOnSuccess called but operation is already finished"
assert|;
block|}
block|}
DECL|method|retryBecauseUnavailable
name|void
name|retryBecauseUnavailable
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|retry
argument_list|(
operator|new
name|UnavailableShardsException
argument_list|(
name|shardId
argument_list|,
literal|"{} Timeout: [{}], request: [{}]"
argument_list|,
name|message
argument_list|,
name|request
operator|.
name|timeout
argument_list|()
argument_list|,
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Responsible for performing primary operation locally or delegating primary operation to relocation target in case where shard has      * been marked as RELOCATED. Delegates to replication action once successful.      *<p>      * Note that as soon as we move to replication action, state responsibility is transferred to {@link ReplicationPhase}.      */
DECL|class|PrimaryPhase
class|class
name|PrimaryPhase
extends|extends
name|AbstractRunnable
block|{
DECL|field|task
specifier|private
specifier|final
name|ReplicationTask
name|task
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|Request
name|request
decl_stmt|;
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|TransportChannel
name|channel
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|ClusterState
name|state
decl_stmt|;
DECL|field|finished
specifier|private
specifier|final
name|AtomicBoolean
name|finished
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|indexShardReference
specifier|private
name|IndexShardReference
name|indexShardReference
decl_stmt|;
DECL|method|PrimaryPhase
name|PrimaryPhase
parameter_list|(
name|ReplicationTask
name|task
parameter_list|,
name|Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|clusterService
operator|.
name|state
argument_list|()
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
assert|assert
name|request
operator|.
name|shardId
argument_list|()
operator|!=
literal|null
operator|:
literal|"request shardId must be set prior to primary phase"
assert|;
name|this
operator|.
name|shardId
operator|=
name|request
operator|.
name|shardId
argument_list|()
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|ExceptionsHelper
operator|.
name|status
argument_list|(
name|e
argument_list|)
operator|==
name|RestStatus
operator|.
name|CONFLICT
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to execute [{}] on [{}]"
argument_list|,
name|e
argument_list|,
name|request
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to execute [{}] on [{}]"
argument_list|,
name|e
argument_list|,
name|request
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
block|}
name|finishAsFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doRun
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"primary"
argument_list|)
expr_stmt|;
comment|// request shardID was set in ReroutePhase
specifier|final
name|String
name|writeConsistencyFailure
init|=
name|checkWriteConsistency
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeConsistencyFailure
operator|!=
literal|null
condition|)
block|{
name|finishBecauseUnavailable
argument_list|(
name|shardId
argument_list|,
name|writeConsistencyFailure
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// closed in finishAsFailed(e) in the case of error
name|indexShardReference
operator|=
name|getIndexShardReferenceOnPrimary
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexShardReference
operator|.
name|isRelocated
argument_list|()
operator|==
literal|false
condition|)
block|{
name|executeLocally
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|executeRemotely
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|executeLocally
specifier|private
name|void
name|executeLocally
parameter_list|()
throws|throws
name|Exception
block|{
comment|// execute locally
name|Tuple
argument_list|<
name|Response
argument_list|,
name|ReplicaRequest
argument_list|>
name|primaryResponse
init|=
name|shardOperationOnPrimary
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|primaryResponse
operator|.
name|v2
argument_list|()
operator|.
name|primaryTerm
argument_list|(
name|indexShardReference
operator|.
name|opPrimaryTerm
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"action [{}] completed on shard [{}] for request [{}] with cluster state version [{}]"
argument_list|,
name|transportPrimaryAction
argument_list|,
name|shardId
argument_list|,
name|request
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicationPhase
name|replicationPhase
init|=
operator|new
name|ReplicationPhase
argument_list|(
name|task
argument_list|,
name|primaryResponse
operator|.
name|v2
argument_list|()
argument_list|,
name|primaryResponse
operator|.
name|v1
argument_list|()
argument_list|,
name|shardId
argument_list|,
name|channel
argument_list|,
name|indexShardReference
argument_list|)
decl_stmt|;
name|finishAndMoveToReplication
argument_list|(
name|replicationPhase
argument_list|)
expr_stmt|;
block|}
DECL|method|executeRemotely
specifier|private
name|void
name|executeRemotely
parameter_list|()
block|{
comment|// delegate primary phase to relocation target
comment|// it is safe to execute primary phase on relocation target as there are no more in-flight operations where primary
comment|// phase is executed on local shard and all subsequent operations are executed on relocation target as primary phase.
specifier|final
name|ShardRouting
name|primary
init|=
name|indexShardReference
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|indexShardReference
operator|.
name|close
argument_list|()
expr_stmt|;
assert|assert
name|primary
operator|.
name|relocating
argument_list|()
operator|:
literal|"indexShard is marked as relocated but routing isn't"
operator|+
name|primary
assert|;
name|DiscoveryNode
name|relocatingNode
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|primary
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|relocatingNode
argument_list|,
name|transportPrimaryAction
argument_list|,
name|request
argument_list|,
name|transportOptions
argument_list|,
name|TransportChannelResponseHandler
operator|.
name|responseHandler
argument_list|(
name|logger
argument_list|,
name|TransportReplicationAction
operator|.
name|this
operator|::
name|newResponseInstance
argument_list|,
name|channel
argument_list|,
literal|"rerouting indexing to target primary "
operator|+
name|primary
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**          * checks whether we can perform a write based on the write consistency setting          * returns **null* if OK to proceed, or a string describing the reason to stop          */
DECL|method|checkWriteConsistency
name|String
name|checkWriteConsistency
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
if|if
condition|(
name|checkWriteConsistency
operator|==
literal|false
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|WriteConsistencyLevel
name|consistencyLevel
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|consistencyLevel
argument_list|()
operator|!=
name|WriteConsistencyLevel
operator|.
name|DEFAULT
condition|)
block|{
name|consistencyLevel
operator|=
name|request
operator|.
name|consistencyLevel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|consistencyLevel
operator|=
name|defaultWriteConsistencyLevel
expr_stmt|;
block|}
specifier|final
name|int
name|sizeActive
decl_stmt|;
specifier|final
name|int
name|requiredNumber
decl_stmt|;
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|!=
literal|null
condition|)
block|{
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|indexRoutingTable
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardRoutingTable
operator|!=
literal|null
condition|)
block|{
name|sizeActive
operator|=
name|shardRoutingTable
operator|.
name|activeShards
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|consistencyLevel
operator|==
name|WriteConsistencyLevel
operator|.
name|QUORUM
operator|&&
name|shardRoutingTable
operator|.
name|getSize
argument_list|()
operator|>
literal|2
condition|)
block|{
comment|// only for more than 2 in the number of shardIt it makes sense, otherwise its 1 shard with 1 replica, quorum is 1 (which is what it is initialized to)
name|requiredNumber
operator|=
operator|(
name|shardRoutingTable
operator|.
name|getSize
argument_list|()
operator|/
literal|2
operator|)
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|consistencyLevel
operator|==
name|WriteConsistencyLevel
operator|.
name|ALL
condition|)
block|{
name|requiredNumber
operator|=
name|shardRoutingTable
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|requiredNumber
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|sizeActive
operator|=
literal|0
expr_stmt|;
name|requiredNumber
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|sizeActive
operator|=
literal|0
expr_stmt|;
name|requiredNumber
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|sizeActive
operator|<
name|requiredNumber
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"not enough active copies of shard [{}] to meet write consistency of [{}] (have {}, needed {}), scheduling a retry. action [{}], request [{}]"
argument_list|,
name|shardId
argument_list|,
name|consistencyLevel
argument_list|,
name|sizeActive
argument_list|,
name|requiredNumber
argument_list|,
name|transportPrimaryAction
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
literal|"Not enough active copies to meet write consistency of ["
operator|+
name|consistencyLevel
operator|+
literal|"] (have "
operator|+
name|sizeActive
operator|+
literal|", needed "
operator|+
name|requiredNumber
operator|+
literal|")."
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**          * upon success, finish the first phase and transfer responsibility to the {@link ReplicationPhase}          */
DECL|method|finishAndMoveToReplication
name|void
name|finishAndMoveToReplication
parameter_list|(
name|ReplicationPhase
name|replicationPhase
parameter_list|)
block|{
if|if
condition|(
name|finished
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|replicationPhase
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"finishAndMoveToReplication called but operation is already finished"
assert|;
block|}
block|}
comment|/**          * upon failure, send failure back to the {@link ReroutePhase} for retrying if appropriate          */
DECL|method|finishAsFailed
name|void
name|finishAsFailed
parameter_list|(
name|Throwable
name|failure
parameter_list|)
block|{
if|if
condition|(
name|finished
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|Releasables
operator|.
name|close
argument_list|(
name|indexShardReference
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"operation failed"
argument_list|,
name|failure
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|responseException
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send error message back to client for action [{}]"
argument_list|,
name|responseException
argument_list|,
name|transportPrimaryAction
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"finishAsFailed called but operation is already finished"
assert|;
block|}
block|}
DECL|method|finishBecauseUnavailable
name|void
name|finishBecauseUnavailable
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|finishAsFailed
argument_list|(
operator|new
name|UnavailableShardsException
argument_list|(
name|shardId
argument_list|,
literal|"{} Timeout: [{}], request: [{}]"
argument_list|,
name|message
argument_list|,
name|request
operator|.
name|timeout
argument_list|()
argument_list|,
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * returns a new reference to {@link IndexShard} to perform a primary operation. Released after performing primary operation locally      * and replication of the operation to all replica shards is completed / failed (see {@link ReplicationPhase}).      */
DECL|method|getIndexShardReferenceOnPrimary
specifier|protected
name|IndexShardReference
name|getIndexShardReferenceOnPrimary
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|IndexShardReferenceImpl
operator|.
name|createOnPrimary
argument_list|(
name|indexShard
argument_list|)
return|;
block|}
comment|/**      * returns a new reference to {@link IndexShard} on a node that the request is replicated to. The reference is closed as soon as      * replication is completed on the node.      */
DECL|method|getIndexShardReferenceOnReplica
specifier|protected
name|IndexShardReference
name|getIndexShardReferenceOnReplica
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|long
name|primaryTerm
parameter_list|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|IndexShardReferenceImpl
operator|.
name|createOnReplica
argument_list|(
name|indexShard
argument_list|,
name|primaryTerm
argument_list|)
return|;
block|}
comment|/**      * Responsible for sending replica requests (see {@link AsyncReplicaAction}) to nodes with replica copy, including      * relocating copies      */
DECL|class|ReplicationPhase
specifier|final
class|class
name|ReplicationPhase
extends|extends
name|AbstractRunnable
block|{
DECL|field|task
specifier|private
specifier|final
name|ReplicationTask
name|task
decl_stmt|;
DECL|field|replicaRequest
specifier|private
specifier|final
name|ReplicaRequest
name|replicaRequest
decl_stmt|;
DECL|field|finalResponse
specifier|private
specifier|final
name|Response
name|finalResponse
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|TransportChannel
name|channel
decl_stmt|;
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|shards
specifier|private
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
decl_stmt|;
DECL|field|nodes
specifier|private
specifier|final
name|DiscoveryNodes
name|nodes
decl_stmt|;
DECL|field|executeOnReplica
specifier|private
specifier|final
name|boolean
name|executeOnReplica
decl_stmt|;
DECL|field|finished
specifier|private
specifier|final
name|AtomicBoolean
name|finished
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|success
specifier|private
specifier|final
name|AtomicInteger
name|success
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// We already wrote into the primary shard
DECL|field|shardReplicaFailures
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|shardReplicaFailures
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|pending
specifier|private
specifier|final
name|AtomicInteger
name|pending
decl_stmt|;
DECL|field|totalShards
specifier|private
specifier|final
name|int
name|totalShards
decl_stmt|;
DECL|field|indexShardReference
specifier|private
specifier|final
name|IndexShardReference
name|indexShardReference
decl_stmt|;
DECL|method|ReplicationPhase
specifier|public
name|ReplicationPhase
parameter_list|(
name|ReplicationTask
name|task
parameter_list|,
name|ReplicaRequest
name|replicaRequest
parameter_list|,
name|Response
name|finalResponse
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|IndexShardReference
name|indexShardReference
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|replicaRequest
operator|=
name|replicaRequest
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|finalResponse
operator|=
name|finalResponse
expr_stmt|;
name|this
operator|.
name|indexShardReference
operator|=
name|indexShardReference
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
comment|// we have to get a new state after successfully indexing into the primary in order to honour recovery semantics.
comment|// we have to make sure that every operation indexed into the primary after recovery start will also be replicated
comment|// to the recovery target. If we use an old cluster state, we may miss a relocation that has started since then.
comment|// If the index gets deleted after primary operation, we skip replication
specifier|final
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTableOrNull
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|state
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
name|shards
argument_list|(
name|shardRoutingTable
argument_list|)
decl_stmt|;
name|boolean
name|executeOnReplica
init|=
operator|(
name|indexMetaData
operator|==
literal|null
operator|)
operator|||
name|shouldExecuteReplication
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
name|DiscoveryNodes
name|nodes
init|=
name|state
operator|.
name|getNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|shards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"replication phase for request [{}] on [{}] is skipped due to index deletion after primary operation"
argument_list|,
name|replicaRequest
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
comment|// we calculate number of target nodes to send replication operations, including nodes with relocating shards
name|AtomicInteger
name|numberOfPendingShardInstances
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|this
operator|.
name|totalShards
operator|=
name|countTotalAndPending
argument_list|(
name|shards
argument_list|,
name|executeOnReplica
argument_list|,
name|nodes
argument_list|,
name|numberOfPendingShardInstances
argument_list|)
expr_stmt|;
name|this
operator|.
name|pending
operator|=
name|numberOfPendingShardInstances
expr_stmt|;
name|this
operator|.
name|shards
operator|=
name|shards
expr_stmt|;
name|this
operator|.
name|executeOnReplica
operator|=
name|executeOnReplica
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"replication phase started. pending [{}], action [{}], request [{}], cluster state version used [{}]"
argument_list|,
name|pending
operator|.
name|get
argument_list|()
argument_list|,
name|transportReplicaAction
argument_list|,
name|replicaRequest
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|countTotalAndPending
specifier|private
name|int
name|countTotalAndPending
parameter_list|(
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|,
name|boolean
name|executeOnReplica
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|,
name|AtomicInteger
name|pending
parameter_list|)
block|{
assert|assert
name|pending
operator|.
name|get
argument_list|()
operator|==
literal|0
assert|;
name|int
name|numberOfIgnoredShardInstances
init|=
name|performOnShards
argument_list|(
name|shards
argument_list|,
name|executeOnReplica
argument_list|,
name|nodes
argument_list|,
name|shard
lambda|->
name|pending
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|shard
lambda|->
name|pending
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
comment|// one for the local primary copy
return|return
literal|1
operator|+
name|numberOfIgnoredShardInstances
operator|+
name|pending
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|performOnShards
specifier|private
name|int
name|performOnShards
parameter_list|(
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|,
name|boolean
name|executeOnReplica
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|,
name|Consumer
argument_list|<
name|ShardRouting
argument_list|>
name|onLocalShard
parameter_list|,
name|Consumer
argument_list|<
name|ShardRouting
argument_list|>
name|onRelocatingShard
parameter_list|)
block|{
name|int
name|numberOfIgnoredShardInstances
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
operator|==
literal|false
operator|&&
name|executeOnReplica
operator|==
literal|false
condition|)
block|{
comment|// If the replicas use shadow replicas, there is no reason to
comment|// perform the action on the replica, so skip it and
comment|// immediately return
comment|// this delays mapping updates on replicas because they have
comment|// to wait until they get the new mapping through the cluster
comment|// state, which is why we recommend pre-defined mappings for
comment|// indices using shadow replicas
name|numberOfIgnoredShardInstances
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|shard
operator|.
name|unassigned
argument_list|()
condition|)
block|{
name|numberOfIgnoredShardInstances
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// we index on a replica that is initializing as well since we might not have got the event
comment|// yet that it was started. We will get an exception IllegalShardState exception if its not started
comment|// and that's fine, we will ignore it
comment|// we never execute replication operation locally as primary operation has already completed locally
comment|// hence, we ignore any local shard for replication
if|if
condition|(
name|nodes
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|onLocalShard
operator|.
name|accept
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
comment|// send operation to relocating shard
comment|// local shard can be a relocation target of a primary that is in relocated state
if|if
condition|(
name|shard
operator|.
name|relocating
argument_list|()
operator|&&
name|nodes
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|shard
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|onRelocatingShard
operator|.
name|accept
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|numberOfIgnoredShardInstances
return|;
block|}
DECL|method|shards
specifier|private
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|(
name|IndexShardRoutingTable
name|shardRoutingTable
parameter_list|)
block|{
return|return
operator|(
name|shardRoutingTable
operator|!=
literal|null
operator|)
condition|?
name|shardRoutingTable
operator|.
name|shards
argument_list|()
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**          * total shard copies          */
DECL|method|totalShards
name|int
name|totalShards
parameter_list|()
block|{
return|return
name|totalShards
return|;
block|}
comment|/**          * total successful operations so far          */
DECL|method|successful
name|int
name|successful
parameter_list|()
block|{
return|return
name|success
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**          * number of pending operations          */
DECL|method|pending
name|int
name|pending
parameter_list|()
block|{
return|return
name|pending
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error while replicating for action [{}]. shard [{}]. "
argument_list|,
name|t
argument_list|,
name|actionName
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|forceFinishAsFailed
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**          * start sending replica requests to target nodes          */
annotation|@
name|Override
DECL|method|doRun
specifier|protected
name|void
name|doRun
parameter_list|()
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"replicating"
argument_list|)
expr_stmt|;
if|if
condition|(
name|pending
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
name|doFinish
argument_list|()
expr_stmt|;
return|return;
block|}
name|performOnShards
argument_list|(
name|shards
argument_list|,
name|executeOnReplica
argument_list|,
name|nodes
argument_list|,
name|shard
lambda|->
name|performOnReplica
argument_list|(
name|shard
argument_list|)
argument_list|,
name|shard
lambda|->
name|performOnReplica
argument_list|(
name|shard
operator|.
name|buildTargetRelocatingShard
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**          * send replica operation to target node          */
DECL|method|performOnReplica
name|void
name|performOnReplica
parameter_list|(
specifier|final
name|ShardRouting
name|shard
parameter_list|)
block|{
comment|// if we don't have that node, it means that it might have failed and will be created again, in
comment|// this case, we don't have to do the operation, and just let it failover
name|String
name|nodeId
init|=
name|shard
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nodes
operator|.
name|nodeExists
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to send action [{}] on replica [{}] for request [{}] due to unknown node [{}]"
argument_list|,
name|transportReplicaAction
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|replicaRequest
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
name|onReplicaFailure
argument_list|(
name|nodeId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"send action [{}] on replica [{}] for request [{}] to [{}]"
argument_list|,
name|transportReplicaAction
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|replicaRequest
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DiscoveryNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|transportReplicaAction
argument_list|,
name|replicaRequest
argument_list|,
name|transportOptions
argument_list|,
operator|new
name|EmptyTransportResponseHandler
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|TransportResponse
operator|.
name|Empty
name|vResponse
parameter_list|)
block|{
name|onReplicaSuccess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] transport failure during replica request [{}], action [{}]"
argument_list|,
name|exp
argument_list|,
name|node
argument_list|,
name|replicaRequest
argument_list|,
name|transportReplicaAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignoreReplicaException
argument_list|(
name|exp
argument_list|)
condition|)
block|{
name|onReplicaFailure
argument_list|(
name|nodeId
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"failed to perform %s on replica on node %s"
argument_list|,
name|transportReplicaAction
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] {}"
argument_list|,
name|exp
argument_list|,
name|shardId
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|shardStateAction
operator|.
name|shardFailed
argument_list|(
name|shard
argument_list|,
name|indexShardReference
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|message
argument_list|,
name|exp
argument_list|,
operator|new
name|ShardStateAction
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|onReplicaFailure
argument_list|(
name|nodeId
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|shardFailedError
parameter_list|)
block|{
if|if
condition|(
name|shardFailedError
operator|instanceof
name|ShardStateAction
operator|.
name|NoLongerPrimaryShardException
condition|)
block|{
name|ShardRouting
name|primaryShard
init|=
name|indexShardReference
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"primary shard [%s] was demoted while failing replica shard [%s] for [%s]"
argument_list|,
name|primaryShard
argument_list|,
name|shard
argument_list|,
name|exp
argument_list|)
decl_stmt|;
comment|// we are no longer the primary, fail ourselves and start over
name|indexShardReference
operator|.
name|failShard
argument_list|(
name|message
argument_list|,
name|shardFailedError
argument_list|)
expr_stmt|;
name|forceFinishAsFailed
argument_list|(
operator|new
name|RetryOnPrimaryException
argument_list|(
name|shardId
argument_list|,
name|message
argument_list|,
name|shardFailedError
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
name|shardFailedError
assert|;
name|onReplicaFailure
argument_list|(
name|nodeId
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|onReplicaFailure
name|void
name|onReplicaFailure
parameter_list|(
name|String
name|nodeId
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|e
parameter_list|)
block|{
comment|// Only version conflict should be ignored from being put into the _shards header?
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|ignoreReplicaException
argument_list|(
name|e
argument_list|)
operator|==
literal|false
condition|)
block|{
name|shardReplicaFailures
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|decPendingAndFinishIfNeeded
argument_list|()
expr_stmt|;
block|}
DECL|method|onReplicaSuccess
name|void
name|onReplicaSuccess
parameter_list|()
block|{
name|success
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|decPendingAndFinishIfNeeded
argument_list|()
expr_stmt|;
block|}
DECL|method|decPendingAndFinishIfNeeded
specifier|private
name|void
name|decPendingAndFinishIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|pending
operator|.
name|decrementAndGet
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|doFinish
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|forceFinishAsFailed
specifier|private
name|void
name|forceFinishAsFailed
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|finished
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|indexShardReference
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|responseException
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send error message back to client for action [{}]"
argument_list|,
name|responseException
argument_list|,
name|transportReplicaAction
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"actual Exception"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doFinish
specifier|private
name|void
name|doFinish
parameter_list|()
block|{
if|if
condition|(
name|finished
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"finished replicating action [{}], request [{}]"
argument_list|,
name|actionName
argument_list|,
name|replicaRequest
argument_list|)
expr_stmt|;
block|}
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
name|Releasables
operator|.
name|close
argument_list|(
name|indexShardReference
argument_list|)
expr_stmt|;
specifier|final
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
index|[]
name|failuresArray
decl_stmt|;
if|if
condition|(
operator|!
name|shardReplicaFailures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|slot
init|=
literal|0
decl_stmt|;
name|failuresArray
operator|=
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
index|[
name|shardReplicaFailures
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|entry
range|:
name|shardReplicaFailures
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RestStatus
name|restStatus
init|=
name|ExceptionsHelper
operator|.
name|status
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|failuresArray
index|[
name|slot
operator|++
index|]
operator|=
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|(
name|shardId
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|restStatus
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|failuresArray
operator|=
name|ReplicationResponse
operator|.
name|EMPTY
expr_stmt|;
block|}
name|finalResponse
operator|.
name|setShardInfo
argument_list|(
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|(
name|totalShards
argument_list|,
name|success
operator|.
name|get
argument_list|()
argument_list|,
name|failuresArray
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|finalResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|responseException
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send error message back to client for action ["
operator|+
name|transportReplicaAction
operator|+
literal|"]"
argument_list|,
name|responseException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"action [{}] completed on all replicas [{}] for request [{}]"
argument_list|,
name|transportReplicaAction
argument_list|,
name|shardId
argument_list|,
name|replicaRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Indicated whether this operation should be replicated to shadow replicas or not. If this method returns true the replication phase will be skipped.      * For example writes such as index and delete don't need to be replicated on shadow replicas but refresh and flush do.      */
DECL|method|shouldExecuteReplication
specifier|protected
name|boolean
name|shouldExecuteReplication
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|IndexMetaData
operator|.
name|isIndexUsingShadowReplicas
argument_list|(
name|settings
argument_list|)
operator|==
literal|false
return|;
block|}
DECL|interface|IndexShardReference
interface|interface
name|IndexShardReference
extends|extends
name|Releasable
block|{
DECL|method|isRelocated
name|boolean
name|isRelocated
parameter_list|()
function_decl|;
DECL|method|failShard
name|void
name|failShard
parameter_list|(
name|String
name|reason
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|e
parameter_list|)
function_decl|;
DECL|method|routingEntry
name|ShardRouting
name|routingEntry
parameter_list|()
function_decl|;
comment|/** returns the primary term of the current opration */
DECL|method|opPrimaryTerm
name|long
name|opPrimaryTerm
parameter_list|()
function_decl|;
block|}
DECL|class|IndexShardReferenceImpl
specifier|static
specifier|final
class|class
name|IndexShardReferenceImpl
implements|implements
name|IndexShardReference
block|{
DECL|field|indexShard
specifier|private
specifier|final
name|IndexShard
name|indexShard
decl_stmt|;
DECL|field|operationLock
specifier|private
specifier|final
name|Releasable
name|operationLock
decl_stmt|;
DECL|method|IndexShardReferenceImpl
specifier|private
name|IndexShardReferenceImpl
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
name|long
name|primaryTerm
parameter_list|)
block|{
name|this
operator|.
name|indexShard
operator|=
name|indexShard
expr_stmt|;
if|if
condition|(
name|primaryTerm
operator|<
literal|0
condition|)
block|{
name|operationLock
operator|=
name|indexShard
operator|.
name|acquirePrimaryOperationLock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|operationLock
operator|=
name|indexShard
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|primaryTerm
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createOnPrimary
specifier|static
name|IndexShardReferenceImpl
name|createOnPrimary
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|)
block|{
return|return
operator|new
name|IndexShardReferenceImpl
argument_list|(
name|indexShard
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|createOnReplica
specifier|static
name|IndexShardReferenceImpl
name|createOnReplica
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
name|long
name|primaryTerm
parameter_list|)
block|{
return|return
operator|new
name|IndexShardReferenceImpl
argument_list|(
name|indexShard
argument_list|,
name|primaryTerm
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|operationLock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isRelocated
specifier|public
name|boolean
name|isRelocated
parameter_list|()
block|{
return|return
name|indexShard
operator|.
name|state
argument_list|()
operator|==
name|IndexShardState
operator|.
name|RELOCATED
return|;
block|}
annotation|@
name|Override
DECL|method|failShard
specifier|public
name|void
name|failShard
parameter_list|(
name|String
name|reason
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|e
parameter_list|)
block|{
name|indexShard
operator|.
name|failShard
argument_list|(
name|reason
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|routingEntry
specifier|public
name|ShardRouting
name|routingEntry
parameter_list|()
block|{
return|return
name|indexShard
operator|.
name|routingEntry
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|opPrimaryTerm
specifier|public
name|long
name|opPrimaryTerm
parameter_list|()
block|{
return|return
name|routingEntry
argument_list|()
operator|.
name|primaryTerm
argument_list|()
return|;
block|}
block|}
DECL|method|processAfterWrite
specifier|protected
specifier|final
name|void
name|processAfterWrite
parameter_list|(
name|boolean
name|refresh
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|)
block|{
if|if
condition|(
name|refresh
condition|)
block|{
try|try
block|{
name|indexShard
operator|.
name|refresh
argument_list|(
literal|"refresh_flag_index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|indexShard
operator|.
name|getTranslogDurability
argument_list|()
operator|==
name|Translog
operator|.
name|Durability
operator|.
name|REQUEST
operator|&&
name|location
operator|!=
literal|null
condition|)
block|{
name|indexShard
operator|.
name|sync
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|indexShard
operator|.
name|maybeFlush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the current phase on the task if it isn't null. Pulled into its own      * method because its more convenient that way.      */
DECL|method|setPhase
specifier|static
name|void
name|setPhase
parameter_list|(
name|ReplicationTask
name|task
parameter_list|,
name|String
name|phase
parameter_list|)
block|{
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|setPhase
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

