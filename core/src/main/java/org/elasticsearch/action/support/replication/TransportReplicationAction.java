begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.replication
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListenerResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|UnavailableShardsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|WriteConsistencyLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|NoNodeAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BaseTransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannelResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
operator|.
name|Empty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Base class for requests that should be executed on a primary copy followed by replica copies.  * Subclasses can resolve the target shard and provide implementation for primary and replica operations.  *  * The action samples cluster state on the receiving node to reroute to node with primary copy and on the  * primary node to validate request before primary operation followed by sampling state again for resolving  * nodes with replica copies to perform replication.  */
end_comment

begin_class
DECL|class|TransportReplicationAction
specifier|public
specifier|abstract
class|class
name|TransportReplicationAction
parameter_list|<
name|Request
extends|extends
name|ReplicationRequest
parameter_list|<
name|Request
parameter_list|>
parameter_list|,
name|ReplicaRequest
extends|extends
name|ReplicationRequest
parameter_list|<
name|ReplicaRequest
parameter_list|>
parameter_list|,
name|Response
extends|extends
name|ReplicationResponse
parameter_list|>
extends|extends
name|TransportAction
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|>
block|{
DECL|field|transportService
specifier|protected
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterService
specifier|protected
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indicesService
specifier|protected
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|shardStateAction
specifier|private
specifier|final
name|ShardStateAction
name|shardStateAction
decl_stmt|;
DECL|field|defaultWriteConsistencyLevel
specifier|private
specifier|final
name|WriteConsistencyLevel
name|defaultWriteConsistencyLevel
decl_stmt|;
DECL|field|transportOptions
specifier|private
specifier|final
name|TransportRequestOptions
name|transportOptions
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|String
name|executor
decl_stmt|;
comment|// package private for testing
DECL|field|transportReplicaAction
specifier|final
name|String
name|transportReplicaAction
decl_stmt|;
DECL|field|transportPrimaryAction
specifier|final
name|String
name|transportPrimaryAction
decl_stmt|;
DECL|field|replicasProxy
specifier|private
specifier|final
name|ReplicasProxy
name|replicasProxy
decl_stmt|;
DECL|method|TransportReplicationAction
specifier|protected
name|TransportReplicationAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|Supplier
argument_list|<
name|Request
argument_list|>
name|request
parameter_list|,
name|Supplier
argument_list|<
name|ReplicaRequest
argument_list|>
name|replicaRequest
parameter_list|,
name|String
name|executor
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|threadPool
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|transportService
operator|.
name|getTaskManager
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|shardStateAction
operator|=
name|shardStateAction
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|transportPrimaryAction
operator|=
name|actionName
operator|+
literal|"[p]"
expr_stmt|;
name|this
operator|.
name|transportReplicaAction
operator|=
name|actionName
operator|+
literal|"[r]"
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|actionName
argument_list|,
name|request
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|OperationTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|transportPrimaryAction
argument_list|,
name|request
argument_list|,
name|executor
argument_list|,
operator|new
name|PrimaryOperationTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
comment|// we must never reject on because of thread pool capacity on replicas
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|transportReplicaAction
argument_list|,
name|replicaRequest
argument_list|,
name|executor
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
operator|new
name|ReplicaOperationTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportOptions
operator|=
name|transportOptions
argument_list|()
expr_stmt|;
name|this
operator|.
name|defaultWriteConsistencyLevel
operator|=
name|WriteConsistencyLevel
operator|.
name|fromString
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"action.write_consistency"
argument_list|,
literal|"quorum"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicasProxy
operator|=
operator|new
name|ReplicasProxy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
specifier|final
name|void
name|doExecute
parameter_list|(
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"the task parameter is required for this operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|Task
name|task
parameter_list|,
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
operator|new
name|ReroutePhase
argument_list|(
operator|(
name|ReplicationTask
operator|)
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|method|newResponseInstance
specifier|protected
specifier|abstract
name|Response
name|newResponseInstance
parameter_list|()
function_decl|;
comment|/**      * Resolves derived values in the request. For example, the target shard id of the incoming request,      * if not set at request construction      * Additional processing or validation of the request should be done here.      *      * @param metaData      cluster state metadata      * @param indexMetaData index metadata of the concrete index this request is going to operate on      * @param request       the request to resolve      */
DECL|method|resolveRequest
specifier|protected
name|void
name|resolveRequest
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|Request
name|request
parameter_list|)
block|{     }
comment|/**      * Primary operation on node with primary copy.      *      * @param shardRequest the request to the primary shard      */
DECL|method|shardOperationOnPrimary
specifier|protected
specifier|abstract
name|PrimaryResult
name|shardOperationOnPrimary
parameter_list|(
name|Request
name|shardRequest
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Synchronous replica operation on nodes with replica copies. This is done under the lock form      * {@link #acquireReplicaOperationLock(ShardId, long, ActionListener)}.      */
DECL|method|shardOperationOnReplica
specifier|protected
specifier|abstract
name|ReplicaResult
name|shardOperationOnReplica
parameter_list|(
name|ReplicaRequest
name|shardRequest
parameter_list|)
function_decl|;
comment|/**      * True if write consistency should be checked for an implementation      */
DECL|method|checkWriteConsistency
specifier|protected
name|boolean
name|checkWriteConsistency
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Cluster level block to check before request execution      */
DECL|method|globalBlockLevel
specifier|protected
name|ClusterBlockLevel
name|globalBlockLevel
parameter_list|()
block|{
return|return
name|ClusterBlockLevel
operator|.
name|WRITE
return|;
block|}
comment|/**      * Index level block to check before request execution      */
DECL|method|indexBlockLevel
specifier|protected
name|ClusterBlockLevel
name|indexBlockLevel
parameter_list|()
block|{
return|return
name|ClusterBlockLevel
operator|.
name|WRITE
return|;
block|}
comment|/**      * True if provided index should be resolved when resolving request      */
DECL|method|resolveIndex
specifier|protected
name|boolean
name|resolveIndex
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|transportOptions
specifier|protected
name|TransportRequestOptions
name|transportOptions
parameter_list|()
block|{
return|return
name|TransportRequestOptions
operator|.
name|EMPTY
return|;
block|}
DECL|method|retryPrimaryException
specifier|protected
name|boolean
name|retryPrimaryException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getClass
argument_list|()
operator|==
name|ReplicationOperation
operator|.
name|RetryOnPrimaryException
operator|.
name|class
operator|||
name|TransportActions
operator|.
name|isShardNotAvailableException
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|class|OperationTransportHandler
class|class
name|OperationTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|Request
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
name|execute
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Response
name|result
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to send response for {}"
argument_list|,
name|e1
argument_list|,
name|actionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"the task parameter is required for this operation"
argument_list|)
throw|;
block|}
block|}
DECL|class|PrimaryOperationTransportHandler
class|class
name|PrimaryOperationTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|Request
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"the task parameter is required for this operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
block|{
operator|new
name|AsyncPrimaryAction
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
operator|(
name|ReplicationTask
operator|)
name|task
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|AsyncPrimaryAction
class|class
name|AsyncPrimaryAction
extends|extends
name|AbstractRunnable
implements|implements
name|ActionListener
argument_list|<
name|PrimaryShardReference
argument_list|>
block|{
DECL|field|request
specifier|private
specifier|final
name|Request
name|request
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|TransportChannel
name|channel
decl_stmt|;
DECL|field|replicationTask
specifier|private
specifier|final
name|ReplicationTask
name|replicationTask
decl_stmt|;
DECL|method|AsyncPrimaryAction
name|AsyncPrimaryAction
parameter_list|(
name|Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|ReplicationTask
name|replicationTask
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|replicationTask
operator|=
name|replicationTask
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doRun
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|acquirePrimaryShardReference
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|PrimaryShardReference
name|primaryShardReference
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|primaryShardReference
operator|.
name|isRelocated
argument_list|()
condition|)
block|{
name|primaryShardReference
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// release shard operation lock as soon as possible
name|setPhase
argument_list|(
name|replicationTask
argument_list|,
literal|"primary_delegation"
argument_list|)
expr_stmt|;
comment|// delegate primary phase to relocation target
comment|// it is safe to execute primary phase on relocation target as there are no more in-flight operations where primary
comment|// phase is executed on local shard and all subsequent operations are executed on relocation target as primary phase.
specifier|final
name|ShardRouting
name|primary
init|=
name|primaryShardReference
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
assert|assert
name|primary
operator|.
name|relocating
argument_list|()
operator|:
literal|"indexShard is marked as relocated but routing isn't"
operator|+
name|primary
assert|;
name|DiscoveryNode
name|relocatingNode
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|primary
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|relocatingNode
argument_list|,
name|transportPrimaryAction
argument_list|,
name|request
argument_list|,
name|transportOptions
argument_list|,
operator|new
name|TransportChannelResponseHandler
argument_list|<
name|Response
argument_list|>
argument_list|(
name|logger
argument_list|,
name|channel
argument_list|,
literal|"rerouting indexing to target primary "
operator|+
name|primary
argument_list|,
name|TransportReplicationAction
operator|.
name|this
operator|::
name|newResponseInstance
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|setPhase
argument_list|(
name|replicationTask
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
name|super
operator|.
name|handleResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|setPhase
argument_list|(
name|replicationTask
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
name|super
operator|.
name|handleException
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setPhase
argument_list|(
name|replicationTask
argument_list|,
literal|"primary"
argument_list|)
expr_stmt|;
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|executeOnReplicas
init|=
operator|(
name|indexMetaData
operator|==
literal|null
operator|)
operator|||
name|shouldExecuteReplication
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
init|=
name|createResponseListener
argument_list|(
name|primaryShardReference
argument_list|)
decl_stmt|;
name|createReplicatedOperation
argument_list|(
name|request
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|PrimaryResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|PrimaryResult
name|result
parameter_list|)
block|{
name|result
operator|.
name|respond
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|primaryShardReference
argument_list|,
name|executeOnReplicas
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Releasables
operator|.
name|closeWhileHandlingException
argument_list|(
name|primaryShardReference
argument_list|)
expr_stmt|;
comment|// release shard operation lock before responding to caller
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|setPhase
argument_list|(
name|replicationTask
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send response"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createResponseListener
specifier|private
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|createResponseListener
parameter_list|(
specifier|final
name|PrimaryShardReference
name|primaryShardReference
parameter_list|)
block|{
return|return
operator|new
name|ActionListener
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|primaryShardReference
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// release shard operation lock before responding to caller
name|setPhase
argument_list|(
name|replicationTask
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|primaryShardReference
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// release shard operation lock before responding to caller
name|setPhase
argument_list|(
name|replicationTask
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send response"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|createReplicatedOperation
specifier|protected
name|ReplicationOperation
argument_list|<
name|Request
argument_list|,
name|ReplicaRequest
argument_list|,
name|PrimaryResult
argument_list|>
name|createReplicatedOperation
parameter_list|(
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|PrimaryResult
argument_list|>
name|listener
parameter_list|,
name|PrimaryShardReference
name|primaryShardReference
parameter_list|,
name|boolean
name|executeOnReplicas
parameter_list|)
block|{
return|return
operator|new
name|ReplicationOperation
argument_list|<>
argument_list|(
name|request
argument_list|,
name|primaryShardReference
argument_list|,
name|listener
argument_list|,
name|executeOnReplicas
argument_list|,
name|checkWriteConsistency
argument_list|()
argument_list|,
name|replicasProxy
argument_list|,
name|clusterService
operator|::
name|state
argument_list|,
name|logger
argument_list|,
name|actionName
argument_list|)
return|;
block|}
block|}
DECL|class|PrimaryResult
specifier|protected
class|class
name|PrimaryResult
implements|implements
name|ReplicationOperation
operator|.
name|PrimaryResult
argument_list|<
name|ReplicaRequest
argument_list|>
block|{
DECL|field|replicaRequest
specifier|final
name|ReplicaRequest
name|replicaRequest
decl_stmt|;
DECL|field|finalResponse
specifier|final
name|Response
name|finalResponse
decl_stmt|;
DECL|method|PrimaryResult
specifier|public
name|PrimaryResult
parameter_list|(
name|ReplicaRequest
name|replicaRequest
parameter_list|,
name|Response
name|finalResponse
parameter_list|)
block|{
name|this
operator|.
name|replicaRequest
operator|=
name|replicaRequest
expr_stmt|;
name|this
operator|.
name|finalResponse
operator|=
name|finalResponse
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|replicaRequest
specifier|public
name|ReplicaRequest
name|replicaRequest
parameter_list|()
block|{
return|return
name|replicaRequest
return|;
block|}
annotation|@
name|Override
DECL|method|setShardInfo
specifier|public
name|void
name|setShardInfo
parameter_list|(
name|ReplicationResponse
operator|.
name|ShardInfo
name|shardInfo
parameter_list|)
block|{
name|finalResponse
operator|.
name|setShardInfo
argument_list|(
name|shardInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|respond
specifier|public
name|void
name|respond
parameter_list|(
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|finalResponse
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ReplicaResult
specifier|protected
class|class
name|ReplicaResult
block|{
comment|/**          * Public constructor so subclasses can call it.          */
DECL|method|ReplicaResult
specifier|public
name|ReplicaResult
parameter_list|()
block|{}
DECL|method|respond
specifier|public
name|void
name|respond
parameter_list|(
name|ActionListener
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|listener
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ReplicaOperationTransportHandler
class|class
name|ReplicaOperationTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|ReplicaRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|ReplicaRequest
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"the task parameter is required for this operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ReplicaRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|AsyncReplicaAction
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
operator|(
name|ReplicationTask
operator|)
name|task
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RetryOnReplicaException
specifier|public
specifier|static
class|class
name|RetryOnReplicaException
extends|extends
name|ElasticsearchException
block|{
DECL|method|RetryOnReplicaException
specifier|public
name|RetryOnReplicaException
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|setShard
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
DECL|method|RetryOnReplicaException
specifier|public
name|RetryOnReplicaException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AsyncReplicaAction
specifier|private
specifier|final
class|class
name|AsyncReplicaAction
extends|extends
name|AbstractRunnable
implements|implements
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
block|{
DECL|field|request
specifier|private
specifier|final
name|ReplicaRequest
name|request
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|TransportChannel
name|channel
decl_stmt|;
comment|/**          * The task on the node with the replica shard.          */
DECL|field|task
specifier|private
specifier|final
name|ReplicationTask
name|task
decl_stmt|;
comment|// important: we pass null as a timeout as failing a replica is
comment|// something we want to avoid at all costs
DECL|field|observer
specifier|private
specifier|final
name|ClusterStateObserver
name|observer
init|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
literal|null
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|AsyncReplicaAction
name|AsyncReplicaAction
parameter_list|(
name|ReplicaRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|,
name|ReplicationTask
name|task
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|Releasable
name|releasable
parameter_list|)
block|{
try|try
block|{
name|ReplicaResult
name|replicaResult
init|=
name|shardOperationOnReplica
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|releasable
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// release shard operation lock before responding to caller
name|replicaResult
operator|.
name|respond
argument_list|(
operator|new
name|ResponseListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Releasables
operator|.
name|closeWhileHandlingException
argument_list|(
name|releasable
argument_list|)
expr_stmt|;
comment|// release shard operation lock before responding to caller
name|AsyncReplicaAction
operator|.
name|this
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|RetryOnReplicaException
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Retrying operation on replica, action [{}], request [{}]"
argument_list|,
name|t
argument_list|,
name|transportReplicaAction
argument_list|,
name|request
argument_list|)
expr_stmt|;
specifier|final
name|ThreadContext
operator|.
name|StoredContext
name|context
init|=
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|newStoredContext
argument_list|()
decl_stmt|;
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Forking a thread on local node via transport service so that custom transport service have an
comment|// opportunity to execute custom logic before the replica operation begins
name|String
name|extraMessage
init|=
literal|"action ["
operator|+
name|transportReplicaAction
operator|+
literal|"], request["
operator|+
name|request
operator|+
literal|"]"
decl_stmt|;
name|TransportChannelResponseHandler
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|handler
init|=
operator|new
name|TransportChannelResponseHandler
argument_list|<>
argument_list|(
name|logger
argument_list|,
name|channel
argument_list|,
name|extraMessage
argument_list|,
parameter_list|()
lambda|->
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|,
name|transportReplicaAction
argument_list|,
name|request
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{
name|responseWithFailure
argument_list|(
operator|new
name|NodeClosedException
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cannot happen: there is not timeout"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|responseWithFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|responseWithFailure
specifier|protected
name|void
name|responseWithFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|responseException
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send error message back to client for action [{}]"
argument_list|,
name|responseException
argument_list|,
name|transportReplicaAction
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"actual Exception"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doRun
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"replica"
argument_list|)
expr_stmt|;
assert|assert
name|request
operator|.
name|shardId
argument_list|()
operator|!=
literal|null
operator|:
literal|"request shardId must be set"
assert|;
name|acquireReplicaOperationLock
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**          * Listens for the response on the replica and sends the response back to the primary.          */
DECL|class|ResponseListener
specifier|private
class|class
name|ResponseListener
implements|implements
name|ActionListener
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
block|{
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|Empty
name|response
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"action [{}] completed on shard [{}] for request [{}]"
argument_list|,
name|transportReplicaAction
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|responseWithFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Responsible for routing and retrying failed operations on the primary.      * The actual primary operation is done in {@link ReplicationOperation} on the      * node with primary copy.      *      * Resolves index and shard id for the request before routing it to target node      */
DECL|class|ReroutePhase
specifier|final
class|class
name|ReroutePhase
extends|extends
name|AbstractRunnable
block|{
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|Request
name|request
decl_stmt|;
DECL|field|task
specifier|private
specifier|final
name|ReplicationTask
name|task
decl_stmt|;
DECL|field|observer
specifier|private
specifier|final
name|ClusterStateObserver
name|observer
decl_stmt|;
DECL|field|finished
specifier|private
specifier|final
name|AtomicBoolean
name|finished
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|ReroutePhase
name|ReroutePhase
parameter_list|(
name|ReplicationTask
name|task
parameter_list|,
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|request
operator|.
name|setParentTask
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|observer
operator|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
name|request
operator|.
name|timeout
argument_list|()
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|finishWithUnexpectedFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doRun
specifier|protected
name|void
name|doRun
parameter_list|()
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"routing"
argument_list|)
expr_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|observer
operator|.
name|observedState
argument_list|()
decl_stmt|;
if|if
condition|(
name|handleBlockExceptions
argument_list|(
name|state
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// request does not have a shardId yet, we need to pass the concrete index to resolve shardId
specifier|final
name|String
name|concreteIndex
init|=
name|concreteIndex
argument_list|(
name|state
argument_list|)
decl_stmt|;
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|concreteIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
name|retry
argument_list|(
operator|new
name|IndexNotFoundException
argument_list|(
name|concreteIndex
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// resolve all derived request fields, so we can route and apply it
if|if
condition|(
name|request
operator|.
name|consistencyLevel
argument_list|()
operator|==
name|WriteConsistencyLevel
operator|.
name|DEFAULT
condition|)
block|{
name|request
operator|.
name|consistencyLevel
argument_list|(
name|defaultWriteConsistencyLevel
argument_list|)
expr_stmt|;
block|}
name|resolveRequest
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|,
name|indexMetaData
argument_list|,
name|request
argument_list|)
expr_stmt|;
assert|assert
name|request
operator|.
name|shardId
argument_list|()
operator|!=
literal|null
operator|:
literal|"request shardId must be set in resolveRequest"
assert|;
specifier|final
name|ShardRouting
name|primary
init|=
name|primary
argument_list|(
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|retryIfUnavailable
argument_list|(
name|state
argument_list|,
name|primary
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|DiscoveryNode
name|node
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|taskManager
operator|.
name|registerChildTask
argument_list|(
name|task
argument_list|,
name|node
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|primary
operator|.
name|currentNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|performLocalAction
argument_list|(
name|state
argument_list|,
name|primary
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|performRemoteAction
argument_list|(
name|state
argument_list|,
name|primary
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|performLocalAction
specifier|private
name|void
name|performLocalAction
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ShardRouting
name|primary
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"waiting_on_primary"
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"send action [{}] on primary [{}] for request [{}] with cluster state version [{}] to [{}] "
argument_list|,
name|transportPrimaryAction
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|,
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|performAction
argument_list|(
name|node
argument_list|,
name|transportPrimaryAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|performRemoteAction
specifier|private
name|void
name|performRemoteAction
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ShardRouting
name|primary
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|state
operator|.
name|version
argument_list|()
operator|<
name|request
operator|.
name|routedBasedOnClusterVersion
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to find primary [{}] for request [{}] despite sender thinking it would be here. Local cluster state "
operator|+
literal|"version [{}]] is older than on sending node (version [{}]), scheduling a retry..."
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|routedBasedOnClusterVersion
argument_list|()
argument_list|)
expr_stmt|;
name|retryBecauseUnavailable
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"failed to find primary as current cluster state with version ["
operator|+
name|state
operator|.
name|version
argument_list|()
operator|+
literal|"] is stale (expected at least ["
operator|+
name|request
operator|.
name|routedBasedOnClusterVersion
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// chasing the node with the active primary for a second hop requires that we are at least up-to-date with the current
comment|// cluster state version this prevents redirect loops between two nodes when a primary was relocated and the relocation
comment|// target is not aware that it is the active primary shard already.
name|request
operator|.
name|routedBasedOnClusterVersion
argument_list|(
name|state
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"send action [{}] on primary [{}] for request [{}] with cluster state version [{}] to [{}]"
argument_list|,
name|actionName
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|,
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"rerouted"
argument_list|)
expr_stmt|;
name|performAction
argument_list|(
name|node
argument_list|,
name|actionName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|retryIfUnavailable
specifier|private
name|boolean
name|retryIfUnavailable
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ShardRouting
name|primary
parameter_list|)
block|{
if|if
condition|(
name|primary
operator|==
literal|null
operator|||
name|primary
operator|.
name|active
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"primary shard [{}] is not yet active, scheduling a retry: action [{}], request [{}], "
operator|+
literal|"cluster state version [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|actionName
argument_list|,
name|request
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|retryBecauseUnavailable
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"primary shard is not active"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"primary shard [{}] is assigned to an unknown node [{}], scheduling a retry: action [{}], request [{}], "
operator|+
literal|"cluster state version [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|primary
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|actionName
argument_list|,
name|request
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|retryBecauseUnavailable
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"primary shard isn't assigned to a known node."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|concreteIndex
specifier|private
name|String
name|concreteIndex
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
return|return
name|resolveIndex
argument_list|()
condition|?
name|indexNameExpressionResolver
operator|.
name|concreteSingleIndex
argument_list|(
name|state
argument_list|,
name|request
argument_list|)
operator|.
name|getName
argument_list|()
else|:
name|request
operator|.
name|index
argument_list|()
return|;
block|}
DECL|method|primary
specifier|private
name|ShardRouting
name|primary
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|IndexShardRoutingTable
name|indexShard
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|indexShard
operator|.
name|primaryShard
argument_list|()
return|;
block|}
DECL|method|handleBlockExceptions
specifier|private
name|boolean
name|handleBlockExceptions
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|ClusterBlockException
name|blockException
init|=
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|globalBlockedException
argument_list|(
name|globalBlockLevel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockException
operator|!=
literal|null
condition|)
block|{
name|handleBlockException
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|blockException
operator|=
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|indexBlockedException
argument_list|(
name|indexBlockLevel
argument_list|()
argument_list|,
name|concreteIndex
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockException
operator|!=
literal|null
condition|)
block|{
name|handleBlockException
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|handleBlockException
specifier|private
name|void
name|handleBlockException
parameter_list|(
name|ClusterBlockException
name|blockException
parameter_list|)
block|{
if|if
condition|(
name|blockException
operator|.
name|retryable
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"cluster is blocked, scheduling a retry"
argument_list|,
name|blockException
argument_list|)
expr_stmt|;
name|retry
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|finishAsFailed
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|performAction
specifier|private
name|void
name|performAction
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|String
name|action
parameter_list|,
specifier|final
name|boolean
name|isPrimaryAction
parameter_list|)
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|transportOptions
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|newInstance
parameter_list|()
block|{
return|return
name|newResponseInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|finishOnSuccess
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
try|try
block|{
comment|// if we got disconnected from the node, or the node / shard is not in the right state (being closed)
specifier|final
name|Throwable
name|cause
init|=
name|exp
operator|.
name|unwrapCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|ConnectTransportException
operator|||
name|cause
operator|instanceof
name|NodeClosedException
operator|||
operator|(
name|isPrimaryAction
operator|&&
name|retryPrimaryException
argument_list|(
name|cause
argument_list|)
operator|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"received an error from node [{}] for request [{}], scheduling a retry"
argument_list|,
name|exp
argument_list|,
name|node
operator|.
name|getId
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|retry
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|finishAsFailed
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|finishWithUnexpectedFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|retry
name|void
name|retry
parameter_list|(
name|Throwable
name|failure
parameter_list|)
block|{
assert|assert
name|failure
operator|!=
literal|null
assert|;
if|if
condition|(
name|observer
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
comment|// we running as a last attempt after a timeout has happened. don't retry
name|finishAsFailed
argument_list|(
name|failure
argument_list|)
expr_stmt|;
return|return;
block|}
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"waiting_for_retry"
argument_list|)
expr_stmt|;
specifier|final
name|ThreadContext
operator|.
name|StoredContext
name|context
init|=
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|newStoredContext
argument_list|()
decl_stmt|;
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{
name|finishAsFailed
argument_list|(
operator|new
name|NodeClosedException
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try one more time...
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|finishAsFailed
name|void
name|finishAsFailed
parameter_list|(
name|Throwable
name|failure
parameter_list|)
block|{
if|if
condition|(
name|finished
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"operation failed. action [{}], request [{}]"
argument_list|,
name|failure
argument_list|,
name|actionName
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"finishAsFailed called but operation is already finished"
assert|;
block|}
block|}
DECL|method|finishWithUnexpectedFailure
name|void
name|finishWithUnexpectedFailure
parameter_list|(
name|Throwable
name|failure
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unexpected error during the primary phase for action [{}], request [{}]"
argument_list|,
name|failure
argument_list|,
name|actionName
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|finished
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"finishWithUnexpectedFailure called but operation is already finished"
assert|;
block|}
block|}
DECL|method|finishOnSuccess
name|void
name|finishOnSuccess
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
name|finished
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|setPhase
argument_list|(
name|task
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"operation succeeded. action [{}],request [{}]"
argument_list|,
name|actionName
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|onResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"finishOnSuccess called but operation is already finished"
assert|;
block|}
block|}
DECL|method|retryBecauseUnavailable
name|void
name|retryBecauseUnavailable
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|retry
argument_list|(
operator|new
name|UnavailableShardsException
argument_list|(
name|shardId
argument_list|,
literal|"{} Timeout: [{}], request: [{}]"
argument_list|,
name|message
argument_list|,
name|request
operator|.
name|timeout
argument_list|()
argument_list|,
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * tries to acquire reference to {@link IndexShard} to perform a primary operation. Released after performing primary operation locally      * and replication of the operation to all replica shards is completed / failed (see {@link ReplicationOperation}).      */
DECL|method|acquirePrimaryShardReference
specifier|protected
name|void
name|acquirePrimaryShardReference
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|ActionListener
argument_list|<
name|PrimaryShardReference
argument_list|>
name|onReferenceAcquired
parameter_list|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
comment|// we may end up here if the cluster state used to route the primary is so stale that the underlying
comment|// index shard was replaced with a replica. For example - in a two node cluster, if the primary fails
comment|// the replica will take over and a replica will be assigned to the first node.
if|if
condition|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|ReplicationOperation
operator|.
name|RetryOnPrimaryException
argument_list|(
name|indexShard
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"actual shard is not a primary "
operator|+
name|indexShard
operator|.
name|routingEntry
argument_list|()
argument_list|)
throw|;
block|}
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
name|onAcquired
init|=
operator|new
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Releasable
name|releasable
parameter_list|)
block|{
name|onReferenceAcquired
operator|.
name|onResponse
argument_list|(
operator|new
name|PrimaryShardReference
argument_list|(
name|indexShard
argument_list|,
name|releasable
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onReferenceAcquired
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|indexShard
operator|.
name|acquirePrimaryOperationLock
argument_list|(
name|onAcquired
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**      * tries to acquire an operation on replicas. The lock is closed as soon as replication is completed on the node.      */
DECL|method|acquireReplicaOperationLock
specifier|protected
name|void
name|acquireReplicaOperationLock
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|long
name|primaryTerm
parameter_list|,
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
name|onLockAcquired
parameter_list|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|indexShard
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|primaryTerm
argument_list|,
name|onLockAcquired
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Indicated whether this operation should be replicated to shadow replicas or not. If this method returns true the replication phase      * will be skipped. For example writes such as index and delete don't need to be replicated on shadow replicas but refresh and flush do.      */
DECL|method|shouldExecuteReplication
specifier|protected
name|boolean
name|shouldExecuteReplication
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|IndexMetaData
operator|.
name|isIndexUsingShadowReplicas
argument_list|(
name|settings
argument_list|)
operator|==
literal|false
return|;
block|}
DECL|class|PrimaryShardReference
class|class
name|PrimaryShardReference
implements|implements
name|ReplicationOperation
operator|.
name|Primary
argument_list|<
name|Request
argument_list|,
name|ReplicaRequest
argument_list|,
name|PrimaryResult
argument_list|>
implements|,
name|Releasable
block|{
DECL|field|indexShard
specifier|private
specifier|final
name|IndexShard
name|indexShard
decl_stmt|;
DECL|field|operationLock
specifier|private
specifier|final
name|Releasable
name|operationLock
decl_stmt|;
DECL|method|PrimaryShardReference
name|PrimaryShardReference
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
name|Releasable
name|operationLock
parameter_list|)
block|{
name|this
operator|.
name|indexShard
operator|=
name|indexShard
expr_stmt|;
name|this
operator|.
name|operationLock
operator|=
name|operationLock
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|operationLock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|isRelocated
specifier|public
name|boolean
name|isRelocated
parameter_list|()
block|{
return|return
name|indexShard
operator|.
name|state
argument_list|()
operator|==
name|IndexShardState
operator|.
name|RELOCATED
return|;
block|}
annotation|@
name|Override
DECL|method|failShard
specifier|public
name|void
name|failShard
parameter_list|(
name|String
name|reason
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|indexShard
operator|.
name|failShard
argument_list|(
name|reason
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|suppressed
parameter_list|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|suppressed
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|perform
specifier|public
name|PrimaryResult
name|perform
parameter_list|(
name|Request
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|PrimaryResult
name|result
init|=
name|shardOperationOnPrimary
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|result
operator|.
name|replicaRequest
argument_list|()
operator|.
name|primaryTerm
argument_list|(
name|indexShard
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|routingEntry
specifier|public
name|ShardRouting
name|routingEntry
parameter_list|()
block|{
return|return
name|indexShard
operator|.
name|routingEntry
argument_list|()
return|;
block|}
block|}
DECL|class|ReplicasProxy
specifier|final
class|class
name|ReplicasProxy
implements|implements
name|ReplicationOperation
operator|.
name|Replicas
argument_list|<
name|ReplicaRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|performOn
specifier|public
name|void
name|performOn
parameter_list|(
name|ShardRouting
name|replica
parameter_list|,
name|ReplicaRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|listener
parameter_list|)
block|{
name|String
name|nodeId
init|=
name|replica
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNode
name|node
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|NoNodeAvailableException
argument_list|(
literal|"unknown node ["
operator|+
name|nodeId
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|transportReplicaAction
argument_list|,
name|request
argument_list|,
name|transportOptions
argument_list|,
operator|new
name|ActionListenerResponseHandler
argument_list|<>
argument_list|(
name|listener
argument_list|,
parameter_list|()
lambda|->
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|failShard
specifier|public
name|void
name|failShard
parameter_list|(
name|ShardRouting
name|replica
parameter_list|,
name|ShardRouting
name|primary
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|throwable
parameter_list|,
name|Runnable
name|onSuccess
parameter_list|,
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|onFailure
parameter_list|,
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|onIgnoredFailure
parameter_list|)
block|{
name|shardStateAction
operator|.
name|shardFailed
argument_list|(
name|replica
argument_list|,
name|primary
argument_list|,
name|message
argument_list|,
name|throwable
argument_list|,
operator|new
name|ShardStateAction
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|onSuccess
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|shardFailedError
parameter_list|)
block|{
if|if
condition|(
name|shardFailedError
operator|instanceof
name|ShardStateAction
operator|.
name|NoLongerPrimaryShardException
condition|)
block|{
name|onFailure
operator|.
name|accept
argument_list|(
name|shardFailedError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// these can occur if the node is shutting down and are okay
comment|// any other exception here is not expected and merits investigation
assert|assert
name|shardFailedError
operator|instanceof
name|TransportException
operator|||
name|shardFailedError
operator|instanceof
name|NodeClosedException
operator|:
name|shardFailedError
assert|;
name|onIgnoredFailure
operator|.
name|accept
argument_list|(
name|shardFailedError
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the current phase on the task if it isn't null. Pulled into its own      * method because its more convenient that way.      */
DECL|method|setPhase
specifier|static
name|void
name|setPhase
parameter_list|(
name|ReplicationTask
name|task
parameter_list|,
name|String
name|phase
parameter_list|)
block|{
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|setPhase
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

