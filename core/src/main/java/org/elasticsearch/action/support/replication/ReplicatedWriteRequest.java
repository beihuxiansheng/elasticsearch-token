begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.replication
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkShardRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
operator|.
name|SequenceNumbersService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Requests that are both {@linkplain ReplicationRequest}s (run on a shard's primary first, then the replica) and {@linkplain WriteRequest}  * (modify documents on a shard), for example {@link BulkShardRequest}, {@link IndexRequest}, and {@link DeleteRequest}.  */
end_comment

begin_class
DECL|class|ReplicatedWriteRequest
specifier|public
specifier|abstract
class|class
name|ReplicatedWriteRequest
parameter_list|<
name|R
extends|extends
name|ReplicatedWriteRequest
parameter_list|<
name|R
parameter_list|>
parameter_list|>
extends|extends
name|ReplicationRequest
argument_list|<
name|R
argument_list|>
implements|implements
name|WriteRequest
argument_list|<
name|R
argument_list|>
block|{
DECL|field|refreshPolicy
specifier|private
name|RefreshPolicy
name|refreshPolicy
init|=
name|RefreshPolicy
operator|.
name|NONE
decl_stmt|;
DECL|field|seqNo
specifier|private
name|long
name|seqNo
init|=
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
decl_stmt|;
comment|/**      * Constructor for deserialization.      */
DECL|method|ReplicatedWriteRequest
specifier|public
name|ReplicatedWriteRequest
parameter_list|()
block|{     }
DECL|method|ReplicatedWriteRequest
specifier|public
name|ReplicatedWriteRequest
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setRefreshPolicy
specifier|public
name|R
name|setRefreshPolicy
parameter_list|(
name|RefreshPolicy
name|refreshPolicy
parameter_list|)
block|{
name|this
operator|.
name|refreshPolicy
operator|=
name|refreshPolicy
expr_stmt|;
return|return
operator|(
name|R
operator|)
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getRefreshPolicy
specifier|public
name|RefreshPolicy
name|getRefreshPolicy
parameter_list|()
block|{
return|return
name|refreshPolicy
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|refreshPolicy
operator|=
name|RefreshPolicy
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1_UNRELEASED
argument_list|)
condition|)
block|{
name|seqNo
operator|=
name|in
operator|.
name|readZLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|seqNo
operator|=
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|refreshPolicy
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1_UNRELEASED
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeZLong
argument_list|(
name|seqNo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the sequence number for this operation. The sequence number is assigned while the operation      * is performed on the primary shard.      */
DECL|method|getSeqNo
specifier|public
name|long
name|getSeqNo
parameter_list|()
block|{
return|return
name|seqNo
return|;
block|}
comment|/** sets the sequence number for this operation. should only be called on the primary shard */
DECL|method|setSeqNo
specifier|public
name|void
name|setSeqNo
parameter_list|(
name|long
name|seqNo
parameter_list|)
block|{
name|this
operator|.
name|seqNo
operator|=
name|seqNo
expr_stmt|;
block|}
block|}
end_class

end_unit

