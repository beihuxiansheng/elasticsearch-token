begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicatedWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Interface implemented by requests that modify the documents in an index like {@link IndexRequest}, {@link UpdateRequest}, and  * {@link BulkRequest}. Rather than implement this directly most implementers should extend {@link ReplicatedWriteRequest}.  */
end_comment

begin_interface
DECL|interface|WriteRequest
specifier|public
interface|interface
name|WriteRequest
parameter_list|<
name|R
extends|extends
name|WriteRequest
parameter_list|<
name|R
parameter_list|>
parameter_list|>
extends|extends
name|Streamable
block|{
comment|/**      * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}), wait for a refresh (      * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}, the default).      */
DECL|method|setRefreshPolicy
name|R
name|setRefreshPolicy
parameter_list|(
name|RefreshPolicy
name|refreshPolicy
parameter_list|)
function_decl|;
comment|/**      * Parse the refresh policy from a string, only modifying it if the string is non null. Convenient to use with request parsing.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setRefreshPolicy
specifier|default
name|R
name|setRefreshPolicy
parameter_list|(
name|String
name|refreshPolicy
parameter_list|)
block|{
if|if
condition|(
name|refreshPolicy
operator|!=
literal|null
condition|)
block|{
name|setRefreshPolicy
argument_list|(
name|RefreshPolicy
operator|.
name|parse
argument_list|(
name|refreshPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|R
operator|)
name|this
return|;
block|}
comment|/**      * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}), wait for a refresh (      * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}, the default).      */
DECL|method|getRefreshPolicy
name|RefreshPolicy
name|getRefreshPolicy
parameter_list|()
function_decl|;
DECL|method|validate
name|ActionRequestValidationException
name|validate
parameter_list|()
function_decl|;
DECL|enum|RefreshPolicy
enum|enum
name|RefreshPolicy
implements|implements
name|Writeable
block|{
comment|/**          * Don't refresh after this request. The default.          */
DECL|enum constant|NONE
name|NONE
argument_list|(
literal|"false"
argument_list|)
block|,
comment|/**          * Force a refresh as part of this request. This refresh policy does not scale for high indexing or search throughput but is useful          * to present a consistent view to for indices with very low traffic. And it is wonderful for tests!          */
DECL|enum constant|IMMEDIATE
name|IMMEDIATE
argument_list|(
literal|"true"
argument_list|)
block|,
comment|/**          * Leave this request open until a refresh has made the contents of this request visible to search. This refresh policy is          * compatible with high indexing and search throughput but it causes the request to wait to reply until a refresh occurs.          */
DECL|enum constant|WAIT_UNTIL
name|WAIT_UNTIL
argument_list|(
literal|"wait_for"
argument_list|)
block|;
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|RefreshPolicy
name|RefreshPolicy
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**          * Parse the string representation of a refresh policy, usually from a request parameter.          */
DECL|method|parse
specifier|public
specifier|static
name|RefreshPolicy
name|parse
parameter_list|(
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|RefreshPolicy
name|policy
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|policy
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|policy
return|;
block|}
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// Empty string is IMMEDIATE because that makes "POST /test/test/1?refresh" perform
comment|// a refresh which reads well and is what folks are used to.
return|return
name|IMMEDIATE
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown value for refresh: ["
operator|+
name|value
operator|+
literal|"]."
argument_list|)
throw|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|RefreshPolicy
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|RefreshPolicy
operator|.
name|values
argument_list|()
index|[
name|in
operator|.
name|readByte
argument_list|()
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_interface

end_unit

