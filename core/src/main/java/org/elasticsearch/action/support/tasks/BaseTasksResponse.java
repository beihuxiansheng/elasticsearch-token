begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.tasks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|FailedNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|TaskOperationFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Base class for responses of task-related operations  */
end_comment

begin_class
DECL|class|BaseTasksResponse
specifier|public
class|class
name|BaseTasksResponse
extends|extends
name|ActionResponse
block|{
DECL|field|taskFailures
specifier|private
name|List
argument_list|<
name|TaskOperationFailure
argument_list|>
name|taskFailures
decl_stmt|;
DECL|field|nodeFailures
specifier|private
name|List
argument_list|<
name|FailedNodeException
argument_list|>
name|nodeFailures
decl_stmt|;
DECL|method|BaseTasksResponse
specifier|public
name|BaseTasksResponse
parameter_list|()
block|{     }
DECL|method|BaseTasksResponse
specifier|public
name|BaseTasksResponse
parameter_list|(
name|List
argument_list|<
name|TaskOperationFailure
argument_list|>
name|taskFailures
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|FailedNodeException
argument_list|>
name|nodeFailures
parameter_list|)
block|{
name|this
operator|.
name|taskFailures
operator|=
name|taskFailures
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|taskFailures
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeFailures
operator|=
name|nodeFailures
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodeFailures
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The list of task failures exception.      */
DECL|method|getTaskFailures
specifier|public
name|List
argument_list|<
name|TaskOperationFailure
argument_list|>
name|getTaskFailures
parameter_list|()
block|{
return|return
name|taskFailures
return|;
block|}
comment|/**      * The list of node failures exception.      */
DECL|method|getNodeFailures
specifier|public
name|List
argument_list|<
name|FailedNodeException
argument_list|>
name|getNodeFailures
parameter_list|()
block|{
return|return
name|nodeFailures
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TaskOperationFailure
argument_list|>
name|taskFailures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|taskFailures
operator|.
name|add
argument_list|(
operator|new
name|TaskOperationFailure
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|taskFailures
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|taskFailures
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FailedNodeException
argument_list|>
name|nodeFailures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|nodeFailures
operator|.
name|add
argument_list|(
operator|new
name|FailedNodeException
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nodeFailures
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|nodeFailures
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|taskFailures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskOperationFailure
name|exp
range|:
name|taskFailures
control|)
block|{
name|exp
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|nodeFailures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FailedNodeException
name|exp
range|:
name|nodeFailures
control|)
block|{
name|exp
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

