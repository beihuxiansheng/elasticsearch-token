begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.count
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|count
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * The response of the count action.  */
end_comment

begin_class
DECL|class|CountResponse
specifier|public
class|class
name|CountResponse
extends|extends
name|BroadcastResponse
block|{
DECL|field|terminatedEarly
specifier|private
specifier|final
name|boolean
name|terminatedEarly
decl_stmt|;
DECL|field|count
specifier|private
specifier|final
name|long
name|count
decl_stmt|;
DECL|method|CountResponse
specifier|public
name|CountResponse
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|)
block|{
name|super
argument_list|(
name|searchResponse
operator|.
name|getTotalShards
argument_list|()
argument_list|,
name|searchResponse
operator|.
name|getSuccessfulShards
argument_list|()
argument_list|,
name|searchResponse
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|searchResponse
operator|.
name|getShardFailures
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
expr_stmt|;
name|this
operator|.
name|terminatedEarly
operator|=
name|searchResponse
operator|.
name|isTerminatedEarly
argument_list|()
operator|!=
literal|null
operator|&&
name|searchResponse
operator|.
name|isTerminatedEarly
argument_list|()
expr_stmt|;
block|}
comment|/**      * The count of documents matching the query provided.      */
DECL|method|getCount
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
comment|/**      * True if the request has been terminated early due to enough count      */
DECL|method|terminatedEarly
specifier|public
name|boolean
name|terminatedEarly
parameter_list|()
block|{
return|return
name|this
operator|.
name|terminatedEarly
return|;
block|}
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
return|return
name|RestStatus
operator|.
name|status
argument_list|(
name|getSuccessfulShards
argument_list|()
argument_list|,
name|getTotalShards
argument_list|()
argument_list|,
name|getShardFailures
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"CountResponse doesn't support being sent over the wire, just a shortcut to the search api"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"CountResponse doesn't support being sent over the wire, just a shortcut to the search api"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

