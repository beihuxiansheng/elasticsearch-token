begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.snapshots.status
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|status
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Status of a snapshot shards  */
end_comment

begin_class
DECL|class|SnapshotShardsStats
specifier|public
class|class
name|SnapshotShardsStats
implements|implements
name|ToXContent
block|{
DECL|field|initializingShards
specifier|private
name|int
name|initializingShards
decl_stmt|;
DECL|field|startedShards
specifier|private
name|int
name|startedShards
decl_stmt|;
DECL|field|finalizingShards
specifier|private
name|int
name|finalizingShards
decl_stmt|;
DECL|field|doneShards
specifier|private
name|int
name|doneShards
decl_stmt|;
DECL|field|failedShards
specifier|private
name|int
name|failedShards
decl_stmt|;
DECL|field|totalShards
specifier|private
name|int
name|totalShards
decl_stmt|;
DECL|method|SnapshotShardsStats
name|SnapshotShardsStats
parameter_list|(
name|Collection
argument_list|<
name|SnapshotIndexShardStatus
argument_list|>
name|shards
parameter_list|)
block|{
for|for
control|(
name|SnapshotIndexShardStatus
name|shard
range|:
name|shards
control|)
block|{
name|totalShards
operator|++
expr_stmt|;
switch|switch
condition|(
name|shard
operator|.
name|getStage
argument_list|()
condition|)
block|{
case|case
name|INIT
case|:
name|initializingShards
operator|++
expr_stmt|;
break|break;
case|case
name|STARTED
case|:
name|startedShards
operator|++
expr_stmt|;
break|break;
case|case
name|FINALIZE
case|:
name|finalizingShards
operator|++
expr_stmt|;
break|break;
case|case
name|DONE
case|:
name|doneShards
operator|++
expr_stmt|;
break|break;
case|case
name|FAILURE
case|:
name|failedShards
operator|++
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown stage type "
operator|+
name|shard
operator|.
name|getStage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Number of shards with the snapshot in the initializing stage      */
DECL|method|getInitializingShards
specifier|public
name|int
name|getInitializingShards
parameter_list|()
block|{
return|return
name|initializingShards
return|;
block|}
comment|/**      * Number of shards with the snapshot in the started stage      */
DECL|method|getStartedShards
specifier|public
name|int
name|getStartedShards
parameter_list|()
block|{
return|return
name|startedShards
return|;
block|}
comment|/**      * Number of shards with the snapshot in the finalizing stage      */
DECL|method|getFinalizingShards
specifier|public
name|int
name|getFinalizingShards
parameter_list|()
block|{
return|return
name|finalizingShards
return|;
block|}
comment|/**      * Number of shards with completed snapshot      */
DECL|method|getDoneShards
specifier|public
name|int
name|getDoneShards
parameter_list|()
block|{
return|return
name|doneShards
return|;
block|}
comment|/**      * Number of shards with failed snapshot      */
DECL|method|getFailedShards
specifier|public
name|int
name|getFailedShards
parameter_list|()
block|{
return|return
name|failedShards
return|;
block|}
comment|/**      * Total number of shards      */
DECL|method|getTotalShards
specifier|public
name|int
name|getTotalShards
parameter_list|()
block|{
return|return
name|totalShards
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|SHARDS_STATS
specifier|static
specifier|final
name|String
name|SHARDS_STATS
init|=
literal|"shards_stats"
decl_stmt|;
DECL|field|INITIALIZING
specifier|static
specifier|final
name|String
name|INITIALIZING
init|=
literal|"initializing"
decl_stmt|;
DECL|field|STARTED
specifier|static
specifier|final
name|String
name|STARTED
init|=
literal|"started"
decl_stmt|;
DECL|field|FINALIZING
specifier|static
specifier|final
name|String
name|FINALIZING
init|=
literal|"finalizing"
decl_stmt|;
DECL|field|DONE
specifier|static
specifier|final
name|String
name|DONE
init|=
literal|"done"
decl_stmt|;
DECL|field|FAILED
specifier|static
specifier|final
name|String
name|FAILED
init|=
literal|"failed"
decl_stmt|;
DECL|field|TOTAL
specifier|static
specifier|final
name|String
name|TOTAL
init|=
literal|"total"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|SHARDS_STATS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|INITIALIZING
argument_list|,
name|getInitializingShards
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|STARTED
argument_list|,
name|getStartedShards
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|FINALIZING
argument_list|,
name|getFinalizingShards
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|DONE
argument_list|,
name|getDoneShards
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|FAILED
argument_list|,
name|getFailedShards
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL
argument_list|,
name|getTotalShards
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

