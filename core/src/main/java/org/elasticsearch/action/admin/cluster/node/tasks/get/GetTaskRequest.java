begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.node.tasks.get
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|get
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
operator|.
name|addValidationError
import|;
end_import

begin_comment
comment|/**  * A request to get node tasks  */
end_comment

begin_class
DECL|class|GetTaskRequest
specifier|public
class|class
name|GetTaskRequest
extends|extends
name|ActionRequest
argument_list|<
name|GetTaskRequest
argument_list|>
block|{
DECL|field|taskId
specifier|private
name|TaskId
name|taskId
init|=
name|TaskId
operator|.
name|EMPTY_TASK_ID
decl_stmt|;
DECL|field|waitForCompletion
specifier|private
name|boolean
name|waitForCompletion
init|=
literal|false
decl_stmt|;
DECL|field|timeout
specifier|private
name|TimeValue
name|timeout
init|=
literal|null
decl_stmt|;
comment|/**      * Get the TaskId to look up.      */
DECL|method|getTaskId
specifier|public
name|TaskId
name|getTaskId
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
comment|/**      * Set the TaskId to look up. Required.      */
DECL|method|setTaskId
specifier|public
name|GetTaskRequest
name|setTaskId
parameter_list|(
name|TaskId
name|taskId
parameter_list|)
block|{
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should this request wait for all found tasks to complete?      */
DECL|method|getWaitForCompletion
specifier|public
name|boolean
name|getWaitForCompletion
parameter_list|()
block|{
return|return
name|waitForCompletion
return|;
block|}
comment|/**      * Should this request wait for all found tasks to complete?      */
DECL|method|setWaitForCompletion
specifier|public
name|GetTaskRequest
name|setWaitForCompletion
parameter_list|(
name|boolean
name|waitForCompletion
parameter_list|)
block|{
name|this
operator|.
name|waitForCompletion
operator|=
name|waitForCompletion
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Timeout to wait for any async actions this request must take. It must take anywhere from 0 to 2.      */
DECL|method|getTimeout
specifier|public
name|TimeValue
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
comment|/**      * Timeout to wait for any async actions this request must take. It must take anywhere from 0 to 2.      */
DECL|method|setTimeout
specifier|public
name|GetTaskRequest
name|setTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|nodeRequest
name|GetTaskRequest
name|nodeRequest
parameter_list|(
name|String
name|thisNodeId
parameter_list|,
name|long
name|thisTaskId
parameter_list|)
block|{
name|GetTaskRequest
name|copy
init|=
operator|new
name|GetTaskRequest
argument_list|()
decl_stmt|;
name|copy
operator|.
name|setParentTask
argument_list|(
name|thisNodeId
argument_list|,
name|thisTaskId
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setTaskId
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setWaitForCompletion
argument_list|(
name|waitForCompletion
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|false
operator|==
name|getTaskId
argument_list|()
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"task id is required"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
return|return
name|validationException
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|taskId
operator|=
name|TaskId
operator|.
name|readFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|timeout
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|TimeValue
operator|::
operator|new
argument_list|)
expr_stmt|;
name|waitForCompletion
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|waitForCompletion
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

