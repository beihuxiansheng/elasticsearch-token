begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.node.info
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Information about plugins and modules  */
end_comment

begin_class
DECL|class|PluginsAndModules
specifier|public
class|class
name|PluginsAndModules
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|plugins
specifier|private
specifier|final
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|plugins
decl_stmt|;
DECL|field|modules
specifier|private
specifier|final
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|modules
decl_stmt|;
DECL|method|PluginsAndModules
specifier|public
name|PluginsAndModules
parameter_list|(
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|plugins
parameter_list|,
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|modules
parameter_list|)
block|{
name|this
operator|.
name|plugins
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|plugins
argument_list|)
expr_stmt|;
name|this
operator|.
name|modules
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|modules
argument_list|)
expr_stmt|;
block|}
DECL|method|PluginsAndModules
specifier|public
name|PluginsAndModules
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|pluginsSize
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|plugins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pluginsSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pluginsSize
condition|;
name|i
operator|++
control|)
block|{
name|plugins
operator|.
name|add
argument_list|(
operator|new
name|PluginInfo
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|plugins
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|plugins
argument_list|)
expr_stmt|;
name|int
name|modulesSize
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|modules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|modulesSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modulesSize
condition|;
name|i
operator|++
control|)
block|{
name|modules
operator|.
name|add
argument_list|(
operator|new
name|PluginInfo
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|modules
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|modules
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|plugins
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PluginInfo
name|plugin
range|:
name|getPluginInfos
argument_list|()
control|)
block|{
name|plugin
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|modules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PluginInfo
name|module
range|:
name|getModuleInfos
argument_list|()
control|)
block|{
name|module
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns an ordered list based on plugins name      */
DECL|method|getPluginInfos
specifier|public
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|getPluginInfos
parameter_list|()
block|{
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|plugins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|plugins
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|plugins
argument_list|,
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|)
lambda|->
name|p1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|p2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|plugins
return|;
block|}
comment|/**      * Returns an ordered list based on modules name      */
DECL|method|getModuleInfos
specifier|public
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|getModuleInfos
parameter_list|()
block|{
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|modules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|modules
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|modules
argument_list|,
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|)
lambda|->
name|p1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|p2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|modules
return|;
block|}
DECL|method|addPlugin
specifier|public
name|void
name|addPlugin
parameter_list|(
name|PluginInfo
name|info
parameter_list|)
block|{
name|plugins
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|addModule
specifier|public
name|void
name|addModule
parameter_list|(
name|PluginInfo
name|info
parameter_list|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"plugins"
argument_list|)
expr_stmt|;
for|for
control|(
name|PluginInfo
name|pluginInfo
range|:
name|getPluginInfos
argument_list|()
control|)
block|{
name|pluginInfo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
comment|// TODO: not ideal, make a better api for this (e.g. with jar metadata, and so on)
name|builder
operator|.
name|startArray
argument_list|(
literal|"modules"
argument_list|)
expr_stmt|;
for|for
control|(
name|PluginInfo
name|moduleInfo
range|:
name|getModuleInfos
argument_list|()
control|)
block|{
name|moduleInfo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

