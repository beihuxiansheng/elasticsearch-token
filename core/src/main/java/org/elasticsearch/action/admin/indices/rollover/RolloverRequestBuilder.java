begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.rollover
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|rollover
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|MasterNodeOperationRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ElasticsearchClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_class
DECL|class|RolloverRequestBuilder
specifier|public
class|class
name|RolloverRequestBuilder
extends|extends
name|MasterNodeOperationRequestBuilder
argument_list|<
name|RolloverRequest
argument_list|,
name|RolloverResponse
argument_list|,
name|RolloverRequestBuilder
argument_list|>
block|{
DECL|method|RolloverRequestBuilder
specifier|public
name|RolloverRequestBuilder
parameter_list|(
name|ElasticsearchClient
name|client
parameter_list|,
name|RolloverAction
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|action
argument_list|,
operator|new
name|RolloverRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setAlias
specifier|public
name|RolloverRequestBuilder
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|request
operator|.
name|setAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setNewIndexName
specifier|public
name|RolloverRequestBuilder
name|setNewIndexName
parameter_list|(
name|String
name|newIndexName
parameter_list|)
block|{
name|this
operator|.
name|request
operator|.
name|setNewIndexName
argument_list|(
name|newIndexName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addMaxIndexAgeCondition
specifier|public
name|RolloverRequestBuilder
name|addMaxIndexAgeCondition
parameter_list|(
name|TimeValue
name|age
parameter_list|)
block|{
name|this
operator|.
name|request
operator|.
name|addMaxIndexAgeCondition
argument_list|(
name|age
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addMaxIndexDocsCondition
specifier|public
name|RolloverRequestBuilder
name|addMaxIndexDocsCondition
parameter_list|(
name|long
name|docs
parameter_list|)
block|{
name|this
operator|.
name|request
operator|.
name|addMaxIndexDocsCondition
argument_list|(
name|docs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|dryRun
specifier|public
name|RolloverRequestBuilder
name|dryRun
parameter_list|(
name|boolean
name|dryRun
parameter_list|)
block|{
name|this
operator|.
name|request
operator|.
name|dryRun
argument_list|(
name|dryRun
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|settings
specifier|public
name|RolloverRequestBuilder
name|settings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|request
operator|.
name|getCreateIndexRequest
argument_list|()
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|alias
specifier|public
name|RolloverRequestBuilder
name|alias
parameter_list|(
name|Alias
name|alias
parameter_list|)
block|{
name|this
operator|.
name|request
operator|.
name|getCreateIndexRequest
argument_list|()
operator|.
name|alias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|mapping
specifier|public
name|RolloverRequestBuilder
name|mapping
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|source
parameter_list|)
block|{
name|this
operator|.
name|request
operator|.
name|getCreateIndexRequest
argument_list|()
operator|.
name|mapping
argument_list|(
name|type
argument_list|,
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the number of shard copies that should be active for creation of the      * new rollover index to return. Defaults to {@link ActiveShardCount#DEFAULT}, which will      * wait for one shard copy (the primary) to become active. Set this value to      * {@link ActiveShardCount#ALL} to wait for all shards (primary and all replicas) to be active      * before returning. Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any      * non-negative integer, up to the number of copies per shard (number of replicas + 1),      * to wait for the desired amount of shard copies to become active before returning.      * Index creation will only wait up until the timeout value for the number of shard copies      * to be active before returning.  Check {@link RolloverResponse#isShardsAcked()} to      * determine if the requisite shard copies were all started before returning or timing out.      *      * @param waitForActiveShards number of active shard copies to wait on      */
DECL|method|waitForActiveShards
specifier|public
name|RolloverRequestBuilder
name|waitForActiveShards
parameter_list|(
name|ActiveShardCount
name|waitForActiveShards
parameter_list|)
block|{
name|this
operator|.
name|request
operator|.
name|setWaitForActiveShards
argument_list|(
name|waitForActiveShards
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical      * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}      * to get the ActiveShardCount.      */
DECL|method|waitForActiveShards
specifier|public
name|RolloverRequestBuilder
name|waitForActiveShards
parameter_list|(
specifier|final
name|int
name|waitForActiveShards
parameter_list|)
block|{
return|return
name|waitForActiveShards
argument_list|(
name|ActiveShardCount
operator|.
name|from
argument_list|(
name|waitForActiveShards
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

