begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.forcemerge
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|forcemerge
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A request to force merging the segments of one or more indices. In order to  * run a merge on all the indices, pass an empty array or<tt>null</tt> for the  * indices.  * {@link #maxNumSegments(int)} allows to control the number of segments  * to force merge down to. Defaults to simply checking if a merge needs  * to execute, and if so, executes it  *  * @see org.elasticsearch.client.Requests#forceMergeRequest(String...)  * @see org.elasticsearch.client.IndicesAdminClient#forceMerge(ForceMergeRequest)  * @see ForceMergeResponse  */
end_comment

begin_class
DECL|class|ForceMergeRequest
specifier|public
class|class
name|ForceMergeRequest
extends|extends
name|BroadcastRequest
argument_list|<
name|ForceMergeRequest
argument_list|>
block|{
DECL|class|Defaults
specifier|public
specifier|static
specifier|final
class|class
name|Defaults
block|{
DECL|field|MAX_NUM_SEGMENTS
specifier|public
specifier|static
specifier|final
name|int
name|MAX_NUM_SEGMENTS
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|ONLY_EXPUNGE_DELETES
specifier|public
specifier|static
specifier|final
name|boolean
name|ONLY_EXPUNGE_DELETES
init|=
literal|false
decl_stmt|;
DECL|field|FLUSH
specifier|public
specifier|static
specifier|final
name|boolean
name|FLUSH
init|=
literal|true
decl_stmt|;
block|}
DECL|field|maxNumSegments
specifier|private
name|int
name|maxNumSegments
init|=
name|Defaults
operator|.
name|MAX_NUM_SEGMENTS
decl_stmt|;
DECL|field|onlyExpungeDeletes
specifier|private
name|boolean
name|onlyExpungeDeletes
init|=
name|Defaults
operator|.
name|ONLY_EXPUNGE_DELETES
decl_stmt|;
DECL|field|flush
specifier|private
name|boolean
name|flush
init|=
name|Defaults
operator|.
name|FLUSH
decl_stmt|;
comment|/**      * Constructs a merge request over one or more indices.      *      * @param indices The indices to merge, no indices passed means all indices will be merged.      */
DECL|method|ForceMergeRequest
specifier|public
name|ForceMergeRequest
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|super
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
DECL|method|ForceMergeRequest
specifier|public
name|ForceMergeRequest
parameter_list|()
block|{      }
comment|/**      * Will merge the index down to&lt;= maxNumSegments. By default, will cause the merge      * process to merge down to half the configured number of segments.      */
DECL|method|maxNumSegments
specifier|public
name|int
name|maxNumSegments
parameter_list|()
block|{
return|return
name|maxNumSegments
return|;
block|}
comment|/**      * Will merge the index down to&lt;= maxNumSegments. By default, will cause the merge      * process to merge down to half the configured number of segments.      */
DECL|method|maxNumSegments
specifier|public
name|ForceMergeRequest
name|maxNumSegments
parameter_list|(
name|int
name|maxNumSegments
parameter_list|)
block|{
name|this
operator|.
name|maxNumSegments
operator|=
name|maxNumSegments
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should the merge only expunge deletes from the index, without full merging.      * Defaults to full merging (<tt>false</tt>).      */
DECL|method|onlyExpungeDeletes
specifier|public
name|boolean
name|onlyExpungeDeletes
parameter_list|()
block|{
return|return
name|onlyExpungeDeletes
return|;
block|}
comment|/**      * Should the merge only expunge deletes from the index, without full merge.      * Defaults to full merging (<tt>false</tt>).      */
DECL|method|onlyExpungeDeletes
specifier|public
name|ForceMergeRequest
name|onlyExpungeDeletes
parameter_list|(
name|boolean
name|onlyExpungeDeletes
parameter_list|)
block|{
name|this
operator|.
name|onlyExpungeDeletes
operator|=
name|onlyExpungeDeletes
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should flush be performed after the merge. Defaults to<tt>true</tt>.      */
DECL|method|flush
specifier|public
name|boolean
name|flush
parameter_list|()
block|{
return|return
name|flush
return|;
block|}
comment|/**      * Should flush be performed after the merge. Defaults to<tt>true</tt>.      */
DECL|method|flush
specifier|public
name|ForceMergeRequest
name|flush
parameter_list|(
name|boolean
name|flush
parameter_list|)
block|{
name|this
operator|.
name|flush
operator|=
name|flush
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|maxNumSegments
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|onlyExpungeDeletes
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|flush
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|maxNumSegments
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|onlyExpungeDeletes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|flush
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ForceMergeRequest{"
operator|+
literal|"maxNumSegments="
operator|+
name|maxNumSegments
operator|+
literal|", onlyExpungeDeletes="
operator|+
name|onlyExpungeDeletes
operator|+
literal|", flush="
operator|+
name|flush
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

