begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.snapshots.restore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|restore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|MasterNodeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
operator|.
name|addValidationError
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
operator|.
name|hasLength
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|readSettingsFromStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|writeSettingsToStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
operator|.
name|nodeBooleanValue
import|;
end_import

begin_comment
comment|/**  * Restore snapshot request  */
end_comment

begin_class
DECL|class|RestoreSnapshotRequest
specifier|public
class|class
name|RestoreSnapshotRequest
extends|extends
name|MasterNodeRequest
argument_list|<
name|RestoreSnapshotRequest
argument_list|>
block|{
DECL|field|snapshot
specifier|private
name|String
name|snapshot
decl_stmt|;
DECL|field|repository
specifier|private
name|String
name|repository
decl_stmt|;
DECL|field|indices
specifier|private
name|String
index|[]
name|indices
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|indicesOptions
specifier|private
name|IndicesOptions
name|indicesOptions
init|=
name|IndicesOptions
operator|.
name|strictExpandOpen
argument_list|()
decl_stmt|;
DECL|field|renamePattern
specifier|private
name|String
name|renamePattern
decl_stmt|;
DECL|field|renameReplacement
specifier|private
name|String
name|renameReplacement
decl_stmt|;
DECL|field|waitForCompletion
specifier|private
name|boolean
name|waitForCompletion
decl_stmt|;
DECL|field|includeGlobalState
specifier|private
name|boolean
name|includeGlobalState
init|=
literal|true
decl_stmt|;
DECL|field|partial
specifier|private
name|boolean
name|partial
init|=
literal|false
decl_stmt|;
DECL|field|includeAliases
specifier|private
name|boolean
name|includeAliases
init|=
literal|true
decl_stmt|;
DECL|field|settings
specifier|private
name|Settings
name|settings
init|=
name|EMPTY_SETTINGS
decl_stmt|;
DECL|field|indexSettings
specifier|private
name|Settings
name|indexSettings
init|=
name|EMPTY_SETTINGS
decl_stmt|;
DECL|field|ignoreIndexSettings
specifier|private
name|String
index|[]
name|ignoreIndexSettings
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|method|RestoreSnapshotRequest
name|RestoreSnapshotRequest
parameter_list|()
block|{     }
comment|/**      * Constructs a new put repository request with the provided repository and snapshot names.      *      * @param repository repository name      * @param snapshot   snapshot name      */
DECL|method|RestoreSnapshotRequest
specifier|public
name|RestoreSnapshotRequest
parameter_list|(
name|String
name|repository
parameter_list|,
name|String
name|snapshot
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"name is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"repository is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indices
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"indices are missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indicesOptions
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"indicesOptions is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"settings are missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexSettings
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"indexSettings are missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ignoreIndexSettings
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"ignoreIndexSettings are missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
return|return
name|validationException
return|;
block|}
comment|/**      * Sets the name of the snapshot.      *      * @param snapshot snapshot name      * @return this request      */
DECL|method|snapshot
specifier|public
name|RestoreSnapshotRequest
name|snapshot
parameter_list|(
name|String
name|snapshot
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the name of the snapshot.      *      * @return snapshot name      */
DECL|method|snapshot
specifier|public
name|String
name|snapshot
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshot
return|;
block|}
comment|/**      * Sets repository name      *      * @param repository repository name      * @return this request      */
DECL|method|repository
specifier|public
name|RestoreSnapshotRequest
name|repository
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns repository name      *      * @return repository name      */
DECL|method|repository
specifier|public
name|String
name|repository
parameter_list|()
block|{
return|return
name|this
operator|.
name|repository
return|;
block|}
comment|/**      * Sets the list of indices that should be restored from snapshot      *<p/>      * The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with      * prefix "test" except index "test42". Aliases are not supported. An empty list or {"_all"} will restore all open      * indices in the snapshot.      *      * @param indices list of indices      * @return this request      */
DECL|method|indices
specifier|public
name|RestoreSnapshotRequest
name|indices
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|this
operator|.
name|indices
operator|=
name|indices
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the list of indices that should be restored from snapshot      *<p/>      * The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with      * prefix "test" except index "test42". Aliases are not supported. An empty list or {"_all"} will restore all open      * indices in the snapshot.      *      * @param indices list of indices      * @return this request      */
DECL|method|indices
specifier|public
name|RestoreSnapshotRequest
name|indices
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|)
block|{
name|this
operator|.
name|indices
operator|=
name|indices
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|indices
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns list of indices that should be restored from snapshot      *      * @return      */
DECL|method|indices
specifier|public
name|String
index|[]
name|indices
parameter_list|()
block|{
return|return
name|indices
return|;
block|}
comment|/**      * Specifies what type of requested indices to ignore and how to deal with wildcard expressions.      * For example indices that don't exist.      *      * @return the desired behaviour regarding indices to ignore and wildcard indices expression      */
DECL|method|indicesOptions
specifier|public
name|IndicesOptions
name|indicesOptions
parameter_list|()
block|{
return|return
name|indicesOptions
return|;
block|}
comment|/**      * Specifies what type of requested indices to ignore and how to deal with wildcard expressions.      * For example indices that don't exist.      *      * @param indicesOptions the desired behaviour regarding indices to ignore and wildcard indices expressions      * @return this request      */
DECL|method|indicesOptions
specifier|public
name|RestoreSnapshotRequest
name|indicesOptions
parameter_list|(
name|IndicesOptions
name|indicesOptions
parameter_list|)
block|{
name|this
operator|.
name|indicesOptions
operator|=
name|indicesOptions
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets rename pattern that should be applied to restored indices.      *<p/>      * Indices that match the rename pattern will be renamed according to {@link #renameReplacement(String)}. The      * rename pattern is applied according to the {@link java.util.regex.Matcher#appendReplacement(StringBuffer, String)}      * The request will fail if two or more indices will be renamed into the same name.      *      * @param renamePattern rename pattern      * @return this request      */
DECL|method|renamePattern
specifier|public
name|RestoreSnapshotRequest
name|renamePattern
parameter_list|(
name|String
name|renamePattern
parameter_list|)
block|{
name|this
operator|.
name|renamePattern
operator|=
name|renamePattern
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns rename pattern      *      * @return rename pattern      */
DECL|method|renamePattern
specifier|public
name|String
name|renamePattern
parameter_list|()
block|{
return|return
name|renamePattern
return|;
block|}
comment|/**      * Sets rename replacement      *<p/>      * See {@link #renamePattern(String)} for more information.      *      * @param renameReplacement rename replacement      * @return      */
DECL|method|renameReplacement
specifier|public
name|RestoreSnapshotRequest
name|renameReplacement
parameter_list|(
name|String
name|renameReplacement
parameter_list|)
block|{
name|this
operator|.
name|renameReplacement
operator|=
name|renameReplacement
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns rename replacement      *      * @return rename replacement      */
DECL|method|renameReplacement
specifier|public
name|String
name|renameReplacement
parameter_list|()
block|{
return|return
name|renameReplacement
return|;
block|}
comment|/**      * If this parameter is set to true the operation will wait for completion of restore process before returning.      *      * @param waitForCompletion if true the operation will wait for completion      * @return this request      */
DECL|method|waitForCompletion
specifier|public
name|RestoreSnapshotRequest
name|waitForCompletion
parameter_list|(
name|boolean
name|waitForCompletion
parameter_list|)
block|{
name|this
operator|.
name|waitForCompletion
operator|=
name|waitForCompletion
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns wait for completion setting      *      * @return true if the operation will wait for completion      */
DECL|method|waitForCompletion
specifier|public
name|boolean
name|waitForCompletion
parameter_list|()
block|{
return|return
name|waitForCompletion
return|;
block|}
comment|/**      * Returns true if indices with failed to snapshot shards should be partially restored.      *      * @return true if indices with failed to snapshot shards should be partially restored      */
DECL|method|partial
specifier|public
name|boolean
name|partial
parameter_list|()
block|{
return|return
name|partial
return|;
block|}
comment|/**      * Set to true to allow indices with failed to snapshot shards should be partially restored.      *      * @param partial true if indices with failed to snapshot shards should be partially restored.      * @return this request      */
DECL|method|partial
specifier|public
name|RestoreSnapshotRequest
name|partial
parameter_list|(
name|boolean
name|partial
parameter_list|)
block|{
name|this
operator|.
name|partial
operator|=
name|partial
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets repository-specific restore settings.      *<p/>      * See repository documentation for more information.      *      * @param settings repository-specific snapshot settings      * @return this request      */
DECL|method|settings
specifier|public
name|RestoreSnapshotRequest
name|settings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets repository-specific restore settings.      *<p/>      * See repository documentation for more information.      *      * @param settings repository-specific snapshot settings      * @return this request      */
DECL|method|settings
specifier|public
name|RestoreSnapshotRequest
name|settings
parameter_list|(
name|Settings
operator|.
name|Builder
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets repository-specific restore settings in JSON, YAML or properties format      *<p/>      * See repository documentation for more information.      *      * @param source repository-specific snapshot settings      * @return this request      */
DECL|method|settings
specifier|public
name|RestoreSnapshotRequest
name|settings
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|loadFromSource
argument_list|(
name|source
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets repository-specific restore settings      *<p/>      * See repository documentation for more information.      *      * @param source repository-specific snapshot settings      * @return this request      */
DECL|method|settings
specifier|public
name|RestoreSnapshotRequest
name|settings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|settings
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchGenerationException
argument_list|(
literal|"Failed to generate ["
operator|+
name|source
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Returns repository-specific restore settings      *      * @return restore settings      */
DECL|method|settings
specifier|public
name|Settings
name|settings
parameter_list|()
block|{
return|return
name|this
operator|.
name|settings
return|;
block|}
comment|/**      * Sets the list of index settings and index settings groups that shouldn't be restored from snapshot      */
DECL|method|ignoreIndexSettings
specifier|public
name|RestoreSnapshotRequest
name|ignoreIndexSettings
parameter_list|(
name|String
modifier|...
name|ignoreIndexSettings
parameter_list|)
block|{
name|this
operator|.
name|ignoreIndexSettings
operator|=
name|ignoreIndexSettings
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the list of index settings and index settings groups that shouldn't be restored from snapshot      */
DECL|method|ignoreIndexSettings
specifier|public
name|RestoreSnapshotRequest
name|ignoreIndexSettings
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ignoreIndexSettings
parameter_list|)
block|{
name|this
operator|.
name|ignoreIndexSettings
operator|=
name|ignoreIndexSettings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|ignoreIndexSettings
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the list of index settings and index settings groups that shouldn't be restored from snapshot      */
DECL|method|ignoreIndexSettings
specifier|public
name|String
index|[]
name|ignoreIndexSettings
parameter_list|()
block|{
return|return
name|ignoreIndexSettings
return|;
block|}
comment|/**      * If set to true the restore procedure will restore global cluster state.      *<p/>      * The global cluster state includes persistent settings and index template definitions.      *      * @param includeGlobalState true if global state should be restored from the snapshot      * @return this request      */
DECL|method|includeGlobalState
specifier|public
name|RestoreSnapshotRequest
name|includeGlobalState
parameter_list|(
name|boolean
name|includeGlobalState
parameter_list|)
block|{
name|this
operator|.
name|includeGlobalState
operator|=
name|includeGlobalState
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns true if global state should be restored from this snapshot      *      * @return true if global state should be restored      */
DECL|method|includeGlobalState
specifier|public
name|boolean
name|includeGlobalState
parameter_list|()
block|{
return|return
name|includeGlobalState
return|;
block|}
comment|/**      * If set to true the restore procedure will restore aliases      *      * @param includeAliases true if aliases should be restored from the snapshot      * @return this request      */
DECL|method|includeAliases
specifier|public
name|RestoreSnapshotRequest
name|includeAliases
parameter_list|(
name|boolean
name|includeAliases
parameter_list|)
block|{
name|this
operator|.
name|includeAliases
operator|=
name|includeAliases
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns true if aliases should be restored from this snapshot      *      * @return true if aliases should be restored      */
DECL|method|includeAliases
specifier|public
name|boolean
name|includeAliases
parameter_list|()
block|{
return|return
name|includeAliases
return|;
block|}
comment|/**      * Sets settings that should be added/changed in all restored indices      */
DECL|method|indexSettings
specifier|public
name|RestoreSnapshotRequest
name|indexSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|indexSettings
operator|=
name|settings
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets settings that should be added/changed in all restored indices      */
DECL|method|indexSettings
specifier|public
name|RestoreSnapshotRequest
name|indexSettings
parameter_list|(
name|Settings
operator|.
name|Builder
name|settings
parameter_list|)
block|{
name|this
operator|.
name|indexSettings
operator|=
name|settings
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets settings that should be added/changed in all restored indices      */
DECL|method|indexSettings
specifier|public
name|RestoreSnapshotRequest
name|indexSettings
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|this
operator|.
name|indexSettings
operator|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|loadFromSource
argument_list|(
name|source
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets settings that should be added/changed in all restored indices      */
DECL|method|indexSettings
specifier|public
name|RestoreSnapshotRequest
name|indexSettings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|indexSettings
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchGenerationException
argument_list|(
literal|"Failed to generate ["
operator|+
name|source
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Returns settings that should be added/changed in all restored indices      */
DECL|method|indexSettings
specifier|public
name|Settings
name|indexSettings
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexSettings
return|;
block|}
comment|/**      * Parses restore definition      *      * @param source restore definition      * @return this request      */
DECL|method|source
specifier|public
name|RestoreSnapshotRequest
name|source
parameter_list|(
name|XContentBuilder
name|source
parameter_list|)
block|{
try|try
block|{
return|return
name|source
argument_list|(
name|source
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to build json for repository request"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Parses restore definition      *      * @param source restore definition      * @return this request      */
DECL|method|source
specifier|public
name|RestoreSnapshotRequest
name|source
parameter_list|(
name|Map
name|source
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|source
operator|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"indices"
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|indices
argument_list|(
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|ArrayList
condition|)
block|{
name|indices
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"malformed indices section, should be an array of strings"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"partial"
argument_list|)
condition|)
block|{
name|partial
argument_list|(
name|nodeBooleanValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"settings"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"malformed settings section"
argument_list|)
throw|;
block|}
name|settings
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"include_global_state"
argument_list|)
condition|)
block|{
name|includeGlobalState
operator|=
name|nodeBooleanValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"include_aliases"
argument_list|)
condition|)
block|{
name|includeAliases
operator|=
name|nodeBooleanValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"rename_pattern"
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|renamePattern
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"malformed rename_pattern"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"rename_replacement"
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|renameReplacement
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"malformed rename_replacement"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"index_settings"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"malformed index_settings section"
argument_list|)
throw|;
block|}
name|indexSettings
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"ignore_index_settings"
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|ignoreIndexSettings
argument_list|(
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
name|ignoreIndexSettings
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"malformed ignore_index_settings section, should be an array of strings"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|IndicesOptions
operator|.
name|isIndicesOptions
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown parameter "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
block|}
name|indicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|fromMap
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|source
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Parses restore definition      *<p/>      * JSON, YAML and properties formats are supported      *      * @param source restore definition      * @return this request      */
DECL|method|source
specifier|public
name|RestoreSnapshotRequest
name|source
parameter_list|(
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|hasLength
argument_list|(
name|source
argument_list|)
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
init|)
block|{
return|return
name|source
argument_list|(
name|parser
operator|.
name|mapOrdered
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to parse repository source ["
operator|+
name|source
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * Parses restore definition      *<p/>      * JSON, YAML and properties formats are supported      *      * @param source restore definition      * @return this request      */
DECL|method|source
specifier|public
name|RestoreSnapshotRequest
name|source
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
return|return
name|source
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Parses restore definition      *<p/>      * JSON, YAML and properties formats are supported      *      * @param source restore definition      * @param offset offset      * @param length length      * @return this request      */
DECL|method|source
specifier|public
name|RestoreSnapshotRequest
name|source
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
init|)
block|{
return|return
name|source
argument_list|(
name|parser
operator|.
name|mapOrdered
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to parse repository source"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * Parses restore definition      *<p/>      * JSON, YAML and properties formats are supported      *      * @param source restore definition      * @return this request      */
DECL|method|source
specifier|public
name|RestoreSnapshotRequest
name|source
parameter_list|(
name|BytesReference
name|source
parameter_list|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
init|)
block|{
return|return
name|source
argument_list|(
name|parser
operator|.
name|mapOrdered
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to parse template source"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|repository
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|indices
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
name|indicesOptions
operator|=
name|IndicesOptions
operator|.
name|readIndicesOptions
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|renamePattern
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|renameReplacement
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|waitForCompletion
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|includeGlobalState
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|partial
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|includeAliases
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|settings
operator|=
name|readSettingsFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|indexSettings
operator|=
name|readSettingsFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ignoreIndexSettings
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|indicesOptions
operator|.
name|writeIndicesOptions
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|renamePattern
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|renameReplacement
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|waitForCompletion
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|includeGlobalState
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|partial
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|includeAliases
argument_list|)
expr_stmt|;
name|writeSettingsToStream
argument_list|(
name|settings
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|writeSettingsToStream
argument_list|(
name|indexSettings
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|ignoreIndexSettings
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

