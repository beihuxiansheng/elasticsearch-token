begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.rollover
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|rollover
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|IndicesAliasesClusterStateUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexClusterStateUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|IndicesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|TransportMasterNodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ack
operator|.
name|ClusterStateUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|AliasAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|AliasOrIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaDataCreateIndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaDataIndexAliasesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|DocsStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Main class to swap the index pointed to by an alias, given some predicates  */
end_comment

begin_class
DECL|class|TransportRolloverAction
specifier|public
class|class
name|TransportRolloverAction
extends|extends
name|TransportMasterNodeAction
argument_list|<
name|RolloverRequest
argument_list|,
name|RolloverResponse
argument_list|>
block|{
DECL|field|createIndexService
specifier|private
specifier|final
name|MetaDataCreateIndexService
name|createIndexService
decl_stmt|;
DECL|field|indexAliasesService
specifier|private
specifier|final
name|MetaDataIndexAliasesService
name|indexAliasesService
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportRolloverAction
specifier|public
name|TransportRolloverAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|MetaDataCreateIndexService
name|createIndexService
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|MetaDataIndexAliasesService
name|indexAliasesService
parameter_list|,
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|RolloverAction
operator|.
name|NAME
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|RolloverRequest
operator|::
operator|new
argument_list|)
expr_stmt|;
name|this
operator|.
name|createIndexService
operator|=
name|createIndexService
expr_stmt|;
name|this
operator|.
name|indexAliasesService
operator|=
name|indexAliasesService
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|protected
name|String
name|executor
parameter_list|()
block|{
comment|// we go async right away
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|protected
name|RolloverResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|RolloverResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|checkBlock
specifier|protected
name|ClusterBlockException
name|checkBlock
parameter_list|(
name|RolloverRequest
name|request
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|IndicesOptions
name|indicesOptions
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|request
operator|.
name|indicesOptions
argument_list|()
operator|.
name|expandWildcardsOpen
argument_list|()
argument_list|,
name|request
operator|.
name|indicesOptions
argument_list|()
operator|.
name|expandWildcardsClosed
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|indicesBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|METADATA_WRITE
argument_list|,
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|state
argument_list|,
name|indicesOptions
argument_list|,
name|request
operator|.
name|indices
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|masterOperation
specifier|protected
name|void
name|masterOperation
parameter_list|(
specifier|final
name|RolloverRequest
name|rolloverRequest
parameter_list|,
specifier|final
name|ClusterState
name|state
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|RolloverResponse
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|MetaData
name|metaData
init|=
name|state
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|validate
argument_list|(
name|metaData
argument_list|,
name|rolloverRequest
argument_list|)
expr_stmt|;
specifier|final
name|AliasOrIndex
name|aliasOrIndex
init|=
name|metaData
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|get
argument_list|(
name|rolloverRequest
operator|.
name|getSourceAlias
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|aliasOrIndex
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sourceIndexName
init|=
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
name|sourceIndexName
argument_list|)
operator|.
name|clear
argument_list|()
operator|.
name|setDocs
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|IndicesStatsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IndicesStatsResponse
name|indicesStatsResponse
parameter_list|)
block|{
specifier|final
name|IndexMetaData
name|sourceIndex
init|=
name|metaData
operator|.
name|index
argument_list|(
name|sourceIndexName
argument_list|)
decl_stmt|;
name|DocsStats
name|docsStats
init|=
name|indicesStatsResponse
operator|.
name|getTotal
argument_list|()
operator|.
name|getDocs
argument_list|()
decl_stmt|;
name|long
name|docCount
init|=
name|docsStats
operator|==
literal|null
condition|?
literal|0
else|:
name|docsStats
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|long
name|indexAge
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|sourceIndex
operator|.
name|getCreationDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|satisfiesConditions
argument_list|(
name|rolloverRequest
operator|.
name|getConditions
argument_list|()
argument_list|,
name|docCount
argument_list|,
name|indexAge
argument_list|)
condition|)
block|{
specifier|final
name|String
name|rolloverIndexName
init|=
name|generateRolloverIndexName
argument_list|(
name|sourceIndexName
argument_list|)
decl_stmt|;
name|boolean
name|createRolloverIndex
init|=
name|metaData
operator|.
name|index
argument_list|(
name|rolloverIndexName
argument_list|)
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|createRolloverIndex
condition|)
block|{
name|CreateIndexClusterStateUpdateRequest
name|updateRequest
init|=
name|prepareCreateIndexRequest
argument_list|(
name|rolloverIndexName
argument_list|,
name|rolloverRequest
argument_list|)
decl_stmt|;
name|createIndexService
operator|.
name|createIndex
argument_list|(
name|updateRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|ClusterStateUpdateResponse
name|response
parameter_list|)
block|{
name|indexAliasesService
operator|.
name|indicesAliases
argument_list|(
name|prepareIndicesAliasesRequest
argument_list|(
name|sourceIndexName
argument_list|,
name|rolloverIndexName
argument_list|,
name|rolloverRequest
argument_list|)
argument_list|,
operator|new
name|IndicesAliasesListener
argument_list|(
name|sourceIndexName
argument_list|,
name|rolloverIndexName
argument_list|,
name|listener
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|IndexAlreadyExistsException
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] failed to create rollover index"
argument_list|,
name|t
argument_list|,
name|updateRequest
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] failed to create rollover index"
argument_list|,
name|t
argument_list|,
name|updateRequest
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexAliasesService
operator|.
name|indicesAliases
argument_list|(
name|prepareIndicesAliasesRequest
argument_list|(
name|sourceIndexName
argument_list|,
name|rolloverIndexName
argument_list|,
name|rolloverRequest
argument_list|)
argument_list|,
operator|new
name|IndicesAliasesListener
argument_list|(
name|sourceIndexName
argument_list|,
name|rolloverIndexName
argument_list|,
name|listener
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// conditions not met
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|RolloverResponse
argument_list|(
name|sourceIndexName
argument_list|,
name|sourceIndexName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|IndicesAliasesListener
specifier|private
specifier|static
specifier|final
class|class
name|IndicesAliasesListener
implements|implements
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
block|{
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|RolloverResponse
argument_list|>
name|listener
decl_stmt|;
DECL|field|oldIndex
specifier|private
specifier|final
name|String
name|oldIndex
decl_stmt|;
DECL|field|newIndex
specifier|private
specifier|final
name|String
name|newIndex
decl_stmt|;
DECL|method|IndicesAliasesListener
specifier|public
name|IndicesAliasesListener
parameter_list|(
name|String
name|oldIndex
parameter_list|,
name|String
name|newIndex
parameter_list|,
name|ActionListener
argument_list|<
name|RolloverResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|this
operator|.
name|oldIndex
operator|=
name|oldIndex
expr_stmt|;
name|this
operator|.
name|newIndex
operator|=
name|newIndex
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|ClusterStateUpdateResponse
name|clusterStateUpdateResponse
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|RolloverResponse
argument_list|(
name|oldIndex
argument_list|,
name|newIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareIndicesAliasesRequest
specifier|static
name|IndicesAliasesClusterStateUpdateRequest
name|prepareIndicesAliasesRequest
parameter_list|(
name|String
name|concreteSourceIndex
parameter_list|,
name|String
name|targetIndex
parameter_list|,
name|RolloverRequest
name|request
parameter_list|)
block|{
specifier|final
name|IndicesAliasesClusterStateUpdateRequest
name|updateRequest
init|=
operator|new
name|IndicesAliasesClusterStateUpdateRequest
argument_list|()
operator|.
name|ackTimeout
argument_list|(
name|request
operator|.
name|ackTimeout
argument_list|()
argument_list|)
operator|.
name|masterNodeTimeout
argument_list|(
name|request
operator|.
name|masterNodeTimeout
argument_list|()
argument_list|)
decl_stmt|;
name|AliasAction
index|[]
name|actions
init|=
operator|new
name|AliasAction
index|[
literal|2
index|]
decl_stmt|;
name|actions
index|[
literal|0
index|]
operator|=
operator|new
name|AliasAction
argument_list|(
name|AliasAction
operator|.
name|Type
operator|.
name|ADD
argument_list|,
name|targetIndex
argument_list|,
name|request
operator|.
name|getSourceAlias
argument_list|()
argument_list|)
expr_stmt|;
name|actions
index|[
literal|1
index|]
operator|=
operator|new
name|AliasAction
argument_list|(
name|AliasAction
operator|.
name|Type
operator|.
name|REMOVE
argument_list|,
name|concreteSourceIndex
argument_list|,
name|request
operator|.
name|getSourceAlias
argument_list|()
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|actions
argument_list|(
name|actions
argument_list|)
expr_stmt|;
return|return
name|updateRequest
return|;
block|}
DECL|method|generateRolloverIndexName
specifier|static
name|String
name|generateRolloverIndexName
parameter_list|(
name|String
name|sourceIndexName
parameter_list|)
block|{
name|int
name|numberIndex
init|=
name|sourceIndexName
operator|.
name|lastIndexOf
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|1
decl_stmt|;
name|String
name|indexPrefix
init|=
name|sourceIndexName
decl_stmt|;
if|if
condition|(
name|numberIndex
operator|!=
operator|-
literal|1
condition|)
block|{
try|try
block|{
name|counter
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sourceIndexName
operator|.
name|substring
argument_list|(
name|numberIndex
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
name|indexPrefix
operator|=
name|sourceIndexName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|numberIndex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ignored
parameter_list|)
block|{             }
block|}
return|return
name|String
operator|.
name|join
argument_list|(
literal|"-"
argument_list|,
name|indexPrefix
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|counter
argument_list|)
argument_list|)
return|;
block|}
DECL|method|satisfiesConditions
specifier|static
name|boolean
name|satisfiesConditions
parameter_list|(
name|Set
argument_list|<
name|Condition
argument_list|>
name|conditions
parameter_list|,
name|long
name|docCount
parameter_list|,
name|long
name|indexAge
parameter_list|)
block|{
for|for
control|(
name|Condition
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
name|condition
operator|instanceof
name|Condition
operator|.
name|MaxAge
condition|)
block|{
name|Condition
operator|.
name|MaxAge
name|maxAge
init|=
operator|(
name|Condition
operator|.
name|MaxAge
operator|)
name|condition
decl_stmt|;
specifier|final
name|TimeValue
name|age
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|indexAge
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxAge
operator|.
name|matches
argument_list|(
name|age
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|condition
operator|instanceof
name|Condition
operator|.
name|MaxDocs
condition|)
block|{
specifier|final
name|Condition
operator|.
name|MaxDocs
name|maxDocs
init|=
operator|(
name|Condition
operator|.
name|MaxDocs
operator|)
name|condition
decl_stmt|;
if|if
condition|(
name|maxDocs
operator|.
name|matches
argument_list|(
name|docCount
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown condition ["
operator|+
name|condition
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|validate
specifier|static
name|void
name|validate
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|RolloverRequest
name|request
parameter_list|)
block|{
specifier|final
name|AliasOrIndex
name|aliasOrIndex
init|=
name|metaData
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSourceAlias
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliasOrIndex
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"source alias does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|aliasOrIndex
operator|.
name|isAlias
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"source alias is a concrete index"
argument_list|)
throw|;
block|}
if|if
condition|(
name|aliasOrIndex
operator|.
name|getIndices
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"source alias maps to multiple indices"
argument_list|)
throw|;
block|}
block|}
DECL|method|prepareCreateIndexRequest
specifier|static
name|CreateIndexClusterStateUpdateRequest
name|prepareCreateIndexRequest
parameter_list|(
specifier|final
name|String
name|targetIndexName
parameter_list|,
specifier|final
name|RolloverRequest
name|rolloverRequest
parameter_list|)
block|{
return|return
operator|new
name|CreateIndexClusterStateUpdateRequest
argument_list|(
name|rolloverRequest
argument_list|,
literal|"rollover_index"
argument_list|,
name|targetIndexName
argument_list|,
literal|true
argument_list|)
operator|.
name|ackTimeout
argument_list|(
name|rolloverRequest
operator|.
name|timeout
argument_list|()
argument_list|)
operator|.
name|masterNodeTimeout
argument_list|(
name|rolloverRequest
operator|.
name|masterNodeTimeout
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

