begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.snapshots.status
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|status
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|MasterNodeOperationRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ElasticsearchClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|ArrayUtils
import|;
end_import

begin_comment
comment|/**  * Snapshots status request builder  */
end_comment

begin_class
DECL|class|SnapshotsStatusRequestBuilder
specifier|public
class|class
name|SnapshotsStatusRequestBuilder
extends|extends
name|MasterNodeOperationRequestBuilder
argument_list|<
name|SnapshotsStatusRequest
argument_list|,
name|SnapshotsStatusResponse
argument_list|,
name|SnapshotsStatusRequestBuilder
argument_list|>
block|{
comment|/**      * Constructs the new snapshotstatus request      */
DECL|method|SnapshotsStatusRequestBuilder
specifier|public
name|SnapshotsStatusRequestBuilder
parameter_list|(
name|ElasticsearchClient
name|client
parameter_list|,
name|SnapshotsStatusAction
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|action
argument_list|,
operator|new
name|SnapshotsStatusRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs the new snapshot status request with specified repository      */
DECL|method|SnapshotsStatusRequestBuilder
specifier|public
name|SnapshotsStatusRequestBuilder
parameter_list|(
name|ElasticsearchClient
name|client
parameter_list|,
name|SnapshotsStatusAction
name|action
parameter_list|,
name|String
name|repository
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|action
argument_list|,
operator|new
name|SnapshotsStatusRequest
argument_list|(
name|repository
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the repository name      *      * @param repository repository name      * @return this builder      */
DECL|method|setRepository
specifier|public
name|SnapshotsStatusRequestBuilder
name|setRepository
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
name|request
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets list of snapshots to return      *      * @param snapshots list of snapshots      * @return this builder      */
DECL|method|setSnapshots
specifier|public
name|SnapshotsStatusRequestBuilder
name|setSnapshots
parameter_list|(
name|String
modifier|...
name|snapshots
parameter_list|)
block|{
name|request
operator|.
name|snapshots
argument_list|(
name|snapshots
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds additional snapshots to the list of snapshots to return      *      * @param snapshots additional snapshots      * @return this builder      */
DECL|method|addSnapshots
specifier|public
name|SnapshotsStatusRequestBuilder
name|addSnapshots
parameter_list|(
name|String
modifier|...
name|snapshots
parameter_list|)
block|{
name|request
operator|.
name|snapshots
argument_list|(
name|ArrayUtils
operator|.
name|concat
argument_list|(
name|request
operator|.
name|snapshots
argument_list|()
argument_list|,
name|snapshots
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set to<code>true</code> to ignore unavailable snapshots, instead of throwing an exception.      * Defaults to<code>false</code>, which means unavailable snapshots cause an exception to be thrown.      *      * @param ignoreUnavailable whether to ignore unavailable snapshots.      * @return this builder      */
DECL|method|setIgnoreUnavailable
specifier|public
name|SnapshotsStatusRequestBuilder
name|setIgnoreUnavailable
parameter_list|(
name|boolean
name|ignoreUnavailable
parameter_list|)
block|{
name|request
operator|.
name|ignoreUnavailable
argument_list|(
name|ignoreUnavailable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

