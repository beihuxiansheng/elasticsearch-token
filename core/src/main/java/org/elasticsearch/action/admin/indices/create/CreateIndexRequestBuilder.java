begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.create
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|AcknowledgedRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ElasticsearchClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Builder for a create index request  */
end_comment

begin_class
DECL|class|CreateIndexRequestBuilder
specifier|public
class|class
name|CreateIndexRequestBuilder
extends|extends
name|AcknowledgedRequestBuilder
argument_list|<
name|CreateIndexRequest
argument_list|,
name|CreateIndexResponse
argument_list|,
name|CreateIndexRequestBuilder
argument_list|>
block|{
DECL|method|CreateIndexRequestBuilder
specifier|public
name|CreateIndexRequestBuilder
parameter_list|(
name|ElasticsearchClient
name|client
parameter_list|,
name|CreateIndexAction
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|action
argument_list|,
operator|new
name|CreateIndexRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|CreateIndexRequestBuilder
specifier|public
name|CreateIndexRequestBuilder
parameter_list|(
name|ElasticsearchClient
name|client
parameter_list|,
name|CreateIndexAction
name|action
parameter_list|,
name|String
name|index
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|action
argument_list|,
operator|new
name|CreateIndexRequest
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the name of the index to be created      */
DECL|method|setIndex
specifier|public
name|CreateIndexRequestBuilder
name|setIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|request
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The settings to create the index with.      */
DECL|method|setSettings
specifier|public
name|CreateIndexRequestBuilder
name|setSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The settings to create the index with.      */
DECL|method|setSettings
specifier|public
name|CreateIndexRequestBuilder
name|setSettings
parameter_list|(
name|Settings
operator|.
name|Builder
name|settings
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Allows to set the settings using a json builder.      */
DECL|method|setSettings
specifier|public
name|CreateIndexRequestBuilder
name|setSettings
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The settings to create the index with (either json/yaml/properties format)      */
DECL|method|setSettings
specifier|public
name|CreateIndexRequestBuilder
name|setSettings
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A simplified version of settings that takes key value pairs settings.      */
DECL|method|setSettings
specifier|public
name|CreateIndexRequestBuilder
name|setSettings
parameter_list|(
name|Object
modifier|...
name|settings
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The settings to create the index with (either json/yaml/properties format)      */
DECL|method|setSettings
specifier|public
name|CreateIndexRequestBuilder
name|setSettings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|source
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds mapping that will be added when the index gets created.      *      * @param type   The mapping type      * @param source The mapping source      */
DECL|method|addMapping
specifier|public
name|CreateIndexRequestBuilder
name|addMapping
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|source
parameter_list|)
block|{
name|request
operator|.
name|mapping
argument_list|(
name|type
argument_list|,
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The cause for this index creation.      */
DECL|method|setCause
specifier|public
name|CreateIndexRequestBuilder
name|setCause
parameter_list|(
name|String
name|cause
parameter_list|)
block|{
name|request
operator|.
name|cause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds mapping that will be added when the index gets created.      *      * @param type   The mapping type      * @param source The mapping source      */
DECL|method|addMapping
specifier|public
name|CreateIndexRequestBuilder
name|addMapping
parameter_list|(
name|String
name|type
parameter_list|,
name|XContentBuilder
name|source
parameter_list|)
block|{
name|request
operator|.
name|mapping
argument_list|(
name|type
argument_list|,
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds mapping that will be added when the index gets created.      *      * @param type   The mapping type      * @param source The mapping source      */
DECL|method|addMapping
specifier|public
name|CreateIndexRequestBuilder
name|addMapping
parameter_list|(
name|String
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
name|request
operator|.
name|mapping
argument_list|(
name|type
argument_list|,
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A specialized simplified mapping source method, takes the form of simple properties definition:      * ("field1", "type=string,store=true").      */
DECL|method|addMapping
specifier|public
name|CreateIndexRequestBuilder
name|addMapping
parameter_list|(
name|String
name|type
parameter_list|,
name|Object
modifier|...
name|source
parameter_list|)
block|{
name|request
operator|.
name|mapping
argument_list|(
name|type
argument_list|,
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the aliases that will be associated with the index when it gets created      */
DECL|method|setAliases
specifier|public
name|CreateIndexRequestBuilder
name|setAliases
parameter_list|(
name|Map
name|source
parameter_list|)
block|{
name|request
operator|.
name|aliases
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the aliases that will be associated with the index when it gets created      */
DECL|method|setAliases
specifier|public
name|CreateIndexRequestBuilder
name|setAliases
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|request
operator|.
name|aliases
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the aliases that will be associated with the index when it gets created      */
DECL|method|setAliases
specifier|public
name|CreateIndexRequestBuilder
name|setAliases
parameter_list|(
name|XContentBuilder
name|source
parameter_list|)
block|{
name|request
operator|.
name|aliases
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the aliases that will be associated with the index when it gets created      */
DECL|method|setAliases
specifier|public
name|CreateIndexRequestBuilder
name|setAliases
parameter_list|(
name|BytesReference
name|source
parameter_list|)
block|{
name|request
operator|.
name|aliases
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds an alias that will be associated with the index when it gets created      */
DECL|method|addAlias
specifier|public
name|CreateIndexRequestBuilder
name|addAlias
parameter_list|(
name|Alias
name|alias
parameter_list|)
block|{
name|request
operator|.
name|alias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the settings and mappings as a single source.      */
DECL|method|setSource
specifier|public
name|CreateIndexRequestBuilder
name|setSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the settings and mappings as a single source.      */
DECL|method|setSource
specifier|public
name|CreateIndexRequestBuilder
name|setSource
parameter_list|(
name|BytesReference
name|source
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the settings and mappings as a single source.      */
DECL|method|setSource
specifier|public
name|CreateIndexRequestBuilder
name|setSource
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the settings and mappings as a single source.      */
DECL|method|setSource
specifier|public
name|CreateIndexRequestBuilder
name|setSource
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the settings and mappings as a single source.      */
DECL|method|setSource
specifier|public
name|CreateIndexRequestBuilder
name|setSource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|source
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds custom metadata to the index to be created.      */
DECL|method|addCustom
specifier|public
name|CreateIndexRequestBuilder
name|addCustom
parameter_list|(
name|IndexMetaData
operator|.
name|Custom
name|custom
parameter_list|)
block|{
name|request
operator|.
name|custom
argument_list|(
name|custom
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the settings and mappings as a single source.      */
DECL|method|setSource
specifier|public
name|CreateIndexRequestBuilder
name|setSource
parameter_list|(
name|XContentBuilder
name|source
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** True if all fields that span multiple types should be updated, false otherwise */
DECL|method|setUpdateAllTypes
specifier|public
name|CreateIndexRequestBuilder
name|setUpdateAllTypes
parameter_list|(
name|boolean
name|updateAllTypes
parameter_list|)
block|{
name|request
operator|.
name|updateAllTypes
argument_list|(
name|updateAllTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the number of shard copies that should be active for index creation to return.      * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy      * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to      * wait for all shards (primary and all replicas) to be active before returning.      * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any      * non-negative integer, up to the number of copies per shard (number of replicas + 1),      * to wait for the desired amount of shard copies to become active before returning.      * Index creation will only wait up until the timeout value for the number of shard copies      * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcked()} to      * determine if the requisite shard copies were all started before returning or timing out.      *      * @param waitForActiveShards number of active shard copies to wait on      */
DECL|method|setWaitForActiveShards
specifier|public
name|CreateIndexRequestBuilder
name|setWaitForActiveShards
parameter_list|(
name|ActiveShardCount
name|waitForActiveShards
parameter_list|)
block|{
name|request
operator|.
name|waitForActiveShards
argument_list|(
name|waitForActiveShards
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

