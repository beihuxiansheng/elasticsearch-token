begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.validate.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|validate
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|QueryExplanation
specifier|public
class|class
name|QueryExplanation
implements|implements
name|Streamable
block|{
DECL|field|RANDOM_SHARD
specifier|public
specifier|static
specifier|final
name|int
name|RANDOM_SHARD
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|index
specifier|private
name|String
name|index
decl_stmt|;
DECL|field|shard
specifier|private
name|int
name|shard
init|=
name|RANDOM_SHARD
decl_stmt|;
DECL|field|valid
specifier|private
name|boolean
name|valid
decl_stmt|;
DECL|field|explanation
specifier|private
name|String
name|explanation
decl_stmt|;
DECL|field|error
specifier|private
name|String
name|error
decl_stmt|;
DECL|method|QueryExplanation
name|QueryExplanation
parameter_list|()
block|{      }
DECL|method|QueryExplanation
specifier|public
name|QueryExplanation
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|shard
parameter_list|,
name|boolean
name|valid
parameter_list|,
name|String
name|explanation
parameter_list|,
name|String
name|error
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|this
operator|.
name|valid
operator|=
name|valid
expr_stmt|;
name|this
operator|.
name|explanation
operator|=
name|explanation
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
return|;
block|}
DECL|method|getShard
specifier|public
name|int
name|getShard
parameter_list|()
block|{
return|return
name|this
operator|.
name|shard
return|;
block|}
DECL|method|isValid
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|this
operator|.
name|valid
return|;
block|}
DECL|method|getError
specifier|public
name|String
name|getError
parameter_list|()
block|{
return|return
name|this
operator|.
name|error
return|;
block|}
DECL|method|getExplanation
specifier|public
name|String
name|getExplanation
parameter_list|()
block|{
return|return
name|this
operator|.
name|explanation
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|index
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_4_0_UNRELEASED
argument_list|)
condition|)
block|{
name|shard
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|shard
operator|=
name|RANDOM_SHARD
expr_stmt|;
block|}
name|valid
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|explanation
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|error
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_4_0_UNRELEASED
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|valid
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|explanation
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
DECL|method|readQueryExplanation
specifier|public
specifier|static
name|QueryExplanation
name|readQueryExplanation
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryExplanation
name|exp
init|=
operator|new
name|QueryExplanation
argument_list|()
decl_stmt|;
name|exp
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|exp
return|;
block|}
block|}
end_class

end_unit

