begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|shards
operator|.
name|IndicesShardStoresResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** The cluster allocation explanation for a single node */
end_comment

begin_class
DECL|class|NodeExplanation
specifier|public
class|class
name|NodeExplanation
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|node
specifier|private
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
DECL|field|nodeDecision
specifier|private
specifier|final
name|Decision
name|nodeDecision
decl_stmt|;
DECL|field|nodeWeight
specifier|private
specifier|final
name|Float
name|nodeWeight
decl_stmt|;
DECL|field|storeStatus
specifier|private
specifier|final
name|IndicesShardStoresResponse
operator|.
name|StoreStatus
name|storeStatus
decl_stmt|;
DECL|field|finalDecision
specifier|private
specifier|final
name|ClusterAllocationExplanation
operator|.
name|FinalDecision
name|finalDecision
decl_stmt|;
DECL|field|storeCopy
specifier|private
specifier|final
name|ClusterAllocationExplanation
operator|.
name|StoreCopy
name|storeCopy
decl_stmt|;
DECL|field|finalExplanation
specifier|private
specifier|final
name|String
name|finalExplanation
decl_stmt|;
DECL|method|NodeExplanation
specifier|public
name|NodeExplanation
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|Decision
name|nodeDecision
parameter_list|,
specifier|final
name|Float
name|nodeWeight
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|IndicesShardStoresResponse
operator|.
name|StoreStatus
name|storeStatus
parameter_list|,
specifier|final
name|ClusterAllocationExplanation
operator|.
name|FinalDecision
name|finalDecision
parameter_list|,
specifier|final
name|String
name|finalExplanation
parameter_list|,
specifier|final
name|ClusterAllocationExplanation
operator|.
name|StoreCopy
name|storeCopy
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|nodeDecision
operator|=
name|nodeDecision
expr_stmt|;
name|this
operator|.
name|nodeWeight
operator|=
name|nodeWeight
expr_stmt|;
name|this
operator|.
name|storeStatus
operator|=
name|storeStatus
expr_stmt|;
name|this
operator|.
name|finalDecision
operator|=
name|finalDecision
expr_stmt|;
name|this
operator|.
name|finalExplanation
operator|=
name|finalExplanation
expr_stmt|;
name|this
operator|.
name|storeCopy
operator|=
name|storeCopy
expr_stmt|;
block|}
DECL|method|NodeExplanation
specifier|public
name|NodeExplanation
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|node
operator|=
operator|new
name|DiscoveryNode
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeDecision
operator|=
name|Decision
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeWeight
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|this
operator|.
name|storeStatus
operator|=
name|IndicesShardStoresResponse
operator|.
name|StoreStatus
operator|.
name|readStoreStatus
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|storeStatus
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|finalDecision
operator|=
name|ClusterAllocationExplanation
operator|.
name|FinalDecision
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|finalExplanation
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|storeCopy
operator|=
name|ClusterAllocationExplanation
operator|.
name|StoreCopy
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|node
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Decision
operator|.
name|writeTo
argument_list|(
name|nodeDecision
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|nodeWeight
argument_list|)
expr_stmt|;
if|if
condition|(
name|storeStatus
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|storeStatus
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|finalDecision
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|finalExplanation
argument_list|)
expr_stmt|;
name|storeCopy
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"node_name"
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"node_attributes"
argument_list|)
expr_stmt|;
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrEntry
range|:
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|attrEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|attrEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end attributes
name|builder
operator|.
name|startObject
argument_list|(
literal|"store"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"shard_copy"
argument_list|,
name|storeCopy
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|storeStatus
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Throwable
name|storeErr
init|=
name|storeStatus
operator|.
name|getStoreException
argument_list|()
decl_stmt|;
if|if
condition|(
name|storeErr
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"store_exception"
argument_list|,
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|storeErr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end store
name|builder
operator|.
name|field
argument_list|(
literal|"final_decision"
argument_list|,
name|finalDecision
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"final_explanation"
argument_list|,
name|finalExplanation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
name|nodeWeight
argument_list|)
expr_stmt|;
name|nodeDecision
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end node<uuid>
return|return
name|builder
return|;
block|}
DECL|method|getNode
specifier|public
name|DiscoveryNode
name|getNode
parameter_list|()
block|{
return|return
name|this
operator|.
name|node
return|;
block|}
DECL|method|getDecision
specifier|public
name|Decision
name|getDecision
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeDecision
return|;
block|}
DECL|method|getWeight
specifier|public
name|Float
name|getWeight
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeWeight
return|;
block|}
annotation|@
name|Nullable
DECL|method|getStoreStatus
specifier|public
name|IndicesShardStoresResponse
operator|.
name|StoreStatus
name|getStoreStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|storeStatus
return|;
block|}
DECL|method|getFinalDecision
specifier|public
name|ClusterAllocationExplanation
operator|.
name|FinalDecision
name|getFinalDecision
parameter_list|()
block|{
return|return
name|this
operator|.
name|finalDecision
return|;
block|}
DECL|method|getFinalExplanation
specifier|public
name|String
name|getFinalExplanation
parameter_list|()
block|{
return|return
name|this
operator|.
name|finalExplanation
return|;
block|}
DECL|method|getStoreCopy
specifier|public
name|ClusterAllocationExplanation
operator|.
name|StoreCopy
name|getStoreCopy
parameter_list|()
block|{
return|return
name|this
operator|.
name|storeCopy
return|;
block|}
block|}
end_class

end_unit

