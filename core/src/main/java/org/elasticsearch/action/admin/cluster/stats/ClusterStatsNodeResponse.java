begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|ShardStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|ClusterStatsNodeResponse
specifier|public
class|class
name|ClusterStatsNodeResponse
extends|extends
name|BaseNodeResponse
block|{
DECL|field|nodeInfo
specifier|private
name|NodeInfo
name|nodeInfo
decl_stmt|;
DECL|field|nodeStats
specifier|private
name|NodeStats
name|nodeStats
decl_stmt|;
DECL|field|shardsStats
specifier|private
name|ShardStats
index|[]
name|shardsStats
decl_stmt|;
DECL|field|clusterStatus
specifier|private
name|ClusterHealthStatus
name|clusterStatus
decl_stmt|;
DECL|method|ClusterStatsNodeResponse
name|ClusterStatsNodeResponse
parameter_list|()
block|{     }
DECL|method|ClusterStatsNodeResponse
specifier|public
name|ClusterStatsNodeResponse
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
annotation|@
name|Nullable
name|ClusterHealthStatus
name|clusterStatus
parameter_list|,
name|NodeInfo
name|nodeInfo
parameter_list|,
name|NodeStats
name|nodeStats
parameter_list|,
name|ShardStats
index|[]
name|shardsStats
parameter_list|)
block|{
name|super
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeInfo
operator|=
name|nodeInfo
expr_stmt|;
name|this
operator|.
name|nodeStats
operator|=
name|nodeStats
expr_stmt|;
name|this
operator|.
name|shardsStats
operator|=
name|shardsStats
expr_stmt|;
name|this
operator|.
name|clusterStatus
operator|=
name|clusterStatus
expr_stmt|;
block|}
DECL|method|nodeInfo
specifier|public
name|NodeInfo
name|nodeInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeInfo
return|;
block|}
DECL|method|nodeStats
specifier|public
name|NodeStats
name|nodeStats
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeStats
return|;
block|}
comment|/**      * Cluster Health Status, only populated on master nodes.      */
annotation|@
name|Nullable
DECL|method|clusterStatus
specifier|public
name|ClusterHealthStatus
name|clusterStatus
parameter_list|()
block|{
return|return
name|clusterStatus
return|;
block|}
DECL|method|shardsStats
specifier|public
name|ShardStats
index|[]
name|shardsStats
parameter_list|()
block|{
return|return
name|this
operator|.
name|shardsStats
return|;
block|}
DECL|method|readNodeResponse
specifier|public
specifier|static
name|ClusterStatsNodeResponse
name|readNodeResponse
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterStatsNodeResponse
name|nodeResponse
init|=
operator|new
name|ClusterStatsNodeResponse
argument_list|()
decl_stmt|;
name|nodeResponse
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|nodeResponse
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|clusterStatus
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|clusterStatus
operator|=
name|ClusterHealthStatus
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nodeInfo
operator|=
name|NodeInfo
operator|.
name|readNodeInfo
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeStats
operator|=
name|NodeStats
operator|.
name|readNodeStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|shardsStats
operator|=
operator|new
name|ShardStats
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|shardsStats
index|[
name|i
index|]
operator|=
name|ShardStats
operator|.
name|readShardStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|clusterStatus
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|clusterStatus
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nodeInfo
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|nodeStats
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|shardsStats
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardStats
name|ss
range|:
name|shardsStats
control|)
block|{
name|ss
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

