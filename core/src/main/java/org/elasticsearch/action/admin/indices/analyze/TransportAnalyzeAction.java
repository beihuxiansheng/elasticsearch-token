begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.analyze
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|analyze
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|single
operator|.
name|shard
operator|.
name|TransportSingleShardAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardsIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|AllFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Transport action used to execute analyze requests  */
end_comment

begin_class
DECL|class|TransportAnalyzeAction
specifier|public
class|class
name|TransportAnalyzeAction
extends|extends
name|TransportSingleShardAction
argument_list|<
name|AnalyzeRequest
argument_list|,
name|AnalyzeResponse
argument_list|>
block|{
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportAnalyzeAction
specifier|public
name|TransportAnalyzeAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|Environment
name|environment
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|AnalyzeAction
operator|.
name|NAME
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|AnalyzeRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|protected
name|AnalyzeResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|AnalyzeResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|resolveIndex
specifier|protected
name|boolean
name|resolveIndex
parameter_list|(
name|AnalyzeRequest
name|request
parameter_list|)
block|{
return|return
name|request
operator|.
name|index
argument_list|()
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|checkRequestBlock
specifier|protected
name|ClusterBlockException
name|checkRequestBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|InternalRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|concreteIndex
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|checkRequestBlock
argument_list|(
name|state
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|shards
specifier|protected
name|ShardsIterator
name|shards
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|InternalRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|concreteIndex
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// just execute locally....
return|return
literal|null
return|;
block|}
return|return
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|concreteIndex
argument_list|()
argument_list|)
operator|.
name|randomAllActiveShardsIt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperation
specifier|protected
name|AnalyzeResponse
name|shardOperation
parameter_list|(
name|AnalyzeRequest
name|request
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
block|{
try|try
block|{
specifier|final
name|IndexService
name|indexService
decl_stmt|;
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|)
block|{
name|indexService
operator|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexService
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|field
init|=
literal|null
decl_stmt|;
name|Analyzer
name|analyzer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|field
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|indexService
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No index provided, and trying to analyzer based on a specific field which requires the index parameter"
argument_list|)
throw|;
block|}
name|MappedFieldType
name|fieldType
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|smartNameFieldType
argument_list|(
name|request
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldType
operator|.
name|isNumeric
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't process field ["
operator|+
name|request
operator|.
name|field
argument_list|()
operator|+
literal|"], Analysis requests are not supported on numeric fields"
argument_list|)
throw|;
block|}
name|analyzer
operator|=
name|fieldType
operator|.
name|indexAnalyzer
argument_list|()
expr_stmt|;
name|field
operator|=
name|fieldType
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|indexService
operator|!=
literal|null
condition|)
block|{
name|field
operator|=
name|indexService
operator|.
name|queryParserService
argument_list|()
operator|.
name|defaultField
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|field
operator|=
name|AllFieldMapper
operator|.
name|NAME
expr_stmt|;
block|}
block|}
specifier|final
name|AnalysisRegistry
name|analysisRegistry
init|=
name|indicesService
operator|.
name|getAnalysis
argument_list|()
decl_stmt|;
return|return
name|analyze
argument_list|(
name|request
argument_list|,
name|field
argument_list|,
name|analyzer
argument_list|,
name|indexService
operator|!=
literal|null
condition|?
name|indexService
operator|.
name|analysisService
argument_list|()
else|:
literal|null
argument_list|,
name|analysisRegistry
argument_list|,
name|environment
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"analysis failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|analyze
specifier|public
specifier|static
name|AnalyzeResponse
name|analyze
parameter_list|(
name|AnalyzeRequest
name|request
parameter_list|,
name|String
name|field
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|AnalysisService
name|analysisService
parameter_list|,
name|AnalysisRegistry
name|analysisRegistry
parameter_list|,
name|Environment
name|environment
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|closeAnalyzer
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
operator|&&
name|request
operator|.
name|analyzer
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|analysisService
operator|==
literal|null
condition|)
block|{
name|analyzer
operator|=
name|analysisRegistry
operator|.
name|getAnalyzer
argument_list|(
name|request
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find global analyzer ["
operator|+
name|request
operator|.
name|analyzer
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|analyzer
operator|=
name|analysisService
operator|.
name|analyzer
argument_list|(
name|request
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find analyzer ["
operator|+
name|request
operator|.
name|analyzer
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|tokenizer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TokenizerFactory
name|tokenizerFactory
decl_stmt|;
if|if
condition|(
name|analysisService
operator|==
literal|null
condition|)
block|{
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
name|tokenizerFactoryFactory
init|=
name|analysisRegistry
operator|.
name|getTokenizerProvider
argument_list|(
name|request
operator|.
name|tokenizer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizerFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find global tokenizer under ["
operator|+
name|request
operator|.
name|tokenizer
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|tokenizerFactory
operator|=
name|tokenizerFactoryFactory
operator|.
name|get
argument_list|(
name|environment
argument_list|,
name|request
operator|.
name|tokenizer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenizerFactory
operator|=
name|analysisService
operator|.
name|tokenizer
argument_list|(
name|request
operator|.
name|tokenizer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenizerFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find tokenizer under ["
operator|+
name|request
operator|.
name|tokenizer
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|TokenFilterFactory
index|[]
name|tokenFilterFactories
init|=
operator|new
name|TokenFilterFactory
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|tokenFilters
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|tokenFilters
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|tokenFilterFactories
operator|=
operator|new
name|TokenFilterFactory
index|[
name|request
operator|.
name|tokenFilters
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|tokenFilters
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|tokenFilterName
init|=
name|request
operator|.
name|tokenFilters
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|analysisService
operator|==
literal|null
condition|)
block|{
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
name|tokenFilterFactoryFactory
init|=
name|analysisRegistry
operator|.
name|getTokenFilterProvider
argument_list|(
name|tokenFilterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenFilterFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find global token filter under ["
operator|+
name|tokenFilterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|tokenFilterFactories
index|[
name|i
index|]
operator|=
name|tokenFilterFactoryFactory
operator|.
name|get
argument_list|(
name|environment
argument_list|,
name|tokenFilterName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenFilterFactories
index|[
name|i
index|]
operator|=
name|analysisService
operator|.
name|tokenFilter
argument_list|(
name|tokenFilterName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenFilterFactories
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find token filter under ["
operator|+
name|tokenFilterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|tokenFilterFactories
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find token filter under ["
operator|+
name|tokenFilterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
name|CharFilterFactory
index|[]
name|charFilterFactories
init|=
operator|new
name|CharFilterFactory
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|charFilters
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|charFilters
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|charFilterFactories
operator|=
operator|new
name|CharFilterFactory
index|[
name|request
operator|.
name|charFilters
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|charFilters
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|charFilterName
init|=
name|request
operator|.
name|charFilters
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|analysisService
operator|==
literal|null
condition|)
block|{
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
name|charFilterFactoryFactory
init|=
name|analysisRegistry
operator|.
name|getCharFilterProvider
argument_list|(
name|charFilterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|charFilterFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find global char filter under ["
operator|+
name|charFilterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|charFilterFactories
index|[
name|i
index|]
operator|=
name|charFilterFactoryFactory
operator|.
name|get
argument_list|(
name|environment
argument_list|,
name|charFilterName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charFilterFactories
index|[
name|i
index|]
operator|=
name|analysisService
operator|.
name|charFilter
argument_list|(
name|charFilterName
argument_list|)
expr_stmt|;
if|if
condition|(
name|charFilterFactories
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find char filter under ["
operator|+
name|charFilterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|charFilterFactories
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find char filter under ["
operator|+
name|charFilterName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
name|analyzer
operator|=
operator|new
name|CustomAnalyzer
argument_list|(
name|tokenizerFactory
argument_list|,
name|charFilterFactories
argument_list|,
name|tokenFilterFactories
argument_list|)
expr_stmt|;
name|closeAnalyzer
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|analysisService
operator|==
literal|null
condition|)
block|{
name|analyzer
operator|=
name|analysisRegistry
operator|.
name|getAnalyzer
argument_list|(
literal|"standard"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|analyzer
operator|=
name|analysisService
operator|.
name|defaultIndexAnalyzer
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find analyzer"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|AnalyzeResponse
operator|.
name|AnalyzeToken
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|lastPosition
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|lastOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|text
range|:
name|request
operator|.
name|text
argument_list|()
control|)
block|{
try|try
init|(
name|TokenStream
name|stream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
init|)
block|{
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CharTermAttribute
name|term
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PositionIncrementAttribute
name|posIncr
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|OffsetAttribute
name|offset
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|TypeAttribute
name|type
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|int
name|increment
init|=
name|posIncr
operator|.
name|getPositionIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|increment
operator|>
literal|0
condition|)
block|{
name|lastPosition
operator|=
name|lastPosition
operator|+
name|increment
expr_stmt|;
block|}
name|tokens
operator|.
name|add
argument_list|(
operator|new
name|AnalyzeResponse
operator|.
name|AnalyzeToken
argument_list|(
name|term
operator|.
name|toString
argument_list|()
argument_list|,
name|lastPosition
argument_list|,
name|lastOffset
operator|+
name|offset
operator|.
name|startOffset
argument_list|()
argument_list|,
name|lastOffset
operator|+
name|offset
operator|.
name|endOffset
argument_list|()
argument_list|,
name|type
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|end
argument_list|()
expr_stmt|;
name|lastOffset
operator|+=
name|offset
operator|.
name|endOffset
argument_list|()
expr_stmt|;
name|lastPosition
operator|+=
name|posIncr
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
name|lastPosition
operator|+=
name|analyzer
operator|.
name|getPositionIncrementGap
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|lastOffset
operator|+=
name|analyzer
operator|.
name|getOffsetGap
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to analyze"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|closeAnalyzer
condition|)
block|{
name|analyzer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|AnalyzeResponse
argument_list|(
name|tokens
argument_list|)
return|;
block|}
block|}
end_class

end_unit

