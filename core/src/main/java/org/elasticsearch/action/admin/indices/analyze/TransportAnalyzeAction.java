begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.analyze
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|analyze
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|single
operator|.
name|shard
operator|.
name|TransportSingleShardAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardsIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FastStringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|CharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|CustomAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|IndexAnalyzers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|AllFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Transport action used to execute analyze requests  */
end_comment

begin_class
DECL|class|TransportAnalyzeAction
specifier|public
class|class
name|TransportAnalyzeAction
extends|extends
name|TransportSingleShardAction
argument_list|<
name|AnalyzeRequest
argument_list|,
name|AnalyzeResponse
argument_list|>
block|{
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportAnalyzeAction
specifier|public
name|TransportAnalyzeAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|Environment
name|environment
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|AnalyzeAction
operator|.
name|NAME
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|AnalyzeRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|protected
name|AnalyzeResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|AnalyzeResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|resolveIndex
specifier|protected
name|boolean
name|resolveIndex
parameter_list|(
name|AnalyzeRequest
name|request
parameter_list|)
block|{
return|return
name|request
operator|.
name|index
argument_list|()
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|checkRequestBlock
specifier|protected
name|ClusterBlockException
name|checkRequestBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|InternalRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|concreteIndex
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|checkRequestBlock
argument_list|(
name|state
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|shards
specifier|protected
name|ShardsIterator
name|shards
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|InternalRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|concreteIndex
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// just execute locally....
return|return
literal|null
return|;
block|}
return|return
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|concreteIndex
argument_list|()
argument_list|)
operator|.
name|randomAllActiveShardsIt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperation
specifier|protected
name|AnalyzeResponse
name|shardOperation
parameter_list|(
name|AnalyzeRequest
name|request
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
block|{
try|try
block|{
specifier|final
name|IndexService
name|indexService
decl_stmt|;
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|)
block|{
name|indexService
operator|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexService
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|field
init|=
literal|null
decl_stmt|;
name|Analyzer
name|analyzer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|field
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|indexService
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No index provided, and trying to analyzer based on a specific field which requires the index parameter"
argument_list|)
throw|;
block|}
name|MappedFieldType
name|fieldType
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
name|request
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldType
operator|.
name|tokenized
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't process field ["
operator|+
name|request
operator|.
name|field
argument_list|()
operator|+
literal|"], Analysis requests are only supported on tokenized fields"
argument_list|)
throw|;
block|}
name|analyzer
operator|=
name|fieldType
operator|.
name|indexAnalyzer
argument_list|()
expr_stmt|;
name|field
operator|=
name|fieldType
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|indexService
operator|!=
literal|null
condition|)
block|{
name|field
operator|=
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getDefaultField
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|field
operator|=
name|AllFieldMapper
operator|.
name|NAME
expr_stmt|;
block|}
block|}
specifier|final
name|AnalysisRegistry
name|analysisRegistry
init|=
name|indicesService
operator|.
name|getAnalysis
argument_list|()
decl_stmt|;
return|return
name|analyze
argument_list|(
name|request
argument_list|,
name|field
argument_list|,
name|analyzer
argument_list|,
name|indexService
operator|!=
literal|null
condition|?
name|indexService
operator|.
name|getIndexAnalyzers
argument_list|()
else|:
literal|null
argument_list|,
name|analysisRegistry
argument_list|,
name|environment
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"analysis failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|analyze
specifier|public
specifier|static
name|AnalyzeResponse
name|analyze
parameter_list|(
name|AnalyzeRequest
name|request
parameter_list|,
name|String
name|field
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|IndexAnalyzers
name|indexAnalyzers
parameter_list|,
name|AnalysisRegistry
name|analysisRegistry
parameter_list|,
name|Environment
name|environment
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|closeAnalyzer
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
operator|&&
name|request
operator|.
name|analyzer
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|indexAnalyzers
operator|==
literal|null
condition|)
block|{
name|analyzer
operator|=
name|analysisRegistry
operator|.
name|getAnalyzer
argument_list|(
name|request
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find global analyzer ["
operator|+
name|request
operator|.
name|analyzer
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|analyzer
operator|=
name|indexAnalyzers
operator|.
name|get
argument_list|(
name|request
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find analyzer ["
operator|+
name|request
operator|.
name|analyzer
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|tokenizer
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|IndexSettings
name|indexSettings
init|=
name|indexAnalyzers
operator|==
literal|null
condition|?
literal|null
else|:
name|indexAnalyzers
operator|.
name|getIndexSettings
argument_list|()
decl_stmt|;
name|TokenizerFactory
name|tokenizerFactory
init|=
name|parseTokenizerFactory
argument_list|(
name|request
argument_list|,
name|indexAnalyzers
argument_list|,
name|analysisRegistry
argument_list|,
name|environment
argument_list|)
decl_stmt|;
name|TokenFilterFactory
index|[]
name|tokenFilterFactories
init|=
operator|new
name|TokenFilterFactory
index|[
literal|0
index|]
decl_stmt|;
name|tokenFilterFactories
operator|=
name|getTokenFilterFactories
argument_list|(
name|request
argument_list|,
name|indexSettings
argument_list|,
name|analysisRegistry
argument_list|,
name|environment
argument_list|,
name|tokenFilterFactories
argument_list|)
expr_stmt|;
name|CharFilterFactory
index|[]
name|charFilterFactories
init|=
operator|new
name|CharFilterFactory
index|[
literal|0
index|]
decl_stmt|;
name|charFilterFactories
operator|=
name|getCharFilterFactories
argument_list|(
name|request
argument_list|,
name|indexSettings
argument_list|,
name|analysisRegistry
argument_list|,
name|environment
argument_list|,
name|charFilterFactories
argument_list|)
expr_stmt|;
name|analyzer
operator|=
operator|new
name|CustomAnalyzer
argument_list|(
name|tokenizerFactory
argument_list|,
name|charFilterFactories
argument_list|,
name|tokenFilterFactories
argument_list|)
expr_stmt|;
name|closeAnalyzer
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|indexAnalyzers
operator|==
literal|null
condition|)
block|{
name|analyzer
operator|=
name|analysisRegistry
operator|.
name|getAnalyzer
argument_list|(
literal|"standard"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|analyzer
operator|=
name|indexAnalyzers
operator|.
name|getDefaultIndexAnalyzer
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find analyzer"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|AnalyzeResponse
operator|.
name|AnalyzeToken
argument_list|>
name|tokens
init|=
literal|null
decl_stmt|;
name|DetailAnalyzeResponse
name|detail
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|explain
argument_list|()
condition|)
block|{
name|detail
operator|=
name|detailAnalyze
argument_list|(
name|request
argument_list|,
name|analyzer
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|=
name|simpleAnalyze
argument_list|(
name|request
argument_list|,
name|analyzer
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|closeAnalyzer
condition|)
block|{
name|analyzer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|AnalyzeResponse
argument_list|(
name|tokens
argument_list|,
name|detail
argument_list|)
return|;
block|}
DECL|method|simpleAnalyze
specifier|private
specifier|static
name|List
argument_list|<
name|AnalyzeResponse
operator|.
name|AnalyzeToken
argument_list|>
name|simpleAnalyze
parameter_list|(
name|AnalyzeRequest
name|request
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|List
argument_list|<
name|AnalyzeResponse
operator|.
name|AnalyzeToken
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|lastPosition
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|lastOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|text
range|:
name|request
operator|.
name|text
argument_list|()
control|)
block|{
try|try
init|(
name|TokenStream
name|stream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
init|)
block|{
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CharTermAttribute
name|term
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PositionIncrementAttribute
name|posIncr
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|OffsetAttribute
name|offset
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|TypeAttribute
name|type
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|int
name|increment
init|=
name|posIncr
operator|.
name|getPositionIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|increment
operator|>
literal|0
condition|)
block|{
name|lastPosition
operator|=
name|lastPosition
operator|+
name|increment
expr_stmt|;
block|}
name|tokens
operator|.
name|add
argument_list|(
operator|new
name|AnalyzeResponse
operator|.
name|AnalyzeToken
argument_list|(
name|term
operator|.
name|toString
argument_list|()
argument_list|,
name|lastPosition
argument_list|,
name|lastOffset
operator|+
name|offset
operator|.
name|startOffset
argument_list|()
argument_list|,
name|lastOffset
operator|+
name|offset
operator|.
name|endOffset
argument_list|()
argument_list|,
name|type
operator|.
name|type
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|end
argument_list|()
expr_stmt|;
name|lastOffset
operator|+=
name|offset
operator|.
name|endOffset
argument_list|()
expr_stmt|;
name|lastPosition
operator|+=
name|posIncr
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
name|lastPosition
operator|+=
name|analyzer
operator|.
name|getPositionIncrementGap
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|lastOffset
operator|+=
name|analyzer
operator|.
name|getOffsetGap
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to analyze"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|tokens
return|;
block|}
DECL|method|detailAnalyze
specifier|private
specifier|static
name|DetailAnalyzeResponse
name|detailAnalyze
parameter_list|(
name|AnalyzeRequest
name|request
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|DetailAnalyzeResponse
name|detailResponse
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|includeAttributes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|attributes
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|attribute
range|:
name|request
operator|.
name|attributes
argument_list|()
control|)
block|{
name|includeAttributes
operator|.
name|add
argument_list|(
name|attribute
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|CustomAnalyzer
name|customAnalyzer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|analyzer
operator|instanceof
name|CustomAnalyzer
condition|)
block|{
name|customAnalyzer
operator|=
operator|(
name|CustomAnalyzer
operator|)
name|analyzer
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|analyzer
operator|instanceof
name|NamedAnalyzer
operator|&&
operator|(
operator|(
name|NamedAnalyzer
operator|)
name|analyzer
operator|)
operator|.
name|analyzer
argument_list|()
operator|instanceof
name|CustomAnalyzer
condition|)
block|{
name|customAnalyzer
operator|=
call|(
name|CustomAnalyzer
call|)
argument_list|(
operator|(
name|NamedAnalyzer
operator|)
name|analyzer
argument_list|)
operator|.
name|analyzer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|customAnalyzer
operator|!=
literal|null
condition|)
block|{
comment|// customAnalyzer = divide charfilter, tokenizer tokenfilters
name|CharFilterFactory
index|[]
name|charFilterFactories
init|=
name|customAnalyzer
operator|.
name|charFilters
argument_list|()
decl_stmt|;
name|TokenizerFactory
name|tokenizerFactory
init|=
name|customAnalyzer
operator|.
name|tokenizerFactory
argument_list|()
decl_stmt|;
name|TokenFilterFactory
index|[]
name|tokenFilterFactories
init|=
name|customAnalyzer
operator|.
name|tokenFilters
argument_list|()
decl_stmt|;
name|String
index|[]
index|[]
name|charFiltersTexts
init|=
operator|new
name|String
index|[
name|charFilterFactories
operator|!=
literal|null
condition|?
name|charFilterFactories
operator|.
name|length
else|:
literal|0
index|]
index|[
name|request
operator|.
name|text
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|TokenListCreator
index|[]
name|tokenFiltersTokenListCreator
init|=
operator|new
name|TokenListCreator
index|[
name|tokenFilterFactories
operator|!=
literal|null
condition|?
name|tokenFilterFactories
operator|.
name|length
else|:
literal|0
index|]
decl_stmt|;
name|TokenListCreator
name|tokenizerTokenListCreator
init|=
operator|new
name|TokenListCreator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|textIndex
init|=
literal|0
init|;
name|textIndex
operator|<
name|request
operator|.
name|text
argument_list|()
operator|.
name|length
condition|;
name|textIndex
operator|++
control|)
block|{
name|String
name|charFilteredSource
init|=
name|request
operator|.
name|text
argument_list|()
index|[
name|textIndex
index|]
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|FastStringReader
argument_list|(
name|charFilteredSource
argument_list|)
decl_stmt|;
if|if
condition|(
name|charFilterFactories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|charFilterIndex
init|=
literal|0
init|;
name|charFilterIndex
operator|<
name|charFilterFactories
operator|.
name|length
condition|;
name|charFilterIndex
operator|++
control|)
block|{
name|reader
operator|=
name|charFilterFactories
index|[
name|charFilterIndex
index|]
operator|.
name|create
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|Reader
name|readerForWriteOut
init|=
operator|new
name|FastStringReader
argument_list|(
name|charFilteredSource
argument_list|)
decl_stmt|;
name|readerForWriteOut
operator|=
name|charFilterFactories
index|[
name|charFilterIndex
index|]
operator|.
name|create
argument_list|(
name|readerForWriteOut
argument_list|)
expr_stmt|;
name|charFilteredSource
operator|=
name|writeCharStream
argument_list|(
name|readerForWriteOut
argument_list|)
expr_stmt|;
name|charFiltersTexts
index|[
name|charFilterIndex
index|]
index|[
name|textIndex
index|]
operator|=
name|charFilteredSource
expr_stmt|;
block|}
block|}
comment|// analyzing only tokenizer
name|Tokenizer
name|tokenizer
init|=
name|tokenizerFactory
operator|.
name|create
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|tokenizerTokenListCreator
operator|.
name|analyze
argument_list|(
name|tokenizer
argument_list|,
name|customAnalyzer
argument_list|,
name|field
argument_list|,
name|includeAttributes
argument_list|)
expr_stmt|;
comment|// analyzing each tokenfilter
if|if
condition|(
name|tokenFilterFactories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|tokenFilterIndex
init|=
literal|0
init|;
name|tokenFilterIndex
operator|<
name|tokenFilterFactories
operator|.
name|length
condition|;
name|tokenFilterIndex
operator|++
control|)
block|{
if|if
condition|(
name|tokenFiltersTokenListCreator
index|[
name|tokenFilterIndex
index|]
operator|==
literal|null
condition|)
block|{
name|tokenFiltersTokenListCreator
index|[
name|tokenFilterIndex
index|]
operator|=
operator|new
name|TokenListCreator
argument_list|()
expr_stmt|;
block|}
name|TokenStream
name|stream
init|=
name|createStackedTokenStream
argument_list|(
name|request
operator|.
name|text
argument_list|()
index|[
name|textIndex
index|]
argument_list|,
name|charFilterFactories
argument_list|,
name|tokenizerFactory
argument_list|,
name|tokenFilterFactories
argument_list|,
name|tokenFilterIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|tokenFiltersTokenListCreator
index|[
name|tokenFilterIndex
index|]
operator|.
name|analyze
argument_list|(
name|stream
argument_list|,
name|customAnalyzer
argument_list|,
name|field
argument_list|,
name|includeAttributes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DetailAnalyzeResponse
operator|.
name|CharFilteredText
index|[]
name|charFilteredLists
init|=
operator|new
name|DetailAnalyzeResponse
operator|.
name|CharFilteredText
index|[
name|charFiltersTexts
operator|.
name|length
index|]
decl_stmt|;
if|if
condition|(
name|charFilterFactories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|charFilterIndex
init|=
literal|0
init|;
name|charFilterIndex
operator|<
name|charFiltersTexts
operator|.
name|length
condition|;
name|charFilterIndex
operator|++
control|)
block|{
name|charFilteredLists
index|[
name|charFilterIndex
index|]
operator|=
operator|new
name|DetailAnalyzeResponse
operator|.
name|CharFilteredText
argument_list|(
name|charFilterFactories
index|[
name|charFilterIndex
index|]
operator|.
name|name
argument_list|()
argument_list|,
name|charFiltersTexts
index|[
name|charFilterIndex
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|DetailAnalyzeResponse
operator|.
name|AnalyzeTokenList
index|[]
name|tokenFilterLists
init|=
operator|new
name|DetailAnalyzeResponse
operator|.
name|AnalyzeTokenList
index|[
name|tokenFiltersTokenListCreator
operator|.
name|length
index|]
decl_stmt|;
if|if
condition|(
name|tokenFilterFactories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|tokenFilterIndex
init|=
literal|0
init|;
name|tokenFilterIndex
operator|<
name|tokenFiltersTokenListCreator
operator|.
name|length
condition|;
name|tokenFilterIndex
operator|++
control|)
block|{
name|tokenFilterLists
index|[
name|tokenFilterIndex
index|]
operator|=
operator|new
name|DetailAnalyzeResponse
operator|.
name|AnalyzeTokenList
argument_list|(
name|tokenFilterFactories
index|[
name|tokenFilterIndex
index|]
operator|.
name|name
argument_list|()
argument_list|,
name|tokenFiltersTokenListCreator
index|[
name|tokenFilterIndex
index|]
operator|.
name|getArrayTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|detailResponse
operator|=
operator|new
name|DetailAnalyzeResponse
argument_list|(
name|charFilteredLists
argument_list|,
operator|new
name|DetailAnalyzeResponse
operator|.
name|AnalyzeTokenList
argument_list|(
name|tokenizerFactory
operator|.
name|name
argument_list|()
argument_list|,
name|tokenizerTokenListCreator
operator|.
name|getArrayTokens
argument_list|()
argument_list|)
argument_list|,
name|tokenFilterLists
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|name
decl_stmt|;
if|if
condition|(
name|analyzer
operator|instanceof
name|NamedAnalyzer
condition|)
block|{
name|name
operator|=
operator|(
operator|(
name|NamedAnalyzer
operator|)
name|analyzer
operator|)
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|analyzer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|TokenListCreator
name|tokenListCreator
init|=
operator|new
name|TokenListCreator
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|text
range|:
name|request
operator|.
name|text
argument_list|()
control|)
block|{
name|tokenListCreator
operator|.
name|analyze
argument_list|(
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
argument_list|,
name|analyzer
argument_list|,
name|field
argument_list|,
name|includeAttributes
argument_list|)
expr_stmt|;
block|}
name|detailResponse
operator|=
operator|new
name|DetailAnalyzeResponse
argument_list|(
operator|new
name|DetailAnalyzeResponse
operator|.
name|AnalyzeTokenList
argument_list|(
name|name
argument_list|,
name|tokenListCreator
operator|.
name|getArrayTokens
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|detailResponse
return|;
block|}
DECL|method|createStackedTokenStream
specifier|private
specifier|static
name|TokenStream
name|createStackedTokenStream
parameter_list|(
name|String
name|source
parameter_list|,
name|CharFilterFactory
index|[]
name|charFilterFactories
parameter_list|,
name|TokenizerFactory
name|tokenizerFactory
parameter_list|,
name|TokenFilterFactory
index|[]
name|tokenFilterFactories
parameter_list|,
name|int
name|current
parameter_list|)
block|{
name|Reader
name|reader
init|=
operator|new
name|FastStringReader
argument_list|(
name|source
argument_list|)
decl_stmt|;
for|for
control|(
name|CharFilterFactory
name|charFilterFactory
range|:
name|charFilterFactories
control|)
block|{
name|reader
operator|=
name|charFilterFactory
operator|.
name|create
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|Tokenizer
name|tokenizer
init|=
name|tokenizerFactory
operator|.
name|create
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|TokenStream
name|tokenStream
init|=
name|tokenizer
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|current
condition|;
name|i
operator|++
control|)
block|{
name|tokenStream
operator|=
name|tokenFilterFactories
index|[
name|i
index|]
operator|.
name|create
argument_list|(
name|tokenStream
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenStream
return|;
block|}
DECL|method|writeCharStream
specifier|private
specifier|static
name|String
name|writeCharStream
parameter_list|(
name|Reader
name|input
parameter_list|)
block|{
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|1024
decl_stmt|;
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
do|do
block|{
try|try
block|{
name|len
operator|=
name|input
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to analyze (charFiltering)"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|len
operator|==
name|BUFFER_SIZE
condition|)
do|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|TokenListCreator
specifier|private
specifier|static
class|class
name|TokenListCreator
block|{
DECL|field|lastPosition
name|int
name|lastPosition
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|lastOffset
name|int
name|lastOffset
init|=
literal|0
decl_stmt|;
DECL|field|tokens
name|List
argument_list|<
name|AnalyzeResponse
operator|.
name|AnalyzeToken
argument_list|>
name|tokens
decl_stmt|;
DECL|method|TokenListCreator
name|TokenListCreator
parameter_list|()
block|{
name|tokens
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|analyze
specifier|private
name|void
name|analyze
parameter_list|(
name|TokenStream
name|stream
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|String
name|field
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|includeAttributes
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CharTermAttribute
name|term
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PositionIncrementAttribute
name|posIncr
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|OffsetAttribute
name|offset
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|TypeAttribute
name|type
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|int
name|increment
init|=
name|posIncr
operator|.
name|getPositionIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|increment
operator|>
literal|0
condition|)
block|{
name|lastPosition
operator|=
name|lastPosition
operator|+
name|increment
expr_stmt|;
block|}
name|tokens
operator|.
name|add
argument_list|(
operator|new
name|AnalyzeResponse
operator|.
name|AnalyzeToken
argument_list|(
name|term
operator|.
name|toString
argument_list|()
argument_list|,
name|lastPosition
argument_list|,
name|lastOffset
operator|+
name|offset
operator|.
name|startOffset
argument_list|()
argument_list|,
name|lastOffset
operator|+
name|offset
operator|.
name|endOffset
argument_list|()
argument_list|,
name|type
operator|.
name|type
argument_list|()
argument_list|,
name|extractExtendedAttributes
argument_list|(
name|stream
argument_list|,
name|includeAttributes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|end
argument_list|()
expr_stmt|;
name|lastOffset
operator|+=
name|offset
operator|.
name|endOffset
argument_list|()
expr_stmt|;
name|lastPosition
operator|+=
name|posIncr
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
name|lastPosition
operator|+=
name|analyzer
operator|.
name|getPositionIncrementGap
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|lastOffset
operator|+=
name|analyzer
operator|.
name|getOffsetGap
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to analyze"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getArrayTokens
specifier|private
name|AnalyzeResponse
operator|.
name|AnalyzeToken
index|[]
name|getArrayTokens
parameter_list|()
block|{
return|return
name|tokens
operator|.
name|toArray
argument_list|(
operator|new
name|AnalyzeResponse
operator|.
name|AnalyzeToken
index|[
name|tokens
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
comment|/**      * other attribute extract object.      * Extracted object group by AttributeClassName      *      * @param stream current TokenStream      * @param includeAttributes filtering attributes      * @return Map&lt;key value&gt;      */
DECL|method|extractExtendedAttributes
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractExtendedAttributes
parameter_list|(
name|TokenStream
name|stream
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|includeAttributes
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extendedAttributes
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|stream
operator|.
name|reflectWith
argument_list|(
parameter_list|(
name|attClass
parameter_list|,
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|CharTermAttribute
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|attClass
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|PositionIncrementAttribute
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|attClass
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|OffsetAttribute
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|attClass
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|TypeAttribute
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|attClass
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|includeAttributes
operator|==
literal|null
operator|||
name|includeAttributes
operator|.
name|isEmpty
argument_list|()
operator|||
name|includeAttributes
operator|.
name|contains
argument_list|(
name|key
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
specifier|final
name|BytesRef
name|p
init|=
operator|(
name|BytesRef
operator|)
name|value
decl_stmt|;
name|value
operator|=
name|p
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|extendedAttributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|extendedAttributes
return|;
block|}
DECL|method|getCharFilterFactories
specifier|private
specifier|static
name|CharFilterFactory
index|[]
name|getCharFilterFactories
parameter_list|(
name|AnalyzeRequest
name|request
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|,
name|AnalysisRegistry
name|analysisRegistry
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|CharFilterFactory
index|[]
name|charFilterFactories
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|request
operator|.
name|charFilters
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|charFilters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|charFilterFactories
operator|=
operator|new
name|CharFilterFactory
index|[
name|request
operator|.
name|charFilters
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|charFilters
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|AnalyzeRequest
operator|.
name|NameOrDefinition
name|charFilter
init|=
name|request
operator|.
name|charFilters
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// parse anonymous settings
if|if
condition|(
name|charFilter
operator|.
name|definition
operator|!=
literal|null
condition|)
block|{
name|Settings
name|settings
init|=
name|getAnonymousSettings
argument_list|(
name|charFilter
operator|.
name|definition
argument_list|)
decl_stmt|;
name|String
name|charFilterTypeName
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|charFilterTypeName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing [type] setting for anonymous char filter: "
operator|+
name|charFilter
operator|.
name|definition
argument_list|)
throw|;
block|}
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
name|charFilterFactoryFactory
init|=
name|analysisRegistry
operator|.
name|getCharFilterProvider
argument_list|(
name|charFilterTypeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|charFilterFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find global char filter under ["
operator|+
name|charFilterTypeName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// Need to set anonymous "name" of char_filter
name|charFilterFactories
index|[
name|i
index|]
operator|=
name|charFilterFactoryFactory
operator|.
name|get
argument_list|(
name|getNaIndexSettings
argument_list|(
name|settings
argument_list|)
argument_list|,
name|environment
argument_list|,
literal|"_anonymous_charfilter_["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|CharFilterFactory
argument_list|>
name|charFilterFactoryFactory
decl_stmt|;
if|if
condition|(
name|indexSettings
operator|==
literal|null
condition|)
block|{
name|charFilterFactoryFactory
operator|=
name|analysisRegistry
operator|.
name|getCharFilterProvider
argument_list|(
name|charFilter
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|charFilterFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find global char filter under ["
operator|+
name|charFilter
operator|.
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|charFilterFactories
index|[
name|i
index|]
operator|=
name|charFilterFactoryFactory
operator|.
name|get
argument_list|(
name|environment
argument_list|,
name|charFilter
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charFilterFactoryFactory
operator|=
name|analysisRegistry
operator|.
name|getCharFilterProvider
argument_list|(
name|charFilter
operator|.
name|name
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
if|if
condition|(
name|charFilterFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find char filter under ["
operator|+
name|charFilter
operator|.
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|charFilterFactories
index|[
name|i
index|]
operator|=
name|charFilterFactoryFactory
operator|.
name|get
argument_list|(
name|indexSettings
argument_list|,
name|environment
argument_list|,
name|charFilter
operator|.
name|name
argument_list|,
name|AnalysisRegistry
operator|.
name|getSettingsFromIndexSettings
argument_list|(
name|indexSettings
argument_list|,
name|AnalysisRegistry
operator|.
name|INDEX_ANALYSIS_CHAR_FILTER
operator|+
literal|"."
operator|+
name|charFilter
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|charFilterFactories
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find char filter under ["
operator|+
name|charFilter
operator|.
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|charFilterFactories
return|;
block|}
DECL|method|getTokenFilterFactories
specifier|private
specifier|static
name|TokenFilterFactory
index|[]
name|getTokenFilterFactories
parameter_list|(
name|AnalyzeRequest
name|request
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|,
name|AnalysisRegistry
name|analysisRegistry
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|TokenFilterFactory
index|[]
name|tokenFilterFactories
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|request
operator|.
name|tokenFilters
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|tokenFilters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tokenFilterFactories
operator|=
operator|new
name|TokenFilterFactory
index|[
name|request
operator|.
name|tokenFilters
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|tokenFilters
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|AnalyzeRequest
operator|.
name|NameOrDefinition
name|tokenFilter
init|=
name|request
operator|.
name|tokenFilters
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// parse anonymous settings
if|if
condition|(
name|tokenFilter
operator|.
name|definition
operator|!=
literal|null
condition|)
block|{
name|Settings
name|settings
init|=
name|getAnonymousSettings
argument_list|(
name|tokenFilter
operator|.
name|definition
argument_list|)
decl_stmt|;
name|String
name|filterTypeName
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterTypeName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing [type] setting for anonymous token filter: "
operator|+
name|tokenFilter
operator|.
name|definition
argument_list|)
throw|;
block|}
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
name|tokenFilterFactoryFactory
init|=
name|analysisRegistry
operator|.
name|getTokenFilterProvider
argument_list|(
name|filterTypeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenFilterFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find global token filter under ["
operator|+
name|filterTypeName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// Need to set anonymous "name" of tokenfilter
name|tokenFilterFactories
index|[
name|i
index|]
operator|=
name|tokenFilterFactoryFactory
operator|.
name|get
argument_list|(
name|getNaIndexSettings
argument_list|(
name|settings
argument_list|)
argument_list|,
name|environment
argument_list|,
literal|"_anonymous_tokenfilter_["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenFilterFactory
argument_list|>
name|tokenFilterFactoryFactory
decl_stmt|;
if|if
condition|(
name|indexSettings
operator|==
literal|null
condition|)
block|{
name|tokenFilterFactoryFactory
operator|=
name|analysisRegistry
operator|.
name|getTokenFilterProvider
argument_list|(
name|tokenFilter
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenFilterFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find global token filter under ["
operator|+
name|tokenFilter
operator|.
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|tokenFilterFactories
index|[
name|i
index|]
operator|=
name|tokenFilterFactoryFactory
operator|.
name|get
argument_list|(
name|environment
argument_list|,
name|tokenFilter
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenFilterFactoryFactory
operator|=
name|analysisRegistry
operator|.
name|getTokenFilterProvider
argument_list|(
name|tokenFilter
operator|.
name|name
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenFilterFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find token filter under ["
operator|+
name|tokenFilter
operator|.
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|tokenFilterFactories
index|[
name|i
index|]
operator|=
name|tokenFilterFactoryFactory
operator|.
name|get
argument_list|(
name|indexSettings
argument_list|,
name|environment
argument_list|,
name|tokenFilter
operator|.
name|name
argument_list|,
name|AnalysisRegistry
operator|.
name|getSettingsFromIndexSettings
argument_list|(
name|indexSettings
argument_list|,
name|AnalysisRegistry
operator|.
name|INDEX_ANALYSIS_FILTER
operator|+
literal|"."
operator|+
name|tokenFilter
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tokenFilterFactories
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find or create token filter under ["
operator|+
name|tokenFilter
operator|.
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|tokenFilterFactories
return|;
block|}
DECL|method|parseTokenizerFactory
specifier|private
specifier|static
name|TokenizerFactory
name|parseTokenizerFactory
parameter_list|(
name|AnalyzeRequest
name|request
parameter_list|,
name|IndexAnalyzers
name|indexAnalzyers
parameter_list|,
name|AnalysisRegistry
name|analysisRegistry
parameter_list|,
name|Environment
name|environment
parameter_list|)
throws|throws
name|IOException
block|{
name|TokenizerFactory
name|tokenizerFactory
decl_stmt|;
specifier|final
name|AnalyzeRequest
operator|.
name|NameOrDefinition
name|tokenizer
init|=
name|request
operator|.
name|tokenizer
argument_list|()
decl_stmt|;
comment|// parse anonymous settings
if|if
condition|(
name|tokenizer
operator|.
name|definition
operator|!=
literal|null
condition|)
block|{
name|Settings
name|settings
init|=
name|getAnonymousSettings
argument_list|(
name|tokenizer
operator|.
name|definition
argument_list|)
decl_stmt|;
name|String
name|tokenizerTypeName
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizerTypeName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing [type] setting for anonymous tokenizer: "
operator|+
name|tokenizer
operator|.
name|definition
argument_list|)
throw|;
block|}
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
name|tokenizerFactoryFactory
init|=
name|analysisRegistry
operator|.
name|getTokenizerProvider
argument_list|(
name|tokenizerTypeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizerFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find global tokenizer under ["
operator|+
name|tokenizerTypeName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// Need to set anonymous "name" of tokenizer
name|tokenizerFactory
operator|=
name|tokenizerFactoryFactory
operator|.
name|get
argument_list|(
name|getNaIndexSettings
argument_list|(
name|settings
argument_list|)
argument_list|,
name|environment
argument_list|,
literal|"_anonymous_tokenizer"
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AnalysisModule
operator|.
name|AnalysisProvider
argument_list|<
name|TokenizerFactory
argument_list|>
name|tokenizerFactoryFactory
decl_stmt|;
if|if
condition|(
name|indexAnalzyers
operator|==
literal|null
condition|)
block|{
name|tokenizerFactoryFactory
operator|=
name|analysisRegistry
operator|.
name|getTokenizerProvider
argument_list|(
name|tokenizer
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenizerFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find global tokenizer under ["
operator|+
name|tokenizer
operator|.
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|tokenizerFactory
operator|=
name|tokenizerFactoryFactory
operator|.
name|get
argument_list|(
name|environment
argument_list|,
name|tokenizer
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenizerFactoryFactory
operator|=
name|analysisRegistry
operator|.
name|getTokenizerProvider
argument_list|(
name|tokenizer
operator|.
name|name
argument_list|,
name|indexAnalzyers
operator|.
name|getIndexSettings
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenizerFactoryFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to find tokenizer under ["
operator|+
name|tokenizer
operator|.
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|tokenizerFactory
operator|=
name|tokenizerFactoryFactory
operator|.
name|get
argument_list|(
name|indexAnalzyers
operator|.
name|getIndexSettings
argument_list|()
argument_list|,
name|environment
argument_list|,
name|tokenizer
operator|.
name|name
argument_list|,
name|AnalysisRegistry
operator|.
name|getSettingsFromIndexSettings
argument_list|(
name|indexAnalzyers
operator|.
name|getIndexSettings
argument_list|()
argument_list|,
name|AnalysisRegistry
operator|.
name|INDEX_ANALYSIS_TOKENIZER
operator|+
literal|"."
operator|+
name|tokenizer
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tokenizerFactory
return|;
block|}
DECL|method|getNaIndexSettings
specifier|private
specifier|static
name|IndexSettings
name|getNaIndexSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|IndexMetaData
name|metaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|IndexSettings
argument_list|(
name|metaData
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
return|;
block|}
DECL|method|getAnonymousSettings
specifier|private
specifier|static
name|Settings
name|getAnonymousSettings
parameter_list|(
name|Settings
name|providerSetting
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|providerSetting
argument_list|)
comment|// for _na_
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

