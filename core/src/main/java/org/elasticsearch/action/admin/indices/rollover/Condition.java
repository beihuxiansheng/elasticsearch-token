begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.rollover
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|rollover
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Base class for rollover request conditions  */
end_comment

begin_class
DECL|class|Condition
specifier|public
specifier|abstract
class|class
name|Condition
parameter_list|<
name|T
parameter_list|>
implements|implements
name|NamedWriteable
block|{
DECL|field|PARSER
specifier|public
specifier|static
name|ObjectParser
argument_list|<
name|Set
argument_list|<
name|Condition
argument_list|>
argument_list|,
name|Void
argument_list|>
name|PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"conditions"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareString
argument_list|(
parameter_list|(
name|conditions
parameter_list|,
name|s
parameter_list|)
lambda|->
name|conditions
operator|.
name|add
argument_list|(
operator|new
name|MaxAgeCondition
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|s
argument_list|,
name|MaxAgeCondition
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ParseField
argument_list|(
name|MaxAgeCondition
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareLong
argument_list|(
parameter_list|(
name|conditions
parameter_list|,
name|value
parameter_list|)
lambda|->
name|conditions
operator|.
name|add
argument_list|(
operator|new
name|MaxDocsCondition
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ParseField
argument_list|(
name|MaxDocsCondition
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|value
specifier|protected
name|T
name|value
decl_stmt|;
DECL|field|name
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|Condition
specifier|protected
name|Condition
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|evaluate
specifier|public
specifier|abstract
name|Result
name|evaluate
parameter_list|(
specifier|final
name|Stats
name|stats
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|toString
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|name
operator|+
literal|": "
operator|+
name|value
operator|+
literal|"]"
return|;
block|}
comment|/**      * Holder for index stats used to evaluate conditions      */
DECL|class|Stats
specifier|public
specifier|static
class|class
name|Stats
block|{
DECL|field|numDocs
specifier|public
specifier|final
name|long
name|numDocs
decl_stmt|;
DECL|field|indexCreated
specifier|public
specifier|final
name|long
name|indexCreated
decl_stmt|;
DECL|method|Stats
specifier|public
name|Stats
parameter_list|(
name|long
name|numDocs
parameter_list|,
name|long
name|indexCreated
parameter_list|)
block|{
name|this
operator|.
name|numDocs
operator|=
name|numDocs
expr_stmt|;
name|this
operator|.
name|indexCreated
operator|=
name|indexCreated
expr_stmt|;
block|}
block|}
comment|/**      * Holder for evaluated condition result      */
DECL|class|Result
specifier|public
specifier|static
class|class
name|Result
block|{
DECL|field|condition
specifier|public
specifier|final
name|Condition
name|condition
decl_stmt|;
DECL|field|matched
specifier|public
specifier|final
name|boolean
name|matched
decl_stmt|;
DECL|method|Result
specifier|protected
name|Result
parameter_list|(
name|Condition
name|condition
parameter_list|,
name|boolean
name|matched
parameter_list|)
block|{
name|this
operator|.
name|condition
operator|=
name|condition
expr_stmt|;
name|this
operator|.
name|matched
operator|=
name|matched
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

