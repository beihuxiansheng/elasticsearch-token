begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.rollover
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|rollover
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
DECL|class|Condition
specifier|public
class|class
name|Condition
block|{
DECL|enum|ConditionType
specifier|public
enum|enum
name|ConditionType
block|{
DECL|enum constant|MAX_SIZE
name|MAX_SIZE
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
DECL|enum constant|MAX_AGE
name|MAX_AGE
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
DECL|enum constant|MAX_DOCS
name|MAX_DOCS
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|ConditionType
name|ConditionType
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getId
specifier|public
name|byte
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|fromId
specifier|public
specifier|static
name|ConditionType
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|0
condition|)
block|{
return|return
name|MAX_SIZE
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|1
condition|)
block|{
return|return
name|MAX_AGE
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|2
condition|)
block|{
return|return
name|MAX_DOCS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no condition type ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|fromString
specifier|public
specifier|static
name|ConditionType
name|fromString
parameter_list|(
name|String
name|type
parameter_list|)
block|{
specifier|final
name|String
name|typeString
init|=
name|type
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|typeString
condition|)
block|{
case|case
literal|"max_size"
case|:
return|return
name|MAX_SIZE
return|;
case|case
literal|"max_age"
case|:
return|return
name|MAX_AGE
return|;
case|case
literal|"max_docs"
case|:
return|return
name|MAX_DOCS
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no condition type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseFromString
specifier|public
specifier|static
name|long
name|parseFromString
parameter_list|(
name|ConditionType
name|condition
parameter_list|,
name|String
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|condition
condition|)
block|{
case|case
name|MAX_SIZE
case|:
return|return
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
argument_list|(
name|value
argument_list|,
name|MAX_SIZE
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
case|case
name|MAX_AGE
case|:
return|return
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|value
argument_list|,
name|MAX_AGE
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
operator|.
name|getMillis
argument_list|()
return|;
case|case
name|MAX_DOCS
case|:
try|try
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Failed to parse setting [{}] with value [{}] as long"
argument_list|,
name|e
argument_list|,
name|MAX_DOCS
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|value
argument_list|)
throw|;
block|}
default|default:
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"condition ["
operator|+
name|condition
operator|+
literal|"] not recognized"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|type
specifier|private
specifier|final
name|ConditionType
name|type
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|long
name|value
decl_stmt|;
DECL|method|Condition
specifier|public
name|Condition
parameter_list|(
name|ConditionType
name|type
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getType
specifier|public
name|ConditionType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getValue
specifier|public
name|long
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

