begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.node.usage
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|usage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|NodeUsage
specifier|public
class|class
name|NodeUsage
extends|extends
name|BaseNodeResponse
implements|implements
name|ToXContent
block|{
DECL|field|timestamp
specifier|private
name|long
name|timestamp
decl_stmt|;
DECL|field|sinceTime
specifier|private
name|long
name|sinceTime
decl_stmt|;
DECL|field|restUsage
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|restUsage
decl_stmt|;
DECL|method|NodeUsage
name|NodeUsage
parameter_list|()
block|{     }
DECL|method|readNodeStats
specifier|public
specifier|static
name|NodeUsage
name|readNodeStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeUsage
name|nodeInfo
init|=
operator|new
name|NodeUsage
argument_list|()
decl_stmt|;
name|nodeInfo
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|nodeInfo
return|;
block|}
comment|/**      * @param node      *            the node these statistics were collected from      * @param timestamp      *            the timestamp for when these statistics were collected      * @param sinceTime      *            the timestamp for when the collection of these statistics      *            started      * @param restUsage      *            a map containing the counts of the number of times each REST      *            endpoint has been called      */
DECL|method|NodeUsage
specifier|public
name|NodeUsage
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|long
name|sinceTime
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|restUsage
parameter_list|)
block|{
name|super
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|sinceTime
operator|=
name|sinceTime
expr_stmt|;
name|this
operator|.
name|restUsage
operator|=
name|restUsage
expr_stmt|;
block|}
comment|/**      * @return the timestamp for when these statistics were collected      */
DECL|method|getTimestamp
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
comment|/**      * @return the timestamp for when the collection of these statistics started      */
DECL|method|getSinceTime
specifier|public
name|long
name|getSinceTime
parameter_list|()
block|{
return|return
name|sinceTime
return|;
block|}
comment|/**      * @return a map containing the counts of the number of times each REST      *         endpoint has been called      */
DECL|method|getRestUsage
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getRestUsage
parameter_list|()
block|{
return|return
name|restUsage
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"since"
argument_list|,
name|sinceTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|restUsage
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"rest_actions"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|restUsage
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|sinceTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|restUsage
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|sinceTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|restUsage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

