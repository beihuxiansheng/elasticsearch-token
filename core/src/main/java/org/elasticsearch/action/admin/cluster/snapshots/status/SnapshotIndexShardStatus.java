begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.snapshots.status
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|status
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastShardResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardSnapshotStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|SnapshotIndexShardStatus
specifier|public
class|class
name|SnapshotIndexShardStatus
extends|extends
name|BroadcastShardResponse
implements|implements
name|ToXContent
block|{
DECL|field|stage
specifier|private
name|SnapshotIndexShardStage
name|stage
init|=
name|SnapshotIndexShardStage
operator|.
name|INIT
decl_stmt|;
DECL|field|stats
specifier|private
name|SnapshotStats
name|stats
decl_stmt|;
DECL|field|nodeId
specifier|private
name|String
name|nodeId
decl_stmt|;
DECL|field|failure
specifier|private
name|String
name|failure
decl_stmt|;
DECL|method|SnapshotIndexShardStatus
specifier|private
name|SnapshotIndexShardStatus
parameter_list|()
block|{     }
DECL|method|SnapshotIndexShardStatus
name|SnapshotIndexShardStatus
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|SnapshotIndexShardStage
name|stage
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
name|this
operator|.
name|stage
operator|=
name|stage
expr_stmt|;
name|this
operator|.
name|stats
operator|=
operator|new
name|SnapshotStats
argument_list|()
expr_stmt|;
block|}
DECL|method|SnapshotIndexShardStatus
name|SnapshotIndexShardStatus
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|IndexShardSnapshotStatus
name|indexShardStatus
parameter_list|)
block|{
name|this
argument_list|(
name|shardId
argument_list|,
name|indexShardStatus
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SnapshotIndexShardStatus
name|SnapshotIndexShardStatus
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|IndexShardSnapshotStatus
name|indexShardStatus
parameter_list|,
name|String
name|nodeId
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|indexShardStatus
operator|.
name|stage
argument_list|()
condition|)
block|{
case|case
name|INIT
case|:
name|stage
operator|=
name|SnapshotIndexShardStage
operator|.
name|INIT
expr_stmt|;
break|break;
case|case
name|STARTED
case|:
name|stage
operator|=
name|SnapshotIndexShardStage
operator|.
name|STARTED
expr_stmt|;
break|break;
case|case
name|FINALIZE
case|:
name|stage
operator|=
name|SnapshotIndexShardStage
operator|.
name|FINALIZE
expr_stmt|;
break|break;
case|case
name|DONE
case|:
name|stage
operator|=
name|SnapshotIndexShardStage
operator|.
name|DONE
expr_stmt|;
break|break;
case|case
name|FAILURE
case|:
name|stage
operator|=
name|SnapshotIndexShardStage
operator|.
name|FAILURE
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown stage type "
operator|+
name|indexShardStatus
operator|.
name|stage
argument_list|()
argument_list|)
throw|;
block|}
name|stats
operator|=
operator|new
name|SnapshotStats
argument_list|(
name|indexShardStatus
argument_list|)
expr_stmt|;
name|failure
operator|=
name|indexShardStatus
operator|.
name|failure
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
comment|/**      * Returns snapshot stage      */
DECL|method|getStage
specifier|public
name|SnapshotIndexShardStage
name|getStage
parameter_list|()
block|{
return|return
name|stage
return|;
block|}
comment|/**      * Returns snapshot stats      */
DECL|method|getStats
specifier|public
name|SnapshotStats
name|getStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
comment|/**      * Returns node id of the node where snapshot is currently running      */
DECL|method|getNodeId
specifier|public
name|String
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
comment|/**      * Returns reason for snapshot failure      */
DECL|method|getFailure
specifier|public
name|String
name|getFailure
parameter_list|()
block|{
return|return
name|failure
return|;
block|}
DECL|method|readShardSnapshotStatus
specifier|public
specifier|static
name|SnapshotIndexShardStatus
name|readShardSnapshotStatus
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotIndexShardStatus
name|shardStatus
init|=
operator|new
name|SnapshotIndexShardStatus
argument_list|()
decl_stmt|;
name|shardStatus
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|shardStatus
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|stage
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|stage
operator|=
name|SnapshotIndexShardStage
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|SnapshotStats
operator|.
name|readSnapshotStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|nodeId
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|failure
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|STAGE
specifier|static
specifier|final
name|String
name|STAGE
init|=
literal|"stage"
decl_stmt|;
DECL|field|REASON
specifier|static
specifier|final
name|String
name|REASON
init|=
literal|"reason"
decl_stmt|;
DECL|field|NODE
specifier|static
specifier|final
name|String
name|NODE
init|=
literal|"node"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|getShardId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|STAGE
argument_list|,
name|getStage
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|getNodeId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|NODE
argument_list|,
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getFailure
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|REASON
argument_list|,
name|getFailure
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

