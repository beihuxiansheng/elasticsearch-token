begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.state
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * The response for getting the cluster state.  */
end_comment

begin_class
DECL|class|ClusterStateResponse
specifier|public
class|class
name|ClusterStateResponse
extends|extends
name|ActionResponse
block|{
DECL|field|clusterName
specifier|private
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|clusterState
specifier|private
name|ClusterState
name|clusterState
decl_stmt|;
comment|// the total compressed size of the full cluster state, not just
comment|// the parts included in this response
DECL|field|totalCompressedSize
specifier|private
name|ByteSizeValue
name|totalCompressedSize
decl_stmt|;
DECL|method|ClusterStateResponse
specifier|public
name|ClusterStateResponse
parameter_list|()
block|{     }
DECL|method|ClusterStateResponse
specifier|public
name|ClusterStateResponse
parameter_list|(
name|ClusterName
name|clusterName
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|,
name|long
name|sizeInBytes
parameter_list|)
block|{
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|clusterState
expr_stmt|;
name|this
operator|.
name|totalCompressedSize
operator|=
operator|new
name|ByteSizeValue
argument_list|(
name|sizeInBytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * The requested cluster state.  Only the parts of the cluster state that were      * requested are included in the returned {@link ClusterState} instance.      */
DECL|method|getState
specifier|public
name|ClusterState
name|getState
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterState
return|;
block|}
comment|/**      * The name of the cluster.      */
DECL|method|getClusterName
specifier|public
name|ClusterName
name|getClusterName
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterName
return|;
block|}
comment|/**      * The total compressed size of the full cluster state, not just the parts      * returned by {@link #getState()}.  The total compressed size is the size      * of the cluster state as it would be transmitted over the network during      * intra-node communication.      */
DECL|method|getTotalCompressedSize
specifier|public
name|ByteSizeValue
name|getTotalCompressedSize
parameter_list|()
block|{
return|return
name|totalCompressedSize
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|clusterName
operator|=
operator|new
name|ClusterName
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|readFrom
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1
argument_list|)
condition|)
block|{
name|totalCompressedSize
operator|=
operator|new
name|ByteSizeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// in a mixed cluster, if a pre 6.0 node processes the get cluster state
comment|// request, then a compressed size won't be returned, so just return 0;
comment|// its a temporary situation until all nodes in the cluster have been upgraded,
comment|// at which point the correct cluster state size will always be reported
name|totalCompressedSize
operator|=
operator|new
name|ByteSizeValue
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|clusterName
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|clusterState
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1
argument_list|)
condition|)
block|{
name|totalCompressedSize
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

