begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.upgrade.post
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|upgrade
operator|.
name|post
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|PrimaryMissingActionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|DefaultShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|TransportBroadcastAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceArray
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_comment
comment|/**  * Upgrade index/indices action.  */
end_comment

begin_class
DECL|class|TransportUpgradeAction
specifier|public
class|class
name|TransportUpgradeAction
extends|extends
name|TransportBroadcastAction
argument_list|<
name|UpgradeRequest
argument_list|,
name|UpgradeResponse
argument_list|,
name|ShardUpgradeRequest
argument_list|,
name|ShardUpgradeResponse
argument_list|>
block|{
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|upgradeSettingsAction
specifier|private
specifier|final
name|TransportUpgradeSettingsAction
name|upgradeSettingsAction
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportUpgradeAction
specifier|public
name|TransportUpgradeAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|TransportUpgradeSettingsAction
name|upgradeSettingsAction
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|UpgradeAction
operator|.
name|NAME
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|UpgradeRequest
operator|.
name|class
argument_list|,
name|ShardUpgradeRequest
operator|.
name|class
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|OPTIMIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|upgradeSettingsAction
operator|=
name|upgradeSettingsAction
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|protected
name|UpgradeResponse
name|newResponse
parameter_list|(
name|UpgradeRequest
name|request
parameter_list|,
name|AtomicReferenceArray
name|shardsResponses
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|int
name|successfulShards
init|=
literal|0
decl_stmt|;
name|int
name|failedShards
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ShardOperationFailedException
argument_list|>
name|shardFailures
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|successfulPrimaryShards
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Version
argument_list|>
name|versions
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardsResponses
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|shardResponse
init|=
name|shardsResponses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardResponse
operator|==
literal|null
condition|)
block|{
comment|// a non active shard, ignore...
block|}
elseif|else
if|if
condition|(
name|shardResponse
operator|instanceof
name|BroadcastShardOperationFailedException
condition|)
block|{
name|failedShards
operator|++
expr_stmt|;
if|if
condition|(
name|shardFailures
operator|==
literal|null
condition|)
block|{
name|shardFailures
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|shardFailures
operator|.
name|add
argument_list|(
operator|new
name|DefaultShardOperationFailedException
argument_list|(
operator|(
name|BroadcastShardOperationFailedException
operator|)
name|shardResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|successfulShards
operator|++
expr_stmt|;
name|ShardUpgradeResponse
name|shardUpgradeResponse
init|=
operator|(
name|ShardUpgradeResponse
operator|)
name|shardResponse
decl_stmt|;
name|String
name|index
init|=
name|shardUpgradeResponse
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardUpgradeResponse
operator|.
name|primary
argument_list|()
condition|)
block|{
name|Integer
name|count
init|=
name|successfulPrimaryShards
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|successfulPrimaryShards
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|count
operator|==
literal|null
condition|?
literal|1
else|:
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|Version
name|version
init|=
name|versions
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
operator|||
name|shardUpgradeResponse
operator|.
name|version
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|version
argument_list|)
operator|==
literal|false
condition|)
block|{
name|versions
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|shardUpgradeResponse
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updatedVersions
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Version
argument_list|>
name|versionEntry
range|:
name|versions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|index
init|=
name|versionEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Integer
name|primaryCount
init|=
name|successfulPrimaryShards
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|int
name|expectedPrimaryCount
init|=
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getNumberOfShards
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryCount
operator|==
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getNumberOfShards
argument_list|()
condition|)
block|{
name|updatedVersions
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|versionEntry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Not updating settings for the index [{}] because upgraded of some primary shards failed - expected[{}], received[{}]"
argument_list|,
name|index
argument_list|,
name|expectedPrimaryCount
argument_list|,
name|primaryCount
operator|==
literal|null
condition|?
literal|0
else|:
name|primaryCount
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|UpgradeResponse
argument_list|(
name|updatedVersions
argument_list|,
name|shardsResponses
operator|.
name|length
argument_list|()
argument_list|,
name|successfulShards
argument_list|,
name|failedShards
argument_list|,
name|shardFailures
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newShardRequest
specifier|protected
name|ShardUpgradeRequest
name|newShardRequest
parameter_list|(
name|int
name|numShards
parameter_list|,
name|ShardRouting
name|shard
parameter_list|,
name|UpgradeRequest
name|request
parameter_list|)
block|{
return|return
operator|new
name|ShardUpgradeRequest
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newShardResponse
specifier|protected
name|ShardUpgradeResponse
name|newShardResponse
parameter_list|()
block|{
return|return
operator|new
name|ShardUpgradeResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperation
specifier|protected
name|ShardUpgradeResponse
name|shardOperation
parameter_list|(
name|ShardUpgradeRequest
name|request
parameter_list|)
block|{
name|IndexShard
name|indexShard
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|shardSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
name|version
init|=
name|indexShard
operator|.
name|upgrade
argument_list|(
name|request
operator|.
name|upgradeRequest
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ShardUpgradeResponse
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
argument_list|,
name|version
argument_list|)
return|;
block|}
comment|/**      * The upgrade request works against *all* shards.      */
annotation|@
name|Override
DECL|method|shards
specifier|protected
name|GroupShardsIterator
name|shards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|UpgradeRequest
name|request
parameter_list|,
name|String
index|[]
name|concreteIndices
parameter_list|)
block|{
name|GroupShardsIterator
name|iterator
init|=
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
name|concreteIndices
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|indicesWithMissingPrimaries
init|=
name|indicesWithMissingPrimaries
argument_list|(
name|clusterState
argument_list|,
name|concreteIndices
argument_list|)
decl_stmt|;
if|if
condition|(
name|indicesWithMissingPrimaries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|iterator
return|;
block|}
comment|// If some primary shards are not available the request should fail.
throw|throw
operator|new
name|PrimaryMissingActionException
argument_list|(
literal|"Cannot upgrade indices because the following indices are missing primary shards "
operator|+
name|indicesWithMissingPrimaries
argument_list|)
throw|;
block|}
comment|/**      * Finds all indices that have not all primaries available      */
DECL|method|indicesWithMissingPrimaries
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|indicesWithMissingPrimaries
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
index|[]
name|concreteIndices
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|indices
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|clusterState
operator|.
name|routingTable
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|concreteIndices
control|)
block|{
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|routingTable
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|.
name|allPrimaryShardsActive
argument_list|()
operator|==
literal|false
condition|)
block|{
name|indices
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|indices
return|;
block|}
annotation|@
name|Override
DECL|method|checkGlobalBlock
specifier|protected
name|ClusterBlockException
name|checkGlobalBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|UpgradeRequest
name|request
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|globalBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|METADATA_WRITE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkRequestBlock
specifier|protected
name|ClusterBlockException
name|checkRequestBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|UpgradeRequest
name|request
parameter_list|,
name|String
index|[]
name|concreteIndices
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|indicesBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|METADATA_WRITE
argument_list|,
name|concreteIndices
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|UpgradeRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|UpgradeResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|ActionListener
argument_list|<
name|UpgradeResponse
argument_list|>
name|settingsUpdateListener
init|=
operator|new
name|ActionListener
argument_list|<
name|UpgradeResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|UpgradeResponse
name|upgradeResponse
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|upgradeResponse
operator|.
name|versions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|upgradeResponse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateSettings
argument_list|(
name|upgradeResponse
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|super
operator|.
name|doExecute
argument_list|(
name|request
argument_list|,
name|settingsUpdateListener
argument_list|)
expr_stmt|;
block|}
DECL|method|updateSettings
specifier|private
name|void
name|updateSettings
parameter_list|(
specifier|final
name|UpgradeResponse
name|upgradeResponse
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|UpgradeResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|UpgradeSettingsRequest
name|upgradeSettingsRequest
init|=
operator|new
name|UpgradeSettingsRequest
argument_list|(
name|upgradeResponse
operator|.
name|versions
argument_list|()
argument_list|)
decl_stmt|;
name|upgradeSettingsAction
operator|.
name|execute
argument_list|(
name|upgradeSettingsRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|UpgradeSettingsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|UpgradeSettingsResponse
name|updateSettingsResponse
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|upgradeResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

