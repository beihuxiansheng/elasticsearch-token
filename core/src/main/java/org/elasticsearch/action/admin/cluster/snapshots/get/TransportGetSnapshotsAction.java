begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.snapshots.get
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|get
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|TransportMasterNodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|IndexId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Transport Action for get snapshots operation  */
end_comment

begin_class
DECL|class|TransportGetSnapshotsAction
specifier|public
class|class
name|TransportGetSnapshotsAction
extends|extends
name|TransportMasterNodeAction
argument_list|<
name|GetSnapshotsRequest
argument_list|,
name|GetSnapshotsResponse
argument_list|>
block|{
DECL|field|snapshotsService
specifier|private
specifier|final
name|SnapshotsService
name|snapshotsService
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportGetSnapshotsAction
specifier|public
name|TransportGetSnapshotsAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|SnapshotsService
name|snapshotsService
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|GetSnapshotsAction
operator|.
name|NAME
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|GetSnapshotsRequest
operator|::
operator|new
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotsService
operator|=
name|snapshotsService
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|protected
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|protected
name|GetSnapshotsResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|GetSnapshotsResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|checkBlock
specifier|protected
name|ClusterBlockException
name|checkBlock
parameter_list|(
name|GetSnapshotsRequest
name|request
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|globalBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|METADATA_READ
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|masterOperation
specifier|protected
name|void
name|masterOperation
parameter_list|(
specifier|final
name|GetSnapshotsRequest
name|request
parameter_list|,
specifier|final
name|ClusterState
name|state
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|GetSnapshotsResponse
argument_list|>
name|listener
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|repository
init|=
name|request
operator|.
name|repository
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SnapshotId
argument_list|>
name|allSnapshotIds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SnapshotInfo
argument_list|>
name|currentSnapshots
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotInfo
name|snapshotInfo
range|:
name|snapshotsService
operator|.
name|currentSnapshots
argument_list|(
name|repository
argument_list|)
control|)
block|{
name|SnapshotId
name|snapshotId
init|=
name|snapshotInfo
operator|.
name|snapshotId
argument_list|()
decl_stmt|;
name|allSnapshotIds
operator|.
name|put
argument_list|(
name|snapshotId
operator|.
name|getName
argument_list|()
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
name|currentSnapshots
operator|.
name|add
argument_list|(
name|snapshotInfo
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RepositoryData
name|repositoryData
decl_stmt|;
if|if
condition|(
name|isCurrentSnapshotsOnly
argument_list|(
name|request
operator|.
name|snapshots
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|repositoryData
operator|=
name|snapshotsService
operator|.
name|getRepositoryData
argument_list|(
name|repository
argument_list|)
expr_stmt|;
for|for
control|(
name|SnapshotId
name|snapshotId
range|:
name|repositoryData
operator|.
name|getAllSnapshotIds
argument_list|()
control|)
block|{
name|allSnapshotIds
operator|.
name|put
argument_list|(
name|snapshotId
operator|.
name|getName
argument_list|()
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|repositoryData
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|Set
argument_list|<
name|SnapshotId
argument_list|>
name|toResolve
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAllSnapshots
argument_list|(
name|request
operator|.
name|snapshots
argument_list|()
argument_list|)
condition|)
block|{
name|toResolve
operator|.
name|addAll
argument_list|(
name|allSnapshotIds
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|snapshotOrPattern
range|:
name|request
operator|.
name|snapshots
argument_list|()
control|)
block|{
if|if
condition|(
name|GetSnapshotsRequest
operator|.
name|CURRENT_SNAPSHOT
operator|.
name|equalsIgnoreCase
argument_list|(
name|snapshotOrPattern
argument_list|)
condition|)
block|{
name|toResolve
operator|.
name|addAll
argument_list|(
name|currentSnapshots
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|SnapshotInfo
operator|::
name|snapshotId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|snapshotOrPattern
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|allSnapshotIds
operator|.
name|containsKey
argument_list|(
name|snapshotOrPattern
argument_list|)
condition|)
block|{
name|toResolve
operator|.
name|add
argument_list|(
name|allSnapshotIds
operator|.
name|get
argument_list|(
name|snapshotOrPattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|ignoreUnavailable
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SnapshotMissingException
argument_list|(
name|repository
argument_list|,
name|snapshotOrPattern
argument_list|)
throw|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SnapshotId
argument_list|>
name|entry
range|:
name|allSnapshotIds
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|snapshotOrPattern
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|toResolve
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|toResolve
operator|.
name|isEmpty
argument_list|()
operator|&&
name|request
operator|.
name|ignoreUnavailable
argument_list|()
operator|==
literal|false
operator|&&
name|isCurrentSnapshotsOnly
argument_list|(
name|request
operator|.
name|snapshots
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|SnapshotMissingException
argument_list|(
name|repository
argument_list|,
name|request
operator|.
name|snapshots
argument_list|()
index|[
literal|0
index|]
argument_list|)
throw|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|SnapshotInfo
argument_list|>
name|snapshotInfos
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|verbose
argument_list|()
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|SnapshotId
argument_list|>
name|incompatibleSnapshots
init|=
name|repositoryData
operator|!=
literal|null
condition|?
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|repositoryData
operator|.
name|getIncompatibleSnapshotIds
argument_list|()
argument_list|)
else|:
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|snapshotInfos
operator|=
name|snapshotsService
operator|.
name|snapshots
argument_list|(
name|repository
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|toResolve
argument_list|)
argument_list|,
name|incompatibleSnapshots
argument_list|,
name|request
operator|.
name|ignoreUnavailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|repositoryData
operator|!=
literal|null
condition|)
block|{
comment|// want non-current snapshots as well, which are found in the repository data
name|snapshotInfos
operator|=
name|buildSimpleSnapshotInfos
argument_list|(
name|toResolve
argument_list|,
name|repositoryData
argument_list|,
name|currentSnapshots
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// only want current snapshots
name|snapshotInfos
operator|=
name|currentSnapshots
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|SnapshotInfo
operator|::
name|basic
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|snapshotInfos
argument_list|)
expr_stmt|;
block|}
block|}
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|GetSnapshotsResponse
argument_list|(
name|snapshotInfos
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isAllSnapshots
specifier|private
name|boolean
name|isAllSnapshots
parameter_list|(
name|String
index|[]
name|snapshots
parameter_list|)
block|{
return|return
operator|(
name|snapshots
operator|.
name|length
operator|==
literal|0
operator|)
operator|||
operator|(
name|snapshots
operator|.
name|length
operator|==
literal|1
operator|&&
name|GetSnapshotsRequest
operator|.
name|ALL_SNAPSHOTS
operator|.
name|equalsIgnoreCase
argument_list|(
name|snapshots
index|[
literal|0
index|]
argument_list|)
operator|)
return|;
block|}
DECL|method|isCurrentSnapshotsOnly
specifier|private
name|boolean
name|isCurrentSnapshotsOnly
parameter_list|(
name|String
index|[]
name|snapshots
parameter_list|)
block|{
return|return
operator|(
name|snapshots
operator|.
name|length
operator|==
literal|1
operator|&&
name|GetSnapshotsRequest
operator|.
name|CURRENT_SNAPSHOT
operator|.
name|equalsIgnoreCase
argument_list|(
name|snapshots
index|[
literal|0
index|]
argument_list|)
operator|)
return|;
block|}
DECL|method|buildSimpleSnapshotInfos
specifier|private
name|List
argument_list|<
name|SnapshotInfo
argument_list|>
name|buildSimpleSnapshotInfos
parameter_list|(
specifier|final
name|Set
argument_list|<
name|SnapshotId
argument_list|>
name|toResolve
parameter_list|,
specifier|final
name|RepositoryData
name|repositoryData
parameter_list|,
specifier|final
name|List
argument_list|<
name|SnapshotInfo
argument_list|>
name|currentSnapshots
parameter_list|)
block|{
name|List
argument_list|<
name|SnapshotInfo
argument_list|>
name|snapshotInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotInfo
name|snapshotInfo
range|:
name|currentSnapshots
control|)
block|{
if|if
condition|(
name|toResolve
operator|.
name|remove
argument_list|(
name|snapshotInfo
operator|.
name|snapshotId
argument_list|()
argument_list|)
condition|)
block|{
name|snapshotInfos
operator|.
name|add
argument_list|(
name|snapshotInfo
operator|.
name|basic
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|SnapshotId
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|snapshotsToIndices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexId
name|indexId
range|:
name|repositoryData
operator|.
name|getIndices
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|SnapshotId
name|snapshotId
range|:
name|repositoryData
operator|.
name|getSnapshots
argument_list|(
name|indexId
argument_list|)
control|)
block|{
if|if
condition|(
name|toResolve
operator|.
name|contains
argument_list|(
name|snapshotId
argument_list|)
condition|)
block|{
name|snapshotsToIndices
operator|.
name|computeIfAbsent
argument_list|(
name|snapshotId
argument_list|,
parameter_list|(
name|k
parameter_list|)
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|indexId
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SnapshotId
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|snapshotsToIndices
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|indices
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
specifier|final
name|SnapshotId
name|snapshotId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|snapshotInfos
operator|.
name|add
argument_list|(
operator|new
name|SnapshotInfo
argument_list|(
name|snapshotId
argument_list|,
name|indices
argument_list|,
name|repositoryData
operator|.
name|getSnapshotState
argument_list|(
name|snapshotId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|snapshotInfos
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|snapshotInfos
argument_list|)
return|;
block|}
block|}
end_class

end_unit

