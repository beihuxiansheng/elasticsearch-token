begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectIntHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectIntCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|InetSocketTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|fs
operator|.
name|FsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_class
DECL|class|ClusterStatsNodes
specifier|public
class|class
name|ClusterStatsNodes
implements|implements
name|ToXContent
block|{
DECL|field|counts
specifier|private
specifier|final
name|Counts
name|counts
decl_stmt|;
DECL|field|versions
specifier|private
specifier|final
name|Set
argument_list|<
name|Version
argument_list|>
name|versions
decl_stmt|;
DECL|field|os
specifier|private
specifier|final
name|OsStats
name|os
decl_stmt|;
DECL|field|process
specifier|private
specifier|final
name|ProcessStats
name|process
decl_stmt|;
DECL|field|jvm
specifier|private
specifier|final
name|JvmStats
name|jvm
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FsInfo
operator|.
name|Path
name|fs
decl_stmt|;
DECL|field|plugins
specifier|private
specifier|final
name|Set
argument_list|<
name|PluginInfo
argument_list|>
name|plugins
decl_stmt|;
DECL|field|networkTypes
specifier|private
specifier|final
name|NetworkTypes
name|networkTypes
decl_stmt|;
DECL|method|ClusterStatsNodes
name|ClusterStatsNodes
parameter_list|(
name|List
argument_list|<
name|ClusterStatsNodeResponse
argument_list|>
name|nodeResponses
parameter_list|)
block|{
name|this
operator|.
name|versions
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|=
operator|new
name|FsInfo
operator|.
name|Path
argument_list|()
expr_stmt|;
name|this
operator|.
name|plugins
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|InetAddress
argument_list|>
name|seenAddresses
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|nodeResponses
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeInfo
argument_list|>
name|nodeInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeStats
argument_list|>
name|nodeStats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClusterStatsNodeResponse
name|nodeResponse
range|:
name|nodeResponses
control|)
block|{
name|nodeInfos
operator|.
name|add
argument_list|(
name|nodeResponse
operator|.
name|nodeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|nodeStats
operator|.
name|add
argument_list|(
name|nodeResponse
operator|.
name|nodeStats
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|versions
operator|.
name|add
argument_list|(
name|nodeResponse
operator|.
name|nodeInfo
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|plugins
operator|.
name|addAll
argument_list|(
name|nodeResponse
operator|.
name|nodeInfo
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|.
name|getPluginInfos
argument_list|()
argument_list|)
expr_stmt|;
comment|// now do the stats that should be deduped by hardware (implemented by ip deduping)
name|TransportAddress
name|publishAddress
init|=
name|nodeResponse
operator|.
name|nodeInfo
argument_list|()
operator|.
name|getTransport
argument_list|()
operator|.
name|address
argument_list|()
operator|.
name|publishAddress
argument_list|()
decl_stmt|;
name|InetAddress
name|inetAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|publishAddress
operator|.
name|uniqueAddressTypeId
argument_list|()
operator|==
literal|1
condition|)
block|{
name|inetAddress
operator|=
operator|(
operator|(
name|InetSocketTransportAddress
operator|)
name|publishAddress
operator|)
operator|.
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|seenAddresses
operator|.
name|add
argument_list|(
name|inetAddress
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|nodeResponse
operator|.
name|nodeStats
argument_list|()
operator|.
name|getFs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fs
operator|.
name|add
argument_list|(
name|nodeResponse
operator|.
name|nodeStats
argument_list|()
operator|.
name|getFs
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|counts
operator|=
operator|new
name|Counts
argument_list|(
name|nodeInfos
argument_list|)
expr_stmt|;
name|this
operator|.
name|os
operator|=
operator|new
name|OsStats
argument_list|(
name|nodeInfos
argument_list|,
name|nodeStats
argument_list|)
expr_stmt|;
name|this
operator|.
name|process
operator|=
operator|new
name|ProcessStats
argument_list|(
name|nodeStats
argument_list|)
expr_stmt|;
name|this
operator|.
name|jvm
operator|=
operator|new
name|JvmStats
argument_list|(
name|nodeInfos
argument_list|,
name|nodeStats
argument_list|)
expr_stmt|;
name|this
operator|.
name|networkTypes
operator|=
operator|new
name|NetworkTypes
argument_list|(
name|nodeInfos
argument_list|)
expr_stmt|;
block|}
DECL|method|getCounts
specifier|public
name|Counts
name|getCounts
parameter_list|()
block|{
return|return
name|this
operator|.
name|counts
return|;
block|}
DECL|method|getVersions
specifier|public
name|Set
argument_list|<
name|Version
argument_list|>
name|getVersions
parameter_list|()
block|{
return|return
name|versions
return|;
block|}
DECL|method|getOs
specifier|public
name|OsStats
name|getOs
parameter_list|()
block|{
return|return
name|os
return|;
block|}
DECL|method|getProcess
specifier|public
name|ProcessStats
name|getProcess
parameter_list|()
block|{
return|return
name|process
return|;
block|}
DECL|method|getJvm
specifier|public
name|JvmStats
name|getJvm
parameter_list|()
block|{
return|return
name|jvm
return|;
block|}
DECL|method|getFs
specifier|public
name|FsInfo
operator|.
name|Path
name|getFs
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
DECL|method|getPlugins
specifier|public
name|Set
argument_list|<
name|PluginInfo
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|plugins
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|COUNT
specifier|static
specifier|final
name|String
name|COUNT
init|=
literal|"count"
decl_stmt|;
DECL|field|VERSIONS
specifier|static
specifier|final
name|String
name|VERSIONS
init|=
literal|"versions"
decl_stmt|;
DECL|field|OS
specifier|static
specifier|final
name|String
name|OS
init|=
literal|"os"
decl_stmt|;
DECL|field|PROCESS
specifier|static
specifier|final
name|String
name|PROCESS
init|=
literal|"process"
decl_stmt|;
DECL|field|JVM
specifier|static
specifier|final
name|String
name|JVM
init|=
literal|"jvm"
decl_stmt|;
DECL|field|FS
specifier|static
specifier|final
name|String
name|FS
init|=
literal|"fs"
decl_stmt|;
DECL|field|PLUGINS
specifier|static
specifier|final
name|String
name|PLUGINS
init|=
literal|"plugins"
decl_stmt|;
DECL|field|NETWORK_TYPES
specifier|static
specifier|final
name|String
name|NETWORK_TYPES
init|=
literal|"network_types"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|COUNT
argument_list|)
expr_stmt|;
name|counts
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|VERSIONS
argument_list|)
expr_stmt|;
for|for
control|(
name|Version
name|v
range|:
name|versions
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|OS
argument_list|)
expr_stmt|;
name|os
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|PROCESS
argument_list|)
expr_stmt|;
name|process
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|JVM
argument_list|)
expr_stmt|;
name|jvm
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|FS
argument_list|)
expr_stmt|;
name|fs
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|PLUGINS
argument_list|)
expr_stmt|;
for|for
control|(
name|PluginInfo
name|pluginInfo
range|:
name|plugins
control|)
block|{
name|pluginInfo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|NETWORK_TYPES
argument_list|)
expr_stmt|;
name|networkTypes
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Counts
specifier|public
specifier|static
class|class
name|Counts
implements|implements
name|ToXContent
block|{
DECL|field|COORDINATING_ONLY
specifier|static
specifier|final
name|String
name|COORDINATING_ONLY
init|=
literal|"coordinating_only"
decl_stmt|;
DECL|field|total
specifier|private
specifier|final
name|int
name|total
decl_stmt|;
DECL|field|roles
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|roles
decl_stmt|;
DECL|method|Counts
specifier|private
name|Counts
parameter_list|(
name|List
argument_list|<
name|NodeInfo
argument_list|>
name|nodeInfos
parameter_list|)
block|{
name|this
operator|.
name|roles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|DiscoveryNode
operator|.
name|Role
name|role
range|:
name|DiscoveryNode
operator|.
name|Role
operator|.
name|values
argument_list|()
control|)
block|{
name|this
operator|.
name|roles
operator|.
name|put
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|roles
operator|.
name|put
argument_list|(
name|COORDINATING_ONLY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeInfo
name|nodeInfo
range|:
name|nodeInfos
control|)
block|{
name|total
operator|++
expr_stmt|;
if|if
condition|(
name|nodeInfo
operator|.
name|getNode
argument_list|()
operator|.
name|getRoles
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Integer
name|count
init|=
name|roles
operator|.
name|get
argument_list|(
name|COORDINATING_ONLY
argument_list|)
decl_stmt|;
name|roles
operator|.
name|put
argument_list|(
name|COORDINATING_ONLY
argument_list|,
operator|++
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|DiscoveryNode
operator|.
name|Role
name|role
range|:
name|nodeInfo
operator|.
name|getNode
argument_list|()
operator|.
name|getRoles
argument_list|()
control|)
block|{
name|Integer
name|count
init|=
name|roles
operator|.
name|get
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
decl_stmt|;
name|roles
operator|.
name|put
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|,
operator|++
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
block|}
DECL|method|getTotal
specifier|public
name|int
name|getTotal
parameter_list|()
block|{
return|return
name|total
return|;
block|}
DECL|method|getRoles
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|roles
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|TOTAL
specifier|static
specifier|final
name|String
name|TOTAL
init|=
literal|"total"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL
argument_list|,
name|total
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|roles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|OsStats
specifier|public
specifier|static
class|class
name|OsStats
implements|implements
name|ToXContent
block|{
DECL|field|availableProcessors
specifier|final
name|int
name|availableProcessors
decl_stmt|;
DECL|field|allocatedProcessors
specifier|final
name|int
name|allocatedProcessors
decl_stmt|;
DECL|field|names
specifier|final
name|ObjectIntHashMap
argument_list|<
name|String
argument_list|>
name|names
decl_stmt|;
DECL|field|mem
specifier|final
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
operator|.
name|OsStats
operator|.
name|Mem
name|mem
decl_stmt|;
comment|/**          * Build the stats from information about each node.          */
DECL|method|OsStats
specifier|private
name|OsStats
parameter_list|(
name|List
argument_list|<
name|NodeInfo
argument_list|>
name|nodeInfos
parameter_list|,
name|List
argument_list|<
name|NodeStats
argument_list|>
name|nodeStatsList
parameter_list|)
block|{
name|this
operator|.
name|names
operator|=
operator|new
name|ObjectIntHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|int
name|availableProcessors
init|=
literal|0
decl_stmt|;
name|int
name|allocatedProcessors
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeInfo
name|nodeInfo
range|:
name|nodeInfos
control|)
block|{
name|availableProcessors
operator|+=
name|nodeInfo
operator|.
name|getOs
argument_list|()
operator|.
name|getAvailableProcessors
argument_list|()
expr_stmt|;
name|allocatedProcessors
operator|+=
name|nodeInfo
operator|.
name|getOs
argument_list|()
operator|.
name|getAllocatedProcessors
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeInfo
operator|.
name|getOs
argument_list|()
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|names
operator|.
name|addTo
argument_list|(
name|nodeInfo
operator|.
name|getOs
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|availableProcessors
operator|=
name|availableProcessors
expr_stmt|;
name|this
operator|.
name|allocatedProcessors
operator|=
name|allocatedProcessors
expr_stmt|;
name|long
name|totalMemory
init|=
literal|0
decl_stmt|;
name|long
name|freeMemory
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeStats
name|nodeStats
range|:
name|nodeStatsList
control|)
block|{
if|if
condition|(
name|nodeStats
operator|.
name|getOs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|long
name|total
init|=
name|nodeStats
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|total
operator|>
literal|0
condition|)
block|{
name|totalMemory
operator|+=
name|total
expr_stmt|;
block|}
name|long
name|free
init|=
name|nodeStats
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getFree
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|free
operator|>
literal|0
condition|)
block|{
name|freeMemory
operator|+=
name|free
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|mem
operator|=
operator|new
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
operator|.
name|OsStats
operator|.
name|Mem
argument_list|(
name|totalMemory
argument_list|,
name|freeMemory
argument_list|)
expr_stmt|;
block|}
DECL|method|getAvailableProcessors
specifier|public
name|int
name|getAvailableProcessors
parameter_list|()
block|{
return|return
name|availableProcessors
return|;
block|}
DECL|method|getAllocatedProcessors
specifier|public
name|int
name|getAllocatedProcessors
parameter_list|()
block|{
return|return
name|allocatedProcessors
return|;
block|}
DECL|method|getMem
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
operator|.
name|OsStats
operator|.
name|Mem
name|getMem
parameter_list|()
block|{
return|return
name|mem
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|AVAILABLE_PROCESSORS
specifier|static
specifier|final
name|String
name|AVAILABLE_PROCESSORS
init|=
literal|"available_processors"
decl_stmt|;
DECL|field|ALLOCATED_PROCESSORS
specifier|static
specifier|final
name|String
name|ALLOCATED_PROCESSORS
init|=
literal|"allocated_processors"
decl_stmt|;
DECL|field|NAME
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|NAMES
specifier|static
specifier|final
name|String
name|NAMES
init|=
literal|"names"
decl_stmt|;
DECL|field|COUNT
specifier|static
specifier|final
name|String
name|COUNT
init|=
literal|"count"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|AVAILABLE_PROCESSORS
argument_list|,
name|availableProcessors
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ALLOCATED_PROCESSORS
argument_list|,
name|allocatedProcessors
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|NAMES
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectIntCursor
argument_list|<
name|String
argument_list|>
name|name
range|:
name|names
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|NAME
argument_list|,
name|name
operator|.
name|key
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|COUNT
argument_list|,
name|name
operator|.
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|mem
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
DECL|class|ProcessStats
specifier|public
specifier|static
class|class
name|ProcessStats
implements|implements
name|ToXContent
block|{
DECL|field|count
specifier|final
name|int
name|count
decl_stmt|;
DECL|field|cpuPercent
specifier|final
name|int
name|cpuPercent
decl_stmt|;
DECL|field|totalOpenFileDescriptors
specifier|final
name|long
name|totalOpenFileDescriptors
decl_stmt|;
DECL|field|minOpenFileDescriptors
specifier|final
name|long
name|minOpenFileDescriptors
decl_stmt|;
DECL|field|maxOpenFileDescriptors
specifier|final
name|long
name|maxOpenFileDescriptors
decl_stmt|;
comment|/**          * Build from looking at a list of node statistics.          */
DECL|method|ProcessStats
specifier|private
name|ProcessStats
parameter_list|(
name|List
argument_list|<
name|NodeStats
argument_list|>
name|nodeStatsList
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|cpuPercent
init|=
literal|0
decl_stmt|;
name|long
name|totalOpenFileDescriptors
init|=
literal|0
decl_stmt|;
name|long
name|minOpenFileDescriptors
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|maxOpenFileDescriptors
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|NodeStats
name|nodeStats
range|:
name|nodeStatsList
control|)
block|{
if|if
condition|(
name|nodeStats
operator|.
name|getProcess
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|nodeStats
operator|.
name|getProcess
argument_list|()
operator|.
name|getCpu
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cpuPercent
operator|+=
name|nodeStats
operator|.
name|getProcess
argument_list|()
operator|.
name|getCpu
argument_list|()
operator|.
name|getPercent
argument_list|()
expr_stmt|;
block|}
name|long
name|fd
init|=
name|nodeStats
operator|.
name|getProcess
argument_list|()
operator|.
name|getOpenFileDescriptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|fd
operator|>
literal|0
condition|)
block|{
comment|// fd can be -1 if not supported on platform
name|totalOpenFileDescriptors
operator|+=
name|fd
expr_stmt|;
block|}
comment|// we still do min max calc on -1, so we'll have an indication of it not being supported on one of the nodes.
name|minOpenFileDescriptors
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minOpenFileDescriptors
argument_list|,
name|fd
argument_list|)
expr_stmt|;
name|maxOpenFileDescriptors
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxOpenFileDescriptors
argument_list|,
name|fd
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|cpuPercent
operator|=
name|cpuPercent
expr_stmt|;
name|this
operator|.
name|totalOpenFileDescriptors
operator|=
name|totalOpenFileDescriptors
expr_stmt|;
name|this
operator|.
name|minOpenFileDescriptors
operator|=
name|minOpenFileDescriptors
expr_stmt|;
name|this
operator|.
name|maxOpenFileDescriptors
operator|=
name|maxOpenFileDescriptors
expr_stmt|;
block|}
comment|/**          * Cpu usage in percentages - 100 is 1 core.          */
DECL|method|getCpuPercent
specifier|public
name|int
name|getCpuPercent
parameter_list|()
block|{
return|return
name|cpuPercent
return|;
block|}
DECL|method|getAvgOpenFileDescriptors
specifier|public
name|long
name|getAvgOpenFileDescriptors
parameter_list|()
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|totalOpenFileDescriptors
operator|/
name|count
return|;
block|}
DECL|method|getMaxOpenFileDescriptors
specifier|public
name|long
name|getMaxOpenFileDescriptors
parameter_list|()
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|maxOpenFileDescriptors
return|;
block|}
DECL|method|getMinOpenFileDescriptors
specifier|public
name|long
name|getMinOpenFileDescriptors
parameter_list|()
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|minOpenFileDescriptors
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|CPU
specifier|static
specifier|final
name|String
name|CPU
init|=
literal|"cpu"
decl_stmt|;
DECL|field|PERCENT
specifier|static
specifier|final
name|String
name|PERCENT
init|=
literal|"percent"
decl_stmt|;
DECL|field|OPEN_FILE_DESCRIPTORS
specifier|static
specifier|final
name|String
name|OPEN_FILE_DESCRIPTORS
init|=
literal|"open_file_descriptors"
decl_stmt|;
DECL|field|MIN
specifier|static
specifier|final
name|String
name|MIN
init|=
literal|"min"
decl_stmt|;
DECL|field|MAX
specifier|static
specifier|final
name|String
name|MAX
init|=
literal|"max"
decl_stmt|;
DECL|field|AVG
specifier|static
specifier|final
name|String
name|AVG
init|=
literal|"avg"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|CPU
argument_list|)
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PERCENT
argument_list|,
name|cpuPercent
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|OPEN_FILE_DESCRIPTORS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MIN
argument_list|,
name|getMinOpenFileDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MAX
argument_list|,
name|getMaxOpenFileDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|AVG
argument_list|,
name|getAvgOpenFileDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|class|JvmStats
specifier|public
specifier|static
class|class
name|JvmStats
implements|implements
name|ToXContent
block|{
DECL|field|versions
specifier|private
specifier|final
name|ObjectIntHashMap
argument_list|<
name|JvmVersion
argument_list|>
name|versions
decl_stmt|;
DECL|field|threads
specifier|private
specifier|final
name|long
name|threads
decl_stmt|;
DECL|field|maxUptime
specifier|private
specifier|final
name|long
name|maxUptime
decl_stmt|;
DECL|field|heapUsed
specifier|private
specifier|final
name|long
name|heapUsed
decl_stmt|;
DECL|field|heapMax
specifier|private
specifier|final
name|long
name|heapMax
decl_stmt|;
comment|/**          * Build from lists of information about each node.          */
DECL|method|JvmStats
specifier|private
name|JvmStats
parameter_list|(
name|List
argument_list|<
name|NodeInfo
argument_list|>
name|nodeInfos
parameter_list|,
name|List
argument_list|<
name|NodeStats
argument_list|>
name|nodeStatsList
parameter_list|)
block|{
name|this
operator|.
name|versions
operator|=
operator|new
name|ObjectIntHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|long
name|threads
init|=
literal|0
decl_stmt|;
name|long
name|maxUptime
init|=
literal|0
decl_stmt|;
name|long
name|heapMax
init|=
literal|0
decl_stmt|;
name|long
name|heapUsed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeInfo
name|nodeInfo
range|:
name|nodeInfos
control|)
block|{
name|versions
operator|.
name|addTo
argument_list|(
operator|new
name|JvmVersion
argument_list|(
name|nodeInfo
operator|.
name|getJvm
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NodeStats
name|nodeStats
range|:
name|nodeStatsList
control|)
block|{
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmStats
name|js
init|=
name|nodeStats
operator|.
name|getJvm
argument_list|()
decl_stmt|;
if|if
condition|(
name|js
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|js
operator|.
name|getThreads
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|threads
operator|+=
name|js
operator|.
name|getThreads
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
name|maxUptime
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxUptime
argument_list|,
name|js
operator|.
name|getUptime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|js
operator|.
name|getMem
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|heapUsed
operator|+=
name|js
operator|.
name|getMem
argument_list|()
operator|.
name|getHeapUsed
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|heapMax
operator|+=
name|js
operator|.
name|getMem
argument_list|()
operator|.
name|getHeapMax
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|threads
operator|=
name|threads
expr_stmt|;
name|this
operator|.
name|maxUptime
operator|=
name|maxUptime
expr_stmt|;
name|this
operator|.
name|heapUsed
operator|=
name|heapUsed
expr_stmt|;
name|this
operator|.
name|heapMax
operator|=
name|heapMax
expr_stmt|;
block|}
DECL|method|getVersions
specifier|public
name|ObjectIntHashMap
argument_list|<
name|JvmVersion
argument_list|>
name|getVersions
parameter_list|()
block|{
return|return
name|versions
return|;
block|}
comment|/**          * The total number of threads in the cluster          */
DECL|method|getThreads
specifier|public
name|long
name|getThreads
parameter_list|()
block|{
return|return
name|threads
return|;
block|}
comment|/**          * The maximum uptime of a node in the cluster          */
DECL|method|getMaxUpTime
specifier|public
name|TimeValue
name|getMaxUpTime
parameter_list|()
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|maxUptime
argument_list|)
return|;
block|}
comment|/**          * Total heap used in the cluster          */
DECL|method|getHeapUsed
specifier|public
name|ByteSizeValue
name|getHeapUsed
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|heapUsed
argument_list|)
return|;
block|}
comment|/**          * Maximum total heap available to the cluster          */
DECL|method|getHeapMax
specifier|public
name|ByteSizeValue
name|getHeapMax
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|heapMax
argument_list|)
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|VERSIONS
specifier|static
specifier|final
name|String
name|VERSIONS
init|=
literal|"versions"
decl_stmt|;
DECL|field|VERSION
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"version"
decl_stmt|;
DECL|field|VM_NAME
specifier|static
specifier|final
name|String
name|VM_NAME
init|=
literal|"vm_name"
decl_stmt|;
DECL|field|VM_VERSION
specifier|static
specifier|final
name|String
name|VM_VERSION
init|=
literal|"vm_version"
decl_stmt|;
DECL|field|VM_VENDOR
specifier|static
specifier|final
name|String
name|VM_VENDOR
init|=
literal|"vm_vendor"
decl_stmt|;
DECL|field|COUNT
specifier|static
specifier|final
name|String
name|COUNT
init|=
literal|"count"
decl_stmt|;
DECL|field|THREADS
specifier|static
specifier|final
name|String
name|THREADS
init|=
literal|"threads"
decl_stmt|;
DECL|field|MAX_UPTIME
specifier|static
specifier|final
name|String
name|MAX_UPTIME
init|=
literal|"max_uptime"
decl_stmt|;
DECL|field|MAX_UPTIME_IN_MILLIS
specifier|static
specifier|final
name|String
name|MAX_UPTIME_IN_MILLIS
init|=
literal|"max_uptime_in_millis"
decl_stmt|;
DECL|field|MEM
specifier|static
specifier|final
name|String
name|MEM
init|=
literal|"mem"
decl_stmt|;
DECL|field|HEAP_USED
specifier|static
specifier|final
name|String
name|HEAP_USED
init|=
literal|"heap_used"
decl_stmt|;
DECL|field|HEAP_USED_IN_BYTES
specifier|static
specifier|final
name|String
name|HEAP_USED_IN_BYTES
init|=
literal|"heap_used_in_bytes"
decl_stmt|;
DECL|field|HEAP_MAX
specifier|static
specifier|final
name|String
name|HEAP_MAX
init|=
literal|"heap_max"
decl_stmt|;
DECL|field|HEAP_MAX_IN_BYTES
specifier|static
specifier|final
name|String
name|HEAP_MAX_IN_BYTES
init|=
literal|"heap_max_in_bytes"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|timeValueField
argument_list|(
name|Fields
operator|.
name|MAX_UPTIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|MAX_UPTIME
argument_list|,
name|maxUptime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|VERSIONS
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectIntCursor
argument_list|<
name|JvmVersion
argument_list|>
name|v
range|:
name|versions
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VERSION
argument_list|,
name|v
operator|.
name|key
operator|.
name|version
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VM_NAME
argument_list|,
name|v
operator|.
name|key
operator|.
name|vmName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VM_VERSION
argument_list|,
name|v
operator|.
name|key
operator|.
name|vmVersion
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VM_VENDOR
argument_list|,
name|v
operator|.
name|key
operator|.
name|vmVendor
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|COUNT
argument_list|,
name|v
operator|.
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|MEM
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|HEAP_USED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|HEAP_USED
argument_list|,
name|heapUsed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|HEAP_MAX_IN_BYTES
argument_list|,
name|Fields
operator|.
name|HEAP_MAX
argument_list|,
name|heapMax
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|THREADS
argument_list|,
name|threads
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
DECL|class|JvmVersion
specifier|public
specifier|static
class|class
name|JvmVersion
block|{
DECL|field|version
name|String
name|version
decl_stmt|;
DECL|field|vmName
name|String
name|vmName
decl_stmt|;
DECL|field|vmVersion
name|String
name|vmVersion
decl_stmt|;
DECL|field|vmVendor
name|String
name|vmVendor
decl_stmt|;
DECL|method|JvmVersion
name|JvmVersion
parameter_list|(
name|JvmInfo
name|jvmInfo
parameter_list|)
block|{
name|version
operator|=
name|jvmInfo
operator|.
name|version
argument_list|()
expr_stmt|;
name|vmName
operator|=
name|jvmInfo
operator|.
name|getVmName
argument_list|()
expr_stmt|;
name|vmVersion
operator|=
name|jvmInfo
operator|.
name|getVmVersion
argument_list|()
expr_stmt|;
name|vmVendor
operator|=
name|jvmInfo
operator|.
name|getVmVendor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|JvmVersion
name|jvm
init|=
operator|(
name|JvmVersion
operator|)
name|o
decl_stmt|;
return|return
name|vmVersion
operator|.
name|equals
argument_list|(
name|jvm
operator|.
name|vmVersion
argument_list|)
operator|&&
name|vmVendor
operator|.
name|equals
argument_list|(
name|jvm
operator|.
name|vmVendor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|vmVersion
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|NetworkTypes
specifier|static
class|class
name|NetworkTypes
implements|implements
name|ToXContent
block|{
DECL|field|transportTypes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|transportTypes
decl_stmt|;
DECL|field|httpTypes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|httpTypes
decl_stmt|;
DECL|method|NetworkTypes
specifier|private
name|NetworkTypes
parameter_list|(
specifier|final
name|List
argument_list|<
name|NodeInfo
argument_list|>
name|nodeInfos
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|transportTypes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|httpTypes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NodeInfo
name|nodeInfo
range|:
name|nodeInfos
control|)
block|{
specifier|final
name|Settings
name|settings
init|=
name|nodeInfo
operator|.
name|getSettings
argument_list|()
decl_stmt|;
specifier|final
name|String
name|transportType
init|=
name|settings
operator|.
name|get
argument_list|(
name|NetworkModule
operator|.
name|TRANSPORT_TYPE_KEY
argument_list|,
name|NetworkModule
operator|.
name|TRANSPORT_DEFAULT_TYPE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|httpType
init|=
name|settings
operator|.
name|get
argument_list|(
name|NetworkModule
operator|.
name|HTTP_TYPE_KEY
argument_list|,
name|NetworkModule
operator|.
name|HTTP_DEFAULT_TYPE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|transportTypes
operator|.
name|computeIfAbsent
argument_list|(
name|transportType
argument_list|,
name|k
lambda|->
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|httpTypes
operator|.
name|computeIfAbsent
argument_list|(
name|httpType
argument_list|,
name|k
lambda|->
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|transportTypes
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|transportTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpTypes
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|httpTypes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
specifier|final
name|XContentBuilder
name|builder
parameter_list|,
specifier|final
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"transport_types"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|entry
range|:
name|transportTypes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"http_types"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|entry
range|:
name|httpTypes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

