begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A {@code ClusterAllocationExplanation} is an explanation of why a shard may or may not be allocated to nodes. It also includes weights  * for where the shard is likely to be assigned. It is an immutable class  */
end_comment

begin_class
DECL|class|ClusterAllocationExplanation
specifier|public
specifier|final
class|class
name|ClusterAllocationExplanation
implements|implements
name|ToXContent
implements|,
name|Writeable
argument_list|<
name|ClusterAllocationExplanation
argument_list|>
block|{
DECL|field|shard
specifier|private
specifier|final
name|ShardId
name|shard
decl_stmt|;
DECL|field|primary
specifier|private
specifier|final
name|boolean
name|primary
decl_stmt|;
DECL|field|assignedNodeId
specifier|private
specifier|final
name|String
name|assignedNodeId
decl_stmt|;
DECL|field|nodeToDecision
specifier|private
specifier|final
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|Decision
argument_list|>
name|nodeToDecision
decl_stmt|;
DECL|field|nodeWeights
specifier|private
specifier|final
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|Float
argument_list|>
name|nodeWeights
decl_stmt|;
DECL|field|unassignedInfo
specifier|private
specifier|final
name|UnassignedInfo
name|unassignedInfo
decl_stmt|;
DECL|method|ClusterAllocationExplanation
specifier|public
name|ClusterAllocationExplanation
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|shard
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|primary
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|assignedNodeId
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|this
operator|.
name|unassignedInfo
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|UnassignedInfo
operator|::
operator|new
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|Decision
argument_list|>
name|ntd
init|=
literal|null
decl_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|ntd
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|DiscoveryNode
name|dn
init|=
operator|new
name|DiscoveryNode
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Decision
name|decision
init|=
name|Decision
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|ntd
operator|.
name|put
argument_list|(
name|dn
argument_list|,
name|decision
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nodeToDecision
operator|=
name|ntd
expr_stmt|;
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|Float
argument_list|>
name|ntw
init|=
literal|null
decl_stmt|;
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|ntw
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|DiscoveryNode
name|dn
init|=
operator|new
name|DiscoveryNode
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|float
name|weight
init|=
name|in
operator|.
name|readFloat
argument_list|()
decl_stmt|;
name|ntw
operator|.
name|put
argument_list|(
name|dn
argument_list|,
name|weight
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nodeWeights
operator|=
name|ntw
expr_stmt|;
block|}
DECL|method|ClusterAllocationExplanation
specifier|public
name|ClusterAllocationExplanation
parameter_list|(
name|ShardId
name|shard
parameter_list|,
name|boolean
name|primary
parameter_list|,
annotation|@
name|Nullable
name|String
name|assignedNodeId
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|,
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|Decision
argument_list|>
name|nodeToDecision
parameter_list|,
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|Float
argument_list|>
name|nodeWeights
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|this
operator|.
name|primary
operator|=
name|primary
expr_stmt|;
name|this
operator|.
name|assignedNodeId
operator|=
name|assignedNodeId
expr_stmt|;
name|this
operator|.
name|unassignedInfo
operator|=
name|unassignedInfo
expr_stmt|;
name|this
operator|.
name|nodeToDecision
operator|=
name|nodeToDecision
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyMap
argument_list|()
else|:
name|nodeToDecision
expr_stmt|;
name|this
operator|.
name|nodeWeights
operator|=
name|nodeWeights
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyMap
argument_list|()
else|:
name|nodeWeights
expr_stmt|;
block|}
DECL|method|getShard
specifier|public
name|ShardId
name|getShard
parameter_list|()
block|{
return|return
name|this
operator|.
name|shard
return|;
block|}
DECL|method|isPrimary
specifier|public
name|boolean
name|isPrimary
parameter_list|()
block|{
return|return
name|this
operator|.
name|primary
return|;
block|}
comment|/** Return turn if the shard is assigned to a node */
DECL|method|isAssigned
specifier|public
name|boolean
name|isAssigned
parameter_list|()
block|{
return|return
name|this
operator|.
name|assignedNodeId
operator|!=
literal|null
return|;
block|}
comment|/** Return the assigned node id or null if not assigned */
annotation|@
name|Nullable
DECL|method|getAssignedNodeId
specifier|public
name|String
name|getAssignedNodeId
parameter_list|()
block|{
return|return
name|this
operator|.
name|assignedNodeId
return|;
block|}
comment|/** Return the unassigned info for the shard or null if the shard is assigned */
annotation|@
name|Nullable
DECL|method|getUnassignedInfo
specifier|public
name|UnassignedInfo
name|getUnassignedInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|unassignedInfo
return|;
block|}
comment|/** Return a map of node to decision for shard allocation */
DECL|method|getNodeDecisions
specifier|public
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|Decision
argument_list|>
name|getNodeDecisions
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeToDecision
return|;
block|}
comment|/**      * Return a map of node to balancer "weight" for allocation. Higher weights mean the balancer wants to allocated the shard to that node      * more      */
DECL|method|getNodeWeights
specifier|public
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|Float
argument_list|>
name|getNodeWeights
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeWeights
return|;
block|}
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"shard"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|shard
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"index_uuid"
argument_list|,
name|shard
operator|.
name|getIndex
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|shard
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"primary"
argument_list|,
name|primary
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end shard
name|builder
operator|.
name|field
argument_list|(
literal|"assigned"
argument_list|,
name|this
operator|.
name|assignedNodeId
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// If assigned, show the node id of the node it's assigned to
if|if
condition|(
name|assignedNodeId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"assigned_node_id"
argument_list|,
name|this
operator|.
name|assignedNodeId
argument_list|)
expr_stmt|;
block|}
comment|// If we have unassigned info, show that
if|if
condition|(
name|unassignedInfo
operator|!=
literal|null
condition|)
block|{
name|unassignedInfo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
literal|"nodes"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DiscoveryNode
argument_list|,
name|Float
argument_list|>
name|entry
range|:
name|nodeWeights
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"node_name"
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"node_attributes"
argument_list|)
expr_stmt|;
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrEntry
range|:
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|attrEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|attrEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end attributes
name|Decision
name|d
init|=
name|nodeToDecision
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|assignedNodeId
argument_list|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"final_decision"
argument_list|,
literal|"CURRENTLY_ASSIGNED"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"final_decision"
argument_list|,
name|d
operator|.
name|type
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end node<uuid>
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end nodes
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end wrapping object
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|ClusterAllocationExplanation
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ClusterAllocationExplanation
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|getShard
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|isPrimary
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|this
operator|.
name|getUnassignedInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|Decision
argument_list|>
name|ntd
init|=
name|this
operator|.
name|getNodeDecisions
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|ntd
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DiscoveryNode
argument_list|,
name|Decision
argument_list|>
name|entry
range|:
name|ntd
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Decision
operator|.
name|writeTo
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|Float
argument_list|>
name|ntw
init|=
name|this
operator|.
name|getNodeWeights
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|ntw
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DiscoveryNode
argument_list|,
name|Float
argument_list|>
name|entry
range|:
name|ntw
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

