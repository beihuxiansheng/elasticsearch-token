begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A {@code ClusterAllocationExplanation} is an explanation of why a shard may or may not be allocated to nodes. It also includes weights  * for where the shard is likely to be assigned. It is an immutable class  */
end_comment

begin_class
DECL|class|ClusterAllocationExplanation
specifier|public
specifier|final
class|class
name|ClusterAllocationExplanation
implements|implements
name|ToXContent
implements|,
name|Writeable
block|{
DECL|field|shard
specifier|private
specifier|final
name|ShardId
name|shard
decl_stmt|;
DECL|field|primary
specifier|private
specifier|final
name|boolean
name|primary
decl_stmt|;
DECL|field|hasPendingAsyncFetch
specifier|private
specifier|final
name|boolean
name|hasPendingAsyncFetch
decl_stmt|;
DECL|field|assignedNodeId
specifier|private
specifier|final
name|String
name|assignedNodeId
decl_stmt|;
DECL|field|unassignedInfo
specifier|private
specifier|final
name|UnassignedInfo
name|unassignedInfo
decl_stmt|;
DECL|field|allocationDelayMillis
specifier|private
specifier|final
name|long
name|allocationDelayMillis
decl_stmt|;
DECL|field|remainingDelayMillis
specifier|private
specifier|final
name|long
name|remainingDelayMillis
decl_stmt|;
DECL|field|nodeExplanations
specifier|private
specifier|final
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|NodeExplanation
argument_list|>
name|nodeExplanations
decl_stmt|;
DECL|field|clusterInfo
specifier|private
specifier|final
name|ClusterInfo
name|clusterInfo
decl_stmt|;
DECL|method|ClusterAllocationExplanation
specifier|public
name|ClusterAllocationExplanation
parameter_list|(
name|ShardId
name|shard
parameter_list|,
name|boolean
name|primary
parameter_list|,
annotation|@
name|Nullable
name|String
name|assignedNodeId
parameter_list|,
name|long
name|allocationDelayMillis
parameter_list|,
name|long
name|remainingDelayMillis
parameter_list|,
annotation|@
name|Nullable
name|UnassignedInfo
name|unassignedInfo
parameter_list|,
name|boolean
name|hasPendingAsyncFetch
parameter_list|,
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|NodeExplanation
argument_list|>
name|nodeExplanations
parameter_list|,
annotation|@
name|Nullable
name|ClusterInfo
name|clusterInfo
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|this
operator|.
name|primary
operator|=
name|primary
expr_stmt|;
name|this
operator|.
name|hasPendingAsyncFetch
operator|=
name|hasPendingAsyncFetch
expr_stmt|;
name|this
operator|.
name|assignedNodeId
operator|=
name|assignedNodeId
expr_stmt|;
name|this
operator|.
name|unassignedInfo
operator|=
name|unassignedInfo
expr_stmt|;
name|this
operator|.
name|allocationDelayMillis
operator|=
name|allocationDelayMillis
expr_stmt|;
name|this
operator|.
name|remainingDelayMillis
operator|=
name|remainingDelayMillis
expr_stmt|;
name|this
operator|.
name|nodeExplanations
operator|=
name|nodeExplanations
expr_stmt|;
name|this
operator|.
name|clusterInfo
operator|=
name|clusterInfo
expr_stmt|;
block|}
DECL|method|ClusterAllocationExplanation
specifier|public
name|ClusterAllocationExplanation
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|shard
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|primary
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|hasPendingAsyncFetch
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|assignedNodeId
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|this
operator|.
name|unassignedInfo
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|UnassignedInfo
operator|::
operator|new
argument_list|)
expr_stmt|;
name|this
operator|.
name|allocationDelayMillis
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|remainingDelayMillis
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|int
name|mapSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|NodeExplanation
argument_list|>
name|nodeToExplanation
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|mapSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
name|NodeExplanation
name|nodeExplanation
init|=
operator|new
name|NodeExplanation
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|nodeToExplanation
operator|.
name|put
argument_list|(
name|nodeExplanation
operator|.
name|getNode
argument_list|()
argument_list|,
name|nodeExplanation
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nodeExplanations
operator|=
name|nodeToExplanation
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|this
operator|.
name|clusterInfo
operator|=
operator|new
name|ClusterInfo
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|clusterInfo
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|getShard
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|isPrimary
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|isStillFetchingShardData
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|this
operator|.
name|getUnassignedInfo
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|allocationDelayMillis
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|remainingDelayMillis
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|this
operator|.
name|nodeExplanations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeExplanation
name|explanation
range|:
name|this
operator|.
name|nodeExplanations
operator|.
name|values
argument_list|()
control|)
block|{
name|explanation
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|clusterInfo
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterInfo
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Return the shard that the explanation is about */
DECL|method|getShard
specifier|public
name|ShardId
name|getShard
parameter_list|()
block|{
return|return
name|this
operator|.
name|shard
return|;
block|}
comment|/** Return true if the explained shard is primary, false otherwise */
DECL|method|isPrimary
specifier|public
name|boolean
name|isPrimary
parameter_list|()
block|{
return|return
name|this
operator|.
name|primary
return|;
block|}
comment|/** Return turn if shard data is still being fetched for the allocation */
DECL|method|isStillFetchingShardData
specifier|public
name|boolean
name|isStillFetchingShardData
parameter_list|()
block|{
return|return
name|this
operator|.
name|hasPendingAsyncFetch
return|;
block|}
comment|/** Return turn if the shard is assigned to a node */
DECL|method|isAssigned
specifier|public
name|boolean
name|isAssigned
parameter_list|()
block|{
return|return
name|this
operator|.
name|assignedNodeId
operator|!=
literal|null
return|;
block|}
comment|/** Return the assigned node id or null if not assigned */
annotation|@
name|Nullable
DECL|method|getAssignedNodeId
specifier|public
name|String
name|getAssignedNodeId
parameter_list|()
block|{
return|return
name|this
operator|.
name|assignedNodeId
return|;
block|}
comment|/** Return the unassigned info for the shard or null if the shard is assigned */
annotation|@
name|Nullable
DECL|method|getUnassignedInfo
specifier|public
name|UnassignedInfo
name|getUnassignedInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|unassignedInfo
return|;
block|}
comment|/** Return the configured delay before the shard can be allocated in milliseconds */
DECL|method|getAllocationDelayMillis
specifier|public
name|long
name|getAllocationDelayMillis
parameter_list|()
block|{
return|return
name|this
operator|.
name|allocationDelayMillis
return|;
block|}
comment|/** Return the remaining allocation delay for this shard in milliseconds */
DECL|method|getRemainingDelayMillis
specifier|public
name|long
name|getRemainingDelayMillis
parameter_list|()
block|{
return|return
name|this
operator|.
name|remainingDelayMillis
return|;
block|}
comment|/** Return a map of node to the explanation for that node */
DECL|method|getNodeExplanations
specifier|public
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|NodeExplanation
argument_list|>
name|getNodeExplanations
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeExplanations
return|;
block|}
comment|/** Return the cluster disk info for the cluster or null if none available */
annotation|@
name|Nullable
DECL|method|getClusterInfo
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterInfo
return|;
block|}
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"shard"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|shard
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"index_uuid"
argument_list|,
name|shard
operator|.
name|getIndex
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|shard
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"primary"
argument_list|,
name|primary
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end shard
name|builder
operator|.
name|field
argument_list|(
literal|"assigned"
argument_list|,
name|this
operator|.
name|assignedNodeId
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// If assigned, show the node id of the node it's assigned to
if|if
condition|(
name|assignedNodeId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"assigned_node_id"
argument_list|,
name|this
operator|.
name|assignedNodeId
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"shard_state_fetch_pending"
argument_list|,
name|this
operator|.
name|hasPendingAsyncFetch
argument_list|)
expr_stmt|;
comment|// If we have unassigned info, show that
if|if
condition|(
name|unassignedInfo
operator|!=
literal|null
condition|)
block|{
name|unassignedInfo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
literal|"allocation_delay_in_millis"
argument_list|,
literal|"allocation_delay"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|allocationDelayMillis
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
literal|"remaining_delay_in_millis"
argument_list|,
literal|"remaining_delay"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|remainingDelayMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
literal|"nodes"
argument_list|)
expr_stmt|;
block|{
for|for
control|(
name|NodeExplanation
name|explanation
range|:
name|nodeExplanations
operator|.
name|values
argument_list|()
control|)
block|{
name|explanation
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end nodes
if|if
condition|(
name|this
operator|.
name|clusterInfo
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"cluster_info"
argument_list|)
expr_stmt|;
block|{
name|this
operator|.
name|clusterInfo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end "cluster_info"
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end wrapping object
return|return
name|builder
return|;
block|}
comment|/** An Enum representing the final decision for a shard allocation on a node */
DECL|enum|FinalDecision
specifier|public
enum|enum
name|FinalDecision
block|{
comment|// Yes, the shard can be assigned
DECL|enum constant|YES
name|YES
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
comment|// No, the shard cannot be assigned
DECL|enum constant|NO
name|NO
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
comment|// The shard is already assigned to this node
DECL|enum constant|ALREADY_ASSIGNED
name|ALREADY_ASSIGNED
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|FinalDecision
name|FinalDecision
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|fromId
specifier|private
specifier|static
name|FinalDecision
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|0
case|:
return|return
name|YES
return|;
case|case
literal|1
case|:
return|return
name|NO
return|;
case|case
literal|2
case|:
return|return
name|ALREADY_ASSIGNED
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown id for final decision: ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|"YES"
return|;
case|case
literal|1
case|:
return|return
literal|"NO"
return|;
case|case
literal|2
case|:
return|return
literal|"ALREADY_ASSIGNED"
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown id for final decision: ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|readFrom
specifier|static
name|FinalDecision
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
return|;
block|}
DECL|method|writeTo
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** An Enum representing the state of the shard store's copy of the data on a node */
DECL|enum|StoreCopy
specifier|public
enum|enum
name|StoreCopy
block|{
comment|// No data for this shard is on the node
DECL|enum constant|NONE
name|NONE
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
comment|// A copy of the data is available on this node
DECL|enum constant|AVAILABLE
name|AVAILABLE
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
comment|// The copy of the data on the node is corrupt
DECL|enum constant|CORRUPT
name|CORRUPT
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
comment|// There was an error reading this node's copy of the data
DECL|enum constant|IO_ERROR
name|IO_ERROR
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|,
comment|// The copy of the data on the node is stale
DECL|enum constant|STALE
name|STALE
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
block|,
comment|// It's unknown what the copy of the data is
DECL|enum constant|UNKNOWN
name|UNKNOWN
argument_list|(
operator|(
name|byte
operator|)
literal|5
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|StoreCopy
name|StoreCopy
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|fromId
specifier|private
specifier|static
name|StoreCopy
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|0
case|:
return|return
name|NONE
return|;
case|case
literal|1
case|:
return|return
name|AVAILABLE
return|;
case|case
literal|2
case|:
return|return
name|CORRUPT
return|;
case|case
literal|3
case|:
return|return
name|IO_ERROR
return|;
case|case
literal|4
case|:
return|return
name|STALE
return|;
case|case
literal|5
case|:
return|return
name|UNKNOWN
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown id for store copy: ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|"NONE"
return|;
case|case
literal|1
case|:
return|return
literal|"AVAILABLE"
return|;
case|case
literal|2
case|:
return|return
literal|"CORRUPT"
return|;
case|case
literal|3
case|:
return|return
literal|"IO_ERROR"
return|;
case|case
literal|4
case|:
return|return
literal|"STALE"
return|;
case|case
literal|5
case|:
return|return
literal|"UNKNOWN"
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown id for store copy: ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|readFrom
specifier|static
name|StoreCopy
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
return|;
block|}
DECL|method|writeTo
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

