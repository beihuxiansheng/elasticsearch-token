begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Request for recovery information  */
end_comment

begin_class
DECL|class|RecoveryRequest
specifier|public
class|class
name|RecoveryRequest
extends|extends
name|BroadcastRequest
argument_list|<
name|RecoveryRequest
argument_list|>
block|{
DECL|field|detailed
specifier|private
name|boolean
name|detailed
init|=
literal|false
decl_stmt|;
comment|// Provides extra details in the response
DECL|field|activeOnly
specifier|private
name|boolean
name|activeOnly
init|=
literal|false
decl_stmt|;
comment|// Only reports on active recoveries
comment|/**      * Constructs a request for recovery information for all shards      */
DECL|method|RecoveryRequest
specifier|public
name|RecoveryRequest
parameter_list|()
block|{
name|this
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a request for recovery information for all shards for the given indices      *      * @param indices   Comma-separated list of indices about which to gather recovery information      */
DECL|method|RecoveryRequest
specifier|public
name|RecoveryRequest
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|super
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
comment|/**      * True if detailed flag is set, false otherwise. This value if false by default.      *      * @return  True if detailed flag is set, false otherwise      */
DECL|method|detailed
specifier|public
name|boolean
name|detailed
parameter_list|()
block|{
return|return
name|detailed
return|;
block|}
comment|/**      * Set value of the detailed flag. Detailed requests will contain extra      * information such as a list of physical files and their recovery progress.      *      * @param detailed  Whether or not to set the detailed flag      */
DECL|method|detailed
specifier|public
name|void
name|detailed
parameter_list|(
name|boolean
name|detailed
parameter_list|)
block|{
name|this
operator|.
name|detailed
operator|=
name|detailed
expr_stmt|;
block|}
comment|/**      * True if activeOnly flag is set, false otherwise. This value is false by default.      *      * @return  True if activeOnly flag is set, false otherwise      */
DECL|method|activeOnly
specifier|public
name|boolean
name|activeOnly
parameter_list|()
block|{
return|return
name|activeOnly
return|;
block|}
comment|/**      * Set value of the activeOnly flag. If true, this request will only response with      * on-going recovery information.      *      * @param activeOnly    Whether or not to set the activeOnly flag.      */
DECL|method|activeOnly
specifier|public
name|void
name|activeOnly
parameter_list|(
name|boolean
name|activeOnly
parameter_list|)
block|{
name|this
operator|.
name|activeOnly
operator|=
name|activeOnly
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|detailed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|activeOnly
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|detailed
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|activeOnly
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

