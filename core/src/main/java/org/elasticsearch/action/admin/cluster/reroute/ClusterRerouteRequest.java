begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.reroute
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|reroute
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|AcknowledgedRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Request to submit cluster reroute allocation commands  */
end_comment

begin_class
DECL|class|ClusterRerouteRequest
specifier|public
class|class
name|ClusterRerouteRequest
extends|extends
name|AcknowledgedRequest
argument_list|<
name|ClusterRerouteRequest
argument_list|>
block|{
DECL|field|commands
specifier|private
name|AllocationCommands
name|commands
init|=
operator|new
name|AllocationCommands
argument_list|()
decl_stmt|;
DECL|field|dryRun
specifier|private
name|boolean
name|dryRun
decl_stmt|;
DECL|field|explain
specifier|private
name|boolean
name|explain
decl_stmt|;
DECL|field|retryFailed
specifier|private
name|boolean
name|retryFailed
decl_stmt|;
DECL|method|ClusterRerouteRequest
specifier|public
name|ClusterRerouteRequest
parameter_list|()
block|{     }
comment|/**      * Adds allocation commands to be applied to the cluster. Note, can be empty, in which case      * will simply run a simple "reroute".      */
DECL|method|add
specifier|public
name|ClusterRerouteRequest
name|add
parameter_list|(
name|AllocationCommand
modifier|...
name|commands
parameter_list|)
block|{
name|this
operator|.
name|commands
operator|.
name|add
argument_list|(
name|commands
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a dry run flag (defaults to<tt>false</tt>) allowing to run the commands without      * actually applying them to the cluster state, and getting the resulting cluster state back.      */
DECL|method|dryRun
specifier|public
name|ClusterRerouteRequest
name|dryRun
parameter_list|(
name|boolean
name|dryRun
parameter_list|)
block|{
name|this
operator|.
name|dryRun
operator|=
name|dryRun
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the current dry run flag which allows to run the commands without actually applying them,      * just to get back the resulting cluster state back.      */
DECL|method|dryRun
specifier|public
name|boolean
name|dryRun
parameter_list|()
block|{
return|return
name|this
operator|.
name|dryRun
return|;
block|}
comment|/**      * Sets the explain flag, which will collect information about the reroute      * request without executing the actions. Similar to dryRun,      * but human-readable.      */
DECL|method|explain
specifier|public
name|ClusterRerouteRequest
name|explain
parameter_list|(
name|boolean
name|explain
parameter_list|)
block|{
name|this
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the retry failed flag (defaults to<tt>false</tt>). If true, the      * request will retry allocating shards that can't currently be allocated due to too many allocation failures.      */
DECL|method|setRetryFailed
specifier|public
name|ClusterRerouteRequest
name|setRetryFailed
parameter_list|(
name|boolean
name|retryFailed
parameter_list|)
block|{
name|this
operator|.
name|retryFailed
operator|=
name|retryFailed
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the current explain flag      */
DECL|method|explain
specifier|public
name|boolean
name|explain
parameter_list|()
block|{
return|return
name|this
operator|.
name|explain
return|;
block|}
comment|/**      * Returns the current retry failed flag      */
DECL|method|isRetryFailed
specifier|public
name|boolean
name|isRetryFailed
parameter_list|()
block|{
return|return
name|this
operator|.
name|retryFailed
return|;
block|}
comment|/**      * Set the allocation commands to execute.      */
DECL|method|commands
specifier|public
name|ClusterRerouteRequest
name|commands
parameter_list|(
name|AllocationCommands
name|commands
parameter_list|)
block|{
name|this
operator|.
name|commands
operator|=
name|commands
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the allocation commands to execute      */
DECL|method|getCommands
specifier|public
name|AllocationCommands
name|getCommands
parameter_list|()
block|{
return|return
name|commands
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|commands
operator|=
name|AllocationCommands
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|dryRun
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|explain
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|retryFailed
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|readTimeout
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|AllocationCommands
operator|.
name|writeTo
argument_list|(
name|commands
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|dryRun
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|retryFailed
argument_list|)
expr_stmt|;
name|writeTimeout
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ClusterRerouteRequest
name|other
init|=
operator|(
name|ClusterRerouteRequest
operator|)
name|obj
decl_stmt|;
comment|// Override equals and hashCode for testing
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|commands
argument_list|,
name|other
operator|.
name|commands
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|dryRun
argument_list|,
name|other
operator|.
name|dryRun
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|explain
argument_list|,
name|other
operator|.
name|explain
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|timeout
argument_list|,
name|other
operator|.
name|timeout
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|retryFailed
argument_list|,
name|other
operator|.
name|retryFailed
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|masterNodeTimeout
argument_list|,
name|other
operator|.
name|masterNodeTimeout
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// Override equals and hashCode for testing
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|commands
argument_list|,
name|dryRun
argument_list|,
name|explain
argument_list|,
name|timeout
argument_list|,
name|retryFailed
argument_list|,
name|masterNodeTimeout
argument_list|)
return|;
block|}
block|}
end_class

end_unit

