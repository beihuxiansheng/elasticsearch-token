begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.reroute
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|reroute
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|AcknowledgedRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommandRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Request to submit cluster reroute allocation commands  */
end_comment

begin_class
DECL|class|ClusterRerouteRequest
specifier|public
class|class
name|ClusterRerouteRequest
extends|extends
name|AcknowledgedRequest
argument_list|<
name|ClusterRerouteRequest
argument_list|>
block|{
DECL|field|commands
name|AllocationCommands
name|commands
init|=
operator|new
name|AllocationCommands
argument_list|()
decl_stmt|;
DECL|field|dryRun
name|boolean
name|dryRun
decl_stmt|;
DECL|field|explain
name|boolean
name|explain
decl_stmt|;
DECL|method|ClusterRerouteRequest
specifier|public
name|ClusterRerouteRequest
parameter_list|()
block|{     }
comment|/**      * Adds allocation commands to be applied to the cluster. Note, can be empty, in which case      * will simply run a simple "reroute".      */
DECL|method|add
specifier|public
name|ClusterRerouteRequest
name|add
parameter_list|(
name|AllocationCommand
modifier|...
name|commands
parameter_list|)
block|{
name|this
operator|.
name|commands
operator|.
name|add
argument_list|(
name|commands
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a dry run flag (defaults to<tt>false</tt>) allowing to run the commands without      * actually applying them to the cluster state, and getting the resulting cluster state back.      */
DECL|method|dryRun
specifier|public
name|ClusterRerouteRequest
name|dryRun
parameter_list|(
name|boolean
name|dryRun
parameter_list|)
block|{
name|this
operator|.
name|dryRun
operator|=
name|dryRun
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the current dry run flag which allows to run the commands without actually applying them,      * just to get back the resulting cluster state back.      */
DECL|method|dryRun
specifier|public
name|boolean
name|dryRun
parameter_list|()
block|{
return|return
name|this
operator|.
name|dryRun
return|;
block|}
comment|/**      * Sets the explain flag, which will collect information about the reroute      * request without executing the actions. Similar to dryRun,      * but human-readable.      */
DECL|method|explain
specifier|public
name|ClusterRerouteRequest
name|explain
parameter_list|(
name|boolean
name|explain
parameter_list|)
block|{
name|this
operator|.
name|explain
operator|=
name|explain
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the current explain flag      */
DECL|method|explain
specifier|public
name|boolean
name|explain
parameter_list|()
block|{
return|return
name|this
operator|.
name|explain
return|;
block|}
comment|/**      * Set the allocation commands to execute.      */
DECL|method|commands
specifier|public
name|ClusterRerouteRequest
name|commands
parameter_list|(
name|AllocationCommand
modifier|...
name|commands
parameter_list|)
block|{
name|this
operator|.
name|commands
operator|=
operator|new
name|AllocationCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source for the request.      */
DECL|method|source
specifier|public
name|ClusterRerouteRequest
name|source
parameter_list|(
name|BytesReference
name|source
parameter_list|,
name|AllocationCommandRegistry
name|registry
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
init|)
block|{
name|parser
operator|.
name|setParseFieldMatcher
argument_list|(
name|parseFieldMatcher
argument_list|)
expr_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
literal|"commands"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|this
operator|.
name|commands
operator|=
name|AllocationCommands
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse reroute request, got start array with wrong field name [{}]"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"dry_run"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
operator|||
literal|"dryRun"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|dryRun
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to parse reroute request, got value with wrong field name [{}]"
argument_list|,
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|commands
operator|=
name|AllocationCommands
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|dryRun
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|explain
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|readTimeout
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|AllocationCommands
operator|.
name|writeTo
argument_list|(
name|commands
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|dryRun
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|writeTimeout
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

