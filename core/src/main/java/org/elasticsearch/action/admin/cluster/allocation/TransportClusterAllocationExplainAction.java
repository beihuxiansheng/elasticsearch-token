begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|TransportMasterNodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|MoveDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocateUnassignedDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
operator|.
name|DebugMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|ShardAllocationDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|ShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * The {@code TransportClusterAllocationExplainAction} is responsible for actually executing the explanation of a shard's allocation on the  * master node in the cluster.  */
end_comment

begin_class
DECL|class|TransportClusterAllocationExplainAction
specifier|public
class|class
name|TransportClusterAllocationExplainAction
extends|extends
name|TransportMasterNodeAction
argument_list|<
name|ClusterAllocationExplainRequest
argument_list|,
name|ClusterAllocationExplainResponse
argument_list|>
block|{
DECL|field|clusterInfoService
specifier|private
specifier|final
name|ClusterInfoService
name|clusterInfoService
decl_stmt|;
DECL|field|allocationDeciders
specifier|private
specifier|final
name|AllocationDeciders
name|allocationDeciders
decl_stmt|;
DECL|field|shardAllocator
specifier|private
specifier|final
name|ShardsAllocator
name|shardAllocator
decl_stmt|;
DECL|field|gatewayAllocator
specifier|private
specifier|final
name|GatewayAllocator
name|gatewayAllocator
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportClusterAllocationExplainAction
specifier|public
name|TransportClusterAllocationExplainAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|ClusterInfoService
name|clusterInfoService
parameter_list|,
name|AllocationDeciders
name|allocationDeciders
parameter_list|,
name|ShardsAllocator
name|shardAllocator
parameter_list|,
name|GatewayAllocator
name|gatewayAllocator
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|ClusterAllocationExplainAction
operator|.
name|NAME
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|ClusterAllocationExplainRequest
operator|::
operator|new
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterInfoService
operator|=
name|clusterInfoService
expr_stmt|;
name|this
operator|.
name|allocationDeciders
operator|=
name|allocationDeciders
expr_stmt|;
name|this
operator|.
name|shardAllocator
operator|=
name|shardAllocator
expr_stmt|;
name|this
operator|.
name|gatewayAllocator
operator|=
name|gatewayAllocator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|protected
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|MANAGEMENT
return|;
block|}
annotation|@
name|Override
DECL|method|checkBlock
specifier|protected
name|ClusterBlockException
name|checkBlock
parameter_list|(
name|ClusterAllocationExplainRequest
name|request
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|globalBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|METADATA_READ
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|protected
name|ClusterAllocationExplainResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|ClusterAllocationExplainResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|masterOperation
specifier|protected
name|void
name|masterOperation
parameter_list|(
specifier|final
name|ClusterAllocationExplainRequest
name|request
parameter_list|,
specifier|final
name|ClusterState
name|state
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|ClusterAllocationExplainResponse
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|RoutingNodes
name|routingNodes
init|=
name|state
operator|.
name|getRoutingNodes
argument_list|()
decl_stmt|;
specifier|final
name|ClusterInfo
name|clusterInfo
init|=
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
decl_stmt|;
specifier|final
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|state
argument_list|,
name|clusterInfo
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ShardRouting
name|shardRouting
init|=
name|findShardToExplain
argument_list|(
name|request
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"explaining the allocation for [{}], found shard [{}]"
argument_list|,
name|request
argument_list|,
name|shardRouting
argument_list|)
expr_stmt|;
name|ClusterAllocationExplanation
name|cae
init|=
name|explainShard
argument_list|(
name|shardRouting
argument_list|,
name|allocation
argument_list|,
name|request
operator|.
name|includeDiskInfo
argument_list|()
condition|?
name|clusterInfo
else|:
literal|null
argument_list|,
name|request
operator|.
name|includeYesDecisions
argument_list|()
argument_list|,
name|gatewayAllocator
argument_list|,
name|shardAllocator
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|ClusterAllocationExplainResponse
argument_list|(
name|cae
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// public for testing
DECL|method|explainShard
specifier|public
specifier|static
name|ClusterAllocationExplanation
name|explainShard
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|,
name|ClusterInfo
name|clusterInfo
parameter_list|,
name|boolean
name|includeYesDecisions
parameter_list|,
name|GatewayAllocator
name|gatewayAllocator
parameter_list|,
name|ShardsAllocator
name|shardAllocator
parameter_list|)
block|{
name|allocation
operator|.
name|setDebugMode
argument_list|(
name|includeYesDecisions
condition|?
name|DebugMode
operator|.
name|ON
else|:
name|DebugMode
operator|.
name|EXCLUDE_YES_DECISIONS
argument_list|)
expr_stmt|;
name|ShardAllocationDecision
name|shardDecision
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|initializing
argument_list|()
operator|||
name|shardRouting
operator|.
name|relocating
argument_list|()
condition|)
block|{
name|shardDecision
operator|=
name|ShardAllocationDecision
operator|.
name|NOT_TAKEN
expr_stmt|;
block|}
else|else
block|{
name|AllocateUnassignedDecision
name|allocateDecision
init|=
name|shardRouting
operator|.
name|unassigned
argument_list|()
condition|?
name|gatewayAllocator
operator|.
name|decideUnassignedShardAllocation
argument_list|(
name|shardRouting
argument_list|,
name|allocation
argument_list|)
else|:
name|AllocateUnassignedDecision
operator|.
name|NOT_TAKEN
decl_stmt|;
if|if
condition|(
name|allocateDecision
operator|.
name|isDecisionTaken
argument_list|()
operator|==
literal|false
condition|)
block|{
name|shardDecision
operator|=
name|shardAllocator
operator|.
name|decideShardAllocation
argument_list|(
name|shardRouting
argument_list|,
name|allocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shardDecision
operator|=
operator|new
name|ShardAllocationDecision
argument_list|(
name|allocateDecision
argument_list|,
name|MoveDecision
operator|.
name|NOT_TAKEN
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ClusterAllocationExplanation
argument_list|(
name|shardRouting
argument_list|,
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
operator|!=
literal|null
condition|?
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|shardRouting
operator|.
name|relocatingNodeId
argument_list|()
operator|!=
literal|null
condition|?
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|shardRouting
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|clusterInfo
argument_list|,
name|shardDecision
argument_list|)
return|;
block|}
comment|// public for testing
DECL|method|findShardToExplain
specifier|public
specifier|static
name|ShardRouting
name|findShardToExplain
parameter_list|(
name|ClusterAllocationExplainRequest
name|request
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|ShardRouting
name|foundShard
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|useAnyUnassignedShard
argument_list|()
condition|)
block|{
comment|// If we can use any shard, just pick the first unassigned one (if there are any)
name|RoutingNodes
operator|.
name|UnassignedShards
operator|.
name|UnassignedIterator
name|ui
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|ui
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|foundShard
operator|=
name|ui
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|foundShard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unable to find any unassigned shards to explain ["
operator|+
name|request
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|index
init|=
name|request
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|int
name|shard
init|=
name|request
operator|.
name|getShard
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isPrimary
argument_list|()
condition|)
block|{
comment|// If we're looking for the primary shard, there's only one copy, so pick it directly
name|foundShard
operator|=
name|allocation
operator|.
name|routingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|index
argument_list|,
name|shard
argument_list|)
operator|.
name|primaryShard
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCurrentNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DiscoveryNode
name|primaryNode
init|=
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|resolveNode
argument_list|(
name|request
operator|.
name|getCurrentNode
argument_list|()
argument_list|)
decl_stmt|;
comment|// the primary is assigned to a node other than the node specified in the request
if|if
condition|(
name|primaryNode
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|foundShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unable to find primary shard assigned to node ["
operator|+
name|request
operator|.
name|getCurrentNode
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
comment|// If looking for a replica, go through all the replica shards
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|replicaShardRoutings
init|=
name|allocation
operator|.
name|routingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|index
argument_list|,
name|shard
argument_list|)
operator|.
name|replicaShards
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getCurrentNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// the request is to explain a replica shard already assigned on a particular node,
comment|// so find that shard copy
name|DiscoveryNode
name|replicaNode
init|=
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|resolveNode
argument_list|(
name|request
operator|.
name|getCurrentNode
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardRouting
name|replica
range|:
name|replicaShardRoutings
control|)
block|{
if|if
condition|(
name|replicaNode
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|replica
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|foundShard
operator|=
name|replica
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|foundShard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unable to find a replica shard assigned to node ["
operator|+
name|request
operator|.
name|getCurrentNode
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|replicaShardRoutings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Pick the first replica at the very least
name|foundShard
operator|=
name|replicaShardRoutings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|replica
range|:
name|replicaShardRoutings
control|)
block|{
comment|// In case there are multiple replicas where some are assigned and some aren't,
comment|// try to find one that is unassigned at least
if|if
condition|(
name|replica
operator|.
name|unassigned
argument_list|()
condition|)
block|{
name|foundShard
operator|=
name|replica
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|replica
operator|.
name|started
argument_list|()
operator|&&
operator|(
name|foundShard
operator|.
name|initializing
argument_list|()
operator|||
name|foundShard
operator|.
name|relocating
argument_list|()
operator|)
condition|)
block|{
comment|// prefer started shards to initializing or relocating shards because started shards
comment|// can be explained
name|foundShard
operator|=
name|replica
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|foundShard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unable to find any shards to explain ["
operator|+
name|request
operator|+
literal|"] in the routing table"
argument_list|)
throw|;
block|}
return|return
name|foundShard
return|;
block|}
block|}
end_class

end_unit

