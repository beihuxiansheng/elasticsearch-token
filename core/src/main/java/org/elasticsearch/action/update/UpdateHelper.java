begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.update
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentSourceMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParentFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|RoutingFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|FetchSourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SourceLookup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|LongSupplier
import|;
end_import

begin_comment
comment|/**  * Helper for translating an update request to an index, delete request or update response.  */
end_comment

begin_class
DECL|class|UpdateHelper
specifier|public
class|class
name|UpdateHelper
extends|extends
name|AbstractComponent
block|{
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|method|UpdateHelper
specifier|public
name|UpdateHelper
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
block|}
comment|/**      * Prepares an update request by converting it into an index or delete request or an update response (no action).      */
DECL|method|prepare
specifier|public
name|Result
name|prepare
parameter_list|(
name|UpdateRequest
name|request
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|LongSupplier
name|nowInMillis
parameter_list|)
block|{
specifier|final
name|GetResult
name|getResult
init|=
name|indexShard
operator|.
name|getService
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|RoutingFieldMapper
operator|.
name|NAME
block|,
name|ParentFieldMapper
operator|.
name|NAME
block|}
argument_list|,
literal|true
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|versionType
argument_list|()
argument_list|,
name|FetchSourceContext
operator|.
name|FETCH_SOURCE
argument_list|)
decl_stmt|;
return|return
name|prepare
argument_list|(
name|indexShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|,
name|getResult
argument_list|,
name|nowInMillis
argument_list|)
return|;
block|}
comment|/**      * Prepares an update request by converting it into an index or delete request or an update response (no action, in the event of a      * noop).      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|prepare
specifier|protected
name|Result
name|prepare
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|UpdateRequest
name|request
parameter_list|,
specifier|final
name|GetResult
name|getResult
parameter_list|,
name|LongSupplier
name|nowInMillis
parameter_list|)
block|{
if|if
condition|(
name|getResult
operator|.
name|isExists
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// If the document didn't exist, execute the update request as an upsert
return|return
name|prepareUpsert
argument_list|(
name|shardId
argument_list|,
name|request
argument_list|,
name|getResult
argument_list|,
name|nowInMillis
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|getResult
operator|.
name|internalSourceRef
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// no source, we can't do anything, throw a failure...
throw|throw
operator|new
name|DocumentSourceMissingException
argument_list|(
name|shardId
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|script
argument_list|()
operator|==
literal|null
operator|&&
name|request
operator|.
name|doc
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// The request has no script, it is a new doc that should be merged with the old document
return|return
name|prepareUpdateIndexRequest
argument_list|(
name|shardId
argument_list|,
name|request
argument_list|,
name|getResult
argument_list|,
name|request
operator|.
name|detectNoop
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// The request has a script (or empty script), execute the script and prepare a new index request
return|return
name|prepareUpdateScriptRequest
argument_list|(
name|shardId
argument_list|,
name|request
argument_list|,
name|getResult
argument_list|,
name|nowInMillis
argument_list|)
return|;
block|}
block|}
comment|/**      * Execute a scripted upsert, where there is an existing upsert document and a script to be executed. The script is executed and a new      * Tuple of operation and updated {@code _source} is returned.      */
DECL|method|executeScriptedUpsert
name|Tuple
argument_list|<
name|UpdateOpType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|executeScriptedUpsert
parameter_list|(
name|IndexRequest
name|upsert
parameter_list|,
name|Script
name|script
parameter_list|,
name|LongSupplier
name|nowInMillis
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|upsertDoc
init|=
name|upsert
operator|.
name|sourceAsMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// Tell the script that this is a create and not an update
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|OP
argument_list|,
name|UpdateOpType
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|SOURCE
argument_list|,
name|upsertDoc
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|NOW
argument_list|,
name|nowInMillis
operator|.
name|getAsLong
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|executeScript
argument_list|(
name|script
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|UpdateOpType
name|operation
init|=
name|UpdateOpType
operator|.
name|lenientFromString
argument_list|(
operator|(
name|String
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|ContextFields
operator|.
name|OP
argument_list|)
argument_list|,
name|logger
argument_list|,
name|script
operator|.
name|getIdOrCode
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|newSource
init|=
operator|(
name|Map
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|ContextFields
operator|.
name|SOURCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|!=
name|UpdateOpType
operator|.
name|CREATE
operator|&&
name|operation
operator|!=
name|UpdateOpType
operator|.
name|NONE
condition|)
block|{
comment|// Only valid options for an upsert script are "create" (the default) or "none", meaning abort upsert
name|logger
operator|.
name|warn
argument_list|(
literal|"Invalid upsert operation [{}] for script [{}], doing nothing..."
argument_list|,
name|operation
argument_list|,
name|script
operator|.
name|getIdOrCode
argument_list|()
argument_list|)
expr_stmt|;
name|operation
operator|=
name|UpdateOpType
operator|.
name|NONE
expr_stmt|;
block|}
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|operation
argument_list|,
name|newSource
argument_list|)
return|;
block|}
comment|/**      * Prepare the request for upsert, executing the upsert script if present, and returning a {@code Result} containing a new      * {@code IndexRequest} to be executed on the primary and replicas.      */
DECL|method|prepareUpsert
name|Result
name|prepareUpsert
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|UpdateRequest
name|request
parameter_list|,
specifier|final
name|GetResult
name|getResult
parameter_list|,
name|LongSupplier
name|nowInMillis
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|upsertRequest
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|request
operator|.
name|docAsUpsert
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DocumentMissingException
argument_list|(
name|shardId
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
throw|;
block|}
name|IndexRequest
name|indexRequest
init|=
name|request
operator|.
name|docAsUpsert
argument_list|()
condition|?
name|request
operator|.
name|doc
argument_list|()
else|:
name|request
operator|.
name|upsertRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|scriptedUpsert
argument_list|()
operator|&&
name|request
operator|.
name|script
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Run the script to perform the create logic
name|IndexRequest
name|upsert
init|=
name|request
operator|.
name|upsertRequest
argument_list|()
decl_stmt|;
name|Tuple
argument_list|<
name|UpdateOpType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|upsertResult
init|=
name|executeScriptedUpsert
argument_list|(
name|upsert
argument_list|,
name|request
operator|.
name|script
argument_list|,
name|nowInMillis
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|upsertResult
operator|.
name|v1
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
comment|// Update the index request with the new "_source"
name|indexRequest
operator|.
name|source
argument_list|(
name|upsertResult
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|NONE
case|:
name|UpdateResponse
name|update
init|=
operator|new
name|UpdateResponse
argument_list|(
name|shardId
argument_list|,
name|getResult
operator|.
name|getType
argument_list|()
argument_list|,
name|getResult
operator|.
name|getId
argument_list|()
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|update
operator|.
name|setGetResult
argument_list|(
name|getResult
argument_list|)
expr_stmt|;
return|return
operator|new
name|Result
argument_list|(
name|update
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
argument_list|,
name|upsertResult
operator|.
name|v2
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
return|;
default|default:
comment|// It's fine to throw an exception here, the leniency is handled/logged by `executeScriptedUpsert`
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown upsert operation, got: "
operator|+
name|upsertResult
operator|.
name|v1
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|indexRequest
operator|.
name|index
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|id
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|request
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|request
operator|.
name|routing
argument_list|()
argument_list|)
operator|.
name|parent
argument_list|(
name|request
operator|.
name|parent
argument_list|()
argument_list|)
operator|.
name|timeout
argument_list|(
name|request
operator|.
name|timeout
argument_list|()
argument_list|)
operator|.
name|waitForActiveShards
argument_list|(
name|request
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
comment|// it has to be a "create!"
operator|.
name|create
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|versionType
argument_list|()
operator|!=
name|VersionType
operator|.
name|INTERNAL
condition|)
block|{
comment|// in all but the internal versioning mode, we want to create the new document using the given version.
name|indexRequest
operator|.
name|version
argument_list|(
name|request
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|versionType
argument_list|(
name|request
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Result
argument_list|(
name|indexRequest
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|CREATED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Calculate the version to use for the update request, using either the existing version if internal versioning is used, or the get      * result document's version if the version type is "FORCE".      */
DECL|method|calculateUpdateVersion
specifier|static
name|long
name|calculateUpdateVersion
parameter_list|(
name|UpdateRequest
name|request
parameter_list|,
name|GetResult
name|getResult
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|versionType
argument_list|()
operator|!=
name|VersionType
operator|.
name|INTERNAL
condition|)
block|{
assert|assert
name|request
operator|.
name|versionType
argument_list|()
operator|==
name|VersionType
operator|.
name|FORCE
assert|;
return|return
name|request
operator|.
name|version
argument_list|()
return|;
comment|// remember, match_any is excluded by the conflict test
block|}
else|else
block|{
return|return
name|getResult
operator|.
name|getVersion
argument_list|()
return|;
block|}
block|}
comment|/**      * Calculate a routing value to be used, either the included index request's routing, or retrieved document's routing when defined.      */
annotation|@
name|Nullable
DECL|method|calculateRouting
specifier|static
name|String
name|calculateRouting
parameter_list|(
name|GetResult
name|getResult
parameter_list|,
annotation|@
name|Nullable
name|IndexRequest
name|updateIndexRequest
parameter_list|)
block|{
if|if
condition|(
name|updateIndexRequest
operator|!=
literal|null
operator|&&
name|updateIndexRequest
operator|.
name|routing
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|updateIndexRequest
operator|.
name|routing
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|getResult
operator|.
name|getFields
argument_list|()
operator|.
name|containsKey
argument_list|(
name|RoutingFieldMapper
operator|.
name|NAME
argument_list|)
condition|)
block|{
return|return
name|getResult
operator|.
name|field
argument_list|(
name|RoutingFieldMapper
operator|.
name|NAME
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Calculate a parent value to be used, either the included index request's parent, or retrieved document's parent when defined.      */
annotation|@
name|Nullable
DECL|method|calculateParent
specifier|static
name|String
name|calculateParent
parameter_list|(
name|GetResult
name|getResult
parameter_list|,
annotation|@
name|Nullable
name|IndexRequest
name|updateIndexRequest
parameter_list|)
block|{
if|if
condition|(
name|updateIndexRequest
operator|!=
literal|null
operator|&&
name|updateIndexRequest
operator|.
name|parent
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|updateIndexRequest
operator|.
name|parent
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|getResult
operator|.
name|getFields
argument_list|()
operator|.
name|containsKey
argument_list|(
name|ParentFieldMapper
operator|.
name|NAME
argument_list|)
condition|)
block|{
return|return
name|getResult
operator|.
name|field
argument_list|(
name|ParentFieldMapper
operator|.
name|NAME
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Prepare the request for merging the existing document with a new one, can optionally detect a noop change. Returns a {@code Result}      * containing a new {@code IndexRequest} to be executed on the primary and replicas.      */
DECL|method|prepareUpdateIndexRequest
name|Result
name|prepareUpdateIndexRequest
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|UpdateRequest
name|request
parameter_list|,
name|GetResult
name|getResult
parameter_list|,
name|boolean
name|detectNoop
parameter_list|)
block|{
specifier|final
name|long
name|updateVersion
init|=
name|calculateUpdateVersion
argument_list|(
name|request
argument_list|,
name|getResult
argument_list|)
decl_stmt|;
specifier|final
name|IndexRequest
name|currentRequest
init|=
name|request
operator|.
name|doc
argument_list|()
decl_stmt|;
specifier|final
name|String
name|routing
init|=
name|calculateRouting
argument_list|(
name|getResult
argument_list|,
name|currentRequest
argument_list|)
decl_stmt|;
specifier|final
name|String
name|parent
init|=
name|calculateParent
argument_list|(
name|getResult
argument_list|,
name|currentRequest
argument_list|)
decl_stmt|;
specifier|final
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|sourceAndContent
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|getResult
operator|.
name|internalSourceRef
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|XContentType
name|updateSourceContentType
init|=
name|sourceAndContent
operator|.
name|v1
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|updatedSourceAsMap
init|=
name|sourceAndContent
operator|.
name|v2
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|noop
init|=
operator|!
name|XContentHelper
operator|.
name|update
argument_list|(
name|updatedSourceAsMap
argument_list|,
name|currentRequest
operator|.
name|sourceAsMap
argument_list|()
argument_list|,
name|detectNoop
argument_list|)
decl_stmt|;
comment|// We can only actually turn the update into a noop if detectNoop is true to preserve backwards compatibility and to handle cases
comment|// where users repopulating multi-fields or adding synonyms, etc.
if|if
condition|(
name|detectNoop
operator|&&
name|noop
condition|)
block|{
name|UpdateResponse
name|update
init|=
operator|new
name|UpdateResponse
argument_list|(
name|shardId
argument_list|,
name|getResult
operator|.
name|getType
argument_list|()
argument_list|,
name|getResult
operator|.
name|getId
argument_list|()
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|update
operator|.
name|setGetResult
argument_list|(
name|extractGetResult
argument_list|(
name|request
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|updatedSourceAsMap
argument_list|,
name|updateSourceContentType
argument_list|,
name|getResult
operator|.
name|internalSourceRef
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Result
argument_list|(
name|update
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
argument_list|,
name|updatedSourceAsMap
argument_list|,
name|updateSourceContentType
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|IndexRequest
name|finalIndexRequest
init|=
name|Requests
operator|.
name|indexRequest
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|id
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
operator|.
name|source
argument_list|(
name|updatedSourceAsMap
argument_list|,
name|updateSourceContentType
argument_list|)
operator|.
name|version
argument_list|(
name|updateVersion
argument_list|)
operator|.
name|versionType
argument_list|(
name|request
operator|.
name|versionType
argument_list|()
argument_list|)
operator|.
name|waitForActiveShards
argument_list|(
name|request
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
operator|.
name|timeout
argument_list|(
name|request
operator|.
name|timeout
argument_list|()
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|request
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Result
argument_list|(
name|finalIndexRequest
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|UPDATED
argument_list|,
name|updatedSourceAsMap
argument_list|,
name|updateSourceContentType
argument_list|)
return|;
block|}
block|}
comment|/**      * Prepare the request for updating an existing document using a script. Executes the script and returns a {@code Result} containing      * either a new {@code IndexRequest} or {@code DeleteRequest} (depending on the script's returned "op" value) to be executed on the      * primary and replicas.      */
DECL|method|prepareUpdateScriptRequest
name|Result
name|prepareUpdateScriptRequest
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|UpdateRequest
name|request
parameter_list|,
name|GetResult
name|getResult
parameter_list|,
name|LongSupplier
name|nowInMillis
parameter_list|)
block|{
specifier|final
name|long
name|updateVersion
init|=
name|calculateUpdateVersion
argument_list|(
name|request
argument_list|,
name|getResult
argument_list|)
decl_stmt|;
specifier|final
name|IndexRequest
name|currentRequest
init|=
name|request
operator|.
name|doc
argument_list|()
decl_stmt|;
specifier|final
name|String
name|routing
init|=
name|calculateRouting
argument_list|(
name|getResult
argument_list|,
name|currentRequest
argument_list|)
decl_stmt|;
specifier|final
name|String
name|parent
init|=
name|calculateParent
argument_list|(
name|getResult
argument_list|,
name|currentRequest
argument_list|)
decl_stmt|;
specifier|final
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|sourceAndContent
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|getResult
operator|.
name|internalSourceRef
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|XContentType
name|updateSourceContentType
init|=
name|sourceAndContent
operator|.
name|v1
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
init|=
name|sourceAndContent
operator|.
name|v2
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|OP
argument_list|,
name|UpdateOpType
operator|.
name|INDEX
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// The default operation is "index"
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|INDEX
argument_list|,
name|getResult
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|TYPE
argument_list|,
name|getResult
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|ID
argument_list|,
name|getResult
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|VERSION
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|ROUTING
argument_list|,
name|routing
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|PARENT
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|SOURCE
argument_list|,
name|sourceAsMap
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|put
argument_list|(
name|ContextFields
operator|.
name|NOW
argument_list|,
name|nowInMillis
operator|.
name|getAsLong
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|executeScript
argument_list|(
name|request
operator|.
name|script
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|UpdateOpType
name|operation
init|=
name|UpdateOpType
operator|.
name|lenientFromString
argument_list|(
operator|(
name|String
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|ContextFields
operator|.
name|OP
argument_list|)
argument_list|,
name|logger
argument_list|,
name|request
operator|.
name|script
operator|.
name|getIdOrCode
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|updatedSourceAsMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|ContextFields
operator|.
name|SOURCE
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|INDEX
case|:
specifier|final
name|IndexRequest
name|indexRequest
init|=
name|Requests
operator|.
name|indexRequest
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|id
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
operator|.
name|source
argument_list|(
name|updatedSourceAsMap
argument_list|,
name|updateSourceContentType
argument_list|)
operator|.
name|version
argument_list|(
name|updateVersion
argument_list|)
operator|.
name|versionType
argument_list|(
name|request
operator|.
name|versionType
argument_list|()
argument_list|)
operator|.
name|waitForActiveShards
argument_list|(
name|request
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
operator|.
name|timeout
argument_list|(
name|request
operator|.
name|timeout
argument_list|()
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|request
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Result
argument_list|(
name|indexRequest
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|UPDATED
argument_list|,
name|updatedSourceAsMap
argument_list|,
name|updateSourceContentType
argument_list|)
return|;
case|case
name|DELETE
case|:
name|DeleteRequest
name|deleteRequest
init|=
name|Requests
operator|.
name|deleteRequest
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|id
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
operator|.
name|version
argument_list|(
name|updateVersion
argument_list|)
operator|.
name|versionType
argument_list|(
name|request
operator|.
name|versionType
argument_list|()
argument_list|)
operator|.
name|waitForActiveShards
argument_list|(
name|request
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
operator|.
name|timeout
argument_list|(
name|request
operator|.
name|timeout
argument_list|()
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|request
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Result
argument_list|(
name|deleteRequest
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|DELETED
argument_list|,
name|updatedSourceAsMap
argument_list|,
name|updateSourceContentType
argument_list|)
return|;
default|default:
comment|// If it was neither an INDEX or DELETE operation, treat it as a noop
name|UpdateResponse
name|update
init|=
operator|new
name|UpdateResponse
argument_list|(
name|shardId
argument_list|,
name|getResult
operator|.
name|getType
argument_list|()
argument_list|,
name|getResult
operator|.
name|getId
argument_list|()
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|update
operator|.
name|setGetResult
argument_list|(
name|extractGetResult
argument_list|(
name|request
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|updatedSourceAsMap
argument_list|,
name|updateSourceContentType
argument_list|,
name|getResult
operator|.
name|internalSourceRef
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Result
argument_list|(
name|update
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
argument_list|,
name|updatedSourceAsMap
argument_list|,
name|updateSourceContentType
argument_list|)
return|;
block|}
block|}
DECL|method|executeScript
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|executeScript
parameter_list|(
name|Script
name|script
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|scriptService
operator|!=
literal|null
condition|)
block|{
name|ExecutableScript
operator|.
name|Factory
name|factory
init|=
name|scriptService
operator|.
name|compile
argument_list|(
name|script
argument_list|,
name|ExecutableScript
operator|.
name|UPDATE_CONTEXT
argument_list|)
decl_stmt|;
name|ExecutableScript
name|executableScript
init|=
name|factory
operator|.
name|newInstance
argument_list|(
name|script
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|executableScript
operator|.
name|setNextVar
argument_list|(
name|ContextFields
operator|.
name|CTX
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|executableScript
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failed to execute script"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|ctx
return|;
block|}
comment|/**      * Applies {@link UpdateRequest#fetchSource()} to the _source of the updated document to be returned in a update response.      * For BWC this function also extracts the {@link UpdateRequest#fields()} from the updated document to be returned in a update response      */
DECL|method|extractGetResult
specifier|public
specifier|static
name|GetResult
name|extractGetResult
parameter_list|(
specifier|final
name|UpdateRequest
name|request
parameter_list|,
name|String
name|concreteIndex
parameter_list|,
name|long
name|version
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|,
name|XContentType
name|sourceContentType
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|BytesReference
name|sourceAsBytes
parameter_list|)
block|{
if|if
condition|(
operator|(
name|request
operator|.
name|fields
argument_list|()
operator|==
literal|null
operator|||
name|request
operator|.
name|fields
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
operator|&&
operator|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|==
literal|null
operator|||
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|fetchSource
argument_list|()
operator|==
literal|false
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SourceLookup
name|sourceLookup
init|=
operator|new
name|SourceLookup
argument_list|()
decl_stmt|;
name|sourceLookup
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|boolean
name|sourceRequested
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|fields
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|fields
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|request
operator|.
name|fields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"_source"
argument_list|)
condition|)
block|{
name|sourceRequested
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|Object
name|value
init|=
name|sourceLookup
operator|.
name|extractValue
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|GetField
name|getField
init|=
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|getField
operator|==
literal|null
condition|)
block|{
name|getField
operator|=
operator|new
name|GetField
argument_list|(
name|field
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|getField
argument_list|)
expr_stmt|;
block|}
name|getField
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|BytesReference
name|sourceFilteredAsBytes
init|=
name|sourceAsBytes
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|fetchSource
argument_list|()
condition|)
block|{
name|sourceRequested
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|includes
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|||
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|excludes
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Object
name|value
init|=
name|sourceLookup
operator|.
name|filter
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|initialCapacity
init|=
name|Math
operator|.
name|min
argument_list|(
literal|1024
argument_list|,
name|sourceAsBytes
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|streamOutput
init|=
operator|new
name|BytesStreamOutput
argument_list|(
name|initialCapacity
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|builder
init|=
operator|new
name|XContentBuilder
argument_list|(
name|sourceContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|streamOutput
argument_list|)
init|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sourceFilteredAsBytes
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Error filtering source"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// TODO when using delete/none, we can still return the source as bytes by generating it (using the sourceContentType)
return|return
operator|new
name|GetResult
argument_list|(
name|concreteIndex
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|version
argument_list|,
literal|true
argument_list|,
name|sourceRequested
condition|?
name|sourceFilteredAsBytes
else|:
literal|null
argument_list|,
name|fields
argument_list|)
return|;
block|}
DECL|class|Result
specifier|public
specifier|static
class|class
name|Result
block|{
DECL|field|action
specifier|private
specifier|final
name|Streamable
name|action
decl_stmt|;
DECL|field|result
specifier|private
specifier|final
name|DocWriteResponse
operator|.
name|Result
name|result
decl_stmt|;
DECL|field|updatedSourceAsMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|updatedSourceAsMap
decl_stmt|;
DECL|field|updateSourceContentType
specifier|private
specifier|final
name|XContentType
name|updateSourceContentType
decl_stmt|;
DECL|method|Result
specifier|public
name|Result
parameter_list|(
name|Streamable
name|action
parameter_list|,
name|DocWriteResponse
operator|.
name|Result
name|result
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|updatedSourceAsMap
parameter_list|,
name|XContentType
name|updateSourceContentType
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|updatedSourceAsMap
operator|=
name|updatedSourceAsMap
expr_stmt|;
name|this
operator|.
name|updateSourceContentType
operator|=
name|updateSourceContentType
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|action
specifier|public
parameter_list|<
name|T
extends|extends
name|Streamable
parameter_list|>
name|T
name|action
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|action
return|;
block|}
DECL|method|getResponseResult
specifier|public
name|DocWriteResponse
operator|.
name|Result
name|getResponseResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
DECL|method|updatedSourceAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|updatedSourceAsMap
parameter_list|()
block|{
return|return
name|updatedSourceAsMap
return|;
block|}
DECL|method|updateSourceContentType
specifier|public
name|XContentType
name|updateSourceContentType
parameter_list|()
block|{
return|return
name|updateSourceContentType
return|;
block|}
block|}
comment|/**      * After executing the script, this is the type of operation that will be used for subsequent actions. This corresponds to the "ctx.op"      * variable inside of scripts.      */
DECL|enum|UpdateOpType
enum|enum
name|UpdateOpType
block|{
DECL|enum constant|CREATE
name|CREATE
argument_list|(
literal|"create"
argument_list|)
block|,
DECL|enum constant|INDEX
name|INDEX
argument_list|(
literal|"index"
argument_list|)
block|,
DECL|enum constant|DELETE
name|DELETE
argument_list|(
literal|"delete"
argument_list|)
block|,
DECL|enum constant|NONE
name|NONE
argument_list|(
literal|"none"
argument_list|)
block|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|UpdateOpType
name|UpdateOpType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|lenientFromString
specifier|public
specifier|static
name|UpdateOpType
name|lenientFromString
parameter_list|(
name|String
name|operation
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|String
name|scriptId
parameter_list|)
block|{
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
literal|"create"
case|:
return|return
name|UpdateOpType
operator|.
name|CREATE
return|;
case|case
literal|"index"
case|:
return|return
name|UpdateOpType
operator|.
name|INDEX
return|;
case|case
literal|"delete"
case|:
return|return
name|UpdateOpType
operator|.
name|DELETE
return|;
case|case
literal|"none"
case|:
return|return
name|UpdateOpType
operator|.
name|NONE
return|;
default|default:
comment|// TODO: can we remove this leniency yet??
name|logger
operator|.
name|warn
argument_list|(
literal|"Used upsert operation [{}] for script [{}], doing nothing..."
argument_list|,
name|operation
argument_list|,
name|scriptId
argument_list|)
expr_stmt|;
return|return
name|UpdateOpType
operator|.
name|NONE
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
comment|/**      * Field names used to populate the script context      */
DECL|class|ContextFields
specifier|public
specifier|static
class|class
name|ContextFields
block|{
DECL|field|CTX
specifier|public
specifier|static
specifier|final
name|String
name|CTX
init|=
literal|"ctx"
decl_stmt|;
DECL|field|OP
specifier|public
specifier|static
specifier|final
name|String
name|OP
init|=
literal|"op"
decl_stmt|;
DECL|field|SOURCE
specifier|public
specifier|static
specifier|final
name|String
name|SOURCE
init|=
literal|"_source"
decl_stmt|;
DECL|field|NOW
specifier|public
specifier|static
specifier|final
name|String
name|NOW
init|=
literal|"_now"
decl_stmt|;
DECL|field|INDEX
specifier|public
specifier|static
specifier|final
name|String
name|INDEX
init|=
literal|"_index"
decl_stmt|;
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"_type"
decl_stmt|;
DECL|field|ID
specifier|public
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"_id"
decl_stmt|;
DECL|field|VERSION
specifier|public
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"_version"
decl_stmt|;
DECL|field|ROUTING
specifier|public
specifier|static
specifier|final
name|String
name|ROUTING
init|=
literal|"_routing"
decl_stmt|;
DECL|field|PARENT
specifier|public
specifier|static
specifier|final
name|String
name|PARENT
init|=
literal|"_parent"
decl_stmt|;
block|}
block|}
end_class

end_unit

