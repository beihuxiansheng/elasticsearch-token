begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.update
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|RoutingMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|TransportCreateIndexAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|TransportDeleteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|TransportIndexAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|AutoCreateIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportWriteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|index
operator|.
name|MappingUpdatedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
operator|.
name|unwrapCause
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TransportUpdateAction
specifier|public
class|class
name|TransportUpdateAction
extends|extends
name|TransportWriteAction
argument_list|<
name|UpdateRequest
argument_list|,
name|UpdateReplicaRequest
argument_list|,
name|UpdateResponse
argument_list|>
block|{
DECL|field|autoCreateIndex
specifier|private
specifier|final
name|AutoCreateIndex
name|autoCreateIndex
decl_stmt|;
DECL|field|createIndexAction
specifier|private
specifier|final
name|TransportCreateIndexAction
name|createIndexAction
decl_stmt|;
DECL|field|updateHelper
specifier|private
specifier|final
name|UpdateHelper
name|updateHelper
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|mappingUpdatedAction
specifier|private
specifier|final
name|MappingUpdatedAction
name|mappingUpdatedAction
decl_stmt|;
DECL|field|allowIdGeneration
specifier|private
specifier|final
name|boolean
name|allowIdGeneration
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportUpdateAction
specifier|public
name|TransportUpdateAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|TransportCreateIndexAction
name|createIndexAction
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|AutoCreateIndex
name|autoCreateIndex
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|MappingUpdatedAction
name|mappingUpdatedAction
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|UpdateAction
operator|.
name|NAME
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|indicesService
argument_list|,
name|threadPool
argument_list|,
name|shardStateAction
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|UpdateRequest
operator|::
operator|new
argument_list|,
name|UpdateReplicaRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|this
operator|.
name|createIndexAction
operator|=
name|createIndexAction
expr_stmt|;
name|this
operator|.
name|updateHelper
operator|=
operator|new
name|UpdateHelper
argument_list|(
name|scriptService
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|autoCreateIndex
operator|=
name|autoCreateIndex
expr_stmt|;
name|this
operator|.
name|mappingUpdatedAction
operator|=
name|mappingUpdatedAction
expr_stmt|;
name|this
operator|.
name|allowIdGeneration
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"action.allow_id_generation"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolveRequest
specifier|protected
name|void
name|resolveRequest
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|UpdateRequest
name|request
parameter_list|)
block|{
name|super
operator|.
name|resolveRequest
argument_list|(
name|metaData
argument_list|,
name|indexMetaData
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|resolveAndValidateRouting
argument_list|(
name|metaData
argument_list|,
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|ShardId
name|shardId
init|=
name|clusterService
operator|.
name|operationRouting
argument_list|()
operator|.
name|shardId
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|routing
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setShardId
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|Task
name|task
parameter_list|,
name|UpdateRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|UpdateResponse
argument_list|>
name|listener
parameter_list|)
block|{
comment|// if we don't have a master, we don't have metadata, that's fine, let it find a master using create index API
if|if
condition|(
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
condition|)
block|{
name|CreateIndexRequest
name|createIndexRequest
init|=
operator|new
name|CreateIndexRequest
argument_list|()
decl_stmt|;
name|createIndexRequest
operator|.
name|index
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|createIndexRequest
operator|.
name|cause
argument_list|(
literal|"auto(update api)"
argument_list|)
expr_stmt|;
name|createIndexRequest
operator|.
name|masterNodeTimeout
argument_list|(
name|request
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|createIndexAction
operator|.
name|execute
argument_list|(
name|createIndexRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|CreateIndexResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|CreateIndexResponse
name|result
parameter_list|)
block|{
name|innerExecute
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|unwrapCause
argument_list|(
name|e
argument_list|)
operator|instanceof
name|IndexAlreadyExistsException
condition|)
block|{
comment|// we have the index, do it
try|try
block|{
name|innerExecute
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|inner
parameter_list|)
block|{
name|inner
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|innerExecute
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|newResponseInstance
specifier|protected
name|UpdateResponse
name|newResponseInstance
parameter_list|()
block|{
return|return
operator|new
name|UpdateResponse
argument_list|()
return|;
block|}
DECL|method|innerExecute
specifier|private
name|void
name|innerExecute
parameter_list|(
name|Task
name|task
parameter_list|,
specifier|final
name|UpdateRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|UpdateResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|super
operator|.
name|doExecute
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onPrimaryShard
specifier|protected
name|WriteResult
argument_list|<
name|UpdateReplicaRequest
argument_list|,
name|UpdateResponse
argument_list|>
name|onPrimaryShard
parameter_list|(
name|UpdateRequest
name|request
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|)
throws|throws
name|Exception
block|{
name|ShardId
name|shardId
init|=
name|request
operator|.
name|shardId
argument_list|()
decl_stmt|;
specifier|final
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|indexService
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
return|return
name|executeUpdateRequestOnPrimary
argument_list|(
name|request
argument_list|,
name|indexShard
argument_list|,
name|indexMetaData
argument_list|,
name|updateHelper
argument_list|,
name|mappingUpdatedAction
argument_list|,
name|allowIdGeneration
argument_list|)
return|;
block|}
DECL|method|executeUpdateRequestOnPrimary
specifier|public
specifier|static
name|WriteResult
argument_list|<
name|UpdateReplicaRequest
argument_list|,
name|UpdateResponse
argument_list|>
name|executeUpdateRequestOnPrimary
parameter_list|(
name|UpdateRequest
name|request
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|UpdateHelper
name|updateHelper
parameter_list|,
name|MappingUpdatedAction
name|mappingUpdatedAction
parameter_list|,
name|boolean
name|allowIdGeneration
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|maxAttempts
init|=
name|request
operator|.
name|retryOnConflict
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|attemptCount
init|=
literal|0
init|;
name|attemptCount
operator|<=
name|maxAttempts
condition|;
name|attemptCount
operator|++
control|)
block|{
try|try
block|{
return|return
name|shardUpdateOperation
argument_list|(
name|indexMetaData
argument_list|,
name|indexShard
argument_list|,
name|request
argument_list|,
name|updateHelper
argument_list|,
name|mappingUpdatedAction
argument_list|,
name|allowIdGeneration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|Throwable
name|cause
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptCount
operator|==
name|maxAttempts
comment|// bubble up exception when we run out of attempts
operator|||
operator|(
name|cause
operator|instanceof
name|VersionConflictEngineException
operator|)
operator|==
literal|false
condition|)
block|{
comment|// or when exception is not a version conflict
throw|throw
name|e
throw|;
block|}
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"version conflict exception should bubble up on last attempt"
argument_list|)
throw|;
block|}
DECL|method|shardUpdateOperation
specifier|private
specifier|static
name|WriteResult
argument_list|<
name|UpdateReplicaRequest
argument_list|,
name|UpdateResponse
argument_list|>
name|shardUpdateOperation
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|UpdateRequest
name|request
parameter_list|,
name|UpdateHelper
name|updateHelper
parameter_list|,
name|MappingUpdatedAction
name|mappingUpdatedAction
parameter_list|,
name|boolean
name|allowIdGeneration
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|UpdateHelper
operator|.
name|Result
name|result
init|=
name|updateHelper
operator|.
name|prepare
argument_list|(
name|request
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|result
operator|.
name|getResponseResult
argument_list|()
condition|)
block|{
case|case
name|CREATED
case|:
case|case
name|UPDATED
case|:
name|IndexRequest
name|indexRequest
init|=
name|result
operator|.
name|action
argument_list|()
decl_stmt|;
name|MappingMetaData
name|mappingMd
init|=
name|indexMetaData
operator|.
name|mappingOrDefault
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|process
argument_list|(
name|mappingMd
argument_list|,
name|allowIdGeneration
argument_list|,
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|WriteResult
argument_list|<
name|IndexRequest
argument_list|,
name|IndexResponse
argument_list|>
name|indexResponseWriteResult
init|=
name|TransportIndexAction
operator|.
name|executeIndexRequestOnPrimary
argument_list|(
name|indexRequest
argument_list|,
name|indexShard
argument_list|,
name|mappingUpdatedAction
argument_list|)
decl_stmt|;
name|IndexResponse
name|response
init|=
name|indexResponseWriteResult
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|UpdateResponse
name|update
init|=
operator|new
name|UpdateResponse
argument_list|(
name|response
operator|.
name|getShardInfo
argument_list|()
argument_list|,
name|response
operator|.
name|getShardId
argument_list|()
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|,
name|response
operator|.
name|getId
argument_list|()
argument_list|,
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
decl_stmt|;
comment|// we fetch it from the index request so we don't generate the bytes twice, its already done in the index request
specifier|final
name|BytesReference
name|indexSourceBytes
init|=
name|indexRequest
operator|.
name|source
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getResponseResult
argument_list|()
operator|==
name|DocWriteResponse
operator|.
name|Result
operator|.
name|CREATED
condition|)
block|{
if|if
condition|(
operator|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|fetchSource
argument_list|()
operator|)
operator|||
operator|(
name|request
operator|.
name|fields
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|fields
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|sourceAndContent
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|indexSourceBytes
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|update
operator|.
name|setGetResult
argument_list|(
name|updateHelper
operator|.
name|extractGetResult
argument_list|(
name|request
argument_list|,
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
name|sourceAndContent
operator|.
name|v2
argument_list|()
argument_list|,
name|sourceAndContent
operator|.
name|v1
argument_list|()
argument_list|,
name|indexSourceBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|update
operator|.
name|setGetResult
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|getResponseResult
argument_list|()
operator|==
name|DocWriteResponse
operator|.
name|Result
operator|.
name|UPDATED
condition|)
block|{
name|update
operator|.
name|setGetResult
argument_list|(
name|updateHelper
operator|.
name|extractGetResult
argument_list|(
name|request
argument_list|,
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
name|result
operator|.
name|updatedSourceAsMap
argument_list|()
argument_list|,
name|result
operator|.
name|updateSourceContentType
argument_list|()
argument_list|,
name|indexSourceBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|update
operator|.
name|setForcedRefresh
argument_list|(
name|response
operator|.
name|forcedRefresh
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateReplicaRequest
name|updateReplicaRequest
init|=
operator|new
name|UpdateReplicaRequest
argument_list|(
name|indexRequest
argument_list|)
decl_stmt|;
name|updateReplicaRequest
operator|.
name|setParentTask
argument_list|(
name|request
operator|.
name|getParentTask
argument_list|()
argument_list|)
expr_stmt|;
name|updateReplicaRequest
operator|.
name|setShardId
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|updateReplicaRequest
operator|.
name|setRefreshPolicy
argument_list|(
name|request
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|WriteResult
argument_list|<>
argument_list|(
name|updateReplicaRequest
argument_list|,
name|update
argument_list|,
name|indexResponseWriteResult
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
case|case
name|DELETED
case|:
name|DeleteRequest
name|deleteRequest
init|=
name|result
operator|.
name|action
argument_list|()
decl_stmt|;
name|WriteResult
argument_list|<
name|DeleteRequest
argument_list|,
name|DeleteResponse
argument_list|>
name|deleteResponseWriteResult
init|=
name|TransportDeleteAction
operator|.
name|executeDeleteRequestOnPrimary
argument_list|(
name|deleteRequest
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|DeleteResponse
name|deleteResponse
init|=
name|deleteResponseWriteResult
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|UpdateResponse
name|deleteUpdate
init|=
operator|new
name|UpdateResponse
argument_list|(
name|deleteResponse
operator|.
name|getShardInfo
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getShardId
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getType
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getResult
argument_list|()
argument_list|)
decl_stmt|;
name|deleteUpdate
operator|.
name|setGetResult
argument_list|(
name|updateHelper
operator|.
name|extractGetResult
argument_list|(
name|request
argument_list|,
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|deleteResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|result
operator|.
name|updatedSourceAsMap
argument_list|()
argument_list|,
name|result
operator|.
name|updateSourceContentType
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|deleteUpdate
operator|.
name|setForcedRefresh
argument_list|(
name|deleteResponse
operator|.
name|forcedRefresh
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateReplicaRequest
name|deleteReplicaRequest
init|=
operator|new
name|UpdateReplicaRequest
argument_list|(
name|deleteRequest
argument_list|)
decl_stmt|;
name|deleteReplicaRequest
operator|.
name|setParentTask
argument_list|(
name|request
operator|.
name|getParentTask
argument_list|()
argument_list|)
expr_stmt|;
name|deleteReplicaRequest
operator|.
name|setShardId
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|deleteReplicaRequest
operator|.
name|setRefreshPolicy
argument_list|(
name|request
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|WriteResult
argument_list|<>
argument_list|(
name|deleteReplicaRequest
argument_list|,
name|deleteUpdate
argument_list|,
name|deleteResponseWriteResult
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
case|case
name|NOOP
case|:
name|UpdateResponse
name|noopUpdate
init|=
name|result
operator|.
name|action
argument_list|()
decl_stmt|;
name|indexShard
operator|.
name|noopUpdate
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|WriteResult
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|noopUpdate
argument_list|,
literal|null
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal result "
operator|+
name|result
operator|.
name|getResponseResult
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|onReplicaShard
specifier|protected
name|Translog
operator|.
name|Location
name|onReplicaShard
parameter_list|(
name|UpdateReplicaRequest
name|request
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|)
block|{
assert|assert
name|request
operator|.
name|getRequest
argument_list|()
operator|!=
literal|null
assert|;
specifier|final
name|Translog
operator|.
name|Location
name|location
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getRequest
argument_list|()
operator|.
name|opType
argument_list|()
condition|)
block|{
case|case
name|INDEX
case|:
case|case
name|CREATE
case|:
name|location
operator|=
name|TransportIndexAction
operator|.
name|executeIndexRequestOnReplica
argument_list|(
operator|(
operator|(
name|IndexRequest
operator|)
name|request
operator|.
name|getRequest
argument_list|()
operator|)
argument_list|,
name|indexShard
argument_list|)
operator|.
name|getTranslogLocation
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|location
operator|=
name|TransportDeleteAction
operator|.
name|executeDeleteRequestOnReplica
argument_list|(
operator|(
operator|(
name|DeleteRequest
operator|)
name|request
operator|.
name|getRequest
argument_list|()
operator|)
argument_list|,
name|indexShard
argument_list|)
operator|.
name|getTranslogLocation
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected opType ["
operator|+
name|request
operator|.
name|getRequest
argument_list|()
operator|.
name|opType
argument_list|()
operator|.
name|getLowercase
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|location
return|;
block|}
block|}
end_class

end_unit

