begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.update
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocumentRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|single
operator|.
name|instance
operator|.
name|InstanceShardOperationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
operator|.
name|addValidationError
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|UpdateRequest
specifier|public
class|class
name|UpdateRequest
extends|extends
name|InstanceShardOperationRequest
argument_list|<
name|UpdateRequest
argument_list|>
implements|implements
name|DocumentRequest
argument_list|<
name|UpdateRequest
argument_list|>
implements|,
name|WriteRequest
argument_list|<
name|UpdateRequest
argument_list|>
block|{
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
annotation|@
name|Nullable
DECL|field|routing
specifier|private
name|String
name|routing
decl_stmt|;
annotation|@
name|Nullable
DECL|field|parent
specifier|private
name|String
name|parent
decl_stmt|;
annotation|@
name|Nullable
DECL|field|script
name|Script
name|script
decl_stmt|;
DECL|field|fields
specifier|private
name|String
index|[]
name|fields
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
name|Versions
operator|.
name|MATCH_ANY
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|field|retryOnConflict
specifier|private
name|int
name|retryOnConflict
init|=
literal|0
decl_stmt|;
DECL|field|refreshPolicy
specifier|private
name|RefreshPolicy
name|refreshPolicy
init|=
name|RefreshPolicy
operator|.
name|NONE
decl_stmt|;
DECL|field|waitForActiveShards
specifier|private
name|ActiveShardCount
name|waitForActiveShards
init|=
name|ActiveShardCount
operator|.
name|DEFAULT
decl_stmt|;
DECL|field|upsertRequest
specifier|private
name|IndexRequest
name|upsertRequest
decl_stmt|;
DECL|field|scriptedUpsert
specifier|private
name|boolean
name|scriptedUpsert
init|=
literal|false
decl_stmt|;
DECL|field|docAsUpsert
specifier|private
name|boolean
name|docAsUpsert
init|=
literal|false
decl_stmt|;
DECL|field|detectNoop
specifier|private
name|boolean
name|detectNoop
init|=
literal|true
decl_stmt|;
annotation|@
name|Nullable
DECL|field|doc
specifier|private
name|IndexRequest
name|doc
decl_stmt|;
DECL|method|UpdateRequest
specifier|public
name|UpdateRequest
parameter_list|()
block|{      }
DECL|method|UpdateRequest
specifier|public
name|UpdateRequest
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
name|super
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"type is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"id is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|versionType
operator|==
name|VersionType
operator|.
name|INTERNAL
operator|||
name|versionType
operator|==
name|VersionType
operator|.
name|FORCE
operator|)
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"version type ["
operator|+
name|versionType
operator|+
literal|"] is not supported by the update API"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|version
operator|!=
name|Versions
operator|.
name|MATCH_ANY
operator|&&
name|retryOnConflict
operator|>
literal|0
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"can't provide both retry_on_conflict and a specific version"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|versionType
operator|.
name|validateVersionForWrites
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"illegal version value ["
operator|+
name|version
operator|+
literal|"] for version type ["
operator|+
name|versionType
operator|.
name|name
argument_list|()
operator|+
literal|"]"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|script
operator|==
literal|null
operator|&&
name|doc
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"script or doc is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|script
operator|!=
literal|null
operator|&&
name|doc
operator|!=
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"can't provide both script and doc"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|==
literal|null
operator|&&
name|docAsUpsert
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"doc must be specified if doc_as_upsert is enabled"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
return|return
name|validationException
return|;
block|}
comment|/**      * The type of the indexed document.      */
annotation|@
name|Override
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Sets the type of the indexed document.      */
DECL|method|type
specifier|public
name|UpdateRequest
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The id of the indexed document.      */
annotation|@
name|Override
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * Sets the id of the indexed document.      */
DECL|method|id
specifier|public
name|UpdateRequest
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Controls the shard routing of the request. Using this value to hash the shard      * and not the id.      */
annotation|@
name|Override
DECL|method|routing
specifier|public
name|UpdateRequest
name|routing
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
if|if
condition|(
name|routing
operator|!=
literal|null
operator|&&
name|routing
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|routing
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Controls the shard routing of the request. Using this value to hash the shard      * and not the id.      */
annotation|@
name|Override
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|routing
return|;
block|}
comment|/**      * The parent id is used for the upsert request.      */
DECL|method|parent
specifier|public
name|UpdateRequest
name|parent
parameter_list|(
name|String
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|parent
specifier|public
name|String
name|parent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|getShardId
specifier|public
name|ShardId
name|getShardId
parameter_list|()
block|{
return|return
name|this
operator|.
name|shardId
return|;
block|}
DECL|method|script
specifier|public
name|Script
name|script
parameter_list|()
block|{
return|return
name|this
operator|.
name|script
return|;
block|}
comment|/**      * The script to execute. Note, make sure not to send different script each times and instead      * use script params if possible with the same (automatically compiled) script.      */
DECL|method|script
specifier|public
name|UpdateRequest
name|script
parameter_list|(
name|Script
name|script
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @deprecated Use {@link #script()} instead      */
annotation|@
name|Deprecated
DECL|method|scriptString
specifier|public
name|String
name|scriptString
parameter_list|()
block|{
return|return
name|this
operator|.
name|script
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|script
operator|.
name|getScript
argument_list|()
return|;
block|}
comment|/**      * @deprecated Use {@link #script()} instead      */
annotation|@
name|Deprecated
DECL|method|scriptType
specifier|public
name|ScriptService
operator|.
name|ScriptType
name|scriptType
parameter_list|()
block|{
return|return
name|this
operator|.
name|script
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|script
operator|.
name|getType
argument_list|()
return|;
block|}
comment|/**      * @deprecated Use {@link #script()} instead      */
annotation|@
name|Deprecated
DECL|method|scriptParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
parameter_list|()
block|{
return|return
name|this
operator|.
name|script
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|script
operator|.
name|getParams
argument_list|()
return|;
block|}
comment|/**      * The script to execute. Note, make sure not to send different script each      * times and instead use script params if possible with the same      * (automatically compiled) script.      *      * @deprecated Use {@link #script(Script)} instead      */
annotation|@
name|Deprecated
DECL|method|script
specifier|public
name|UpdateRequest
name|script
parameter_list|(
name|String
name|script
parameter_list|,
name|ScriptService
operator|.
name|ScriptType
name|scriptType
parameter_list|)
block|{
name|updateOrCreateScript
argument_list|(
name|script
argument_list|,
name|scriptType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The script to execute. Note, make sure not to send different script each      * times and instead use script params if possible with the same      * (automatically compiled) script.      *      * @deprecated Use {@link #script(Script)} instead      */
annotation|@
name|Deprecated
DECL|method|script
specifier|public
name|UpdateRequest
name|script
parameter_list|(
name|String
name|script
parameter_list|)
block|{
name|updateOrCreateScript
argument_list|(
name|script
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The language of the script to execute.      *      * @deprecated Use {@link #script(Script)} instead      */
annotation|@
name|Deprecated
DECL|method|scriptLang
specifier|public
name|UpdateRequest
name|scriptLang
parameter_list|(
name|String
name|scriptLang
parameter_list|)
block|{
name|updateOrCreateScript
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|scriptLang
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @deprecated Use {@link #script()} instead      */
annotation|@
name|Deprecated
DECL|method|scriptLang
specifier|public
name|String
name|scriptLang
parameter_list|()
block|{
return|return
name|script
operator|==
literal|null
condition|?
literal|null
else|:
name|script
operator|.
name|getLang
argument_list|()
return|;
block|}
comment|/**      * Add a script parameter.      *      * @deprecated Use {@link #script(Script)} instead      */
annotation|@
name|Deprecated
DECL|method|addScriptParam
specifier|public
name|UpdateRequest
name|addScriptParam
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Script
name|script
init|=
name|script
argument_list|()
decl_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|scriptParams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|updateOrCreateScript
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|scriptParams
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
init|=
name|script
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|scriptParams
operator|==
literal|null
condition|)
block|{
name|scriptParams
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|scriptParams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|updateOrCreateScript
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|scriptParams
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scriptParams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * Sets the script parameters to use with the script.      *      * @deprecated Use {@link #script(Script)} instead      */
annotation|@
name|Deprecated
DECL|method|scriptParams
specifier|public
name|UpdateRequest
name|scriptParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
parameter_list|)
block|{
name|updateOrCreateScript
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|scriptParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|updateOrCreateScript
specifier|private
name|void
name|updateOrCreateScript
parameter_list|(
name|String
name|scriptContent
parameter_list|,
name|ScriptType
name|type
parameter_list|,
name|String
name|lang
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|Script
name|script
init|=
name|script
argument_list|()
decl_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
name|script
operator|=
operator|new
name|Script
argument_list|(
name|scriptContent
operator|==
literal|null
condition|?
literal|""
else|:
name|scriptContent
argument_list|,
name|type
operator|==
literal|null
condition|?
name|ScriptType
operator|.
name|INLINE
else|:
name|type
argument_list|,
name|lang
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|newScriptContent
init|=
name|scriptContent
operator|==
literal|null
condition|?
name|script
operator|.
name|getScript
argument_list|()
else|:
name|scriptContent
decl_stmt|;
name|ScriptType
name|newScriptType
init|=
name|type
operator|==
literal|null
condition|?
name|script
operator|.
name|getType
argument_list|()
else|:
name|type
decl_stmt|;
name|String
name|newScriptLang
init|=
name|lang
operator|==
literal|null
condition|?
name|script
operator|.
name|getLang
argument_list|()
else|:
name|lang
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newScriptParams
init|=
name|params
operator|==
literal|null
condition|?
name|script
operator|.
name|getParams
argument_list|()
else|:
name|params
decl_stmt|;
name|script
operator|=
operator|new
name|Script
argument_list|(
name|newScriptContent
argument_list|,
name|newScriptType
argument_list|,
name|newScriptLang
argument_list|,
name|newScriptParams
argument_list|)
expr_stmt|;
block|}
name|script
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
comment|/**      * The script to execute. Note, make sure not to send different script each      * times and instead use script params if possible with the same      * (automatically compiled) script.      *      * @deprecated Use {@link #script(Script)} instead      */
annotation|@
name|Deprecated
DECL|method|script
specifier|public
name|UpdateRequest
name|script
parameter_list|(
name|String
name|script
parameter_list|,
name|ScriptService
operator|.
name|ScriptType
name|scriptType
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
operator|new
name|Script
argument_list|(
name|script
argument_list|,
name|scriptType
argument_list|,
literal|null
argument_list|,
name|scriptParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The script to execute. Note, make sure not to send different script each      * times and instead use script params if possible with the same      * (automatically compiled) script.      *      * @param script      *            The script to execute      * @param scriptLang      *            The script language      * @param scriptType      *            The script type      * @param scriptParams      *            The script parameters      *      * @deprecated Use {@link #script(Script)} instead      */
annotation|@
name|Deprecated
DECL|method|script
specifier|public
name|UpdateRequest
name|script
parameter_list|(
name|String
name|script
parameter_list|,
annotation|@
name|Nullable
name|String
name|scriptLang
parameter_list|,
name|ScriptService
operator|.
name|ScriptType
name|scriptType
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
operator|new
name|Script
argument_list|(
name|script
argument_list|,
name|scriptType
argument_list|,
name|scriptLang
argument_list|,
name|scriptParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Explicitly specify the fields that will be returned. By default, nothing is returned.      */
DECL|method|fields
specifier|public
name|UpdateRequest
name|fields
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Get the fields to be returned.      */
DECL|method|fields
specifier|public
name|String
index|[]
name|fields
parameter_list|()
block|{
return|return
name|this
operator|.
name|fields
return|;
block|}
comment|/**      * Sets the number of retries of a version conflict occurs because the document was updated between      * getting it and updating it. Defaults to 0.      */
DECL|method|retryOnConflict
specifier|public
name|UpdateRequest
name|retryOnConflict
parameter_list|(
name|int
name|retryOnConflict
parameter_list|)
block|{
name|this
operator|.
name|retryOnConflict
operator|=
name|retryOnConflict
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|retryOnConflict
specifier|public
name|int
name|retryOnConflict
parameter_list|()
block|{
return|return
name|this
operator|.
name|retryOnConflict
return|;
block|}
comment|/**      * Sets the version, which will cause the index operation to only be performed if a matching      * version exists and no changes happened on the doc since then.      */
DECL|method|version
specifier|public
name|UpdateRequest
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
comment|/**      * Sets the versioning type. Defaults to {@link VersionType#INTERNAL}.      */
DECL|method|versionType
specifier|public
name|UpdateRequest
name|versionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|versionType
return|;
block|}
annotation|@
name|Override
DECL|method|setRefreshPolicy
specifier|public
name|UpdateRequest
name|setRefreshPolicy
parameter_list|(
name|RefreshPolicy
name|refreshPolicy
parameter_list|)
block|{
name|this
operator|.
name|refreshPolicy
operator|=
name|refreshPolicy
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getRefreshPolicy
specifier|public
name|RefreshPolicy
name|getRefreshPolicy
parameter_list|()
block|{
return|return
name|refreshPolicy
return|;
block|}
DECL|method|waitForActiveShards
specifier|public
name|ActiveShardCount
name|waitForActiveShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|waitForActiveShards
return|;
block|}
comment|/**      * Sets the number of shard copies that must be active before proceeding with the write.      * See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.      */
DECL|method|waitForActiveShards
specifier|public
name|UpdateRequest
name|waitForActiveShards
parameter_list|(
name|ActiveShardCount
name|waitForActiveShards
parameter_list|)
block|{
name|this
operator|.
name|waitForActiveShards
operator|=
name|waitForActiveShards
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|IndexRequest
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|XContentBuilder
name|source
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|Map
name|source
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|Map
name|source
parameter_list|,
name|XContentType
name|contentType
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified, the doc provided      * is a field and value pairs.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|Object
modifier|...
name|source
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|doc
specifier|public
name|IndexRequest
name|doc
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
return|;
block|}
DECL|method|safeDoc
specifier|private
name|IndexRequest
name|safeDoc
parameter_list|()
block|{
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
operator|new
name|IndexRequest
argument_list|()
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
comment|/**      * Sets the index request to be used if the document does not exists. Otherwise, a {@link org.elasticsearch.index.engine.DocumentMissingException}      * is thrown.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|IndexRequest
name|upsertRequest
parameter_list|)
block|{
name|this
operator|.
name|upsertRequest
operator|=
name|upsertRequest
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|XContentBuilder
name|source
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|Map
name|source
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|Map
name|source
parameter_list|,
name|XContentType
name|contentType
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists. The doc      * includes field and value pairs.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|Object
modifier|...
name|source
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|upsertRequest
specifier|public
name|IndexRequest
name|upsertRequest
parameter_list|()
block|{
return|return
name|this
operator|.
name|upsertRequest
return|;
block|}
DECL|method|safeUpsertRequest
specifier|private
name|IndexRequest
name|safeUpsertRequest
parameter_list|()
block|{
if|if
condition|(
name|upsertRequest
operator|==
literal|null
condition|)
block|{
name|upsertRequest
operator|=
operator|new
name|IndexRequest
argument_list|()
expr_stmt|;
block|}
return|return
name|upsertRequest
return|;
block|}
DECL|method|source
specifier|public
name|UpdateRequest
name|source
parameter_list|(
name|XContentBuilder
name|source
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|source
argument_list|(
name|source
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|source
specifier|public
name|UpdateRequest
name|source
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|source
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|source
specifier|public
name|UpdateRequest
name|source
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|source
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Should this update attempt to detect if it is a noop? Defaults to true.      * @return this for chaining      */
DECL|method|detectNoop
specifier|public
name|UpdateRequest
name|detectNoop
parameter_list|(
name|boolean
name|detectNoop
parameter_list|)
block|{
name|this
operator|.
name|detectNoop
operator|=
name|detectNoop
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should this update attempt to detect if it is a noop? Defaults to true.      */
DECL|method|detectNoop
specifier|public
name|boolean
name|detectNoop
parameter_list|()
block|{
return|return
name|detectNoop
return|;
block|}
DECL|method|source
specifier|public
name|UpdateRequest
name|source
parameter_list|(
name|BytesReference
name|source
parameter_list|)
throws|throws
name|Exception
block|{
name|Script
name|script
init|=
literal|null
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
init|)
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"script"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|script
operator|=
name|Script
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"scripted_upsert"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|scriptedUpsert
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"upsert"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|XContentType
name|xContentType
init|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|xContentType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"doc"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|XContentType
name|xContentType
init|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|XContentBuilder
name|docBuilder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|xContentType
argument_list|)
decl_stmt|;
name|docBuilder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|docBuilder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"doc_as_upsert"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|docAsUpsert
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"detect_noop"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|detectNoop
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fields"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|fields
operator|=
operator|(
name|List
operator|)
name|parser
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
name|fields
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|fields
argument_list|(
name|fields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|script
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|docAsUpsert
specifier|public
name|boolean
name|docAsUpsert
parameter_list|()
block|{
return|return
name|this
operator|.
name|docAsUpsert
return|;
block|}
DECL|method|docAsUpsert
specifier|public
name|UpdateRequest
name|docAsUpsert
parameter_list|(
name|boolean
name|shouldUpsertDoc
parameter_list|)
block|{
name|this
operator|.
name|docAsUpsert
operator|=
name|shouldUpsertDoc
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|scriptedUpsert
specifier|public
name|boolean
name|scriptedUpsert
parameter_list|()
block|{
return|return
name|this
operator|.
name|scriptedUpsert
return|;
block|}
DECL|method|scriptedUpsert
specifier|public
name|UpdateRequest
name|scriptedUpsert
parameter_list|(
name|boolean
name|scriptedUpsert
parameter_list|)
block|{
name|this
operator|.
name|scriptedUpsert
operator|=
name|scriptedUpsert
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|waitForActiveShards
operator|=
name|ActiveShardCount
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|routing
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|parent
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|script
operator|=
operator|new
name|Script
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|retryOnConflict
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|refreshPolicy
operator|=
name|RefreshPolicy
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|doc
operator|=
operator|new
name|IndexRequest
argument_list|()
expr_stmt|;
name|doc
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>=
literal|0
condition|)
block|{
name|fields
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|upsertRequest
operator|=
operator|new
name|IndexRequest
argument_list|()
expr_stmt|;
name|upsertRequest
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|docAsUpsert
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|versionType
operator|=
name|VersionType
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|detectNoop
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|scriptedUpsert
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|waitForActiveShards
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|boolean
name|hasScript
init|=
name|script
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasScript
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasScript
condition|)
block|{
name|script
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|retryOnConflict
argument_list|)
expr_stmt|;
name|refreshPolicy
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure the basics are set
name|doc
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|doc
operator|.
name|type
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|doc
operator|.
name|id
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|doc
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|upsertRequest
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure the basics are set
name|upsertRequest
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|upsertRequest
operator|.
name|type
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|upsertRequest
operator|.
name|id
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|upsertRequest
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|docAsUpsert
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|versionType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|detectNoop
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|scriptedUpsert
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

