begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.update
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocumentRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicatedWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/** Replica request for update operation holds translated (index/delete) requests */
end_comment

begin_class
DECL|class|UpdateReplicaRequest
specifier|public
class|class
name|UpdateReplicaRequest
extends|extends
name|DocumentRequest
argument_list|<
name|UpdateReplicaRequest
argument_list|>
block|{
DECL|field|request
specifier|private
name|DocumentRequest
argument_list|<
name|?
argument_list|>
name|request
decl_stmt|;
DECL|method|UpdateReplicaRequest
specifier|public
name|UpdateReplicaRequest
parameter_list|()
block|{     }
DECL|method|UpdateReplicaRequest
specifier|public
name|UpdateReplicaRequest
parameter_list|(
name|DocumentRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|)
block|{
assert|assert
operator|!
operator|(
name|request
operator|instanceof
name|UpdateReplicaRequest
operator|)
operator|:
literal|"underlying request must not be a update replica request"
assert|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|request
operator|.
name|index
argument_list|()
expr_stmt|;
name|setRefreshPolicy
argument_list|(
name|request
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|setShardId
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|setParentTask
argument_list|(
name|request
operator|.
name|getParentTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getRequest
specifier|public
name|DocumentRequest
argument_list|<
name|?
argument_list|>
name|getRequest
parameter_list|()
block|{
return|return
name|request
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|request
operator|=
name|DocumentRequest
operator|.
name|readDocumentRequest
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|DocumentRequest
operator|.
name|writeDocumentRequest
argument_list|(
name|out
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|request
operator|.
name|type
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|request
operator|.
name|id
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|routing
specifier|public
name|UpdateReplicaRequest
name|routing
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"setting routing is not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|request
operator|.
name|routing
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|parent
specifier|public
name|String
name|parent
parameter_list|()
block|{
return|return
name|request
operator|.
name|parent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|request
operator|.
name|version
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|version
specifier|public
name|UpdateReplicaRequest
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"setting version is not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|request
operator|.
name|versionType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|versionType
specifier|public
name|UpdateReplicaRequest
name|versionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"setting version type is not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|OpType
name|opType
parameter_list|()
block|{
return|return
name|request
operator|.
name|opType
argument_list|()
return|;
block|}
block|}
end_class

end_unit

