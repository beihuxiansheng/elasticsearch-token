begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.percolate
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastShardResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|PercolateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|SiblingPipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|PercolateShardResponse
specifier|public
class|class
name|PercolateShardResponse
extends|extends
name|BroadcastShardResponse
block|{
DECL|field|topDocs
specifier|private
name|TopDocs
name|topDocs
decl_stmt|;
DECL|field|ids
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|ids
decl_stmt|;
DECL|field|hls
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
argument_list|>
name|hls
decl_stmt|;
DECL|field|onlyCount
specifier|private
name|boolean
name|onlyCount
decl_stmt|;
DECL|field|requestedSize
specifier|private
name|int
name|requestedSize
decl_stmt|;
DECL|field|aggregations
specifier|private
name|InternalAggregations
name|aggregations
decl_stmt|;
DECL|field|pipelineAggregators
specifier|private
name|List
argument_list|<
name|SiblingPipelineAggregator
argument_list|>
name|pipelineAggregators
decl_stmt|;
DECL|method|PercolateShardResponse
name|PercolateShardResponse
parameter_list|()
block|{     }
DECL|method|PercolateShardResponse
specifier|public
name|PercolateShardResponse
parameter_list|(
name|TopDocs
name|topDocs
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|ids
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
argument_list|>
name|hls
parameter_list|,
name|PercolateContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|topDocs
operator|=
name|topDocs
expr_stmt|;
name|this
operator|.
name|ids
operator|=
name|ids
expr_stmt|;
name|this
operator|.
name|hls
operator|=
name|hls
expr_stmt|;
name|this
operator|.
name|onlyCount
operator|=
name|context
operator|.
name|isOnlyCount
argument_list|()
expr_stmt|;
name|this
operator|.
name|requestedSize
operator|=
name|context
operator|.
name|size
argument_list|()
expr_stmt|;
name|QuerySearchResult
name|result
init|=
name|context
operator|.
name|queryResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|aggregations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|aggregations
operator|=
operator|(
name|InternalAggregations
operator|)
name|result
operator|.
name|aggregations
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|pipelineAggregators
operator|=
name|result
operator|.
name|pipelineAggregators
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|topDocs
specifier|public
name|TopDocs
name|topDocs
parameter_list|()
block|{
return|return
name|topDocs
return|;
block|}
comment|/**      * Returns per match the percolator query id. The key is the Lucene docId of the matching percolator query.      */
DECL|method|ids
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|ids
parameter_list|()
block|{
return|return
name|ids
return|;
block|}
DECL|method|requestedSize
specifier|public
name|int
name|requestedSize
parameter_list|()
block|{
return|return
name|requestedSize
return|;
block|}
comment|/**      * Returns per match the highlight snippets. The key is the Lucene docId of the matching percolator query.      */
DECL|method|hls
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
argument_list|>
name|hls
parameter_list|()
block|{
return|return
name|hls
return|;
block|}
DECL|method|aggregations
specifier|public
name|InternalAggregations
name|aggregations
parameter_list|()
block|{
return|return
name|aggregations
return|;
block|}
DECL|method|pipelineAggregators
specifier|public
name|List
argument_list|<
name|SiblingPipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|()
block|{
return|return
name|pipelineAggregators
return|;
block|}
DECL|method|onlyCount
specifier|public
name|boolean
name|onlyCount
parameter_list|()
block|{
return|return
name|onlyCount
return|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|topDocs
operator|.
name|totalHits
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|onlyCount
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|requestedSize
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|topDocs
operator|=
name|Lucene
operator|.
name|readTopDocs
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|ids
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ids
operator|.
name|put
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|hls
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|int
name|docId
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|int
name|mSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|mSize
condition|;
name|j
operator|++
control|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|HighlightField
operator|.
name|readHighlightField
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hls
operator|.
name|put
argument_list|(
name|docId
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
name|aggregations
operator|=
name|InternalAggregations
operator|.
name|readOptionalAggregations
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|pipelineAggregatorsSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SiblingPipelineAggregator
argument_list|>
name|pipelineAggregators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pipelineAggregatorsSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pipelineAggregatorsSize
condition|;
name|i
operator|++
control|)
block|{
name|BytesReference
name|type
init|=
name|in
operator|.
name|readBytesReference
argument_list|()
decl_stmt|;
name|PipelineAggregator
name|pipelineAggregator
init|=
name|PipelineAggregatorStreams
operator|.
name|stream
argument_list|(
name|type
argument_list|)
operator|.
name|readResult
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|pipelineAggregators
operator|.
name|add
argument_list|(
operator|(
name|SiblingPipelineAggregator
operator|)
name|pipelineAggregator
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|pipelineAggregators
operator|=
name|pipelineAggregators
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|onlyCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|requestedSize
argument_list|)
expr_stmt|;
name|Lucene
operator|.
name|writeTopDocs
argument_list|(
name|out
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|ids
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|ids
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|hls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
argument_list|>
name|entry1
range|:
name|hls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|entry1
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|entry1
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|entry2
range|:
name|entry1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry2
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry2
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeOptionalStreamable
argument_list|(
name|aggregations
argument_list|)
expr_stmt|;
if|if
condition|(
name|pipelineAggregators
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|pipelineAggregators
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PipelineAggregator
name|pipelineAggregator
range|:
name|pipelineAggregators
control|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|pipelineAggregator
operator|.
name|type
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
expr_stmt|;
name|pipelineAggregator
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

