begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.fieldstats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|IndexConstraint
specifier|public
class|class
name|IndexConstraint
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|property
specifier|private
specifier|final
name|Property
name|property
decl_stmt|;
DECL|field|comparison
specifier|private
specifier|final
name|Comparison
name|comparison
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|field|optionalFormat
specifier|private
specifier|final
name|String
name|optionalFormat
decl_stmt|;
DECL|method|IndexConstraint
name|IndexConstraint
parameter_list|(
name|StreamInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|field
operator|=
name|input
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|Property
operator|.
name|read
argument_list|(
name|input
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|comparison
operator|=
name|Comparison
operator|.
name|read
argument_list|(
name|input
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|input
operator|.
name|readString
argument_list|()
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_0_1
argument_list|)
condition|)
block|{
name|this
operator|.
name|optionalFormat
operator|=
name|input
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|optionalFormat
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|IndexConstraint
specifier|public
name|IndexConstraint
parameter_list|(
name|String
name|field
parameter_list|,
name|Property
name|property
parameter_list|,
name|Comparison
name|comparison
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|field
argument_list|,
name|property
argument_list|,
name|comparison
argument_list|,
name|value
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|IndexConstraint
specifier|public
name|IndexConstraint
parameter_list|(
name|String
name|field
parameter_list|,
name|Property
name|property
parameter_list|,
name|Comparison
name|comparison
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|optionalFormat
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|this
operator|.
name|comparison
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|comparison
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|optionalFormat
operator|=
name|optionalFormat
expr_stmt|;
block|}
comment|/**      * @return On what field the constraint is going to be applied on      */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
comment|/**      * @return How to compare the specified value against the field property (lt, lte, gt and gte)      */
DECL|method|getComparison
specifier|public
name|Comparison
name|getComparison
parameter_list|()
block|{
return|return
name|comparison
return|;
block|}
comment|/**      * @return On what property of a field the contraint is going to be applied on (min or max value)      */
DECL|method|getProperty
specifier|public
name|Property
name|getProperty
parameter_list|()
block|{
return|return
name|property
return|;
block|}
comment|/**      * @return The value to compare against      */
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * @return An optional format, that specifies how the value string is converted in the native value of the field.      *         Not all field types support this and right now only date field supports this option.      */
DECL|method|getOptionalFormat
specifier|public
name|String
name|getOptionalFormat
parameter_list|()
block|{
return|return
name|optionalFormat
return|;
block|}
DECL|enum|Property
specifier|public
enum|enum
name|Property
block|{
DECL|enum constant|MIN
name|MIN
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
DECL|enum constant|MAX
name|MAX
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|Property
name|Property
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getId
specifier|public
name|byte
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|read
specifier|public
specifier|static
name|Property
name|read
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|0
case|:
return|return
name|MIN
return|;
case|case
literal|1
case|:
return|return
name|MAX
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown property ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parse
specifier|public
specifier|static
name|Property
name|parse
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|value
operator|=
name|value
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|value
condition|)
block|{
case|case
literal|"min_value"
case|:
return|return
name|MIN
return|;
case|case
literal|"max_value"
case|:
return|return
name|MAX
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown property ["
operator|+
name|value
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|enum|Comparison
specifier|public
enum|enum
name|Comparison
block|{
DECL|enum constant|LT
name|LT
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
DECL|enum constant|LTE
name|LTE
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
DECL|enum constant|GT
name|GT
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
DECL|enum constant|GTE
name|GTE
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|Comparison
name|Comparison
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getId
specifier|public
name|byte
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|read
specifier|public
specifier|static
name|Comparison
name|read
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|0
case|:
return|return
name|LT
return|;
case|case
literal|1
case|:
return|return
name|LTE
return|;
case|case
literal|2
case|:
return|return
name|GT
return|;
case|case
literal|3
case|:
return|return
name|GTE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown comparison ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parse
specifier|public
specifier|static
name|Comparison
name|parse
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|value
operator|=
name|value
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|value
condition|)
block|{
case|case
literal|"lt"
case|:
return|return
name|LT
return|;
case|case
literal|"lte"
case|:
return|return
name|LTE
return|;
case|case
literal|"gt"
case|:
return|return
name|GT
return|;
case|case
literal|"gte"
case|:
return|return
name|GTE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown comparison ["
operator|+
name|value
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

