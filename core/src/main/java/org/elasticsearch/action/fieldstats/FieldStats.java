begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.fieldstats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|InetAddressPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|FormatDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|InetAddresses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_class
DECL|class|FieldStats
specifier|public
specifier|abstract
class|class
name|FieldStats
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|type
specifier|private
specifier|final
name|byte
name|type
decl_stmt|;
DECL|field|maxDoc
specifier|private
name|long
name|maxDoc
decl_stmt|;
DECL|field|docCount
specifier|private
name|long
name|docCount
decl_stmt|;
DECL|field|sumDocFreq
specifier|private
name|long
name|sumDocFreq
decl_stmt|;
DECL|field|sumTotalTermFreq
specifier|private
name|long
name|sumTotalTermFreq
decl_stmt|;
DECL|field|isSearchable
specifier|private
name|boolean
name|isSearchable
decl_stmt|;
DECL|field|isAggregatable
specifier|private
name|boolean
name|isAggregatable
decl_stmt|;
DECL|field|minValue
specifier|protected
name|T
name|minValue
decl_stmt|;
DECL|field|maxValue
specifier|protected
name|T
name|maxValue
decl_stmt|;
DECL|method|FieldStats
name|FieldStats
parameter_list|(
name|byte
name|type
parameter_list|,
name|long
name|maxDoc
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|maxDoc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FieldStats
name|FieldStats
parameter_list|(
name|byte
name|type
parameter_list|,
name|long
name|maxDoc
parameter_list|,
name|long
name|docCount
parameter_list|,
name|long
name|sumDocFreq
parameter_list|,
name|long
name|sumTotalTermFreq
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|,
name|T
name|minValue
parameter_list|,
name|T
name|maxValue
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|docCount
operator|=
name|docCount
expr_stmt|;
name|this
operator|.
name|sumDocFreq
operator|=
name|sumDocFreq
expr_stmt|;
name|this
operator|.
name|sumTotalTermFreq
operator|=
name|sumTotalTermFreq
expr_stmt|;
name|this
operator|.
name|isSearchable
operator|=
name|isSearchable
expr_stmt|;
name|this
operator|.
name|isAggregatable
operator|=
name|isAggregatable
expr_stmt|;
name|this
operator|.
name|minValue
operator|=
name|minValue
expr_stmt|;
name|this
operator|.
name|maxValue
operator|=
name|maxValue
expr_stmt|;
block|}
DECL|method|getType
name|byte
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|getDisplayType
specifier|public
name|String
name|getDisplayType
parameter_list|()
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|"integer"
return|;
case|case
literal|1
case|:
return|return
literal|"float"
return|;
case|case
literal|2
case|:
return|return
literal|"date"
return|;
case|case
literal|3
case|:
return|return
literal|"string"
return|;
case|case
literal|4
case|:
return|return
literal|"ip"
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type."
argument_list|)
throw|;
block|}
block|}
comment|/**      * @return the total number of documents.      *      * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account.      */
DECL|method|getMaxDoc
specifier|public
name|long
name|getMaxDoc
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
comment|/**      * @return the number of documents that have at least one term for this field,      * or -1 if this measurement isn't available.      *      * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account.      */
DECL|method|getDocCount
specifier|public
name|long
name|getDocCount
parameter_list|()
block|{
return|return
name|docCount
return|;
block|}
comment|/**      * @return The percentage of documents that have at least one value for this field.      *      * This is a derived statistic and is based on: 'doc_count / max_doc'      */
DECL|method|getDensity
specifier|public
name|int
name|getDensity
parameter_list|()
block|{
if|if
condition|(
name|docCount
operator|<
literal|0
operator|||
name|maxDoc
operator|<=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
call|(
name|int
call|)
argument_list|(
name|docCount
operator|*
literal|100
operator|/
name|maxDoc
argument_list|)
return|;
block|}
comment|/**      * @return the sum of each term's document frequency in this field, or -1 if this measurement isn't available.      * Document frequency is the number of documents containing a particular term.      *      * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account.      */
DECL|method|getSumDocFreq
specifier|public
name|long
name|getSumDocFreq
parameter_list|()
block|{
return|return
name|sumDocFreq
return|;
block|}
comment|/**      * @return the sum of the term frequencies of all terms in this field across all documents,      * or -1 if this measurement      * isn't available. Term frequency is the total number of occurrences of a term in a particular document and field.      *      * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account.      */
DECL|method|getSumTotalTermFreq
specifier|public
name|long
name|getSumTotalTermFreq
parameter_list|()
block|{
return|return
name|sumTotalTermFreq
return|;
block|}
comment|/**      * @return<code>true</code> if any of the instances of the field name is searchable.      */
DECL|method|isSearchable
specifier|public
name|boolean
name|isSearchable
parameter_list|()
block|{
return|return
name|isSearchable
return|;
block|}
comment|/**      * @return<code>true</code> if any of the instances of the field name is aggregatable.      */
DECL|method|isAggregatable
specifier|public
name|boolean
name|isAggregatable
parameter_list|()
block|{
return|return
name|isAggregatable
return|;
block|}
comment|/**      * @return the lowest value in the field.      *      * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account.      */
DECL|method|getMinValue
specifier|public
name|T
name|getMinValue
parameter_list|()
block|{
return|return
name|minValue
return|;
block|}
comment|/**      * @return the highest value in the field.      *      * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account.      */
DECL|method|getMaxValue
specifier|public
name|T
name|getMaxValue
parameter_list|()
block|{
return|return
name|maxValue
return|;
block|}
comment|/**      * @return the lowest value in the field represented as a string.      *      * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account.      */
DECL|method|getMinValueAsString
specifier|public
specifier|abstract
name|String
name|getMinValueAsString
parameter_list|()
function_decl|;
comment|/**      * @return the highest value in the field represented as a string.      *      * Note that, documents marked as deleted that haven't yet been merged way aren't taken into account.      */
DECL|method|getMaxValueAsString
specifier|public
specifier|abstract
name|String
name|getMaxValueAsString
parameter_list|()
function_decl|;
comment|/**      * @param value The string to be parsed      * @param optionalFormat A string describing how to parse the specified value. Whether this parameter is supported      *                       depends on the implementation. If optionalFormat is specified and the implementation      *                       doesn't support it an {@link UnsupportedOperationException} is thrown      */
DECL|method|valueOf
specifier|protected
specifier|abstract
name|T
name|valueOf
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|optionalFormat
parameter_list|)
function_decl|;
comment|/**      * Accumulates the provided stats into this stats instance.      */
DECL|method|accumulate
specifier|public
specifier|final
name|void
name|accumulate
parameter_list|(
name|FieldStats
name|other
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|+=
name|other
operator|.
name|maxDoc
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|docCount
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|docCount
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|docCount
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|docCount
operator|+=
name|other
operator|.
name|docCount
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|sumDocFreq
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|sumDocFreq
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|sumDocFreq
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|sumDocFreq
operator|+=
name|other
operator|.
name|sumDocFreq
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|sumTotalTermFreq
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|sumTotalTermFreq
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|sumTotalTermFreq
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|sumTotalTermFreq
operator|+=
name|other
operator|.
name|sumTotalTermFreq
expr_stmt|;
block|}
name|isSearchable
operator||=
name|other
operator|.
name|isSearchable
expr_stmt|;
name|isAggregatable
operator||=
name|other
operator|.
name|isAggregatable
expr_stmt|;
assert|assert
name|type
operator|==
name|other
operator|.
name|getType
argument_list|()
assert|;
name|updateMinMax
argument_list|(
operator|(
name|T
operator|)
name|other
operator|.
name|minValue
argument_list|,
operator|(
name|T
operator|)
name|other
operator|.
name|maxValue
argument_list|)
expr_stmt|;
block|}
DECL|method|updateMinMax
specifier|private
name|void
name|updateMinMax
parameter_list|(
name|T
name|min
parameter_list|,
name|T
name|max
parameter_list|)
block|{
if|if
condition|(
name|minValue
operator|==
literal|null
condition|)
block|{
name|minValue
operator|=
name|min
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|min
operator|!=
literal|null
operator|&&
name|compare
argument_list|(
name|minValue
argument_list|,
name|min
argument_list|)
operator|>
literal|0
condition|)
block|{
name|minValue
operator|=
name|min
expr_stmt|;
block|}
if|if
condition|(
name|maxValue
operator|==
literal|null
condition|)
block|{
name|maxValue
operator|=
name|max
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|max
operator|!=
literal|null
operator|&&
name|compare
argument_list|(
name|maxValue
argument_list|,
name|max
argument_list|)
operator|<
literal|0
condition|)
block|{
name|maxValue
operator|=
name|max
expr_stmt|;
block|}
block|}
DECL|method|compare
specifier|protected
specifier|abstract
name|int
name|compare
parameter_list|(
name|T
name|o1
parameter_list|,
name|T
name|o2
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|TYPE_FIELD
argument_list|,
name|getDisplayType
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MAX_DOC_FIELD
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|DOC_COUNT_FIELD
argument_list|,
name|docCount
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|DENSITY_FIELD
argument_list|,
name|getDensity
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SUM_DOC_FREQ_FIELD
argument_list|,
name|sumDocFreq
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SUM_TOTAL_TERM_FREQ_FIELD
argument_list|,
name|sumTotalTermFreq
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SEARCHABLE_FIELD
argument_list|,
name|isSearchable
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|AGGREGATABLE_FIELD
argument_list|,
name|isAggregatable
argument_list|)
expr_stmt|;
name|toInnerXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|toInnerXContent
specifier|protected
name|void
name|toInnerXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|MIN_VALUE_FIELD
argument_list|,
name|getMinValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MIN_VALUE_AS_STRING_FIELD
argument_list|,
name|getMinValueAsString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MAX_VALUE_FIELD
argument_list|,
name|getMaxValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MAX_VALUE_AS_STRING_FIELD
argument_list|,
name|getMaxValueAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
specifier|final
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|docCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|sumDocFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|sumTotalTermFreq
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isSearchable
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isAggregatable
argument_list|)
expr_stmt|;
name|boolean
name|hasMinMax
init|=
name|minValue
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|hasMinMax
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasMinMax
condition|)
block|{
name|writeMinMax
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeMinMax
specifier|protected
specifier|abstract
name|void
name|writeMinMax
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * @return<code>true</code> if this instance matches with the provided index constraint,      * otherwise<code>false</code> is returned      */
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|IndexConstraint
name|constraint
parameter_list|)
block|{
if|if
condition|(
name|minValue
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|cmp
decl_stmt|;
name|T
name|value
init|=
name|valueOf
argument_list|(
name|constraint
operator|.
name|getValue
argument_list|()
argument_list|,
name|constraint
operator|.
name|getOptionalFormat
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraint
operator|.
name|getProperty
argument_list|()
operator|==
name|IndexConstraint
operator|.
name|Property
operator|.
name|MIN
condition|)
block|{
name|cmp
operator|=
name|compare
argument_list|(
name|minValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|constraint
operator|.
name|getProperty
argument_list|()
operator|==
name|IndexConstraint
operator|.
name|Property
operator|.
name|MAX
condition|)
block|{
name|cmp
operator|=
name|compare
argument_list|(
name|maxValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported property ["
operator|+
name|constraint
operator|.
name|getProperty
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|constraint
operator|.
name|getComparison
argument_list|()
condition|)
block|{
case|case
name|GT
case|:
return|return
name|cmp
operator|>
literal|0
return|;
case|case
name|GTE
case|:
return|return
name|cmp
operator|>=
literal|0
return|;
case|case
name|LT
case|:
return|return
name|cmp
operator|<
literal|0
return|;
case|case
name|LTE
case|:
return|return
name|cmp
operator|<=
literal|0
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported comparison ["
operator|+
name|constraint
operator|.
name|getComparison
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|class|Long
specifier|public
specifier|static
class|class
name|Long
extends|extends
name|FieldStats
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
block|{
DECL|method|Long
specifier|public
name|Long
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|long
name|docCount
parameter_list|,
name|long
name|sumDocFreq
parameter_list|,
name|long
name|sumTotalTermFreq
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|,
name|long
name|minValue
parameter_list|,
name|long
name|maxValue
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
block|}
DECL|method|Long
specifier|public
name|Long
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|long
name|docCount
parameter_list|,
name|long
name|sumDocFreq
parameter_list|,
name|long
name|sumTotalTermFreq
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Long
specifier|public
name|Long
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|maxDoc
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|o1
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Long
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeMinMax
specifier|public
name|void
name|writeMinMax
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|minValue
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|maxValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|valueOf
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|valueOf
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|optionalFormat
parameter_list|)
block|{
return|return
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMinValueAsString
specifier|public
name|String
name|getMinValueAsString
parameter_list|()
block|{
return|return
name|minValue
operator|!=
literal|null
condition|?
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|toString
argument_list|(
name|minValue
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxValueAsString
specifier|public
name|String
name|getMaxValueAsString
parameter_list|()
block|{
return|return
name|maxValue
operator|!=
literal|null
condition|?
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|toString
argument_list|(
name|maxValue
argument_list|)
else|:
literal|null
return|;
block|}
block|}
DECL|class|Double
specifier|public
specifier|static
class|class
name|Double
extends|extends
name|FieldStats
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Double
argument_list|>
block|{
DECL|method|Double
specifier|public
name|Double
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|long
name|docCount
parameter_list|,
name|long
name|sumDocFreq
parameter_list|,
name|long
name|sumTotalTermFreq
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|,
name|double
name|minValue
parameter_list|,
name|double
name|maxValue
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
block|}
DECL|method|Double
specifier|public
name|Double
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|long
name|docCount
parameter_list|,
name|long
name|sumDocFreq
parameter_list|,
name|long
name|sumTotalTermFreq
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Double
specifier|public
name|Double
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|maxDoc
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Double
name|o1
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Double
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeMinMax
specifier|public
name|void
name|writeMinMax
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeDouble
argument_list|(
name|minValue
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
name|maxValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|valueOf
specifier|public
name|java
operator|.
name|lang
operator|.
name|Double
name|valueOf
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|optionalFormat
parameter_list|)
block|{
if|if
condition|(
name|optionalFormat
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"custom format isn't supported"
argument_list|)
throw|;
block|}
return|return
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMinValueAsString
specifier|public
name|String
name|getMinValueAsString
parameter_list|()
block|{
return|return
name|minValue
operator|!=
literal|null
condition|?
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|toString
argument_list|(
name|minValue
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxValueAsString
specifier|public
name|String
name|getMaxValueAsString
parameter_list|()
block|{
return|return
name|maxValue
operator|!=
literal|null
condition|?
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|toString
argument_list|(
name|maxValue
argument_list|)
else|:
literal|null
return|;
block|}
block|}
DECL|class|Date
specifier|public
specifier|static
class|class
name|Date
extends|extends
name|FieldStats
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Long
argument_list|>
block|{
DECL|field|formatter
specifier|private
name|FormatDateTimeFormatter
name|formatter
decl_stmt|;
DECL|method|Date
specifier|public
name|Date
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|long
name|docCount
parameter_list|,
name|long
name|sumDocFreq
parameter_list|,
name|long
name|sumTotalTermFreq
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|,
name|FormatDateTimeFormatter
name|formatter
parameter_list|,
name|long
name|minValue
parameter_list|,
name|long
name|maxValue
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
block|}
DECL|method|Date
specifier|public
name|Date
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|long
name|docCount
parameter_list|,
name|long
name|sumDocFreq
parameter_list|,
name|long
name|sumTotalTermFreq
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|,
name|FormatDateTimeFormatter
name|formatter
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
block|}
DECL|method|Date
specifier|public
name|Date
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|,
name|FormatDateTimeFormatter
name|formatter
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|maxDoc
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|o1
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Long
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeMinMax
specifier|public
name|void
name|writeMinMax
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|formatter
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|minValue
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|maxValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|valueOf
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|valueOf
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fmt
parameter_list|)
block|{
name|FormatDateTimeFormatter
name|f
init|=
name|formatter
decl_stmt|;
if|if
condition|(
name|fmt
operator|!=
literal|null
condition|)
block|{
name|f
operator|=
name|Joda
operator|.
name|forPattern
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
block|}
return|return
name|f
operator|.
name|parser
argument_list|()
operator|.
name|parseDateTime
argument_list|(
name|value
argument_list|)
operator|.
name|getMillis
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMinValueAsString
specifier|public
name|String
name|getMinValueAsString
parameter_list|()
block|{
return|return
name|minValue
operator|!=
literal|null
condition|?
name|formatter
operator|.
name|printer
argument_list|()
operator|.
name|print
argument_list|(
name|minValue
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxValueAsString
specifier|public
name|String
name|getMaxValueAsString
parameter_list|()
block|{
return|return
name|maxValue
operator|!=
literal|null
condition|?
name|formatter
operator|.
name|printer
argument_list|()
operator|.
name|print
argument_list|(
name|maxValue
argument_list|)
else|:
literal|null
return|;
block|}
block|}
DECL|class|Text
specifier|public
specifier|static
class|class
name|Text
extends|extends
name|FieldStats
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|method|Text
specifier|public
name|Text
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|long
name|docCount
parameter_list|,
name|long
name|sumDocFreq
parameter_list|,
name|long
name|sumTotalTermFreq
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|,
name|BytesRef
name|minValue
parameter_list|,
name|BytesRef
name|maxValue
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|,
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
block|}
DECL|method|Text
specifier|public
name|Text
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|,
name|maxDoc
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|BytesRef
name|o1
parameter_list|,
name|BytesRef
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeMinMax
specifier|public
name|void
name|writeMinMax
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBytesRef
argument_list|(
name|minValue
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytesRef
argument_list|(
name|maxValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|valueOf
specifier|protected
name|BytesRef
name|valueOf
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|optionalFormat
parameter_list|)
block|{
if|if
condition|(
name|optionalFormat
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"custom format isn't supported"
argument_list|)
throw|;
block|}
return|return
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMinValueAsString
specifier|public
name|String
name|getMinValueAsString
parameter_list|()
block|{
return|return
name|minValue
operator|!=
literal|null
condition|?
name|minValue
operator|.
name|utf8ToString
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxValueAsString
specifier|public
name|String
name|getMaxValueAsString
parameter_list|()
block|{
return|return
name|maxValue
operator|!=
literal|null
condition|?
name|maxValue
operator|.
name|utf8ToString
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toInnerXContent
specifier|protected
name|void
name|toInnerXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|MIN_VALUE_FIELD
argument_list|,
name|getMinValueAsString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|MAX_VALUE_FIELD
argument_list|,
name|getMaxValueAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Ip
specifier|public
specifier|static
class|class
name|Ip
extends|extends
name|FieldStats
argument_list|<
name|InetAddress
argument_list|>
block|{
DECL|method|Ip
specifier|public
name|Ip
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|long
name|docCount
parameter_list|,
name|long
name|sumDocFreq
parameter_list|,
name|long
name|sumTotalTermFreq
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|,
name|InetAddress
name|minValue
parameter_list|,
name|InetAddress
name|maxValue
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|,
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
block|}
DECL|method|Ip
specifier|public
name|Ip
parameter_list|(
name|long
name|maxDoc
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|,
name|maxDoc
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|InetAddress
name|o1
parameter_list|,
name|InetAddress
name|o2
parameter_list|)
block|{
name|byte
index|[]
name|b1
init|=
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b2
init|=
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|StringHelper
operator|.
name|compare
argument_list|(
name|b1
operator|.
name|length
argument_list|,
name|b1
argument_list|,
literal|0
argument_list|,
name|b2
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeMinMax
specifier|public
name|void
name|writeMinMax
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b1
init|=
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|minValue
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b2
init|=
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|maxValue
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|b1
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|b2
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|b2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|valueOf
specifier|public
name|InetAddress
name|valueOf
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|fmt
parameter_list|)
block|{
return|return
name|InetAddresses
operator|.
name|forString
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMinValueAsString
specifier|public
name|String
name|getMinValueAsString
parameter_list|()
block|{
return|return
name|minValue
operator|!=
literal|null
condition|?
name|NetworkAddress
operator|.
name|format
argument_list|(
name|minValue
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxValueAsString
specifier|public
name|String
name|getMaxValueAsString
parameter_list|()
block|{
return|return
name|maxValue
operator|!=
literal|null
condition|?
name|NetworkAddress
operator|.
name|format
argument_list|(
name|maxValue
argument_list|)
else|:
literal|null
return|;
block|}
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|FieldStats
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|type
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|long
name|maxDoc
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|docCount
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|sumDocFreq
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|sumTotalTermFreq
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|boolean
name|isSearchable
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
name|boolean
name|isAggregatable
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
name|boolean
name|hasMinMax
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|hasMinMax
condition|)
block|{
return|return
operator|new
name|Long
argument_list|(
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|Long
argument_list|(
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|)
return|;
case|case
literal|1
case|:
if|if
condition|(
name|hasMinMax
condition|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|in
operator|.
name|readDouble
argument_list|()
argument_list|,
name|in
operator|.
name|readDouble
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|Double
argument_list|(
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|)
return|;
case|case
literal|2
case|:
name|FormatDateTimeFormatter
name|formatter
init|=
name|Joda
operator|.
name|forPattern
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasMinMax
condition|)
block|{
return|return
operator|new
name|Date
argument_list|(
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|formatter
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|Date
argument_list|(
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|formatter
argument_list|)
return|;
case|case
literal|3
case|:
if|if
condition|(
name|hasMinMax
condition|)
block|{
return|return
operator|new
name|Text
argument_list|(
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|in
operator|.
name|readBytesRef
argument_list|()
argument_list|,
name|in
operator|.
name|readBytesRef
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|Text
argument_list|(
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
case|case
literal|4
case|:
name|InetAddress
name|min
init|=
literal|null
decl_stmt|;
name|InetAddress
name|max
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasMinMax
condition|)
block|{
name|int
name|l1
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b1
init|=
operator|new
name|byte
index|[
name|l1
index|]
decl_stmt|;
name|int
name|l2
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b2
init|=
operator|new
name|byte
index|[
name|l2
index|]
decl_stmt|;
name|min
operator|=
name|InetAddressPoint
operator|.
name|decode
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|max
operator|=
name|InetAddressPoint
operator|.
name|decode
argument_list|(
name|b2
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Ip
argument_list|(
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumDocFreq
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type."
argument_list|)
throw|;
block|}
block|}
DECL|field|TYPE_FIELD
specifier|static
specifier|final
name|String
name|TYPE_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
DECL|field|MAX_DOC_FIELD
specifier|static
specifier|final
name|String
name|MAX_DOC_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"max_doc"
argument_list|)
decl_stmt|;
DECL|field|DOC_COUNT_FIELD
specifier|static
specifier|final
name|String
name|DOC_COUNT_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"doc_count"
argument_list|)
decl_stmt|;
DECL|field|DENSITY_FIELD
specifier|static
specifier|final
name|String
name|DENSITY_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"density"
argument_list|)
decl_stmt|;
DECL|field|SUM_DOC_FREQ_FIELD
specifier|static
specifier|final
name|String
name|SUM_DOC_FREQ_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"sum_doc_freq"
argument_list|)
decl_stmt|;
DECL|field|SUM_TOTAL_TERM_FREQ_FIELD
specifier|static
specifier|final
name|String
name|SUM_TOTAL_TERM_FREQ_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"sum_total_term_freq"
argument_list|)
decl_stmt|;
DECL|field|SEARCHABLE_FIELD
specifier|static
specifier|final
name|String
name|SEARCHABLE_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"searchable"
argument_list|)
decl_stmt|;
DECL|field|AGGREGATABLE_FIELD
specifier|static
specifier|final
name|String
name|AGGREGATABLE_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"aggregatable"
argument_list|)
decl_stmt|;
DECL|field|MIN_VALUE_FIELD
specifier|static
specifier|final
name|String
name|MIN_VALUE_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"min_value"
argument_list|)
decl_stmt|;
DECL|field|MIN_VALUE_AS_STRING_FIELD
specifier|static
specifier|final
name|String
name|MIN_VALUE_AS_STRING_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"min_value_as_string"
argument_list|)
decl_stmt|;
DECL|field|MAX_VALUE_FIELD
specifier|static
specifier|final
name|String
name|MAX_VALUE_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"max_value"
argument_list|)
decl_stmt|;
DECL|field|MAX_VALUE_AS_STRING_FIELD
specifier|static
specifier|final
name|String
name|MAX_VALUE_AS_STRING_FIELD
init|=
operator|new
name|String
argument_list|(
literal|"max_value_as_string"
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

