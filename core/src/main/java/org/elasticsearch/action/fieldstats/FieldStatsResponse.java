begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.fieldstats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|FieldStatsResponse
specifier|public
class|class
name|FieldStatsResponse
extends|extends
name|BroadcastResponse
block|{
DECL|field|indicesMergedFieldStats
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FieldStats
argument_list|>
argument_list|>
name|indicesMergedFieldStats
decl_stmt|;
DECL|field|conflicts
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conflicts
decl_stmt|;
DECL|method|FieldStatsResponse
specifier|public
name|FieldStatsResponse
parameter_list|()
block|{     }
DECL|method|FieldStatsResponse
specifier|public
name|FieldStatsResponse
parameter_list|(
name|int
name|totalShards
parameter_list|,
name|int
name|successfulShards
parameter_list|,
name|int
name|failedShards
parameter_list|,
name|List
argument_list|<
name|ShardOperationFailedException
argument_list|>
name|shardFailures
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FieldStats
argument_list|>
argument_list|>
name|indicesMergedFieldStats
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conflicts
parameter_list|)
block|{
name|super
argument_list|(
name|totalShards
argument_list|,
name|successfulShards
argument_list|,
name|failedShards
argument_list|,
name|shardFailures
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesMergedFieldStats
operator|=
name|indicesMergedFieldStats
expr_stmt|;
name|this
operator|.
name|conflicts
operator|=
name|conflicts
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|getAllFieldStats
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|FieldStats
argument_list|>
name|getAllFieldStats
parameter_list|()
block|{
return|return
name|indicesMergedFieldStats
operator|.
name|get
argument_list|(
literal|"_all"
argument_list|)
return|;
block|}
DECL|method|getConflicts
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConflicts
parameter_list|()
block|{
return|return
name|conflicts
return|;
block|}
DECL|method|getIndicesMergedFieldStats
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FieldStats
argument_list|>
argument_list|>
name|getIndicesMergedFieldStats
parameter_list|()
block|{
return|return
name|indicesMergedFieldStats
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|indicesMergedFieldStats
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|int
name|indexSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FieldStats
argument_list|>
name|indexFieldStats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|indexSize
argument_list|)
decl_stmt|;
name|indicesMergedFieldStats
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|indexFieldStats
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|indexSize
condition|;
name|j
operator|++
control|)
block|{
name|key
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|FieldStats
name|value
init|=
name|FieldStats
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|indexFieldStats
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|conflicts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|indicesMergedFieldStats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FieldStats
argument_list|>
argument_list|>
name|entry1
range|:
name|indicesMergedFieldStats
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry1
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|entry1
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_2_0
argument_list|)
condition|)
block|{
comment|// filter fieldstats without min/max information
for|for
control|(
name|FieldStats
name|stats
range|:
name|entry1
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|stats
operator|.
name|hasMinMax
argument_list|()
operator|==
literal|false
condition|)
block|{
name|size
operator|--
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FieldStats
argument_list|>
name|entry2
range|:
name|entry1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry2
operator|.
name|getValue
argument_list|()
operator|.
name|hasMinMax
argument_list|()
operator|||
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_5_2_0
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry2
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry2
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|conflicts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conflicts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

