begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.fieldcaps
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldcaps
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|OriginalIndices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|HandledTransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteClusterAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|TransportFieldCapabilitiesAction
specifier|public
class|class
name|TransportFieldCapabilitiesAction
extends|extends
name|HandledTransportAction
argument_list|<
name|FieldCapabilitiesRequest
argument_list|,
name|FieldCapabilitiesResponse
argument_list|>
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|shardAction
specifier|private
specifier|final
name|TransportFieldCapabilitiesIndexAction
name|shardAction
decl_stmt|;
DECL|field|remoteClusterService
specifier|private
specifier|final
name|RemoteClusterService
name|remoteClusterService
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportFieldCapabilitiesAction
specifier|public
name|TransportFieldCapabilitiesAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportFieldCapabilitiesIndexAction
name|shardAction
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|FieldCapabilitiesAction
operator|.
name|NAME
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|FieldCapabilitiesRequest
operator|::
operator|new
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|remoteClusterService
operator|=
name|transportService
operator|.
name|getRemoteClusterService
argument_list|()
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|shardAction
operator|=
name|shardAction
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|FieldCapabilitiesRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|FieldCapabilitiesResponse
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|ClusterState
name|clusterState
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|OriginalIndices
argument_list|>
name|remoteClusterIndices
init|=
name|remoteClusterService
operator|.
name|groupIndices
argument_list|(
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|,
name|request
operator|.
name|indices
argument_list|()
argument_list|,
name|idx
lambda|->
name|indexNameExpressionResolver
operator|.
name|hasIndexOrAlias
argument_list|(
name|idx
argument_list|,
name|clusterState
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|OriginalIndices
name|localIndices
init|=
name|remoteClusterIndices
operator|.
name|remove
argument_list|(
name|RemoteClusterAware
operator|.
name|LOCAL_CLUSTER_GROUP_KEY
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|concreteIndices
decl_stmt|;
if|if
condition|(
name|remoteClusterIndices
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|&&
name|localIndices
operator|.
name|indices
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// in the case we have one or more remote indices but no local we don't expand to all local indices and just do remote
comment|// indices
name|concreteIndices
operator|=
name|Strings
operator|.
name|EMPTY_ARRAY
expr_stmt|;
block|}
else|else
block|{
name|concreteIndices
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|clusterState
argument_list|,
name|localIndices
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|totalNumRequest
init|=
name|concreteIndices
operator|.
name|length
operator|+
name|remoteClusterIndices
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|CountDown
name|completionCounter
init|=
operator|new
name|CountDown
argument_list|(
name|totalNumRequest
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldCapabilitiesIndexResponse
argument_list|>
name|indexResponses
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Runnable
name|onResponse
init|=
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|completionCounter
operator|.
name|countDown
argument_list|()
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|isMergeResults
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|merge
argument_list|(
name|indexResponses
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|FieldCapabilitiesResponse
argument_list|(
name|indexResponses
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
if|if
condition|(
name|totalNumRequest
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|FieldCapabilitiesResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ActionListener
argument_list|<
name|FieldCapabilitiesIndexResponse
argument_list|>
name|innerListener
init|=
operator|new
name|ActionListener
argument_list|<
name|FieldCapabilitiesIndexResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|FieldCapabilitiesIndexResponse
name|result
parameter_list|)
block|{
name|indexResponses
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|onResponse
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO we should somehow inform the user that we failed
name|onResponse
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|concreteIndices
control|)
block|{
name|shardAction
operator|.
name|execute
argument_list|(
operator|new
name|FieldCapabilitiesIndexRequest
argument_list|(
name|request
operator|.
name|fields
argument_list|()
argument_list|,
name|index
argument_list|)
argument_list|,
name|innerListener
argument_list|)
expr_stmt|;
block|}
comment|// this is the cross cluster part of this API - we force the other cluster to not merge the results but instead
comment|// send us back all individual index results.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|OriginalIndices
argument_list|>
name|remoteIndices
range|:
name|remoteClusterIndices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|clusterAlias
init|=
name|remoteIndices
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|OriginalIndices
name|originalIndices
init|=
name|remoteIndices
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Transport
operator|.
name|Connection
name|connection
init|=
name|remoteClusterService
operator|.
name|getConnection
argument_list|(
name|remoteIndices
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|FieldCapabilitiesRequest
name|remoteRequest
init|=
operator|new
name|FieldCapabilitiesRequest
argument_list|()
decl_stmt|;
name|remoteRequest
operator|.
name|setMergeResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// we need to merge on this node
name|remoteRequest
operator|.
name|indicesOptions
argument_list|(
name|originalIndices
operator|.
name|indicesOptions
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRequest
operator|.
name|indices
argument_list|(
name|originalIndices
operator|.
name|indices
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRequest
operator|.
name|fields
argument_list|(
name|request
operator|.
name|fields
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|connection
argument_list|,
name|FieldCapabilitiesAction
operator|.
name|NAME
argument_list|,
name|remoteRequest
argument_list|,
name|TransportRequestOptions
operator|.
name|EMPTY
argument_list|,
operator|new
name|TransportResponseHandler
argument_list|<
name|FieldCapabilitiesResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FieldCapabilitiesResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|FieldCapabilitiesResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|FieldCapabilitiesResponse
name|response
parameter_list|)
block|{
for|for
control|(
name|FieldCapabilitiesIndexResponse
name|res
range|:
name|response
operator|.
name|getIndexResponses
argument_list|()
control|)
block|{
name|indexResponses
operator|.
name|add
argument_list|(
operator|new
name|FieldCapabilitiesIndexResponse
argument_list|(
name|RemoteClusterAware
operator|.
name|buildRemoteIndexName
argument_list|(
name|clusterAlias
argument_list|,
name|res
operator|.
name|getIndexName
argument_list|()
argument_list|)
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|onResponse
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|onResponse
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|merge
specifier|private
name|FieldCapabilitiesResponse
name|merge
parameter_list|(
name|List
argument_list|<
name|FieldCapabilitiesIndexResponse
argument_list|>
name|indexResponses
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FieldCapabilities
operator|.
name|Builder
argument_list|>
argument_list|>
name|responseMapBuilder
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldCapabilitiesIndexResponse
name|response
range|:
name|indexResponses
control|)
block|{
name|innerMerge
argument_list|(
name|responseMapBuilder
argument_list|,
name|response
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|response
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FieldCapabilities
argument_list|>
argument_list|>
name|responseMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FieldCapabilities
operator|.
name|Builder
argument_list|>
argument_list|>
name|entry
range|:
name|responseMapBuilder
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FieldCapabilities
argument_list|>
name|typeMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|multiTypes
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FieldCapabilities
operator|.
name|Builder
argument_list|>
name|fieldEntry
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|typeMap
operator|.
name|put
argument_list|(
name|fieldEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|fieldEntry
operator|.
name|getValue
argument_list|()
operator|.
name|build
argument_list|(
name|multiTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|responseMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|typeMap
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FieldCapabilitiesResponse
argument_list|(
name|responseMap
argument_list|)
return|;
block|}
DECL|method|innerMerge
specifier|private
name|void
name|innerMerge
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FieldCapabilities
operator|.
name|Builder
argument_list|>
argument_list|>
name|responseMapBuilder
parameter_list|,
name|String
name|indexName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FieldCapabilities
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FieldCapabilities
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|field
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|FieldCapabilities
name|fieldCap
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FieldCapabilities
operator|.
name|Builder
argument_list|>
name|typeMap
init|=
name|responseMapBuilder
operator|.
name|computeIfAbsent
argument_list|(
name|field
argument_list|,
name|f
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|FieldCapabilities
operator|.
name|Builder
name|builder
init|=
name|typeMap
operator|.
name|computeIfAbsent
argument_list|(
name|fieldCap
operator|.
name|getType
argument_list|()
argument_list|,
name|key
lambda|->
operator|new
name|FieldCapabilities
operator|.
name|Builder
argument_list|(
name|field
argument_list|,
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|indexName
argument_list|,
name|fieldCap
operator|.
name|isSearchable
argument_list|()
argument_list|,
name|fieldCap
operator|.
name|isAggregatable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

