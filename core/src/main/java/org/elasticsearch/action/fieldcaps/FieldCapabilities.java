begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.fieldcaps
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldcaps
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Describes the capabilities of a field optionally merged across multiple indices.  */
end_comment

begin_class
DECL|class|FieldCapabilities
specifier|public
class|class
name|FieldCapabilities
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|isSearchable
specifier|private
specifier|final
name|boolean
name|isSearchable
decl_stmt|;
DECL|field|isAggregatable
specifier|private
specifier|final
name|boolean
name|isAggregatable
decl_stmt|;
DECL|field|indices
specifier|private
specifier|final
name|String
index|[]
name|indices
decl_stmt|;
DECL|field|nonSearchableIndices
specifier|private
specifier|final
name|String
index|[]
name|nonSearchableIndices
decl_stmt|;
DECL|field|nonAggregatableIndices
specifier|private
specifier|final
name|String
index|[]
name|nonAggregatableIndices
decl_stmt|;
comment|/**      * Constructor      * @param name The name of the field.      * @param type The type associated with the field.      * @param isSearchable Whether this field is indexed for search.      * @param isAggregatable Whether this field can be aggregated on.      */
DECL|method|FieldCapabilities
name|FieldCapabilities
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor      * @param name The name of the field      * @param type The type associated with the field.      * @param isSearchable Whether this field is indexed for search.      * @param isAggregatable Whether this field can be aggregated on.      * @param indices The list of indices where this field name is defined as {@code type},      *                or null if all indices have the same {@code type} for the field.      * @param nonSearchableIndices The list of indices where this field is not searchable,      *                             or null if the field is searchable in all indices.      * @param nonAggregatableIndices The list of indices where this field is not aggregatable,      *                               or null if the field is aggregatable in all indices.      */
DECL|method|FieldCapabilities
name|FieldCapabilities
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|,
name|String
index|[]
name|indices
parameter_list|,
name|String
index|[]
name|nonSearchableIndices
parameter_list|,
name|String
index|[]
name|nonAggregatableIndices
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|isSearchable
operator|=
name|isSearchable
expr_stmt|;
name|this
operator|.
name|isAggregatable
operator|=
name|isAggregatable
expr_stmt|;
name|this
operator|.
name|indices
operator|=
name|indices
expr_stmt|;
name|this
operator|.
name|nonSearchableIndices
operator|=
name|nonSearchableIndices
expr_stmt|;
name|this
operator|.
name|nonAggregatableIndices
operator|=
name|nonAggregatableIndices
expr_stmt|;
block|}
DECL|method|FieldCapabilities
name|FieldCapabilities
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|isSearchable
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|isAggregatable
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|indices
operator|=
name|in
operator|.
name|readOptionalStringArray
argument_list|()
expr_stmt|;
name|this
operator|.
name|nonSearchableIndices
operator|=
name|in
operator|.
name|readOptionalStringArray
argument_list|()
expr_stmt|;
name|this
operator|.
name|nonAggregatableIndices
operator|=
name|in
operator|.
name|readOptionalStringArray
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isSearchable
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isAggregatable
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStringArray
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStringArray
argument_list|(
name|nonSearchableIndices
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStringArray
argument_list|(
name|nonAggregatableIndices
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"searchable"
argument_list|,
name|isSearchable
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"aggregatable"
argument_list|,
name|isAggregatable
argument_list|)
expr_stmt|;
if|if
condition|(
name|indices
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"indices"
argument_list|,
name|indices
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonSearchableIndices
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"non_searchable_indices"
argument_list|,
name|nonSearchableIndices
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonAggregatableIndices
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"non_aggregatable_indices"
argument_list|,
name|nonAggregatableIndices
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * The name of the field.      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Whether this field is indexed for search on all indices.      */
DECL|method|isAggregatable
specifier|public
name|boolean
name|isAggregatable
parameter_list|()
block|{
return|return
name|isAggregatable
return|;
block|}
comment|/**      * Whether this field can be aggregated on all indices.      */
DECL|method|isSearchable
specifier|public
name|boolean
name|isSearchable
parameter_list|()
block|{
return|return
name|isSearchable
return|;
block|}
comment|/**      * The type of the field.      */
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * The list of indices where this field name is defined as {@code type},      * or null if all indices have the same {@code type} for the field.      */
DECL|method|indices
specifier|public
name|String
index|[]
name|indices
parameter_list|()
block|{
return|return
name|indices
return|;
block|}
comment|/**      * The list of indices where this field is not searchable,      * or null if the field is searchable in all indices.      */
DECL|method|nonSearchableIndices
specifier|public
name|String
index|[]
name|nonSearchableIndices
parameter_list|()
block|{
return|return
name|nonSearchableIndices
return|;
block|}
comment|/**      * The list of indices where this field is not aggregatable,      * or null if the field is aggregatable in all indices.      */
DECL|method|nonAggregatableIndices
specifier|public
name|String
index|[]
name|nonAggregatableIndices
parameter_list|()
block|{
return|return
name|nonAggregatableIndices
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|FieldCapabilities
name|that
init|=
operator|(
name|FieldCapabilities
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|isSearchable
operator|!=
name|that
operator|.
name|isSearchable
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|isAggregatable
operator|!=
name|that
operator|.
name|isAggregatable
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|that
operator|.
name|type
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|indices
argument_list|,
name|that
operator|.
name|indices
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|nonSearchableIndices
argument_list|,
name|that
operator|.
name|nonSearchableIndices
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|nonAggregatableIndices
argument_list|,
name|that
operator|.
name|nonAggregatableIndices
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|name
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|type
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|isSearchable
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|isAggregatable
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|nonSearchableIndices
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|nonAggregatableIndices
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|class|Builder
specifier|static
class|class
name|Builder
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|isSearchable
specifier|private
name|boolean
name|isSearchable
decl_stmt|;
DECL|field|isAggregatable
specifier|private
name|boolean
name|isAggregatable
decl_stmt|;
DECL|field|indiceList
specifier|private
name|List
argument_list|<
name|IndexCaps
argument_list|>
name|indiceList
decl_stmt|;
DECL|method|Builder
name|Builder
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|isSearchable
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|isAggregatable
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|indiceList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|add
name|void
name|add
parameter_list|(
name|String
name|index
parameter_list|,
name|boolean
name|search
parameter_list|,
name|boolean
name|agg
parameter_list|)
block|{
name|IndexCaps
name|indexCaps
init|=
operator|new
name|IndexCaps
argument_list|(
name|index
argument_list|,
name|search
argument_list|,
name|agg
argument_list|)
decl_stmt|;
name|indiceList
operator|.
name|add
argument_list|(
name|indexCaps
argument_list|)
expr_stmt|;
name|this
operator|.
name|isSearchable
operator|&=
name|search
expr_stmt|;
name|this
operator|.
name|isAggregatable
operator|&=
name|agg
expr_stmt|;
block|}
DECL|method|build
name|FieldCapabilities
name|build
parameter_list|(
name|boolean
name|withIndices
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|indices
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|indiceList
argument_list|,
name|Comparator
operator|.
name|comparing
argument_list|(
name|o
lambda|->
name|o
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|withIndices
condition|)
block|{
name|indices
operator|=
name|indiceList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|caps
lambda|->
name|caps
operator|.
name|name
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indices
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|nonSearchableIndices
decl_stmt|;
if|if
condition|(
name|isSearchable
operator|==
literal|false
operator|&&
name|indiceList
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
parameter_list|(
lambda|caps
argument_list|)
operator|->
name|caps
operator|.
name|isSearchable
condition|)
block|)
block|{
comment|// Iff this field is searchable in some indices AND non-searchable in others
comment|// we record the list of non-searchable indices
name|nonSearchableIndices
operator|=
name|indiceList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|caps
parameter_list|)
lambda|->
name|caps
operator|.
name|isSearchable
operator|==
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|caps
lambda|->
name|caps
operator|.
name|name
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonSearchableIndices
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|nonAggregatableIndices
decl_stmt|;
if|if
condition|(
name|isAggregatable
operator|==
literal|false
operator|&&
name|indiceList
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
parameter_list|(
lambda|caps
argument_list|)
operator|->
name|caps
operator|.
name|isAggregatable
condition|)
block|)
block|{
comment|// Iff this field is aggregatable in some indices AND non-searchable in others
comment|// we keep the list of non-aggregatable indices
name|nonAggregatableIndices
operator|=
name|indiceList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|caps
parameter_list|)
lambda|->
name|caps
operator|.
name|isAggregatable
operator|==
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|caps
lambda|->
name|caps
operator|.
name|name
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonAggregatableIndices
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|FieldCapabilities
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|isSearchable
argument_list|,
name|isAggregatable
argument_list|,
name|indices
argument_list|,
name|nonSearchableIndices
argument_list|,
name|nonAggregatableIndices
argument_list|)
return|;
block|}
end_class

begin_class
unit|}      private
DECL|class|IndexCaps
specifier|static
class|class
name|IndexCaps
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|isSearchable
specifier|final
name|boolean
name|isSearchable
decl_stmt|;
DECL|field|isAggregatable
specifier|final
name|boolean
name|isAggregatable
decl_stmt|;
DECL|method|IndexCaps
name|IndexCaps
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|isSearchable
parameter_list|,
name|boolean
name|isAggregatable
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|isSearchable
operator|=
name|isSearchable
expr_stmt|;
name|this
operator|.
name|isAggregatable
operator|=
name|isAggregatable
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

