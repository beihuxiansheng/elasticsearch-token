begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Handles responses obtained when publishing a new cluster state from master to all non master nodes.  * Allows to await a reply from all non master nodes, up to a timeout  */
end_comment

begin_class
DECL|class|BlockingClusterStatePublishResponseHandler
specifier|public
class|class
name|BlockingClusterStatePublishResponseHandler
block|{
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|pendingNodes
specifier|private
specifier|final
name|Set
argument_list|<
name|DiscoveryNode
argument_list|>
name|pendingNodes
decl_stmt|;
comment|/**      * Creates a new BlockingClusterStatePublishResponseHandler      * @param publishingToNodes the set of nodes to which the cluster state will be published and should respond      */
DECL|method|BlockingClusterStatePublishResponseHandler
specifier|public
name|BlockingClusterStatePublishResponseHandler
parameter_list|(
name|Set
argument_list|<
name|DiscoveryNode
argument_list|>
name|publishingToNodes
parameter_list|)
block|{
name|this
operator|.
name|pendingNodes
operator|=
name|ConcurrentCollections
operator|.
name|newConcurrentSet
argument_list|()
expr_stmt|;
name|this
operator|.
name|pendingNodes
operator|.
name|addAll
argument_list|(
name|publishingToNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|pendingNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called for each response obtained from non master nodes      *      * @param node the node that replied to the publish event      */
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|boolean
name|found
init|=
name|pendingNodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
decl_stmt|;
assert|assert
name|found
operator|:
literal|"node ["
operator|+
name|node
operator|+
literal|"] already responded or failed"
assert|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Called for each failure obtained from non master nodes      * @param node the node that replied to the publish event      */
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|boolean
name|found
init|=
name|pendingNodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
decl_stmt|;
assert|assert
name|found
operator|:
literal|"node ["
operator|+
name|node
operator|+
literal|"] already responded or failed"
assert|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Allows to wait for all non master nodes to reply to the publish event up to a timeout      * @param timeout the timeout      * @return true if the timeout expired or not, false otherwise      */
DECL|method|awaitAllNodes
specifier|public
name|boolean
name|awaitAllNodes
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|success
init|=
name|latch
operator|.
name|await
argument_list|(
name|timeout
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
assert|assert
operator|!
name|success
operator|||
name|pendingNodes
operator|.
name|isEmpty
argument_list|()
operator|:
literal|"response count reached 0 but still waiting for some nodes"
assert|;
return|return
name|success
return|;
block|}
comment|/**      * returns a list of nodes which didn't respond yet      */
DECL|method|pendingNodes
specifier|public
name|DiscoveryNode
index|[]
name|pendingNodes
parameter_list|()
block|{
comment|// we use a zero length array, because if we try to pre allocate we may need to remove trailing
comment|// nulls if some nodes responded in the meanwhile
return|return
name|pendingNodes
operator|.
name|toArray
argument_list|(
operator|new
name|DiscoveryNode
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

