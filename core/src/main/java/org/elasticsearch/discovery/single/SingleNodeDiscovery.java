begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.single
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|single
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|PendingClusterStateStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|PendingClusterStatesQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A discovery implementation where the only member of the cluster is the local node.  */
end_comment

begin_class
DECL|class|SingleNodeDiscovery
specifier|public
class|class
name|SingleNodeDiscovery
extends|extends
name|AbstractLifecycleComponent
implements|implements
name|Discovery
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|discoverySettings
specifier|private
specifier|final
name|DiscoverySettings
name|discoverySettings
decl_stmt|;
DECL|method|SingleNodeDiscovery
specifier|public
name|SingleNodeDiscovery
parameter_list|(
specifier|final
name|Settings
name|settings
parameter_list|,
specifier|final
name|ClusterService
name|clusterService
parameter_list|)
block|{
name|super
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|clusterService
argument_list|)
expr_stmt|;
specifier|final
name|ClusterSettings
name|clusterSettings
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|clusterService
operator|.
name|getClusterSettings
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|discoverySettings
operator|=
operator|new
name|DiscoverySettings
argument_list|(
name|settings
argument_list|,
name|clusterSettings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|localNode
specifier|public
name|DiscoveryNode
name|localNode
parameter_list|()
block|{
return|return
name|clusterService
operator|.
name|localNode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nodeDescription
specifier|public
name|String
name|nodeDescription
parameter_list|()
block|{
return|return
name|clusterService
operator|.
name|getClusterName
argument_list|()
operator|.
name|value
argument_list|()
operator|+
literal|"/"
operator|+
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setAllocationService
specifier|public
name|void
name|setAllocationService
parameter_list|(
specifier|final
name|AllocationService
name|allocationService
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|publish
specifier|public
name|void
name|publish
parameter_list|(
specifier|final
name|ClusterChangedEvent
name|event
parameter_list|,
specifier|final
name|AckListener
name|listener
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|stats
specifier|public
name|DiscoveryStats
name|stats
parameter_list|()
block|{
return|return
operator|new
name|DiscoveryStats
argument_list|(
operator|(
name|PendingClusterStateStats
operator|)
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDiscoverySettings
specifier|public
name|DiscoverySettings
name|getDiscoverySettings
parameter_list|()
block|{
return|return
name|discoverySettings
return|;
block|}
annotation|@
name|Override
DECL|method|startInitialJoin
specifier|public
name|void
name|startInitialJoin
parameter_list|()
block|{
specifier|final
name|ClusterStateTaskExecutor
argument_list|<
name|DiscoveryNode
argument_list|>
name|executor
init|=
operator|new
name|ClusterStateTaskExecutor
argument_list|<
name|DiscoveryNode
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterTasksResult
argument_list|<
name|DiscoveryNode
argument_list|>
name|execute
parameter_list|(
specifier|final
name|ClusterState
name|current
parameter_list|,
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|tasks
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|DiscoveryNodes
operator|.
name|Builder
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|current
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
comment|// always set the local node as master, there will not be other nodes
name|nodes
operator|.
name|masterNodeId
argument_list|(
name|localNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ClusterState
name|next
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|current
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ClusterTasksResult
operator|.
name|Builder
argument_list|<
name|DiscoveryNode
argument_list|>
name|result
init|=
name|ClusterTasksResult
operator|.
name|builder
argument_list|()
decl_stmt|;
return|return
name|result
operator|.
name|successes
argument_list|(
name|tasks
argument_list|)
operator|.
name|build
argument_list|(
name|next
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|runOnlyOnMaster
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|ClusterStateTaskConfig
name|config
init|=
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|URGENT
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTasks
argument_list|(
literal|"single-node-start-initial-join"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|localNode
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{}
argument_list|)
argument_list|,
name|config
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMinimumMasterNodes
specifier|public
name|int
name|getMinimumMasterNodes
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{      }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{      }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{      }
block|}
end_class

end_unit

