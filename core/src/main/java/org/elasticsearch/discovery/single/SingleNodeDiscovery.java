begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.single
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|single
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterApplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|MasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|PendingClusterStateStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayService
operator|.
name|STATE_NOT_RECOVERED_BLOCK
import|;
end_import

begin_comment
comment|/**  * A discovery implementation where the only member of the cluster is the local node.  */
end_comment

begin_class
DECL|class|SingleNodeDiscovery
specifier|public
class|class
name|SingleNodeDiscovery
extends|extends
name|AbstractLifecycleComponent
implements|implements
name|Discovery
block|{
DECL|field|transportService
specifier|protected
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterApplier
specifier|private
specifier|final
name|ClusterApplier
name|clusterApplier
decl_stmt|;
DECL|field|clusterState
specifier|private
specifier|volatile
name|ClusterState
name|clusterState
decl_stmt|;
DECL|method|SingleNodeDiscovery
specifier|public
name|SingleNodeDiscovery
parameter_list|(
specifier|final
name|Settings
name|settings
parameter_list|,
specifier|final
name|TransportService
name|transportService
parameter_list|,
specifier|final
name|MasterService
name|masterService
parameter_list|,
specifier|final
name|ClusterApplier
name|clusterApplier
parameter_list|)
block|{
name|super
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
name|masterService
operator|.
name|setClusterStateSupplier
argument_list|(
parameter_list|()
lambda|->
name|clusterState
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterApplier
operator|=
name|clusterApplier
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|publish
specifier|public
specifier|synchronized
name|void
name|publish
parameter_list|(
specifier|final
name|ClusterChangedEvent
name|event
parameter_list|,
specifier|final
name|AckListener
name|ackListener
parameter_list|)
block|{
name|clusterState
operator|=
name|event
operator|.
name|state
argument_list|()
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ClusterStateTaskListener
name|listener
init|=
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|ackListener
operator|.
name|onNodeAck
argument_list|(
name|transportService
operator|.
name|getLocalNode
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|ackListener
operator|.
name|onNodeAck
argument_list|(
name|transportService
operator|.
name|getLocalNode
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
call|(
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed while applying cluster state locally [{}]"
argument_list|,
name|event
operator|.
name|source
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|clusterApplier
operator|.
name|onNewClusterState
argument_list|(
literal|"apply-locally-on-node["
operator|+
name|event
operator|.
name|source
argument_list|()
operator|+
literal|"]"
argument_list|,
parameter_list|()
lambda|->
name|clusterState
argument_list|,
name|listener
argument_list|)
expr_stmt|;
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stats
specifier|public
name|DiscoveryStats
name|stats
parameter_list|()
block|{
return|return
operator|new
name|DiscoveryStats
argument_list|(
operator|(
name|PendingClusterStateStats
operator|)
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|startInitialJoin
specifier|public
specifier|synchronized
name|void
name|startInitialJoin
parameter_list|()
block|{
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't start initial join when not started"
argument_list|)
throw|;
block|}
comment|// apply a fresh cluster state just so that state recovery gets triggered by GatewayService
comment|// TODO: give discovery module control over GatewayService
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterApplier
operator|.
name|onNewClusterState
argument_list|(
literal|"single-node-start-initial-join"
argument_list|,
parameter_list|()
lambda|->
name|clusterState
argument_list|,
parameter_list|(
name|source
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
specifier|synchronized
name|void
name|doStart
parameter_list|()
block|{
comment|// set initial state
name|DiscoveryNode
name|localNode
init|=
name|transportService
operator|.
name|getLocalNode
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|createInitialState
argument_list|(
name|localNode
argument_list|)
expr_stmt|;
name|clusterApplier
operator|.
name|setInitialState
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
block|}
DECL|method|createInitialState
specifier|protected
name|ClusterState
name|createInitialState
parameter_list|(
name|DiscoveryNode
name|localNode
parameter_list|)
block|{
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|localNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|localNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|localNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|STATE_NOT_RECOVERED_BLOCK
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{      }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{      }
block|}
end_class

end_unit

