begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen.publish
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|publish
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|AckClusterStatePublishResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|BlockingClusterStatePublishResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|DiscoveryNodesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PublishClusterStateAction
specifier|public
class|class
name|PublishClusterStateAction
extends|extends
name|AbstractComponent
block|{
DECL|field|SEND_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SEND_ACTION_NAME
init|=
literal|"internal:discovery/zen/publish/send"
decl_stmt|;
DECL|field|COMMIT_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMMIT_ACTION_NAME
init|=
literal|"internal:discovery/zen/publish/commit"
decl_stmt|;
DECL|interface|NewClusterStateListener
specifier|public
interface|interface
name|NewClusterStateListener
block|{
DECL|interface|NewStateProcessed
interface|interface
name|NewStateProcessed
block|{
DECL|method|onNewClusterStateProcessed
name|void
name|onNewClusterStateProcessed
parameter_list|()
function_decl|;
DECL|method|onNewClusterStateFailed
name|void
name|onNewClusterStateFailed
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
DECL|method|onNewClusterState
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
function_decl|;
block|}
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|nodesProvider
specifier|private
specifier|final
name|DiscoveryNodesProvider
name|nodesProvider
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|NewClusterStateListener
name|listener
decl_stmt|;
DECL|field|discoverySettings
specifier|private
specifier|final
name|DiscoverySettings
name|discoverySettings
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|method|PublishClusterStateAction
specifier|public
name|PublishClusterStateAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|DiscoveryNodesProvider
name|nodesProvider
parameter_list|,
name|NewClusterStateListener
name|listener
parameter_list|,
name|DiscoverySettings
name|discoverySettings
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|nodesProvider
operator|=
name|nodesProvider
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|discoverySettings
operator|=
name|discoverySettings
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|SEND_ACTION_NAME
argument_list|,
name|BytesTransportRequest
operator|.
name|class
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|SendClusterStateRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|COMMIT_ACTION_NAME
argument_list|,
name|CommitClusterStateRequest
operator|.
name|class
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|CommitClusterStateRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|transportService
operator|.
name|removeHandler
argument_list|(
name|SEND_ACTION_NAME
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|removeHandler
argument_list|(
name|COMMIT_ACTION_NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|publish
specifier|public
name|void
name|publish
parameter_list|(
name|ClusterChangedEvent
name|clusterChangedEvent
parameter_list|,
name|int
name|minMasterNodes
parameter_list|,
specifier|final
name|Discovery
operator|.
name|AckListener
name|ackListener
parameter_list|)
block|{
name|Set
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesToPublishTo
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|clusterChangedEvent
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
name|nodesProvider
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
decl_stmt|;
name|int
name|totalMasterNodes
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|DiscoveryNode
name|node
range|:
name|clusterChangedEvent
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isMasterNode
argument_list|()
condition|)
block|{
name|totalMasterNodes
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|localNode
argument_list|)
operator|==
literal|false
condition|)
block|{
name|nodesToPublishTo
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|publish
argument_list|(
name|clusterChangedEvent
argument_list|,
name|minMasterNodes
argument_list|,
name|totalMasterNodes
argument_list|,
name|nodesToPublishTo
argument_list|,
operator|new
name|AckClusterStatePublishResponseHandler
argument_list|(
name|nodesToPublishTo
argument_list|,
name|ackListener
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|publish
specifier|private
name|void
name|publish
parameter_list|(
specifier|final
name|ClusterChangedEvent
name|clusterChangedEvent
parameter_list|,
name|int
name|minMasterNodes
parameter_list|,
name|int
name|totalMasterNodes
parameter_list|,
specifier|final
name|Set
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesToPublishTo
parameter_list|,
specifier|final
name|BlockingClusterStatePublishResponseHandler
name|publishResponseHandler
parameter_list|)
block|{
name|Map
argument_list|<
name|Version
argument_list|,
name|BytesReference
argument_list|>
name|serializedStates
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Version
argument_list|,
name|BytesReference
argument_list|>
name|serializedDiffs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|final
name|ClusterState
name|clusterState
init|=
name|clusterChangedEvent
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|ClusterState
name|previousState
init|=
name|clusterChangedEvent
operator|.
name|previousState
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|timedOutWaitingForNodes
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TimeValue
name|publishTimeout
init|=
name|discoverySettings
operator|.
name|getPublishTimeout
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|sendFullVersion
init|=
operator|!
name|discoverySettings
operator|.
name|getPublishDiff
argument_list|()
operator|||
name|previousState
operator|==
literal|null
decl_stmt|;
specifier|final
name|SendingController
name|sendingController
init|=
operator|new
name|SendingController
argument_list|(
name|clusterChangedEvent
operator|.
name|state
argument_list|()
argument_list|,
name|minMasterNodes
argument_list|,
name|totalMasterNodes
argument_list|,
name|publishResponseHandler
argument_list|)
decl_stmt|;
name|Diff
argument_list|<
name|ClusterState
argument_list|>
name|diff
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|DiscoveryNode
name|node
range|:
name|nodesToPublishTo
control|)
block|{
comment|// try and serialize the cluster state once (or per version), so we don't serialize it
comment|// per node when we send it over the wire, compress it while we are at it...
comment|// we don't send full version if node didn't exist in the previous version of cluster state
if|if
condition|(
name|sendFullVersion
operator|||
operator|!
name|previousState
operator|.
name|nodes
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|sendFullClusterState
argument_list|(
name|clusterState
argument_list|,
name|serializedStates
argument_list|,
name|node
argument_list|,
name|timedOutWaitingForNodes
argument_list|,
name|publishTimeout
argument_list|,
name|sendingController
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|diff
operator|==
literal|null
condition|)
block|{
name|diff
operator|=
name|clusterState
operator|.
name|diff
argument_list|(
name|previousState
argument_list|)
expr_stmt|;
block|}
name|sendClusterStateDiff
argument_list|(
name|clusterState
argument_list|,
name|diff
argument_list|,
name|serializedDiffs
argument_list|,
name|node
argument_list|,
name|timedOutWaitingForNodes
argument_list|,
name|publishTimeout
argument_list|,
name|sendingController
argument_list|)
expr_stmt|;
block|}
block|}
name|sendingController
operator|.
name|waitForCommit
argument_list|(
name|discoverySettings
operator|.
name|getCommitTimeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|publishTimeout
operator|.
name|millis
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// only wait if the publish timeout is configured...
try|try
block|{
name|timedOutWaitingForNodes
operator|.
name|set
argument_list|(
operator|!
name|publishResponseHandler
operator|.
name|awaitAllNodes
argument_list|(
name|publishTimeout
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedOutWaitingForNodes
operator|.
name|get
argument_list|()
condition|)
block|{
name|DiscoveryNode
index|[]
name|pendingNodes
init|=
name|publishResponseHandler
operator|.
name|pendingNodes
argument_list|()
decl_stmt|;
comment|// everyone may have just responded
if|if
condition|(
name|pendingNodes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"timed out waiting for all nodes to process published state [{}] (timeout [{}], pending nodes: {})"
argument_list|,
name|clusterState
operator|.
name|version
argument_list|()
argument_list|,
name|publishTimeout
argument_list|,
name|pendingNodes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore& restore interrupt
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|sendFullClusterState
specifier|private
name|void
name|sendFullClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|Version
argument_list|,
name|BytesReference
argument_list|>
name|serializedStates
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|,
name|AtomicBoolean
name|timedOutWaitingForNodes
parameter_list|,
name|TimeValue
name|publishTimeout
parameter_list|,
name|SendingController
name|sendingController
parameter_list|)
block|{
name|BytesReference
name|bytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|serializedStates
operator|!=
literal|null
condition|)
block|{
name|bytes
operator|=
name|serializedStates
operator|.
name|get
argument_list|(
name|node
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|bytes
operator|=
name|serializeFullClusterState
argument_list|(
name|clusterState
argument_list|,
name|node
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|serializedStates
operator|!=
literal|null
condition|)
block|{
name|serializedStates
operator|.
name|put
argument_list|(
name|node
operator|.
name|version
argument_list|()
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to serialize cluster_state before publishing it to node {}"
argument_list|,
name|e
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|sendingController
operator|.
name|onNodeSendFailed
argument_list|(
name|node
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|sendClusterStateToNode
argument_list|(
name|clusterState
argument_list|,
name|bytes
argument_list|,
name|node
argument_list|,
name|timedOutWaitingForNodes
argument_list|,
name|publishTimeout
argument_list|,
name|sendingController
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|sendClusterStateDiff
specifier|private
name|void
name|sendClusterStateDiff
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|Diff
name|diff
parameter_list|,
name|Map
argument_list|<
name|Version
argument_list|,
name|BytesReference
argument_list|>
name|serializedDiffs
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|,
name|AtomicBoolean
name|timedOutWaitingForNodes
parameter_list|,
name|TimeValue
name|publishTimeout
parameter_list|,
name|SendingController
name|sendingController
parameter_list|)
block|{
name|BytesReference
name|bytes
init|=
name|serializedDiffs
operator|.
name|get
argument_list|(
name|node
operator|.
name|version
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|bytes
operator|=
name|serializeDiffClusterState
argument_list|(
name|diff
argument_list|,
name|node
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|serializedDiffs
operator|.
name|put
argument_list|(
name|node
operator|.
name|version
argument_list|()
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to serialize diff of cluster_state before publishing it to node {}"
argument_list|,
name|e
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|sendingController
operator|.
name|onNodeSendFailed
argument_list|(
name|node
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|sendClusterStateToNode
argument_list|(
name|clusterState
argument_list|,
name|bytes
argument_list|,
name|node
argument_list|,
name|timedOutWaitingForNodes
argument_list|,
name|publishTimeout
argument_list|,
name|sendingController
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|sendClusterStateToNode
specifier|private
name|void
name|sendClusterStateToNode
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|BytesReference
name|bytes
parameter_list|,
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|AtomicBoolean
name|timedOutWaitingForNodes
parameter_list|,
specifier|final
name|TimeValue
name|publishTimeout
parameter_list|,
specifier|final
name|SendingController
name|sendingController
parameter_list|,
specifier|final
name|boolean
name|sendDiffs
parameter_list|)
block|{
try|try
block|{
name|TransportRequestOptions
name|options
init|=
name|TransportRequestOptions
operator|.
name|options
argument_list|()
operator|.
name|withType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|STATE
argument_list|)
operator|.
name|withCompress
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// no need to put a timeout on the options here, because we want the response to eventually be received
comment|// and not log an error if it arrives after the timeout
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|SEND_ACTION_NAME
argument_list|,
operator|new
name|BytesTransportRequest
argument_list|(
name|bytes
argument_list|,
name|node
operator|.
name|version
argument_list|()
argument_list|)
argument_list|,
name|options
argument_list|,
comment|// no need to compress, we already compressed the bytes
operator|new
name|EmptyTransportResponseHandler
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|TransportResponse
operator|.
name|Empty
name|response
parameter_list|)
block|{
if|if
condition|(
name|timedOutWaitingForNodes
operator|.
name|get
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"node {} responded for cluster state [{}] (took longer than [{}])"
argument_list|,
name|node
argument_list|,
name|clusterState
operator|.
name|version
argument_list|()
argument_list|,
name|publishTimeout
argument_list|)
expr_stmt|;
block|}
name|sendingController
operator|.
name|onNodeSendAck
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
if|if
condition|(
name|sendDiffs
operator|&&
name|exp
operator|.
name|unwrapCause
argument_list|()
operator|instanceof
name|IncompatibleClusterStateVersionException
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"resending full cluster state to node {} reason {}"
argument_list|,
name|node
argument_list|,
name|exp
operator|.
name|getDetailedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sendFullClusterState
argument_list|(
name|clusterState
argument_list|,
literal|null
argument_list|,
name|node
argument_list|,
name|timedOutWaitingForNodes
argument_list|,
name|publishTimeout
argument_list|,
name|sendingController
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to send cluster state to {}"
argument_list|,
name|exp
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|sendingController
operator|.
name|onNodeSendFailed
argument_list|(
name|node
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"error sending cluster state to {}"
argument_list|,
name|t
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|sendingController
operator|.
name|onNodeSendFailed
argument_list|(
name|node
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendCommitToNode
specifier|private
name|void
name|sendCommitToNode
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
specifier|final
name|BlockingClusterStatePublishResponseHandler
name|publishResponseHandler
parameter_list|)
block|{
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"sending commit for cluster state (uuid: [{}], version [{}]) to [{}]"
argument_list|,
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|clusterState
operator|.
name|version
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|TransportRequestOptions
name|options
init|=
name|TransportRequestOptions
operator|.
name|options
argument_list|()
operator|.
name|withType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|STATE
argument_list|)
operator|.
name|withCompress
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// no need to put a timeout on the options here, because we want the response to eventually be received
comment|// and not log an error if it arrives after the timeout
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|COMMIT_ACTION_NAME
argument_list|,
operator|new
name|CommitClusterStateRequest
argument_list|(
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|)
argument_list|,
name|options
argument_list|,
comment|// no need to compress, we already compressed the bytes
operator|new
name|EmptyTransportResponseHandler
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|TransportResponse
operator|.
name|Empty
name|response
parameter_list|)
block|{
comment|//                            if (timedOutWaitingForNodes.get()) {
name|logger
operator|.
name|debug
argument_list|(
literal|"node {} responded to cluster state commit [{}]"
argument_list|,
name|node
argument_list|,
name|clusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
comment|//                            }
name|publishResponseHandler
operator|.
name|onResponse
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to commit cluster state (uuid [{}], version [{}]) to {}"
argument_list|,
name|exp
argument_list|,
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|clusterState
operator|.
name|version
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|publishResponseHandler
operator|.
name|onFailure
argument_list|(
name|node
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"error sending cluster state commit (uuid [{}], version [{}]) to {}"
argument_list|,
name|t
argument_list|,
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|clusterState
operator|.
name|version
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|publishResponseHandler
operator|.
name|onFailure
argument_list|(
name|node
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|serializeFullClusterState
specifier|public
specifier|static
name|BytesReference
name|serializeFullClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|Version
name|nodeVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|bStream
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
try|try
init|(
name|StreamOutput
name|stream
init|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
operator|.
name|streamOutput
argument_list|(
name|bStream
argument_list|)
init|)
block|{
name|stream
operator|.
name|setVersion
argument_list|(
name|nodeVersion
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clusterState
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
name|bStream
operator|.
name|bytes
argument_list|()
return|;
block|}
DECL|method|serializeDiffClusterState
specifier|public
specifier|static
name|BytesReference
name|serializeDiffClusterState
parameter_list|(
name|Diff
name|diff
parameter_list|,
name|Version
name|nodeVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|bStream
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
try|try
init|(
name|StreamOutput
name|stream
init|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
operator|.
name|streamOutput
argument_list|(
name|bStream
argument_list|)
init|)
block|{
name|stream
operator|.
name|setVersion
argument_list|(
name|nodeVersion
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|diff
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
name|bStream
operator|.
name|bytes
argument_list|()
return|;
block|}
DECL|field|lastSeenClusterStateMutex
specifier|private
name|Object
name|lastSeenClusterStateMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|lastSeenClusterState
specifier|private
name|ClusterState
name|lastSeenClusterState
decl_stmt|;
DECL|class|SendClusterStateRequestHandler
specifier|private
class|class
name|SendClusterStateRequestHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|BytesTransportRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|BytesTransportRequest
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|Compressor
name|compressor
init|=
name|CompressorFactory
operator|.
name|compressor
argument_list|(
name|request
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|StreamInput
name|in
decl_stmt|;
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
name|in
operator|=
name|compressor
operator|.
name|streamInput
argument_list|(
name|request
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|=
name|request
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
expr_stmt|;
block|}
name|in
operator|.
name|setVersion
argument_list|(
name|request
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lastSeenClusterStateMutex
init|)
block|{
specifier|final
name|ClusterState
name|incomingState
decl_stmt|;
comment|// If true we received full cluster state - otherwise diffs
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|incomingState
operator|=
name|ClusterState
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|,
name|nodesProvider
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"received full cluster state version [{}] with size [{}]"
argument_list|,
name|incomingState
operator|.
name|version
argument_list|()
argument_list|,
name|request
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastSeenClusterState
operator|!=
literal|null
condition|)
block|{
name|Diff
argument_list|<
name|ClusterState
argument_list|>
name|diff
init|=
name|lastSeenClusterState
operator|.
name|readDiffFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|incomingState
operator|=
name|diff
operator|.
name|apply
argument_list|(
name|lastSeenClusterState
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"received diff cluster state version [{}] with uuid [{}], diff size [{}]"
argument_list|,
name|incomingState
operator|.
name|version
argument_list|()
argument_list|,
name|incomingState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|request
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"received diff for but don't have any local cluster state - requesting full state"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IncompatibleClusterStateVersionException
argument_list|(
literal|"have no local cluster state"
argument_list|)
throw|;
block|}
comment|// sanity check incoming state
specifier|final
name|ClusterName
name|incomingClusterName
init|=
name|incomingState
operator|.
name|getClusterName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|incomingClusterName
operator|.
name|equals
argument_list|(
name|PublishClusterStateAction
operator|.
name|this
operator|.
name|clusterName
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"received cluster state from [{}] which is also master but with a different cluster name [{}]"
argument_list|,
name|incomingState
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
argument_list|,
name|incomingClusterName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"received state from a node that is not part of the cluster"
argument_list|)
throw|;
block|}
if|if
condition|(
name|incomingState
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"received a cluster state from [{}] and not part of the cluster, should not happen"
argument_list|,
name|incomingState
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"received state from a node that is not part of the cluster"
argument_list|)
throw|;
block|}
comment|// state from another master requires more subtle checks, so we let it pass for now (it will be checked in ZenDiscovery)
if|if
condition|(
name|nodesProvider
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeMaster
argument_list|()
operator|==
literal|false
condition|)
block|{
name|ZenDiscovery
operator|.
name|rejectNewClusterStateIfNeeded
argument_list|(
name|logger
argument_list|,
name|nodesProvider
operator|.
name|nodes
argument_list|()
argument_list|,
name|incomingState
argument_list|)
expr_stmt|;
block|}
name|lastSeenClusterState
operator|=
name|incomingState
expr_stmt|;
name|lastSeenClusterState
operator|.
name|status
argument_list|(
name|ClusterState
operator|.
name|ClusterStateStatus
operator|.
name|RECEIVED
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CommitClusterStateRequestHandler
specifier|private
class|class
name|CommitClusterStateRequestHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|CommitClusterStateRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|CommitClusterStateRequest
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|ClusterState
name|committedClusterState
decl_stmt|;
synchronized|synchronized
init|(
name|lastSeenClusterStateMutex
init|)
block|{
name|committedClusterState
operator|=
name|lastSeenClusterState
expr_stmt|;
block|}
if|if
condition|(
name|committedClusterState
operator|.
name|stateUUID
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|stateUUID
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// nocommit: we need something better here
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|listener
operator|.
name|onNewClusterState
argument_list|(
name|committedClusterState
argument_list|,
operator|new
name|NewClusterStateListener
operator|.
name|NewStateProcessed
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterStateProcessed
parameter_list|()
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to send response on cluster state processed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterStateFailed
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to send response on cluster state processed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unexpected error while processing cluster state version [{}]"
argument_list|,
name|e
argument_list|,
name|lastSeenClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to send response on cluster state processed"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|CommitClusterStateRequest
specifier|static
class|class
name|CommitClusterStateRequest
extends|extends
name|TransportRequest
block|{
DECL|field|stateUUID
name|String
name|stateUUID
decl_stmt|;
DECL|method|CommitClusterStateRequest
specifier|public
name|CommitClusterStateRequest
parameter_list|()
block|{         }
DECL|method|CommitClusterStateRequest
specifier|public
name|CommitClusterStateRequest
parameter_list|(
name|String
name|stateUUID
parameter_list|)
block|{
name|this
operator|.
name|stateUUID
operator|=
name|stateUUID
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|stateUUID
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|stateUUID
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FailedToCommitException
specifier|public
class|class
name|FailedToCommitException
extends|extends
name|ElasticsearchException
block|{
DECL|method|FailedToCommitException
specifier|public
name|FailedToCommitException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SendingController
class|class
name|SendingController
block|{
DECL|field|clusterState
specifier|private
specifier|final
name|ClusterState
name|clusterState
decl_stmt|;
DECL|field|publishResponseHandler
specifier|private
specifier|final
name|BlockingClusterStatePublishResponseHandler
name|publishResponseHandler
decl_stmt|;
DECL|field|neededMastersToCommit
specifier|volatile
name|int
name|neededMastersToCommit
decl_stmt|;
DECL|field|pendingMasterNodes
name|int
name|pendingMasterNodes
decl_stmt|;
DECL|field|sendAckedBeforeCommit
specifier|final
name|ArrayList
argument_list|<
name|DiscoveryNode
argument_list|>
name|sendAckedBeforeCommit
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|comittedOrFailed
specifier|final
name|CountDownLatch
name|comittedOrFailed
decl_stmt|;
DECL|field|committed
specifier|final
name|AtomicBoolean
name|committed
decl_stmt|;
DECL|method|SendingController
specifier|private
name|SendingController
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|int
name|minMasterNodes
parameter_list|,
name|int
name|totalMasterNodes
parameter_list|,
name|BlockingClusterStatePublishResponseHandler
name|publishResponseHandler
parameter_list|)
block|{
name|this
operator|.
name|clusterState
operator|=
name|clusterState
expr_stmt|;
name|this
operator|.
name|publishResponseHandler
operator|=
name|publishResponseHandler
expr_stmt|;
name|this
operator|.
name|neededMastersToCommit
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|minMasterNodes
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// we are one of the master nodes
name|this
operator|.
name|pendingMasterNodes
operator|=
name|totalMasterNodes
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|committed
operator|=
operator|new
name|AtomicBoolean
argument_list|(
name|neededMastersToCommit
operator|==
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|comittedOrFailed
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|committed
operator|.
name|get
argument_list|()
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForCommit
specifier|public
name|void
name|waitForCommit
parameter_list|(
name|TimeValue
name|commitTimeout
parameter_list|)
block|{
try|try
block|{
name|comittedOrFailed
operator|.
name|await
argument_list|(
name|commitTimeout
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{              }
if|if
condition|(
name|committed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|FailedToCommitException
argument_list|(
literal|"failed to get enough masters to ack sent cluster state. ["
operator|+
name|neededMastersToCommit
operator|+
literal|"] left"
argument_list|)
throw|;
block|}
block|}
DECL|method|onNodeSendAck
specifier|synchronized
specifier|public
name|void
name|onNodeSendAck
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|committed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
name|sendAckedBeforeCommit
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|isMasterNode
argument_list|()
condition|)
block|{
name|onMasterNodeSendAck
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|sendAckedBeforeCommit
operator|.
name|isEmpty
argument_list|()
assert|;
name|sendCommitToNode
argument_list|(
name|node
argument_list|,
name|clusterState
argument_list|,
name|publishResponseHandler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onMasterNodeSendAck
specifier|private
name|void
name|onMasterNodeSendAck
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|neededMastersToCommit
operator|--
expr_stmt|;
if|if
condition|(
name|neededMastersToCommit
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"committing version [{}]"
argument_list|,
name|clusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DiscoveryNode
name|nodeToCommit
range|:
name|sendAckedBeforeCommit
control|)
block|{
name|sendCommitToNode
argument_list|(
name|nodeToCommit
argument_list|,
name|clusterState
argument_list|,
name|publishResponseHandler
argument_list|)
expr_stmt|;
block|}
name|sendAckedBeforeCommit
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
name|committed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
assert|assert
name|success
assert|;
name|comittedOrFailed
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|onMasterNodeDone
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|onMasterNodeDone
specifier|private
name|void
name|onMasterNodeDone
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|pendingMasterNodes
operator|--
expr_stmt|;
if|if
condition|(
name|pendingMasterNodes
operator|==
literal|0
condition|)
block|{
name|comittedOrFailed
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|onNodeSendFailed
specifier|synchronized
specifier|public
name|void
name|onNodeSendFailed
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isMasterNode
argument_list|()
condition|)
block|{
name|onMasterNodeDone
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|publishResponseHandler
operator|.
name|onFailure
argument_list|(
name|node
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

