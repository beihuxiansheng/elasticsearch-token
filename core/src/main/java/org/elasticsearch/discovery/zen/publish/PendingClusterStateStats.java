begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen.publish
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|publish
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Class encapsulating stats about the PendingClusterStatsQueue  */
end_comment

begin_class
DECL|class|PendingClusterStateStats
specifier|public
class|class
name|PendingClusterStateStats
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|total
specifier|private
name|int
name|total
decl_stmt|;
DECL|field|pending
specifier|private
name|int
name|pending
decl_stmt|;
DECL|field|committed
specifier|private
name|int
name|committed
decl_stmt|;
DECL|method|PendingClusterStateStats
specifier|public
name|PendingClusterStateStats
parameter_list|()
block|{      }
DECL|method|PendingClusterStateStats
specifier|public
name|PendingClusterStateStats
parameter_list|(
name|int
name|total
parameter_list|,
name|int
name|pending
parameter_list|,
name|int
name|committed
parameter_list|)
block|{
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
name|this
operator|.
name|pending
operator|=
name|pending
expr_stmt|;
name|this
operator|.
name|committed
operator|=
name|committed
expr_stmt|;
block|}
DECL|method|getCommitted
specifier|public
name|int
name|getCommitted
parameter_list|()
block|{
return|return
name|committed
return|;
block|}
DECL|method|getPending
specifier|public
name|int
name|getPending
parameter_list|()
block|{
return|return
name|pending
return|;
block|}
DECL|method|getTotal
specifier|public
name|int
name|getTotal
parameter_list|()
block|{
return|return
name|total
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|QUEUE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PENDING
argument_list|,
name|pending
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|COMMITTED
argument_list|,
name|committed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|total
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|pending
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|committed
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|pending
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|committed
argument_list|)
expr_stmt|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|QUEUE
specifier|static
specifier|final
name|String
name|QUEUE
init|=
literal|"cluster_state_queue"
decl_stmt|;
DECL|field|TOTAL
specifier|static
specifier|final
name|String
name|TOTAL
init|=
literal|"total"
decl_stmt|;
DECL|field|PENDING
specifier|static
specifier|final
name|String
name|PENDING
init|=
literal|"pending"
decl_stmt|;
DECL|field|COMMITTED
specifier|static
specifier|final
name|String
name|COMMITTED
init|=
literal|"committed"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PendingClusterStateStats(total="
operator|+
name|total
operator|+
literal|", pending="
operator|+
name|pending
operator|+
literal|", committed="
operator|+
name|committed
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

