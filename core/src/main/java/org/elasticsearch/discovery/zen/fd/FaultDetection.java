begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen.fd
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|fd
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportConnectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueSeconds
import|;
end_import

begin_comment
comment|/**  * A base class for {@link org.elasticsearch.discovery.zen.fd.MasterFaultDetection}& {@link org.elasticsearch.discovery.zen.fd.NodesFaultDetection},  * making sure both use the same setting.  */
end_comment

begin_class
DECL|class|FaultDetection
specifier|public
specifier|abstract
class|class
name|FaultDetection
extends|extends
name|AbstractComponent
block|{
DECL|field|SETTING_CONNECT_ON_NETWORK_DISCONNECT
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_CONNECT_ON_NETWORK_DISCONNECT
init|=
literal|"discovery.zen.fd.connect_on_network_disconnect"
decl_stmt|;
DECL|field|SETTING_PING_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_PING_INTERVAL
init|=
literal|"discovery.zen.fd.ping_interval"
decl_stmt|;
DECL|field|SETTING_PING_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_PING_TIMEOUT
init|=
literal|"discovery.zen.fd.ping_timeout"
decl_stmt|;
DECL|field|SETTING_PING_RETRIES
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_PING_RETRIES
init|=
literal|"discovery.zen.fd.ping_retries"
decl_stmt|;
DECL|field|SETTING_REGISTER_CONNECTION_LISTENER
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_REGISTER_CONNECTION_LISTENER
init|=
literal|"discovery.zen.fd.register_connection_listener"
decl_stmt|;
DECL|field|threadPool
specifier|protected
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterName
specifier|protected
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|transportService
specifier|protected
specifier|final
name|TransportService
name|transportService
decl_stmt|;
comment|// used mainly for testing, should always be true
DECL|field|registerConnectionListener
specifier|protected
specifier|final
name|boolean
name|registerConnectionListener
decl_stmt|;
DECL|field|connectionListener
specifier|protected
specifier|final
name|FDConnectionListener
name|connectionListener
decl_stmt|;
DECL|field|connectOnNetworkDisconnect
specifier|protected
specifier|final
name|boolean
name|connectOnNetworkDisconnect
decl_stmt|;
DECL|field|pingInterval
specifier|protected
specifier|final
name|TimeValue
name|pingInterval
decl_stmt|;
DECL|field|pingRetryTimeout
specifier|protected
specifier|final
name|TimeValue
name|pingRetryTimeout
decl_stmt|;
DECL|field|pingRetryCount
specifier|protected
specifier|final
name|int
name|pingRetryCount
decl_stmt|;
DECL|method|FaultDetection
specifier|public
name|FaultDetection
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|connectOnNetworkDisconnect
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|SETTING_CONNECT_ON_NETWORK_DISCONNECT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|pingInterval
operator|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|SETTING_PING_INTERVAL
argument_list|,
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|pingRetryTimeout
operator|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|SETTING_PING_TIMEOUT
argument_list|,
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|pingRetryCount
operator|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_PING_RETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|this
operator|.
name|registerConnectionListener
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|SETTING_REGISTER_CONNECTION_LISTENER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionListener
operator|=
operator|new
name|FDConnectionListener
argument_list|()
expr_stmt|;
if|if
condition|(
name|registerConnectionListener
condition|)
block|{
name|transportService
operator|.
name|addConnectionListener
argument_list|(
name|connectionListener
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|transportService
operator|.
name|removeConnectionListener
argument_list|(
name|connectionListener
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method will be called when the {@link org.elasticsearch.transport.TransportService} raised a node disconnected event      */
DECL|method|handleTransportDisconnect
specifier|abstract
name|void
name|handleTransportDisconnect
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
function_decl|;
DECL|class|FDConnectionListener
specifier|private
class|class
name|FDConnectionListener
implements|implements
name|TransportConnectionListener
block|{
annotation|@
name|Override
DECL|method|onNodeConnected
specifier|public
name|void
name|onNodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|onNodeDisconnected
specifier|public
name|void
name|onNodeDisconnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|handleTransportDisconnect
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

