begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|KeyedLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectionProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeNotConnectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
operator|.
name|newConcurrentMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenPing
operator|.
name|PingResponse
operator|.
name|readPingResponse
import|;
end_import

begin_class
DECL|class|UnicastZenPing
specifier|public
class|class
name|UnicastZenPing
extends|extends
name|AbstractComponent
implements|implements
name|ZenPing
block|{
DECL|field|ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
literal|"internal:discovery/zen/unicast"
decl_stmt|;
DECL|field|DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"discovery.zen.ping.unicast.hosts"
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"discovery.zen.ping.unicast.concurrent_connects"
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|DISCOVERY_ZEN_PING_UNICAST_HOSTS_RESOLVE_TIMEOUT
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|DISCOVERY_ZEN_PING_UNICAST_HOSTS_RESOLVE_TIMEOUT
init|=
name|Setting
operator|.
name|positiveTimeSetting
argument_list|(
literal|"discovery.zen.ping.unicast.hosts.resolve_timeout"
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|5
argument_list|)
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
comment|// these limits are per-address
DECL|field|LIMIT_FOREIGN_PORTS_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|LIMIT_FOREIGN_PORTS_COUNT
init|=
literal|1
decl_stmt|;
DECL|field|LIMIT_LOCAL_PORTS_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|LIMIT_LOCAL_PORTS_COUNT
init|=
literal|5
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|configuredHosts
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|configuredHosts
decl_stmt|;
DECL|field|limitPortCounts
specifier|private
specifier|final
name|int
name|limitPortCounts
decl_stmt|;
DECL|field|contextProvider
specifier|private
specifier|final
name|PingContextProvider
name|contextProvider
decl_stmt|;
DECL|field|pingingRoundIdGenerator
specifier|private
specifier|final
name|AtomicInteger
name|pingingRoundIdGenerator
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// used as a node id prefix for configured unicast host nodes/address
DECL|field|UNICAST_NODE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|UNICAST_NODE_PREFIX
init|=
literal|"#zen_unicast_"
decl_stmt|;
DECL|field|activePingingRounds
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|PingingRound
argument_list|>
name|activePingingRounds
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
comment|// a list of temporal responses a node will return for a request (holds responses from other nodes)
DECL|field|temporalResponses
specifier|private
specifier|final
name|Queue
argument_list|<
name|PingResponse
argument_list|>
name|temporalResponses
init|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
decl_stmt|;
DECL|field|hostsProvider
specifier|private
specifier|final
name|UnicastHostsProvider
name|hostsProvider
decl_stmt|;
DECL|field|unicastZenPingExecutorService
specifier|protected
specifier|final
name|EsThreadPoolExecutor
name|unicastZenPingExecutorService
decl_stmt|;
DECL|field|resolveTimeout
specifier|private
specifier|final
name|TimeValue
name|resolveTimeout
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|UnicastZenPing
specifier|public
name|UnicastZenPing
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|UnicastHostsProvider
name|unicastHostsProvider
parameter_list|,
name|PingContextProvider
name|contextProvider
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|hostsProvider
operator|=
name|unicastHostsProvider
expr_stmt|;
name|this
operator|.
name|contextProvider
operator|=
name|contextProvider
expr_stmt|;
specifier|final
name|int
name|concurrentConnects
init|=
name|DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|configuredHosts
operator|=
name|DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// we only limit to 1 addresses, makes no sense to ping 100 ports
name|limitPortCounts
operator|=
name|LIMIT_FOREIGN_PORTS_COUNT
expr_stmt|;
block|}
else|else
block|{
comment|// if unicast hosts are not specified, fill with simple defaults on the local machine
name|configuredHosts
operator|=
name|transportService
operator|.
name|getLocalAddresses
argument_list|()
expr_stmt|;
name|limitPortCounts
operator|=
name|LIMIT_LOCAL_PORTS_COUNT
expr_stmt|;
block|}
name|resolveTimeout
operator|=
name|DISCOVERY_ZEN_PING_UNICAST_HOSTS_RESOLVE_TIMEOUT
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using initial hosts {}, with concurrent_connects [{}], resolve_timeout [{}]"
argument_list|,
name|configuredHosts
argument_list|,
name|concurrentConnects
argument_list|,
name|resolveTimeout
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|ACTION_NAME
argument_list|,
name|UnicastPingRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|UnicastPingRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ThreadFactory
name|threadFactory
init|=
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
literal|"[unicast_connect]"
argument_list|)
decl_stmt|;
name|unicastZenPingExecutorService
operator|=
name|EsExecutors
operator|.
name|newScaling
argument_list|(
literal|"unicast_connect"
argument_list|,
literal|0
argument_list|,
name|concurrentConnects
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|threadFactory
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Resolves a list of hosts to a list of discovery nodes. Each host is resolved into a transport address (or a collection of addresses      * if the number of ports is greater than one) and the transport addresses are used to created discovery nodes. Host lookups are done      * in parallel using specified executor service up to the specified resolve timeout.      *      * @param executorService  the executor service used to parallelize hostname lookups      * @param logger           logger used for logging messages regarding hostname lookups      * @param hosts            the hosts to resolve      * @param limitPortCounts  the number of ports to resolve (should be 1 for non-local transport)      * @param transportService the transport service      * @param nodeId_prefix    a prefix to use for node ids      * @param resolveTimeout   the timeout before returning from hostname lookups      * @return a list of discovery nodes with resolved transport addresses      */
DECL|method|resolveHostsLists
specifier|public
specifier|static
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|resolveHostsLists
parameter_list|(
specifier|final
name|ExecutorService
name|executorService
parameter_list|,
specifier|final
name|Logger
name|logger
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|hosts
parameter_list|,
specifier|final
name|int
name|limitPortCounts
parameter_list|,
specifier|final
name|TransportService
name|transportService
parameter_list|,
specifier|final
name|String
name|nodeId_prefix
parameter_list|,
specifier|final
name|TimeValue
name|resolveTimeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|nodeId_prefix
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|resolveTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolveTimeout
operator|.
name|nanos
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"resolve timeout must be non-negative but was ["
operator|+
name|resolveTimeout
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// create tasks to submit to the executor service; we will wait up to resolveTimeout for these tasks to complete
specifier|final
name|List
argument_list|<
name|Callable
argument_list|<
name|TransportAddress
index|[]
argument_list|>
argument_list|>
name|callables
init|=
name|hosts
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|hn
lambda|->
call|(
name|Callable
argument_list|<
name|TransportAddress
index|[]
argument_list|>
call|)
argument_list|()
operator|->
name|transportService
operator|.
name|addressesFromString
argument_list|(
name|hn
argument_list|,
name|limitPortCounts
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|TransportAddress
index|[]
argument_list|>
argument_list|>
name|futures
init|=
name|executorService
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|,
name|resolveTimeout
operator|.
name|nanos
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|discoveryNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|TransportAddress
argument_list|>
name|localAddresses
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|localAddresses
operator|.
name|add
argument_list|(
name|transportService
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|)
expr_stmt|;
name|localAddresses
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|transportService
operator|.
name|boundAddress
argument_list|()
operator|.
name|boundAddresses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// ExecutorService#invokeAll guarantees that the futures are returned in the iteration order of the tasks so we can associate the
comment|// hostname with the corresponding task by iterating together
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|hosts
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Future
argument_list|<
name|TransportAddress
index|[]
argument_list|>
name|future
range|:
name|futures
control|)
block|{
specifier|final
name|String
name|hostname
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
assert|assert
name|future
operator|.
name|isDone
argument_list|()
assert|;
try|try
block|{
specifier|final
name|TransportAddress
index|[]
name|addresses
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"resolved host [{}] to {}"
argument_list|,
name|hostname
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|addressId
init|=
literal|0
init|;
name|addressId
operator|<
name|addresses
operator|.
name|length
condition|;
name|addressId
operator|++
control|)
block|{
specifier|final
name|TransportAddress
name|address
init|=
name|addresses
index|[
name|addressId
index|]
decl_stmt|;
comment|// no point in pinging ourselves
if|if
condition|(
name|localAddresses
operator|.
name|contains
argument_list|(
name|address
argument_list|)
operator|==
literal|false
condition|)
block|{
name|discoveryNodes
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
name|nodeId_prefix
operator|+
name|hostname
operator|+
literal|"_"
operator|+
name|addressId
operator|+
literal|"#"
argument_list|,
name|address
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|ExecutionException
name|e
parameter_list|)
block|{
assert|assert
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
assert|;
specifier|final
name|String
name|message
init|=
literal|"failed to resolve host ["
operator|+
name|hostname
operator|+
literal|"]"
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"timed out after [{}] resolving host [{}]"
argument_list|,
name|resolveTimeout
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|discoveryNodes
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|unicastZenPingExecutorService
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Releasables
operator|.
name|close
argument_list|(
name|activePingingRounds
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
block|{     }
comment|/**      * Clears the list of cached ping responses.      */
DECL|method|clearTemporalResponses
specifier|public
name|void
name|clearTemporalResponses
parameter_list|()
block|{
name|temporalResponses
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sends three rounds of pings notifying the specified {@link Consumer} when pinging is complete. Pings are sent after resolving      * configured unicast hosts to their IP address (subject to DNS caching within the JVM). A batch of pings is sent, then another batch      * of pings is sent at half the specified {@link TimeValue}, and then another batch of pings is sent at the specified {@link TimeValue}.      * The pings that are sent carry a timeout of 1.25 times the specified {@link TimeValue}. When pinging each node, a connection and      * handshake is performed, with a connection timeout of the specified {@link TimeValue}.      *      * @param resultsConsumer the callback when pinging is complete      * @param duration        the timeout for various components of the pings      */
annotation|@
name|Override
DECL|method|ping
specifier|public
name|void
name|ping
parameter_list|(
specifier|final
name|Consumer
argument_list|<
name|PingCollection
argument_list|>
name|resultsConsumer
parameter_list|,
specifier|final
name|TimeValue
name|duration
parameter_list|)
block|{
name|ping
argument_list|(
name|resultsConsumer
argument_list|,
name|duration
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
comment|/**      * a variant of {@link #ping(Consumer, TimeValue)}, but allows separating the scheduling duration      * from the duration used for request level time outs. This is useful for testing      */
DECL|method|ping
specifier|protected
name|void
name|ping
parameter_list|(
specifier|final
name|Consumer
argument_list|<
name|PingCollection
argument_list|>
name|resultsConsumer
parameter_list|,
specifier|final
name|TimeValue
name|scheduleDuration
parameter_list|,
specifier|final
name|TimeValue
name|requestDuration
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
decl_stmt|;
try|try
block|{
name|seedNodes
operator|=
name|resolveHostsLists
argument_list|(
name|unicastZenPingExecutorService
argument_list|,
name|logger
argument_list|,
name|configuredHosts
argument_list|,
name|limitPortCounts
argument_list|,
name|transportService
argument_list|,
name|UNICAST_NODE_PREFIX
argument_list|,
name|resolveTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|seedNodes
operator|.
name|addAll
argument_list|(
name|hostsProvider
operator|.
name|buildDynamicNodes
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DiscoveryNodes
name|nodes
init|=
name|contextProvider
operator|.
name|clusterState
argument_list|()
operator|.
name|nodes
argument_list|()
decl_stmt|;
comment|// add all possible master nodes that were active in the last known cluster configuration
for|for
control|(
name|ObjectCursor
argument_list|<
name|DiscoveryNode
argument_list|>
name|masterNode
range|:
name|nodes
operator|.
name|getMasterNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|seedNodes
operator|.
name|add
argument_list|(
name|masterNode
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ConnectionProfile
name|connectionProfile
init|=
name|ConnectionProfile
operator|.
name|buildSingleChannelProfile
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
argument_list|,
name|requestDuration
argument_list|,
name|requestDuration
argument_list|)
decl_stmt|;
specifier|final
name|PingingRound
name|pingingRound
init|=
operator|new
name|PingingRound
argument_list|(
name|pingingRoundIdGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|seedNodes
argument_list|,
name|resultsConsumer
argument_list|,
name|nodes
operator|.
name|getLocalNode
argument_list|()
argument_list|,
name|connectionProfile
argument_list|)
decl_stmt|;
name|activePingingRounds
operator|.
name|put
argument_list|(
name|pingingRound
operator|.
name|id
argument_list|()
argument_list|,
name|pingingRound
argument_list|)
expr_stmt|;
specifier|final
name|AbstractRunnable
name|pingSender
init|=
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|AlreadyClosedException
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unexpected error while pinging"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|sendPings
argument_list|(
name|requestDuration
argument_list|,
name|pingingRound
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
name|pingSender
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|scheduleDuration
operator|.
name|millis
argument_list|()
operator|/
literal|3
argument_list|)
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
name|pingSender
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|scheduleDuration
operator|.
name|millis
argument_list|()
operator|/
literal|3
operator|*
literal|2
argument_list|)
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
name|pingSender
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|scheduleDuration
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|finishPingingRound
argument_list|(
name|pingingRound
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unexpected error while finishing pinging round"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// for testing
DECL|method|finishPingingRound
specifier|protected
name|void
name|finishPingingRound
parameter_list|(
name|PingingRound
name|pingingRound
parameter_list|)
block|{
name|pingingRound
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|PingingRound
specifier|protected
class|class
name|PingingRound
implements|implements
name|Releasable
block|{
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|tempConnections
specifier|private
specifier|final
name|Map
argument_list|<
name|TransportAddress
argument_list|,
name|Connection
argument_list|>
name|tempConnections
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|connectionLock
specifier|private
specifier|final
name|KeyedLock
argument_list|<
name|TransportAddress
argument_list|>
name|connectionLock
init|=
operator|new
name|KeyedLock
argument_list|<>
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|pingCollection
specifier|private
specifier|final
name|PingCollection
name|pingCollection
decl_stmt|;
DECL|field|seedNodes
specifier|private
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
decl_stmt|;
DECL|field|pingListener
specifier|private
specifier|final
name|Consumer
argument_list|<
name|PingCollection
argument_list|>
name|pingListener
decl_stmt|;
DECL|field|localNode
specifier|private
specifier|final
name|DiscoveryNode
name|localNode
decl_stmt|;
DECL|field|connectionProfile
specifier|private
specifier|final
name|ConnectionProfile
name|connectionProfile
decl_stmt|;
DECL|field|closed
specifier|private
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|PingingRound
name|PingingRound
parameter_list|(
name|int
name|id
parameter_list|,
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
parameter_list|,
name|Consumer
argument_list|<
name|PingCollection
argument_list|>
name|resultsConsumer
parameter_list|,
name|DiscoveryNode
name|localNode
parameter_list|,
name|ConnectionProfile
name|connectionProfile
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|seedNodes
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|seedNodes
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|pingListener
operator|=
name|resultsConsumer
expr_stmt|;
name|this
operator|.
name|localNode
operator|=
name|localNode
expr_stmt|;
name|this
operator|.
name|connectionProfile
operator|=
name|connectionProfile
expr_stmt|;
name|this
operator|.
name|pingCollection
operator|=
operator|new
name|PingCollection
argument_list|()
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|int
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|this
operator|.
name|closed
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getSeedNodes
specifier|public
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|getSeedNodes
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|seedNodes
return|;
block|}
DECL|method|getOrConnect
specifier|public
name|Connection
name|getOrConnect
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
throws|throws
name|IOException
block|{
name|Connection
name|result
decl_stmt|;
try|try
init|(
name|Releasable
name|ignore
init|=
name|connectionLock
operator|.
name|acquire
argument_list|(
name|node
operator|.
name|getAddress
argument_list|()
argument_list|)
init|)
block|{
name|result
operator|=
name|tempConnections
operator|.
name|get
argument_list|(
name|node
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] opening connection to [{}]"
argument_list|,
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|result
operator|=
name|transportService
operator|.
name|openConnection
argument_list|(
name|node
argument_list|,
name|connectionProfile
argument_list|)
expr_stmt|;
try|try
block|{
name|transportService
operator|.
name|handshake
argument_list|(
name|result
argument_list|,
name|connectionProfile
operator|.
name|getHandshakeTimeout
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// acquire lock and check if closed, to prevent leaving an open connection after closing
name|ensureOpen
argument_list|()
expr_stmt|;
name|Connection
name|existing
init|=
name|tempConnections
operator|.
name|put
argument_list|(
name|node
operator|.
name|getAddress
argument_list|()
argument_list|,
name|result
argument_list|)
decl_stmt|;
assert|assert
name|existing
operator|==
literal|null
assert|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] closing connection to [{}] due to failure"
argument_list|,
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|ensureOpen
specifier|private
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"pinging round ["
operator|+
name|id
operator|+
literal|"] is finished"
argument_list|)
throw|;
block|}
block|}
DECL|method|addPingResponseToCollection
specifier|public
name|void
name|addPingResponseToCollection
parameter_list|(
name|PingResponse
name|pingResponse
parameter_list|)
block|{
if|if
condition|(
name|localNode
operator|.
name|equals
argument_list|(
name|pingResponse
operator|.
name|node
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|pingCollection
operator|.
name|addPing
argument_list|(
name|pingResponse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|List
argument_list|<
name|Connection
argument_list|>
name|toClose
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|activePingingRounds
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|toClose
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tempConnections
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|tempConnections
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toClose
operator|!=
literal|null
condition|)
block|{
comment|// we actually closed
try|try
block|{
name|pingListener
operator|.
name|accept
argument_list|(
name|pingCollection
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|toClose
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getConnectionProfile
specifier|public
name|ConnectionProfile
name|getConnectionProfile
parameter_list|()
block|{
return|return
name|connectionProfile
return|;
block|}
block|}
DECL|method|sendPings
specifier|protected
name|void
name|sendPings
parameter_list|(
specifier|final
name|TimeValue
name|timeout
parameter_list|,
specifier|final
name|PingingRound
name|pingingRound
parameter_list|)
block|{
specifier|final
name|UnicastPingRequest
name|pingRequest
init|=
operator|new
name|UnicastPingRequest
argument_list|()
decl_stmt|;
name|pingRequest
operator|.
name|id
operator|=
name|pingingRound
operator|.
name|id
argument_list|()
expr_stmt|;
name|pingRequest
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|ClusterState
name|lastState
init|=
name|contextProvider
operator|.
name|clusterState
argument_list|()
decl_stmt|;
name|pingRequest
operator|.
name|pingResponse
operator|=
name|createPingResponse
argument_list|(
name|lastState
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesFromResponses
init|=
name|temporalResponses
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pingResponse
lambda|->
block|{
assert|assert
name|clusterName
operator|.
name|equals
argument_list|(
name|pingResponse
operator|.
name|clusterName
argument_list|()
argument_list|)
operator|:
literal|"got a ping request from a different cluster. expected "
operator|+
name|clusterName
operator|+
literal|" got "
operator|+
name|pingResponse
operator|.
name|clusterName
argument_list|()
assert|;
return|return
name|pingResponse
operator|.
name|node
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
comment|// dedup by address
specifier|final
name|Map
argument_list|<
name|TransportAddress
argument_list|,
name|DiscoveryNode
argument_list|>
name|uniqueNodesByAddress
init|=
name|Stream
operator|.
name|concat
argument_list|(
name|pingingRound
operator|.
name|getSeedNodes
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
name|nodesFromResponses
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|DiscoveryNode
operator|::
name|getAddress
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
parameter_list|(
name|n1
parameter_list|,
name|n2
parameter_list|)
lambda|->
name|n1
argument_list|)
argument_list|)
decl_stmt|;
comment|// resolve what we can via the latest cluster state
specifier|final
name|Set
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesToPing
init|=
name|uniqueNodesByAddress
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|node
lambda|->
block|{
name|DiscoveryNode
name|foundNode
init|=
name|lastState
operator|.
name|nodes
argument_list|()
operator|.
name|findByAddress
argument_list|(
name|node
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundNode
operator|==
literal|null
condition|)
block|{
return|return
name|node
return|;
block|}
else|else
block|{
return|return
name|foundNode
return|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|nodesToPing
operator|.
name|forEach
argument_list|(
name|node
lambda|->
name|sendPingRequestToNode
argument_list|(
name|node
argument_list|,
name|timeout
argument_list|,
name|pingingRound
argument_list|,
name|pingRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendPingRequestToNode
specifier|private
name|void
name|sendPingRequestToNode
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|,
name|TimeValue
name|timeout
parameter_list|,
specifier|final
name|PingingRound
name|pingingRound
parameter_list|,
specifier|final
name|UnicastPingRequest
name|pingRequest
parameter_list|)
block|{
name|submitToExecutor
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|transportService
operator|.
name|nodeConnected
argument_list|(
name|node
argument_list|)
condition|)
block|{
try|try
block|{
comment|// concurrency can still cause disconnects
name|connection
operator|=
name|transportService
operator|.
name|getConnection
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeNotConnectedException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] node [{}] just disconnected, will create a temp connection"
argument_list|,
name|pingingRound
operator|.
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
name|pingingRound
operator|.
name|getOrConnect
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] sending to {}"
argument_list|,
name|pingingRound
operator|.
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|connection
argument_list|,
name|ACTION_NAME
argument_list|,
name|pingRequest
argument_list|,
name|TransportRequestOptions
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
call|(
name|long
call|)
argument_list|(
name|timeout
operator|.
name|millis
argument_list|()
operator|*
literal|1.25
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|getPingResponseHandler
argument_list|(
name|pingingRound
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|ConnectTransportException
operator|||
name|e
operator|instanceof
name|AlreadyClosedException
condition|)
block|{
comment|// can't connect to the node - this is more common path!
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] failed to ping {}"
argument_list|,
name|pingingRound
operator|.
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|RemoteTransportException
condition|)
block|{
comment|// something went wrong on the other side
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] received a remote error as a response to ping {}"
argument_list|,
name|pingingRound
operator|.
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] failed send ping to {}"
argument_list|,
name|pingingRound
operator|.
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onRejection
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// The RejectedExecutionException can come from the fact unicastZenPingExecutorService is at its max down in sendPings
comment|// But don't bail here, we can retry later on after the send ping has been scheduled.
name|logger
operator|.
name|debug
argument_list|(
literal|"Ping execution rejected"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// for testing
DECL|method|submitToExecutor
specifier|protected
name|void
name|submitToExecutor
parameter_list|(
name|AbstractRunnable
name|abstractRunnable
parameter_list|)
block|{
name|unicastZenPingExecutorService
operator|.
name|execute
argument_list|(
name|abstractRunnable
argument_list|)
expr_stmt|;
block|}
comment|// for testing
DECL|method|getPingResponseHandler
specifier|protected
name|TransportResponseHandler
argument_list|<
name|UnicastPingResponse
argument_list|>
name|getPingResponseHandler
parameter_list|(
specifier|final
name|PingingRound
name|pingingRound
parameter_list|,
specifier|final
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
operator|new
name|TransportResponseHandler
argument_list|<
name|UnicastPingResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UnicastPingResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|UnicastPingResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|UnicastPingResponse
name|response
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] received response from {}: {}"
argument_list|,
name|pingingRound
operator|.
name|id
argument_list|()
argument_list|,
name|node
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|response
operator|.
name|pingResponses
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pingingRound
operator|.
name|isClosed
argument_list|()
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] skipping received response from {}. already closed"
argument_list|,
name|pingingRound
operator|.
name|id
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Stream
operator|.
name|of
argument_list|(
name|response
operator|.
name|pingResponses
argument_list|)
operator|.
name|forEach
argument_list|(
name|pingingRound
operator|::
name|addPingResponseToCollection
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
if|if
condition|(
name|exp
operator|instanceof
name|ConnectTransportException
operator|||
name|exp
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ConnectTransportException
condition|)
block|{
comment|// ok, not connected...
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to connect to {}"
argument_list|,
name|node
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|closed
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to send ping to [{}]"
argument_list|,
name|node
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|handlePingRequest
specifier|private
name|UnicastPingResponse
name|handlePingRequest
parameter_list|(
specifier|final
name|UnicastPingRequest
name|request
parameter_list|)
block|{
assert|assert
name|clusterName
operator|.
name|equals
argument_list|(
name|request
operator|.
name|pingResponse
operator|.
name|clusterName
argument_list|()
argument_list|)
operator|:
literal|"got a ping request from a different cluster. expected "
operator|+
name|clusterName
operator|+
literal|" got "
operator|+
name|request
operator|.
name|pingResponse
operator|.
name|clusterName
argument_list|()
assert|;
name|temporalResponses
operator|.
name|add
argument_list|(
name|request
operator|.
name|pingResponse
argument_list|)
expr_stmt|;
comment|// add to any ongoing pinging
name|activePingingRounds
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|p
operator|.
name|addPingResponseToCollection
argument_list|(
name|request
operator|.
name|pingResponse
argument_list|)
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|request
operator|.
name|timeout
operator|.
name|millis
argument_list|()
operator|*
literal|2
argument_list|)
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
parameter_list|()
lambda|->
name|temporalResponses
operator|.
name|remove
argument_list|(
name|request
operator|.
name|pingResponse
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PingResponse
argument_list|>
name|pingResponses
init|=
name|CollectionUtils
operator|.
name|iterableAsArrayList
argument_list|(
name|temporalResponses
argument_list|)
decl_stmt|;
name|pingResponses
operator|.
name|add
argument_list|(
name|createPingResponse
argument_list|(
name|contextProvider
operator|.
name|clusterState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UnicastPingResponse
name|unicastPingResponse
init|=
operator|new
name|UnicastPingResponse
argument_list|()
decl_stmt|;
name|unicastPingResponse
operator|.
name|id
operator|=
name|request
operator|.
name|id
expr_stmt|;
name|unicastPingResponse
operator|.
name|pingResponses
operator|=
name|pingResponses
operator|.
name|toArray
argument_list|(
operator|new
name|PingResponse
index|[
name|pingResponses
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
return|return
name|unicastPingResponse
return|;
block|}
DECL|class|UnicastPingRequestHandler
class|class
name|UnicastPingRequestHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|UnicastPingRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|UnicastPingRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|request
operator|.
name|pingResponse
operator|.
name|clusterName
argument_list|()
operator|.
name|equals
argument_list|(
name|clusterName
argument_list|)
condition|)
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|handlePingRequest
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"mismatched cluster names; request: [%s], local: [%s]"
argument_list|,
name|request
operator|.
name|pingResponse
operator|.
name|clusterName
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|clusterName
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|UnicastPingRequest
specifier|public
specifier|static
class|class
name|UnicastPingRequest
extends|extends
name|TransportRequest
block|{
DECL|field|id
name|int
name|id
decl_stmt|;
DECL|field|timeout
name|TimeValue
name|timeout
decl_stmt|;
DECL|field|pingResponse
name|PingResponse
name|pingResponse
decl_stmt|;
DECL|method|UnicastPingRequest
specifier|public
name|UnicastPingRequest
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|timeout
operator|=
operator|new
name|TimeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|pingResponse
operator|=
name|readPingResponse
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|pingResponse
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createPingResponse
specifier|private
name|PingResponse
name|createPingResponse
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|DiscoveryNodes
name|discoNodes
init|=
name|clusterState
operator|.
name|nodes
argument_list|()
decl_stmt|;
return|return
operator|new
name|PingResponse
argument_list|(
name|discoNodes
operator|.
name|getLocalNode
argument_list|()
argument_list|,
name|discoNodes
operator|.
name|getMasterNode
argument_list|()
argument_list|,
name|clusterState
argument_list|)
return|;
block|}
DECL|class|UnicastPingResponse
specifier|static
class|class
name|UnicastPingResponse
extends|extends
name|TransportResponse
block|{
DECL|field|id
name|int
name|id
decl_stmt|;
DECL|field|pingResponses
name|PingResponse
index|[]
name|pingResponses
decl_stmt|;
DECL|method|UnicastPingResponse
name|UnicastPingResponse
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|pingResponses
operator|=
operator|new
name|PingResponse
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pingResponses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pingResponses
index|[
name|i
index|]
operator|=
name|readPingResponse
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|pingResponses
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|PingResponse
name|pingResponse
range|:
name|pingResponses
control|)
block|{
name|pingResponse
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getVersion
specifier|protected
name|Version
name|getVersion
parameter_list|()
block|{
return|return
name|Version
operator|.
name|CURRENT
return|;
comment|// for tests
block|}
block|}
end_class

end_unit

