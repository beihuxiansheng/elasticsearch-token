begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen.ping
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
DECL|class|ZenPingService
specifier|public
class|class
name|ZenPingService
extends|extends
name|AbstractLifecycleComponent
block|{
DECL|field|zenPings
specifier|private
name|List
argument_list|<
name|ZenPing
argument_list|>
name|zenPings
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|ZenPingService
specifier|public
name|ZenPingService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Set
argument_list|<
name|ZenPing
argument_list|>
name|zenPings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|zenPings
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|zenPings
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|zenPings
specifier|public
name|List
argument_list|<
name|ZenPing
argument_list|>
name|zenPings
parameter_list|()
block|{
return|return
name|this
operator|.
name|zenPings
return|;
block|}
DECL|method|setPingContextProvider
specifier|public
name|void
name|setPingContextProvider
parameter_list|(
name|PingContextProvider
name|contextProvider
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't set nodes provider when started"
argument_list|)
throw|;
block|}
for|for
control|(
name|ZenPing
name|zenPing
range|:
name|zenPings
control|)
block|{
name|zenPing
operator|.
name|setPingContextProvider
argument_list|(
name|contextProvider
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
for|for
control|(
name|ZenPing
name|zenPing
range|:
name|zenPings
control|)
block|{
name|zenPing
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
for|for
control|(
name|ZenPing
name|zenPing
range|:
name|zenPings
control|)
block|{
name|zenPing
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{
for|for
control|(
name|ZenPing
name|zenPing
range|:
name|zenPings
control|)
block|{
name|zenPing
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pingAndWait
specifier|public
name|ZenPing
operator|.
name|PingCollection
name|pingAndWait
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
specifier|final
name|ZenPing
operator|.
name|PingCollection
name|response
init|=
operator|new
name|ZenPing
operator|.
name|PingCollection
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|zenPings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ZenPing
name|zenPing
range|:
name|zenPings
control|)
block|{
specifier|final
name|AtomicBoolean
name|counted
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
try|try
block|{
name|zenPing
operator|.
name|ping
argument_list|(
name|pings
lambda|->
block|{
name|response
operator|.
name|addPings
argument_list|(
name|pings
argument_list|)
expr_stmt|;
if|if
condition|(
name|counted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Ping execution failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|counted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"pingAndWait interrupted"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
block|}
end_class

end_unit

