begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|FailedNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|TransportNodesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|AsyncShardFetch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreFileMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|TransportNodesListShardStoreMetaData
specifier|public
class|class
name|TransportNodesListShardStoreMetaData
extends|extends
name|TransportNodesAction
argument_list|<
name|TransportNodesListShardStoreMetaData
operator|.
name|Request
argument_list|,
name|TransportNodesListShardStoreMetaData
operator|.
name|NodesStoreFilesMetaData
argument_list|,
name|TransportNodesListShardStoreMetaData
operator|.
name|NodeRequest
argument_list|,
name|TransportNodesListShardStoreMetaData
operator|.
name|NodeStoreFilesMetaData
argument_list|>
implements|implements
name|AsyncShardFetch
operator|.
name|Lister
argument_list|<
name|TransportNodesListShardStoreMetaData
operator|.
name|NodesStoreFilesMetaData
argument_list|,
name|TransportNodesListShardStoreMetaData
operator|.
name|NodeStoreFilesMetaData
argument_list|>
block|{
DECL|field|ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
literal|"internal:cluster/nodes/indices/shard/store"
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|nodeEnv
specifier|private
specifier|final
name|NodeEnvironment
name|nodeEnv
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportNodesListShardStoreMetaData
specifier|public
name|TransportNodesListShardStoreMetaData
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|NodeEnvironment
name|nodeEnv
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|ACTION_NAME
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|Request
operator|::
operator|new
argument_list|,
name|NodeRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|FETCH_SHARD_STORE
argument_list|,
name|NodeStoreFilesMetaData
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|nodeEnv
operator|=
name|nodeEnv
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|list
specifier|public
name|void
name|list
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|DiscoveryNode
index|[]
name|nodes
parameter_list|,
name|ActionListener
argument_list|<
name|NodesStoreFilesMetaData
argument_list|>
name|listener
parameter_list|)
block|{
name|execute
argument_list|(
operator|new
name|Request
argument_list|(
name|shardId
argument_list|,
name|nodes
argument_list|)
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newNodeRequest
specifier|protected
name|NodeRequest
name|newNodeRequest
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|Request
name|request
parameter_list|)
block|{
return|return
operator|new
name|NodeRequest
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newNodeResponse
specifier|protected
name|NodeStoreFilesMetaData
name|newNodeResponse
parameter_list|()
block|{
return|return
operator|new
name|NodeStoreFilesMetaData
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|protected
name|NodesStoreFilesMetaData
name|newResponse
parameter_list|(
name|Request
name|request
parameter_list|,
name|List
argument_list|<
name|NodeStoreFilesMetaData
argument_list|>
name|responses
parameter_list|,
name|List
argument_list|<
name|FailedNodeException
argument_list|>
name|failures
parameter_list|)
block|{
return|return
operator|new
name|NodesStoreFilesMetaData
argument_list|(
name|clusterService
operator|.
name|getClusterName
argument_list|()
argument_list|,
name|responses
argument_list|,
name|failures
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nodeOperation
specifier|protected
name|NodeStoreFilesMetaData
name|nodeOperation
parameter_list|(
name|NodeRequest
name|request
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|NodeStoreFilesMetaData
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|,
name|listStoreMetaData
argument_list|(
name|request
operator|.
name|shardId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Failed to list store metadata for shard ["
operator|+
name|request
operator|.
name|shardId
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|listStoreMetaData
specifier|private
name|StoreFilesMetaData
name|listStoreMetaData
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
throws|throws
name|IOException
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"listing store meta data for {}"
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|long
name|startTimeNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
try|try
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|!=
literal|null
condition|)
block|{
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShardOrNull
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexShard
operator|!=
literal|null
condition|)
block|{
name|exists
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|StoreFilesMetaData
argument_list|(
name|shardId
argument_list|,
name|indexShard
operator|.
name|snapshotStoreMetadata
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// try and see if we an list unallocated
name|IndexMetaData
name|metaData
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
comment|// we may send this requests while processing the cluster state that recovered the index
comment|// sometimes the request comes in before the local node processed that cluster state
comment|// in such cases we can load it from disk
name|metaData
operator|=
name|IndexMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|nodeEnv
operator|.
name|indexPaths
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} node doesn't have meta data for the requests index, responding with empty"
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
return|return
operator|new
name|StoreFilesMetaData
argument_list|(
name|shardId
argument_list|,
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
argument_list|)
return|;
block|}
specifier|final
name|IndexSettings
name|indexSettings
init|=
name|indexService
operator|!=
literal|null
condition|?
name|indexService
operator|.
name|getIndexSettings
argument_list|()
else|:
operator|new
name|IndexSettings
argument_list|(
name|metaData
argument_list|,
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|ShardPath
name|shardPath
init|=
name|ShardPath
operator|.
name|loadShardPath
argument_list|(
name|logger
argument_list|,
name|nodeEnv
argument_list|,
name|shardId
argument_list|,
name|indexSettings
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardPath
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|StoreFilesMetaData
argument_list|(
name|shardId
argument_list|,
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
argument_list|)
return|;
block|}
comment|// note that this may fail if it can't get access to the shard lock. Since we check above there is an active shard, this means:
comment|// 1) a shard is being constructed, which means the master will not use a copy of this replica
comment|// 2) A shard is shutting down and has not cleared it's content within lock timeout. In this case the master may not
comment|//    reuse local resources.
return|return
operator|new
name|StoreFilesMetaData
argument_list|(
name|shardId
argument_list|,
name|Store
operator|.
name|readMetadataSnapshot
argument_list|(
name|shardPath
operator|.
name|resolveIndex
argument_list|()
argument_list|,
name|shardId
argument_list|,
name|nodeEnv
operator|::
name|shardLock
argument_list|,
name|logger
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|TimeValue
name|took
init|=
operator|new
name|TimeValue
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTimeNS
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} loaded store meta data (took [{}])"
argument_list|,
name|shardId
argument_list|,
name|took
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} didn't find any store meta data to load (took [{}])"
argument_list|,
name|shardId
argument_list|,
name|took
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|accumulateExceptions
specifier|protected
name|boolean
name|accumulateExceptions
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|class|StoreFilesMetaData
specifier|public
specifier|static
class|class
name|StoreFilesMetaData
implements|implements
name|Iterable
argument_list|<
name|StoreFileMetaData
argument_list|>
implements|,
name|Streamable
block|{
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|field|metadataSnapshot
name|Store
operator|.
name|MetadataSnapshot
name|metadataSnapshot
decl_stmt|;
DECL|method|StoreFilesMetaData
name|StoreFilesMetaData
parameter_list|()
block|{         }
DECL|method|StoreFilesMetaData
specifier|public
name|StoreFilesMetaData
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Store
operator|.
name|MetadataSnapshot
name|metadataSnapshot
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|metadataSnapshot
operator|=
name|metadataSnapshot
expr_stmt|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|this
operator|.
name|shardId
return|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|metadataSnapshot
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|StoreFileMetaData
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|metadataSnapshot
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|fileExists
specifier|public
name|boolean
name|fileExists
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|metadataSnapshot
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|file
specifier|public
name|StoreFileMetaData
name|file
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|metadataSnapshot
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|readStoreFilesMetaData
specifier|public
specifier|static
name|StoreFilesMetaData
name|readStoreFilesMetaData
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFilesMetaData
name|md
init|=
operator|new
name|StoreFilesMetaData
argument_list|()
decl_stmt|;
name|md
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|md
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataSnapshot
operator|=
operator|new
name|Store
operator|.
name|MetadataSnapshot
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|metadataSnapshot
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**          * @return commit sync id if exists, else null          */
DECL|method|syncId
specifier|public
name|String
name|syncId
parameter_list|()
block|{
return|return
name|metadataSnapshot
operator|.
name|getSyncId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"StoreFilesMetaData{"
operator|+
literal|", shardId="
operator|+
name|shardId
operator|+
literal|", metadataSnapshot{size="
operator|+
name|metadataSnapshot
operator|.
name|size
argument_list|()
operator|+
literal|", syncId="
operator|+
name|metadataSnapshot
operator|.
name|getSyncId
argument_list|()
operator|+
literal|"}"
operator|+
literal|'}'
return|;
block|}
block|}
DECL|class|Request
specifier|public
specifier|static
class|class
name|Request
extends|extends
name|BaseNodesRequest
argument_list|<
name|Request
argument_list|>
block|{
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|method|Request
specifier|public
name|Request
parameter_list|()
block|{         }
DECL|method|Request
specifier|public
name|Request
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|DiscoveryNode
index|[]
name|nodes
parameter_list|)
block|{
name|super
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NodesStoreFilesMetaData
specifier|public
specifier|static
class|class
name|NodesStoreFilesMetaData
extends|extends
name|BaseNodesResponse
argument_list|<
name|NodeStoreFilesMetaData
argument_list|>
block|{
DECL|method|NodesStoreFilesMetaData
name|NodesStoreFilesMetaData
parameter_list|()
block|{         }
DECL|method|NodesStoreFilesMetaData
specifier|public
name|NodesStoreFilesMetaData
parameter_list|(
name|ClusterName
name|clusterName
parameter_list|,
name|List
argument_list|<
name|NodeStoreFilesMetaData
argument_list|>
name|nodes
parameter_list|,
name|List
argument_list|<
name|FailedNodeException
argument_list|>
name|failures
parameter_list|)
block|{
name|super
argument_list|(
name|clusterName
argument_list|,
name|nodes
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readNodesFrom
specifier|protected
name|List
argument_list|<
name|NodeStoreFilesMetaData
argument_list|>
name|readNodesFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|readList
argument_list|(
name|NodeStoreFilesMetaData
operator|::
name|readListShardStoreNodeOperationResponse
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeNodesTo
specifier|protected
name|void
name|writeNodesTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|List
argument_list|<
name|NodeStoreFilesMetaData
argument_list|>
name|nodes
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeStreamableList
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NodeRequest
specifier|public
specifier|static
class|class
name|NodeRequest
extends|extends
name|BaseNodeRequest
block|{
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|method|NodeRequest
specifier|public
name|NodeRequest
parameter_list|()
block|{         }
DECL|method|NodeRequest
name|NodeRequest
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|TransportNodesListShardStoreMetaData
operator|.
name|Request
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|request
operator|.
name|shardId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NodeStoreFilesMetaData
specifier|public
specifier|static
class|class
name|NodeStoreFilesMetaData
extends|extends
name|BaseNodeResponse
block|{
DECL|field|storeFilesMetaData
specifier|private
name|StoreFilesMetaData
name|storeFilesMetaData
decl_stmt|;
DECL|method|NodeStoreFilesMetaData
name|NodeStoreFilesMetaData
parameter_list|()
block|{         }
DECL|method|NodeStoreFilesMetaData
specifier|public
name|NodeStoreFilesMetaData
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|StoreFilesMetaData
name|storeFilesMetaData
parameter_list|)
block|{
name|super
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|storeFilesMetaData
operator|=
name|storeFilesMetaData
expr_stmt|;
block|}
DECL|method|storeFilesMetaData
specifier|public
name|StoreFilesMetaData
name|storeFilesMetaData
parameter_list|()
block|{
return|return
name|storeFilesMetaData
return|;
block|}
DECL|method|readListShardStoreNodeOperationResponse
specifier|public
specifier|static
name|NodeStoreFilesMetaData
name|readListShardStoreNodeOperationResponse
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeStoreFilesMetaData
name|resp
init|=
operator|new
name|NodeStoreFilesMetaData
argument_list|()
decl_stmt|;
name|resp
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|resp
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|storeFilesMetaData
operator|=
name|StoreFilesMetaData
operator|.
name|readStoreFilesMetaData
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|storeFilesMetaData
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[["
operator|+
name|getNode
argument_list|()
operator|+
literal|"]["
operator|+
name|storeFilesMetaData
operator|+
literal|"]]"
return|;
block|}
block|}
block|}
end_class

end_unit

