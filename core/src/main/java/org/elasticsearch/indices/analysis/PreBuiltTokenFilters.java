begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|LowerCaseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|MultiTermAwareComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltCacheFactory
operator|.
name|CachingStrategy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_enum
DECL|enum|PreBuiltTokenFilters
specifier|public
enum|enum
name|PreBuiltTokenFilters
block|{
comment|// TODO remove this entire class when PreBuiltTokenizers no longer needs it.....
DECL|method|LOWERCASE
DECL|method|LOWERCASE
name|LOWERCASE
parameter_list|(
name|CachingStrategy
operator|.
name|LUCENE
parameter_list|)
block|{
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
return|return
operator|new
name|LowerCaseFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isMultiTermAware
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|;
DECL|method|isMultiTermAware
specifier|protected
name|boolean
name|isMultiTermAware
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|create
specifier|public
specifier|abstract
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|,
name|Version
name|version
parameter_list|)
function_decl|;
DECL|field|cache
specifier|protected
specifier|final
name|PreBuiltCacheFactory
operator|.
name|PreBuiltCache
argument_list|<
name|TokenFilterFactory
argument_list|>
name|cache
decl_stmt|;
DECL|field|cachingStrategy
specifier|private
specifier|final
name|CachingStrategy
name|cachingStrategy
decl_stmt|;
DECL|method|PreBuiltTokenFilters
name|PreBuiltTokenFilters
parameter_list|(
name|CachingStrategy
name|cachingStrategy
parameter_list|)
block|{
name|this
operator|.
name|cachingStrategy
operator|=
name|cachingStrategy
expr_stmt|;
name|cache
operator|=
name|PreBuiltCacheFactory
operator|.
name|getCache
argument_list|(
name|cachingStrategy
argument_list|)
expr_stmt|;
block|}
DECL|method|getCachingStrategy
specifier|public
name|CachingStrategy
name|getCachingStrategy
parameter_list|()
block|{
return|return
name|cachingStrategy
return|;
block|}
DECL|interface|MultiTermAwareTokenFilterFactory
specifier|private
interface|interface
name|MultiTermAwareTokenFilterFactory
extends|extends
name|TokenFilterFactory
extends|,
name|MultiTermAwareComponent
block|{}
DECL|method|getTokenFilterFactory
specifier|public
specifier|synchronized
name|TokenFilterFactory
name|getTokenFilterFactory
parameter_list|(
specifier|final
name|Version
name|version
parameter_list|)
block|{
name|TokenFilterFactory
name|factory
init|=
name|cache
operator|.
name|get
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|finalName
init|=
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMultiTermAware
argument_list|()
condition|)
block|{
name|factory
operator|=
operator|new
name|MultiTermAwareTokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|finalName
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
name|PreBuiltTokenFilters
operator|.
name|this
operator|.
name|create
argument_list|(
name|tokenStream
argument_list|,
name|version
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getMultiTermComponent
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|factory
operator|=
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|finalName
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
name|PreBuiltTokenFilters
operator|.
name|this
operator|.
name|create
argument_list|(
name|tokenStream
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
name|cache
operator|.
name|put
argument_list|(
name|version
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
block|}
end_enum

end_unit

