begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.breaker
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Stats class encapsulating all of the different circuit breaker stats  */
end_comment

begin_class
DECL|class|AllCircuitBreakerStats
specifier|public
class|class
name|AllCircuitBreakerStats
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
DECL|field|allStats
specifier|private
specifier|final
name|CircuitBreakerStats
index|[]
name|allStats
decl_stmt|;
DECL|method|AllCircuitBreakerStats
specifier|public
name|AllCircuitBreakerStats
parameter_list|(
name|CircuitBreakerStats
index|[]
name|allStats
parameter_list|)
block|{
name|this
operator|.
name|allStats
operator|=
name|allStats
expr_stmt|;
block|}
DECL|method|AllCircuitBreakerStats
specifier|public
name|AllCircuitBreakerStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|allStats
operator|=
name|in
operator|.
name|readArray
argument_list|(
name|CircuitBreakerStats
operator|::
operator|new
argument_list|,
name|CircuitBreakerStats
index|[]
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeArray
argument_list|(
name|allStats
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllStats
specifier|public
name|CircuitBreakerStats
index|[]
name|getAllStats
parameter_list|()
block|{
return|return
name|this
operator|.
name|allStats
return|;
block|}
DECL|method|getStats
specifier|public
name|CircuitBreakerStats
name|getStats
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|CircuitBreakerStats
name|stats
range|:
name|allStats
control|)
block|{
if|if
condition|(
name|stats
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|stats
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|BREAKERS
argument_list|)
expr_stmt|;
for|for
control|(
name|CircuitBreakerStats
name|stats
range|:
name|allStats
control|)
block|{
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|stats
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|BREAKERS
specifier|static
specifier|final
name|String
name|BREAKERS
init|=
literal|"breakers"
decl_stmt|;
block|}
block|}
end_class

end_unit

