begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.breaker
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Class encapsulating stats about the circuit breaker  */
end_comment

begin_class
DECL|class|CircuitBreakerStats
specifier|public
class|class
name|CircuitBreakerStats
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|limit
specifier|private
name|long
name|limit
decl_stmt|;
DECL|field|estimated
specifier|private
name|long
name|estimated
decl_stmt|;
DECL|field|trippedCount
specifier|private
name|long
name|trippedCount
decl_stmt|;
DECL|field|overhead
specifier|private
name|double
name|overhead
decl_stmt|;
DECL|method|CircuitBreakerStats
name|CircuitBreakerStats
parameter_list|()
block|{      }
DECL|method|CircuitBreakerStats
specifier|public
name|CircuitBreakerStats
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|limit
parameter_list|,
name|long
name|estimated
parameter_list|,
name|double
name|overhead
parameter_list|,
name|long
name|trippedCount
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|estimated
operator|=
name|estimated
expr_stmt|;
name|this
operator|.
name|trippedCount
operator|=
name|trippedCount
expr_stmt|;
name|this
operator|.
name|overhead
operator|=
name|overhead
expr_stmt|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|getLimit
specifier|public
name|long
name|getLimit
parameter_list|()
block|{
return|return
name|this
operator|.
name|limit
return|;
block|}
DECL|method|getEstimated
specifier|public
name|long
name|getEstimated
parameter_list|()
block|{
return|return
name|this
operator|.
name|estimated
return|;
block|}
DECL|method|getTrippedCount
specifier|public
name|long
name|getTrippedCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|trippedCount
return|;
block|}
DECL|method|getOverhead
specifier|public
name|double
name|getOverhead
parameter_list|()
block|{
return|return
name|this
operator|.
name|overhead
return|;
block|}
DECL|method|readOptionalCircuitBreakerStats
specifier|public
specifier|static
name|CircuitBreakerStats
name|readOptionalCircuitBreakerStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|CircuitBreakerStats
name|stats
init|=
name|in
operator|.
name|readOptionalStreamable
argument_list|(
name|CircuitBreakerStats
operator|::
operator|new
argument_list|)
decl_stmt|;
return|return
name|stats
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// limit is the maximum from the old circuit breaker stats for backwards compatibility
name|limit
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|estimated
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|overhead
operator|=
name|in
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|this
operator|.
name|trippedCount
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|estimated
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
name|overhead
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|trippedCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|LIMIT
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|LIMIT_HUMAN
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ESTIMATED
argument_list|,
name|estimated
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ESTIMATED_HUMAN
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|estimated
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|OVERHEAD
argument_list|,
name|overhead
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TRIPPED_COUNT
argument_list|,
name|trippedCount
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|this
operator|.
name|name
operator|+
literal|",limit="
operator|+
name|this
operator|.
name|limit
operator|+
literal|"/"
operator|+
operator|new
name|ByteSizeValue
argument_list|(
name|this
operator|.
name|limit
argument_list|)
operator|+
literal|",estimated="
operator|+
name|this
operator|.
name|estimated
operator|+
literal|"/"
operator|+
operator|new
name|ByteSizeValue
argument_list|(
name|this
operator|.
name|estimated
argument_list|)
operator|+
literal|",overhead="
operator|+
name|this
operator|.
name|overhead
operator|+
literal|",tripped="
operator|+
name|this
operator|.
name|trippedCount
operator|+
literal|"]"
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|LIMIT
specifier|static
specifier|final
name|String
name|LIMIT
init|=
literal|"limit_size_in_bytes"
decl_stmt|;
DECL|field|LIMIT_HUMAN
specifier|static
specifier|final
name|String
name|LIMIT_HUMAN
init|=
literal|"limit_size"
decl_stmt|;
DECL|field|ESTIMATED
specifier|static
specifier|final
name|String
name|ESTIMATED
init|=
literal|"estimated_size_in_bytes"
decl_stmt|;
DECL|field|ESTIMATED_HUMAN
specifier|static
specifier|final
name|String
name|ESTIMATED_HUMAN
init|=
literal|"estimated_size"
decl_stmt|;
DECL|field|OVERHEAD
specifier|static
specifier|final
name|String
name|OVERHEAD
init|=
literal|"overhead"
decl_stmt|;
DECL|field|TRIPPED_COUNT
specifier|static
specifier|final
name|String
name|TRIPPED_COUNT
init|=
literal|"tripped"
decl_stmt|;
block|}
block|}
end_class

end_unit

