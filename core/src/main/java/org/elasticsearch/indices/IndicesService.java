begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|CommonStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|CommonStatsFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|CommonStatsFlags
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|IndexShardStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|ShardStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreaker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableAwareStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|IndexScopedSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|iterable
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|ShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|MetaDataStateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|MetaStateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|NodeServicesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|request
operator|.
name|ShardRequestCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|flush
operator|.
name|FlushStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|MergeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|recovery
operator|.
name|RecoveryStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|refresh
operator|.
name|RefreshStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|stats
operator|.
name|SearchStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IllegalIndexShardStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexingOperationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexingStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|IndexStoreConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|fielddata
operator|.
name|cache
operator|.
name|IndicesFieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|mapper
operator|.
name|MapperRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|query
operator|.
name|IndicesQueriesRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|PluginsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ShardSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
operator|.
name|newMapBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|arrayAsArrayList
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|IndicesService
specifier|public
class|class
name|IndicesService
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|IndicesService
argument_list|>
implements|implements
name|Iterable
argument_list|<
name|IndexService
argument_list|>
implements|,
name|IndexService
operator|.
name|ShardStoreDeleter
block|{
DECL|field|INDICES_SHARDS_CLOSED_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|INDICES_SHARDS_CLOSED_TIMEOUT
init|=
literal|"indices.shards_closed_timeout"
decl_stmt|;
DECL|field|INDICES_CACHE_CLEAN_INTERVAL_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|INDICES_CACHE_CLEAN_INTERVAL_SETTING
init|=
name|Setting
operator|.
name|positiveTimeSetting
argument_list|(
literal|"indices.cache.cleanup_interval"
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|pluginsService
specifier|private
specifier|final
name|PluginsService
name|pluginsService
decl_stmt|;
DECL|field|nodeEnv
specifier|private
specifier|final
name|NodeEnvironment
name|nodeEnv
decl_stmt|;
DECL|field|shardsClosedTimeout
specifier|private
specifier|final
name|TimeValue
name|shardsClosedTimeout
decl_stmt|;
DECL|field|analysisRegistry
specifier|private
specifier|final
name|AnalysisRegistry
name|analysisRegistry
decl_stmt|;
DECL|field|indicesQueriesRegistry
specifier|private
specifier|final
name|IndicesQueriesRegistry
name|indicesQueriesRegistry
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indexNameExpressionResolver
specifier|private
specifier|final
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
decl_stmt|;
DECL|field|indexScopeSetting
specifier|private
specifier|final
name|IndexScopedSettings
name|indexScopeSetting
decl_stmt|;
DECL|field|indicesFieldDataCache
specifier|private
specifier|final
name|IndicesFieldDataCache
name|indicesFieldDataCache
decl_stmt|;
DECL|field|cacheCleaner
specifier|private
specifier|final
name|CacheCleaner
name|cacheCleaner
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|circuitBreakerService
specifier|private
specifier|final
name|CircuitBreakerService
name|circuitBreakerService
decl_stmt|;
DECL|field|indices
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|IndexService
argument_list|>
name|indices
init|=
name|emptyMap
argument_list|()
decl_stmt|;
DECL|field|pendingDeletes
specifier|private
specifier|final
name|Map
argument_list|<
name|Index
argument_list|,
name|List
argument_list|<
name|PendingDelete
argument_list|>
argument_list|>
name|pendingDeletes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|oldShardsStats
specifier|private
specifier|final
name|OldShardsStats
name|oldShardsStats
init|=
operator|new
name|OldShardsStats
argument_list|()
decl_stmt|;
DECL|field|indexStoreConfig
specifier|private
specifier|final
name|IndexStoreConfig
name|indexStoreConfig
decl_stmt|;
DECL|field|mapperRegistry
specifier|private
specifier|final
name|MapperRegistry
name|mapperRegistry
decl_stmt|;
DECL|field|namedWriteableRegistry
specifier|private
specifier|final
name|NamedWriteableRegistry
name|namedWriteableRegistry
decl_stmt|;
DECL|field|indexingMemoryController
specifier|private
specifier|final
name|IndexingMemoryController
name|indexingMemoryController
decl_stmt|;
DECL|field|cleanInterval
specifier|private
specifier|final
name|TimeValue
name|cleanInterval
decl_stmt|;
DECL|field|indicesRequestCache
specifier|private
specifier|final
name|IndicesRequestCache
name|indicesRequestCache
decl_stmt|;
DECL|field|indicesQueryCache
specifier|private
specifier|final
name|IndicesQueryCache
name|indicesQueryCache
decl_stmt|;
DECL|field|metaStateService
specifier|private
specifier|final
name|MetaStateService
name|metaStateService
decl_stmt|;
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
comment|// Start thread that will manage cleaning the field data cache periodically
name|threadPool
operator|.
name|schedule
argument_list|(
name|this
operator|.
name|cleanInterval
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
name|this
operator|.
name|cacheCleaner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|IndicesService
specifier|public
name|IndicesService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|PluginsService
name|pluginsService
parameter_list|,
name|NodeEnvironment
name|nodeEnv
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|,
name|AnalysisRegistry
name|analysisRegistry
parameter_list|,
name|IndicesQueriesRegistry
name|indicesQueriesRegistry
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|MapperRegistry
name|mapperRegistry
parameter_list|,
name|NamedWriteableRegistry
name|namedWriteableRegistry
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|IndexScopedSettings
name|indexScopedSettings
parameter_list|,
name|CircuitBreakerService
name|circuitBreakerService
parameter_list|,
name|MetaStateService
name|metaStateService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|pluginsService
operator|=
name|pluginsService
expr_stmt|;
name|this
operator|.
name|nodeEnv
operator|=
name|nodeEnv
expr_stmt|;
name|this
operator|.
name|shardsClosedTimeout
operator|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|INDICES_SHARDS_CLOSED_TIMEOUT
argument_list|,
operator|new
name|TimeValue
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexStoreConfig
operator|=
operator|new
name|IndexStoreConfig
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|analysisRegistry
operator|=
name|analysisRegistry
expr_stmt|;
name|this
operator|.
name|indicesQueriesRegistry
operator|=
name|indicesQueriesRegistry
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indexNameExpressionResolver
operator|=
name|indexNameExpressionResolver
expr_stmt|;
name|this
operator|.
name|indicesRequestCache
operator|=
operator|new
name|IndicesRequestCache
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesQueryCache
operator|=
operator|new
name|IndicesQueryCache
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapperRegistry
operator|=
name|mapperRegistry
expr_stmt|;
name|this
operator|.
name|namedWriteableRegistry
operator|=
name|namedWriteableRegistry
expr_stmt|;
name|clusterSettings
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|IndexStoreConfig
operator|.
name|INDICES_STORE_THROTTLE_TYPE_SETTING
argument_list|,
name|indexStoreConfig
operator|::
name|setRateLimitingType
argument_list|)
expr_stmt|;
name|clusterSettings
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|IndexStoreConfig
operator|.
name|INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC_SETTING
argument_list|,
name|indexStoreConfig
operator|::
name|setRateLimitingThrottle
argument_list|)
expr_stmt|;
name|indexingMemoryController
operator|=
operator|new
name|IndexingMemoryController
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
comment|// ensure we pull an iter with new shards - flatten makes a copy
parameter_list|()
lambda|->
name|Iterables
operator|.
name|flatten
argument_list|(
name|this
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexScopeSetting
operator|=
name|indexScopedSettings
expr_stmt|;
name|this
operator|.
name|circuitBreakerService
operator|=
name|circuitBreakerService
expr_stmt|;
name|this
operator|.
name|indicesFieldDataCache
operator|=
operator|new
name|IndicesFieldDataCache
argument_list|(
name|settings
argument_list|,
operator|new
name|IndexFieldDataCache
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRemoval
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|wasEvicted
parameter_list|,
name|long
name|sizeInBytes
parameter_list|)
block|{
assert|assert
name|sizeInBytes
operator|>=
literal|0
operator|:
literal|"When reducing circuit breaker, it should be adjusted with a number higher or equal to 0 and not ["
operator|+
name|sizeInBytes
operator|+
literal|"]"
assert|;
name|circuitBreakerService
operator|.
name|getBreaker
argument_list|(
name|CircuitBreaker
operator|.
name|FIELDDATA
argument_list|)
operator|.
name|addWithoutBreaking
argument_list|(
operator|-
name|sizeInBytes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|cleanInterval
operator|=
name|INDICES_CACHE_CLEAN_INTERVAL_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheCleaner
operator|=
operator|new
name|CacheCleaner
argument_list|(
name|indicesFieldDataCache
argument_list|,
name|indicesRequestCache
argument_list|,
name|logger
argument_list|,
name|threadPool
argument_list|,
name|this
operator|.
name|cleanInterval
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaStateService
operator|=
name|metaStateService
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|ExecutorService
name|indicesStopExecutor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|5
argument_list|,
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
literal|"indices_shutdown"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Copy indices because we modify it asynchronously in the body of the loop
specifier|final
name|Set
argument_list|<
name|Index
argument_list|>
name|indices
init|=
name|this
operator|.
name|indices
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|indices
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Index
name|index
range|:
name|indices
control|)
block|{
name|indicesStopExecutor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|removeIndex
argument_list|(
name|index
argument_list|,
literal|"shutdown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to remove index on stop [{}]"
argument_list|,
name|e
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|latch
operator|.
name|await
argument_list|(
name|shardsClosedTimeout
operator|.
name|seconds
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Not all shards are closed yet, waited {}sec - stopping service"
argument_list|,
name|shardsClosedTimeout
operator|.
name|seconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
finally|finally
block|{
name|indicesStopExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|analysisRegistry
argument_list|,
name|indexingMemoryController
argument_list|,
name|indicesFieldDataCache
argument_list|,
name|cacheCleaner
argument_list|,
name|indicesRequestCache
argument_list|,
name|indicesQueryCache
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the node stats indices stats. The<tt>includePrevious</tt> flag controls      * if old shards stats will be aggregated as well (only for relevant stats, such as      * refresh and indexing, not for docs/store).      */
DECL|method|stats
specifier|public
name|NodeIndicesStats
name|stats
parameter_list|(
name|boolean
name|includePrevious
parameter_list|)
block|{
return|return
name|stats
argument_list|(
name|includePrevious
argument_list|,
operator|new
name|CommonStatsFlags
argument_list|()
operator|.
name|all
argument_list|()
argument_list|)
return|;
block|}
DECL|method|stats
specifier|public
name|NodeIndicesStats
name|stats
parameter_list|(
name|boolean
name|includePrevious
parameter_list|,
name|CommonStatsFlags
name|flags
parameter_list|)
block|{
name|CommonStats
name|oldStats
init|=
operator|new
name|CommonStats
argument_list|(
name|flags
argument_list|)
decl_stmt|;
if|if
condition|(
name|includePrevious
condition|)
block|{
name|Flag
index|[]
name|setFlags
init|=
name|flags
operator|.
name|getFlags
argument_list|()
decl_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|setFlags
control|)
block|{
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|Get
case|:
name|oldStats
operator|.
name|get
operator|.
name|add
argument_list|(
name|oldShardsStats
operator|.
name|getStats
argument_list|)
expr_stmt|;
break|break;
case|case
name|Indexing
case|:
name|oldStats
operator|.
name|indexing
operator|.
name|add
argument_list|(
name|oldShardsStats
operator|.
name|indexingStats
argument_list|)
expr_stmt|;
break|break;
case|case
name|Search
case|:
name|oldStats
operator|.
name|search
operator|.
name|add
argument_list|(
name|oldShardsStats
operator|.
name|searchStats
argument_list|)
expr_stmt|;
break|break;
case|case
name|Merge
case|:
name|oldStats
operator|.
name|merge
operator|.
name|add
argument_list|(
name|oldShardsStats
operator|.
name|mergeStats
argument_list|)
expr_stmt|;
break|break;
case|case
name|Refresh
case|:
name|oldStats
operator|.
name|refresh
operator|.
name|add
argument_list|(
name|oldShardsStats
operator|.
name|refreshStats
argument_list|)
expr_stmt|;
break|break;
case|case
name|Recovery
case|:
name|oldStats
operator|.
name|recoveryStats
operator|.
name|add
argument_list|(
name|oldShardsStats
operator|.
name|recoveryStats
argument_list|)
expr_stmt|;
break|break;
case|case
name|Flush
case|:
name|oldStats
operator|.
name|flush
operator|.
name|add
argument_list|(
name|oldShardsStats
operator|.
name|flushStats
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Map
argument_list|<
name|Index
argument_list|,
name|List
argument_list|<
name|IndexShardStats
argument_list|>
argument_list|>
name|statsByShard
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexService
name|indexService
range|:
name|this
control|)
block|{
for|for
control|(
name|IndexShard
name|indexShard
range|:
name|indexService
control|)
block|{
try|try
block|{
if|if
condition|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|IndexShardStats
name|indexShardStats
init|=
operator|new
name|IndexShardStats
argument_list|(
name|indexShard
operator|.
name|shardId
argument_list|()
argument_list|,
operator|new
name|ShardStats
index|[]
block|{
operator|new
name|ShardStats
argument_list|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|indexShard
operator|.
name|shardPath
argument_list|()
argument_list|,
operator|new
name|CommonStats
argument_list|(
name|indicesQueryCache
argument_list|,
name|indexShard
argument_list|,
name|flags
argument_list|)
argument_list|,
name|indexShard
operator|.
name|commitStats
argument_list|()
argument_list|,
name|indexShard
operator|.
name|seqNoStats
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|statsByShard
operator|.
name|containsKey
argument_list|(
name|indexService
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|statsByShard
operator|.
name|put
argument_list|(
name|indexService
operator|.
name|index
argument_list|()
argument_list|,
name|arrayAsArrayList
argument_list|(
name|indexShardStats
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statsByShard
operator|.
name|get
argument_list|(
name|indexService
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|indexShardStats
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{
comment|// we can safely ignore illegal state on ones that are closing for example
name|logger
operator|.
name|trace
argument_list|(
literal|"{} ignoring shard stats"
argument_list|,
name|e
argument_list|,
name|indexShard
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|NodeIndicesStats
argument_list|(
name|oldStats
argument_list|,
name|statsByShard
argument_list|)
return|;
block|}
comment|/**      * Returns<tt>true</tt> if changes (adding / removing) indices, shards and so on are allowed.      */
DECL|method|changesAllowed
specifier|public
name|boolean
name|changesAllowed
parameter_list|()
block|{
comment|// we check on stop here since we defined stop when we delete the indices
return|return
name|lifecycle
operator|.
name|started
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|IndexService
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|indices
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|hasIndex
specifier|public
name|boolean
name|hasIndex
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
return|return
name|indices
operator|.
name|containsKey
argument_list|(
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns an IndexService for the specified index if exists otherwise returns<code>null</code>.      *      */
annotation|@
name|Nullable
DECL|method|indexService
specifier|public
name|IndexService
name|indexService
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
return|return
name|indices
operator|.
name|get
argument_list|(
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns an IndexService for the specified index if exists otherwise a {@link IndexNotFoundException} is thrown.      */
DECL|method|indexServiceSafe
specifier|public
name|IndexService
name|indexServiceSafe
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
name|IndexService
name|indexService
init|=
name|indices
operator|.
name|get
argument_list|(
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexNotFoundException
argument_list|(
name|index
argument_list|)
throw|;
block|}
assert|assert
name|indexService
operator|.
name|indexUUID
argument_list|()
operator|.
name|equals
argument_list|(
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|:
literal|"uuid mismatch local: "
operator|+
name|indexService
operator|.
name|indexUUID
argument_list|()
operator|+
literal|" incoming: "
operator|+
name|index
operator|.
name|getUUID
argument_list|()
assert|;
return|return
name|indexService
return|;
block|}
comment|/**      * Creates a new {@link IndexService} for the given metadata.      * @param indexMetaData the index metadata to create the index for      * @param builtInListeners a list of built-in lifecycle {@link IndexEventListener} that should should be used along side with the per-index listeners      * @throws IndexAlreadyExistsException if the index already exists.      */
DECL|method|createIndex
specifier|public
specifier|synchronized
name|IndexService
name|createIndex
parameter_list|(
specifier|final
name|NodeServicesProvider
name|nodeServicesProvider
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|List
argument_list|<
name|IndexEventListener
argument_list|>
name|builtInListeners
parameter_list|,
name|Consumer
argument_list|<
name|ShardId
argument_list|>
name|globalCheckpointSyncer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't create an index ["
operator|+
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|+
literal|"], node is closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|indexMetaData
operator|.
name|getIndexUUID
argument_list|()
operator|.
name|equals
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"index must have a real UUID found value: ["
operator|+
name|indexMetaData
operator|.
name|getIndexUUID
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|Index
name|index
init|=
name|indexMetaData
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IndexAlreadyExistsException
argument_list|(
name|index
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|IndexEventListener
argument_list|>
name|finalListeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|builtInListeners
argument_list|)
decl_stmt|;
specifier|final
name|IndexEventListener
name|onStoreClose
init|=
operator|new
name|IndexEventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onStoreClosed
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|indicesQueryCache
operator|.
name|onClose
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|finalListeners
operator|.
name|add
argument_list|(
name|onStoreClose
argument_list|)
expr_stmt|;
name|finalListeners
operator|.
name|add
argument_list|(
name|oldShardsStats
argument_list|)
expr_stmt|;
specifier|final
name|IndexService
name|indexService
init|=
name|createIndexService
argument_list|(
literal|"create index"
argument_list|,
name|nodeServicesProvider
argument_list|,
name|indexMetaData
argument_list|,
name|indicesQueryCache
argument_list|,
name|indicesFieldDataCache
argument_list|,
name|finalListeners
argument_list|,
name|globalCheckpointSyncer
argument_list|,
name|indexingMemoryController
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|indexService
operator|.
name|getIndexEventListener
argument_list|()
operator|.
name|afterIndexCreated
argument_list|(
name|indexService
argument_list|)
expr_stmt|;
name|indices
operator|=
name|newMapBuilder
argument_list|(
name|indices
argument_list|)
operator|.
name|put
argument_list|(
name|index
operator|.
name|getUUID
argument_list|()
argument_list|,
name|indexService
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|indexService
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|indexService
operator|.
name|close
argument_list|(
literal|"plugins_failed"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This creates a new IndexService without registering it      */
DECL|method|createIndexService
specifier|private
specifier|synchronized
name|IndexService
name|createIndexService
parameter_list|(
specifier|final
name|String
name|reason
parameter_list|,
specifier|final
name|NodeServicesProvider
name|nodeServicesProvider
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|IndicesQueryCache
name|indicesQueryCache
parameter_list|,
name|IndicesFieldDataCache
name|indicesFieldDataCache
parameter_list|,
name|List
argument_list|<
name|IndexEventListener
argument_list|>
name|builtInListeners
parameter_list|,
name|Consumer
argument_list|<
name|ShardId
argument_list|>
name|globalCheckpointSyncer
parameter_list|,
name|IndexingOperationListener
modifier|...
name|indexingOperationListeners
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Index
name|index
init|=
name|indexMetaData
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|indexNameMatcher
init|=
parameter_list|(
name|indexExpression
parameter_list|)
lambda|->
name|indexNameExpressionResolver
operator|.
name|matchesIndex
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|,
name|indexExpression
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexSettings
name|idxSettings
init|=
operator|new
name|IndexSettings
argument_list|(
name|indexMetaData
argument_list|,
name|this
operator|.
name|settings
argument_list|,
name|indexNameMatcher
argument_list|,
name|indexScopeSetting
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"creating Index [{}], shards [{}]/[{}{}] - reason [{}]"
argument_list|,
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|,
name|idxSettings
operator|.
name|getNumberOfShards
argument_list|()
argument_list|,
name|idxSettings
operator|.
name|getNumberOfReplicas
argument_list|()
argument_list|,
name|idxSettings
operator|.
name|isShadowReplicaIndex
argument_list|()
condition|?
literal|"s"
else|:
literal|""
argument_list|,
name|reason
argument_list|)
expr_stmt|;
specifier|final
name|IndexModule
name|indexModule
init|=
operator|new
name|IndexModule
argument_list|(
name|idxSettings
argument_list|,
name|indexStoreConfig
argument_list|,
name|analysisRegistry
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexingOperationListener
name|operationListener
range|:
name|indexingOperationListeners
control|)
block|{
name|indexModule
operator|.
name|addIndexOperationListener
argument_list|(
name|operationListener
argument_list|)
expr_stmt|;
block|}
name|pluginsService
operator|.
name|onIndexModule
argument_list|(
name|indexModule
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexEventListener
name|listener
range|:
name|builtInListeners
control|)
block|{
name|indexModule
operator|.
name|addIndexEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
return|return
name|indexModule
operator|.
name|newIndexService
argument_list|(
name|nodeEnv
argument_list|,
name|this
argument_list|,
name|nodeServicesProvider
argument_list|,
name|indicesQueryCache
argument_list|,
name|mapperRegistry
argument_list|,
name|globalCheckpointSyncer
argument_list|,
name|indicesFieldDataCache
argument_list|)
return|;
block|}
comment|/**      * This method verifies that the given {@link IndexMetaData} holds sane values to create an {@link IndexService}. This method will throw an      * exception if the creation fails. The created {@link IndexService} will not be registered and will be closed immediately.      */
DECL|method|verifyIndexMetadata
specifier|public
specifier|synchronized
name|void
name|verifyIndexMetadata
parameter_list|(
specifier|final
name|NodeServicesProvider
name|nodeServicesProvider
parameter_list|,
name|IndexMetaData
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Closeable
argument_list|>
name|closeables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|IndicesFieldDataCache
name|indicesFieldDataCache
init|=
operator|new
name|IndicesFieldDataCache
argument_list|(
name|settings
argument_list|,
operator|new
name|IndexFieldDataCache
operator|.
name|Listener
argument_list|()
block|{}
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|indicesFieldDataCache
argument_list|)
expr_stmt|;
name|IndicesQueryCache
name|indicesQueryCache
init|=
operator|new
name|IndicesQueryCache
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|add
argument_list|(
name|indicesQueryCache
argument_list|)
expr_stmt|;
comment|// this will also fail if some plugin fails etc. which is nice since we can verify that early
specifier|final
name|IndexService
name|service
init|=
name|createIndexService
argument_list|(
literal|"metadata verification"
argument_list|,
name|nodeServicesProvider
argument_list|,
name|metaData
argument_list|,
name|indicesQueryCache
argument_list|,
name|indicesFieldDataCache
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|s
lambda|->
block|{}
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|MappingMetaData
argument_list|>
name|typeMapping
range|:
name|metaData
operator|.
name|getMappings
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
comment|// don't apply the default mapping, it has been applied when the mapping was created
name|service
operator|.
name|mapperService
argument_list|()
operator|.
name|merge
argument_list|(
name|typeMapping
operator|.
name|value
operator|.
name|type
argument_list|()
argument_list|,
name|typeMapping
operator|.
name|value
operator|.
name|source
argument_list|()
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_RECOVERY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|closeables
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|service
operator|.
name|close
argument_list|(
literal|"metadata verification"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|closeables
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes the given index from this service and releases all associated resources. Persistent parts of the index      * like the shards files, state and transaction logs are kept around in the case of a disaster recovery.      * @param index the index to remove      * @param reason  the high level reason causing this removal      */
DECL|method|removeIndex
specifier|public
name|void
name|removeIndex
parameter_list|(
name|Index
name|index
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|removeIndex
argument_list|(
name|index
argument_list|,
name|reason
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|removeIndex
specifier|private
name|void
name|removeIndex
parameter_list|(
name|Index
name|index
parameter_list|,
name|String
name|reason
parameter_list|,
name|boolean
name|delete
parameter_list|)
block|{
specifier|final
name|String
name|indexName
init|=
name|index
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|IndexService
name|indexService
decl_stmt|;
specifier|final
name|IndexEventListener
name|listener
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|hasIndex
argument_list|(
name|index
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] closing ... (reason [{}])"
argument_list|,
name|indexName
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IndexService
argument_list|>
name|newIndices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|indices
argument_list|)
decl_stmt|;
name|indexService
operator|=
name|newIndices
operator|.
name|remove
argument_list|(
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|indexService
operator|!=
literal|null
operator|:
literal|"IndexService is null for index: "
operator|+
name|index
assert|;
name|indices
operator|=
name|unmodifiableMap
argument_list|(
name|newIndices
argument_list|)
expr_stmt|;
name|listener
operator|=
name|indexService
operator|.
name|getIndexEventListener
argument_list|()
expr_stmt|;
block|}
name|listener
operator|.
name|beforeIndexClosed
argument_list|(
name|indexService
argument_list|)
expr_stmt|;
if|if
condition|(
name|delete
condition|)
block|{
name|listener
operator|.
name|beforeIndexDeleted
argument_list|(
name|indexService
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"{} closing index service (reason [{}])"
argument_list|,
name|index
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|indexService
operator|.
name|close
argument_list|(
name|reason
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"{} closed... (reason [{}])"
argument_list|,
name|index
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|listener
operator|.
name|afterIndexClosed
argument_list|(
name|indexService
operator|.
name|index
argument_list|()
argument_list|,
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|delete
condition|)
block|{
specifier|final
name|IndexSettings
name|indexSettings
init|=
name|indexService
operator|.
name|getIndexSettings
argument_list|()
decl_stmt|;
name|listener
operator|.
name|afterIndexDeleted
argument_list|(
name|indexService
operator|.
name|index
argument_list|()
argument_list|,
name|indexSettings
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
comment|// now we are done - try to wipe data on disk if possible
name|deleteIndexStore
argument_list|(
name|reason
argument_list|,
name|indexService
operator|.
name|index
argument_list|()
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to remove index "
operator|+
name|index
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|getIndicesFieldDataCache
specifier|public
name|IndicesFieldDataCache
name|getIndicesFieldDataCache
parameter_list|()
block|{
return|return
name|indicesFieldDataCache
return|;
block|}
DECL|method|getCircuitBreakerService
specifier|public
name|CircuitBreakerService
name|getCircuitBreakerService
parameter_list|()
block|{
return|return
name|circuitBreakerService
return|;
block|}
DECL|method|getIndicesQueryCache
specifier|public
name|IndicesQueryCache
name|getIndicesQueryCache
parameter_list|()
block|{
return|return
name|indicesQueryCache
return|;
block|}
DECL|class|OldShardsStats
specifier|static
class|class
name|OldShardsStats
implements|implements
name|IndexEventListener
block|{
DECL|field|searchStats
specifier|final
name|SearchStats
name|searchStats
init|=
operator|new
name|SearchStats
argument_list|()
decl_stmt|;
DECL|field|getStats
specifier|final
name|GetStats
name|getStats
init|=
operator|new
name|GetStats
argument_list|()
decl_stmt|;
DECL|field|indexingStats
specifier|final
name|IndexingStats
name|indexingStats
init|=
operator|new
name|IndexingStats
argument_list|()
decl_stmt|;
DECL|field|mergeStats
specifier|final
name|MergeStats
name|mergeStats
init|=
operator|new
name|MergeStats
argument_list|()
decl_stmt|;
DECL|field|refreshStats
specifier|final
name|RefreshStats
name|refreshStats
init|=
operator|new
name|RefreshStats
argument_list|()
decl_stmt|;
DECL|field|flushStats
specifier|final
name|FlushStats
name|flushStats
init|=
operator|new
name|FlushStats
argument_list|()
decl_stmt|;
DECL|field|recoveryStats
specifier|final
name|RecoveryStats
name|recoveryStats
init|=
operator|new
name|RecoveryStats
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|beforeIndexShardClosed
specifier|public
specifier|synchronized
name|void
name|beforeIndexShardClosed
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|Nullable
name|IndexShard
name|indexShard
parameter_list|,
name|Settings
name|indexSettings
parameter_list|)
block|{
if|if
condition|(
name|indexShard
operator|!=
literal|null
condition|)
block|{
name|getStats
operator|.
name|addTotals
argument_list|(
name|indexShard
operator|.
name|getStats
argument_list|()
argument_list|)
expr_stmt|;
name|indexingStats
operator|.
name|addTotals
argument_list|(
name|indexShard
operator|.
name|indexingStats
argument_list|()
argument_list|)
expr_stmt|;
name|searchStats
operator|.
name|addTotals
argument_list|(
name|indexShard
operator|.
name|searchStats
argument_list|()
argument_list|)
expr_stmt|;
name|mergeStats
operator|.
name|addTotals
argument_list|(
name|indexShard
operator|.
name|mergeStats
argument_list|()
argument_list|)
expr_stmt|;
name|refreshStats
operator|.
name|addTotals
argument_list|(
name|indexShard
operator|.
name|refreshStats
argument_list|()
argument_list|)
expr_stmt|;
name|flushStats
operator|.
name|addTotals
argument_list|(
name|indexShard
operator|.
name|flushStats
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryStats
operator|.
name|addTotals
argument_list|(
name|indexShard
operator|.
name|recoveryStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Deletes the given index. Persistent parts of the index      * like the shards files, state and transaction logs are removed once all resources are released.      *      * Equivalent to {@link #removeIndex(Index, String)} but fires      * different lifecycle events to ensure pending resources of this index are immediately removed.      * @param index the index to delete      * @param reason the high level reason causing this delete      */
DECL|method|deleteIndex
specifier|public
name|void
name|deleteIndex
parameter_list|(
name|Index
name|index
parameter_list|,
name|String
name|reason
parameter_list|)
throws|throws
name|IOException
block|{
name|removeIndex
argument_list|(
name|index
argument_list|,
name|reason
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes an index that is not assigned to this node. This method cleans up all disk folders relating to the index      * but does not deal with in-memory structures. For those call {@link #deleteIndex(Index, String)}      */
DECL|method|deleteUnassignedIndex
specifier|public
name|void
name|deleteUnassignedIndex
parameter_list|(
name|String
name|reason
parameter_list|,
name|IndexMetaData
name|metaData
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|)
block|{
if|if
condition|(
name|nodeEnv
operator|.
name|hasNodeFile
argument_list|()
condition|)
block|{
name|String
name|indexName
init|=
name|metaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|indexName
argument_list|)
condition|)
block|{
specifier|final
name|IndexMetaData
name|index
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't delete unassigned index store for ["
operator|+
name|indexName
operator|+
literal|"] - it's still part of "
operator|+
literal|"the cluster state ["
operator|+
name|index
operator|.
name|getIndexUUID
argument_list|()
operator|+
literal|"] ["
operator|+
name|metaData
operator|.
name|getIndexUUID
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|deleteIndexStore
argument_list|(
name|reason
argument_list|,
name|metaData
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to delete unassigned index (reason [{}])"
argument_list|,
name|e
argument_list|,
name|metaData
operator|.
name|getIndex
argument_list|()
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Deletes the index store trying to acquire all shards locks for this index.      * This method will delete the metadata for the index even if the actual shards can't be locked.      *      * Package private for testing      */
DECL|method|deleteIndexStore
name|void
name|deleteIndexStore
parameter_list|(
name|String
name|reason
parameter_list|,
name|IndexMetaData
name|metaData
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nodeEnv
operator|.
name|hasNodeFile
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Index
name|index
init|=
name|metaData
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|String
name|localUUid
init|=
name|indexService
argument_list|(
name|index
argument_list|)
operator|.
name|indexUUID
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't delete index store for ["
operator|+
name|index
operator|.
name|getName
argument_list|()
operator|+
literal|"] - it's still part of the indices service ["
operator|+
name|localUUid
operator|+
literal|"] ["
operator|+
name|metaData
operator|.
name|getIndexUUID
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
operator|.
name|isMasterNode
argument_list|()
operator|==
literal|true
operator|)
condition|)
block|{
comment|// we do not delete the store if it is a master eligible node and the index is still in the cluster state
comment|// because we want to keep the meta data for indices around even if no shards are left here
specifier|final
name|IndexMetaData
name|idxMeta
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't delete index store for ["
operator|+
name|index
operator|.
name|getName
argument_list|()
operator|+
literal|"] - it's still part of the "
operator|+
literal|"cluster state ["
operator|+
name|idxMeta
operator|.
name|getIndexUUID
argument_list|()
operator|+
literal|"] ["
operator|+
name|metaData
operator|.
name|getIndexUUID
argument_list|()
operator|+
literal|"], "
operator|+
literal|"we are master eligible, so will keep the index metadata even if no shards are left."
argument_list|)
throw|;
block|}
block|}
specifier|final
name|IndexSettings
name|indexSettings
init|=
name|buildIndexSettings
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
name|deleteIndexStore
argument_list|(
name|reason
argument_list|,
name|indexSettings
operator|.
name|getIndex
argument_list|()
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteIndexStore
specifier|private
name|void
name|deleteIndexStore
parameter_list|(
name|String
name|reason
parameter_list|,
name|Index
name|index
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteIndexStoreIfDeletionAllowed
argument_list|(
name|reason
argument_list|,
name|index
argument_list|,
name|indexSettings
argument_list|,
name|DEFAULT_INDEX_DELETION_PREDICATE
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteIndexStoreIfDeletionAllowed
specifier|private
name|void
name|deleteIndexStoreIfDeletionAllowed
parameter_list|(
specifier|final
name|String
name|reason
parameter_list|,
specifier|final
name|Index
name|index
parameter_list|,
specifier|final
name|IndexSettings
name|indexSettings
parameter_list|,
specifier|final
name|IndexDeletionAllowedPredicate
name|predicate
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// we are trying to delete the index store here - not a big deal if the lock can't be obtained
comment|// the store metadata gets wiped anyway even without the lock this is just best effort since
comment|// every shards deletes its content under the shard lock it owns.
name|logger
operator|.
name|debug
argument_list|(
literal|"{} deleting index store reason [{}]"
argument_list|,
name|index
argument_list|,
name|reason
argument_list|)
expr_stmt|;
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
condition|)
block|{
comment|// its safe to delete all index metadata and shard data
name|nodeEnv
operator|.
name|deleteIndexDirectorySafe
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} failed to delete index store - at least one shards is still locked"
argument_list|,
name|ex
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} failed to delete index"
argument_list|,
name|ex
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|addPendingDelete
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
comment|// this is a pure protection to make sure this index doesn't get re-imported as a dangling index.
comment|// we should in the future rather write a tombstone rather than wiping the metadata.
name|MetaDataStateFormat
operator|.
name|deleteMetaState
argument_list|(
name|nodeEnv
operator|.
name|indexPaths
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Deletes the shard with an already acquired shard lock.      * @param reason the reason for the shard deletion      * @param lock the lock of the shard to delete      * @param indexSettings the shards index settings.      * @throws IOException if an IOException occurs      */
annotation|@
name|Override
DECL|method|deleteShardStore
specifier|public
name|void
name|deleteShardStore
parameter_list|(
name|String
name|reason
parameter_list|,
name|ShardLock
name|lock
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardId
name|shardId
init|=
name|lock
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} deleting shard reason [{}]"
argument_list|,
name|shardId
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|nodeEnv
operator|.
name|deleteShardDirectoryUnderLock
argument_list|(
name|lock
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method deletes the shard contents on disk for the given shard ID. This method will fail if the shard deleting      * is prevented by {@link #canDeleteShardContent(ShardId, IndexSettings)}      * of if the shards lock can not be acquired.      *      * On data nodes, if the deleted shard is the last shard folder in its index, the method will attempt to remove the index folder as well.      *      * @param reason the reason for the shard deletion      * @param shardId the shards ID to delete      * @param clusterState . This is required to access the indexes settings etc.      * @throws IOException if an IOException occurs      */
DECL|method|deleteShardStore
specifier|public
name|void
name|deleteShardStore
parameter_list|(
name|String
name|reason
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexMetaData
name|metaData
init|=
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|get
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexSettings
name|indexSettings
init|=
name|buildIndexSettings
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
if|if
condition|(
name|canDeleteShardContent
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't delete shard "
operator|+
name|shardId
argument_list|)
throw|;
block|}
name|nodeEnv
operator|.
name|deleteShardDirectorySafe
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"{} deleted shard reason [{}]"
argument_list|,
name|shardId
argument_list|,
name|reason
argument_list|)
expr_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
operator|.
name|isMasterNode
argument_list|()
operator|==
literal|false
operator|&&
comment|// master nodes keep the index meta data, even if having no shards..
name|canDeleteIndexContents
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|,
name|indexSettings
argument_list|)
condition|)
block|{
if|if
condition|(
name|nodeEnv
operator|.
name|findAllShardIds
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
comment|// note that deleteIndexStore have more safety checks and may throw an exception if index was concurrently created.
name|deleteIndexStore
argument_list|(
literal|"no longer used"
argument_list|,
name|metaData
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// wrap the exception to indicate we already deleted the shard
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to delete unused index after deleting its last shard ("
operator|+
name|shardId
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] still has shard stores, leaving as is"
argument_list|,
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method returns true if the current node is allowed to delete the given index.      * This is the case if the index is deleted in the metadata or there is no allocation      * on the local node and the index isn't on a shared file system.      * @param index {@code Index} to check whether deletion is allowed      * @param indexSettings {@code IndexSettings} for the given index      * @return true if the index can be deleted on this node      */
DECL|method|canDeleteIndexContents
specifier|public
name|boolean
name|canDeleteIndexContents
parameter_list|(
name|Index
name|index
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
block|{
comment|// index contents can be deleted if the index is not on a shared file system,
comment|// or if its on a shared file system but its an already closed index (so all
comment|// its resources have already been relinquished)
if|if
condition|(
name|indexSettings
operator|.
name|isOnSharedFilesystem
argument_list|()
operator|==
literal|false
operator|||
name|indexSettings
operator|.
name|getIndexMetaData
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
specifier|final
name|IndexService
name|indexService
init|=
name|indexService
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|==
literal|null
operator|&&
name|nodeEnv
operator|.
name|hasNodeFile
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} skipping index directory deletion due to shadow replicas"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Verify that the contents on disk for the given index is deleted; if not, delete the contents.      * This method assumes that an index is already deleted in the cluster state and/or explicitly      * through index tombstones.      * @param index {@code Index} to make sure its deleted from disk      * @param clusterState {@code ClusterState} to ensure the index is not part of it      * @return IndexMetaData for the index loaded from disk      */
annotation|@
name|Nullable
DECL|method|verifyIndexIsDeleted
specifier|public
name|IndexMetaData
name|verifyIndexIsDeleted
parameter_list|(
specifier|final
name|Index
name|index
parameter_list|,
specifier|final
name|ClusterState
name|clusterState
parameter_list|)
block|{
comment|// this method should only be called when we know the index (name + uuid) is not part of the cluster state
if|if
condition|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot delete index ["
operator|+
name|index
operator|+
literal|"], it is still part of the cluster state."
argument_list|)
throw|;
block|}
if|if
condition|(
name|nodeEnv
operator|.
name|hasNodeFile
argument_list|()
operator|&&
name|FileSystemUtils
operator|.
name|exists
argument_list|(
name|nodeEnv
operator|.
name|indexPaths
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
block|{
specifier|final
name|IndexMetaData
name|metaData
decl_stmt|;
try|try
block|{
name|metaData
operator|=
name|metaStateService
operator|.
name|loadIndexState
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to load state file from a stale deleted index, folders will be left on disk"
argument_list|,
name|e
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|IndexSettings
name|indexSettings
init|=
name|buildIndexSettings
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
try|try
block|{
name|deleteIndexStoreIfDeletionAllowed
argument_list|(
literal|"stale deleted index"
argument_list|,
name|index
argument_list|,
name|indexSettings
argument_list|,
name|ALWAYS_TRUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// we just warn about the exception here because if deleteIndexStoreIfDeletionAllowed
comment|// throws an exception, it gets added to the list of pending deletes to be tried again
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to delete index on disk"
argument_list|,
name|e
argument_list|,
name|metaData
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|metaData
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns<code>true</code> iff the shards content for the given shard can be deleted.      * This method will return<code>false</code> if:      *<ul>      *<li>if the shard is still allocated / active on this node</li>      *<li>if for instance if the shard is located on shared and should not be deleted</li>      *<li>if the shards data locations do not exists</li>      *</ul>      *      * @param shardId the shard to delete.      * @param indexSettings the shards's relevant {@link IndexSettings}. This is required to access the indexes settings etc.      */
DECL|method|canDeleteShardContent
specifier|public
name|boolean
name|canDeleteShardContent
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
block|{
assert|assert
name|shardId
operator|.
name|getIndex
argument_list|()
operator|.
name|equals
argument_list|(
name|indexSettings
operator|.
name|getIndex
argument_list|()
argument_list|)
assert|;
specifier|final
name|IndexService
name|indexService
init|=
name|indexService
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexSettings
operator|.
name|isOnSharedFilesystem
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|nodeEnv
operator|.
name|hasNodeFile
argument_list|()
condition|)
block|{
specifier|final
name|boolean
name|isAllocated
init|=
name|indexService
operator|!=
literal|null
operator|&&
name|indexService
operator|.
name|hasShard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAllocated
condition|)
block|{
return|return
literal|false
return|;
comment|// we are allocated - can't delete the shard
block|}
elseif|else
if|if
condition|(
name|indexSettings
operator|.
name|hasCustomDataPath
argument_list|()
condition|)
block|{
comment|// lets see if it's on a custom path (return false if the shared doesn't exist)
comment|// we don't need to delete anything that is not there
return|return
name|Files
operator|.
name|exists
argument_list|(
name|nodeEnv
operator|.
name|resolveCustomLocation
argument_list|(
name|indexSettings
argument_list|,
name|shardId
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// lets see if it's path is available (return false if the shared doesn't exist)
comment|// we don't need to delete anything that is not there
return|return
name|FileSystemUtils
operator|.
name|exists
argument_list|(
name|nodeEnv
operator|.
name|availableShardPaths
argument_list|(
name|shardId
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} skipping shard directory deletion due to shadow replicas"
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|buildIndexSettings
specifier|private
name|IndexSettings
name|buildIndexSettings
parameter_list|(
name|IndexMetaData
name|metaData
parameter_list|)
block|{
comment|// play safe here and make sure that we take node level settings into account.
comment|// we might run on nodes where we use shard FS and then in the future don't delete
comment|// actual content.
return|return
operator|new
name|IndexSettings
argument_list|(
name|metaData
argument_list|,
name|settings
argument_list|)
return|;
block|}
comment|/**      * Adds a pending delete for the given index shard.      */
annotation|@
name|Override
DECL|method|addPendingDelete
specifier|public
name|void
name|addPendingDelete
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|IndexSettings
name|settings
parameter_list|)
block|{
if|if
condition|(
name|shardId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"shardId must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|settings
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"settings must not be null"
argument_list|)
throw|;
block|}
name|PendingDelete
name|pendingDelete
init|=
operator|new
name|PendingDelete
argument_list|(
name|shardId
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|addPendingDelete
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|,
name|pendingDelete
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a pending delete for the given index.      */
DECL|method|addPendingDelete
specifier|public
name|void
name|addPendingDelete
parameter_list|(
name|Index
name|index
parameter_list|,
name|IndexSettings
name|settings
parameter_list|)
block|{
name|PendingDelete
name|pendingDelete
init|=
operator|new
name|PendingDelete
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|addPendingDelete
argument_list|(
name|index
argument_list|,
name|pendingDelete
argument_list|)
expr_stmt|;
block|}
DECL|method|addPendingDelete
specifier|private
name|void
name|addPendingDelete
parameter_list|(
name|Index
name|index
parameter_list|,
name|PendingDelete
name|pendingDelete
parameter_list|)
block|{
synchronized|synchronized
init|(
name|pendingDeletes
init|)
block|{
name|List
argument_list|<
name|PendingDelete
argument_list|>
name|list
init|=
name|pendingDeletes
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|pendingDeletes
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|pendingDelete
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PendingDelete
specifier|private
specifier|static
specifier|final
class|class
name|PendingDelete
implements|implements
name|Comparable
argument_list|<
name|PendingDelete
argument_list|>
block|{
DECL|field|index
specifier|final
name|Index
name|index
decl_stmt|;
DECL|field|shardId
specifier|final
name|int
name|shardId
decl_stmt|;
DECL|field|settings
specifier|final
name|IndexSettings
name|settings
decl_stmt|;
DECL|field|deleteIndex
specifier|final
name|boolean
name|deleteIndex
decl_stmt|;
comment|/**          * Creates a new pending delete of an index          */
DECL|method|PendingDelete
specifier|public
name|PendingDelete
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|IndexSettings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|shardId
operator|.
name|getIndex
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
operator|.
name|getId
argument_list|()
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|deleteIndex
operator|=
literal|false
expr_stmt|;
block|}
comment|/**          * Creates a new pending delete of a shard          */
DECL|method|PendingDelete
specifier|public
name|PendingDelete
parameter_list|(
name|Index
name|index
parameter_list|,
name|IndexSettings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|deleteIndex
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|index
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardId
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|shardId
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|PendingDelete
name|o
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|shardId
argument_list|,
name|o
operator|.
name|shardId
argument_list|)
return|;
block|}
block|}
comment|/**      * Processes all pending deletes for the given index. This method will acquire all locks for the given index and will      * process all pending deletes for this index. Pending deletes might occur if the OS doesn't allow deletion of files because      * they are used by a different process ie. on Windows where files might still be open by a virus scanner. On a shared      * filesystem a replica might not have been closed when the primary is deleted causing problems on delete calls so we      * schedule there deletes later.      * @param index the index to process the pending deletes for      * @param timeout the timeout used for processing pending deletes      */
DECL|method|processPendingDeletes
specifier|public
name|void
name|processPendingDeletes
parameter_list|(
name|Index
name|index
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} processing pending deletes"
argument_list|,
name|index
argument_list|)
expr_stmt|;
specifier|final
name|long
name|startTimeNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ShardLock
argument_list|>
name|shardLocks
init|=
name|nodeEnv
operator|.
name|lockAllForIndex
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|timeout
operator|.
name|millis
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardLock
argument_list|>
name|locks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardLock
name|lock
range|:
name|shardLocks
control|)
block|{
name|locks
operator|.
name|put
argument_list|(
name|lock
operator|.
name|getShardId
argument_list|()
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|PendingDelete
argument_list|>
name|remove
decl_stmt|;
synchronized|synchronized
init|(
name|pendingDeletes
init|)
block|{
name|remove
operator|=
name|pendingDeletes
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remove
operator|!=
literal|null
operator|&&
name|remove
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|remove
argument_list|)
expr_stmt|;
comment|// make sure we delete indices first
specifier|final
name|long
name|maxSleepTimeMs
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|// ensure we retry after 10 sec
name|long
name|sleepTime
init|=
literal|10
decl_stmt|;
do|do
block|{
if|if
condition|(
name|remove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|Iterator
argument_list|<
name|PendingDelete
argument_list|>
name|iterator
init|=
name|remove
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PendingDelete
name|delete
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|delete
operator|.
name|deleteIndex
condition|)
block|{
assert|assert
name|delete
operator|.
name|shardId
operator|==
operator|-
literal|1
assert|;
name|logger
operator|.
name|debug
argument_list|(
literal|"{} deleting index store reason [{}]"
argument_list|,
name|index
argument_list|,
literal|"pending delete"
argument_list|)
expr_stmt|;
try|try
block|{
name|nodeEnv
operator|.
name|deleteIndexDirectoryUnderLock
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} retry pending delete"
argument_list|,
name|ex
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|delete
operator|.
name|shardId
operator|!=
operator|-
literal|1
assert|;
name|ShardLock
name|shardLock
init|=
name|locks
operator|.
name|get
argument_list|(
operator|new
name|ShardId
argument_list|(
name|delete
operator|.
name|index
argument_list|,
name|delete
operator|.
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardLock
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|deleteShardStore
argument_list|(
literal|"pending delete"
argument_list|,
name|shardLock
argument_list|,
name|delete
operator|.
name|settings
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} retry pending delete"
argument_list|,
name|ex
argument_list|,
name|shardLock
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} no shard lock for pending delete"
argument_list|,
name|delete
operator|.
name|shardId
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|remove
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} still pending deletes present for shards {} - retrying"
argument_list|,
name|index
argument_list|,
name|remove
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|sleepTime
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxSleepTimeMs
argument_list|,
name|sleepTime
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// increase the sleep time gradually
name|logger
operator|.
name|debug
argument_list|(
literal|"{} schedule pending delete retry after {} ms"
argument_list|,
name|index
argument_list|,
name|sleepTime
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTimeNS
operator|)
operator|<
name|timeout
operator|.
name|nanos
argument_list|()
condition|)
do|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|shardLocks
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|numPendingDeletes
name|int
name|numPendingDeletes
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
synchronized|synchronized
init|(
name|pendingDeletes
init|)
block|{
name|List
argument_list|<
name|PendingDelete
argument_list|>
name|deleteList
init|=
name|pendingDeletes
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteList
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|deleteList
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns this nodes {@link IndicesQueriesRegistry}      */
DECL|method|getIndicesQueryRegistry
specifier|public
name|IndicesQueriesRegistry
name|getIndicesQueryRegistry
parameter_list|()
block|{
return|return
name|indicesQueriesRegistry
return|;
block|}
DECL|method|getAnalysis
specifier|public
name|AnalysisRegistry
name|getAnalysis
parameter_list|()
block|{
return|return
name|analysisRegistry
return|;
block|}
comment|/**      * FieldDataCacheCleaner is a scheduled Runnable used to clean a Guava cache      * periodically. In this case it is the field data cache, because a cache that      * has an entry invalidated may not clean up the entry if it is not read from      * or written to after invalidation.      */
DECL|class|CacheCleaner
specifier|private
specifier|final
specifier|static
class|class
name|CacheCleaner
implements|implements
name|Runnable
implements|,
name|Releasable
block|{
DECL|field|cache
specifier|private
specifier|final
name|IndicesFieldDataCache
name|cache
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|interval
specifier|private
specifier|final
name|TimeValue
name|interval
decl_stmt|;
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|requestCache
specifier|private
specifier|final
name|IndicesRequestCache
name|requestCache
decl_stmt|;
DECL|method|CacheCleaner
specifier|public
name|CacheCleaner
parameter_list|(
name|IndicesFieldDataCache
name|cache
parameter_list|,
name|IndicesRequestCache
name|requestCache
parameter_list|,
name|ESLogger
name|logger
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TimeValue
name|interval
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|requestCache
operator|=
name|requestCache
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|startTimeNS
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"running periodic field data cache cleanup"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|cache
operator|.
name|getCache
argument_list|()
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Exception during periodic field data cache cleanup:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"periodic field data cache cleanup finished in {} milliseconds"
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|requestCache
operator|.
name|cleanCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Exception during periodic request cache cleanup:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Reschedule itself to run again if not closed
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
name|threadPool
operator|.
name|schedule
argument_list|(
name|interval
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|CACHEABLE_SEARCH_TYPES
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|SearchType
argument_list|>
name|CACHEABLE_SEARCH_TYPES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|,
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
decl_stmt|;
comment|/**      * Can the shard request be cached at all?      */
DECL|method|canCache
specifier|public
name|boolean
name|canCache
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|,
name|SearchContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|template
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// for now, only enable it for requests with no hits
if|if
condition|(
name|context
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// We cannot cache with DFS because results depend not only on the content of the index but also
comment|// on the overridden statistics. So if you ran two queries on the same index with different stats
comment|// (because an other shard was updated) you would get wrong results because of the scores
comment|// (think about top_hits aggs or scripts using the score)
if|if
condition|(
operator|!
name|CACHEABLE_SEARCH_TYPES
operator|.
name|contains
argument_list|(
name|context
operator|.
name|searchType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IndexSettings
name|settings
init|=
name|context
operator|.
name|indexShard
argument_list|()
operator|.
name|indexSettings
argument_list|()
decl_stmt|;
comment|// if not explicitly set in the request, use the index setting, if not, use the request
if|if
condition|(
name|request
operator|.
name|requestCache
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getValue
argument_list|(
name|IndicesRequestCache
operator|.
name|INDEX_CACHE_REQUEST_ENABLED_SETTING
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|requestCache
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if the reader is not a directory reader, we can't get the version from it
if|if
condition|(
operator|(
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|instanceof
name|DirectoryReader
operator|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if now in millis is used (or in the future, a more generic "isDeterministic" flag
comment|// then we can't cache based on "now" key within the search request, as it is not deterministic
if|if
condition|(
name|context
operator|.
name|nowInMillisUsed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|clearRequestCache
specifier|public
name|void
name|clearRequestCache
parameter_list|(
name|IndexShard
name|shard
parameter_list|)
block|{
if|if
condition|(
name|shard
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|indicesRequestCache
operator|.
name|clear
argument_list|(
operator|new
name|IndexShardCacheEntity
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} explicit cache clear"
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads the cache result, computing it if needed by executing the query phase and otherwise deserializing the cached      * value into the {@link SearchContext#queryResult() context's query result}. The combination of load + compute allows      * to have a single load operation that will cause other requests with the same key to wait till its loaded an reuse      * the same cache.      */
DECL|method|loadIntoContext
specifier|public
name|void
name|loadIntoContext
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|QueryPhase
name|queryPhase
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|canCache
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
assert|;
specifier|final
name|IndexShardCacheEntity
name|entity
init|=
operator|new
name|IndexShardCacheEntity
argument_list|(
name|context
operator|.
name|indexShard
argument_list|()
argument_list|,
name|queryPhase
argument_list|,
name|context
argument_list|)
decl_stmt|;
specifier|final
name|DirectoryReader
name|directoryReader
init|=
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getDirectoryReader
argument_list|()
decl_stmt|;
specifier|final
name|BytesReference
name|bytesReference
init|=
name|indicesRequestCache
operator|.
name|getOrCompute
argument_list|(
name|entity
argument_list|,
name|directoryReader
argument_list|,
name|request
operator|.
name|cacheKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|loaded
operator|==
literal|false
condition|)
block|{
comment|// if we have loaded this we don't need to do anything
comment|// restore the cached query result into the context
specifier|final
name|QuerySearchResult
name|result
init|=
name|context
operator|.
name|queryResult
argument_list|()
decl_stmt|;
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|bytesReference
operator|.
name|streamInput
argument_list|()
argument_list|,
name|namedWriteableRegistry
argument_list|)
decl_stmt|;
name|result
operator|.
name|readFromWithId
argument_list|(
name|context
operator|.
name|id
argument_list|()
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|result
operator|.
name|shardTarget
argument_list|(
name|context
operator|.
name|shardTarget
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IndexShardCacheEntity
specifier|static
specifier|final
class|class
name|IndexShardCacheEntity
implements|implements
name|IndicesRequestCache
operator|.
name|CacheEntity
block|{
DECL|field|queryPhase
specifier|private
specifier|final
name|QueryPhase
name|queryPhase
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|SearchContext
name|context
decl_stmt|;
DECL|field|indexShard
specifier|private
specifier|final
name|IndexShard
name|indexShard
decl_stmt|;
DECL|field|requestCache
specifier|private
specifier|final
name|ShardRequestCache
name|requestCache
decl_stmt|;
DECL|field|loaded
specifier|private
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
DECL|method|IndexShardCacheEntity
name|IndexShardCacheEntity
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|)
block|{
name|this
argument_list|(
name|indexShard
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|IndexShardCacheEntity
specifier|public
name|IndexShardCacheEntity
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
name|QueryPhase
name|queryPhase
parameter_list|,
name|SearchContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|queryPhase
operator|=
name|queryPhase
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|indexShard
operator|=
name|indexShard
expr_stmt|;
name|this
operator|.
name|requestCache
operator|=
name|indexShard
operator|.
name|requestCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadValue
specifier|public
name|IndicesRequestCache
operator|.
name|Value
name|loadValue
parameter_list|()
throws|throws
name|IOException
block|{
name|queryPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|/* BytesStreamOutput allows to pass the expected size but by default uses              * BigArrays.PAGE_SIZE_IN_BYTES which is 16k. A common cached result ie.              * a date histogram with 3 buckets is ~100byte so 16k might be very wasteful              * since we don't shrink to the actual size once we are done serializing.              * By passing 512 as the expected size we will resize the byte array in the stream              * slowly until we hit the page size and don't waste too much memory for small query              * results.*/
specifier|final
name|int
name|expectedSizeInBytes
init|=
literal|512
decl_stmt|;
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|(
name|expectedSizeInBytes
argument_list|)
init|)
block|{
name|context
operator|.
name|queryResult
argument_list|()
operator|.
name|writeToNoId
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// for now, keep the paged data structure, which might have unused bytes to fill a page, but better to keep
comment|// the memory properly paged instead of having varied sized bytes
specifier|final
name|BytesReference
name|reference
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|loaded
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|IndicesRequestCache
operator|.
name|Value
argument_list|(
name|reference
argument_list|,
name|out
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|onCached
specifier|public
name|void
name|onCached
parameter_list|(
name|IndicesRequestCache
operator|.
name|Key
name|key
parameter_list|,
name|IndicesRequestCache
operator|.
name|Value
name|value
parameter_list|)
block|{
name|requestCache
operator|.
name|onCached
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isOpen
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|indexShard
operator|.
name|state
argument_list|()
operator|!=
name|IndexShardState
operator|.
name|CLOSED
return|;
block|}
annotation|@
name|Override
DECL|method|getCacheIdentity
specifier|public
name|Object
name|getCacheIdentity
parameter_list|()
block|{
return|return
name|indexShard
return|;
block|}
annotation|@
name|Override
DECL|method|onHit
specifier|public
name|void
name|onHit
parameter_list|()
block|{
name|requestCache
operator|.
name|onHit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMiss
specifier|public
name|void
name|onMiss
parameter_list|()
block|{
name|requestCache
operator|.
name|onMiss
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRemoval
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|IndicesRequestCache
operator|.
name|Key
argument_list|,
name|IndicesRequestCache
operator|.
name|Value
argument_list|>
name|notification
parameter_list|)
block|{
name|requestCache
operator|.
name|onRemoval
argument_list|(
name|notification
operator|.
name|getKey
argument_list|()
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|,
name|notification
operator|.
name|getRemovalReason
argument_list|()
operator|==
name|RemovalNotification
operator|.
name|RemovalReason
operator|.
name|EVICTED
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|FunctionalInterface
DECL|interface|IndexDeletionAllowedPredicate
interface|interface
name|IndexDeletionAllowedPredicate
block|{
DECL|method|apply
name|boolean
name|apply
parameter_list|(
name|Index
name|index
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
function_decl|;
block|}
DECL|field|DEFAULT_INDEX_DELETION_PREDICATE
specifier|private
specifier|final
name|IndexDeletionAllowedPredicate
name|DEFAULT_INDEX_DELETION_PREDICATE
init|=
parameter_list|(
name|Index
name|index
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
lambda|->
name|canDeleteIndexContents
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
decl_stmt|;
DECL|field|ALWAYS_TRUE
specifier|private
specifier|final
name|IndexDeletionAllowedPredicate
name|ALWAYS_TRUE
init|=
parameter_list|(
name|Index
name|index
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|)
lambda|->
literal|true
decl_stmt|;
block|}
end_class

end_unit

