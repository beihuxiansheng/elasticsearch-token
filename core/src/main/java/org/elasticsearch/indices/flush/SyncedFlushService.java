begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.flush
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|flush
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|flush
operator|.
name|FlushRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesLifecycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BaseTransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_class
DECL|class|SyncedFlushService
specifier|public
class|class
name|SyncedFlushService
extends|extends
name|AbstractComponent
block|{
DECL|field|PRE_SYNCED_FLUSH_ACTION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PRE_SYNCED_FLUSH_ACTION_NAME
init|=
literal|"internal:indices/flush/synced/pre"
decl_stmt|;
DECL|field|SYNCED_FLUSH_ACTION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SYNCED_FLUSH_ACTION_NAME
init|=
literal|"internal:indices/flush/synced/sync"
decl_stmt|;
DECL|field|IN_FLIGHT_OPS_ACTION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|IN_FLIGHT_OPS_ACTION_NAME
init|=
literal|"internal:indices/flush/synced/in_flight"
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|indexNameExpressionResolver
specifier|private
specifier|final
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
decl_stmt|;
annotation|@
name|Inject
DECL|method|SyncedFlushService
specifier|public
name|SyncedFlushService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|indexNameExpressionResolver
operator|=
name|indexNameExpressionResolver
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|PRE_SYNCED_FLUSH_ACTION_NAME
argument_list|,
name|PreSyncedFlushRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|FLUSH
argument_list|,
operator|new
name|PreSyncedFlushTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|SYNCED_FLUSH_ACTION_NAME
argument_list|,
name|SyncedFlushRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|FLUSH
argument_list|,
operator|new
name|SyncedFlushTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|IN_FLIGHT_OPS_ACTION_NAME
argument_list|,
name|InFlightOpsRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|InFlightOpCountTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|indicesService
operator|.
name|indicesLifecycle
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|IndicesLifecycle
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onShardInactive
parameter_list|(
specifier|final
name|IndexShard
name|indexShard
parameter_list|)
block|{
comment|// we only want to call sync flush once, so only trigger it when we are on a primary
if|if
condition|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
condition|)
block|{
name|attemptSyncedFlush
argument_list|(
name|indexShard
operator|.
name|shardId
argument_list|()
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|ShardsSyncedFlushResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|ShardsSyncedFlushResult
name|syncedFlushResult
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} sync flush on inactive shard returned successfully for sync_id: {}"
argument_list|,
name|syncedFlushResult
operator|.
name|getShardId
argument_list|()
argument_list|,
name|syncedFlushResult
operator|.
name|syncId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} sync flush on inactive shard failed"
argument_list|,
name|e
argument_list|,
name|indexShard
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * a utility method to perform a synced flush for all shards of multiple indices. see {@link #attemptSyncedFlush(ShardId, ActionListener)}      * for more details.      */
DECL|method|attemptSyncedFlush
specifier|public
name|void
name|attemptSyncedFlush
parameter_list|(
specifier|final
name|String
index|[]
name|aliasesOrIndices
parameter_list|,
name|IndicesOptions
name|indicesOptions
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|IndicesSyncedFlushResult
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|concreteIndices
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndices
argument_list|(
name|state
argument_list|,
name|indicesOptions
argument_list|,
name|aliasesOrIndices
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ShardsSyncedFlushResult
argument_list|>
argument_list|>
name|results
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
name|int
name|totalNumberOfShards
init|=
literal|0
decl_stmt|;
name|int
name|numberOfShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|concreteIndices
control|)
block|{
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|totalNumberOfShards
operator|+=
name|indexMetaData
operator|.
name|totalNumberOfShards
argument_list|()
expr_stmt|;
name|numberOfShards
operator|+=
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ShardsSyncedFlushResult
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numberOfShards
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|IndicesSyncedFlushResult
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|int
name|finalTotalNumberOfShards
init|=
name|totalNumberOfShards
decl_stmt|;
specifier|final
name|CountDown
name|countDown
init|=
operator|new
name|CountDown
argument_list|(
name|numberOfShards
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|index
range|:
name|concreteIndices
control|)
block|{
specifier|final
name|int
name|indexNumberOfShards
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getNumberOfShards
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|shard
init|=
literal|0
init|;
name|shard
operator|<
name|indexNumberOfShards
condition|;
name|shard
operator|++
control|)
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|shard
argument_list|)
decl_stmt|;
name|attemptSyncedFlush
argument_list|(
name|shardId
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|ShardsSyncedFlushResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|ShardsSyncedFlushResult
name|syncedFlushResult
parameter_list|)
block|{
name|results
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|add
argument_list|(
name|syncedFlushResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|IndicesSyncedFlushResult
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} unexpected error while executing synced flush"
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|results
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|ShardsSyncedFlushResult
argument_list|(
name|shardId
argument_list|,
name|finalTotalNumberOfShards
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|IndicesSyncedFlushResult
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*     * Tries to flush all copies of a shard and write a sync id to it.     * After a synced flush two shard copies may only contain the same sync id if they contain the same documents.     * To ensure this, synced flush works in three steps:     * 1. Flush all shard copies and gather the commit ids for each copy after the flush     * 2. Ensure that there are no ongoing indexing operations on the primary     * 3. Perform an additional flush on each shard copy that writes the sync id     *     * Step 3 is only executed on a shard if     * a) the shard has no uncommitted changes since the last flush     * b) the last flush was the one executed in 1 (use the collected commit id to verify this)     *     * This alone is not enough to ensure that all copies contain the same documents. Without step 2 a sync id would be written for inconsistent copies in the following scenario:     *     * Write operation has completed on a primary and is being sent to replicas. The write request does not reach the replicas until sync flush is finished.     * Step 1 is executed. After the flush the commit points on primary contains a write operation that the replica does not have.     * Step 3 will be executed on primary and replica as well because there are no uncommitted changes on primary (the first flush committed them) and there are no uncommitted     * changes on the replica (the write operation has not reached the replica yet).     *     * Step 2 detects this scenario and fails the whole synced flush if a write operation is ongoing on the primary.     * Together with the conditions for step 3 (same commit id and no uncommitted changes) this guarantees that a snc id will only     * be written on a primary if no write operation was executed between step 1 and step 3 and sync id will only be written on     * the replica if it contains the same changes that the primary contains.     *     * Synced flush is a best effort operation. The sync id may be written on all, some or none of the copies.     **/
DECL|method|attemptSyncedFlush
specifier|public
name|void
name|attemptSyncedFlush
parameter_list|(
specifier|final
name|ShardId
name|shardId
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|ShardsSyncedFlushResult
argument_list|>
name|actionListener
parameter_list|)
block|{
try|try
block|{
specifier|final
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|getShardRoutingTable
argument_list|(
name|shardId
argument_list|,
name|state
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|activeShards
init|=
name|shardRoutingTable
operator|.
name|activeShards
argument_list|()
decl_stmt|;
specifier|final
name|int
name|totalShards
init|=
name|shardRoutingTable
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|activeShards
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|actionListener
operator|.
name|onResponse
argument_list|(
operator|new
name|ShardsSyncedFlushResult
argument_list|(
name|shardId
argument_list|,
name|totalShards
argument_list|,
literal|"no active shards"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|ActionListener
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Engine
operator|.
name|CommitId
argument_list|>
argument_list|>
name|commitIdsListener
init|=
operator|new
name|ActionListener
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Engine
operator|.
name|CommitId
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Engine
operator|.
name|CommitId
argument_list|>
name|commitIds
parameter_list|)
block|{
if|if
condition|(
name|commitIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|actionListener
operator|.
name|onResponse
argument_list|(
operator|new
name|ShardsSyncedFlushResult
argument_list|(
name|shardId
argument_list|,
name|totalShards
argument_list|,
literal|"all shards failed to commit on pre-sync"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|ActionListener
argument_list|<
name|InFlightOpsResponse
argument_list|>
name|inflightOpsListener
init|=
operator|new
name|ActionListener
argument_list|<
name|InFlightOpsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InFlightOpsResponse
name|response
parameter_list|)
block|{
specifier|final
name|int
name|inflight
init|=
name|response
operator|.
name|opCount
argument_list|()
decl_stmt|;
assert|assert
name|inflight
operator|>=
literal|0
assert|;
if|if
condition|(
name|inflight
operator|!=
literal|0
condition|)
block|{
name|actionListener
operator|.
name|onResponse
argument_list|(
operator|new
name|ShardsSyncedFlushResult
argument_list|(
name|shardId
argument_list|,
name|totalShards
argument_list|,
literal|"["
operator|+
name|inflight
operator|+
literal|"] ongoing operations on primary"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// 3. now send the sync request to all the shards
name|String
name|syncId
init|=
name|Strings
operator|.
name|base64UUID
argument_list|()
decl_stmt|;
name|sendSyncRequests
argument_list|(
name|syncId
argument_list|,
name|activeShards
argument_list|,
name|state
argument_list|,
name|commitIds
argument_list|,
name|shardId
argument_list|,
name|totalShards
argument_list|,
name|actionListener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|actionListener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// 2. fetch in flight operations
name|getInflightOpsCount
argument_list|(
name|shardId
argument_list|,
name|state
argument_list|,
name|shardRoutingTable
argument_list|,
name|inflightOpsListener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|actionListener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// 1. send pre-sync flushes to all replicas
name|sendPreSyncRequests
argument_list|(
name|activeShards
argument_list|,
name|state
argument_list|,
name|shardId
argument_list|,
name|commitIdsListener
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|actionListener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getShardRoutingTable
specifier|final
name|IndexShardRoutingTable
name|getShardRoutingTable
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
specifier|final
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|==
literal|null
condition|)
block|{
name|IndexMetaData
name|index
init|=
name|state
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
operator|&&
name|index
operator|.
name|state
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
throw|throw
operator|new
name|IndexClosedException
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|IndexNotFoundException
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|indexRoutingTable
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardRoutingTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ShardNotFoundException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
return|return
name|shardRoutingTable
return|;
block|}
comment|/**      * returns the number of in flight operations on primary. -1 upon error.      */
DECL|method|getInflightOpsCount
specifier|protected
name|void
name|getInflightOpsCount
parameter_list|(
specifier|final
name|ShardId
name|shardId
parameter_list|,
name|ClusterState
name|state
parameter_list|,
name|IndexShardRoutingTable
name|shardRoutingTable
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|InFlightOpsResponse
argument_list|>
name|listener
parameter_list|)
block|{
try|try
block|{
specifier|final
name|ShardRouting
name|primaryShard
init|=
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNode
name|primaryNode
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|primaryShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryNode
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} failed to resolve node for primary shard {}, skipping sync"
argument_list|,
name|shardId
argument_list|,
name|primaryShard
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|InFlightOpsResponse
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"{} retrieving in flight operation count"
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|primaryNode
argument_list|,
name|IN_FLIGHT_OPS_ACTION_NAME
argument_list|,
operator|new
name|InFlightOpsRequest
argument_list|(
name|shardId
argument_list|)
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|InFlightOpsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InFlightOpsResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|InFlightOpsResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|InFlightOpsResponse
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} unexpected error while retrieving in flight op count"
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendSyncRequests
name|void
name|sendSyncRequests
parameter_list|(
specifier|final
name|String
name|syncId
parameter_list|,
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|,
name|ClusterState
name|state
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Engine
operator|.
name|CommitId
argument_list|>
name|expectedCommitIds
parameter_list|,
specifier|final
name|ShardId
name|shardId
parameter_list|,
specifier|final
name|int
name|totalShards
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|ShardsSyncedFlushResult
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|CountDown
name|countDown
init|=
operator|new
name|CountDown
argument_list|(
name|shards
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushResponse
argument_list|>
name|results
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
specifier|final
name|DiscoveryNode
name|node
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} is assigned to an unknown node. skipping for sync id [{}]. shard routing {}"
argument_list|,
name|shardId
argument_list|,
name|syncId
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|shard
argument_list|,
operator|new
name|SyncedFlushResponse
argument_list|(
literal|"unknown node"
argument_list|)
argument_list|)
expr_stmt|;
name|contDownAndSendResponseIfDone
argument_list|(
name|syncId
argument_list|,
name|shards
argument_list|,
name|shardId
argument_list|,
name|totalShards
argument_list|,
name|listener
argument_list|,
name|countDown
argument_list|,
name|results
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|Engine
operator|.
name|CommitId
name|expectedCommitId
init|=
name|expectedCommitIds
operator|.
name|get
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedCommitId
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} can't resolve expected commit id for {}, skipping for sync id [{}]. shard routing {}"
argument_list|,
name|shardId
argument_list|,
name|syncId
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|shard
argument_list|,
operator|new
name|SyncedFlushResponse
argument_list|(
literal|"no commit id from pre-sync flush"
argument_list|)
argument_list|)
expr_stmt|;
name|contDownAndSendResponseIfDone
argument_list|(
name|syncId
argument_list|,
name|shards
argument_list|,
name|shardId
argument_list|,
name|totalShards
argument_list|,
name|listener
argument_list|,
name|countDown
argument_list|,
name|results
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"{} sending synced flush request to {}. sync id [{}]."
argument_list|,
name|shardId
argument_list|,
name|shard
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|SYNCED_FLUSH_ACTION_NAME
argument_list|,
operator|new
name|SyncedFlushRequest
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|syncId
argument_list|,
name|expectedCommitId
argument_list|)
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|SyncedFlushResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SyncedFlushResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|SyncedFlushResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|SyncedFlushResponse
name|response
parameter_list|)
block|{
name|SyncedFlushResponse
name|existing
init|=
name|results
operator|.
name|put
argument_list|(
name|shard
argument_list|,
name|response
argument_list|)
decl_stmt|;
assert|assert
name|existing
operator|==
literal|null
operator|:
literal|"got two answers for node ["
operator|+
name|node
operator|+
literal|"]"
assert|;
comment|// count after the assert so we won't decrement twice in handleException
name|contDownAndSendResponseIfDone
argument_list|(
name|syncId
argument_list|,
name|shards
argument_list|,
name|shardId
argument_list|,
name|totalShards
argument_list|,
name|listener
argument_list|,
name|countDown
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} error while performing synced flush on [{}], skipping"
argument_list|,
name|exp
argument_list|,
name|shardId
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|shard
argument_list|,
operator|new
name|SyncedFlushResponse
argument_list|(
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|contDownAndSendResponseIfDone
argument_list|(
name|syncId
argument_list|,
name|shards
argument_list|,
name|shardId
argument_list|,
name|totalShards
argument_list|,
name|listener
argument_list|,
name|countDown
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|contDownAndSendResponseIfDone
specifier|private
name|void
name|contDownAndSendResponseIfDone
parameter_list|(
name|String
name|syncId
parameter_list|,
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|int
name|totalShards
parameter_list|,
name|ActionListener
argument_list|<
name|ShardsSyncedFlushResult
argument_list|>
name|listener
parameter_list|,
name|CountDown
name|countDown
parameter_list|,
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushResponse
argument_list|>
name|results
parameter_list|)
block|{
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
assert|assert
name|results
operator|.
name|size
argument_list|()
operator|==
name|shards
operator|.
name|size
argument_list|()
assert|;
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|ShardsSyncedFlushResult
argument_list|(
name|shardId
argument_list|,
name|syncId
argument_list|,
name|totalShards
argument_list|,
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * send presync requests to all started copies of the given shard      */
DECL|method|sendPreSyncRequests
name|void
name|sendPreSyncRequests
parameter_list|(
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|,
specifier|final
name|ClusterState
name|state
parameter_list|,
specifier|final
name|ShardId
name|shardId
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Engine
operator|.
name|CommitId
argument_list|>
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|CountDown
name|countDown
init|=
operator|new
name|CountDown
argument_list|(
name|shards
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Engine
operator|.
name|CommitId
argument_list|>
name|commitIds
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} sending pre-synced flush request to {}"
argument_list|,
name|shardId
argument_list|,
name|shard
argument_list|)
expr_stmt|;
specifier|final
name|DiscoveryNode
name|node
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} shard routing {} refers to an unknown node. skipping."
argument_list|,
name|shardId
argument_list|,
name|shard
argument_list|)
expr_stmt|;
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|commitIds
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|PRE_SYNCED_FLUSH_ACTION_NAME
argument_list|,
operator|new
name|PreSyncedFlushRequest
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|PreSyncedFlushResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PreSyncedFlushResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|PreSyncedFlushResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|PreSyncedFlushResponse
name|response
parameter_list|)
block|{
name|Engine
operator|.
name|CommitId
name|existing
init|=
name|commitIds
operator|.
name|putIfAbsent
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|,
name|response
operator|.
name|commitId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|existing
operator|==
literal|null
operator|:
literal|"got two answers for node ["
operator|+
name|node
operator|+
literal|"]"
assert|;
comment|// count after the assert so we won't decrement twice in handleException
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|commitIds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} error while performing pre synced flush on [{}], skipping"
argument_list|,
name|exp
argument_list|,
name|shardId
argument_list|,
name|shard
argument_list|)
expr_stmt|;
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|commitIds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|performPreSyncedFlush
specifier|private
name|PreSyncedFlushResponse
name|performPreSyncedFlush
parameter_list|(
name|PreSyncedFlushRequest
name|request
parameter_list|)
block|{
name|IndexShard
name|indexShard
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|getShard
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|FlushRequest
name|flushRequest
init|=
operator|new
name|FlushRequest
argument_list|()
operator|.
name|force
argument_list|(
literal|false
argument_list|)
operator|.
name|waitIfOngoing
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} performing pre sync flush"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|CommitId
name|commitId
init|=
name|indexShard
operator|.
name|flush
argument_list|(
name|flushRequest
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} pre sync flush done. commit id {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|commitId
argument_list|)
expr_stmt|;
return|return
operator|new
name|PreSyncedFlushResponse
argument_list|(
name|commitId
argument_list|)
return|;
block|}
DECL|method|performSyncedFlush
specifier|private
name|SyncedFlushResponse
name|performSyncedFlush
parameter_list|(
name|SyncedFlushRequest
name|request
parameter_list|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShard
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} performing sync flush. sync id [{}], expected commit id {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|syncId
argument_list|()
argument_list|,
name|request
operator|.
name|expectedCommitId
argument_list|()
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|SyncedFlushResult
name|result
init|=
name|indexShard
operator|.
name|syncFlush
argument_list|(
name|request
operator|.
name|syncId
argument_list|()
argument_list|,
name|request
operator|.
name|expectedCommitId
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} sync flush done. sync id [{}], result [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|syncId
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|SyncedFlushResponse
argument_list|()
return|;
case|case
name|COMMIT_MISMATCH
case|:
return|return
operator|new
name|SyncedFlushResponse
argument_list|(
literal|"commit has changed"
argument_list|)
return|;
case|case
name|PENDING_OPERATIONS
case|:
return|return
operator|new
name|SyncedFlushResponse
argument_list|(
literal|"pending operations"
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"unknown synced flush result ["
operator|+
name|result
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|performInFlightOps
specifier|private
name|InFlightOpsResponse
name|performInFlightOps
parameter_list|(
name|InFlightOpsRequest
name|request
parameter_list|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShard
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"["
operator|+
name|request
operator|.
name|shardId
argument_list|()
operator|+
literal|"] expected a primary shard"
argument_list|)
throw|;
block|}
name|int
name|opCount
init|=
name|indexShard
operator|.
name|getOperationsCount
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} in flight operations sampled at [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|opCount
argument_list|)
expr_stmt|;
return|return
operator|new
name|InFlightOpsResponse
argument_list|(
name|opCount
argument_list|)
return|;
block|}
DECL|class|PreSyncedFlushRequest
specifier|public
specifier|final
specifier|static
class|class
name|PreSyncedFlushRequest
extends|extends
name|TransportRequest
block|{
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|method|PreSyncedFlushRequest
specifier|public
name|PreSyncedFlushRequest
parameter_list|()
block|{         }
DECL|method|PreSyncedFlushRequest
specifier|public
name|PreSyncedFlushRequest
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PreSyncedFlushRequest{"
operator|+
literal|"shardId="
operator|+
name|shardId
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
block|}
comment|/**      * Response for first step of synced flush (flush) for one shard copy      */
DECL|class|PreSyncedFlushResponse
specifier|final
specifier|static
class|class
name|PreSyncedFlushResponse
extends|extends
name|TransportResponse
block|{
DECL|field|commitId
name|Engine
operator|.
name|CommitId
name|commitId
decl_stmt|;
DECL|method|PreSyncedFlushResponse
name|PreSyncedFlushResponse
parameter_list|()
block|{         }
DECL|method|PreSyncedFlushResponse
name|PreSyncedFlushResponse
parameter_list|(
name|Engine
operator|.
name|CommitId
name|commitId
parameter_list|)
block|{
name|this
operator|.
name|commitId
operator|=
name|commitId
expr_stmt|;
block|}
DECL|method|commitId
specifier|public
name|Engine
operator|.
name|CommitId
name|commitId
parameter_list|()
block|{
return|return
name|commitId
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|commitId
operator|=
operator|new
name|Engine
operator|.
name|CommitId
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|commitId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SyncedFlushRequest
specifier|public
specifier|static
specifier|final
class|class
name|SyncedFlushRequest
extends|extends
name|TransportRequest
block|{
DECL|field|syncId
specifier|private
name|String
name|syncId
decl_stmt|;
DECL|field|expectedCommitId
specifier|private
name|Engine
operator|.
name|CommitId
name|expectedCommitId
decl_stmt|;
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|method|SyncedFlushRequest
specifier|public
name|SyncedFlushRequest
parameter_list|()
block|{         }
DECL|method|SyncedFlushRequest
specifier|public
name|SyncedFlushRequest
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|syncId
parameter_list|,
name|Engine
operator|.
name|CommitId
name|expectedCommitId
parameter_list|)
block|{
name|this
operator|.
name|expectedCommitId
operator|=
name|expectedCommitId
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|syncId
operator|=
name|syncId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|expectedCommitId
operator|=
operator|new
name|Engine
operator|.
name|CommitId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|syncId
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|expectedCommitId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|syncId
argument_list|)
expr_stmt|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
DECL|method|syncId
specifier|public
name|String
name|syncId
parameter_list|()
block|{
return|return
name|syncId
return|;
block|}
DECL|method|expectedCommitId
specifier|public
name|Engine
operator|.
name|CommitId
name|expectedCommitId
parameter_list|()
block|{
return|return
name|expectedCommitId
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SyncedFlushRequest{"
operator|+
literal|"shardId="
operator|+
name|shardId
operator|+
literal|",syncId='"
operator|+
name|syncId
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
comment|/**      * Response for third step of synced flush (writing the sync id) for one shard copy      */
DECL|class|SyncedFlushResponse
specifier|public
specifier|static
specifier|final
class|class
name|SyncedFlushResponse
extends|extends
name|TransportResponse
block|{
comment|/**          * a non null value indicates a failure to sync flush. null means success          */
DECL|field|failureReason
name|String
name|failureReason
decl_stmt|;
DECL|method|SyncedFlushResponse
specifier|public
name|SyncedFlushResponse
parameter_list|()
block|{
name|failureReason
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|SyncedFlushResponse
specifier|public
name|SyncedFlushResponse
parameter_list|(
name|String
name|failureReason
parameter_list|)
block|{
name|this
operator|.
name|failureReason
operator|=
name|failureReason
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|failureReason
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|failureReason
argument_list|)
expr_stmt|;
block|}
DECL|method|success
specifier|public
name|boolean
name|success
parameter_list|()
block|{
return|return
name|failureReason
operator|==
literal|null
return|;
block|}
DECL|method|failureReason
specifier|public
name|String
name|failureReason
parameter_list|()
block|{
return|return
name|failureReason
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SyncedFlushResponse{"
operator|+
literal|"success="
operator|+
name|success
argument_list|()
operator|+
literal|", failureReason='"
operator|+
name|failureReason
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
DECL|class|InFlightOpsRequest
specifier|public
specifier|static
specifier|final
class|class
name|InFlightOpsRequest
extends|extends
name|TransportRequest
block|{
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|method|InFlightOpsRequest
specifier|public
name|InFlightOpsRequest
parameter_list|()
block|{         }
DECL|method|InFlightOpsRequest
specifier|public
name|InFlightOpsRequest
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InFlightOpsRequest{"
operator|+
literal|"shardId="
operator|+
name|shardId
operator|+
literal|'}'
return|;
block|}
block|}
comment|/**      * Response for second step of synced flush (check operations in flight)      */
DECL|class|InFlightOpsResponse
specifier|static
specifier|final
class|class
name|InFlightOpsResponse
extends|extends
name|TransportResponse
block|{
DECL|field|opCount
name|int
name|opCount
decl_stmt|;
DECL|method|InFlightOpsResponse
specifier|public
name|InFlightOpsResponse
parameter_list|()
block|{         }
DECL|method|InFlightOpsResponse
specifier|public
name|InFlightOpsResponse
parameter_list|(
name|int
name|opCount
parameter_list|)
block|{
name|this
operator|.
name|opCount
operator|=
name|opCount
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|opCount
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|opCount
argument_list|)
expr_stmt|;
block|}
DECL|method|opCount
specifier|public
name|int
name|opCount
parameter_list|()
block|{
return|return
name|opCount
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InFlightOpsResponse{"
operator|+
literal|"opCount="
operator|+
name|opCount
operator|+
literal|'}'
return|;
block|}
block|}
DECL|class|PreSyncedFlushTransportHandler
specifier|private
specifier|final
class|class
name|PreSyncedFlushTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|PreSyncedFlushRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|PreSyncedFlushRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|performPreSyncedFlush
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SyncedFlushTransportHandler
specifier|private
specifier|final
class|class
name|SyncedFlushTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|SyncedFlushRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|SyncedFlushRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|performSyncedFlush
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|InFlightOpCountTransportHandler
specifier|private
specifier|final
class|class
name|InFlightOpCountTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|InFlightOpsRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|InFlightOpsRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|performInFlightOps
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

