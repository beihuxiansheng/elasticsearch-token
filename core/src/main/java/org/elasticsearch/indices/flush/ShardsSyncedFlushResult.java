begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.flush
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|flush
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_comment
comment|/**  * Result for all copies of a shard  */
end_comment

begin_class
DECL|class|ShardsSyncedFlushResult
specifier|public
class|class
name|ShardsSyncedFlushResult
implements|implements
name|Streamable
block|{
DECL|field|failureReason
specifier|private
name|String
name|failureReason
decl_stmt|;
DECL|field|shardResponses
specifier|private
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushService
operator|.
name|ShardSyncedFlushResponse
argument_list|>
name|shardResponses
decl_stmt|;
DECL|field|syncId
specifier|private
name|String
name|syncId
decl_stmt|;
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
comment|// some shards may be unassigned, so we need this as state
DECL|field|totalShards
specifier|private
name|int
name|totalShards
decl_stmt|;
DECL|method|ShardsSyncedFlushResult
specifier|private
name|ShardsSyncedFlushResult
parameter_list|()
block|{     }
DECL|method|getShardId
specifier|public
name|ShardId
name|getShardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
comment|/**      * failure constructor      */
DECL|method|ShardsSyncedFlushResult
specifier|public
name|ShardsSyncedFlushResult
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|int
name|totalShards
parameter_list|,
name|String
name|failureReason
parameter_list|)
block|{
name|this
operator|.
name|syncId
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|failureReason
operator|=
name|failureReason
expr_stmt|;
name|this
operator|.
name|shardResponses
operator|=
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|totalShards
operator|=
name|totalShards
expr_stmt|;
block|}
comment|/**      * success constructor      */
DECL|method|ShardsSyncedFlushResult
specifier|public
name|ShardsSyncedFlushResult
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|syncId
parameter_list|,
name|int
name|totalShards
parameter_list|,
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushService
operator|.
name|ShardSyncedFlushResponse
argument_list|>
name|shardResponses
parameter_list|)
block|{
name|this
operator|.
name|failureReason
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|shardResponses
operator|=
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|shardResponses
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|syncId
operator|=
name|syncId
expr_stmt|;
name|this
operator|.
name|totalShards
operator|=
name|totalShards
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
block|}
comment|/**      * @return true if the operation failed before reaching step three of synced flush. {@link #failureReason()} can be used for      * more details      */
DECL|method|failed
specifier|public
name|boolean
name|failed
parameter_list|()
block|{
return|return
name|failureReason
operator|!=
literal|null
return|;
block|}
comment|/**      * @return the reason for the failure if synced flush failed before step three of synced flush      */
DECL|method|failureReason
specifier|public
name|String
name|failureReason
parameter_list|()
block|{
return|return
name|failureReason
return|;
block|}
DECL|method|syncId
specifier|public
name|String
name|syncId
parameter_list|()
block|{
return|return
name|syncId
return|;
block|}
comment|/**      * @return total number of shards for which a sync attempt was made      */
DECL|method|totalShards
specifier|public
name|int
name|totalShards
parameter_list|()
block|{
return|return
name|totalShards
return|;
block|}
comment|/**      * @return total number of successful shards      */
DECL|method|successfulShards
specifier|public
name|int
name|successfulShards
parameter_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SyncedFlushService
operator|.
name|ShardSyncedFlushResponse
name|result
range|:
name|shardResponses
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|result
operator|.
name|success
argument_list|()
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
block|}
return|return
name|i
return|;
block|}
comment|/**      * @return an array of shard failures      */
DECL|method|failedShards
specifier|public
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushService
operator|.
name|ShardSyncedFlushResponse
argument_list|>
name|failedShards
parameter_list|()
block|{
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushService
operator|.
name|ShardSyncedFlushResponse
argument_list|>
name|failures
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushService
operator|.
name|ShardSyncedFlushResponse
argument_list|>
name|result
range|:
name|shardResponses
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|result
operator|.
name|getValue
argument_list|()
operator|.
name|success
argument_list|()
operator|==
literal|false
condition|)
block|{
name|failures
operator|.
name|put
argument_list|(
name|result
operator|.
name|getKey
argument_list|()
argument_list|,
name|result
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|failures
return|;
block|}
comment|/**      * @return Individual responses for each shard copy with a detailed failure message if the copy failed to perform the synced flush.      * Empty if synced flush failed before step three.      */
DECL|method|shardResponses
specifier|public
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushService
operator|.
name|ShardSyncedFlushResponse
argument_list|>
name|shardResponses
parameter_list|()
block|{
return|return
name|shardResponses
return|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|failureReason
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|int
name|numResponses
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|shardResponses
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numResponses
condition|;
name|i
operator|++
control|)
block|{
name|ShardRouting
name|shardRouting
init|=
operator|new
name|ShardRouting
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|SyncedFlushService
operator|.
name|ShardSyncedFlushResponse
name|response
init|=
name|SyncedFlushService
operator|.
name|ShardSyncedFlushResponse
operator|.
name|readSyncedFlushResponse
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|shardResponses
operator|.
name|put
argument_list|(
name|shardRouting
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
name|syncId
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|totalShards
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|failureReason
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|shardResponses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushService
operator|.
name|ShardSyncedFlushResponse
argument_list|>
name|entry
range|:
name|shardResponses
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalString
argument_list|(
name|syncId
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|totalShards
argument_list|)
expr_stmt|;
block|}
DECL|method|readShardsSyncedFlushResult
specifier|public
specifier|static
name|ShardsSyncedFlushResult
name|readShardsSyncedFlushResult
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardsSyncedFlushResult
name|shardsSyncedFlushResult
init|=
operator|new
name|ShardsSyncedFlushResult
argument_list|()
decl_stmt|;
name|shardsSyncedFlushResult
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|shardsSyncedFlushResult
return|;
block|}
block|}
end_class

end_unit

